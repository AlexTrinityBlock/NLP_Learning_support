article_url,group,like_count,corpus_title,corpus_day,article_title,writer_name,writer_url,publish_datetime,browse_count,text_content,h1,h2,h3,h4,h5,h6,crawled_date
https://ithelp.ithome.com.tw/articles/10192217,自我挑戰組,0,Drupal8與LineBot水滴機器人的愛與冒險系列,1,一個開始,joshra,https://ithelp.ithome.com.tw/users/20106824/ironman,1513813951000000000,3,"不知道從什麼時候開始，寫作成了夢魘，鍵盤成了厚厚的磚。工作與生活，日以繼夜的資訊轟炸，飛快旋轉的思緒，久久無法降落，無法補捉眼前亂舞的各種想法。
今天是我的生日，就讓這個鐵人試煉，成為自己31歲的生日禮物吧。
聽說要持續寫作，要提早想好主題、想好大綱，然後一口氣完成。
所以第一天，來談談這個鐵人試煉我想要呈現的主題。
工作上經常接觸政府網站，許許多多一再出現的需求，一再出現的問題，總是在忙碌中草草略過。在這個月的試煉裡，我想要涵蓋：
並且在過程中實作一些經常性的需求，以 Drupal 實作可重複使用的小型系統。例如：
期待這個旅程",,['哪些主題？'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192654,Security,0,資安分析師的轉職升等之路系列,2,Day2:十年磨一劍一朝試鋒芒,frankyzyao,https://ithelp.ithome.com.tw/users/20084806/ironman,1513813855000000000,6,"前面提到我面臨職業生涯的重要決定，當時我仔細考慮，下定決心接受挑戰轉職後，有了更大膽的想法：與其做助理協助別人，為什麼不投資自己，成為老闆渴求的專家呢？
於是我更積極地吸收研究所的知識，常常向教授挖寶學習，也善用半個學生的身分參加學校資安社團，享受學生優惠價參與一些資安活動，在一些Meetup和活動中看資安廠商介紹他們的產品和技術，有一次Arbor的SE在台上對DDoS Attack做很詳細的介紹，比教授介紹的還仔細！以往主管時不時來關心大家，問起我的學業，總是以「不錯，可以準時畢業」簡單帶過；現在既然決定投入資安領域，主管的經驗與想法也很有參考價值。例如有ㄧ次主管問起，我順勢問道：「最近在學網站伺服器安全…請問我們公司有架設那些網站？是用什麼工具保護呢？」主管不單回答問題，也和我針對web server做了ㄧ些討論，最後總結：「你提的東西大方向很好，但那些是學校教的工具，不一定適合企業環境，在企業環境裡需要的是… 這部份你有興趣了解，可以請CISO做細部解釋」。如此討論，就好像主管在幫我（免費）上課，真是賺到啦！
至於怎麼培養專業，怎麼爭取認同呢？常常聽到「證照無用論」，其實單純背背題庫考過，真的用途不大。但是以證照測驗內容為方向，穩紮穩打的學習，確實遠比盲目自修有效率。當時我比較幾個不同的資安證照，擬定準備考取ㄧ張初階證照（不需要太多資安經驗），兼具一定的深度與廣度，但偏重廣度而非單一技術性（讓我能對資訊安全有全面的了解），廠商中立性質（Vendor Neutral），偏向管理和技能，熱門且接受度高的證照，所以首先排除CISSP, CISM, CISA等需要幾年相關經驗的中級證照，較注重單一技術層面的CEH，OSCP等也不太適合，考慮SANS的證照考試費用較高（美金$729），更新費用也不斐（美金$429），便選擇以CompTIA Security + 為目標。Security+ 符合ISO-17024國際標準認證；符合美國國防部DoD 8570.1命令的要求；符合FISMA（美國聯邦資訊安全管理法案）的要求，並且被美國國家標準協會（ANSI）官方認可，接受度非常廣，費用也相對較低廉，經過一段時間學習後，覺得內容也很契合我的要求。以往無論是在學校上課、參加研討會、活動等等學到的知識和技術多半是片面、零碎的，之前工作時學到的東西也覺得不相關。Security+ 證照的學習過程中讓我有系統地學習資訊安全的全貌，感覺就像是打下正宗基礎內功底子，融合之前工作經驗，接下來無論在研討會聽到什麼新技術都能快速掌握，在研究所選課也不會有「這堂課到底和資訊安全有什麼關聯」的疑問。
經過這段時間充分學習後，我面帶微笑步出考場。某天主管再找我進辦公室談話時，我默默把手機上CompTIA Security+ 的證書照片給他看，走出辦公室時，勇者鬥惡龍的升級音效在背後響起，正式成為資安分析師Security Analyst啦！
「可惜我來來去去就只會這一招，養兵千日，用在一朝。」荀彧《火鳳燎原》
你有資訊安全的證照嗎？你的第一張證照是什麼？明天將會介紹資安證照，第四天將會正式分享工作上遇到的挑戰。
以下連結提供參考: 這五張都是非常熱門的資安證照
Best InfoSec Certifications (Top 5)
http://www.tomsitpro.com/articles/information-security-certifications,2-205.html",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192640,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,17,17.CognitiveService-圖片文字辨識,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513813478000000000,2,"Step 1. 登入 Azure Portal，點選新增 → 輸入 computer vision API

Step 2. 點選建立

Step 3. 填選相關資料 → 建立

Step 4. 與先前建立文字翻譯服務相同，有詳細的步驟說明，我們一樣先點選 Keys

Step 5. 相同的，我們先記錄下其中一個 Key 等等可以測試使用

Step 6. 開啟API參考文件 ，有列出不同區域API URL，我們選擇的是東南亞

Step 7.文件內描述需要哪些參數、標頭與支援的圖片格式

我們先隨意產生一張圖片：

我們開啟 postman，輸入下列參數：
網址：https://eastasia.api.cognitive.microsoft.com/vision/v1.0/analyze?visualFeatures=Categories,Description,Color&language=en
標頭：
Ocp-Apim-Subscription-Key：your_key
Content-Type：application/octet-stream
撰寫中..","['Computer Vision API 設定', '測試']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192647,DevOps,0,LearnAzuerin30days系列,2,#2-為何選擇Azure,Alan.Liu,https://ithelp.ithome.com.tw/users/20087544/ironman,1513813413000000000,3,"本來想直接進入主題開始發一大堆Azure功能介紹文章,但我認為評估導入與技術考量都比不上說服老闆買單實際,
所以就在開賽第二天舉了顆導入的栗子,來給觀看文章的朋友參考看看
公司內部使用雲端技術需要多方面的需求評估以及長官的支持(Budget&&分析報告)
而我們之所以會選擇雲端服務是因為公司內的業務發展主要於美、歐、杜拜、印度等等的海外地區
遙想剛進入VIVOTEK的時候,我們的官網採用ASP.NET Webform加上自建機房的Serverㄥ
你可以想像著每當海外User點擊你的網頁,接著發出一個Request連到台灣,在回應到遙遠的彼方
一來封包不安全以外,服務連線的效能也大大的縮減網站使用的品質

(圖片來源:https://www.qa-knowhow.com/?p=792)
綜合以上問題讓單位內不時收到來自國外無法連線,或者是Timeout的Server端Error,
甚至是經常發生台灣海纜不穩定、駭客DDOS癱瘓網路,導致外部連線異常等等的特殊情況
於是乎我們選擇了AWS,沒錯是AWS,針對網站架構我們開設了EC2,S3,RDS...等資源並將網站部署於EC2
並不是為了要挑戰雲端品牌的選取!而是評估Azure更適合目前我們網站目前的架構與技術考量

(目前除了網站之外產品的雲端服務還是架構於AWS之上的)
接著是評估時的網站架構:
再導入初期一切都非常美好,的確海外的客戶也減少了大量連線品質的抱怨,
But!問題來了
因為機器放置在美東,台灣的內部使用者開始嫌網站很慢,連線異常
EC2與我們自建機房其實沒有多大的差別,而且VM價格不便宜,所以我們的價層很低
前人開始將部分含有後端程式碼Code通通改寫為靜態html並且放置到S3上(然後他們就離職了..WTF)
原先由Key User利用後台維護的資料,變成開發團隊瘋狂改靜態官網的大量工作
綜合以上原因,經過分析報告與經費申請,我們開始將尚未改為靜態的ASP.NET Webform網站逐步部署至Azure上並進行觀察,實際開始時ASP.NET與Azure不僅有Portal快速地進行部屬的設置,Visual Studio也能夠直接將程式於Azure上頭
這加快了開發人員上線時,不需要遠端到低階VM進行上線流程,我們建置的速度比預估更是節省了非常大的人力
尚有文中服務還在Azure努力的撐著,撐到我們改寫完畢:)
",,['為何選擇Azure?'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192650,ModernWeb,0,前端學習筆記系列,3,這記得「烘焙機」的另一個意思嗎？,stca,https://ithelp.ithome.com.tw/users/20107874/ironman,1513813395000000000,9,"
在 google 上搜尋「烘焙機 homepage」，出現的時間點已經有點久遠了。第一次",,['緣起'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192649,ModernWeb,0,前端學習筆記系列,2,還記得「烘焙機」的另一個意思嗎？,stca,https://ithelp.ithome.com.tw/users/20107874/ironman,1513813356000000000,2,"
在 google 上搜尋「烘焙機 homepage」，出現的時間點已經很久遠了。",,['緣起'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192648,SoftwareDevelopment,0,簡潔高效的PHP&Laravel工作術：從ElementaryOS下手的聰明改造提案系列,10,第10天：在elementaryOS上安裝/設定中文輸入法,shengyou,https://ithelp.ithome.com.tw/users/20107229/ironman,1513813350000000000,2,"當您安裝完 elementary OS 後，應該會發現根本沒有辦法輸入中文。這是大多數人接觸 Linux 時常遇到的難題，也是筆者寫這系列時最常被問到的主題。事實上，Linux 的桌面環境在近幾年的發展下，目前在中文輸入上已經獲得大幅度的改善。只是因為中文輸入法實在太多樣，在每個人偏好不同的條件下，往往在尋找資源上撞壁、不得要領。
老實說，筆者在剛使用 elementary OS 時，針對中文輸入這一塊也的確卡了一段時間。在大量爬文和多次重新安裝系統後，目前已經可以成功地在 elementary OS 上用兩種輸入法輸入中文字。因此，在這一篇介紹裡，就要將這個精煉過的最小路徑提供給讀者們參考。
在開始之前，先讓讀者建立一個基本印象：在 Linux 的世界裡，在作業系統跟應用程式之間處理鍵盤輸入的是輸入法框架 (input method framework)；而我們所熟知的輸入法 (比方說注意、倉頡)，只是運作在這個輸入法框架上的一種鍵組對照表 (table)。換句話說，在 Linux 上要輸入非英文字元的話，要先安裝一個輸入法框架，然後再在這個輸入法框架上安裝自己熟悉的輸入法鍵組對照表。
以目前 Linux 桌面環境的現況來看，主流的輸入法框架有兩個：ibus 及 fcitx，而這兩個輸入法框架上幾乎都可以找到各輸入法的鍵組對照表。從資料上來看 elementary OS 預設的輸入法框架就是 ibus，所以在 elementary OS 上應該只需要安裝和設定自己熟悉的輸入法即可。
可惜的是，筆者照著建議的步驟安裝並沒有成功 (不過還是把當初的參考資料整理在文未的參考資料裡)，反倒是改用 fcitx 後可以成功運作。另外，礙於筆者會的輸入法有限，因此在這篇介紹裡，會以 fcitx 這個輸入法框架及兩個比較常見的輸入法：注音、嘸蝦米來做安裝教學。
由於安裝 fcitx 需要透過官方的 ppa 來源，而 elementary OS 因為擔心第三方來源的軟體在安全性及穩定性可能不是這麼可靠，所以預設是不能增加 ppa 來源的，也就是說不會有 add-apt-repository 這個指令。不過，我們還是可以把這個功能手動安裝回來。請先用快速鍵 Meta+T 打開終端機，並透過 apt 套件管理安裝 software-properties-common 這個套件：
(圖)
接著，就可以增加 ppa 來源：
(圖)
註：有些參考資料提到要安裝 nightly 的來源，不過經過筆者實測，使用 stable 的版本是沒問題的。
然後要記得先更新套件來源後，就可以搜尋/安裝的到 fcitx 套件：
(圖)
有了 fcitx 後，接著就可以安裝自己熟悉的輸入法，以安裝注音輸入法來說，可以考慮使用酷音輸入法，其套件名稱為 fcitx-chewing；若您跟筆者一樣是使用嘸蝦米輸入法的話，要安裝的套件名稱則是 fcitx-table-boshiamy。
(圖)
在這邊要特別聲明，嘸蝦米輸入法的表格檔是有版權的。換言之，若您沒有向官方購買正版版權的話，在 Linux 上使用嘸蝦米就是違法的行為。筆者在這邊呼籲大家務必重視版權。輸入法就像自己的吃的飯、用的電腦，是生活必需品、是生財工具。從您打字的數量、增加的生產力和省下的時間，購買授權的費用真的不算多，也是支援這個輸入法的未來開發。筆者以身作則，每一個作業系統都有買一套正版授權。
安裝好 fcitx 輸入法框架及輸入法後，最後就要設定 elementary OS 使用 fcitx 做為預設的輸入法框架。這步驟需要在終端機內使用 im-config 指令完成觸發設定程式：
(圖)
輸入指令後，就會觸發設定程式啟動，並出現以下畫面：
(圖)
請直接點選確定 (OK)，接著下一步：
(圖)
由於我們要修改設定，請點選確定 (Yes)，接著選擇 fcitx：
(圖)
確認設定沒問題後，點選確定 (OK) 結束設定程式。
(圖)
完成後要重新登出再登入，或是果斷一點直接重開機。
再次進入桌面後，在面板上應該就可以看到鍵盤的圖示，請選擇設定 (Configure)：
(圖)
在輸入法的部份，請按左下角的 + 號來新增輸入法：
(圖)
選擇自己熟悉的輸入法後按確定。
(圖)
完成後就可以用 Ctrl+Space 切換輸入法開始輸入中文啦！
(圖)
不知道這樣有沒有改變您長久以來對 Linux 中文支援的印象呢？對您有幫助的話麻煩幫我按個掌聲。您是哪一種輸入法的愛好者呢？歡迎在留言裡跟我交流！",,"['先談輸入法框架', '安裝 fcitx 框入法框架', '安裝輸入法', '設定 elementary OS 使用的輸入法框架', '參考資料：']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192601,自我挑戰組,0,ArasPLM開發練功30天系列,17,[Day17]ArasVault檔案櫃設定案例,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1513813316000000000,3,"今天來分享一下最近在Aras Vault檔案櫃的案例
正常的Vault流程，同一網段的檔案下載執行過程

不同網段間的檔案下載執行過程

當Client執行ServerEvent執行checkout檔案下載時，Server會尋找User檔案櫃位址，接著去請求檔案下載回server，結果在不同網段時會請求失敗。原因是一般在Client端執行檔案下載會經過轉址，但Server程式執行時已經不經過轉址。

如果要在server端checkout檔案，並複製到其他檔案伺服器，必須確保Vault伺服器可以被透過port80連線，即使 AP Server與 Vault Server同一網段，還是有可能因為使用者設定造成連線失敗。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192417,ModernWeb,0,前端學習筆記系列,1,還有人記得「烘焙機」的另一個意思嗎？,stca,https://ithelp.ithome.com.tw/users/20107874/ironman,1513813309000000000,2,"
在 google 上搜尋「烘焙機 homepage」，出現的時間點已經很久遠了。",,['緣起'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192635,自我挑戰組,0,自我挑戰日記系列,15,CSS：box-reflect顛倒文字,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1513813270000000000,4,"今天要作文字的變化
除了水平、垂直、旋轉移動之外
CSS還可以作出顛倒的字、圖

除了文字、圖像生成在下方的顛倒還可以換成是生成在上方或左右
以及可以用漸層生成背景和遮罩選擇性遮掉
參考來源：
https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-box-reflect
接下來要把文字彎曲作出弧形
或是作成像是繞圓一樣時
就需要使用到 jQuery

radius 的數值愈小弧度愈大

參考來源：
https://codepen.io/zambo/pen/jKEDp
--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192439,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,16,16.常見的軟體架構—MVC(待補完),依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1513813118000000000,8,"筆者OS: 雖然己經欠了六篇文章的內容，還是先趕完這篇文章，再回補之前的內容。
關注點分離（Separation of concerns，SoC）是對只與「特定概念、目標」（關注點）相關聯的軟體組成部分進行「標識、封裝和操縱」的能力，即標識、封裝和操縱關注點的能力。是處理複雜性的一個原則。
由於關注點混雜在一起會導致複雜性大大增加，所以能夠把不同的關注點分離開來，分別處理就是處理複雜性的一個原則，一種方法。
上面是 wiki 對關注點分離的說明，用筆者的話來說……
關注點分離，就是將交錯著各種目的的複雜程式碼，依程式碼的概念、目的，進行分類、篩檢、整理。讓高複雜性程式碼切割、轉換為簡潔易懂的單純性程式碼。
其好處是將特定領域的程式碼與商業邏輯切割，使其獨立處理。進一步的，讓程式碼本身的目的單純化。這個動作，筆者認為跟 SOLID 中的 SRP 有異曲同工之妙。
同時，關注點分離，不僅讓協作程式開發的可能性大大的提升，也讓軟體的維持與改版成本變的更低。
Model–view–controller (MVC) is a software architectural pattern that divides a given application into three interconnected parts. This is done to separate internal representations of information from the ways information is presented to, and accepted from, the user. The MVC design pattern decouples these major components allowing for efficient code reuse and parallel development.

所有的軟體架構，都是為了解決特定問題或情境的方案。 當問題或情境有所變動時，軟體架構必然也會有所變異。
對筆者而言，MVC 就是基於 SRP 延伸出來的框架，但 MVC 只是一個概念與原則，並非絕對或一成不變的。在實務上，一定會因應實際需求，而有所調整。所以才會從 MVC 去衍伸出 MVVM、MVP 的軟體架構。",,"['1. 關注點分離', '2. Model-View-Contorller, MVC', '3. 後言', '4. 推薦']",,"['2.1 Model', '2.2 View', '2.3 Controller', '4.1 文章']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192620,自我挑戰組,0,30天!搞定一個網站系列,1,Day1-挑戰說明+自介,ericayoyo,https://ithelp.ithome.com.tw/users/20106434/ironman,1513813035000000000,7,"初衷
會想來參加鐵人賽挑戰是因為從以前現在都只有在做網頁程式開發學習,
但在做專案時發現缺乏規劃再執行的話～完成的網頁會亂七八糟
挑戰目標
在30天內規劃並撰寫出一個多功能網站
預計每天針對一個不同主題來實行
使用語言
基本使用 Html,Css,Javascript 語法做撰寫
後期看狀況加入 RWD 等優化方式
希望自己能每日一文達標
跟著一起來30天完成一個網站吧！！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192641,自我挑戰組,0,LaravelEcho架設聊天室系列,1,環境安裝,recca0120,https://ithelp.ithome.com.tw/users/20065818/ironman,1513812838000000000,8,卡位,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192623,SoftwareDevelopment,0,做一個JVM語言系列,3,Antlr環境設定,timloo,https://ithelp.ithome.com.tw/users/20045230/ironman,1513812819000000000,9,"Antlr 的文件，只有設定寫的最詳細，再來的使用就很少範例，從出書的2012年到現在，
網上可Google到的sample code依然不多, 而且Antlr被移植到多種語言去，像很紅的C#, Python, JS, 仍然很少sample code，所以要用Google 到sample code來寫Antlr程式的人, 可能要失望了。
筆者推敲，有能力寫語法編譯器的人，可能有不少是受孔龍書的影響，喜歡手寫語法方析器。
像強國的牛人，去年寫了一個拿鐵語言，他的語法方析就是手編的，
比較沒引用像Antlr這類的工具輔助。
目前最多的範例，大概就在Antlr的官方手冊裏，簡體中文版是ANTLR 4權威指南，是以JAVA語言做範例練習。
簡單的跑一遍設定，
首先要裝JDK, OPEN JDK也可以。
基本上和官網寫的一樣，
OSX和LINUX 的設定一樣。
這樣寫是有Quick Start的暢快，但是每次（關機/開機）要練習的時候，
還要再設定一次，從Quick Start變成Slow Start了，
所以可以把
寫在個人家目錄的 .bashrc , 這樣就會記憶，不用重打。
新增一個目錄，叫Expr.
在裏面寫一個文法檔，叫Expr.g4
裏面的內容，抄自官網，
存檔後。
在此目錄下，打指令
antlr4 Expr.g4
這時目錄下，會產生一些檔案，
Antlr 解析 Expr.g4產生一些類別，Lexer，Parser 這些類別，就負責相對應的工作，可WIKI一下，
之後的程式，就是繼承這些類別來做些事。
然後 ，編譯這些JAVA檔，
javac Expr*.java
然後看文法樹。先輸入
grun Expr prog -gui
再輸入
100+2*34
最後再打 ctrl+d
就會秀出文法樹，可以另存PNG檔。

因為沒寫任何CODE, 所以它只會解析100+2*34，不會計算。
小結：Antlr 專注於按照文法檔（*.g4）來自動產生相對應的CODE，
所以學習上，有兩大方面，一是文法檔如何寫，二是如何繼承工具類別來寫CODE.",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192639,自我挑戰組,1,使用PHP串接金流相關API系列,10,Day09-Linepay(7)支付API,royal801991,https://ithelp.ithome.com.tw/users/20107301/ironman,1513812726000000000,15,"持續發燒中...
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192367,SoftwareDevelopment,0,重修JAVA三十天系列,1,第一天JUnit入門,rocktsuki,https://ithelp.ithome.com.tw/users/20085669/ironman,1513812661000000000,16,"在開發的這些日子裡，有一段時間總是讓人覺得艱難，那就是要上線的前一刻。因為我們可能手動測了很多，卻總是覺得好像還漏了些什麼而感到不安；既使上線成功，也難保發生意外狀況時我們可以在最快的時間內解決，為了解決不安的心情，多一點勇氣執行部署，所以重修就從測試這門科目開始，期望能透過自動測試，解放手動消耗的人力、時間及資源。
在JAVA的領域裡，談到測試框架，JUnit是最多人使用的，它可以幫助我們編寫單元測試、整合測試等，並有測試分類、測試運行器等功能，雖然近期大更新發展到了5.0版本，但在這裡會先使用JUnit 4.12的版本來進行演練。
資料夾的配置如下，並包含gradle的建構設定檔：
再來要將JUnit的套件庫引用進來，過程中除了使用IDE來進行測試以外，也會透過gralde這樣的建構工具來執行。以下進行gradle的配置：
build.gradle
使用testCompile引入的套件只有在測試的時候才會用，未來如果有需要執行上線包版，則不會把junit包到WEB-INF/lib底下。
接下來，就來建立一個可執行的測試吧。
首先到路徑src/test/java底下，建立我們的第一個測試類別：
這裡有三點要注意
然後，建立我們的第一組測試案例，通過@Test標註在public void方法上來達成
我們可以透過以下兩種方法執行
IDE內建功能執行，這裡使用Intellij示範
透過gradle執行測試，使用command line
以上測試執行結果都是綠燈通過，這是因為目前編寫的測試並沒有執行斷言(Assertion)或者有Exception的拋出。
注意到使用gradle進行測試，預設是不會拋出任何System.out的訊息的。
今天就先到這裡了，謝謝閱讀。
wow，最簡單的第一篇文章就花費了我好多時間編寫阿，希望接下來能漸入佳境阿～",,"['JUnit介紹', '準備', '建立測試類別與測試案例', '執行測試與查看結果']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192636,自我挑戰組,0,蚵蚵攻城記系列,10,先卡個位,azer19890427,https://ithelp.ithome.com.tw/users/20107340/ironman,1513812377000000000,16,先卡個位,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192634,自我挑戰組,0,"Let's""Go""系列",15,Day15　DataTypes,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1513812127000000000,17,待補,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192630,自我挑戰組,0,,17,[未完成]其實今天才把抓資料的程式寫了60%,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513812095000000000,30,"今天弄了兩個多小時，才使用PHP搞定了抓資料這件事情
畢竟還有存資料庫這個動作
也是挺麻煩的",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192327,DataTechnology,0,DataSciencewithAzure系列,2,[02][MachineLearning-推薦系統]演算法介紹,bymiachang,https://ithelp.ithome.com.tw/users/20103632/ironman,1513812084000000000,30,"
前情提要: 昨天在[Machine Learning - 推薦系統]使用情境已經學習了站在使用者以及商家的角度思考推薦系統的使用情境。也註冊了Azure ML的帳號。今天將帶大家看一下關於這個演算法的細節。
一般來說推薦演算法可以從 4個方向 去著手：
1.人口平均數(Population Averages)
最簡單的推薦引擎使用的是人口平均數。基本上拿一部電影的所有評論，計算它所得到的平均分數。如果平均評分高於某個門檻，例如80%，我們可以推薦這部電影給我們的用戶。
在機器學習的領域裡，我們經常使用不同數據當作門檻，作為做決定的準則，這個門檻被統稱為域值Threshold。
這個方式相對來說簡單，但可能無法公平表現一部電影的水準。例如說，我是一位動作電影的愛好者，對於動作電影我可能會給出高於一般人的評分。若資料庫裡的人都是喜愛這類型愛好的人居多，這樣動作片的平均分數可能會高於一般大眾會給的分數。
2.基於內容化推薦(Content-based)
這個算法嘗試推薦用戶過去喜歡的物品類似的東西給使用者。這個基於內容的推薦方法主要從物品的描述和用戶偏好做計算。使用關鍵字或是特徵來描述物品，並且從用戶的資料來對照用戶喜歡的物品種類。
3.協同過濾(Collaborative filtering)
如果一個人A在某個問題上與某個人B有相同的意見，那麼在另外一件事情上，A比隨機另一個人更有可能和B有一致的看法。

4.圖模型(Graphical Models)
雖然使用基於內容和協同過濾的方法效果很好，但它有兩個基本的假設。
第一個，用戶的選項是靜態的，不會隨時間而改變，第二，用戶物品之間的關係很簡單。事實上的情形可能遠比這個還複雜，因此圖形模型有助於為上述兩個假設提供解決方案，例如馬爾可夫結構(無向圖)可以從推薦系統中用戶偏好的時間方面，如果使用有向圖來呈現，則結合了Bayesiannetworks的理論在其中。
而Azure Machine Learning裡面的演算法，則是結合2(Content-based)和3(Collaborative filtering)。
在Azure ML Studio當中，你可以在左手邊的工具列找到：

這三個module，你可以把它想成是不同的積木，透過拖拉式的方式建立一個推薦模型。而每一個積木都有它使用的方式，透過用滑鼠滑過畫面中的圓點，則會顯示相關的提示訊息。在實驗進行過程當中如果發生錯誤，則可以透過錯誤訊息以及module上的提示訊息，例如要放哪些input，以及其output的類型，來幫助偵錯。

在推薦系統中：

Train Matchbox Recommender 會需要設定幾個參數：
Number of traits
訓練模型的時候會看的使用者和物品的特徵個數，一般會落在2-20當中。
越多會越準確，但也會造成計算速度越慢。
Number of recommendation algorithm iterations
Matchbox演算法可以在輸入的資料上迭代多次。這個數字越高，預測越準確，
但是，訓練會比較慢。通常，迭代次數在1到10之間就能夠有不錯的表現。
Number of training batches
在訓練期間劃分數據的批次數。系統預設值是4。
批次的數量應設置為：訓練資料適合內存的可用核心數量的最低倍數。
實際執行時，只有在user-item-rating的數據集被拆分。
一般用戶與物品配對功能不會被拆分。
好的，我們今天的介紹大概到這邊。
明天會帶大家繼續看怎麼設定Score Matchbox Recommender和Evaluate Recommender。
Reference
1.Building recommendation engine for .NET applications using Azure Machine Learning
2.机器学习中的图模型
3.[系列活動] 人工智慧與機器學習在推薦系統上的應用
4.Train Matchbox Recommender",,"['推薦系統的類型', 'Azure ML 演算法的使用方式']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192633,ModernWeb,0,UserInterfaceDesignPatterns的學習歷程系列,1,[未完成]Slide、Carousel、LightBox,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513812010000000000,22,這三樣設計pattern大家應該經常會用到,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192632,SoftwareDevelopment,0,Markdown由淺入深系列,1,[未完成]iT邦幫忙的文章編輯器也選擇使用Markdown語法,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513811949000000000,20,其實使用 Markdown 的平台非常非常多,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192615,自我挑戰組,0,金韶獎官方APP開發（聊天室、群組建立）系列,1,金韶獎官方APP開發（聊天室、群組建立）Day1,benson52863,https://ithelp.ithome.com.tw/users/20107466/ironman,1513811912000000000,22,,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192631,自我挑戰組,0,小小網站工程師的經驗分享系列,1,真的是轉眼又一年了，又到了鐵人賽的時候,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513811876000000000,23,"這一年覺得自己有所成長，但是又沒有自己想像的多
因為部落格文章寫得少了，整理資料的時間也沒有想像中的多
就把自己今天曾經遇到的一些問題整理整理成文章給大家看吧
或是一些自己的想法，雖然也是沒有實做的東西而已
今年覺得比較棘手的幾個問題與印象深刻的經驗分享：
ubuntu 12.04的升級問題，特別是信箱部分的升級轉移
PHP5 升級到 PHP7的問題
MySQL的自動備份問題
使用AWS寄信的一些經驗分享
用PHP寫parser的經驗分享
Cloudflare的使用心得與SSL設定經驗
Wordpress的使用心得
RWD的製作心得
大致能快速想到的應該就是這些
大概可以寫個20篇文章吧
剩下10篇文章的主題就之後再說吧",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191323,自我挑戰組,0,淡江大學金韶獎官方APP系列,1,淡江大學金韶獎APP:Day1-大致功能介紹與使用技術,jacky860328,https://ithelp.ithome.com.tw/users/20107430/ironman,1513811815000000000,33,"我曾經也是淡江大學金韶獎的公關長，如今也成了金韶獎的外包廠商，感覺真的非常微妙！
首先，金韶獎是個以歌唱與創作為主的全國性比賽，先前使用的網路行銷工具太過分散，使用者往往無法在同一個平台上得到所有資訊，金韶獎官方也需要支付個平台行銷費用。有鑒於此，淡江大學金韶獎官方APP即將上線啦！
以往的金韶獎：
FB粉絲專頁：(https://www.facebook.com/thejinshaow/)、
官方Line、
官方帳號（http://jinshaow.weebly.com/38364260443732938902.html）
全新的金韶：
All-in-one APP
我們將會開發一款結合金韶各項資訊、參賽報名、人才招募、聯絡參賽者等等合而為一的APP，將會節省主辦方形式上的困難、消耗在個平台上的成本、參賽者資訊取得複雜的問題。
運用技術：
前端：HTML5、CSS3、Javascript
後端：Firebase雲端資料庫
分工：我們開發團隊有三個人，
分別是：
1.網頁程式建置
2.聊天室、群組建立
3.後端資料庫建置
敬請期待我們的成果哦！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192557,ModernWeb,0,我的UI/UX奮鬥屎系列,1,從電子商務到微了解UI/UX/前端,aflect,https://ithelp.ithome.com.tw/users/20107842/ironman,1513811799000000000,25,"我先打起來放著 為什麼發了三次都出不去
呱吉吃大便",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192457,自我挑戰組,0,專案學習的30天系列,4,Day4-為了誰做專案-PM,馬達,https://ithelp.ithome.com.tw/users/20107754/ironman,1513811551000000000,11,"專注於市場、客戶、後端人員、專案流程、企劃....，追求一種可以滿足各面向的能力，最重要的就是「要有母愛精神」，最終目的就是照顧好所有寶寶，就會有更多寶寶要你照顧，神一般的存在，然後下個老闆就是你
客戶的陳列是

來源：https://tw.yahoo.com/
解決：先做出樣板，讓客戶確認，再製作屬於共同可接受的版本
從PM的角度來看，是為了整合而做專案，透過跟客戶和技術人員的互動，會漸漸了解雙方的世界，進而成為兩邊的橋樑",,"['PM', '菜逼八第一次專案心得，若不盡不詳之處還請包涵，若有其他想法也請大神們不吝指教']","['精神', '公司責任', '實際問題', '為了誰做專案']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192566,ModernWeb,1,ａｅｓｔｈＥｔｉｃ，ＣＹＢＥＲのａｕｄｉｏ/ＶＩＳＵＡＬ，網頁中的聲音與影像研究系列,1,§ｄ１§錐細胞衝擊！放射系宇宙！用Three.js的particlesystem當C11平行時空的Rick吧！,vibertthio,https://ithelp.ithome.com.tw/users/20107828/ironman,1513811466000000000,54,"廢話不多說，先來個 demo！
祝ＣＹＢＥＲの ａｕｄｉｏ / ＶＩＳＵＡＬ開張大吉。
大部分的技術性系列文章不免俗的都要從技術的各種基礎知識開始講起，但是這邊不採用這種方式。因為從思想解放與ａｅｓｔｈＥｔｉｃ的觀點來看，modern web 裡面的可能性已經不是三言兩語講得完的向度。無限的吧。哇！
除了快點動動手指頭打個源代碼來安慰自已寂寞的心靈以外，對我而言，最重要還是動動小腦筋想想這個美麗的寶島還缺少了什麼愛，像台灣是對於 WebGL 的愛，還有文創產業。哈哈說個笑話。簡單來說，老斯今天想要講得就是如何做一個星空。相信星空大家應該都沒去過，但應該都看過。根據希臘古人說過，星空看起來應該是一個繞著地球轉的圓球，上面鑲嵌著許多閃亮的星星。豪氣！今天就來做星星！

一閃一閃亮晶晶，滿天都是小星星。看來我需要找一個 particle system 來開始改吧。你問我什麼是 particle system，我就會說：「就是很多的粒子囉。」只要曾經碰過一些畫圖 library 的人就會知道，當你想要用 for loop 來畫一千顆粒子跑來跑去的時候，會覺得很美。但是想要多一點的時候，就發現電腦風扇很涼。沒錯，你猜得沒錯，我需要一套利用 GPU 來算圖 (render) 的 particle system。我來找找看！
Yo！我找到了！
這回合我覆蓋一張陷阱卡，使用魔法卡「Three.js」！先不要管他怎麼做到的，用就是了。
這個 example 有點像是流星，遇到大氣層之後受熱產生碎屑的樣子。右上角的控制區還可以，潮棒的！把 lifetime 調長一點就會多些 particle、turbulance 開大一點就會像是風很大！下一步就是把這個 example 分離出來，以方便清洗。
這個就是我整理的 file structure。
先到 three.js 的 repo 裡面去找 examples 的資料夾，並把下面那個webgl_gpu_particle_system.html的檔案改成index.html（其他的就是跟他資料夾類似，只是把沒用的東西清掉），接下來就是 serve 這個資料夾。喔對了，希望大家都有自己使用 local server 的方法，我自己是使用 serve。沒問題的話應該會看到下面這樣，用 scroll 可以 zoom in/out，用 drag 可以旋轉鏡頭角度：

來玩玩看這個系統。
在index.html裡面，前面落落長其實只不過是設定一堆東西，相信只要耐心閱讀 doc 就可以理解。實際源代碼的執行就是下面這兩個函式，init設定環境，而animate裡面則進行requestAnimationFrame( animate );讓畫面不斷進行。
而仔細看一下就會發現，在animate裡面：
這一段負責產生粒子們，每個 frame（就是執行一次 animate 的過程）會產生 spawnerOptions.spawnRate * delta顆粒子。也就是說，只要改變options就可以控制粒子狀態了！
將上面提到的設定位置的那幾行 comment 掉，自己 DIY 把粒子射出來！哇！是三角函數欸！小朋友們，還記得球要怎麼用參數式表達嘛？

寫個 function 產生options.position：
並在每次射出的時候：
可能你覺得這樣看起來還不太像，那我們就來調整一下初始參數：
喔！星星數不清。

仔細看，那是個銀河系吧？為什麼 random 產生的星空會有銀河系，難道是外星生物存在的證據？把他們的座標放進地球的隨機參數裡面嗎？拉遠了來看才發現，原來是球兩極聚集了許多粒子。動動小腦筋，原來是 random picking 的問題啊！

消滅銀河系行動就此展開：

少男少女們！開啟全螢幕，接上投影機在天花板打上星空孤單的流淚吧！
心中想講什麼，我就把它說出來。明天繼續創世紀，試試使用其他數學模型的實驗。
聲音方面，該來的會來。",,"['吉祥話', 'Particle System', '環境建立', '探索流星源代碼 Trace Code', '宇宙是顆球的話', '神秘銀河系', '請愛ＣＹＢＥＲの ａｕｄｉｏ / ＶＩＳＵＡＬ']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192541,自我挑戰組,0,用laravel尻出自己形狀的linebot，還要撐三十天！系列,15,【第十五天】我們來對話吧！,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1513811330000000000,14,"在我們和自己的機器人對話之前，先把昨天提到的twitch實作吧！先熱熱手！
恩～看來不像想像中的順利，再仔細看的時候發現了這個！

所以我們又找到了他的API！
沒錯！又是一個新的玩具！那我們就用他提供的API來完成我們的需求吧！
看來進度又多Delay一天了
那就先來註冊拿Client吧！ 點我


接著！直接看這份文件！
千萬別在新版API上逗留！他是時間小偷啊！
簡單說，以新版API我們無法從channelName就GET到我們想要的資訊！
所以API要怎麼打呢？
以實況主nightblue3為例子，打出來的API會是長這樣！
那我們再用一個目前沒開實況的小熊為例子
這樣就可以分辨出是否有開實況的差別了！
那我們來試著整理出一份它的Service吧！
-----------PR待補-----------
今天時間都被小偷偷走了可惡！
等Twitch串接完後我們來試著用些方法來把我們寫的一些漫畫追蹤清單和實況追蹤清單（hard code）給處理掉吧！
處理的時候我們要先找找一些東西，有興趣的可以先參考：",['【第十五天】我們來對話吧！'],,['雖然他說Twitch API v5只支援到2018年年尾！但反過來說我們可以有整整一年都可以用這隻API用妥妥的！'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192543,ModernWeb,0,Nest.jsframework30天初探系列,17,Nestjsframework30天初探:Day16SQL(Sequelize)PART2,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1513811317000000000,9,"要注意一下findOne()這方法，只要找到一筆資料就會立即回傳，不會繼續往下找，所以我where Name = Mary 是不會傳兩筆資料的。
以上簡單的SELECT 情境已經實現，明天再完成create、update、delete。
程式碼都在github
待續...",,['SQL (Sequelize) SELECT 部分'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192621,DataTechnology,0,DataScience到底是什麼-從一個完全外行角度來看系列,2,[DataScience到底是什麼從一個完全外行角度來看][02]DataScience是什麼？,AlanTsai,https://ithelp.ithome.com.tw/users/20083151/ironman,1513811246000000000,17,"
圖片來源：https://pixabay.com/en/books-spine-colors-pastel-1099067/ 和 https://pixabay.com/en/math-blackboard-education-classroom-1547018/
如果說資料（data）和石油一樣是最有價值的資源，那麼Data Science就同等於從原油提煉出石油的技術。
上篇([01]開篇)了解了整個系列的內容之後，這篇來了解一下 Data Science 到底是什麼？需要什麼技能/技術？和到底怎麼把data提煉出來變成可以用來做使用的資訊（變成石油）。
同步發表於我的部落格：http://blog.alantsai.net/2017/12/data-science-series-02-what-is-data-science--what-skill-is-needed-and-what-do-they-do.html (部落格的格式會漂亮一些，ithome不支援html好不方便）
在介紹Data Science之前，要先了解的是最後的成果是什麼？像原油變成石油一樣，最後石油是最主要能源之一，因此非常有價值，那麼Data最後到底變成什麼可以和石油一樣價值？
依我的理解，Data提煉出來搭配Machine Learning最後的結果是建立出一個預測模型（Predict Model）。想象一下，我們常常說，世上沒有後悔藥，為什麼需要後悔藥，因為你看不到未來會發生什麼事情。
如果你可以看到呢？或者說不需要很明確只需要把你的選擇正確的幾率提升幾個百分比，那優勢已經是無法估計。
所以，決策者可以依照Predict Model制定自己的策略，把優勢抓在自己這邊，打敗不確定性（Uncertainty）。
如果對於Predict Model還是有點模糊，那麼換個角度來看這個事情。
大家都聽過孫子兵法，在我來看，簡單來說，孫子兵法就是一個基於經驗總結（Data），經過孫子處理過而得到的一個作戰守則（Predict Model衍生出的策略）。
其實孫子兵法不是在教大家如何以少勝多 - 畢竟當你是少的時候就算贏也是慘勝，他其實教的是如何在各個小戰役裡面以多勝少，等到次數多了，優勢的傾斜會越來越大直到最後勝利。
Data Science 為什麼會夯起來？
其實從Data提煉可用的資訊出來並不是一個新的概念，一直以來都有相關研究在這方面。例如 統計，data mining等等，都是想要用現用資料來了解情況或者預測未來。
那既然已經有了，為什麼現在會多出那麼一個詞呢？
其實一切會夯起來，完全是因為Big Data （大數據）。
舉個簡單例子，大家都知道瞎子摸象的故事，一些人看不到，加上大象太大，所以他們依據自己摸到的部分來推論大象是什麼。
摸到身體的說，它是一面墻壁，有些人摸到耳朵，然後說它是像一面扇子等等。但是沒有一個人摸到全部，所以沒有一個人對大象的描述是對的。

瞎子摸象，資料來源：https://kknews.cc/news/pq4oqaj.html
如果停一下，想想這個故事，因為大家沒辦法看到整個大象，因此大家的解讀都有偏差，如果反過來說，假設大家可以看到整個大象，那麼是否解讀就會正確（至少從相對的角度來說）呢？
學過統計的知道，有個概念叫做sampling（隨機抽樣），為什麼要做sampling呢？因為整個母體（全部的資料=整個大象）太過於大量無法處理（瞎子無法摸到），所以多多少少都有失偏頗（就像有些人覺得大象是面墻一樣）。
因為現在技術有辦法處理大量資料（就像如果瞎子突然看得到了），那麼對於整個預估是否會更準確呢？
所以，Data Science 會夯起來，完全是因為 一直有需求，而直到現在才有技術有辦法支持達到效果。
既然知道為什麼Data Science會夯起來，來看看整個為什麼會夯起來。

幾個推動Data Science的技術
首先，在中間的部分是資料分析的部分，也是實際的核心，因為我們要用資料分析來了解資料。
如上面提到，當數據大起來的時候，越能夠看到整個全貌，因此Big Data非常重要。
能夠處理大數據之後，可以把大數據清理乾淨，搭配Machine Learning可以建立出準確的predict model。這些Predict Model可以放在Internet Of Things（IoT）讓這些IoT的機器做出更好決策，也由於有這些IoT，可以收集到更多數據。
數據更多，用Machine Learning建立更好的模型，IoT越方便 - 這個是一個一直循環的過程，到最後如果完全可以自動化，是不是Predict Model會越來越準確？
到目前為止，看到了為什麼Data Science會夯起來，整個的整體環境讓整個資料分析處於一個正循環的狀況，那接下來就是，要當一個Data Science需要什麼能力？

Data Science Venn Diagram。來源：https://ion.icaew.com/itcounts/b/weblog/posts/theaccountinganddatascienceworldsmeet
網路上有個非常有名的Data Science Venn Diagram，告訴我們Data Science需要什麼能力，基本上需要3個領域：
題外話：這個其實和我們說的通才或者pie 人才是一樣概念，只是專才是不夠的......
做Data Science的人稱為 Data Scientist （資料科學家），而基本上都是和資料打交道，整個流程大概如下：

Data Scientist的日常
首先都是有一個問題（需求）的產生
開始收集相關data
data基本上都需要經過處理，例如轉型、清理髒資料等
依照這些資料建立predict model
驗證predict model是否準確
沒問題就發佈出去實際使用
基本上 百分之80%的時間都是都是在資料收集和資料處理。
machine learning基本上就是第4步和第5步。
這些步奏不一定是順序執行，很有可能會跳來跳去，甚至直接就放棄某個問題而直接換一個問題。
接下來這個系列會把每個步奏都和大家介紹一下。
這篇把整個Data Science做了一個簡單的介紹。
希望透過這篇能夠了解到為什麼Data Science很重要，需要的技術和日常主要在處理什麼事情。
在下一篇將會介紹最底層的推手，讓一起別的更加準確的技術，最重要的資源 Big Data。
工商服務
今年的團隊機制不知不覺就集合了10位隊(坑)友 - 大家幫忙多多關注別不小心我們就gg了 XD
** 一群技術愛好者與一名物理治療師的故事 提醒著我們 千萬不要放棄治療 **
沉浸於.Net世界的後端工程師，樂於分享，現任台中Study4成員之一。除了程式以外，就愛看小說。
歡迎有任何問題或者建議都可以告訴我，可以再以下找到我：
部落格：Alan Tsai的學習筆記
我的Linkedin
我的粉絲頁
我的github
我的Slideshare
我的Twitter",,"['Data為什麼可以變成和石油一樣有價值的資源？', '推動Data Science的幾個技術？', 'Data Science 需要有哪方面的知識？', 'Data Scientist 的日常工作', '結語', '小小介紹我們團隊成員', '小小的自我介紹']",['以孫子兵法為例'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192607,SoftwareDevelopment,0,AndroidArchitecture系列,1,前言,Ivan,https://ithelp.ithome.com.tw/users/20103849/ironman,1513811207000000000,17,"Google於2017 I/O發表了Architecture Components library，旨在協助開發者解決常見的lifecycle問題，並更容易實踐關注點分離及data-driven的設計模式，寫出「robust, testable, and maintainable」的app。
Architecture Components是一系列library的總稱，包含ViewModel、LiveData和Room資料庫等，各司其職解決開發過程中常見的問題，可以整套一起使用也可以依需求個別選用。
系列文章將以實作Architecture Components為主並用Google的GithubBrowserSample為藍圖，對各個library從基礎寫法開始，搭配Dagger 2和RxJava 2陸續發展至進階的用法及test case，完成一個如下圖官方建議架構的縮水版GithubBrowser。

　　　　　　　　　　　　　　　Guide to App Architecture
由於官方文件和大部分的sample都是用java寫的，所以實作的過程我們也用java方便大家參考其他資源，最後時間夠的話再來轉成Kotlin看看兩者差異。
會使用的library：",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192617,DataTechnology,0,30天python雜談系列,1,python動態型別雜談之一———前言與動態型別解釋,shnovaj30101,https://ithelp.ithome.com.tw/users/20107274/ironman,1513811206000000000,11,"當初會知道這個比賽是我一個社團朋友傳給我的，稍微猶豫了一兩天就決定入坑了，在過程雖想著30天30篇文實在是一個馬拉松阿，但對於我這麼一個從沒在網路上寫過教學文的假程式設計師，既是一個不一樣的體驗，又能稍微跨出一點舒適圈，把自己拙劣的理解整理成30篇文章，似乎是一個難得的機會，所以還是決定參加了。
當然還是可以輕鬆寫得過且過的寫XD，但是既然參加了，不認真寫對不起自己阿，於是我從11月開始就偷跑了(？為了能夠好好整理自己的思緒，好好思考自己所學，並在寫文章過程中讓自己的基礎更加穩固。從十一月就開始貢獻時間跑馬拉松的我，犧牲了一些娛樂時間，也熬了一些夜，看起來就像是個很魯的技術宅一樣(事實也是如此)，真的希望能夠在過程中能夠有讓人出乎意料的驚喜或是進步，不管是在技術上，表達能力上，或是社群參遇度上，我一直以這個目標努力著。
好拉，只是充字數，為了讓我的草稿多一些字看起來比較爽XD，我這30天的系列文之所以取名叫python雜談，是因為真的很雜亂~而且某種程度可能鑽牛角尖XD，一來我沒有什麼特別深入的技術，比如說那些機器學習什麼的，可以這樣一直說嘴到30天，二來也不想只寫很基礎的python教學，因為看起來已經有人寫很多了，再寫好像也沒意義，再來我也想稍微寫難一點，稍微挑戰自己一下，雖然會花時間，但反正志在參加嘛，太難寫不完就放棄XD，所以這個系列文可能並不適合完全初學的人閱讀，而是一些稍微寫過碰過python的人來看，因為我就是以我自己稍微寫過python的經驗來做一些心得與探討，好吧就這樣，希望大家發現不足之處請用力鞭我。
阿阿然後我主要是用ubuntu14.04LTS、python3.4.3的環境來做一些範例的demo，但有些雜談會用python2.7來做demo，在過程中我會指明我用python2還是python3來跑，而至於那些windows使用者，demo結果跟你們不符我也沒辦法(逃)，因為沒時間再去用windows測嘛，盡力了，好開始。
python 動態型別雜談之一
今天我要稍微講一下python語言的一個特性——動態型別(dynamic type)特性以及他的實現方法，首先什麼是動態型別呢？就我的理解，靜態型別(static type)的語言在使用一個變數時，必須事先宣告這個變數的data type，而動態型別則不需要，從下面一個很簡單的變數相加範例就可以看出其中差別。
很明顯的差別對吧？當我用C++宣告一個變數的時候，因為C++是靜態型別語言，所以必須明定這個變數的型別(範例中的int和string)並存取相應型別的資料，而python不需要宣告型別就可以直接存取任何型別的資料，而且在重新賦值的時候，可以存取和原型別不同的資料，比如說：
而同時靜態型別與動態型別另一個明顯的區別就是，靜態型別語言在程式的編譯(compiling)時期就會做變數的型別檢查，因此需要事先做出型別宣告讓編譯器確定現在這個變數的型別為何，而動態型別語言是在執行時期做型別檢查，藉著存在變數裡的內容的型態來確定這個變數的型別。
通常動態型別最明顯的優點就是，省去了宣告型別的程式碼，想要用的時候就可以直接用，可以大大提升程式碼的簡潔程度，進而降低開發成本，但是不需要初始化的缺點就是如果在使用變數的過程中不小心打錯名字，python就會把他視為一個全新的變數，而不會報錯，但會讓程式出現自己不預期的結果，而我想這應該就只能細心一點，或是用一些具有""名稱自動補全""功能的文字編輯器來寫程式吧。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192509,DataTechnology,0,讓你資料美美的(d3.js+vue.js)系列,1,我想要資料美美的,FWcloud916,https://ithelp.ithome.com.tw/users/20105602/ironman,1513810946000000000,12,"最近在學校做作業的時候，遇到了需要將資料庫的數據放到前端網頁，為了實現這件事情所以接觸了vue，vue是非常好上手的一個工具，它可以很快速且即時的更新放到前端的資料。
而在將資料放到前端之後，必須要經過視覺化，除了讓資料清楚陳列之外，也要有好看的樣式，與其單純利用css來達成，不如善用強大精美的d3來實作。
在作業交差了事之後，現在想要更深入的了解這兩個工具，並在未來的幾天紀錄下來，留給有相同需求的新手參考，期間如有錯誤或建議也希望能獲得指導。",['前言'],"['為何使用vue', '為何使用d3', '未來的目標']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192199,DataTechnology,0,"基於雲端Iaas基礎平台OpenStack結合Kubernetes,BlockChain,Spark,SDN系列",1,OpenStack介紹,taneyahomilk,https://ithelp.ithome.com.tw/users/20107467/ironman,1513810894000000000,10,"OpenStack開始於 2010 年是美國國家航空暨太空總署 NASA 與 Rackspace 合作開發的雲端雲端運算軟體，以 Apache 授權條款授權，是一套開放原始碼的雲端開源軟體
OpenStack 第一版為 Austin，以 RackSpace 所在的美國德州 Texas 首府命名，計畫每隔幾個月發佈一個全新的版本，並且以 A 到 Z 後面的版本號，第一版 Austin 僅有 Swift 和 Nova 這兩個項目，分別來自 RaceSpace 文件平台和 NASA Nebula 平台，目的為雲端運算提供物件儲存與運算服務
2012 年 9 月，OpenStack 發行第六個版本 Folsom。也就是在這段時間，非營利組織 OpenStack 基金會成立，由 Linux 基金會董事 Alan Clark 擔任基金會主席，最初有 24 名成員，共獲得 1000 萬美元的贊助金。從此之後， OpenStack 專案都由 OpenStack 基金會管理
按照 OpenStack 基金會成立的規則，所以 8 家白金會員和 24 家黃金會員董事會裡，是可以在董事會佔有席次，並由此具備各種事物的投票權，席次在基金會董事會裡，是可以以響 OpenStack 發展方向，這也是企業對於會員級別和董事會席次趨之若鶩的原因

先了解 OpenStack 是什麼之後，後面會介紹 OpenStack 核心套件以及如何建立一個簡單的環境
https://www.openstack.org/","['什麼是 OpenStack', 'OpenStack 架構圖']","['OpenStack 基金會', 'OpenStack 董事會', 'OpenStack 歷史版本', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192612,自我挑戰組,0,rails學習紀錄系列,8,[Day8]類別中的方法（methodsinclass）,thehappyend,https://ithelp.ithome.com.tw/users/20107708/ironman,1513810868000000000,9,"類別中的方法主要可以分成實體方法（instance methods）和類別方法（class methods）：
實體方法（instance method）：能夠在實例上被使用的方法，大部分類別中的方法都是屬於實例方法。
類別方法（class method）：能夠在類別（class）上被使用的方法
1.在 class 中直接建立的 method 就是 instance method
2.它可以被該 class 所建立的 instance 所使用，亦可代入參數
給類別本身所使用的方法，它不需要製造出實體物件就可以使用
這裡的 all 方法是直接作用在 Post 這個「類別」上，故稱之類別方法。",,,"['實體方法（instance method）', '類別方法（class method）']",['定義類別方法寫法 ：使用關鍵字 self 建立 class method'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192316,自我挑戰組,0,d3衝刺班系列,1,Day1看大神影片來,法蘭克,https://ithelp.ithome.com.tw/users/20103331/ironman,1513810722000000000,11,"學D3 當然要看創始人Mike Bostock對於自己D3的一些想法
技術面的東西反而不是那麼重要，對於資料視覺化的本質做滿多討論
1.25倍速剛剛好順便練英聽XDD
3年前的這部影片看了還是很有感觸

在複習一次今年的openvis 對於modular或是v4的想法也更清楚 明天開始會讀些文件

後來搜尋才發現其實有些沒follow到的conf

明天開始找例子練練/文件看看",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192350,自我挑戰組,0,前端初心者的一招半式系列,1,#01從平面走到網頁設計,Hsinny,https://ithelp.ithome.com.tw/users/20107865/ironman,1513810622000000000,13,"::自介
2016
暫別在一家小公司近三年的平面設計工作，有感自己平面設計的能力再繼續做下去，人生不會餓死，但吃不飽，休息期間開始思索人生下一個工作方向......
2017
工作內容從平面設計跨到網頁，一開始只負責視覺設計稿，2017年中發現了一個線上自學好物--六角學院，有種相見恨晚的感覺，會了些基礎的html和css後，工作上開始幫忙一些簡易的切版到現在，我正走在前往專業前端的路上。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192421,ModernWeb,0,30天學習30套前端技術(2018年)系列,1,DataTables-表格排序優化套件,mfhsueh,https://ithelp.ithome.com.tw/users/20091292/ironman,1513810367000000000,14,"將jQuery和DataTables嵌入
將語法複製貼上到 <head> 和 </head> 內
啟用DataTables
將語法複製貼上到 <head> 和 </head> 內
(1)
JS Bin
DataTables | Table plug-in for jQuery",['DataTables- 表格排序優化套件'],"['安裝', '應用', '範例', '延伸']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192583,自我挑戰組,0,iflen(learning.python)==30:系列,17,Day17-Function-概觀,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1513810075000000000,11,"這幾種要素組合起來就會是個function
需要注意的是python使用的機制是call by object reference，因此，需要特別注意傳入的參數的mutable性質。
call by object reference would be a better description, since if a mutable object is passed, the caller will see any changes the callee makes to it (items inserted into a list).
俗話說，行不改名坐不改姓，但在python的世界當中，function可以改名
在function中若沒有使用retrun語法，預設會回傳None",,['參考'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192611,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,17,是阿貓阿狗呀,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1513810050000000000,13,"懷舊老遊戲上市，不玩不行
卡的有道理了吧

想不到金x發真是一站式購物的最佳選擇，
雖然小物的種類沒有很多，但是製作基本雛型非常夠了。

製作上由於都是現成的材料，所以沒有太大的難度，
只有在撲克牌、號碼紙、卡套以上三者的 size 可以相符即可，
剩下的就是花時間慢慢切割分裝了。
以後需解決、值得注意的地方
一般撲克牌尺寸
http://jacksonkuo.blogspot.tw/2009/05/blog-post.html
禮物 DIY 號碼
https://boardgamegeek.com/thread/1388236/extra-cards-single-suit-card-game-using-numbers-1",['[Round 14] 番外篇-DIY 「禮物」之雛型'],"['「禮物」的道具', '參考:']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192610,SoftwareDevelopment,0,每天Racket3分鐘系列,17,"(call/cc(lambda(day-15)(day-15""天下第一奇招—Racket的Continuation—2"")))",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1513809774000000000,11,"完成了昨天相當困難的解釋（解釋 Continuation 比解釋哲學還困難！）我們要來實作一些經典範例。首先先看這個範例程式：
還記得我們昨天第一個範例嗎：
當我們把 5 傳給 escape 時，這時整個 expression 語義等於 (+ 5 5)，換句話說，這樣一個 Continuation 的結構，像是這樣的概念：((lambda (x) (+ 5 x)) 5)。因此，我們在這地方，先把剛剛的 check-negative 的函式忽略 continuation 的區塊，它長的像這樣：
在 lambda 區塊裡，它這時處在尚未有任何計算過程的內容。於是我們把 call/cc 加進去：
因此，這是一個像是這樣的函式：
於是我們再看下面的計算：
這是一個典型的 for-each 迴圈，裡頭 iterate 每一個元素，如果發現它小於 0，就把它傳給 esp。這時候，如果我們發現了 input1 的 -1 時，我們便把它傳進 esp 裡，還記得昨天 R6RS 說到，esp 全名叫 escape procedure，因此它是一個 procedure，接受一個參數，這個參數就是整個 call/cc 的回傳值。而當 call/cc 回傳之後，整個 call/cc 的執行就結束了！換句話說，這個可以說是 Java 裡頭這樣的寫法：
因為 Racket 與 Scheme 這類的語言，沒有 break 與 return 關鍵字，因此要執行上述的邏輯時，必須使用 Continuation 來完成，這就是經典的 non-local exit 範例。
（容我明天補上）
（容我明天補上）",,"['1. 我們的第一個 continuation 應用', '2. Racket 的 continuation 與 Scheme 的差別', '3. 左右互搏又來了！']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192581,ModernWeb,0,從MeteorJS學習網路應用開發系列,1,Day01-什麼是Meteor？為什麼用它,cychien,https://ithelp.ithome.com.tw/users/20106306/ironman,1513809606000000000,15,"來談談 Meteor 吧！
首先是官網的介紹：
Meteor is a full-stack JavaScript platform for developing modern web and mobile applications. Meteor includes a key set of technologies for building connected-client reactive applications, a build tool, and a curated set of packages from the Node.js and general JavaScript community.
就如同上面提到的，Meteor 是一個全端(Full-stack)的 web 應用框架，標榜著可以用單一的程式語言，也就是 Javascript 來開發，他是一個前端框架＋socket＋node.js＋mongodb 的組合，特別對於需要即時互動的應用，可以很快的建立出雛形。
其實 Meteor 早在 2012 年就推出，它包含自己的前端框架(Blaze templating engine)、建制工具(build tool)和套件管理系統，也有自己的套件平台(atmosphere)和伺服器管理服務(Galaxy)，甚至是通訊協定(DDP)。
儘管一開始因為資料傳輸的方式備受讚揚，但高度整合型的框架卻讓客製化上變得困難，尤其 2013 出現的 React、2015 年出現的 Redux，都取代 Meteor 某方面的特色。所幸在之後的版本(1.2)後開始支援其他的前端框架，也回到 npm 的套件管理，因此現在在開發上可以取得 React, node 的豐富資源並保留 Meteor 資料傳輸的特色。
Meteor 前端在資料的獲取上是藉著 Reactive Programming 的方式，也就是前端向後端「訂閱(subscribe)」特定的資料後，後端會持續「發布(Publish)」資料給前端，前端再根據這些資料改變呈現的方式，如下圖。

如果熟悉 Redux 的話，可以想像在運作上就好比將 Redux 的部分 store (儲存元件狀態的地方)直接和後端同步，因此可以很簡單的處理多人的協作。而在資料的寫入方面，Meteor 提供 client 端的 minimongo 與後端的 mongo 作對應，並且當作 cache，因此當前端寫入資料時，可以利用 cache 快速反應結果，如果有衝突再由後端修正，藉此減少反應的時間。
簡介暫時就到這裡，Meteor 因為 socket 和同步的特性，並不適合用在大型高流量的網站，會有效能上面的問題，但每個框架都有適合的應用，對於小型多人的即時互動上，Meteor 就有很大的好處，另外只用單一語言的特性，也讓整體學習的成本降低，自己認為很適合當作個人專案或是學習使用。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192311,自我挑戰組,0,菜鳥工程師初體驗系列,2,不會沒關係，先從了解公司產品開始,YChia,https://ithelp.ithome.com.tw/users/20106219/ironman,1513809507000000000,21,"這是公司的網站資料夾 你就自己先架一個起來吧
一開始我以為公司有其他的後端工程師，到職後才發現 嗯......前人已離開 能夠找的資訊都在電腦裡
莫急 莫慌 莫害怕 還好有前輩的聯絡方式，讓我能夠在被客戶逼到牆角前，解決問題，然後再被追殺
架好伺服器後（apache），把整個網站的檔案丟進去，改個密碼，公司產品一個網站就這樣被裝了起來
對於一個剛入行，完全不懂的產業Know-How 的人，最快的方式就是亂點一通，能點的能按的都按過一遍
就算爆炸也是在本機，沒關係的
系統架構 ？ 先跳過吧 對菜鳥來說太難了
技術說明 ？ 這個之後再說
有時候溝通上有落差，是因為雙方沒有在同一個水平上
所以在這邊先給個定義
明天會先以網站基本上具備的功能來介紹，再來分享一些當初自己在工作前不知道，但對管理系統或者是工程師很重要的功能",,,['一個網站系統應該要有什麼'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192560,AI&MachineLearning,0,到底是在learning什麼拉系列,2,[day1]回歸分析-1,nylon,https://ithelp.ithome.com.tw/users/20107448/ironman,1513809389000000000,20,"監督式學習是機器學習中最常見的演算法，而迴歸分析與分類則是在監督式學習中最常見的的類型
在這一堂課將探討回歸分析這個在統計上最廣泛使用的工具，想像一下我們想了解我們觀察的結果與特徵間的關聯。
以房價預測為例，這間房子大小?是否靠近學區?有沒有捷運?...等特徵值，我們想要知道我們的觀察值與特徵值呈現著怎樣的關係。
監督式學習是機器學習中最常見的演算法
在台灣或所謂的華人區域，房價一直是一個非常重要的民生議題。
假設今天我有一棟房子想要出售，如果你不是我推房仲，我猜你會先上網看附近區域的實價登錄，這時候你就會搜尋同一個範圍的房價，甚至更精確一點你會直接查詢是否有跟你相同的建案出售，賣價為何?
一般衡量的指標都會是坪數，比如以下的搜尋結果

此時我們可以將每一個成交的單位，依照其坪數與成交價可以繪出下面的圖，每一個點代表一間房子的售價

假設現在我有一棟房子想要出售，基本上要剛好有一棟房子跟我一模一樣的機率是很小的，於是乎我將其鎖定在跟我家相去不遠，並且坪數大小差不多的房子，在這張示意圖中，我可以發現有兩間跟我家差不多的房子。
接著我們會忽略其他的房子，但是問題是，這樣合理嗎?
順著前例我們可以來討論，房價與坪數的關係，我們將迴歸分析應用在這個例子上時，最簡單的模型就是在數據上畫出一條直線，直線包含了

從中可以得到一個線性函數，但是此時問題來了，這在個函數裡面不會只有一個w會有好幾組，所以我們思考且回答的是，我們要選擇那一條w做為我們的模型呢?

常見的做法是，我們透過每一個點到劃出的直線中求出距離，這個距離代表著你的預測與真實的結果差了多少，透過殘差平方和的最小值來求得最適合的直線
我們需要做的就是將每一條的值給透過殘值平方和給求出來

最終我們可以得到一條讓殘值平方和為最小的直線
在些w最終的結果我們稱為w-hat，它將記住所有w0(斜率)與w1(截距)的集合，最終我們將可以透過這條來算我們的合理價格

原本我是打算通通用手寫來畫圖，但是我發現如果堅持這麼做，我可能會跑不完這30天，所以就引用了上課的投影片，畢竟已經不是學生惹，請大家見諒QAQ",['Regression'],"['What is the goal and how might you naively address it?', 'Linear Regression: A Model-Based Approach']","['Reference:', '後記:']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192325,ModernWeb,0,Confluence線上協同作業之平台系列,16,討論區的使用,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1513809303000000000,26,"如果說某一項功能，例如討論區，您想要放在confluence裡面，但是程式的部分您寫不出來，可是您有發現有免費的plugin可以使用，但是唯一的限制是這個plugin僅支援到比較舊的confluence版本，那麼您將會選擇安裝舊的版本但是可以使用討論區的功能，或是仍然選擇新的版本，但可能USER如果仍然要此功能的話，您必須另某方式來達成它，有時候使用套裝軟體的時候，的確會遇到類似這種情況，或許可以參考USER使用此功能的使用率以及再將依些資訊整理後，來給老闆做出相關的決定
Community Bubbles 一個confluence 討論區的plugin，相關資訊可以在https://marketplace.atlassian.com/archive/com.adaptavist.confluence.bubbles 來找到，他目前最多可以支援到confluence.5.1.5的版本，
新的版本如果有使用討論區功能的話，有一個非正規的討論區plugin可以參考，Simple Questions and Answers (相關資訊可在網址https://marketplace.atlassian.com/plugins/de.edrup.confluence.plugins.simple-qa/server/overview 查詢)，在原廠所提供的影片中可以看出它的功能及呈現方式

主要的功能說明如下:
Simple Questions and Answers brings questions and answers functionality to Confluence. It is based on existing Confluence features: child-pages under a ""topic""-page serve as questions, comments are pimped to answers. The main features/benefits are:
(在主標題的PAGE底下的子page會當成是問題，透過comments評論的回覆來標示答案)
Keep using all your macros in questions and answers(可以使用此PLUGIN下的所有macro)
Use your own templates for questions(使用自己的樣板來建立問題)
Limit the access to certain topics as usual(限制可以存取那些主題)
Answers can be voted up and accepted (down-voting is configurable)(答案可以票選，也可以下拉式的選單)
Define additional users for each topic which may accept an answer beside the owner(可定義那些主題由哪些人來投)
Define an individual how-to pop-up message for each topic to get users on board
Print and export questions and their answers as usual
Search, filter and sort the questions on your topic page (asking new questions also happens there)
Questions and answers are findable with the Confluence search (confluence搜尋的到)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192604,ModernWeb,0,30天React從入門到入坑系列,1,DAY1:學習React入門簡介先,許小威,https://ithelp.ithome.com.tw/users/20107317/ironman,1513809192000000000,31,"近幾年前端框架興起，原本希望前端程式可以簡潔易維護，但各框架大量採用es6語言特性，不是所有瀏覽器都支援es6語法，需透過工具轉換成es5語法，讓大部份的瀏覽器都可以執行。
不像以往只需引入library，就能撰寫程式碼開啟瀏覽器查看頁面，目前需透過webpack整合各模組工具，利用工具轉換程式碼並啟動server才能查看頁面，比起以往光架設環境弄懂設定檔，就需花費大量的時間。如果架設不順利，又要花時間上網爬文尋找解法，如果是各模組版本衝突又要無限踩雷，光架設環境就要搞死人，現行框架把初學門檻又墊的更高。
目前知名的前端框架，包含React、Angular和Vue.js，各框架雖然寫法不同但主要強調模組化、函數編程和元件抽象化..等。前期主要以React Docs為學習對象，利用create-react-app新建應用程式撰寫測試，前期先了解語法特性與撰寫，掌握基礎語法後再加入webpack模組工具架設，希望30天鐵人賽能從初心者踏進前端的無底坑(誤)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192542,ModernWeb,0,NodeJS-Backend見聞錄系列,1,NodeJS-Backend見聞錄(00)：關於本系列文章,penguinrun,https://ithelp.ithome.com.tw/users/20107420/ironman,1513809191000000000,32,"Hi, 各位！
我是PenguinRun, 一位學習Node.js不久的工程師。這是第一次參與IT邦鐵人賽。在此次的參賽，將依序帶入web後端的觀念、Node.js實作、Server架設到進階的主題探討。
希望能在跟各位分享後端技術之餘，也記錄下之前學習後端的歷程。
由於筆者的前端開發程式語言為JavaScript，因此在跨入後端範疇時，選擇了與JavaScript親和性高的Node.js。
Node.js是建立在Chrome的V8 JavaScript引擎上，透過事件驅動、非阻塞I/O的特性來提高效能。同時，它是一個Server side的JavaScript，且能透過Node.js的內置模組及JavaScript語言來撰寫成一個Server。其運作模式如下圖所示：

圖片擷取自：Evan M. Hahn(2016). Express in action.
圖中的架構是有兩個部分所結合。左邊是主從式架構(Client-server model)，右邊是Node.js的部分，其運作分為4個動作。依序為：
藉由上述的動作，Node.js就能來針對不同request的需求，來回覆相對應的response。而且，Node.js的HTTP的server也幫我們處理了Client端與JavaScript參數之間的關係。所以我們不用特別花心思去關注及處理複雜的網路協議。在程式語法部分，若讀者有接觸過JavaScript，相信Node.js的語法，對讀者來說也並不難。

目前30天的文章大綱如上，但也有可能會做些更動。
若讀者們有任何問題，也歡迎隨時提出。",['Node.js-Backend見聞錄(00)：關於本系列文章'],"['序', '30天文章大綱']","['為何挑選Node.js', '何謂Node.js']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192589,SoftwareDevelopment,0,初探Kotlin系列,15,[Day15]Extensions-1,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1513809180000000000,28,"Kotlin跟C#和Go一樣,可以擴展一個類的新功能而不用繼承該類
Kotlin支持 extension functions及extension properties
擴展方法 是對類別的方法做擴展
上述例子Context就是要擴展的類別 使用this對Context類的主體進行操作
如果有返回值一樣在方法名後加上返回值的類型
使用方式跟Extension Functions差不多","['Extension Functions', 'Extension Properties']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192603,自我挑戰組,0,30天學習J2EESpring+Hibernate學習心得記錄系列,3,Day03HelloSpring程式分析及getBean三種方法,Zero.Cheng,https://ithelp.ithome.com.tw/users/20107820/ironman,1513808788000000000,34,"getBean三種方法
如圖所示getBean有五種方式，介紹其中三種方式

(再陸續捕文先卡位)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192605,DevOps,0,Openstack學習與介紹系列,5,DAY5Openstack雜記,帥哥,https://ithelp.ithome.com.tw/users/20103615/ironman,1513808762000000000,34,"好的記性 不如 爛的筆記
Openstack的網路規劃。
Openstack  Networking service可分為2種。
The provider networks option deploys the OpenStack Networking service in the simplest way possible with primarily layer-2 (bridging/switching) services and VLAN segmentation of networks. Essentially, it bridges virtual networks to physical networks and relies on physical network infrastructure for layer-3 (routing) services. Additionally, a DHCP service provides IP address information to instances
Provider networks
Provider network是最簡單的方式部屬Openstack的服務，其中只會用到 layer2(bridging/switching)的網路架構。
他單純是將VM通通bridge到實體網路。依靠外網的L3的service。
已下是 Provider Networks的內部原件。

Self service
The self-service networks option augments the provider networks option with layer-3 (routing) services that enable self-service networks using overlay segmentation methods such as VXLAN. Essentially, it routes virtual networks to physical networks using NAT. Additionally, this option provides the foundation for advanced services such as LBaaS and FWaaS
Self-service 搭配provider一起使用，並且使用vxlan。
在內網間使用NAT來連接虛擬網路與實體網路。

Provider Network實際上的結構圖
https://docs.openstack.org/ocata/install-guide-ubuntu/launch-instance-networks-provider.html


Self-service network結構圖
https://docs.openstack.org/ocata/install-guide-ubuntu/launch-instance-networks-selfservice.html


會盡可能的詳細說明",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192576,AI&MachineLearning,0,探索MicrosoftCNTK機器學習工具系列,1,Windows上的深度學習,salingers,https://ithelp.ithome.com.tw/users/20103635/ironman,1513808637000000000,29,"Introduction
深度學習在機器學習領域是一套相對較新的技術，已經顯示出能夠很好地概括一系列問題的能力，甚至可以解決以前被認為無法解決的一些問題。
人們已經知道一些特定的機器學習技術，神經網路(Neural Networks)能夠通過使用隱藏層(hidden layer)來學習從輸入(例如：圖像、聲音、文字)到輸出(例如：這個圖像代表什麼數字)的複雜映射的能力。

隨著大數據的出現，我們可以突然擁有令人難以置信的大量輸入數據，我們可以將這些數據輸入到這些模型中。而隨著GPU的強大功能，我們有了這樣的計算能力。過去我們看到神經網路有多個隱藏層，但是訓練它們非常昂貴，隨著我們現在擁有的大量數據和可用的計算資源，這些約束條件不再適用。
從那以後，神經網路只能變得更深，卷積神經網路(Convolutional Neural Networks)、反饋循環(feedback loops)及多層(multi-layer)。
Deep Learning Toolkits
機器學習已經存在了很長一段時間，有很多框架可以使用。在深度學習領域，很難說誰擁有最好的框架，現在很多都是關於是否支持您當前和預期的需求，是否在您的平台上運行，以及您是否可以使用您喜歡的語言進行編碼。
微軟的Microsoft Cognitive Toolkit (CNTK)，可以運行在Linux及Windows上。它也相容於Keras函式庫，可以讓你在更高的抽象層次上思考。
CNTK，Keras
他們都使用Python函式庫，我們需要做的第一件事就是在Windows上安裝Python。可以選擇安裝Anaconda，並選擇安裝一些常用的套件(Numpy，Pandas，Sklearn)。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192582,ModernWeb,0,在Three.js探索CAD的奧秘系列,1,Day1:為什麼是CAD?,gs1458,https://ithelp.ithome.com.tw/users/20107175/ironman,1513808624000000000,38,"作者Boxy現正就讀中正大學機械系，本身研究主題就是網際結合CAD/CAM，有幸在這跟大家分享一些跨領域的知識，希望大家會喜歡。
電腦輔助設計(Computer-aided Design, CAD)
已經存在超過半個世紀，因為電腦技術的成熟帶動了CAD軟體的發展，設計師們學會使用CAD設計出各式各樣的新產品，從2D的色彩美術設計到3D的外型結構設計，它並不局限於特定領域，而是被應用在不同的各行各業。
創造是人天生擁有與生俱來的能力，人們會把靈感或想法畫在紙張上，於是就有了設計圖的概念，但是當這些創意需要轉化為真正的產品時，感覺設計不滿意或是無法輕易製作等問題就會需要進行設計變更，這時候畫在紙張上就變得不是那麼方便，為了解決這個問題人們創造了各式各樣的CAD軟體，這些軟體有著豐富的編修功能、優秀的模擬計算的能力，使得設計圖變得更方便容易繪製。而現在CAD所設計出來各種形形色色的產品已充斥在大家的日常生活中，從你用的器具、住的房子、坐的汽車無不是直接或間接由CAD軟體所設計出來，可見CAD帶給人類在設計領域有很大的貢獻。

汽油遙控車引擎
三維設計領域中常見的模型表示方式有兩種，第一種是B-rep模型，這類模型經常在工程繪圖軟體被採用，像是上面的遙控車引擎模型，就是透過知名的3D工程繪圖軟體所繪製出來的，這類模型主要是由一些邊界線所包圍而組成的，特別適合設計一些看起來較規矩的立體模型，但是要繪製這類模型往往需要較長時間的專業製圖訓練，通常會是所謂的製圖工程師在使用。另一種是CSG模型，它採可以使用網格的方式去定義模型，通常是在需要複雜曲線曲面的時機被採用，這種方式也深受3D繪師或動畫師喜愛，它的操作方法就像是在捏黏土一般，還能透過各式各樣不同的筆刷工具去雕刻，使用者可以很容易的經由手感創造出自己想要的形狀，也可以先匯入一些掃描的3D模型，即可輕易的再對其進行二次編修設計，如下圖就是一個常見的曲面網格模型。

Bunny rabbit
今天就先介紹到這裡，大家有沒有對CAD設計領域有一點概念了呢? 讓我們明天再繼續深入瞭解這些不同性質的模型吧。",['後記'],"['作者簡介', '前言', '電腦輔助設計軟體', '有哪些3D模型設計?']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192602,SoftwareDevelopment,0,輪子們，聽口令，大部分解開始！系列,2,卡位,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513808594000000000,33,第二天又要卡位了XD,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192599,ModernWeb,0,從無到有，使用Go開發應用程式系列,12,AnonymousFunction,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513808395000000000,48,"昨天在使用 callback 的時候，有用到匿名函式。今天來看一下匿名函式的其他細節。
下面是一個簡單匿名函式的使用方法：
如果覺得還要存放一個變數太麻煩，這也可以省略
又或是，想要從另一個函式取得匿名函式：
再來這是組合技
閉包是指，變數被關在某個區塊內。比方說剛剛的例子調整一下：
這樣的結果會跟下面這個例子的結果一樣：
我們可以發現，雖然匿名函式內容是封閉的，但 base 變數卻能夠被關進匿名函式裡，甚至是「匿名函式的匿名函式裡」，這就是閉包的特性。
最後，因為 Go 有取址運算，我們能拿得到變數真正的位址。那我們來看看在各階段裡面的位址為何：
最後輸出：
這裡可以發現在三個地方的 base 變數位址都是 0xc420010058 ，這也是所謂「變數被關在某個區塊內」所代表的意思。",,"['Closure', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192597,自我挑戰組,0,30天的切版日記系列,17,Day17:逮捕,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1513808100000000000,57,逮捕逮捕逮捕逮捕逮捕逮捕,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192370,自我挑戰組,0,資工的日常系列,1,CPE考題DigitCounting,linfantasy,https://ithelp.ithome.com.tw/users/20107866/ironman,1513807890000000000,58,"2017/05/23 CPE
考題連結:
https://cpe.cse.nsysu.edu.tw/cpe/file/attendance/problemPdf/1225.pdf
大概題意:
給定一個數字N (1 < N < 10000)，從1開始數到N。統計數字0123456789出現的次數。
ex:N=12  開始數123456789101112 然後0到9個別出現 1 5 2 1 1 1 1 1 1 1次。
input:
第一行:要解幾組，不超過20的整數   第二行開始:數字N(1 < N < 10000)
output:
每組數字N，0123456789出現的次數以空白隔開
自己的解題程式碼
測試資料:https://cpe.cse.nsysu.edu.tw/cpe/file/attendance/problemPdf/testData/uva1225a.php
結果:
第一天先這樣好了，這題解法可以更精簡，但我是寫自己目前想到的方法",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192586,自我挑戰組,0,再戰軟體工程系列,6,『為了做事而做事』--談價值的重要性,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1513807753000000000,75,"Planning Meeting估算完story，決定好這個sprint要做的story，sprint就開始了。
在一個自組織團隊裡，大家各有長才，各自領了自己擅長的任務，其中有一位比較新進的同事A君，因為一直以來都是專注在測試，最近才轉開發，於是從Product Backlog裡面挑了一個他擅長的『規劃訂餐系統測試案例』，跟PO溝通過後。拉進sprint裡來開始進行。
Scrum Master注意到了，於是請大家暫時放下手邊的工作
『訂餐系統進度如何？』『還在規劃中。』
『這個sprint裡的story都做完了嗎？』『還沒。』
『訂餐系統有任何相關story在這個sprint裡？嗎』『沒有。』
『那為什麼拉了一個新任務？』『因為我怕A君沒事做啊！』
聽出問題在哪裡了嗎？
問題在價值。
我們決定拉進sprint的story，都是目前對公司最重要的事，都是最有價值的。也就是說，我們越早把這些事做完，對公司利益越高。那麼，在做完這些事之前，花人力去做相對價值較低的事，有幫助嗎？如果沒有，為什麼要做？發現問題了，因為我們：
這樣有錯嗎？沒錯，當然沒錯，只是沒有價值。
我們回頭看scrum對於sprint、standing meeting、product backlog、以及其他原理與流程的定義與解釋，有提到忙碌嗎？沒有。有提到擅長嗎？沒有。事實是，整個scrum從原理到實踐，通通只圍繞一個核心觀念：價值。
那麼，回到剛剛的例子，難道A君應該放下擅長的測試工作不做，而去跟其他同事紛他比較不會做的coding來做嗎？要，當然要，因為那會提高價值。雖然做得慢，但是對公司比較有幫助。至於做得慢這件事，我們有很多方式可以幫忙他，譬如讓他跟資深同事做pair programming，或是針對單一功能A君寫單元測試，資深同事B君寫method與class。甚至，就像Teddy Chen老師經常舉的例子，他就算是去幫B君抓抓龍按按肩膀舒緩一下，讓B君寫code更快又更好，那都是提高價值的做法。
為什麼？因為唯有完成最重要的事，才能最大化公司獲利。
今天的結論很短：『價值驅動不是口號，要同時放在心裡與行動上，並時時刻刻檢視自己在scrum中的決策有沒有符合這個原則。』
我們明天見。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192574,SoftwareDevelopment,0,來做個網路瀏覽器吧！Let'sbuildawebbrowser!系列,10,站在巨人的肩膀上，一覽瀏覽器引擎研究,微中子,https://ithelp.ithome.com.tw/users/20103745/ironman,1513807688000000000,51,"今天來談談瀏覽器的學術研究，提供大家一些論文參考。
科技的日新月異，是由無數人共同努力的心血，我們現在享受方便的資訊服務，都是由前人一點一滴研究出來，再由更多人將研究再研究，才達到至今我們所看到的頂尖技術。
瀏覽器如何不是如此，從 IE、Chrome、Firefox 等等瀏覽器中我們可以看到不斷進步的腳印，至今 Firefox 推出「Firefox Quantum」挑戰群雄再戰最高點，背後就是由一堆研究人員不斷尋找新的方法、理論、技術來突破現狀。Chrome 的開發人員絕對不會坐以待斃，不久一定會推出能擠下 Firefox 的新版本，而我們則是在這良性競爭下的最大受益者。瀏覽網站飆高速，就像是開賽車一樣爽！
有關於瀏覽器的相關研究真的很少，一般發 paper 都是大學、研究單位，但這些地方幾乎沒人做這方面研究。像我想在台大找教授研究瀏覽器，看了一下資工系的教授背景，頂多「軟體架構設計」這個研究領域比較接近一點了。瀏覽器研究完全不是顯學，機器學習、視覺辨識這方面反而一堆。多數的技術都是由瀏覽器的開發人員自己設計出來，卻也不會去發 paper。我自己認為比較可惜，雖然現在都開源了，但如果沒有文章特別去解釋技術，恐怕別人也很難去學習。
以上的資料很多，全部都看要花不少時間，但也代表網路的世界很寬闊。
如果你看完有心得歡迎與我分享！
更歡迎你一起投入瀏覽器的研究！
希望對大家有幫助，我們明天見！
關於作者
劉安齊，軟體工程師，熱愛寫程式，更喜歡推廣程式讓更多人學會",,"['瀏覽器相關研究', '瀏覽器的並行/平行化', '瀏覽器工作的平行化', '瀏覽器工作的分析與建模', '改善瀏覽器的效率', '一些文件']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192573,SoftwareDevelopment,0,如何讓程式碼告訴你他在做什麼?系列,3,Day-2又是爬蟲!?,dcvsling,https://ithelp.ithome.com.tw/users/20107411/ironman,1513807342000000000,40,"最近因為剛好幫朋友寫個爬蟲，在撰寫的過程中發現這是個好素材，所以就拿來用了．
所以我們就來寫個爬蟲吧
以下的會以 .Net Core 2.0 ~ 2.1 (就是還沒release的那一版) 為範例環境
先做一次概略描述
爬蟲感覺功能需求如下：
感覺好像很複雜，換一個方式來呈現我們的需求吧
所以我們就可以很快速度生成一段code 如下並附加一些解讀　(此註解寫法非正規，僅為表現效果而做)：
這樣的寫法所對應出來的描述，大概就像是這樣
而這樣的描述與這樣的程式碼也許看起來沒有什麼問題
那接下來就來了解一下這次的主題會如何檢驗這段程式吧",,['備註'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192585,自我挑戰組,1,工程師職災的認識與預防系列,2,長時間使用電腦姿勢很重要,rabbitlai,https://ithelp.ithome.com.tw/users/20107803/ironman,1513807250000000000,54,"
這是國外電信業者的廣告影片，用簡單的動畫衛教大家較好的使用電腦的姿勢。
之所以說「較好的」姿勢而不是「正確」的姿勢，這又是另一個故事了，有機會再說。
影片非常簡單明瞭清楚易懂，我甚至覺得看完影片後我應該不需要再做任何說明了XD
裡面有提到常見的錯誤姿勢、什麼爛姿勢會造成哪些部位疼痛、該怎麼修正等等，
一支影片抵我十篇阿我要怎麼混阿阿阿阿阿XDDDDD
大原則就是
眼睛平視螢幕(低頭你就肩頸痛)下巴微收肩胛後沈(之後會再提到)
手肘彎曲90度(肩抬高容易聳肩你還是肩頸痛)(太低就變手肘痛)
屁股坐好坐滿(椅子太深(大腿太短)就墊抱枕)
膝蓋彎曲90-110度(太彎可能膝蓋痛太直可能會腰痛)
(比90度再大一點就好不用真的拿量角器來量好嗎各位工程師)
腳掌貼好貼滿底面(椅子太高(小腿太短)就拿原文書來墊腳)
最重要的是使用電腦30-40分鐘要起來動一動阿阿阿阿阿阿
喝水上廁所找隔壁的聊天都好，拜託不要久坐好幾個小時，來治療的時候才說怎麼都沒有好，
治療的速度趕不上你破壞的速度阿阿阿阿阿",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192561,自我挑戰組,1,區塊鏈報明牌系列,2,[區塊鍊報明牌]Day2比特幣論文(1)-51%攻擊,willyc20,https://ithelp.ithome.com.tw/users/20107460/ironman,1513807212000000000,53,"首先我們先來研究區塊鏈最初的論文《Bitcoin: A Peer-to-Peer Electronic Cash System》，這幾天將循序介紹論文中描述的相關技術，並最終實現一個簡單的區塊鏈demo。
昨天開始爆肝認真讀了一下這篇論文，實在是不得不佩服中本聰的驚人智慧，在最初的比特幣系統當中，中本聰其實並沒有發明什麼新的技術，不論是論文中使用的密碼學技術、分散式架構方面都是由現有的技術組合而成。
在網路上對於中本聰真實真份的謠傳中，有一種說法稱中本聰其實是一整個團隊。不過除非有人露面並從象徵中本聰的錢包地址交易比特幣，否則真像恐怕是永遠都不得而知了。不過如果中本聰真的是一個人的話，那區塊鏈絕對是天才思想的智慧結晶，能以相當有深度的資訊技術去成功進行比特幣這樣一場社會科學上的試驗，而且還是在匿名的情況下在真實世界中實際運作了論文中提出的區塊鏈系統。
我們在這裡借用PayPal共同創始人Peter Thiel的書《從0到1》中的一段話：
複製別人的模式比創新事物容易。
做大家都知道怎麼做的事、提供更多熟悉的東西，這是由1到n。
不過如果只複製前人的路，就無法學習到他們的精髓。
創新是由0到1。創新獨一無二，創新的時機與開創出的結果也是新鮮奇特的。
可以想見這篇論文必將被歷史所銘記，現在就讓各位與我一同參與這彷彿盤古開天闢地般的時刻吧。
以學術論文的角度來看，該文的用字可能不是太嚴謹，例如文中常常出現的CPU power對比現在最常聽到的GPU挖礦就顯得有些格格不入，也許用計算能力之類的詞會比較恰當。甚至還有用紙筆計算比特幣挖礦是否可行的文章出現：
https://gizmodo.com/mining-bitcoin-with-pencil-and-paper-1640353309
在論文開始的介紹中提到了這樣一段話:
The system is secure as long as honest nodes collectively control more CPU power than any cooperating group of attacker nodes.""
也就是說該論文的區塊鏈技術是建立在一個點對點的分散式系統當中，而這些分散式系統中的節點基於某種共識演算法來達成共識進行運作，只要在網路中的正常節點的計算能力大於有惡意或不正常的節點，就可以相信系統是正常運作的。
我們回想一下Day1提到理想的虛擬貨幣無須擔心作業疏失、惡意行為，所以可以取代政府發放法定貨幣的能力，在此的前提是建立在分散式系統的惡意節點計算能力小於正常節點的基礎上，在虛擬貨幣的術語中又叫做51%攻擊。
這種事情在一些小型的虛擬貨幣中是真實發生過的，不過有惡意行為的人在目前總價值數千億、數百億美元市值的比特幣、乙太幣環境中，有可能擁有這麼龐大的算力去進行攻擊嗎？事實上目前的中國礦池掌握計算能力總和應該是大於一半的，也就是說如果整個中國的比特幣算力聯合起來是有可能攻擊整個比特幣系統的，不過這實在是扯的有點遠了，我們可以看出最初提出的區塊鏈系統還有很多需要完善的部份，各位在接觸虛擬貨幣的同時也要對風險抱有一定的警覺心。

(圖片修改自[1])
[1]《On Distributed Communication Networks》
http://pages.cs.wisc.edu/~akella/CS740/F08/740-Papers/Bar64.pdf
《Bitcoin: A Peer-to-Peer Electronic Cash System》
https://bitcoin.org/bitcoin.pdf
51%攻擊
https://en.bitcoin.it/wiki/Majority_attack","['前言', '51%攻擊', '相關參考資源:']","['論文的用詞問題', '中心化 vs 去中心化 vs 分散式']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192590,自我挑戰組,0,Kaggle的解題挑戰系列,7,[Day07]Kaggle的解題挑戰-Python入門,BillLin1983,https://ithelp.ithome.com.tw/users/20103074/ironman,1513806997000000000,39,"SMACK因為工作上只是大概作一下技術研究而已，也告一段落了，之後有空會再補上其它幾個重要的技術線，先回到解題線，在開始解題前，最好能了解一下Python。
我目前就計畫看一下中文教學，再看一下Kaggle的英文教學，再看一下有那些常用的Machine Learning常用的Library。
中文(資料整理清單)
第一次用就上手
http://wiki.python.org.tw/Python/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8%E5%B0%B1%E4%B8%8A%E6%89%8B
http://djangogirlstaipei.herokuapp.com/tutorials/python/?os=windows
英文
官網 https://www.python.org/
Kaggle的學習資料 https://www.kaggle.com/wiki/Tutorials
機器學習相關
https://www.datacamp.com/community/tutorials/scikit-learn-python
https://wiki.python.org/moin/PythonForArtificialIntelligence
https://buzzorange.com/techorange/2017/07/13/15-python-library/
個人快速學習語言的方法就是，先大概了解一下這個語言的哲學特色，然後是動態還是靜態，是強型別還是弱型別，然後了解一下基本語法，變數宣告和型別、迴圈、判斷式、函式、物件寫法、陣列和容器，常用的SDK Libray，大概就是轉型、字串、數字、日期的處理，再進一步的有Regular Expression、和一些慣例的寫法，或是Funcational的寫法，但基本要用再查也行，但至少要會看，至於Effective Python或是更有效率的寫Python之類的，等這變成吃飯工具再說吧，就算我現在Java是吃飯工具，也沒啥機會發揮到，工作上效率不好有不少程式以外的問題，這就不說了。
有點懶了，上面的資料目前先這樣，之後有看到再補，程式語言的部分，明天再開始寫好了，我主要應該會以良哥哥的例子為主，但，我不會帶太多說明，主要對我而已不少東西只是寫法上的差異，如果有缺的主題，我也會再補上去，之後補自已掃一下英文的部分，我之後應該會花時間看一下python Machine Learning的Library的部分。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192588,ModernWeb,0,PHPlaravel的邂逅系列,17,DAY17-GIT常用指令,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1513806732000000000,29,"今天來聊聊當專案想要儲存時要怎們做呢？或是專案被你玩壞了，全部要重頭寫，這樣是不是會很困擾。
有人發明了版本控制，最早的版本控制為BitMover公司所開發的BitKeeper軟體，但是這軟體是付費的，Linus Torvalds拿他使用在linux的開發上面，可是這軟體不是開源的，種種原因下，Linus Torvalds決定自己開發版本控制軟體，造就了現在的git。
git就像遊戲玩到一半可以幫你存檔一樣，不用每次玩遊戲都重頭來過，在遊戲過程中死了，也可以在存檔的地方復活，這樣是不是很棒啊。在程式碼中你都可以知道每次存檔改了什麼東西，程式碼壞了也知道要罵誰ＸＤＤ。
今天會介紹一些常用的git指令
下面的指令可以在你的專案目錄底下，建立一個.git的目錄，裡面會放一些git的相關檔案，如果沒有這個檔案，你的紀錄就都會不見，所以不要刪啊
當建立新專案
當建立好了.git以後就是把資料新增進去，每個檔案都只會有兩個狀態，追蹤和尚未被追蹤，而使用 git add 指令，就是要讓檔案變成追蹤的狀態
那要怎麼知道檔案是追蹤還是為追蹤呢？使用git status就能知道了
紅色為為追蹤的檔案，使用git add 來追蹤檔案

綠色就是被追蹤的檔案。

下圖為檔案狀態的生命週期，git status可以看到檔案的狀態。

檔案變成以追蹤時，就可以提交了，就像遊戲存檔一樣，為這次追蹤的檔案命名。
可以看到提交的訊息，裡面包含該提交放到哪個分支、SHA-1查核碼

提交完後也可以git log來查看commit的歷史訊息。

以上做完簡單的存檔後，也可以把你的專案放到github上面分享給其他人。
可以到github上面新增repository，打完名稱就可以新增了

接著會到下圖的畫面，有兩個教學匡，使用下面那一個，只需要在專案目錄底下打完那兩個指令你的專案就會被上傳囉

你的專案就會出在github了
",['DAY17-GIT 常用指令'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192570,ModernWeb,0,每日文章推薦系列,17,Day17Vue,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1513806534000000000,35,"簡單易用
學習曲線低
跟angular 1 用法接近
對我這個玩過angular的人來說好上手
有中文文件
單文件的設計很棒
可以在裡面用html jade 等自己習慣的方式寫template真的很方便
尤其後來更新以後也可以自己寫render
算是引入了react的優點
scoped css的功能也省下不少css命名的麻煩
從一開始用來製作小功能
到現在開發前後端分離的SPA網站
都還用的蠻順手的
尤其laravel預設環境就可以使用vue
利用laravel mix都可以不用設定直接寫了
將門檻降得很低
基本上是蠻推薦前端的人都看一下
用不用是一回事XD
官方中文文件
第一次用 Vue.js 就愛上 [改]
loading.io - Your SVG + GIF Ajax Loading Icons
就工具
webpack 为什么这么难用？ - 掘金
如果有自己下去設定是很麻煩啦
但是弄好就很方便了XD
vue mixins和extends的妙用 - 掘金
說明文章
GitHub Flow 及 Git Flow 流程使用時機 | 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY
沒有最好 只有最適合
如果其他人的都不適合自己
就參考之後弄一個給自己用吧
持续集成服务 Travis CI 教程 - 阮一峰的网络日志
其實我在用gitlab-ci而已
目前用的蠻開心的XD
Frontend in 2017: The important parts – LogRocket
歷史回顧
2018 GraphQL 漸進式導入的架構 – Michael Hsu – Medium
API的架構還需要再研究
https://github.com/fripig/article_log/issues/425",,"['vue優點', '推薦閱讀', '今日分享文章', '今天看的文章']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192362,SoftwareDevelopment,0,深入探索LINQ系列,1,踏上探索的旅途,peter3598768,https://ithelp.ithome.com.tw/users/20107789/ironman,1513806439000000000,25,"在參加這次的鐵人賽之前，有時候會寫一些筆記心得放到網路上，但像鐵人賽這樣要連續30天有產出還真的是頭一遭，壓力也是比平常寫文章的感覺要大得多，但同時我也很高興有這個機會可以挑戰自己，讓自己在整理及撰寫技術文章上面可以更加的精進。
決定這個題目足足花了我兩個禮拜的時間，我覺得題目是文章中最重要的一個部分，在這30天中我們都要伴隨著這個主題打轉，在我得知有這項挑戰時，我腦中冒出的第一個想法就是.Net的LINQ，但同時又在想LINQ這個技術已經存在了一定的時間了，相關的文章隨便Google就有，在什麼情境下要用怎麼樣的陳述式或是函式大家應該很容易可以取得相關的資料，因此這個題目得到了我的(暫時)否定，之後我又想了許多不同的題目像是Dapper、ES2015...等，但仔細琢磨後不是自己了解得不夠深就是想不到可以寫到長篇幅的內容...。
我們回頭來想想鐵人賽的題目應該要有哪些要素吧，我自己認為的有下面三項:
上述的條件中冷門的部分是我在一開始沒有想到的，但感謝朋友的提醒，讓我想到可以往更深的部份去鑽研，像是LINQ的原理這樣的文章就比較少，最後就決定朝這個方向寫作，寫的同時也可以幫助自己更加的了解LINQ背後的運作方式，因此這次的主題將會圍繞在LINQ的應用及其原理的研究上打轉。
文章主要下面四大部分:
介紹LINQ相關的工具及資料來源。
探討關於IEnumerable、IEnumerator、Iterator、yield...等的原理及用法。
利用實際例子來說明LINQ的方法用法。
利用.NET Core的Source Code解讀LINQ方法的實作原理",,"['決定題目: Dig Deeper: LINQ', '文章概述', '附註']","['工具及資源', '背景知識', '應用', '原理']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192580,DataTechnology,0,SQLServer學習日誌系列,2,02.SQLServerManagementStudioSQL格式化與排版,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513806069000000000,19,"最近三個月因為工作需求，重新開始撰寫 Stored procedure，面對這個只有曾經維護過但沒有正式學習的工作，總是會有些忐忑不安。幸虧周遭同事相當有經驗，給我蠻多指點。這一篇文章主要是撰寫 SQL Scripts 或 stored procedure 過程中，遇到格式與版面跑位的問題，也因為程式碼皆需要 code review，跑版問題常常造成閱讀上的困擾。這一篇將簡單介紹幾個方法與工具，協助我們撰寫程式過程能輕鬆的排版。
定位點與空白 (Tab and Space)
定位點與空白若沒有一致，當 Scripts 放在不同的地方會導致格式與排版不一致，所以可能在自己電腦上的SSMS撰寫時格式整齊一致，但上傳Code Review的平台，或者團隊成員透過不同的IDE開啟，就會有跑版的情況產生。
首先我們在 SSMS 先將定位點與空白顯示出來：
編輯 → 進階 → 檢視空白區

你會發現撰寫區塊出現空白標示，這樣可以明確知道目前格式是定位點還是空白，如此以來比較好調整

定位點調整
工具 → 選項 → Transact-SQL → 定位點
修改定位點大小與縮排大小一致，並且選擇插入空白，如此一來你的縮排就不會出現定位點，而皆由空格縮排

換行之後輸入文字，會發現定位點變成空白

經過前面的調整，開始撰寫 scripts 的時候，就不會因為定位點與空白而導致排版跑位。那先前的程式碼怎麼辦呢？只需要將選取程式碼 → 編輯 → 進階 → 選取範圍定位鍵轉成空白鍵，就完成轉換。


SQL 格式化的套件蠻多的，這邊簡單簡單介紹 ApexSQL Refactor
Step 1. 前往官方下載網站 https://www.apexsql.com/Download.aspx，下載ApexSQL Refactor

Step 2. 點選開啟，並且依照步驟進行安裝


Step 3. 自動選擇目前電腦上有的 SSMS 與 VS 版本

Step 4. 完成安裝

Step 5. 開啟SSMS 輸入一段語法，選取它

Step 6. ApexSQL → ApexSQL Refactor → Format SQL

Step 7. 完成
","['前言', '起手式 - 定位點與空白調整', '透過套件格式化與排版程式碼 - ApexSQL']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192578,ModernWeb,1,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,18,Webpack零設定，入門教學,"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1513805943000000000,29,"最簡單的說明是
Webpack 是一支
能把一個 JavaScript 檔案
轉譯成另一個 JavaScript 檔案的程式

在這邊，我們創建一個最基本的專案

要使用 webpack 來轉譯
第一步就使用 webpack 這個指令

webpack 會需要帶入兩個參數
第一個參數是你要用來轉譯的原檔案(我們這裡使用剛剛寫的 app.js)

webpack 的第二個參數
是編譯出來的檔名(這邊我們叫它 build.js)

我們這邊注意右邊，會發現我們成功了將 app.js 編譯成了 build.js

而這就是 webpack 最基本、也是最核心的功能
「他將一個檔案，編譯成另一個」
如果我們把 build.js 實際打開來看
你會發現
「哇靠，webpack 剛剛在我的 app.js 裡面加了一大坨奇怪的 code 和註解」
「這一大坨 code 到底有什麼功用、而且有什麼好處？」
這邊的答案是，在此時
你的兩個檔案 app.js build.js 會執行出完全相同的結果

我們又大又肥的 build.js
完全沒有比精簡的 app.js 好在任何地方

現在你可能會更加疑惑，那 webpack 到底有什麼用呢？
其實 webpack 是一個非常全能的工具
它提供了許多功能，像是
使用這些功能，不但可以使你的網頁開發更方便
webpack 也同時會優化你的程式碼，讓你有更高效率 & 超快的網頁
舉例來說，使用 webpack，我們可以使用一些方便的語法
其中一個像是 require() 這個函式
require() 會做的事情是
他會要你填入一個 module 的名稱
他會搜集這個 module 裡面所有的變數和函式
回傳到你指定的變數裡
這裡的話，我們會將 underscore 這個模組，所有的內容都傳進 _ 這個變數裡

如果我們這邊不編譯，直接去執行 app.js
瀏覽器是完全不認得 require() 的

這個原因是，瀏覽器預設讀不懂 require() 這個函式的
你會需要去把它編譯成瀏覽器看得懂的版本
這邊我們要做的事情很簡單
編譯完、將 index.html 裡的 app.js 改成 build.js 就好了

雖然我們現在還看不出太大的差別
但是在編譯過的 build.js 裡
_ 這個已經幫我們加入了一大堆的新功能
如果你現在還不知道 underscore 這個模組是什麼
可以看看 http://underscorejs.org/
他基本上是把一些寫 JavaScript 常用到(原生卻沒支援)的功能，寫成一個函式庫
有了 underscore 後，我們就可以拿他的一些函式來用，舉例來說 _.shuffle()
這邊我們在原本的 code 裡面加入了一個新的陣列 LIST
並且把 shuffle() (打散) 過的版本印出來
這邊如果儲存，會發現我們的 code 並沒有更新
原因是，每次改完 app.js 都得要重新編譯才行

這邊 _.shuffle(LIST) 的功能很簡單
他會吃一個陣列當作參數
並且回傳打散的結果
如果我們一直重新整理，會發現每次印出來都不一樣
如果你覺得每次更新都要手動重新編譯太繁瑣了
可以把指令改成 webpack app.js build.js --watch
加上 --watch 這個參數，他會在 app.js 每次有改動時
都自動去編譯 build.js

今天，在沒有設定的情況下
webpack 提供了我們 require()、以及模組打包的功能
在後續的教學中
我們還會學到","['到底什麼是 Webpack', '這是什麼意思', '實際轉譯', 'build.js', 'build.js 和 app.js 的差別', '呃⋯⋯', '答案是', '舉例 1.', '不過', '編譯', '什麼是 _', '使用 _.shuffle()', '使用 --watch 這個參數', 'webpack 的功能']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192553,ModernWeb,0,使用Django開發網頁系統系列,2,[Day02]安裝環境,Frank,https://ithelp.ithome.com.tw/users/20107183/ironman,1513805922000000000,26,"今天來講講安裝環境
官網快速下載預設是32-bit，如果要64-bit要記得選
專案目錄，我的習慣
這裡我滿推薦用virtualenv 他可以讓開發環境獨立乾淨一點
也有很多人使用anaconda https://anaconda.org/
不過我沒用過XD
但也可以不用，如果不用的話 就直接跳到安裝django的地方
就會看到前面
代表進到這個環境了，如果要退出輸入
裝了python 之後要開始安裝django
接下來安裝django，如果有建立virtualenv，記得都要activate
可以用 pip3 freeze 就可以看到這個環境有甚麼package
這樣就好了
django 最近發行2.0，多裝了pytz，待釐清
以下示意圖

如果有建立virtualenv，記得都要activate
專案目錄
就會run一個開發用的server，開啟網頁輸入 http://localhost:8000
看到djagno的畫面，就成功了
舊版本是看到It’s work，新版變好漂亮XD","['安裝 virtualenv', '安裝 django', '建立 django 專案', 'Run server']",['安裝 Python3'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190982,ModernWeb,0,Laravel與Redis教程系列,1,Laravel&Redis教程DAY1-開發環境設定,s1410432004,https://ithelp.ithome.com.tw/users/20107538/ironman,1513805886000000000,34,"本篇將介紹PHP Laravel所需要的開發工具、系統環境與設定。
Laravel是PHP的一套框架之一，它採用MVC架構進行檔案與程式邏輯的分離，以便於專案維護。MVC (Model-View-Controller) 用意為將資料模型(model)、檢視頁面(view)與控制器(controller)三種邏輯分離，簡單來說與資料表相關的都是model在處理，與畫面相關都是view處理，而controller則是負責商業行為的處理。
而進行Laravel開發之前，需先備齊PHP、MySQL、Composer、Apache的環境
※Laravel 5.5 要求PHP >=7.0.8
(1).打開Wagon內的Cmder.exe，將目錄切換至\uwamp\www，輸入以下指令，利用composer建立一個名稱為blog的Laravel 5.5專案
(2).也可以使用laravel installer新增專案
先使用composer進行全域引入「laravel installer」
接著使用laravel installer建立專案
接著打開UwAmp.exe，確認Apache與MySQL服務都已開啟(若無開啟則下Visual C++ 2012 可轉散發套件 與 Visual C++ 2015 可轉散發套件)，點選Apache Config，設定專案Port，並將Document Root改為
點選OK後，服務將自動重啟",,,"['開發環境', '專案建立與環境設定', 'Windows：']",['Windows (擇一)'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192385,自我挑戰組,0,當運輸遇見IOT系列,2,Day02-當運輸遇見IOT-物聯網意涵,allenchen,https://ithelp.ithome.com.tw/users/20107143/ironman,1513805532000000000,32,"  根據Gartner Inc研究預測指出：2017年將有84億設備連網，相較於2016年成長31％；而BI Intelligence研究也提出兩個預測(如圖）：

  物聯網概念最初起源於比爾蓋茲在1995年《未來之路》一書，維基百科針對物聯網的定義如下：
物聯網（英語：Internet of Things，縮寫IoT）是網際網路、傳統電信網等資訊承載體，讓所有能行使獨立功能的普通物體實現互聯互通的網路。
  而歐洲電信標準協會(European Telecommunications Standards Institute,ETSI)針對物聯網架構，按不同的工作內容可劃分為實體層、感知層、網路層及應用層。
實體層：包括嵌入與整合之實體設備，設備涵蓋交通載具、生活家電、醫療器材、學習媒介等等。
感知層：包括感知技術（環境感知、情境感知及意境感知）、辨識技術（影像、條碼、文字及射頻等）及多媒體技術（影像、人體動作辨識）
網路層：包括無線通訊技術(Wifi/Bluetooth/Zigbee/NFC/LTE/3G)、高速網路技術(IPv6/HTTP/SOAP/IGMP/ICMP..等)、資訊安全技術（防火牆/金鑰認證/安全通訊..等)及多媒體技術（串流/影像擷取及融合...等)
應用層：智慧運輸、智慧家居、智慧學習、智慧醫療、環境監控、智慧城市...等應用。
數位時代也提及物聯網商業模式：
物聯網時代最重要的3個商業模式
1.資料販售與交換（羊毛出在狗身上，豬來買單）
特徵：資料為王：硬體定價很低，甚至0元，廠商販售或交換使用者的資料盈利
知名案例：Nest
備註：硬體價值壓縮
2.產品即服務
特徵：有感服務：廠商售出硬體產品後，利用大數據分析、軟體升級、直接提供人力、售後服務盈利
知名案例：Tesla、奇異、中興保全MyVITA、Dropcam
備註：透過軟體升級，提供給使用者更好的服務
3.產品共享
特徵：共有共享：廠商擁有硬體產品，使用者依硬體使用量付費
知名案例：YouBike、Zipcar
備註：產品共享趨勢
  物聯網是大勢所趨，未來在交通環境的組成，人、車及路，亦會透過網路相互溝通，然而未來勢必會有一個平台，可以整合運輸系統，構成一個車聯網的環境，提供未來一個更即時、智慧而多元的運輸環境。而未來的趨勢，運輸資訊可以產生價值，針對使用者有用的將願意支付費用享用；運輸服務有可能非由實際搭乘運具的人來支付運費。
","['前言', '物聯網', '小結']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192562,ModernWeb,0,後端工程師修煉之路系列,1,最初,sudoliyang,https://ithelp.ithome.com.tw/users/20107319/ironman,1513805249000000000,34,"我是一個後端工程師，同時也是一位學生
興趣使然使我一頭栽入了這個圈子，因為所學都是仰賴網路資源自學而來
走過從麻瓜穿越 9¾ 月台，因為如此我更深刻的體會新手在面對困境的孤獨，在學習新的東西的同時，雪片般飛來的專有名詞，雖然都是中文卻也看不懂的情形，更別說更多的專有名詞像是「Web Framework, SDK, Library, API, Backend，Frontend，HTTP，Cookie，Session，Database..」，都是讓新手吃足苦頭的專有名詞，不僅搞得你眼花撩亂，還讓你感到困頓、孤獨甚至無力。
本系列將分成來能夠個部分，第一部分帶你了解基礎的知識，分享個人學習的經驗與撇步，帶你認識基礎的專業知識，工具，自我學習的方法、資源
第二部分會用實際案例帶您學習如何實作一個網站並且了解它是如何運作的。
富蘭克林曾說：
Tell me and I forget, teach me and I may remember, involve me and I learn
告訴我我會忘記，教我也許會記得，讓我參與我將學會
本系列適合想學習後端技術，與相關知識的人，只要你有興趣了解相關的生態，相信一定能夠給你不少收穫。
本系列分成兩個部分，基礎與實戰，帶給你基礎的知識與實戰的經驗。",,"['適合誰', '寫些什麼內容']","['基礎', '實戰']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192558,ModernWeb,0,謙虛，踏實的WebAssembly練習系列,1,[練習00]為甚麼挑WebAssembly來練習？,fillano,https://ithelp.ithome.com.tw/users/20000108/ironman,1513804353000000000,46,"前一陣子，看到某人寫了一篇Blog：所有主流瀏覽器的最新版都支援 WebAssembly 了
聽到Web Assembly的消息也好一陣子了，多少對他有點興趣，不過一直沒有動手開始學。既然都到鐵人賽的季節了，想一想還是報名了...這樣可以強迫自己練習，雖然是發懶到最後一刻才...（不過好像後面還有幾位報名的，竟然有人報在9:59 XD）
至於為什麼要謙虛、踏實...
雖然挑了這個主題，但我其實對Assembly這東西並不是很熟悉，直接看他的Binary編碼是不太可能啦，他的文字格式是用S Expression這樣的語法...但是在沒學過Lisp或Scheme狀況下，這些看起來很像是個天書。所以，只能多方嘗試，抱著謙虛的心來學習。
至於踏實...因為時間實在不多，不能像上次參賽這樣花很多時間寫程式，所以只能一次一小步，慢慢搞懂一個主題。
（其實「謙虛踏實」是某日文網路小說標題的前幾個字，報名時突然靈感一發，就拿來用了。這小說雖然很流水帳，但是也頗有趣。）
之後的練習，都盡量用文字格式（因為有一個做法是把C/C++或其他語言例如Rust編譯成wasm），每次至少還是貼一個習作。
今天的習作是最小的Web Assembly，編譯成Binary時不會出錯，但是什麼功能都沒有：
明天先來看看有哪些工具可以使用，以及有哪些網站可以當作基本的參考文件來源。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192455,ModernWeb,0,Vue怎麼寫測試系列,3,Day3.卡個文，12點更新,Mos,https://ithelp.ithome.com.tw/users/20104476/ironman,1513803620000000000,39,如題。,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192545,Security,0,資訊系統安全與CISSP的簡單應用系列,6,[Day06]資產安全(SecurityofAssets),wisdomryanlin,https://ithelp.ithome.com.tw/users/20107753/ironman,1513803568000000000,80,"昨天我們講到數據隱私 (Data Privacy)，了解到原來歐盟資料保護主管機關 (EU Data Protection Authorities, DPAs) 是很「大咖」的。今天我們會正式再來了解由其衍生出來的「安全港架構」。在此之前，安總先分享一個小時候的故事。

小時候我家附近一個公共大垃圾箱，就是垃圾車可以把它舉起來，然後把裡面垃圾倒給自己吃的綠色大箱子。因為那時候很無聊，就喜歡當偵探，所以我每天固定去拆某一人家的垃圾袋，看看裡面有什麼並進行分類和統計，我發現我可以知道很多事情，比方說：那一家有幾個人、今天吃了什麼、今天進行了什麼活動、發生了什麼事、今天多了什麼，以及所有紙條上透露的訊息等。(以上純屬虛構，只是我個人的幻想..)
我們所報廢的硬碟 (不論是固態硬碟或是傳統硬碟)，也曝露在這樣的風險中。硬碟這種東西，最好的消滅方式就是「粉碎」它 (Disintegrator)。另外簡單帶過，硬碟啟用比特鎖 (BitLocker) 機制是很基本的：透過全磁盤加密來保護數據，在設備丟失或被盜的情況下，作為第一道防線是專業 IT 的基本功嚕~~ (^.<)

安全港原則 (Safe Harbor Principle) 是允許歐盟 (EU) 和美國 (USA) 雙方企業與個人，能流通「個人可識別資料 (Personally Identifiable Information; PII)」的原則。
我們來仔細看裡面的歷史脈落和前因後果：「安全港協議」是指是 2000 年 12 月美國商務局跟歐洲聯盟建立的協議，它用於調整美國企業 (主詞) 進口及處理 (動詞) 歐洲公民的 PII (受詞)。該協議是響應「歐洲的意圖」而建立的折衷政策，所以，您說的沒錯，歐洲重視數據隱私的程度比較重喔。
我們來看「安全港架構七原則」，您馬上就會發現跟我們昨天講的「EU Data Protection Directory 三重點」有異曲同工之妙：
這有什麼好處呢？安全港協議確立了折衷處理美國和歐聯之間隱私手續的框架。15 個成員國都服從該協議，這意味著可不經個人授權而進行數據轉移，而未加入安全港的美國企業必須單獨從各個歐洲國家獲取授權。
但接下來，我要再告訴您一個令人震驚的消息。

2015 年 10 月，歐盟與美國之間長久以來賴以規範資料及隱私之安全港協議，被歐盟法院宣告無效後，引起各界密切的關注。取而代之的是 EU-US Privacy Shield 以及 Swiss-US Privacy Shield。此舉對於歐美兩國之電子商務活動影響甚深，像是 Google 這樣的大型科技公司，都已經更新其自我監管框架了。(那我們對美國呢？有類似的 Privacy Shield 嗎?)
它主要的邏輯和論點如下：
所以做歐洲的生意的人，記得花一些工夫去看看相關的數據隱私要怎麼做喔。
算是幫助我們國家之企業做資安宣導吧，希望各位能夠採納並明白其中涵義，希望貴企業能越來越好。
有一次我忽然發覺到，曼谷很適合出口到歐洲，從那時候安總就對國際貿易的實務與內在秘訣深深著迷，這是我送給自己的端午節禮物。

《圖解國貿實務》","['撿垃圾的福爾摩斯', '安全港架構 (Safe Harbor Framework)', '安全港協議已被歐盟法院宣告無效', '企業資料等級分類']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192436,Security,0,鯊魚咬電纜：30天玩Wireshark系列,1,[Day1]與Wireshark的第一次接觸,WLLO,https://ithelp.ithome.com.tw/users/20107304/ironman,1513803440000000000,42,"大家好，拖著拖著就來到了開賽期限最後一天，原本還記成是24號才開始呢，還好今天想到重看了一下比賽規則，避免了一些悲劇的發生，於是就開始30天挑戰的第一天吧！
本人身為菜鳥打雜工，因為打雜的太過火，所以最近有點愧對工程師的身分，雖然也不是什麼專家，不過想想這樣下去也不是辦法，於是決定開始把這些回憶記下來，以免之後失憶了會有點麻煩。
好囉廢話到此為止，接著來進入正題吧。
首先，為什麼這次這次30天挑戰的題目要叫做鯊魚咬電纜呢？因為這次想介紹的主題就是鼎鼎大名的Wireshark網路封包分析工具，Wire是電纜，Shark是鯊魚，加起來就是電纜鯊魚，但我覺得鯊魚咬電纜念起來比較順，而Wireshark也就像是隻咬住電纜的鯊魚，讓電流和之中所夾帶的網路訊號流經咬緊緊的鯊魚，如此一來就有辦法觀察所有流經的網路封包。Wireshark的LOGO也設計成鯊魚鰭的輪廓，不過等大家實際使用軟體後，會發現這個輪廓其實也暗指了網路流量正在流經的意思呢。

圖1、Wireshark的LOGO
Wireshark是一個協助使用者收取網路流量並進行分析的工具，他同時是資安專家也是駭客的好朋友，我們可以拿來做正當用途也能拿來做壞事，例如我們可以利用Wireshark來觀察流經自己電腦上特定網卡的封包，並從中觀察是不是有異常的行為出現，像是有些惡意程式會在電腦背景執行，並持續偷偷向外連線以得到指令，或是偷傳資料出去，而Wireshark本身也含有許多好用的圖形化工具及分析工具，可以幫助我們更快的發現網路中的異常狀況。同時，我們也可以把一段時間的網路封包存成一個封包檔，副檔名會是.pcap或.pcapng，以利證據保存或是後續的分析使用；同樣的，駭客也可以在執行攻擊時，例如中間人攻擊的時候，利用Wireshark來觀察他所竊取到的封包，並從中找到有價值或機敏的資訊。
那要如何才能得到這個軟體呢？很簡單，Wireshark是一個免費的開源軟體，請直接到官網的下載頁面中（網址：https://www.wireshark.org/download.html ）中下載適合自己作業系統的最新版軟體即可，不論是Windows、OSX或是各種Linux都可以找到對應的版本，而目前看到最新版的是2.4.3版。切記！請不要去一些詭異或不明的網站下載安裝檔或什麼輕量攜帶版的軟體，你可能除了下載Wireshark也會多下載一些偷加在裡面不懷好意的其他東西回來喔～

圖2、目前官網的軟體下載頁面，最新版本是2.4.3版
下載後就開始安裝吧，如果不確定怎樣安裝的話沒關係，明天會再教大家一步一步的安裝這個軟體，以及介紹安裝時要注意哪些東西！
除了使用軟體以外，如果你覺得自己想要為這套軟體貢獻一點心力，也可以在官網中加入開發夥伴（網址：https://www.wireshark.org/develop.html ），就可以把軟體的原始碼下載回去喔。
另外，Wireshark從2008年起，每年也會舉辦一個叫做SharkFest™的研討會（網址：https://www.wireshark.org/about-sharkfest.html ），並分享與這個工具相關的介紹或使用教學等。2018年將會有三場SharkFest™研討會，包含亞洲新加坡場、美國加州場，以及歐洲葡萄牙場，光看它只是一個開源工具就有辦法辦到全世界這麼多場的研討會，就知道他對於現在的不論是資安研究人員，或是網路相關工作人員是多麼舉足輕重的一個工具，以及大家有多麼仰賴它來完成許多的分析作業。
好啦，第一天先到這邊結束了，請大家繼續期待接下來29天的內容吧！另外，每天都會有額外的bonus資安情資，所以等於一天會有兩篇文章喔，如果有興趣的也歡迎追蹤，雖然我也不大清楚系統的追蹤功能會不會有什麼通知就是，晚點再來試試看。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192563,ModernWeb,0,寫給朋友的PHP從0到100實戰教程系列,3,Day3.PHP教學:一分鐘搞懂『如果...就...』的ifelse語法,falconwei,https://ithelp.ithome.com.tw/users/20107394/ironman,1513803231000000000,59,"Why
為什麼我們用 PHP 要學邏輯語法呢？
因為生活中總是充滿是非題，例如像是：
『如果』晚點會下雨『就』帶傘，大晴天就不用帶
『如果』考不及格『就』會挨罵
『如果』他敢表白，我『就』答應他
『如果』對方出剪刀，我『就』出石頭
說穿了就是滿足某個條件，就去做某件事。
而我們使用電腦幫我們處理事情時，常常就需要描述這個邏輯。
How
那程式語法要怎麼寫呢？
用實際的英文語法也一樣
What
出現了一些新東西讓我來解釋
如果要做的事情很多，我們習慣這樣寫比較整齊：
那有如果我要寫不下雨的情況呢？
可以加上 else 稱 否則
這樣解釋是不是就很輕鬆看懂了 if (條件) { 符合要執行的事情 } else { 否則要執行的事情 }
萬事起頭難，大城也是一塊一塊磚堆出來。
這就是你的第一塊磚，保持耐心，我們要進入更有挑戰性的主題了。
今天的課後作業是告訴我為什麼結果是印出 No, it is rainning ?
想真的執行 PHP 語法的話，可以到這個網址把問題複製上去，就可以看到答案了。
http://sandbox.onlinephpfunctions.com/",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192547,ModernWeb,1,IWantToKnowJS系列,1,WhyDoIWantToKnowJS,henry35208,https://ithelp.ithome.com.tw/users/20107790/ironman,1513803210000000000,54,"目前工作上使用最多的語言是 JavaScript，雖然本身對前端很有興趣，但學習 JavaScript 也已經是從工作之後才開始的了，算一算到現在學習 JavaScript 這個語言的時間大約有八個月了，回顧一下也算是學習到了很多知識，但仍有很多很多的知識是我需要加強的。
工作剛用上 JavaScript 的時候，專案中出現了許多無法理解的語言概念，例如：prototype，超特別的 this，Closure ...etc，對那時只寫過 C++ 等強型別語言的我來說根本是無字天書。
為了要快速進入狀況，去天瓏找了 JavaScript 相關的書籍，當時千挑萬選選到的書就是 You Don't Know JS : Scope & Closure, this & Object Prototypes。看到的第一眼心想，哇這名字真的夠嗆耶，而且內容根本涵蓋所有我最疑惑的主題阿!!! 買回去研究後，工作中許多的疑問頓時有了解答，不得不說，真的有種發現新世界的 FU 呢。除了 You Don't Know JS 以外，我也從自己報名的 JS 課程，工作前輩指導以及網路文章上得到了許多珍貴的知識。
今年參加了 iThome 鐵人賽，並將題目訂為 I Want To Know JS，是想更加深入了解 JavaScript，也藉由這個機會整理舊知識 & 學習新知識並快速成長。在這個系列中，許多內容整理自 You Don't Know JS，除此之外也有很多上課 / 工作上 / 網路文章 學習到的知識，不論是哪種，都會盡量標註參考資料以尊重原作者，也能作為自已與讀者的往後的學習資源。
期望在這次的鐵人賽中，我能看到自己的鋼鐵意志。
此系列的內容會深入探討 JavaScript，以下是我目前預計的涵蓋範圍，實際的範圍還是會依之後文章的篇幅與狀況來做調整。
主要分成以下幾個部分
內容
內容會盡量簡潔有力，以重點整理的方式，適時搭配一些圖片來讓讀者快速吸收知識
另外，不同主題涵蓋相同內容時可能會有些許重複，這麼做是為了方便讀者了解
範例
可作為內容的佐證，也用來協助了解內容
大部分的範例都可以在空白頁的 Console 下執行，開啟步驟如下：
小結
在文末的部分會加入小結來概述這篇文章
參考
文末會標註參考的來源，尊重原作者，也能作為自已與讀者的往後的學習資源
題外話
這部分會加入一些當初的學習心得，或者目前的感想等與主題不直接相關的話題",,"['預計涵蓋範圍', '文章內容 & 格式', '適合讀者', '附註']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192422,AI&MachineLearning,0,如何使用tensorflow在android上系列,1,[DAY01]Tensorflowpip環境安裝,bravo325806,https://ithelp.ithome.com.tw/users/20107510/ironman,1513802481000000000,42,"以下我會示範如何使用pip再ubuntu上使用cpu的方式安裝。
如果pip3未到9.0以上，則要先更新pip到9.0以上
接著我們就可以使用pip3來進行安裝tensorflow環境
如果以上的這行不能進行安裝的話，則我們透過另外一種方式來進行安裝環境。
接著我們再來測試看看是不是安裝成功了
透過以上的code，我們就可以看到以下是否有（Hello, TensorFlow!）
","['安裝環境', '安裝步驟', '使用情況']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192551,自我挑戰組,0,金韶獎官方APP開發(GCP建置)系列,1,金韶獎官方APP開發(GCP建置)Day1,coach110003,https://ithelp.ithome.com.tw/users/20107439/ironman,1513802288000000000,51,"今天是開始著手進行金韶獎官方APP開發(GCP建置)的第一天，在最初我們在思考在如此多樣的伺服器中該用何種伺服器才是最佳的，經過教授與網路上的推薦，最終選擇了Google Cloud Platform，並提供了12個月的免費試用期與300美元，並在期限後也會有每月的免費流量，GCP的付費模式為以量計費，自己需要多少就選擇多少可隨時更換非常方便。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192177,ModernWeb,0,三十哩路，我的前端學習路程系列,17,Day17::我所知道的CSS重構第四章之三,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1513801705000000000,47,"圖片可以透過<img>、<picture>標籤來呈現。
因為<img>元素可以在行內的格式情境中使用，此外<img>元素會在大小已定的區域層級元素中顯示，為了避免影像超出其容量的範圍，可將其max-width設定成父容器(父層)的100%
在設定基底樣式時可考慮設定下列屬性：
border
max-width
vertical-align
可複用組件(reusable components) 是我們在其上套用樣式，讓她們具視覺隱喻，使用者可更容易地透過他們與網站互動的元素或元素組件。如按鈕(buttons)、下拉式選單(drop-down menus)、對話框(modal windows)、進度列(progress bar)與頁籤(tab)都是可複用組件。
我們很容易就可以認出這些可複用組件，但要正確地將它們做好、有時並不容易。
在製作可複用組件時，可以思考下列的問題：
這兩個問題有答案後，就可以簡化製作可複用組件的流程：
第四章大概介紹許多常用到的標籤通常會有那些預設的樣式
最後面有提到關於物件元件化的作法，在不同的情境就會有不同的製作方法
有興趣的朋友可以翻翻看，因為範例真的很詳盡還有附圖說明...!!",,,,"['影像', '組件樣式', '心得']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192556,ModernWeb,0,Laravel學習系列,1,LARAVEL學習DAY1簡介,a7612626,https://ithelp.ithome.com.tw/users/20107501/ironman,1513801459000000000,109,"如題 卡
最近真他X忙
對 我就是個菜雞 一個死科大生 就只會這種東西
（其實是因為想說取完標題還可以改 結果超過時限了 內容會比這標題還多）
不知道 可能是潮吧 不過我菜英文 還請多多包含
（一方面是排版起來不會太難看）
其實 我本來還想教Vue.js的 如果沒意外應該會教 除非我忙到炸掉
臺中科大資工系學生 對 你沒看錯就是臺中科大 不是什麼中X科大 還是什麼東西的 是國立的（如果你不覺得重要就算了） 還是台中第一的科大（應該吧 雖然我覺得還好）
然後 高中的時候考了一個丙級網頁設計的垃圾檢定 其他東西都是在大學學的
沒辦法 天生講話嘴砲 然後又看到有一篇講電商的更狂 不過這篇因為可能會有教授看 就不太囂張了
第一天而已 簡單的介紹 不是很有空 就這個水平了
但是教的東西應該不會爛到哪裡去 對了 我主寫後端 前端沒UI都是正常的 有功能就不錯了
題外話 ~!@#$%^&*黑蘋果不給升High Sierra 窮人家的小孩真可憐
BYE~
有人說我沒講到Laravel在幹嘛 這麼簡單還要講嗎
每個人講的都一樣啊
http://bfy.tw/E5ep
什麼 你想聽我講嗎 就是一個PHP Framework啊 加油 你行的
只是不要把你寫原生PHP的想法帶進來
然後我不會從PHP基礎開始教 不過環境還是會講
我會盡可能提供三種乾淨系統會遇到的問題（Windows Ubuntu macOS）",['LARAVEL學習 DAY 1 簡介'],"['WHY THIS TOPIC', 'WHY ENGLISH', 'WHAT IN THIS ARTICLE', 'WHO AM I', 'WHY THIS STYLE', 'END?', '拍謝']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192555,ModernWeb,0,React系列,1,介紹React,s1410432026,https://ithelp.ithome.com.tw/users/20107539/ironman,1513801394000000000,44,"
React是由Facebook工程師開發針對UI的前端JavaScript開源函式庫，目前正在被Netflix、Imgur、Instergram、Airbnb等網站做主頁的使用。
1.運用元件化思考，讓元件有封裝並能夠重複使用的特性，元件之間不會互相干擾，也容易維護。
2.很有效率的利用Virtual DOM達到即時更新的效果。
3.使用JSX語法配合Babel輕鬆編寫。

一般傳統的Web使用jQuery進行DOM的操作，DOM使用一個樹狀結構統一 HTML、XML 和 SVG規範，但他超慢的，往往網頁更改了一個小東西，都要重繪一次，在網頁元件多的時候顯得更加低效率以及吃效能，因此React做了Virtual DOM當作虛擬的中介層，使用React的diff演算法讓App與DOM去做比對，只重繪有更新的部分，這樣大大增加了效能。
React使用純JS在前端產生HTML，如果直接用原生的JS會長這樣
但它在JSX裡面長這樣
是不是看起來簡單而且直覺多了?
但我們要如何把JSX轉變成純JS讓React看得懂呢，這時候就要使用Babel，它會把JSX直接編譯成React看得懂的JS。",,"['什麼是React?', '用React的好處', 'Virtual DOM?', 'JSX? Babel?']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192552,SoftwareDevelopment,0,我的TDD開發之旅系列,1,Day1開始吧,pajace2001,https://ithelp.ithome.com.tw/users/20005357/ironman,1513801172000000000,50,"TDD 是什麼呢？為什麼要TDD呢？他和BDD、DDD、ATDD有什麼不同呢？一定要TDD嗎？ 轉職成碼農已經邁入第八個年頭了，認識 TDD 也要滿5年了，很慶幸的是在這一路上遇到了許多前輩、老師和許多的社群朋友，讓我有這個機會可以踏上 TDD 開發之旅，而不是單純的寫扣(Coding)、抓蟲(Debug)，寫扣、抓蟲的無限輪迴。
在未來的三十天裏，我將整理我自己的 TDD 開發 慘痛 經驗，或許不是很深入，或許沒有很專業，但都是我自己的體驗和故事。也剛好可以替自己做一個總結，回顧一下這5年來 ~到底都做了些什麼呀~ 目前的狀況，好讓自己朝下一個目標前進。
我記得是在第1份工作的離職前一個月，是讓我真正意識的 Unit Test 的重要性。
故事是這樣的，我的第1份工作是寫 Java, 負責的工作是開發類似文書流程的系統。就在我要離職換公司的那陣子，那時已經沒有新的功能需要開發，所以我就想說趁這個機會來 Refactor 一下吧，好讓接手的人在看我的程式碼時可以更容易些。
就這樣，我花了大約兩週的時間，完成了非常大的 Refactor，並且是在沒有任何 Unit Test 的保護下所做的大幅度 Refactor。 雖然說那時候已經有聽過 Unit Test，可是自己也沒實做過。對他的唯一印象就是在參加信仁軟體所開辦的軟體開發課程裡的老師 Ringle Lai 說過:
如果你是主管，你的組員不願意寫 Unit Test, 你就壓著他寫, 寫一段時間後他就會自動自發寫 Unit Test 了。如果你是組員，那就強迫自己寫吧。
那時候我我開始工作的第2年(咦？怎麼好像是藉口原因)，所謂初生之犢不畏虎，也沒在怕的，就在看過 重構(Refactor) 這本書之後，非常興奮的對我的程式碼進行大幅度的重構。於是，故事就開始了.....
想也知道，這麼大膽當然是蟲蟲滿天飛，更慘的是一開始系統還不會動...所以，我只好捲鋪蓋走人了XDD(不是啦，是用SVN回到上一板, 住做了兩個禮拜的白宮)
但這一擊的力道著實不小，同時也在我小小的心靈裏面烙下身身的印痕阿~~~",['Day1'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192179,SoftwareDevelopment,0,iOSSwiftxLayoutxAnimationxTransition系列,1,BankBalance(LabelAnimation)-模仿「得到」儲值動畫,Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1513800946000000000,54,"
這是「邏輯思維」團隊的「得到」App，把錢存進去會在「我的帳戶」裡面看到一個餘額的數字動畫。
而之前在「餘額寶」的App中也有看到類似的動畫效果，給App增加了不少樂趣，這次打算實作看看。

如果今天PM告訴我們需要一個「從0過渡到1024的動畫效果」，我想有些人會覺得很簡單，直接做一個循環，在畫面上顯示1、2、3、4...1024。
但其實這種動畫通常不會顯示很久，測試下來感覺2秒就開始考驗耐性了。
所以其實應該是需要寫成像「進度條」那樣，根據當前進度跳躍式的重新渲染畫面（如0、124、258...1024），這樣一定比1、2、3、4...1024每一個數字都要進行一次渲染來得有效率。
畢竟應該沒有PM會說，「我們希望用戶可以在1秒內看到每一個數字」...
定義「初始數字」、「最終數字」、「動畫時間」、啟動「Timer」
Timer所在的runloop中因為需要處理很多事物，所以它最小週期大約在50~100ms之間（官方描述），也就是1秒內大約能處理20次，這樣不容易達到60FPS的順暢感。
timer會呼叫「updateValue」方法，來更新當前數字的「進度」，並且通過settextValue()來改變UILabel中的
以時間為單位，如果progress已經達到/超過動畫時間，就直接顯示最終的數字。","['模仿「得到」App 的儲值動畫', 'BankBalance', '筆記', '參考']","['數字變化的過程', '兩個對外的動畫方法', '用CADisplayLink代替Timer', '當前餘額變化進度的計算方式']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192387,自我挑戰組,0,JavaWeb三十天學習歷程系列,1,Day1:引言,肯迪,https://ithelp.ithome.com.tw/users/20107825/ironman,1513800440000000000,49,打算利用這短短三十天的時間，來記錄自己的學習歷程，預計是要寫一個簡單的會員系統，在這裡留下自己遇到的問題以及經驗，完成後還有多餘的時間，就來寫一個以MVC架構為主的網站。,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192213,ModernWeb,0,AngularFirebase入門與實做系列,1,[AngularFirebase入門與實做]Day-00,AlanShun,https://ithelp.ithome.com.tw/users/20104952/ironman,1513800188000000000,102,"Smile and let everyone know that today you're a lot stronger than you were yesterday.
2017是一個技術爆炸的一年，特別對Angular來說更是如此，今年真的讓我們又愛又恨，充滿驚奇，有許多新東西不斷進入了我們的世界中，筆者是一名使用Angular在前端世界裡游泳的開發人員，筆者喜歡並享受在撰寫Typescript、Angular時的優雅與穩定，透過這次鐵人賽，筆者想給自己一個機會究並實做Angular Firebase，也分享自己這一年寫Angular的一些小經驗給大家。
Firebase 是Google提供的一個nosql Database並且是一個Realtime Database，Realtime Database? 或許你沒聽過，簡單概述就是他透過機制可以在server資料改變的時候""自動""(websocket)通知client讓client做想做的事情，我們完全不需要對這個資料同步去做處理，只需要CRUD資料就會自動改變了，有了Realtime batabase可以讓我們在撰寫程式的時候省去很多必要的行為，讓資料能更加獨立，並能加速開發的時程。

並且Firebase有提供storage、Hosting、Authentication的功能，讓我們能更專注的在應用的撰寫上。
覺得很厲害!? Firebase還有更厲害的!
Firebase Functions 提供我們能在沒有後端的情況下撰寫一些後端的程式碼在上面，讓我們能真正達到Severless的境界，並且可以收發信件、金流串接、SSR(server side rendering)、等等

Angular也是Google家的產品，他使用Typescript，Typescript是Javascript的超集合，透過他的Types做強行別的檢查，讓我們撰寫的javascript更加穩定，並且它有優美的intelli sense!!!(寫錯會紅紅的XD)，關於Angular的詳細教學及解說，可以參考網路上各位大大們的文章，已經有很多詳細的教學，這邊就不再贅述，這邊會專注在angularfire2以及一些自己撰寫上的經驗的分享，同時筆者也會操作並使用AngularFire2來操作Firebase。
AngularFire2 是 angular團隊針對Firebase推出的官方library，他使用RxJs(如果沒聽過的強烈推薦先去朝聖一下30 天精通 RxJS)來實做，讓我們在操作Firebase能更貼近angular，並且在幾個月前正式推出了5.0的版本，而5.0的版本有不少異動，如果先前有使用過的朋友記得Follow官方的升級文件進行升級，這次鐵人賽將會使用5+版本來進行實作。
筆者在今天撰寫時發現Firebase在4.8.1有一些break change，他們將types獨立出去了，導致在使用AngularFire2時因為尚未更新，會有錯誤產生，所以本文在angularFire2更新前會先使用Firebase4.8.0的版本。
不果筆者認為有改變就是好事，有改版代表成長有需求！就像我們在軟體的世界，唯有改變才能成長！
世界一直改變！不變的只有我們能保持不斷的學習！期許自己在30天的過程中能有更進一步，筆者只是一為初前端的小小，歡迎大家一起討論，切磋！","['Firebase', 'Angular', '參考連結']","['Firebase functions', 'AngularFire2', '預計大綱 (持續更新)', '自我期許']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192539,AI&MachineLearning,0,深度學習環境安裝筆記系列,9,[Day09]深度學習環境安裝筆記—安裝與編譯Tensorflow,a7552005,https://ithelp.ithome.com.tw/users/20091307/ironman,1513799680000000000,47,再佔一個坑，希望這禮拜能把文章都生出來Orz,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192537,ModernWeb,0,ASP.NETMVC網頁程式介紹系列,11,[Day11]如何用ASP.NETMVC接收Post資料(一),小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1513798893000000000,50,"我們繼續沿用了之前的畫面

這次改用Post傳送資料到同樣的頁面，在index.cshtml只要將Get改成Post
而後端HomeController.cs接收的部分多了一個Post的接收項目
有加[HttpPost]標籤的是Post的方法，讓MVC知道我們是要用Post接收，可以跟上面的Get方法來比較，我們用FormCollection post來接收資料，然後用post[""id""]接收id欄位的內容，接收的資料原本就是string，所以不用轉換格式，只有int的部分要轉換格式，後面就跟前一個範例一樣，在下面有提供畫面跟cshtml檔案
網頁畫面

以下是Transcripts.cshtml的部分：
p.s.
會不會覺得我很懶，
本來就是很懶啊...
--
小弟不才，
如果有謬誤或是要補充的，
都歡迎一起來討論！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192536,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,16,(Day16)基本繪圖功能與資料快速瀏覽(下),Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1513798489000000000,49,"接續前篇!!!
本兩篇的目的，不在拖篇幅，期望能多點表單應用面的說明，嘗試能讓表單有實際的應用情境，並非為了做表單而做表單。
唯有能提供對需求有意義的資訊，圖表也才有做的意義。
根據直條圖-MBA智庫百科直條圖一般適用於內容較為獨立，缺乏連續性的數量資料，用來表示有關數量的多少，特別適合於對各數量進行對比

根據直方圖-MBA智庫百科直方圖又稱質量分佈圖，是一種幾何形圖表，它是根據從生產過程中收集來的質量數據分佈情況，畫成以組距為底邊、以頻數為高度的一系列連接起來的直方型矩形圖。


　　直方圖的優點:任何情況都能使用直方圖。
　　直方圖的不足:會有信息丟失。
　　1、條形圖是用條形的長度表示各類別頻數的多少，其寬度（表示類別）則是固定的。
　　2、直方圖是用面積表示各組頻數的多少，
矩形的高度表示每一組的頻數或頻率，寬度則表示各組的組距，因此其高度與寬度均有意義。
　　3、由於分組數據具有連續性，直方圖的各矩形通常是連續排列，而條形圖則是分開排列。
　　4、條形圖主要用於展示分類數據，而直方圖則主要用於展示數據型數據。
根據箱型圖Box Plot-MBA智庫百科
箱線圖作為描述統計的工具之一，其功能有獨特之處，主要有以下幾點：
　1.直觀明瞭地識別數據批中的異常值
　2.利用箱線圖判斷數據批的偏態和尾重
　3.利用箱線圖比較幾批數據的形狀

　　1、不能提供關於數據分佈偏態和尾重程度的精確度量
　　2、對於批量比較大的數據批，反應的形狀信息更加模糊
　　3、用中位數代表總體評價水平有一定的局限性
R Graphics Cookbook-Chapter2 Quickly Exploring Data",,"['bar char', 'Histogram', 'Box Plot', '參考資料']","['直方圖的優缺點', '直條圖和直方圖的區別', '箱線圖的功能', '箱線圖的局限']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192535,ModernWeb,0,JS30錄系列,1,Day1-JSDrumKit,Arel,https://ithelp.ithome.com.tw/users/20107212/ironman,1513798431000000000,84,"利用JS做出一組爵士鼓.
HTML code如下, 類別keys內部包著九個類別為key, 但持有不同data-key屬性值的div標籤. 在外頭也有九個分別與之對應的audio標籤. 當與kbd標籤內部對應的按鍵被按下時, 會發出相對應的聲響.
首先在window物件底下設置監聽keydown事件的監聽器, window物件為包覆整個DOM的物件, 在該處設置監聽器可以監聽DOM內觸發的所有事件. keydown事件只要瀏覽器偵測到鍵盤被按下的瞬間就會觸發. 被觸發的瞬間, 執行自訂函式playSound來回應.
playSound函式就是用來播放聲音的! 要發出指定的聲音需要幾個步驟, 以按鍵'A'被按下的過程來舉例:
按照以上的邏輯, 寫出來的程式碼大致如下:
看起來有點複雜, 其實也還行! 拆開來個別理解一下...
addEventListener會把被監聽的事件物件當成值, 傳入回應的自訂函式之中. 要讓自訂函式收到該值, 可以在宣告自訂函式時提供一個代表該事件的參數, 通常會用e (或是event)命名. 在這裡playSound(e)裡面的e代表keydown事件的物件
e.keyCode屬性記錄著""按下的按鍵""的keyCode.  鍵盤上的每個按鍵都有一個相對應的keyCode, 有興趣可以在 http://keycode.info/ 看看各個按鍵的keyCode. 以'A'舉例, 就是65.
document.querySelector() 是用來選取DOM的方法, 括號內部填入代表CSS選擇器的字串.
CSS Selector 是一組用來選擇特定元素的CSS 符號. `audio[data-key=""65""]` 就是一串CSS selector. 在CSS Selector的意思為具有屬性data-key=""65""的audio標籤.
Template Literial是在字串前後以` `代替"" "", 通常內部放的東西會被當成字串, 若要插入變數只要以${變數}隔開就好. 使用 Temlate Literial讓""在字串中插入變數""的動作更加容易.
我們希望 data-key 的值是每次按下去的按鍵的keyCode, 而不是固定的65, 因此需要在data-key的值放進代表按鍵輸入keyCode的變數. 結合CSS Selector 和 Template Literal, 可以寫成 `audio[data-key=""${e.keyCode}""]`.
data-key屬性是自訂的 data-* 標頭屬性, 這種屬性通常用來儲存與該元素標籤相關的小型資料, 一個標籤可以有好幾個 data-* 屬性.
所以下面這段程式碼的意思就是, 找到data-key屬性中存著按下按鍵keyCode的audio標籤, 並指定給audio這個變數.
根據原始檔提供的HTML標籤, 只有九個按鍵會有相對應的audio標籤. if(!audio) return 的意思為: 如果沒有找到對應的audio, 就返回.
if() 括號內的東西會自動被轉成Boolean, 結果只有true或false, 除了falsy以外的東西, 放進去的結果都是true. , 如果按下去的按鍵沒找到相對應的HTML標籤, audio變數的值就會是 undefined , 是falsy的一種, !audio就是非audio.
如果沒有被返回, 表示有該標籤, 就可以在下一行用audio.play()播放.
大致上完成了! 但有些不流暢的小地方!
實際打鼓後會發現, 有些比較長的聲音檔在播放時, 當新按鍵按下去, 新的聲音檔並不會被立即執行! 所以我們的鼓會有點lag, 沒辦法咚咚咚一直敲, 這簡直侮辱了鼓手的尊嚴!
所以我們得加點料...
在audio.play()上方加了一行audio.currentTime = 0. currentTime特性代表目前播放的進度.每次播放聲音前, 將播放進度設定回原點, 然後再播放, 這麼一來就可以連續敲打了!!
但還是有個美中不足之處, 我們希望敲打時, 被敲打的按鍵會發光並放大, 讓我們知道自己正在敲打哪個樂器, 沒錯, 這就是身為鼓的使命.
所以可以...
因此得加入一些程式碼!
用相同的方式選取具有對應data-key的div元素, 如果具有該HTML元素, 就為它加上'playing`這個CSS類別. playing這個類別記錄了放大和邊緣發黃光的CSS! 加上的瞬間, 它就會發光!
但總不能一直讓它發著光, 所以必須設定發完光就光芒退散.
此時先看一下key類別的CSS.
transition 是CSS轉場, 第一個參數代表變化時會使用到轉場的屬性, all就是全部, 表示.key內可以支援轉場效果的任何屬性, 只要發生變化, 都會以動畫的方式漸變到新的屬性去. 第二個參數代表在多少時間內要完成轉場,第三個參數代表轉場過程與時間相依的函數, 簡單來說轉場速度不會是固定的, 可以依照設定在一開始轉變得很快, 後來變很慢...之類的.
會特別提到轉場, 是因為轉場結束後會觸發一個transitionend事件, 是我們要監聽的對象! 是的長官, 發現目標了!
在keydown監聽器上方加上這兩行!
用document.querySelectorAll('.key')把所有帶有key類別的元素都選起來, 並指定給key變數. key變數內所存的值會是一串清單, 內容是所有帶有key類別的div元素. 注意這個清單本身並不是一個陣列(Array), 只是長得很像. 我們叫它類陣列(Array-Like). 類陣列跟陣列的差別在於, 它少了陣列本身所具有的一些原型屬性(properties) 與方法(methods), 所以像Array.forEach()這個陣列該有的方法我們就不能使用...
但是我們必須用!
所以利用Array.from()這個ES6所提供的好方法, 我們能把括號內的類陣列變成一個真正的陣列, 接著就能使用forEach()方法.
forEach()方法顧名思義, 能把陣列內的每個元素用自訂的函式迭代執行一次. 舉例如下:
因此上述程式碼的第二行意思是: 將所有帶有key類別的div元素加上監聽transitionend的監聽器, 只要任何key類別元素轉變完畢, 就執行removeTransition自訂函式, 將放大和發光的效果移除! removeTransition函式的內部長這樣:
為什麼會有 if(e.propertyName... 什麼的?
因為CSS轉場的第一個參數是all, 當一個有對應按鈕的按鍵被按下時, 該按鍵的transform, border-color, box-shadow都被新增的 playing 類別影響, 都改變了, 都有轉場, 都會有轉場結束的時候, 因此會觸發好幾個transitionend! 可是我們只需要一個啊!
所以我們只需要留下一個屬性, 並將其它屬性觸發事件的自訂函數返回. 這裡用傳入的事件物件e裡面的propertyName屬性, 獨留transform的回呼函式. 事件物件的target屬性存有觸發事件的HTML元素本身, 在這裡即為剛轉場結束, 帶有key類別的div元素. 利用e.target.classList.remove('playing') 把放大發光效果移除.
整個串起來如下面的code, 好!
以上就是JS 30 第一篇的心得分享! 嗯打太細了...",,"['任務內容', '作法']","['playSound(e)', 'e.keyCode', 'document.querySelector', 'CSS Selector', 'Template Literal', 'data-* 屬性']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192533,ModernWeb,0,Expo---跨平台App開發從零到上架系列,16,ExpoDAY16---ImagePicker,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1513797343000000000,82,,['Expo DAY16 --- ImagePicker'],"['前言', '現在就做看看', 'Refs']",['Expo'],,,['tags: day16 iThome鐵人賽2018 ReactNative Expo ImagePicker'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10192529,SoftwareDevelopment,0,系統架構秘辛：了解RISC-V架構底層除錯器的秘密！系列,2,Day02:簡介OpenOCD背景與編譯,HelloWorld,https://ithelp.ithome.com.tw/users/20107327/ironman,1513797214000000000,83,"終於來到正式文章的第一篇，當然開始之前還是要先來廢話暖身一下!!!
不免俗地還是要來講古一下，算是用來擴充篇幅用的，
順便練習打字(Markdown的使用)!
  
OpenOCD，原名為Open On-Chip Debugger，
為Dominic Rath在奧格斯堡應用技術大學的畢業論文(diploma thesis )所做。
OpenOCD目前所使用的授權為GNU General Public License version 2.0 (GPLv2)，其他詳細授權內容可以參考原始碼中的README中的說明，這邊不再多加著墨。
巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉，其他省略不重要
  
  
常用的參考文件有以下兩份
OpenOCD User's Guide (http://openocd.org/doc/html/index.html)
OpenOCD Developer's Manual (http://openocd.org/doc/doxygen/html/index.html)
  
  
OpenOCD User’s Forum (https://forum.sparkfun.com/viewforum.php?f=18)
OpenOCD User’s Mailing List (https://lists.sourceforge.net/mailman/listinfo/openocd-user)
OpenOCD IRC (irc://irc.freenode.net/openocd)
  
  
  
目前所使用的環境為Ubuntu 16.04，不過之前開發的經驗，其他Linux環境也行，
例如: CentOS 6.8
根據OpenOCD開發文件的README中，為了能夠順利編譯OpenOCD，需要下列套件
注意版本問題，要不然很容易在bootstrap的過程中遇到錯誤
./bootstrap
./configure [options]
make
sudo make install
  
  
這邊提供一個從Clone Source Code到編譯完成的完整Script
使用方法:
./build.sh build src 1  --> 包含clone source code
./build.sh build src    --> 純build code
執行檔會在build/usb/bin中!
另外需要注意一下Linux權限問題，由於OpenOCD需要使用到USB周邊裝置，
通常需要使用root權限來執行或是參考附錄A.的說明
  
  
  
我覺得最重要的應該就屬下面這份
OpenOCD Developer's Guide (http://openocd.org/doc-release/doxygen/index.html)
尤其其中的C Style Guide可以參考一下(http://openocd.org/doc-release/doxygen/stylec.html)
要不然送上去的Patch大概會被退個好幾次......
  
  
基本上就按照Patch Guidelines (http://openocd.org/doc-release/doxygen/patchguide.html) 文件中先設定好GIT相關的資料。
或是可以使用source code中tools/initial.sh 來自動化設定。
然後流程就可以簡化成
本篇粗淺地介紹了相關的開發環境和流程，還沒真正進入到底層的世界中~~~
持續廢話ING
  
  
  
通常為了避免使用到root來執行OpenOCD，我都會使用udev中的rules
在/etc/udev/rules.d/70-persistent-usb.rules中加入以下內容
最後將使用下面兩個Command將udev的rule重新載入，記得需要Root權限
  
  
  ","['0. 前言', '1. OpenOCD Introduction', '02. 開發工具簡介', '03. OpenOCD Developer', '99. 結語', 'A. 附錄:', '參考資料']","['1.1 講古', '1.2 文件', '1.3 其他資料', '2.1 環境簡介', '2.2 相關Source Code位置', '2.3 通用OpenOCD編譯流程 (參考README中相關說明)', '2.4 編譯用Script(build.sh)', '3.1 相關文件', '3.2 Patch流程']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192526,ModernWeb,0,用Vue與firebase開發訂便當系統實錄系列,1,統計便當總是好麻煩～來個訂便當系統吧！,raindot,https://ithelp.ithome.com.tw/users/20107375/ironman,1513797094000000000,98,"Clover
Jimmy
Paula
HungYu
公司中午訂便當的時候，要統計誰訂了什麼總是很麻煩，還有人會漏傳訂便當的紙而沒訂到
我們訪問了中午負責訂便當的負責人
Q：請問你覺得在訂便當時最困擾的是什麼呢？
A：應該是有人會忘記寫而沒訂到便當
做一個訂便當系統，可以分享訂便當頁面到line或其他通訊軟體，提醒並讓大家在線上填寫訂單
負責人只要看著最後填寫的結果聯絡便當店就好",,['好食在 – 團訂便當系統'],"['計畫成員', '緣起', '痛點', '解法']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191186,ModernWeb,0,與零經驗者的白話對談-以Angular2建構網頁前端架構與知識系列,1,與零經驗者的白話對談-Day(00)關於這系列,nmaker,https://ithelp.ithome.com.tw/users/20106254/ironman,1513796830000000000,107,"「白話對談」
希望能以對談般清楚簡單地言語解釋繁瑣的概念與名詞，
並且能讓你從這30天的對談中感到點趣味。

一個人從零開始，一點點地從無開始寫出一個網站是一個令人
興趣也非常具成就感的事，但這也並非一件容易的事。
希望這系列文章能以較為口語的方式將概念解釋清楚，以最低的學習成本
學到最多的東西，讓讀者感受到網頁程式設計的趣味。
（第零篇文章作為簡介一開始可能會出現不少名詞，別擔心，
這一些名詞都將在後面的文章中一一解釋的）


強力好用的前端框架:
能針對性地對程式碼進行高度優化，保留所有手寫程式碼的優點
加上從框架Angular2提供出高生產率。
程式碼整合度高，架構嚴謹，是個易開發的Web框架，適合團隊合作，
並且擁有高普遍性。
以下兩圖可以看出其普遍性以及市場上的熱門程度（2017年12月資料）


ALL-IN-ONE:
許多複雜的事都幫你處理好了！涵蓋了呈現、邏輯、結構等各個層面。
只要依照結構寫入對的位置，就能將不同的功能整合出一個完整的網頁。
相比其他前端框架（如React、Vue):
官方提供的Library十分齊全（routing、HTTP、DI)，不用花太多心思選擇。
相反地，React選擇自由且眾多，但相對地要用較多精力選擇。
其他優點:
容易使用第三方框架、跨平台支援等等
重要字將以英文為主並會儘可能附註中文：
如Component(組件）
當愈學愈多的時候。你常常需要去一些論壇（如Stack overflow)或是
查看文件（如 Angular2官方的使用教學），這時候如果你不習慣這些
常用名詞的英文，將會非常吃力。當然，也有中文的教學、論壇。
但畢竟程式是以英文撰寫的，以英文能查到的東西比起中文多出非常多！
簡化過後的理解：
如這系列文的標題所說，我希望能以更簡單的言語闡述一個相同的
概念，如同對談交流般讓讀者理解。
這些都是根據我的經驗所簡化出來的言語，可能會和網路上其他人
的理解不一定相同。
儘量以圖說明：
比起文字，我相信圖更簡單讓人理解。
(大部份圖是我自己做的，轉發的話請告知一聲）

我還是一名學生，目前於海外唸書，說實話還不算是非常有經驗的前端開發者。
曾獨立開發過一個網站的前後台，目前於小型的創業團隊協助開發APP。
保持神祕，以下面這張logo來簡單代表一下自己

如果對於文章內容有任何疑問或是建議，
可以留言給我，任何回覆都會讓我有更多進步！
（由於12月底出去旅遊，可能20號-28號可能無法每天發文）","['前言', '目標', '大綱', '為何選擇Angular2?', '此系列文章特色', '關於我', '其他文章連結', '問題與討論']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192493,自我挑戰組,0,三十天精通電腦科學，ComputerScience30D系列,1,Lecture0Seratch,OmarOR,https://ithelp.ithome.com.tw/users/20107665/ironman,1513796681000000000,76,"二進位、ASCII、RGB、二分搜尋法
介紹基本程式語言：條件判斷、變數、迴圈、陣列、函式就
Introduction
Binary
Binary Lamps
ASCII
RGB
Thinking with Peanut Butter
Finding Mike Smith
omputational Complexity
Pseudocode
Staff Introductions
Course Teaser
Introducing Scratch
meow
Oscartime
counting sheep
pet the cat
don't pet the cat
threads
events
hi hi hi
Ivy's Hardest Game",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192523,自我挑戰組,1,GAME30天系列,10,Firebaseintro.(4/5,我是一支小小小小鳥,https://ithelp.ithome.com.tw/users/20107379/ironman,1513796667000000000,86,"可設定的rules 有四種 type:
有這幾種現有的變數可以使用
讀取：
寫入：
排序：
過濾：
這邊可以印出我們users所有的資料
如果資料是用push()存入, 就可以用orderByKey()取出, orderByChild() 可傳入子節點的參數, 然後用過濾的方式將資料取出, 舉例：
參考資料 Firebase Database Security Rules API
參考資料 YJ BLOG",,,"['資料權限', '排序, 過濾資料']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192524,ModernWeb,0,從看懂ASP.NET3.0VBScript到入門PHP7的自學之路！！系列,1,寫程式前先認識ASP3.0和PHP7吧！,OmarOR,https://ithelp.ithome.com.tw/users/20107665/ironman,1513796554000000000,105,"首先我先來說一點點廢話好了
本人今年私立科大資管畢，目前在職是網頁切版師，實27K
會寫這篇文章是覺得公司的網站系統用ASP有點舊，想用PHP自己刻一個當作品
但為什麼要認識ASP呢…，因為公司後臺的版面要更新，所以叫我協助後端套程式…
告非…
首先我們先來談談 ASP3.0
ASP動態伺服器網頁（英文：Active Server Pages，簡稱ASP）由微軟公司開發的伺服器端執行的指令碼平台，它被Windows下Internet Information Services (IIS)的程式所管理。
ASP主要有五個內建元件
Application：在一個ASP-based application讓不同使用者共享資訊。
Request：從使用者處理取得資訊
Response：將資訊送給使用者
Server：提供一些Web Server的工具
Session：儲存在一個session內使用者的資訊
目前ASP最新的版本為3.0，當時是與Windows 2000一起發行，並內植於IIS 5.0中
自ASP 3.0發行後，除了各版本對它的安全性或問題修補外，對主要功能都沒有再進一步的更新。 Windows Server 2003發行的ASP也是3.0版本。
PHP（全稱：PHP：Hypertext Preprocessor
開發環境
可以用xampp安裝套件或是doacker，建置PHP的環境
參考資料來源",,,"['前言', 'ASP3.0 簡介', 'PHP7 簡介']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192517,ModernWeb,0,AngularMaterial完全攻略系列,2,[AngularMaterial完全攻略]Day02-環境設定&安裝＆HelloWorld,Wellwind,https://ithelp.ithome.com.tw/users/20020617/ironman,1513796019000000000,134,"今天我們將開始正式邁入Angular Material的世界，要學習使用Angular Material打造高品質及高質感的網頁，當然要從安裝Angular Material套件開始，本篇文章就來介紹基本的Angular Material安裝步驟，並簡單加入一個元件來體驗一下有質感是怎樣的一個感覺！
本篇文章需要在電腦上安裝node.js，並透過npm安裝相關的套件(或是你想用yarn也沒有問題)，同時，你也必須安裝Angular CLI。
雖然本系列文章假設讀者已經有基本的Angular知識及會使用Angular CLI，但還是簡單說明一下安裝Angular CLI的方式(畢竟不是每個開發人員都會去使用Angular CLI來建立程式，只是使用Angular CLI比較方便而已)，透過npm安裝Angular CLI很簡單，只要簡單一行指令就可以了
再寫這篇文章時，筆者的電腦中使用的Angular CLI版本為1.6.0。
使用Angular CLI來建立新的專案也是簡單到不行，使用ng new指令一行搞定：
由於之後還要開發其他的頁面，所以加上了--routing，這會在專案中增加一個app-routing.module.ts的檔案，方便未來增加模組以及頁面連結時作設定。
接下來我們就要正式把Angular Material相關的套件裝進來並且進行設定啦！
首先第一步我們先把套件裝進來再說，進入專案目錄(以上面的例子來說專案目錄是it-ironman-demo-angular-material)
如果你喜歡嚐鮮，也可以安裝最新非穩定的版本，Angular Material也提供了一個snapshot build，當然這不建議在真正的production環境上使用。
Angular Material運用了不少動畫特效來讓元件顯示更加生動，這都多虧了@angular/animations這個套件，如果希望能在頁面上看到這些動畫效果，需要安裝@angular/animations：
接著在我們的AppModule中的imports裡面加入BrowserAnimationsModule
雖然動畫效果會讓畫面更加豐富，但也有可能會有效能問題，且不是每個人都喜歡那麼多的特效，想要取消特效的話，可以改加入NoopAnimationsModule
@angular/animations使用了WebAnimation API，但不是所有瀏覽器都有支援，如果你希望盡可能讓所有瀏覽器都支援，可以安裝web-animations.js套件。
接著打開src/pollyills.ts檔案，找到import 'web-animations-js'這一行，並且把它取消註解掉，如果找不到這一行，也可以直接手動加入就好。
Angular Material將所有的主要元件都都方入對應的模組之中(MatXXXModule)，讓我們只有需要使用到某一群元件時，匯入相關模組就好，避免匯入過多不必要的元件。
假如我們要使用Angular Material的button特性，可以匯入MatButtonModule
另外一種方式是，建立一個SharedModule，將常用的MatXXXModule先import，再export出來，在其他Module中就只要import這個SharedModule就好，這在較複雜的SPA程式中會非常實用。當然這個SharedModule只是個概念，實際上我們可以用這個概念分類出不同的Modules，例如專門放常用的Angular Material Components的Module我們就取名叫做SharedMaterialModule吧！
如果Module裡面沒有其他需要使用到Angular Material的元件，也可以直接export就好
然後在使用到的Module中匯入即可，唯一要注意的是，這個SharedMaterialModule一定要放在BrowserModule之後！
關於SharedModule的概念，可以參考官方文件的介紹。
Material Design是極具質感的設計樣式，因此Angular Material自然也少不了基本的CSS樣式，目前(5.0.0-rc)Angular Material包含了4種內建的樣式，在@angular/material/prebuilt-themes/，可以找到這4個css檔。

另外這4個佈景的樣式也可以再Angular Material官方文件首頁的上半部作切換

以下是這4個樣式在官方首頁的樣式，提供參考




未來Angular Material也會持續增加不同的配色；當然，我們也可以自己設計自己想要的樣式，在Angular Material要產生客製化的樣式非常簡單，只需要簡單設定要搭配的顏色即可，在後續的文章會介紹如何自訂自己的Angular Material Theme。在這裡我們只要先選擇內建的theme就好，我們可以把這個theme的css加到style.css中。
之後用到的Angular Material元件就會自動套上這樣的樣式囉。
在某些元件中，會依照瀏覽的裝置不同而有不同的互動，例如tooltip在一般PC上只要滑鼠游標移過去就會顯示，但在行動裝置中，則需要長按才會出現，這部分Angular Material搭配了HammerJS，為UI加上行動裝置的手勢支援，如果開發的網頁需要在行動裝置上也能達到最好的體驗，就必須在程式中載入HammerJS。
有萬能的npm，這些套件都只是一行指令的問題而已
安裝完HammerJS後，還需要在程式中載入，我們可以直接在程式的進入點src/main.ts中加入
Material Icons是搭配Material Design出來的一系列icon set，在Angular Material中，我們也可以透過MatIcon來統一顯示icon的邏輯，以現代化網頁設計來說，想要使用Material Icons最簡單的方式，就是直接在index.html中加入相關Icon Font的CDN：
上述的步驟已經把所有Angular Material相關的套件及設定都完成了，同時我們也練習載入了MatButtonModule，既然都已經載入了，我們就直接來寫一個Button來看看吧！
在app.component.html中先寫一個簡單到不行的button
這時候的按鈕隨著作業系統、瀏覽器的不同會有不同的顯示方式。接著我們來讓它變成一個充滿Material Design樣式的按鈕吧！
在Angular Material中使用了原生的按鈕，但是加上了directive讓按鈕有了Material Design的樣式，最簡單的directive就是mat-button
來看看結果：

可以看到整個按鈕的樣式變得不一樣了，同時點選下去也有清楚的wave特效，這讓我們的按鈕從此活了起來！畫面更加豐富！！
在之後的文章我們會在對MatButton有更熟悉的理解，不過在這裡我們還是手癢稍微修改一下按鈕的樣式，讓按鈕能有不一樣的呈現方式
我們改用了mat-raised-button，讓按鈕變成有有層次的陰影，同時加上color=""primary""，為按鈕加上了主題色的主要顏色，看看結果：

可以發現按鈕變成了藍色的背景，而且也有了些陰影，這可以讓畫面更佳的有立體感，顏色也更加鮮明；在所有的Angular Material的元件都有類似的立體效果及配色，讓整個畫面呈現能夠更加的層次分明，是不是對於Material Design的設計有了更多的期待啦！
如果有使用SystemJS的方式載入模組，官方文件也有說明該如何使用，可以參考看看
https://material.angular.io/guide/getting-started#appendix-configuring-systemjs
如果你已經迫不及待要去Angular Material的文件上看看有什麼好玩的元件可以用了，在這邊做一點小提醒，由於文件目前還沒有完全更新，有些程式碼可能會是錯的，最主要的部分是當看到mdXxxx或md-xxxx時，都是舊版的寫法，Angular Material 5之後統一都改成matXxxx或mat-xxxx的寫法，因此當你複製程式時，別忘了看一下是不是舊版的寫法，可能會導致跑不出結果喔！
今天我們介紹了將Angular Material加入Angular專案的方法，雖然不算複雜，但也有些細節需要注意，並且也理解到Angular Material需要相依一些套件，才能發揮出全部的威力，盡管沒有這些相依套件，也不會影響到主要的操作，但如果可以的話，還是建議把這些套件都加進來，讓前端畫面能夠更加豐富！
安裝完Angular Material後，我們也實際用按鈕當作案例，建立了一個充滿Material Design風格的按鈕元件，讓按鈕不再是死板板的按鈕，還要擔心作業系統和瀏覽器不同而有不同的顯示方式，讓呈現更加一致，也更加的生動。
明天即將開始進入正戲，介紹Angular Material的元件啦！
本日的程式碼GitHub：https://github.com/wellwind/it-ironman-demo-angular-material/tree/day-02-prepare-installation (分枝：day-02-prepare-installation)",,"['基本環境', '建立新的專案', '步驟1. 安裝@angular/material和@angular/cdk', '步驟2. 安裝@angular/animations', '步驟3. 匯入想要顯示的元件模組', '步驟4. 加入theme設定', '步驟5. 手勢支援', '步驟6. 加入Material Icons', '實際寫點東西來看看吧！', '關於Angular Material文件的補充', '本日小結', '相關資源：']","['關於@angular/animations的支援度', '在要使用的Module中匯入MatXXXModule', '利用SharedModule先整理出常用的MatXXXModule', '關於安裝Angular Material的小補充']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192073,DevOps,1,AmazonCloudService30dayschallenge系列,1,30天鐵人賽介紹AWS雲端世界-1:雲端服務概觀,blackie1019,https://ithelp.ithome.com.tw/users/20083507/ironman,1513795834000000000,101,"雲端服務這幾年已經普及至每個企業與開發者的心中，對於接受度與使用廣度/深度也日漸加重。而這些廠商與服務更新的速度也十分快速，對於一個尚未接觸過雲端或是才剛踏入軟體開發領域的新人來說，很難直接從過往的資料來協助它們了解如何使用這些服務來建構出一個系統。
因此，今年的鐵人賽將以 Amazon Web Services 為主題，在30天內連續介紹幾個主要(*個人認為重要的)服務給新朋友們認識，而熟知該服務的老朋友們也歡迎補充說明或與其他雲端服務商比較同性質服務的優缺點讓更多人能跨過這個知識門檻。
不過我們在正式了解AWS的服務之前，我們先來看看整體雲端運算(Cloud Computing)包含什麼。
雲端運算，是一種基於網際網路的資源使用方式，通過這樣的使用方式，我們可以直接租用共享的軟硬體資源和按需求提供給種不同的各種終端電腦和其他裝置與服務的使用權利。
上面這句話聽起來饒舌，但就是你可以有錢當大爺要用多少就買多少就買多少服務，快速的搭建好一台企業級的資料庫或是電腦主機而無須透過傳統的硬體採購、安裝、網路配置與作業系統與服務開通的過程，在幾分鐘內就可以得到你要的資源。
如此一來用戶不再需要了解電腦運算中複雜且難以架設的基礎設施的細節，也不必具有大量且深厚的專業知識，可大幅度的降低資源操控的門檻，加速我們開發的時程與有效的控制資源。
而目前市場調查界有名的 Gartner 也整理了2017 的市場象限排名:

從上圖我們可以很簡單的看到右上角的上限，就是面對一般市場的領先者就是 Amazon Web Service，其次追趕在後的為 Microsoft Azure，而在右下角的則為創新與新技術市場的領先者，帶頭的為 Google Cloud Platform。
而從服務的類型來看可以與傳統相比總共有三種類型:

這邊參考一個 Pizza 概念圖來解釋這三者的差異，如下:

Traditional(on-premise):
廚房、爐具、食材與廚師都是自己一手包辦處理，在自己的店賣。
IaaS:
廚房與爐具是用外面供應商的，但食材與廚師都是自己來處，在自己的店賣。
PaaS:
廚房、爐具與食材是用外面供應商的，只有廚師都是自己來處，在自己的店賣。
SaaS:
整個Pizza都在外面做好，只是拿來店裡面賣而已。
Amazon Web Services(AWS)，是 Amazon 於2006 年正式成為一個雲端服務品牌被公開使用，但早在2004年的第一個服務SQS就已經正式上線了。
這邊官方也做了一個簡單的影片來介紹什麼是 AWS 與其包含的服務有什麼:

目前所有的服務類型可以分為以下幾個類別：
以上大類與其子項目的介紹就是本次挑戰的重點，不可能30天就詳細的介紹完，所以只會挑其中常見或是較為重要的服務做介紹。
也因為每年甚至每個月都有新服務浮現或既有服務被淘汰，詳細的內容可以參考AWS 產品介紹頁面。
而2013年AWS官方為了加強自家服務的推廣成立了相關的官方認證考試 - AWS Certification，認證考試相關的內容也會在後面的天數再次詳細的介紹。

AWS 有提供12個月免費試用帳號，每個月有限定的免費金額可以使用(使用超過還是會被扣錢)。
可以透過AWS Free Tier來註冊。
該服務期間(12個月)，大部分服務在到期後是不會直接中止的，這邊要稍微注意一下時間避免忘記關閉該服務而被持續收費。
此外，額外需要注意的是該免費金額可以使用在大部分的服務，但在某些服務會限制使用的類型與額度，而少數服務則沒有開放適用。
完整的使用限制與每月換算可使用額度，可以參考AWS Free Tier (Non-expiring Offers)
很多使用雲端服務的朋友第一個都會問到雲端服務到底要多少錢? 其實最簡單的回答就是: 用多少算多少
這邊的用多少取決於你的使用時間、使用單位、占用的資源與使用方式，如果整個服務都是在雲端內部自己存取的跟需要用到外部網路讓雲端資源可以給目前單位的本機電腦使用就會有不同的費用計算方式。
此外，如果你確定你想要租用的服務是一個長期的(例如一年以上)，那你也可以採用 On Premises/Colocation 的方式來租用，這會讓你獲得更多的折扣。

上面的解釋聽起來又是一個很神的東西，所以官方也準備了兩個計算機來讓我們快速的了解我們大概需要多少錢來租用服務:
每月成本簡易計算器(AWS Simple Monthly Calculator)
這計算器可讓你大略估計個別或多項服務的價格，也可以使用範本來估算完整解決方案的價格。
TCO 計算器(AWS TCO calculator)
這個工具會考慮到執行某個解決方案的所有成本，包括實體設施、電源和冷卻，並提供成本的實際全面比較。
至於跟其他雲端服務的消費比較可以參考AWS vs Azure vs Google Cloud Pricing: Compute Instances
而文中也給出了一個不錯的心得:
另外一篇 2017 的比較slide Cloud Price Comparison for Compute AWS vs Azure vs Google vs IBM 這證實了價錢上 Azure 與 GCP 的確在一步步的取得優勢。而 AWS 則持續的產品的多樣性與彈性上取得更彈性的策略。
這邊要稍微提及一下目前 AWS 有支援的認證，有不少使用者在使用雲端資源時礙於認證或是法規必須要取得一些第三方的認證才能將服務部屬至該環境，而 AWS 近年也考量到這些企業用戶的擔憂，也將此整理放入官方文件中:
其他更多可以參考官方的AWS Cloud Compliance
為了方便圖片使用，文章同步發佈在個人blogBlackie's Failed Notes當中",,"['前言', 'Cloud Computing Introduction Overview', 'References']","['Amazon Web Services Overview', 'AWS Free Tier Account', 'AWS Price and Cost', 'AWS Compliance (Certifications and Accreditations)']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190888,Security,0,滲透測試介紹及實作系列,1,[第1天]建立測試環境及環境簡介,Yuan,https://ithelp.ithome.com.tw/users/20107475/ironman,1513795755000000000,72,"大家好！從今天開始我會針對滲透測試這項學問，進行為期30天的介紹，一開始先賣點關子，先不講技術，我們先從建立環境來說起，人常說：「工具善其事，必先利其器」，況且滲透測試在實際環境中操作可能會有觸及刑法第三十六章：「妨礙電腦使用罪」的顧慮，總不能只是想學學滲透測試，結果最後被當成駭客吧！這樣太不值得了，於是我們在開始前必須建立一套以虛擬機器(VMWare Workstation)為基礎的兩套作業環境：Kali Linux及Metasploitable。
VMWare是一間提供雲端運算及虛擬機器的公司，Workstation是該公司旗下的產品之一，可提供用戶安裝虛擬作業環境在自身電腦上，僅須透過掛載所需映像檔(iso)，即可在與實機隔離的環境下使用不同作業系統的環境，藉以練習安裝作業系統過程及測試軟體服務等，然而該VMWare Workstation Pro為付費軟體，可自官網下載並試用一個月，不過也有精簡版的VMWare Workstation Player提供免費使用，目前(2017/12/20)版本為14.0.0，請依照自己的作業環境下載適當的版本後，安裝於主機中。


如果大家對於滲透測試有一點點的了解，那麼對於Kali Linux一定不陌生，其實在Kali官網首頁就用大標題告訴我們它是「Our Most Advanced Penetration Testing Distribution」，也就是Linux的滲透測試發行版啦！
Kali內建許多提供滲透測試用小工具，可以說是一應俱全了啦！這也不難理解為什麼滲透測試的作業環境都建立在Kali之上了吧！
我們的環境必須將Kali安裝於VMWare Workstation上，所需要的iso檔在官網上方點選Download即可依照自己的作業環境開始下載，完成下載後將iso檔掛載到VMWare Workstation上，就可以開始安裝作業系統。

Metasploitable是設計用來進行滲透測試練習的「目標機」，該主機內含許多漏洞供大家練習，一樣將其架設於VMWare Workstation上，即可利用Kali中的工具對其進行滲透。
在https://sourceforge.net/projects/metasploitable/files/Metasploitable2/ 下載壓縮檔後解壓縮，直接點選Metasploitable.vmx檔案即可執行。

開啟後進入登入畫面如下，帳號及密碼就如同畫面所示(msfadmin)，輸入後完成登入：

在開始前我們要先知道目標機的IP，以利後續在Kali中進行滲透模擬，請各位先行在該環境輸入指令：ifconfig，每個不同的環境測試出來的IP都不會一樣，以我的為例，IP為192.168.91.131，後面的文章中如有需要輸入目標主機IP時，請自行依個人環境修正參數。

完成環境的建置後，我們就要開始後續的介紹了，不過每個環境都還有期許多特色及強項呢！有興趣的讀者千萬別只是拘束自己的求知欲望喔！",,"['VMWare Workstation', 'Kali Linux', 'Metasploitable2', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192506,自我挑戰組,0,半路出家的工程師重新認識JavaScript系列,2,02.菜鳥工程師自介及開發環境說明,awws,https://ithelp.ithome.com.tw/users/20103518/ironman,1513795594000000000,76,"再29天就結束了
畢業於勤益科大資管系，前三年幾乎只碰皮毛
不管是 Java, C# WinForm, C++ 都只有 Hello world! + 印星星 的基礎
直到開始做專題以及校外實習才算正式開始接觸網頁設計 & 些許 Android 開發
退伍後到現在的公司一樣採用 ASP .NET MVC + C# 目前邁入第三年
畢業專題製作一個簡易的校務選課系統，團隊總共有四位成員，兩位負責PC端，兩位負責行動裝置
我是負責行動裝置的其中一員，主要實作 C# WebApi & Android (當時很像才 4.0)
版控方式為 Google Drive + 時間戳記的zip ...
你問怎麼 Merge? 兩個人、兩台電腦、兩個螢幕慢慢手動併 不堪回首的過去啊
很幸運地在大四有找到校外實習，主要是在開發一款給企業內部訊息傳達及表單審核的平台
採用 ASP .NET MVC + C# + MSSQL + Kendo UI
也是從這個時間點開始進入碼農人生
還記得剛開始實習時，MVC 是什麼、AJAX 怎麼寫、Interface、Service 啥都不知道
要怎麼在 SSMS 下 QUERY、如何備份還原 DB、怎麼透過 EF 與 DB 溝通也不知道
靠著資深工程師、MVC 開發美學、同學互相請教才漸漸了解
當時 JavaScript 都寫在 cshtml 底下，要 Debug 就加一行 debugger;
不太會使用瀏覽器的除錯功能...
JQuery 也是第一次使用，經理當時要推 AngularJS 1.x 我們還強力反對XD
版控使用 TFS，經歷過好幾次 TFS 爆炸依然不離不棄
有衝突就出來抓戰犯，每次要版更都要加班的噩夢啊...
實習到尾聲時，對於 JavaScript 還是懵懵懂懂
目前我們大多利用一款 opensource 的 CMS 為基礎，加以改造作為解決方案
前台就是一般的 ASP .NET MVC cshtml + css + JQuery + blablabla
後台為 HTML5 + Angular 1.1.2 ~ 1.1.5 + C# WebApi
與 DB 溝通的話是採用 PETAPOCO 這個輕量化 ORM
版控則是公司自架 Gitlab，但沒有採用任何一種 git flow
OS: Windows 10 專業版
Chrome: 63.0.3239.108 (64-bit)
FireFox Quantum: 57.0.2 (64-bit)
IE: 11.125.16299
IDE: Visual studio 2017
DB: MS SQL Developer 64-bit
其實嚴格講起來，是採到 TypeScript + Angular + JQuery + JavaScript 的雷
因為在一個對於 JavaScript 完全不熟的時候，直接晉升使用 TypeScript 開發 Angular
Angular 完完全全第一次碰，剛開始連要從哪裡寫都不知道
TypeScript 更可怕了，雖然可以完全採用 JavaScript 的寫法
但這樣意義何在? 最終你都要用 TypeScript，何不一開始就照他的語法寫呢?
TypeScript 剛開始怎麼裝 .d.ts、怎麼引用都還是小事
怎麼用 TypeScript 開發 Angular 才是大事
記得當時 Angular 的官方文件還沒跟現在一樣全面採用 TypeScript
所以在 TypeScript 要怎麼像開發 C# 一樣有 Angualr 的 intellisense
如何建立 Class、Interface 在 Angular 中使用等等都是一大難關啊
還記得當時問了我們團長 Alan Tsai 大大說
菜鳥工程師:
我明明在 TypeScript 有 new 一個 service 給 angular 的 controller
TypeScript 編譯也都有過
為什麼在 runtime 的時候還是炸掉呢?
團長表示:
你只是 new 出來一個空物件，不是用正確的方式注入到 controller... 當然會炸掉啊
TypeScript 只是幫你編譯，你 new 出來，不代表你想要的東西真的被建出來了
然後就開啟我一系列問團長智障問題的旅途
由於明天公司要慶生會 + 聖誕交換禮物，我晚點還要去製作籤筒及相關程序
於是今天又用幹古的方式度過了一天
希望明天之後可以開始寫 Speaking JavaScript 讀完覺得不錯的地方及心得QQ",,['菜鳥工程師的背景'],"['專題時期', '實習時期', '現職公司', '開發環境', '從何時爆炸性的採到 JavaScript 的雷', '總結']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192516,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,17,網站結構,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1513794501000000000,58,"在了解 React 的原理後，要開始設計網站結構。
從我們的 mockup 來看，主要有二個頁面，一個是相簿，一個是照片瀏覽。於是我們將結構設計成下面這樣:",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192515,自我挑戰組,0,從0開始的菜鳥工程師挑戰賽系列,8,第八天-可能要邁向第二個作品,lf2exe,https://ithelp.ithome.com.tw/users/20107727/ironman,1513794280000000000,71,"我朋友拍著我肩膀說:看了你的第一個作品，我覺得你已經可以出師了，這個拿去((下圖))，我相信你能刻出87分像。

我很開心地開下連結後，心裡只有無數的WT......，這真的是人做的嗎????????
首先我研究了很久，這東西該從何下手......((突然覺得十八年後又是條好漢))。
目前應該是先由左邊開始菜單，然後上方灰灰的那欄，至於最下面動態的那個，喬大大說我還做不到，先跳過!!
然後....我就在左邊菜單那欄弄了3個小時都沒搞好........劇本不是這樣演的吧???
至於慘狀我就先別貼上來了，實在慘不忍睹((遮臉))，應該明天能搞定菜單!!
結論:
對不起原諒我今天就這樣廢了一天，這個實在有點難阿阿阿!!!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192500,SoftwareDevelopment,0,.Net微服務輕旅行30天系列,1,Day1行前說明會,julianchu,https://ithelp.ithome.com.tw/users/20107867/ironman,1513793586000000000,71,"很多觀點認為微服務不是新的概念, 但確實微服務的普及化才開始一陣子, 容器技術的實用化解決了部署的問題，微服務的開發框架也更加成熟，相信越來越多有性能及擴充需求的系統應該會往微服務架構走。明年也要面對客戶的系統要往微服務及雲端重構, 雖然上面有架構師, 但小小碼農還是得知道自己種的是甚麼, 趁鐵人賽的機會來督促自己閱讀微服務需要了解的知識以及整理心得。
計畫中30天會走過一遍微服務需要的基本知識,  然後用.Net Core或是Framework實現一個小題目或者針對每個基本知識做個小小的實作
有任何我理解錯誤的地方 還請大家多多指教
網路上主要參考的文章跟圖片來自:(若非出自其中會另外標示)
Microservice from design to deploy :
https://www.nginx.com/resources/library/designing-deploying-microservices/
.NET Microservices: Architecture for Containerized .NET Application
https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/
StelltoeOSS(.Net版的spring boot)
https://github.com/SteeltoeOSS
安德魯的部落格
http://columns.chicken-house.net/",['微服務正夯'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192504,ModernWeb,0,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,17,RESTfulAPI設計模式談現代網頁框架,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1513793550000000000,74,"比較不同框架有個最顯而易見的好處
如果大家都有的設計，八成是重要的當代典範
所以每個框架才會紛紛採納
如果你使用的框架沒有這樣的設計
可能就要考慮使用外掛來補強
Rails、Phoenix、Laravel都有考慮到RESTful API設計
唯獨Django沒有
不論我在官方文件或是中文翻譯都沒能找到相關的設計
但是有找到一款外掛Django-REST-framework
使用Django的朋友自然可以考慮要不要安裝使用
以我自己兩年的Rails開發經驗來看
實務上是非常實用且方便的工具
但也或許Django一直遲遲不肯作為官方支援
有自己的設計哲學或道理也說不定(？)
這我目前就不得而知了
再繼續下去之前
先來講講什麼是 RESTful API
REST是縮寫，全稱為「Resource Representational State Transfer」
嚴格說來這不是一種技術，而是一種觀念或設計思維
在這個觀念出現以前
一個新增post的網址在不同專案可能如下：
/create_post、/new_post、/post/create、/insert_post、/gen_post
畢竟每個人的想法不同，
用什麼方式實作「新增」自然因人而異
但有了REST以後
只要知道Model的名稱，一切都是固定的
以Rails為例，如果model是post
當我在router設定為
就會自動產生下面的路由
可以比較一下在Phoenix的結果
與Laravel的結果

基本上是相同的唷！
好啦認真說雖然Laravel的新增是使用store而不是create
至少三個框架新增post的網址都是 POST /posts
跨不同語言不同框架
居然有這麼高程度的相同設計
這大大提高了程式的可維護性與可讀性
接手的人或是團隊的新進人員
不用通靈也不需要找不存在的文件說明
就可以快速掌握專案的router結構
這樣的設計是不是相當便利呢！
不合群的Django君
在RESTful這點上被扣了一分唷
參考資料：
https://github.com/twtrubiks/django-rest-framework-tutorial/tree/master/RESTful-API-Tutorial",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192511,DataTechnology,0,資料科學筆記系列,1,[Day1]淺談資料科學與系列文章規劃,johnny123852,https://ithelp.ithome.com.tw/users/20103204/ironman,1513792750000000000,78,"動機
今年八月時接到一個任務，是一間國內工廠的科專計畫，一部分是要分析線上型錄網站使用者的點擊行為，我們藉由機器學習做多元線性回歸分析使用者的停留時間，另一部分是使用FPTree做資料探勘由過去訂單產生推薦商品，在尋找相關資料及實作的過程中對機器學習及資料探勘產生了濃厚的興趣，因此決定繼續往下研究順便把這段時間研究的心得記錄下來，也逼迫自己必須努力學習。
何為資料科學
現代不論電子商務還是一般零售、銀行金融在與顧客互動時都會產生巨量的資料，透過分析這些資料能幫助企業經營更有效率、與消費者關係更緊密、解決企業的難題；簡單說資料科學是一門解決實際問題的學問－如何在雜亂的資料中萃取出有用的資訊；例如銀行的信用卡核發，如何在過往的交易紀錄、財務狀況、信用評等中找出變數與個體間的關聯性，判斷對方是否能償債最後決定要不要發卡。有了資料後如何在資料中找出有用的資訊，常見的方法有三個－統計分析、機器學習及資料探勘；在接下來的系列文章主要會介紹並實作機器學習與資料探勘。
系列文章規劃
1.機器學習介紹與實作
　　淺談機器學習
　　常見演算法介紹與比較
　　Python Tensorflow Anaconda環境建置
　　實作線性回歸
　　實作羅吉斯回歸
2.資料探勘介紹與實作
　　淺談資料探勘
　　常見演算法介紹與比較
　　實作Ａpriori
　　實作FPTree
參考資料來源：
https://buzzorange.com/techorange/2017/03/15/amazonguide/
https://taweihuang.hpd.io/2016/09/07/%E8%A7%A3%E9%87%8B%E3%80%81%E5%80%8B%E9%AB%94%E9%A0%90%E6%B8%AC%E3%80%81%E8%B6%A8%E5%8B%A2%E9%A0%90%E6%B8%AC%EF%BC%9A%E8%B3%87%E6%96%99%E7%A7%91%E5%AD%B8%E7%9A%84%E4%B8%89%E5%80%8B%E9%9D%A2%E5%90%91/
https://buzzorange.com/techorange/2017/03/23/data-science-money/
後學才疏學淺，如有謬誤還請各位先進不吝指教。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192512,AI&MachineLearning,0,tensorflowpython系列,1,DAY1前言,123456aaa,https://ithelp.ithome.com.tw/users/20107535/ironman,1513792698000000000,73,"當AlphaGo成功戰勝世界棋王之後,人工智慧以及機器學習成為了搜尋引擎的熱搜話題
再這30天之中,我將使用python這個程式語言再加上Tensorflow這個google開源的深度學習框架
進行簡單的介紹
使大家對深度學習.python.Tensorflow有一定的認識
作者環境介紹
筆電型號：ASUS X550V
顯示卡：NVDIA GEFORCE 720M
作業系統：Ubuntu 16.04.1
Python版本：3.5.2
Tensorflow版本：1.4.1
cuDNN:6.0
CUDA:8.0",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192505,ModernWeb,0,從無到有，打造一個漂亮乾淨俐落的RESTfulAPI系列,10,[Day-10]JavaScript基礎篇(3),10程式中,https://ithelp.ithome.com.tw/users/20107247/ironman,1513791773000000000,79,"這篇文章要來介紹容器，首先先來談談陣列，陣列是有順序地存放大量資料的結構，大多數程式語言都是 0 為起始點，例如 arr[0] ， JavaScript 也不例外，當然 JavaScript 的陣列也內建很多函式可以直接呼叫例如 length、match...等。
陣列的初始化有兩種方式一種是立即給值，另一種是後續給值。
展開運算值是 ES6 的一個新的特性，可以使用 ... 代表陣列，以下用函式來做示範，當不知道引數有多少時可以很方便使用，這邊先粗略提起稍後會拉出來更詳細解說。
物件是現今儲存資料最常見的一種型態，主要是以一個鍵 (key) 搭配一個值 (value) ，如下範例。
有兩種方法分別如下，第一種是利用 物件名稱.key 拿取值，第二種方法是利用陣列回傳方式 物件名稱[key] 取得相對應內容。
這邊介紹陣列的 forEach 方法，雖然 for...in 也是可以，但  ESLint 並不推薦你這樣做，所以就不再今天討論範圍囉！
是的沒錯在物件中不僅僅只儲存值方法也行，就把它想成一個 function 存在一個變數中就對了使用方法延伸上面的例子如下。
output: [1, 2, 3, 4]
output: { name: 'Andy', age: 21 }
Array.filter()方法會過濾陣列的元素，並將通過測試的元素傳回成為一個新陣列。
Array.filter()方法使用回呼函式來對元素進行過濾，須由設計師自行撰寫過濾程式。
output: [ 2 ]
Easily extract array elements or object properties and store them in variables
解構解構允許你拉出單個元素或屬性，並將他們儲存在數組的變數中
Array Destructuring
output: 2 1
output: { name: 'Tank' }
此方法是複製屬性而不是整個物件
output: { name: 'Andy' }
文章同時發表於：https://andy6804tw.github.io/2017/12/20/js-tutorial-psrt3/",,"['陣列 Array', '物件 Object', '物件使用 forEach 方法', 'Spread & Rest Operators', 'Destructuring Assignment (解構賦值)', 'Reference and Primitive Types']","['陣列的使用', '展開(spread)運算子', '如何存取物件內的值', '物件夾帶方法', '展開運算子', '其餘運算符']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192501,DevOps,0,Ops的轉職之路-Puppet從入門就放棄系列,10,Day10-modules的篩選,shazi7804,https://ithelp.ithome.com.tw/users/20089211/ironman,1513790821000000000,80,"本系列文資料可參考以下：
除了 Day 9 我們自己寫的 module 以外，還可以直接用別人已經寫好的 module 當你開始會用 module 的時候，就會發現其實 Puppet 的 module 型態幾乎無所不在，利用 module 你可以輕鬆的兜出 infrastructure，但是你在使用別人 module 的時候 篩選就是非常重要的議題 用到對的 module 讓你上天堂，天天準時下班，用到錯的 module 你會恨到乾脆自己來寫 module。
今天這篇就來告訴大家該怎麼篩選 module，減少採雷的機會。
Puppetforge 是 Puppet 提供的一個 module 管理平台，你可以透過這個平台來找到各種你想要的 Puppet module。
除了 Puppetforge 以外，最多資源的就是在 Github，就因為資源太多更需要慎選。
由於 Puppet 已經算是很成熟的組態管理工具，所以 module 也是琳琅滿目，但是要怎麼去篩選適合的 module 就是一個很重要的課題。
Puppetlabs 是官方提供的模組，不見得會是最新，但是會是最穩定的 module，基本上沒有太多問題，而且也沒有 EOL 的問題，而且 Test case 也算是最完整的。
voxpupuli 是由 Github 內部維護的 module，也算是穩定中可選的 module，有許多由 Puppetlabs 官方維護的 module 會直接移轉給 voxpupuli 進行維護，例如 puppet-nginx，算是除了 Puppetlabs 的第三方授權。
各種套件本身會維護自己的 Puppet module，例如 Elastic 就維護 puppet-elasticsearch、puppet-kibana、puppet-logstash
除了以上建議的 module 來源以外，除非這個 module 你有能力做後續的維護，否則都不建議使用。",,['如何挑選 Module'],"['從 Puppetforge 獲取 module', '從 Github 獲取 module', '從維護者挑選', '適用自己環境']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190608,ModernWeb,0,JavaScript30實作心得筆記系列,1,Day1JS:DrumKit,qscgyujm,https://ithelp.ithome.com.tw/users/20092728/ironman,1513789935000000000,97,"第1天的實作是建立一個類似打鼓就產生音效的網頁，當點擊鍵盤時會讓網頁的element產生音效和動態的畫面效果。
首先在畫面建立數個div元素，在每個div元素中，包含著span元素，span的內容是對應著鍵盤值。
在每個div元素的屬性加入鍵盤的keycode，而鍵盤Q的keycode值等於81，因此在div中的屬性建立press-key=""81""，作為當事件觸發時所需要的值。
以及建立數個audio元素，每個audio都有各自的執行音效檔。
接下來在畫面window建立監聽事件，觸發事件的動作為keydown，而keydown就是當鍵盤按下的動作即觸發事件。
當事件觸發時，首先抓取鍵盤按下時產生的keycode，並運用keycode值來取得對應的div和audio元素。
接下來是執行audio元素，讓他播放音樂，並透過設定播放時間從0開始。
以及將key加入CSS，讓他產生動態效果，而key的動態效果是透過CSS中的transition屬性來執行的。
而當key的transition觸發完成後，要將動態效果給取消掉，是透過transitionend來觸發執行取消其動態效果。
window
window 物件代表了一個包含 DOM 文件的視窗，其中的 document 屬性指向了視窗中載入的 Document 物件。而使用 document 的 defaultView 屬性，則可取得該 Document 物件所在的視窗 window 物件。
EventTarget.addEventListener()
EventTarget.addEventListener() 方法能將指定的事件監聽器註冊到 EventTarget 實作物件上。EventTarget 可能是 Document 中的 Element 物件、Document 物件本身、Window 物件，或是其它支援事件的物件（如：XMLHttpRequest）。
document.querySelector(selectors)
回傳 document 第一個符合特定選擇器群組的Element 物件。
document.querySelectorAll(selectors)
回傳 document 全部符合特定選擇器群組的Element 物件。
elementNodeReference.classList
Element.classList 唯讀屬性代表了該Element所擁有之類別屬性（Class Attribute）的即時更新集－DOMTokenList。
element.addEventListener(""transitionend"", function(event) {}
transitionend是當transition完成之後，接下來執行 transitionend中的事件。
NodeList
NodeList 物件是節點的集合，可藉由 Node.childNodes 屬性以及 document.querySelectorAll() 方法取得。
KeyboardEvent.keyCode
keycode是指當鍵盤下時產生鍵盤的對應值。
查詢鍵盤值keyCode註1
transition
CSS transitions 是當Element產生變化時，控制它的變化速度。
CSS transitions provide a way to control animation speed when changing CSS properties.
transform
transform CSS 屬性可以讓你修改 CSS 可視化格式模型（visual formatting model）的空間維度。使用此屬性，元件可以被平移、旋轉、縮放和傾斜。
身為一位新人，想透過js30來學習對於js的基礎，並強迫自己來寫點筆記來紀錄學習過程，因為在之前學習程式時，很少做到筆記以及記錄，造成之後有時會發生寫過就忘記的狀況，因此趁這個鐵人賽機會來讓自己成長。如果30天有任何紀錄錯誤的地方歡迎指教，讓大家一起成長往前邁進。",['Day1 JS: Drum Kit'],"['Html', 'Javascript:', 'CSS', 'Summary']",,,,"['tags: window, querySelector, querySelectorAll, transition']",1513814115190786000
https://ithelp.ithome.com.tw/articles/10192261,SoftwareDevelopment,0,Swift新手上路之30天復刻版型系列,1,Day1-ASOS版型檢視,hichunim,https://ithelp.ithome.com.tw/users/20107699/ironman,1513789639000000000,91,"第一個要來練習版型的是ASOS APP
首先先大概檢視一下以下版型：

最上面區塊部分可左右滑動，下方區塊則以表格方式將Accessories Items分列在每行上面
使用工具：
實作方向：
Note:",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191746,自我挑戰組,0,重新理解PHP：從頭打造WebFramework系列,1,為何要從頭打造一個框架？,芥龍,https://ithelp.ithome.com.tw/users/20104201/ironman,1513789404000000000,124,"「我想用 PHP 打造一個屬於自己的框架。」
聽到這句話，任何具有常識的程式設計師，都會白你兩眼，然後鄙視似地告訴你：「睏矇睏，嘜眠夢啊」（台語：睡就睡，別在那做夢）。
他們會毫不猶豫地告訴你「重複造輪子」是多麼糟糕、多麼愚蠢的行為，並且拿出 CodeIgniter、Laravel、Phalcon 或 Yii 擺在你眼前，告訴你：「從現有的框架中選擇一個來用，然後忘掉你那可笑的妄想！」
在大部份情況下他們是正確的，但還是有些理由讓你可以打造一套屬於自己的框架：
因此，在未來的 30 天中，我將挑戰以  PHP 打造一個現代的 Web Framework。老實說我認為這相當地艱難，畢竟我將每日規畫訂立之後發現有許多玩意連自己都不太熟悉。
這是我報名「自我挑戰」組別的理由一：我不認為我能夠在不拖稿的前提下兼顧工作及研究，也不認為自己能在完整 30 天內完成這期的鐵人賽。
再者，這 30 天的挑戰主要是以 Symfony Framework Documention 的 Create your own PHP Framework 為基礎進行改寫。
這是我報名「自我挑戰」組別的理由二：為避免著作權爭議，在未另行說明的情況下，此挑戰賽系列文章的所有文字內容皆以 CC BY-SA 3.0 方式分享，且挑戰賽系列程式碼則以 MIT 授權釋出。
在此聲明，這系列挑戰賽文章客群並非初學者，如果你是剛接觸 PHP 不久的夥伴（僅管你可能精通某種技術或某些語言），我不建議你閱讀這系列的文章－－無疑地這會打壞你學習 PHP 的胃口。
我希望這系列文章的閱讀者：
為了完成這系列文章的程式或工作流程，你可能還需要準備下列工具，我預設你已經安裝並學會如何使用它們的基礎指令：
如果有機會的話，本系列文章也會提到一些選用的工具及工作流程（就算不安裝也不影響正式內容，視讀者需要再安裝即可），在此預設你已經安裝或設定好他們：
聲明 1：在此選用 Google Cloud Platform 純粹為個人習慣與喜好，本篇挑戰賽並未收受 Google Inc. 或其它任何相關企業有形/無形贊助，讀者可利用 Amazon 等其它服務代替之
聲明 2：在此選用 Docker 純粹為營合市場需求，本篇挑戰賽並未收受 Docker Inc. 或其它任何相關企業有形/無形贊助，讀者可利用 Moby 開源容器軟體代替之
聲明 3：本系列挑戰賽目前未收受任何個人/法人贊助，未來將不再一一提及，若有意贊助本篇挑戰賽請 email 至 song374561@gmail.com，主旨請標明「2017 iThome 鐵人賽贊助提案」洽談
對於本次挑戰賽有任何想法、內容勘誤或疑問，都請各先進不吝指教。
可利用 email 與我聯絡，主旨煩請註明「2017 iThome 鐵人賽想法/勘誤/提問」以利後續回覆。","['前言', '前置條件', '寫在最後']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190647,SoftwareDevelopment,0,30天上手iOSApp開發系列,1,30天上手iOSApp開發Day1,marco06031,https://ithelp.ithome.com.tw/users/20107506/ironman,1513789170000000000,109,"DAY1
前言：
現在人手一支手機，說到手機的作業系統不外乎就是Android跟iOS，可能會有人認為這兩個東西根本沒差多少
錯!!! 差很多!!舉個例子吧：像是我們很常用的Line就有Android版跟iOS版兩個版本裡面的程式碼是完全不一樣的
那本系列將著重於iOS上，早期的iOS App是使用一種叫做Objective-C的語言來撰寫而成，但現在有一種最新的語言叫做Swift，他簡化了許多Objective-C中複雜的語法，較適合程式基礎還沒打好的入門學習者，我們就用這30天來慢慢的解析與學習這個又新又酷的Swift還有iOS開發環境Xcode吧！
Swift優點：
集合很多程式語言的特性、優點
更安全、更不容易犯錯
良好彈性、自由度
完整的支援Unicode
提供的Playground(將在後面的章節提到怎麼使用)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192488,SoftwareDevelopment,0,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,14,Day14-介紹SpringCloud,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1513788355000000000,83,"Microservice 其實不是很好管理，可想而知會有非常多路由、組態、監控等問題要搞，但是如果你團隊都是用Java的話，基本上 SpringCloud 提供非常多組件，讓你使用一些簡單設定檔跟 Annotation 就可以搞定 Discovery、Synchronize Settings、Proxy、LoadBalance、Realtime Dashboards、LogAnalyzer 等機制，例如下圖。

如果英文比較吃力點的話, 大陸這邊有非常好的中文資訊可以參考喔
Spring Cloud中文网-官方文档中文版
文件相當齊全可以來這邊慢慢看
Spring Cloud Dalston 中文文档 参考手册 中文版
如果想知道哪些公司在用或在找這技能的 來搜尋最快吧
linkedin job search
中國的
【北京spring cloud招聘】2017年北京spring cloud最新人才招聘信息-BOSS直聘
看過之後有沒有覺得前途還不太差啦XD
介紹網路上有太多了, 我就不重複介紹啦, 就介紹一下哪邊有資源",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192489,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",17,Day17-ApacheSparkRDD簡介,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1513787778000000000,90,"Spark 的核心是 RDD，Resilient Distributed DataSet的縮寫，是一種具有容錯(tolerant)與
高效能(efficient)的抽象資料結構。RDD 由一到數個的 partition組成， Spark程式進行運算時，
partition會分散在各個節點進行運算，預設會被存放在記憶體內，所以可以快速分享各個partition的運算結果，
但若記憶體不足會出現OOM Exception錯誤訊息，可透過參數設定存放在硬碟避免發生該錯誤。
RDD支援下列語言撰寫而成的object：
Spark 是由 Scala 撰寫而成，嚴格遵守Functional Program的概念，所以RDD只能讀取無法寫入。
Spark 支援讀取 HDFS 等分散式儲存裝置的檔案，故可以使用HDFS的特性便於進行分散式的運算。
綜合以上可歸納出RDD具有幾個特性：
每個RDD會紀錄五件事情，分成兩種類別：
Lineage 為 RDD的血統關係，主要用來作為容錯處理，先來看一段程式碼：
程式碼內容是讀取HDFS檔案後，轉將內容轉成小寫並且以空白為分割符號將每個字切開，並且以對文字與數字分別進行計算，就是一個wordcount的範例程式。
一個完整的Spark Application一定會有兩大類型的操作：Transformations與Action。
由範例來看words、alpha與nums的操作都屬於Transformations，alpha.count()與nums.count()屬於Action。在RDD中 Transformations 的操作是Lazy運作，亦即不會馬上進行計算，只會紀錄使用到哪些資料集(例如讀取HDFS上某個路徑)，當執行Action時才會開始進行運算。當Spark Application 的 Transformations 數量很多卻又需要重複運作時，可以使用persist(或cache)的method對某個RDD用持久化，這樣該RDD就不會因為Lazy需要重新運算，可以加快運算速度。
查看更多的transformations API
查看更多的actions API
由下圖可以看出Wordcount的程式碼轉換成RDD對照與Lineage：

From: https://www.slideshare.net/frodriguezolivera/apache-spark-41601032#44
當某個RDD運作失敗時，Spark會根據Lineage找到parent RDD是誰，並且從parent RDD繼續計算，以完成整個Spark的運算，由此可以理解Spark的容錯機制。
對Spark RDD有初步的了解後，接下來要來介紹Spark Shell，互動式的操作介面。",['最後'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192386,SoftwareDevelopment,2,30天快樂學習FunctionalProgramming系列,7,Higher-orderFunction={Reduce}與應用實例,阿志,https://ithelp.ithome.com.tw/users/20103386/ironman,1513787581000000000,1166,"這兩篇有大量的 JS 語法講解，如果你覺得看不太懂程式碼，可以先看看這兩篇。
關於 Map 與 Filter ，收入在第二篇，也建議各位可以先看看。
Reduce 又稱為 Fold，顧名思義會遍歷 Array ，並且把它折疊(或者是說合併)。
Reduce 就與 Map 跟 Filter 不同了，
Redcue 須傳入 function 與 初始值 ，且 Reduce 是依序接到四個變數︰
由同樣的程式瑪觀察。
因為並沒有初始化 accumulator，所以會從第一項開始做，之後因為 console.log 沒有回傳值，所以 accumulator 成了 undefined 。
以下例子是總和一個 Array 。
Reduce 的遞迴實作︰
因為 Reduce 不強制要傳回 Array ，而且沒有其餘限制，使它可以作到更多事情比別人，像是 max 、 min ，也可以回傳 array ，像是 reverse 。
它會嚼爛你的 Array，很恐怖，我們修正它。

那來看看我最近面試實習的考題吧。（在網路上也查的到面試考題，應該沒關係。）
真的，是真的考印星星喔。
先以我們熟悉方法寫看看。
沒什麼難度，那我們把它變得 functional 一點。
首先我們需要兩個產生 Array 常用的 function ， range 與 repeat 。
先別關掉分頁，我可以解釋， Array.from 一共接三個參數︰
好，那來變出一點星星吧！
好多了，但讓我試著增加一點可讀性。
這個版本是不是很容易看懂的多呀，每個動作都很清楚、彈性較大，可以拉上去比較看看，看看自己喜歡哪一種。
如果不想印成倒的呢？拿掉 reverse 就行了！
剛剛那題實在輕輕鬆鬆，讓我們試試第二題。
這題比較複雜，先來看看小型的吧，如果你對程式碼相當有自信也可以直接看 code 。
星星的分佈大概如下︰
觀察得知︰
有點複雜，是時候來 functional 一下了。
當看到 *** ，我有想我需要一個 Funciton 在 兩端加上 * 或空白 。
如此只要重複呼叫這兩個 Function 就好了，因此我們需要 applyTwice 的強化版， applyMany 。
那我們需要 wrap 幾次呢？
還記得昨天的 zip 嗎？
完成！
在 FP 中有一些函數需要被額外實作，像是 range 、 repeat 、 zip ，這些函數應該被寫成 Module ，我推薦使用 Ramda.js，用法與今日的 code 幾乎一模一樣。
如果是使用純 FP 語言，像是 Haskell ，語法會更加精簡，你可以在 這裡 參考 Haskell 的版本。
撇除掉這個部份，很容易發現：
另外複習一下︰
這家是感謝信 QQ。
今天的內容真的很長，非常感謝看完整篇文章的你，如果有任何心得、想法、問題，都歡迎留言給我。
明天我們正式來面對 Curry 吧！
題外話，第二題有另一個觀點：無視右邊的空白 。
不過面試時來不及想，這個版本也簡潔很多。",,"['本章重點', '在開始之前', 'Reduce', '在 JS 中， Array.reverse 並不是 pure function', '來點實際的例子吧', '總結', '後記', '參考資料']","['倒三角', '等腰三角形']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192461,ModernWeb,0,React.js&Laravel30天訓練系列,2,【Day2】CreateLaravelProject&JsonWebToken,gary_lin,https://ithelp.ithome.com.tw/users/20107767/ironman,1513787241000000000,95,"關於Laravel專案的建立，我想安裝方式都是找的到了
Laravel Get Started
我就不做複製貼上衝版面了~
但是列出幾項安裝環境還有重點項目
為了不讓PHP安裝的一些東西影響到我原本的.Net環境，我是用Laravel Homestead的Vagrant來控制環境
安裝好之後(我是放在主目錄下面)
你就可以CD到Homestead & vagrant up

Then 看一下裡面的架構，應該就要跟你設定對應本機的資料夾長的一樣
像我設定對應的 Windows Folder 長這樣

Vagrant 裡面對應的

喔對了你要記得把
C:/Windows/System32/drivers/etc/hosts
這個文件你可以設定你要的URL對應到虛擬機設定的IP
像是我的就這樣設定

做到這邊，如果你是要簡單做個Laravel Hello World什麼的，應該都不是問題，而且最重要的是，你不用擔心電腦環境會被汙染什麼的，反正只是虛擬機，出了事情都可以刪除再重投來過
再來 就是設定Json Web Token
這裡我們不講他到底是什麼底層什麼東西，因為這個你自己可以去外面Google，我也懶得複製貼上
我用他的理由很簡單，因為我把前端跟後端拆成兩個專案
所以API的傳送就要經過驗證，所以我們會在登入之後拿到一組Token，
然後後續的資料拿取要求，就會去做Token的驗證處理。
幾個步驟
安裝 compose require tymon/jwt-auth
config/app.php 設定
providers 部分 [..., Tymon\JWTAuth\Providers\JWTAuthServiceProvider::class]
aliases 部分 [..., 'JWTAuth' => Tymon\JWTAuth\Facades\JWTAuth::class]
然後產生該產生的東西，像是設定文件檔案或是KEY，記得喔，因為我們是用vagrant，像是接下來的command都是要先vagrant ssh，進去之後才有辦法操作喔，當然啦，如果你外面可以操作的話就代表你外面也有相對應的環境~
文件產生:php artisan vendor:publish --provider=""Tymon\JWTAuth\Providers\JWTAuthServiceProvider""
KEY產生:php artisan jwt:generate
5.2 設定你的 authJWT Middleware
到了這裡就要進去Controller 開始處理資料
但是呢，因為我的資料原本是放在SQL，然後我們在上一篇把其轉好了之後，我的User密碼是有加密的
而Laravel JWT預設對應的是一個叫做User的Table
所以我就用他預設的Model app/Http/User.php 去產生我要的模型
然後把我的資料倒進去，記得喔，JWT對密碼的處理方式是用Hash，完整程式碼如下~
倒完之後 寫個登入方法來要TOKEN，可以使用POSTMAN 做 HTTP POST的動作喔
然後再拿著TOKEN來拿資料
貼個成果照片
首先是登入

然後就會拿到一串TOKEN，再拿它去要USER資料

到這裡就差不多囉! 明天開始我們就以這個後端為基礎，來跟前端作互動了。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192173,AI&MachineLearning,0,ChatBot&Chatbase系列,1,Day1[MessengerChatBot]準備工作,TzuHui,https://ithelp.ithome.com.tw/users/20107144/ironman,1513786564000000000,114,"要製作Messenger ChatBot必須先創立一個粉絲專頁
點選建立粉絲專頁

選擇類別並取名創立

3.到https://developers.facebook.com/
登入自己的FaceBook帳號，選擇新增應用程式


4.建立成功後，選擇Messenger

5.在粉絲專頁的地方選擇自己一開始創立的粉絲專頁。接著會先跳出接受權限頁面，接受後才會有粉絲專頁存取權杖。

6.以自己的身分繼續後，就會有粉絲專頁存取權杖出現

7.接著要設定Webhook

設定Webhook是所有步驟裡較為複雜的。
但在之後的Line ChotBot仍會用上
Q: 何謂Webhook呢?
A: Messenger會將不同事件傳送至 Webhook，通知Bot。以 POST 要求的方式，將 Webhook 事件傳送至 Webhook。簡單來說就是傳遞事件的媒介。
設定webhook的方式
1.官方的說明文件
https://developers.facebook.com/docs/messenger-platform/getting-started/webhook-setup
官方使用的是Node.js，因Webhook 必須部署在具備有效 SSL 憑證的伺服器，才可透過 HTTPS 接受要求。所以跟著文件製作後仍需要將程式碼部署到自己的伺服器。
2.Youtube上 Webhook教學
Messenger Chatbot Tutorial 3: Setting up Webhook
由codedamn 在2016年8月15日發布
https://www.youtube.com/watch?v=8inW2sagQz0
影片中0:44秒至2:34秒為主要製作Webhook的片段
使用 php 與 Heroku 製作
https://www.heroku.com/
3.CloudFlare
https://www.cloudflare.com/
Cloudflare提供全免費「SSL連線+CDN服務」
註冊後填入自己的網域名稱，CloudFlare 隨後會代管整個網域的 DNS。
4.利用Bot Application連接Azure，並用Bot Framework來製作ChatBot。
以下為微軟官方文件與說明
https://docs.microsoft.com/en-us/bot-framework/dotnet/bot-builder-dotnet-quickstart
下載檔案後貼至指定路徑。並用VS打開，跟著以上網址製作即可連接。

之前參加過工作坊，使用的是第四個方式。
這次想嘗試不同方式。希望我也能順利製作成功!!!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192480,自我挑戰組,0,"GoodMorning,JSfunctionalPrograming.系列",1,"GoodMorning,JS(Day0)",LeeBoy,https://ithelp.ithome.com.tw/users/20075633/ironman,1513785337000000000,111,"Kyle Simpson 是 You don't know JS 系列的作者，本身也是開源社群 JS 的熱情傳教士，本系列文章以 Kyle 的教學材料，順著 Kyle 的思路，重新認識，深入了解 JavaScript。

這部影片是 Kyle 的線上解題，來自教學網站 Frontend Masters, 該平臺有 Kyle 的許多影音教學，截至 11/30 已累積超過 300,000 小時的觀看時數
影片涵蓋許多 Kyle 對 JavaScript 深入理解後的獨特見地，以及如何學習這個語言的正確 MindSet，推薦有興趣的朋友。以下是我看完的一些整理

String are immutable，
字串操作實際上不會改變該字串，就算叫 .concat()，其實底層只是把原值當 input，而輸出新值
In general, function call tend to take up more processing time (microseconds)
但實際上有時候會跟我們的直覺相反，跟 JS 的 runtime 環境實作有關，常會發生: 如果一個 pattern 如果使用者較多，通常會特別對這些 pattern 進行優化
正確 MindSet
很多人看到這邊就直接下結論 好吧！把全部的字串連接都改成 + 吧， Kyle 指出以下幾點提醒
more base on syntax, more devlarative",,"['Office Hours with Kyle Simpson, Author of ""You Don\'t Know JavaScript"" Book Series', '內容分享 (PART 1)']",['Q1. 字串操作： concat() method vs. the + operator'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192442,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,17,"[Day17]Node串金流,不然怎麼跟客戶收錢PartI",dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1513784815000000000,117,"Stripe 是美國第三方最大的支付服務. 他的優點是你不要離開你的網站進行payment. 那這個教學我會分成兩段.
前端認證跟後端傳資料跟確認.
我會用我的express-shopping-cart連結 專案來做講解. 那就開始吧.
前端認證主要是確認使用者信用卡是合格的. 確認合格後stripe會給我們一組token密碼. 然後我們再把token密碼傳給後端.
在我們的checkout.ejs, 我們先把我們的form寫好,然後順便帶入兩個javascript. 可以參考官方做法
接下來我們來寫javascript, 第一我們先拿stripe api key  看全部檔案checkout.js
接下來我們要做我們的stripe instance, 輸入信用卡的表格
處理錯誤訊息, 如果發現是不合格的信用卡, 我們會傳訊息
接下來我們來處理如何表單送出, 當表單被送出的時候 我們會先用stripe 提供的 API, stripe.createToken. 那我們會用callback, 如果有錯誤訊息我們顯示訊息. 如果信用卡沒問題的話, 我們透過 stripeTokenHandler 把需要的資料打包傳給後端.
StripeJS Doc
StripeJS Element
My Express Github Shopping Cart",,"['背景', '前端認證', '參考文件']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192483,ModernWeb,0,ZerotoherowithReact.js系列,14,【Day14React】React+Webpack——搜尋功能#Part3,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1513784465000000000,111,"首先，我要先把寫死的 Toothpaste 產品資訊替換掉，替換成可以動態塞入符合搜尋結果的程式碼。
在 Results 這個 component 裡面，我們可以透過 map()，去撈出相符的資料，return 到 DOM 上，這邊加上 key 方便 React 追蹤後續每一個元件的更動。
建立新的 Result 類別，透過 {this.props.product.name} 取得產品名稱；{this.props.product.price} 取得價格；this.props.product.describe取得產品資訊。
我現在取得的價錢是沒有小數點，我要將它轉換成美金，所以我另外寫了一個 displayPrice() 的 function，把我要計算的數字丟進去除以 100.00
在 return 使用 this.displayPrice() 呼叫
Make Component File
寫到這邊功能差不多完成了，不過 component 越切越多，程式也越來越冗長。在 React 裡我們可以把這些 component 拆開，放在不同的檔案裡，這樣能讓我們的程式碼更簡潔，未來能夠更容易維護。
做法是在 app 資料夾底下創一個 component 資料夾，我取的檔名是 search.jsx。.jsx 可以讓開發者一目瞭然這是轉譯前的 jsx 檔案

我們在 search.jsx 會用到 React ，所以要引入
另外，我們必須透過 module.export 才能從 index.js import
接著回到 index.js 引入
剛剛是從 index.js 切分 component 出來，事實上，每一個 component 都可以放在不同的檔案，再透過 module.export 輸出。
因此我把每一個 component 放在專屬於自己的檔案中
這邊每一個檔案都要 require
同樣的在最後一行也要有輸出動作
特別要注意的是 result.jsx，它是 parent component，所以它不只要引入 React，他還要引入所有的 child component。
完整專案 Github",,,"['呈現符合搜尋的結果', '一路拆到底']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192206,ModernWeb,0,我每天都接一個API系列,2,[30api]Day1:OpenWeatherMap,chiaroluna,https://ithelp.ithome.com.tw/users/20107688/ironman,1513783924000000000,112,"第一個 web API project ，就先從最簡單的天氣 API 做起吧。

在 ProgrammableWeb 裡面，天氣 API 是最受歡迎的類別之一。
如果因為 API 太多，覺得無從選起，可以看看 Summary Tab 裡面

有個最受歡迎 API 的列表：

Weather Channel 跟 Yahoo Weather 好像是受到許多人歡迎的兩個 API ， 我兩個都試了。但在嘗試使用 Weather Channel 的時候，註冊之後一直沒辦法登入取得 API Key ， Yahoo Weather 則是因為 Documentation 讓我有點困惑，所以就放棄而選用了 OpenWeatherMap 。

OpenWeatherMap 有提供各種不同天氣資訊，從當下天氣狀況到每段時間的天氣預測都有。不過，我做這個天氣 App 的目的，主要是練習 Web API 的使用，只要能夠接通 API 就好。所以這個最基本的天氣 APP 只會有一個功能：顯示台北當下的天氣狀況。

想要使用 Open Weather Map 的API 必須申請帳號來取得 API Key 。根據 How to start 頁面的說明，一個 API Call 的連結是這樣的：
在取得 API Key 之後把裡面的 { APIKEY }  換成你申請帳號所得到的 Key ，這個連結就可以拿來使用了。

在上面兩個頁面裡，OpenWeatherMap 都提醒說啟用 API 需要10分鐘左右的時間，但就我使用的經驗來看，似乎更長一點。所以如果得到 API 之後立刻放進自己的 code 裡面而出現錯誤的話，很可能不是自己這邊的問題而是因為 API 還尚未啟用完成。
現在我們得到了 API ，建立一個新的 HTML 檔案，
在    裡面 放上一個 id = “weather” 的 tag` ， 然後在  裡面放上一個基本的 XHR object 的 function 。
為了先搞清楚會拿到什麼樣的 Response ，我在 onload method 裡面把 responseText ，也就是傳回來的值，log 出來：
把此 HTML 檔案在瀏覽器裡面開啟，然後打開 Console 就可以看到以下畫面：

如果可以看到這個畫面而不是 error 的話，就表示 API 有接上了！
但好像有點怪怪的？ 此時如果在 Console 裡面輸入 console.log(typeof(xhr.responseText));
就會發現傳回來的東西是字串，所以為了要 access 裡面 property 的值，要把 string 轉回 object 。
宣告一個叫做 response 的 variable 來放這個 object 。

這樣一來，我們就可以用 bracket notation 或 dot notaion的方法把我們想要的資訊挖出來。一個天氣 App 至少要顯示所在位置、溫度、天氣狀況吧。在把 response object打開來翻一翻之後，可以看到 city.name 是 “Moscow” 莫斯科，city.country 是”RU” 俄羅斯，等等再改成台北。
list 裡面是一個放了40個 object 的 array ，每個 object 裡面是到不同時間點的天氣狀況，我們拿第一個出來用就好。
天氣狀況跟氣溫都在 list 裡面，氣溫、氣壓、濕度等等的資訊都在 main 這個 property裡面，天氣狀況則是在 weather 裡面。
現在整理一下我們想要的資訊的取得路徑：
只要把上面這些東西放進 HTML 裡面，就可以讓天氣資訊顯示在網頁上面了

不過現在城市所在地還是在莫斯科、溫度單位也是華氏，我們來把他分別改成台北跟攝氏。仔細看 API 的 Documentation ， 可以用兩種方式選擇城市，在api.openweathermap.org/data/2.5/weather後面加上
想改溫度單位就在 api 上面加上
想改語言設定可以加上
以上不同的設定要用&連接起來，所以我們的 API 連結現在長這樣：
不過我發現這個 API 並沒有中文化的很完全，所以還是設定成英文吧….
醜陋的成品：

附上 Codepen Demo
以上是過於詳盡的第一個 API 教學。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192481,SoftwareDevelopment,0,轉職初新者系列-C#初學攻略心法系列,1,[2018鐵人賽Day1]C#初學攻略心法-起敘,OldSiao,https://ithelp.ithome.com.tw/users/20091333/ironman,1513783783000000000,114,"Hi，各位好，我是Old Siao
此次要寫的是C#初學攻略心法，也因為是初學者的關係，內容或觀念如有撰寫錯誤的地方，還望各位多包涵與提出
指正，在此先謝謝各位的教學相長。
由於筆者是Web領域裡的嫩咖，只是不小心因工作跌進C# Windows Forms的坑裡，只好手執桃木劍，頭上貼符咒，腳上穿草鞋，準備屠龍去！
希望這條屠龍大道不會太難走，免得最後被龍一巴掌巴飛，這樣太危險飛太遠。
讓我們慢慢找到夥伴，把法師、祭師、戰士全找到吧(自己當然是當英雄啦！)
話不多說，期待明天的簡易到不知道怎寫的文章吧！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192473,SoftwareDevelopment,1,為你自己學Python系列,1,[Day1]序曲,菜市場阿龍,https://ithelp.ithome.com.tw/users/20065770/ironman,1513781451000000000,134,"今年一口氣寫了兩本書(「為你自己學 Ruby on Rails」以及「為你自己學 Git」)把腦汁用光了，所以一時間想不到什麼主題可以參加這次的鐵人賽。翻了一下自己 Blog 的流量分析，雖然我近年來的工作主要是以 Ruby 這個程式語言為主，但卻發現最受歡迎的文章反而是 Python（第二名是 Vim，其次是 Git），於是想想也是時候該翻新一下文章了。
因為已經有七、八年沒有寫 Python，開發環境與生態圈跟當年有不小的變化，所以目前還不確定這 30 天會有哪些內容，基本上會有：
如果上面主題有順利寫完沒中斷，應該可以繼續寫：
希望可以順利完賽！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192298,ModernWeb,0,前端路上那些重要與不重要的小事系列,1,Day01：前言,小艾(iris),https://ithelp.ithome.com.tw/users/20065859/ironman,1513781097000000000,130,"從一開始從事網頁設計到漸漸邁向前端，一路上難免遇到不少雷
只是一直沒有寫部落格的習慣，很多該紀錄的都忘了
之前也曾想參加IT鐵人賽，但因為諸多因素而沒報名
這次趁著跟大家一起報名IT鐵人賽，來挑戰自己三十天連續發文
也藉此回想曾經遇過的事、溝通的人、踩過的坑
希望藉著這些曾經踩過的坑，可以再更深入的去研究一下 HTML、CSS
畢竟 HTML、CSS 也不斷在進化中
因此許多曾經踩的坑，在後來都有更好的解法
這三十天預計會寫到曾在前端路上遇到的問題
例如跟設計師、工程師、業主溝通的辛酸血淚 (?
還有曾經遇到的 HTML、CSS 相關的坑
還有菜鳥時期寫網頁常常忘記卻很重要的蠢事
也會介紹被朋友說看起來很威(?)的書籤裡，自己用過還滿不錯的小工具
然後可能會有最近因為工作需要接觸到的滿實用的東西
當然，計畫是趕不上變化的（喂
所以也可能遇到好玩的東西，突然想更改一下發文的內容，安捏（<--好任性的傢伙XD）
接下來的三十天得燃燒小宇宙啦～XD
",,,"['動機', '期望']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192471,ModernWeb,0,新手也能懂的JS30系列,1,JS30-Day1-JavascriptDrumKit,OTree,https://ithelp.ithome.com.tw/users/20107334/ironman,1513780885000000000,131,"JS30，是由加拿大工程師Wes Bos所建立一系列課程，課程中我們可以學到很多Javascript程式語言的實際應用，例如如何操作Document中的DOM以及資料的API，對於剛踏入Javascript領域的新鮮人來說，是一個非常有趣且扎實的課題。[1]
因為本身也是剛踏入Javascript的新鮮人，希望能利用這次的比賽機會，記錄下自己的學習歷程以及心得。在此新手也能懂的JS30的文章中，將以一天一章的方式完成JS30的訓練，並針對每個章節的內容，闡述內容的思考邏輯以及方法，讓JS新手們能從這系列文章中，學習各種JS中的方法及技巧，對Javascript這個程式語言能有更進一步的認識，並希望能透過自己的經驗與想法，能激發出更多不同的火花！
JS30第一天的內容就是一個非常有趣的例子，透過結合音樂元素，創造出在頁面上打爵士鼓的體驗！
在作者提供的範例中，我們可以發現當按下指定的按鈕時，畫面對應的地方會出現特效，且發出對應的聲音。因此可以判斷出當按下對應的按鍵時，總共發生了三件事情：
因自己本身尚未使用過data-attribute這個屬性，因此在一開始就分別給各個Div以及加上audio了id，方便後續利用getElementById來取的元素，內容如下：
首先為了在特定條件下觸發功能，我們需要給一個EventListener來監聽事件的發生，在此我們需要監聽的動作有兩項：
如此一來，我們需要在頁面上監聽keydown(按下按鍵)以及keyup(放開按鍵)這兩個事件，而當事件發生時，需分別執行play以及stop這兩個函式：
從範例當中，我們得知觸發事件的9個按鍵分別為Ａ、Ｓ、Ｄ、Ｆ、Ｇ、Ｈ、Ｊ、Ｋ、Ｌ，因此當按下的按鍵必須為對應的按鍵才能觸發功能。
透過event.keyCode這個屬性，可以取得按下按鍵這個事件時，所按下按鍵的編碼。利用按鍵的編碼，我們就能判斷出按鍵是否為觸發動作的按鍵。在下面的參考連結中提供一個網站(keycode)給大家，可以快速知道每個案件對應的Keycode，十分的方便。[2]
此外，筆者在這邊有一個有趣的發現，透過keyCode屬性，我們只能得知目前按下按鍵，但是並無法得知目前輸入的內容。但是如果使用event.key這個屬性的話，我們就可以得知目前輸入的值，不管是大寫、小寫，甚至連注音都能讀取出來喔！
按下按鍵時，頁面會執行play這個函式，離開按鍵時，則執行stop這個函式。函式中的第一件事，必須判斷按下的的是否為對應的按鍵，是的話才繼續執行後續的動作。
play函式中，在一開始判斷出對應的按鍵之後，先透過document.getElementById取得我們要動作的element，再來利用element.setAttribute()的方法，將所取得元素之class，由原本的key修改為playing，藉此來取得playing時的CSS設定。
音效的播放，使用相同方法取得對應的audio element之後，再利用audio.play()播放其的音效內容。
而函式stop中，也使用一樣方法，將所取得元素之class，由原本的playing修改回key，並利用class間CSS設定的轉換，來產生按下按鍵時產生特效，離開按鍵時則變環原本的樣子。
音效的停止，也使用相同方法，在取得對應的audio element之後，利用audio.load()停止播放其的音效內容。而這邊特別注意到，load()的功能並不是停止播放，而是重新加載。pause()的功能才是停止音效的播放。
在這邊一開始寫code的時候，在函式stop中並沒有設定audio的動作，因此當按下按鍵的時候，發現到每個音效的時間長短不一，並且放開按鍵時，音效會繼續播放直到結束。後來在函式stop中嘗試加上pause()以及load()，發現後者才是我們要的效果。
pause()會將播放暫停，但是當下一次播放時，會從上一次暫停的地方繼續。load()則是將音樂重新加載，因此當我們再次按下按鍵時，便會從頭開始播放。
這邊也在下方參考資料中，提供w3school網站連結，讓大家了解音樂以及影片的一些操作method以及相關property。[3]
原作者在影片當中，則是使用data attribute來取得對應的element，可以不用額外加上id來抓取element，並有效減少coding的長度。透過data attribute，我們可以添加自己需要的屬性名稱。而在此屬性名稱當中，不能包含大寫字體。此外，如果我們需要取出這個值，也有方法可以利用。[4]
在此課題當中，我們學到以下的技能：
以上是JS30第一篇帶給我的想法，如果各位讀者有些特別的點子以及coding技巧能交流的話，也歡迎留言指教，感謝您的閱讀。",,"['JS30以及文章簡介', 'Day1課題內容', '加上ID', '監聽事件', '綁定按鍵', '撰寫函示', 'audio小插曲', '作者小技巧', '總結', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192466,Security,0,CEH之越挫越勇系列,16,[Day15]惡意程式-實作篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1513779614000000000,174,"這裡介紹了一款很古早的後門：njRAT
如果已經更新 Windows7 SP2 最新系統更新 & 防火牆打開的話，那是無法實作噠 XD
//所以要實作的話，這裡的版本是 Windows7 SP1
在(Win8)啟用 njRAT //這隻應該算是後門程式(？)
Win8：192.168.137.202

Build 完，後續會產生檔案至指定路徑，然後假設已經散佈到目標主機 (Win7)
Win7：192.168.137.156

當目標主機(Win7)已經執行之後，後續就算刪掉主檔，每次開機一樣都會啟動這項服務，執行時已默默註冊(regsvr32)在註冊表(Registry)中，如果有興趣的話，可以用autoruns去觀察。

當目標 Win7 執行後，Win8 收到的畫面及功能：

觀察目標主機上細項的功能：
目前服務：

監看遠端桌面：
//不是神不知鬼不覺，但你執行什麼還是會被發現噠

鍵盤側錄：

就醬～。",,['njRAT'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192452,ModernWeb,0,勇者Jason和前端之鑰系列,1,【DAY1】從新手村出發！拔出地上的勇者之劍！,jasonyangbanana,https://ithelp.ithome.com.tw/users/20107705/ironman,1513779460000000000,156,"隨著響亮的哨音，iT鐵人們開跑了。
不同與於以往衝入水中、鐵人們肢體互相碰撞的感覺。
「這次的比賽顯得緩而漫長呢！」Jason心想。
再次睜開眼睛，
Jason發現自己已經在村落的門口，門口的告示牌寫著
Hello World！Welcome to Kaboyi!
耳邊傳來的是村中用來召集村民，警示鐘的聲音，
「Jason，還杵在那裏幹嘛？快到廣場集合啊！」一位好似認識自己的大媽從身邊跑過，一邊對著Jason喊道。
「不管了，就先到廣場看看吧！」Jason跟在大媽後面到了廣場。
此時廣場已經聚集了許多村民，警備鐘已經有100年沒有響起了，
上次響起還是北方的亡靈大軍入侵的時候，
「安靜！安靜！」警備隊隊長雷克斯試圖安撫情緒不安的村民們。
一位年邁的長者緩緩的走上高台，村民們都安靜下來了，
這位長者已高齡140多歲，是卡波伊村的村長。
「諸位，吾觀天象，北方有異，需要選出一位勇者，討伐魔王！」
此時，在場的村民都往後大退一步，
只剩下Jason還站在原地，
「就是你了勇者！」村長眼中露出一絲不易察覺的狡猾眼光，
「拔出地上的勇者之劍吧！」
「我？我嗎？」Jason 感到不解，
一旁的雷克斯往前站了一步，作勢抽出腰間的巨大長劍。
強龍不壓地頭蛇，Jason只好將雙手握住劍柄，
往上用力一抽，
就像在原本世界，小當家打開鍋蓋一般金光四射，
手中的劍，變成了一台筆記型電腦。
「預言成真了，看來你就是被選定的勇者！找齊你的夥伴，向魔王挑戰吧！」村長說道。
「那我該往哪個方向呢？」Jason問。
「這種事不該問我！你是勇者，要學會自己找出答案！」村長義正嚴辭。
就這樣，勇者Jason出發了。
Hello，大家好，我是Jason。
先謝謝你們看完這落落長的文。
這是我的第一篇文，
前情提要在題目的300字自介裡面，
想要帶點詼諧的方式去敘述我對前端的初體驗，
希望不要富奸！
（如果時間不允許，我會以教學／心得文為主）
我是非相關科系畢業的，
開始接觸前端一個月左右，
完賽將是兩個月！
之後的文章我會區分故事與自己的學習筆記，
讓不想看故事的人直接可以看到我的學習歷程，
如果有寫錯的地方、或比喻失真的情形，
可以直接跟我說，
謝謝。
參考來源：
勇者義彥系列。",,,['突然，一陣白光從腳邊亮起'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192148,DevOps,0,利用Node.js結合Docker開發一個能即時收集條碼的平台系列,4,DOCKER實作！,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513779229000000000,213,"先講講我對DOCKER的見解！
Docker有幾個重要的核心：映像檔、容器、倉庫
我實踐過幾個小系統後，覺得Docker的整體運行過程，很像鐵板燒廚師上菜！
廚師針對客人點餐後，就會去挑主要的材料(映像檔)，
接著進行料理，把材料準備倒鐵板料理桌上炒煮...(容器)，
完成的餐餚，就會呈出讓客人當場享用！
若是這份餐餚有需要留存，就可以再封存成另一個映像檔，找個地方存放起來(倉庫)。
使用了鐵板燒廚師上菜的概念後，我對於Docker的運用，
就有了比較符合Commom Sense的理解，也比較有概念在什麼情境下出什麼招。
接下來的重點，就在於料理的手法啦：
Dockerfile、run、attach/exec、port、volume ...
以下1. ~ 3.是安裝Docker的指令記錄：
(適用使用APT的LINUX系列，建議用UBUNTU 16.04 LTS)
必要時，最好重新開機！
(4-1) 搜尋想要的映像檔
(4-2) 下載映像檔
(4-3) 檢視映像檔
(4-4) 執行一個容器(炒一道小菜來嚐嚐鮮~)
進入到一個新的LINUX OS環境，隨意試試指令來體驗吧~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192343,自我挑戰組,0,漫遊前端系列,2,好用的即時渲染工具codepen,a089069,https://ithelp.ithome.com.tw/users/20107854/ironman,1513779201000000000,116,"在這邊介紹一下好用的工具，codepen，他是一個能夠即時渲染樣式出來的編譯網，不需要像其他的編譯軟體，例如Atom、Brackets....之類的，既然我拿出來介紹我就只會介紹優點啦!!
他是簡潔有力的黑色底面，而且在首頁處就很多別人精美的範例，可以讓你找尋靈感或是設定目標((對新手而言))，註冊也很快速。
登入完後，右上角Create打開裡的New Pen 可以新增檔案，開啟後就能直接使用了，它分成了三個編譯部分，HTML、CSS、JS，跟一個演示效果的欄位。
在上方還有一個齒輪按鈕Settngs，可以給HTMLL、CSS、JS引入各種組套，非常方便。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192465,自我挑戰組,0,Verilog從放棄到有趣系列,9,[Day9]testbench2/3,Sheng,https://ithelp.ithome.com.tw/users/20107543/ironman,1513778700000000000,157,"今天要繼續來跟大家分享testbench的相關寫法，相信大家應該對testbench有一定瞭解了，但如果要驗證較複雜的電路，testbench也要設計得更完善，那今天我們簡單設計一個8bit-ALU如下，規格如下

兩個8bit的輸入，sel為0時做加法，1時做減法，2時做乘法，3時做除法，並在in_valid為1的時候input才有效，算完的時候需把out_valid設為1，result才算有效，大致上是這樣，今天重點還是著重在於testbench，所以alu電路部分大家有興趣可以照著要求自己寫看看，那接下來繼續開始分享一些昨天沒介紹的testbench語法．

昨天提過的今天就不重複提了，line.71前就是昨天做的事情，包括宣告會用到的訊號線，把testbench所產生的input，output的線接進去拉出來，以及input歸零跟做reset的動作．
現在我們就直接從line.71開始吧，之前有提過，testbench 裡面的initial begin就像C code，是由上往下執行的，如果寫#10;就代表過了10個單位時間再繼續往下做下去，
那line.71代表的意思就是經過一個clock正緣觸發的時間之後再往下執行，
接下來line.83到line.85會一直偵測out_valid是不是等於1，不是的話就一直執行一個cycle的時間．
line.87就像C code的printf，可以把你想印的東西印出來．
line.90就是重複過了10個cycle，line.91是結束testbench．
 
一個規模較大的電路可能要用不同組的測資去模擬，如果全部擠在一起的話可能就不方便閱讀，所以這邊在介紹一個方法如下圖．

這邊是把你要測試的pattern利用task包起來，然後再initail 的block中適時的呼叫它，大家可以參考一下上圖task的的描述，line.101到line.126，input的值都是用random的方式去產生，然後再for loop裡面連續執行十次，這邊的for loop就是像C code的for loop，一個迴圈一個迴圈執行，而不是像verilog會做展開並一次執行，接下來我就以幾張跑完testbench後所產生的波形圖給大家看．

首先我們先來看我們印的東西，這邊會看到我們剛剛印的result，發現象印到8th有停一下是因為說，simulation預設模擬時間為1000個單位時間，這邊的話就是1000ns，所以你如果要讓他跑完你的模擬的話要按一個類似播放鍵的按鈕，如下

按完之後就會一直跑，跑到你設定$finish的地方，那從上圖得知當invalid=1時(黃線)我的alu就會開始運算，等運算完會發出out_valid=1的訊號(如藍線)，然後過兩個cycle之後會再送下一筆要測試的資料到alu裡面直到finish結束．
 
今天就先到這裡囉，明天會再跟大家分享testbench最後的部分．",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192226,自我挑戰組,2,介面設計流程與開發2系列,1,介面設計流程與開發-我們的30天,AnnyCheng,https://ithelp.ithome.com.tw/users/20103234/ironman,1513778459000000000,159,"前言
鐵人賽是需要鼓足勇氣、做好準備才敢參加的比賽，由於太艱難容易使人放棄，所以有一起督促前進的夥伴是非常重要低！初次參賽的我們，決定先挑戰順利完成30天學習記錄，對我們來說就非常值得驕傲了！請各位客倌泡杯茶閒來晃晃吧！
團隊簡介
我們是由三位從同一研究所畢業、對介面設計、網頁前端開發有興趣的學姐學妹組成的團隊，分別為在校研究生、UI UX 設計師與前端開發工程師，這次藉由『iT邦幫忙鐵人賽』將我們湊在一塊，利用共筆寫日記的方式，將設計開發流程作為紀錄，並寫下過程中遇到的問題、如何解決與優化，進而累積成知識寶庫，對於想踏入這個領域朋友來說，相信也是一個值得觀察、學習的文章，亦能了解設計思維。
我們的30天規劃
以 Daily UI 的題目作為範例，Daily UI 為100天介面設計挑戰，挑戰者開始後，每天會收到一個介面設計題目，完成後要將作品上傳至社群網站，然後用 hashtag 標示 #dailyui 和你挑戰的題號 #001。
而我們將 Daily UI 更完整深入執行，流程與問題先思考過，再去提出整體的設計，並分享實作時如何解決遇到的問題、技巧與實用工具等，基本上以二至五篇為一個主題來規劃，每個主題的前半部重點放在介面設計、後半部則著重切版流程，紀錄且和大家分享我們的開發歷程。
希望我們能平安的度過30天挑戰，也請善良的客倌們閒暇之餘給點建議與提點~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192460,DataTechnology,0,使用Python進行資料分析系列,1,[Day01]Anaconda環境安裝！,plusone,https://ithelp.ithome.com.tw/users/20107514/ironman,1513778033000000000,118,"Python是一個強大快速且易讀的程式語言，裡面包含非常多的套件可以使用，在資料分析裡除了用R語言，可以使用python作為開發工具！
可以在python官網下載。
在這裡我選擇使用Anaconda，它特點便是它已經包含了各種的科學數學和數據分析的套件是專門用於數據分析用途。
到Anaconda下載，選擇python3的版本。
如果慣用pip的人對於conda的指令一定也可以馬上上手，因為它和pip指令非常非常的相似，Conda是套件管理系統，也可用來建立虛擬環境，不過因為Anaconda本身專注於數據分析，所以我們會使用到的像是pandas、Numpy、Scipy的python package在安裝完成時就已經包含在裡面不需要另外安裝了哦！
將packageName換成你想要的任何套件像是：
若想知道目前電腦內安裝了哪些套件只需要下conda list指令
另外，若要安裝特定版本的python：
使用虛擬環境來開發可以避免版本衝突。
將envName換成你所要的名稱：
這邊我創建了一個my_it30days的虛擬環境，後面的jupyter是我想在裡面就事先安裝好的package，你可以在名稱後面加上自己想要的package。
下指令之後會看到：
輸入y，接著就等待它把整個環境安裝起來吧！

建立後可以看到它很貼心的有指示：
這裡我輸入：
會看到你的名稱前面會多了（my_it30days）表示已經進入到虛擬環境。
下python指令看是否有python環境。
輸入conda list查看內部的所有的package

會出現你現有的虛擬環境，星號部分代表你目前正在使用的，若不在虛擬環境則星號會在root旁邊。
這樣環境的安裝介紹就到這裡了！
接下來我會用jupyter notebook作為python編寫工具，並運用做更多資料分析介紹。",,,"['那就開始吧！', 'conda是什麼？', '使用Anaconda做package的管理', 'Anaconda虛擬環境管理']","['1.安裝package：', '2.若要移除package：', '進入環境便：', '退出虛擬環境：', '看有哪些虛擬環境：', '若要刪除虛擬環境：']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190858,自我挑戰組,0,2017挨踢人生大事紀系列,17,虛擬環境有比較優嗎？,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513777792000000000,145,"早在五、六年前，我就嘗試架設 VMWARE SERVE 2.0 的環境，
讓同事們在虛擬環境的windows XP裡作業了~
如今，M$ Hyper-V、VMware vSphere Hypervisor、Citrix XenServer ...百家爭鳴！
虛擬化架構已經成熟了不少！
但也同樣的，為挨踢帶來新的維護議題。
虛擬的主機群架構，在維護管理上，其實就我的經驗來說，並没有比較輕鬆。
伺服器的軟體層虛擬化了，不代表硬體不會掛？！
(軟體層包括了作業系統、應用程式/軟體...)
也許在虛擬環境的架構裡，佈建伺服器環境等作業容易了不少。
但一旦硬體出了狀況，救援的技術門檻就不是一般挨踢人員能輕鬆處理的了。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192464,SoftwareDevelopment,0,看到code寫成這樣我也是醉了，不如試試重構？系列,10,SOLID之介面隔離原則（Interfacesegregationprinciple）,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513777573000000000,123,"Clients should not be forced to depend on methods that they do not use.
直譯：「客戶不應該被強迫依賴他們不使用的方法」
我們來看個例子：有隻瑪爾濟斯（Maltese），愛吃也愛散步；主人訓練它握手，客人來都會表演一下，它的實作如下：
思考一下，如果這時來了新的家庭成員－－雪納瑞（Schnauzer），雖然它長的很像瑪爾濟斯，但因為剛來到主人家，它還不會握手，這時 handshake 的實作就會很奇怪：
為什麼會這樣？因為我們在定義狗（Dog）的時候，應該從思考狗有哪些行為開始，像一般的狗都會有 eat 與 walk 的行為，而 handshake 是主人教完才會的行為。
而因為雪納瑞不會握手，硬要把它實作出來也怪怪的，好吧！那只好丟例外。但這樣就違反里氏替換原則了，因為這很有可能在子類替換父類時，發生非預型的行為，程式也會因此變得非常不穩定。
針對這個問題，必須小小重構一下，才能順利替換。
換子類前一定要先拆介面：
改成兩個介面之後，瑪爾濟斯和雪納瑞在實作 handshake 時，就不會起爭議了。接著來調整實作：
這次雪納瑞的實作就比較公道了，場景範例程式如下：
遵守介面隔離原則最大的好處是，在需要多型時，會比較容易為類別實作對應方法。",,"['優點', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192260,ModernWeb,1,Vue.js30天隨身包系列,1,Day01-輕量級Vue.js,Syuanhahaha,https://ithelp.ithome.com.tw/users/20107673/ironman,1513777023000000000,134,"
在這個網頁前端開發的工程，Google下的AngularJS與Facebook下的ReactJS，因為將前端的開發系統化，開發上比較方便，所以愈來愈多人開始使用，而在這個資訊的時代下，變化速度很快，目前又出現一款集AngularJS與ReactJS優點於一身的Vue.js，這是一個相當輕量級的open source JavaScript前端框架，將整個網頁框架元件化，管理方便而且也好上手。
Vue.js提倡輕量，是一個蠻新的網頁框架，如果有Node.js或AngularJS等開發經驗，在上手Vue.js這個框架應該會蠻快的，這30天系列會將我學習Vue.js的歷程記錄下來，以下是我這30天的規劃。
我們是一群同所大學畢業的好夥伴，曾經我們都想好好學習一樣新東西，但是因為一些不是原因的原因，剛好在這個時候鐵人賽開始了，其中一個夥伴他說，他想好好整理他的學習筆記，奮發向上，但是他需要有人督促，陣亡後記得復活他，因此我們""30天熱度""這個團隊就正式組團了，目標是這30天好好學習一樣東西，我們希望我們不只是3分鐘熱度，而是可以維持30天熱度來撐住彼此。
希望這30天我能好好把Vue.js學好，理解概念以及融會貫通，然後可以獨立實作專案，因為我是Vue.js初學者，雖然會一些Node.js與其他MVC架構framework的觀念，文章內容很多都是google自學以及翻書整理出來的，盡可能找出概念的正確理解方式，但還是可能會有錯誤，如果有閱讀我的30天文章系列的讀者，發現錯誤可以直接在下方留言告訴我，除了別讓其他人被我的錯誤觀念給誤導，也讓我不要帶著錯誤的觀念繼續迷思下去。
感謝閱讀與歡迎指教！",,"['什麼是Vue.js？', '鐵人賽30天規劃', '團隊 - 30天熱度']",['團隊成員'],['Vue.js特色'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192444,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,17,[Day17]EasyFlowGP--Web表單元件-Grid表格的欄位資料讀取,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1513776800000000000,89,"今天延續昨天Grid表格的分享。
EFGP在使用Grid元件時，就是以Grid元件代號加上Obj。
ex:
元件代號DataGrid為一個表格元件。
加上Obj後變成 DataGridObj 取代document.getElementById(""DataGrid"")的寫法。
而取出表格資料的值，使用getData() 方式。
值會是一個兩維陣列。
另一種應用也是相似，當按鈕開窗多選資料後，放進Grid單身。
也是使用二維陣列將值叫出來。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192462,SoftwareDevelopment,0,認識scala系列,17,Scaladay17(Optiontype),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1513776793000000000,82,"Option[T] 有兩個物件 Some(x) 與 None．Some(x) 的 x 是指型別為 T 的值，None 是指沒有這個值．
像下面例子，Map 的 get api 定義 :
def get(key: K): Option[V]
所以 Map get 回傳的也是 Option 型態，有值會回傳 Some(Int)，沒有的話會回傳 None :
定義一個 function 如果可以轉 Int 則回傳 Some(i) 否則 None
定義一個不同元素 type 的 List :
使用 map 可將 List 的每個元素帶到 initNum 這方法然後回傳一個新的 List :
flatten 會把Some(i) 的 i 值取出，None 過濾掉，然後將數值展開 :
map 搭配 flatten 相當於 flatMap :
最後透過 sum 算出加總 :",,,"['Option type', '總結']","['運用在 Match Expression :', '運用在 lambda Expression :', '運用 map、flatten、flatMap 操作 List :']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192458,DevOps,0,讓我們來玩玩Docker吧~系列,1,Day1Whyshouldweusedocker?,jia_hong,https://ithelp.ithome.com.tw/users/20107537/ironman,1513776420000000000,117,"在談論我們為什麼應該學習Docker並且使用它之前，我們先來講講它的來歷吧!
Docker是基於Google公司推出的GO語言實作而成，誕生於2013年初，最初是 dotCloud公司內部的一個業餘專案。專案後來加入 Linux 基金會，遵從了 Apache 2.0 協議，原始碼已在 GitHub 上進行維護。
好了，來歷介紹結束。現在，我們為什麼要使用 Docker ? Docker 到底帶給我們什麼 ? 下面就是你一定要學習 Docker 的原因。
Docker 不同於傳統虛擬化，Docker容器在作業系統層面上做虛擬化，而不是在硬體層面。以此技術將有有下面幾項優點 :

那我們的 Docker 冒險之旅準備啟程，你，準備好了嗎 ?",,['VM v.s Container'],,['下面讓你更了解傳統虛擬化與 Docker 的差別'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192459,ModernWeb,0,認識Chrome開發者工具系列,17,原始碼面版-使用中斷點2,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1513776285000000000,98,"昨天我們中斷點講到了一半，今天我們就接著一起來看在中斷點作用後，我們可以做些什麼。
請重覆昨天的步驟，並使用官方的 Demo 來打開中斷點，如果你的步驟都正確的話，你的畫面應該會像下面：

圖 1: 在 Demo 網頁上作用中的中斷點
在這個狀態下我們可以做很多事，首先在畫面上你可以看到的是在這個 debugger 前的變數數值已經都直接顯示在各變數的後面了。
像我輸入在 Number 1 的值是 1，Number 2 的值是 2，所以他們的值各是 1 跟 2，而我們也可以看到變數 sum 的值是 12，
咦？怎麼會是 12 呢？因為這個官方 Demo 是來拿做除錯 JS 的，所這是裡面的臭蟲，我們晚點會一起來修正它，不過在那之前，我們先來看一下其他功能。

圖 2: 中斷點作用時，變數值會出現在變數後面
如果你現在把滑鼠移到各個變數上，它會出現變數當下的值，如果你移到方法上，像是 getNumber1()，它告訴你它是一個方法，你可以甚至知道這個方法裡面的程式，及它所宣告的位置 (行號)。如果你移到 label.textContent 的 label 上，你會發現這個變數有超多屬性的，因為這個一個 DOM 元素，你可以在行號 43 看到它的宣告。

圖 3: 移到 getNumber1() 上所得到的資訊

圖 4: 移到 label 上所得到的資訊
這邊我們要提一下變數的作用域，什麼意思呢？我們剛剛所設的中斷點是有變數作用域的，我們來看一個例子比較好解釋：
當中斷點停在這個例子中的時候，我們的程式是""真的""只執行到 debugger 這裡。所以如果我們一樣用滑鼠移動到變數 age 及 origin 上，它們的值會都是 undefined，還沒有值。好，我們現在就用我們的 Demo 來試試看，但是這次我們不再用 debugger 這個關鍵字來設置中斷點，我們要用開發者工具所提供的。請把我們先前設置的中斷點刪除(你可以直接重新整理頁面就可以了)。然後用滑鼠移動到程式碼行號 29 行的位置，並在它的行號上用滑鼠左鍵點一下，這時候它應該會出現一個藍色的箭頭像下圖：

圖 5: 透過開發者工具設置的中斷點
這就是我們新設置好的中斷點，現在我們一樣在 Number 1 跟 Number 2 這兩個輸入框裡輸入任意的數字，並按下 Add Number1 and Number2 這個按鈕。你的程式就會執行到這個中斷點，並停在 29 這裡。這樣是不是比剛剛這樣使用方便多了？
移除中斷點的方式：在要移除的中斷點的行號上再用滑鼠左鍵點一下就可以移除掉它

圖 6: 在 29 行作用中的中斷點
現在如果你檢視中斷點那一行的變數 addend1 ，它的值會是 undefined，因為我們的程式在跑到這一行後就中斷了，所以 addend1 這個變數的值還沒有指定。同樣的，而接續後面的變數也是相同，都是 undefined，除了 label ，因為在呼叫這個 updateLabel 方法前， label 就已經在第 41 行宣告過了。

圖 7: 在中斷點後的變數值是 undefined
這邊我們要提一下，雖然使用 debugger 是沒有比直接在開發者工具裡設置中斷點快速，但是常常我們是需要使用 debugger 在我們的原始碼中，這有有兩個主要的原因：
今天我們一起看了另一種設定中斷點的方法，也就是透過開發者工具直接設定在原始碼面版中，也知道在中斷點作用的當下，變數的值是可以讓我們觀察的。明天我們要介紹更多除錯的工具，並且學習怎樣去跟控制台面版做整合。明天見！",,"['使用中斷點來除錯', '使用開發者工具的中斷點功能', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192454,SoftwareDevelopment,0,與妖精共舞：在RISC-V架構上使用GO語言實作binutils工具包系列,2,第二日：環境架設及過程解析,nonerkao,https://ithelp.ithome.com.tw/users/20103524/ironman,1513775864000000000,116,"今天就為各位讀者解析建置檔案的主要內容。按照這些步驟做完之後，即使只有 x86 的普通主機，也能夠模擬出 RISC-V 的開發環境來玩啦！
筆者所使用的開發環境的重點元件可依建置順序，列出如下：
這個思維與直覺剛好相反，就以倒過來的順序講解。對開發者而言，在整個生態已經很完備的情況，如 x86 架構，相關硬體非常容易取得；稍微次級的，如 ARM，開發者也有許多開發版或 FPGA 可以選擇；至於 RISC-V 這種較新的架構，我們就只能選擇模擬器這個方案了。最知名的模擬器當然是 qemu，但有鑑於筆者還未測試過 RISC-V 版 qemu 的功能，於是這裡使用的是官方支援良好的 spike。Spike 不像 qemu 那樣使用動態轉譯的技術，而是一條一條機器碼去如實執行的，當然效能會比較差一些，但是系統的行為也較穩定，易追蹤錯誤。雖然說僅僅是模擬器，但這就是我們手頭上緊有的硬體了。
這個硬體該怎麼啟動呢？也許有讀者第一時間想到的是作業系統這個答案，其實也相去不遠了，但要讓傳統作業系統正常開機，尤其是筆者欲使用的 Linux，我們還需要一個 bootloader 才行。是的，由柏克萊大學團隊開發的 Berkeley bootloader 就是這個 bbl。Bbl 會初始化機器狀態，然後將裝置的資訊傳遞給作業系統知道。目前 bbl 專案已經相當成熟，能夠成功開啟 Linux 與 FreeBSD。
目前的 RISC-V 標準定義三組模式，bbl 運行在最底層的機器模式之中。
Linux 運行在機器模式之上的 Supervisor mode。
使用者空間的程式，運行在 Supervisor mode 之上的 User mode。
接下來的元件，對於有嵌入式系統經驗的讀者想必不陌生。整個環境運行到 Linux 之後，這個作業系統終究要將指揮全繼續移交給使用者空間程式。一般的 x86 伺服器是將服務啟動，安卓手機則是開進他的運行環境；目前的 RISC-V 主要以嵌入式系統為目標，所以使用的是經典的短小精悍 busybox，以連結的形式身兼 shell、init 啟動程式以及多數的 Unix utils。
bbl、Linux 和 busybox 當然都是 RISC-V 軟體，否則怎麼能夠運行在 RISC-V 硬體之上呢？那麼，這些軟體又要如何從原本的 C 語言程式轉換成 ELF 格式的可執行檔？這就是首要建置元件必須是工具鏈的原因。這裡列出三個主要元件，建置順序是 glibc、binutils 以及 gcc，到這裡應該就不難倒過來理解了：為了要能夠使用 gcc 編譯上述軟體專案，過程中必須要有許多二進位工具（如組譯器與連結器）參與，這當然是 binutils 軟體包的責任；在編譯軟體時，也會需要 glibc 作為目標平台的基本函式庫，是最基礎的部份。
目前在 RISC-V 的軟體生態地景之中，GNU 計畫的工具鏈仍然是最穩定的；BSD 世界的話，llvm 編譯器和 lld 連結器都還在追求穩定版本。
以下就分別描述建置各個工具的步驟。
各位讀者請自行設定一個環境變數 RISCV 代表想要安裝以下這些開發工具的路徑，如：
$ export RISCV=/opt/riscv
之類的。
這樣一來，在 RISCV 指定的位置就會有這兩套工具鏈安裝完成了。
那個 menuconfig 琳瑯滿目，如何設定好呢？讀者請參考這個設定，也可以直接將之複製到 busybox 目錄之下並重新命名為 .config，只是要特別注意以下三個組態：
咦？不是應該輪到 Linux 了嗎？筆者必須澄清的是，一般的嵌入式裝置有支援儲存裝置，如 SD 卡，因而可以讓 Linux 核心根據那些儲存裝置內的檔案系統來開機，但是我們的這個開發環境沒有這樣子的硬體條件。因此，我們必須使用 initramfs 的技術，預先編輯好一個根目錄檔案系統，好讓 Linux 內嵌在核心之中，並在開機過程的尾端將之載入記憶體，進入使用者環境。
所以，這裡請各位讀者執行以下步驟：
所需的 inittab 請參考 repo 中的設定。接下來就可以回到之前存放busybox 專案目錄並，將 CONFIG_PREFIX 設為 $RISCV/rootfs 之後，執行  make install。
同樣的，第三步中的組態設定，可以參考repo 中的設定取得，只要將之命名為 .config 並置放在源碼資料夾內即可。
第四步的檔案是組態中的 CONFIG_INITRAMFS_SOURCE 變數所需要的兩個參數之一。請將之更改為符合 $RISCV 的設定。
其中，第二步的 with-payload 代表前一步已經編譯好的 Linux 核心二進位檔 vmlinux，請務必自行調整為正確的路徑。至此，我們已經有了一整個包含 bootloader、OS 以及 busybox 運行環境的統一映像檔，萬事具備，只欠模擬器了！
在這之前可能會需要依發行版的命名原則安裝 device-tree-compiler軟體包。
先安裝一個 front-end 函式庫，這是 spike 執行檔必須的函式庫：
然後可以安裝 spike ：
如果一切順利的話，
應該就會有 Linux 開機的畫面出現，這就是我們的開發環境了！當然，除了本系列主題之外，讀者諸君也能夠天馬行空地使用這個環境作 RISC-V 相關的研究開發，若是能夠方便各位縮短取得穩定開發環境的時間那就太令人開心了。
接下來等著我們的就是 go 語言與 ELF 的領域了。我們明天再會！
如果安裝遇到問題，請不要猶豫，立刻留言向筆者反應吧！畢竟筆者光是環境架設也已經吃過不少苦頭了...算是久病成良醫吧！",,,"['環境建置', '執行！']","['概覽', 'GNU toolchain', 'busybox', '根目錄檔案系統的準備', 'Linux', 'bbl', 'spike']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192449,Security,0,資安的學習心得及分享系列,17,DAY17淺談機器學習,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1513774967000000000,136,"今天簡單來發一篇有關機器學習的文，順便聊聊近期為什麼機器學習會突然紅起來呢。其實仔細想想，機器可以24小時不停的工作而人不行，人要領薪水但是機器不會跟你要求薪水，還有機器也不容易出錯，例如說，把機器學習運用在我們的資安上可以減少封包的誤報率、預知未知的攻擊、幫我們分辨攻擊等。
在網路安全上來講，機器學習怎麼運用特徵去抓取封包，通常機器要判斷封包可疑或非可疑，我們要給機器一個指令。例如說:今天有一個男孩在慶生，那麼機器可能聽不懂，所以我們會有所謂的情境分析，情境分析的目的，就是讓『機器』去藉由圖片來告知機器，機器會藉由圖片來判斷這張圖片是什麼，當然情境分析又有圖片和文字。

然後在網路的封包上，我們通常會運用一些機器學習上的SVM(支援向量機)，先進行分類與迴歸分析並且跑一些相關的演算法俗稱的程式碼(通常是監督式學習)這部分之後有機會再慢慢來講，因為也會牽扯到一些Precision and Recall 的觀念。

而機器學習也有歸類一些(監督式、非監督式、半監督式、強化學習等)。
也歡迎大家留下有關機器學習的看法一起討論。謝謝",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192246,AI&MachineLearning,0,機器學習你也可以-文組帶你手把手實做機器學習聖經系列,2,概論-機器可以怎麼學？,shortid,https://ithelp.ithome.com.tw/users/20107850/ironman,1513774406000000000,121,"昨天的文章中，我們提到了兩個例子。
大家可能沒印象，沒關係，你點一下我的系列文，往第一篇點下去。除了我的瀏覽量多一之外，你也知道兩個例子是什麼了。
好拉，不點也沒關係。
就是呢，我們提到的例子之中的，都是說你把資料以及那個資料對應的結果（什麼字？、有沒有被騙？）輸入到電腦。
這種學習叫做監督式學習，他只是其中一種學習的方式。
一般來說有三種方式：
相信聰明如你，看到這邊大概就知道前兩個是什麼意思了吧！
簡單來說正如你想的這樣，就是監督式學習會給對應的結果。非監督式不會給對應的結果，而是要電腦自己去判斷，找出資料的機率分佈，也就是分群的概念。
機率分佈？？分群？？那啥毀？？
舉個例子，我們看看這個圖片

對，很多樹，不過眼尖的觀眾馬上就看到有一個不是樹，而是櫻桃（？？？）。
若是監督式學習呢，就會把每張圖片以及他是什麼給電腦，讓電腦學完之後。給他一張新的圖片請他判斷他是什麼。
而非監督式學習，則僅是把每張圖片給電腦，就這樣。而電腦會告訴你哪一些圖片是一組的而那一些圖片又是另一組的，這就是我們的分群。
不過我們可以想像，這是一個非常難的問題，像是

連我們人都非常難回答這個問題了，何況是電腦呢！
最後的增強式學習，可以把電腦想像成一隻狗，可愛的狗。
他亂尿尿，你罵他，他到該尿尿的地方尿，你給他肉肉。
自然而然，他就會去你認為他該尿尿的地方尿尿了，一天教狗就上手！
以上三種方式呢，我們這次的主題PRML，只有討論前面兩種方式。
所以我們這次的文章也只會提及前面兩種學習方式！
那麼明天我們就開始討論到底要怎麼學吧！
千萬不要錯過！！！！（這句是在提醒我自己）",,['對，就是利用這樣的概念，去懲罰與獎勵你的電腦，讓他最後產出你希望的行為！'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192450,自我挑戰組,0,網頁學習日誌系列,17,AJAX:網頁顯示資料-Jquery篇,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1513773980000000000,129,"本篇案例與之前javascript一樣的功能，按下按鈕將遠端json資料呈現在網頁上。
只不過是用jquery來寫，在此用兩種寫法呈現：
功能是按下按鈕下方就會顯示遠端抓取的文字
設定成功就在按鈕下方顯示「抓到資料囉!」
若失敗則跳出警告視窗「請再確認程式!!」
ajax()抓取資料的方法：
w3c：http://www.w3school.com.cn/jquery/ajax_ajax.asp
網友整理的ajax()
https://dotblogs.com.tw/jasonyah/2013/06/02/use-ajax-you-need-to-be-care
依照上面ajax()寫法，想要呈現是否有抓到資料(成功/失敗)，如下方語法所示：
結果如下圖：


當成功載入資料時，就寫把遠端資料用append()插入在ul標籤內，變成 ul li清單列，
下方用$.each來遍歷(循環訪問)，達到串接成 「li」+「標題」+「陣列文字」的一組li資料
$.each用法可看原文官網會比較清楚
http://api.jquery.com/jQuery.each/
網友整理$.each的用法
https://lingmissing.github.io/myBlog/2016/05/19/each-use/
串接語法參考來源：
https://stackoverflow.com/questions/8951810/how-to-parse-json-data-with-jquery-javascript
結果如下：
最後只要加入button按下的事件就完成了!!
",,"['html：', 'jquery：', 'codepen網址：https://codepen.io/yuski/pen/NXxbQo']","['1.顯示是否有抓到資料(success、error)', '2.顯示json資料在網頁上']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192380,SoftwareDevelopment,0,HownotbeingAgilein30days系列,1,[ScrewupAgile]Donothing,JB,https://ithelp.ithome.com.tw/users/20103220/ironman,1513773902000000000,110,"
Dooku:
太好了! 我上周順利通過全宇宙敏捷管理師考試了，我現在來把它更新到我的Linkedin。
Anakin:
恭喜! 你預計透過Agile為你的團隊帶來什麼改變嗎？
Dooku:
改變? 那個是Sidious經理的責任；況且我們專案正在趕工中，我想大家可沒這個時間搞Agile。
為了確保搞砸，第一步就是什麼改變都不作。
這種方式最安全，不必承擔失敗和被大家討厭的風險，大家依舊安穩的過日子，真是太棒了!
Do or do not, there is no try.
以下也教導幾句話讓大家直接do not，讓想要Do or Being Agile的人連try的機會都沒有。
如果很幸運的，老闆跟團隊都贊同不作改變，你也可以省下看接下來的29篇文章的時間!
如果老闆和團隊堅持要了解和接觸Agile，讓我們繼續看下去怎麼阻止他們...",,['Rule 1 : 不做改變'],"['團隊', '經理人']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192409,DevOps,0,k8s不自賞系列,2,k8s架構,James,https://ithelp.ithome.com.tw/users/20107062/ironman,1513772830000000000,122,"
簡單的說 k8s 包含了三個元件
在 k8s 中，Master 扮演著管理叢集的角色，管理者可以透過 CLI (Command Line Interface) 或 APIs (Application Programming Interface) 或控制介面 (Dashboard) 等等不同方式與 Master 溝通進而存取、控制或修改叢集狀態例如配置資源、擴充 Pod 數量等等。
作為一個 k8s 的使用者 / 管理者，你的工作就是告訴 Master 你想要做什麼 (不論透過何種方式，只要能把訊息傳遞到 Master )，剩下的事情就交給 k8s。
在一個高容錯的環境中 Master 可以是多個。為了方便說明，k8s 不自賞一文均採用單一 Master 作為範例。
另外，k8s 利用 etcd 來儲存叢集的狀態。而 Master 會透過 etcd 了解目前叢集的運行狀況。
管理者會透過 REST command 把需要做的工作 (例如，新增或刪除物件) 傳送到 api-server ， api-server 會驗證並處理管理者要求執行的工作，當工作執行完畢後，叢集的最新狀態便會儲存到 etcd 中。
Scheduler 會知道目前 Worker Node 的狀況，當需要配置 Pod 時，Scheduler 會找出最合適的 Node 並配置 Pod。
Controller 會透過 api-server 了解目前叢集的狀態，並嘗試把目前狀態調整為管理者想要的狀態。
管理者想要的狀態可能會因為種種原因無法達成，例如資源不夠 (cpu, memory) 等等。而 Controller 會持續嘗試著把叢集調整成管理者想要的狀態。
etcd 為鍵值儲存區 (key-value storage)，在 k8s 中被用來儲存叢集的狀態。
etcd 可以是 Master 的一部分或者獨立被設置在外部。同樣的，當 etcd 被設置在外部時，Master 會連到 etcd 取得或更新叢集狀態。
Worker Node 簡單來說就是一台機器，它可以是一台實體機器或虛擬機 (VMs)。而多個運行單位 Pod 會被配置到 Worker Node 中運行，而每個 Pod 中含有一到多個容器。
k8s 預設使用 docker 來建立容器
這次鐵人賽有大大分享 Docker 相關知識可以參考喔
yangj26952： 用30天來介紹和使用 Docker
jia_hong： 讓我們來玩玩Docker吧
kubelet 運行在 Worker Node，負責建立 Pod 中的容器。當 kubelet 收到來自 Master Node 送來 Pod 定義內容時，kubelet 會透過 container runtime 建立 Pod 需要的容器並確保容器狀態是可運行的。
當 Pod 運行在 Worker Node 之後，外部需要透過 Service 這個 k8s 物件來與 Pod 連線而非直接存取 Pod。
kube-proxy 運行在 Worker Node 且持續監聽 api-server，並知道 Service 被建立或刪除。當 Service 被建立後，kube-proxy 會負責將 Request 導到對應的 Pod。
這裡提到的 Pod 與 Service 都是 k8s 中的基本物件，之後會有更詳細的討論。
k8s 基本運行單位，應用程式 (application) 皆會以 Pod 為單位運行在 k8s 中，在之後的文章會有更詳細的說明。
k8s 中的 etcd 是由 go 寫成負責儲存叢集內的狀態與組態設定，包含 Secrets, ConfigMaps 等等
Secrets 與 ConfigMaps 也是 k8s 中的基本物件，之後會有更詳細的討論。
本文同步發表於 https://jlptf.github.io/ironman2018-day2/",,['Day 2 - k8s 架構'],"['本日共賞', '希望你知道']","['k8s 架構', 'Master Node', 'Worker Node', 'etcd']","['api-server', 'Scheduler', 'Controller', 'etcd', 'container runtime', 'kubelet', 'kube-proxy', 'pod']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192429,ModernWeb,0,ASP.NETCore從入門到實用系列,1,[Day01]ASP.NETCore2系列-從頭開始,JohnWu,https://ithelp.ithome.com.tw/users/20107461/ironman,1513772142000000000,188,"來勢洶洶的 .NET Core 似乎要取代 .NET Framework，ASP.NET 也隨之發佈 .NET Core 版本。雖說名稱沿用 ASP.NET，但相較於 ASP.NET 確有許多架構上的差異，可說是除了名稱外，已是兩個不同的框架。
本系列文將介紹 ASP.NET Core 入門教學及一些實務運用的範例，本篇主要介紹基本的 ASP.NET Core 環境準備及如何用 Visual Studio Code (VS Code) 開發 ASP.NET Core。
同步發佈至個人部落格：[鐵人賽 Day01] ASP.NET Core 2 系列 - 從頭開始
要開發 .NET Core 必需要安裝 .NET Core SDK，所以先到官網下載 .NET Core SDK 的安裝檔，官網下載位置點我。
.NET Core 是跨作業系統的框架，不再像 .NET Framework 要依附在 Windows 的作業系統才能執行，所以你可以依照你需要的版本進行下載及安裝。
雖然我的電腦是 Windows 作業系統，但接下來的系列教學都會是以指令為主。
(安裝軟體步驟太簡單，除了按下一步以外，幾乎沒什麼好解說的，所以不介紹怎麼安裝軟體。)
安裝完成後，可以透過 .NET Core CLI (Command-Line Interface)確認 .NET Core SDK 安裝的版本，指令如下：
先建立一個專案資料夾 MyWebsite，然後在該資料夾執行 .NET Core CLI 建置網站的指令：

.NET Core CLI 會在該資料夾，建立一個空的 ASP.NET Core 專案，內容如下：

建立完成後，就可以用 .NET Core CLI 啟動網站了。啟動網站指令：
.NET Core CLI 預設會起一個http://localhost:5000/的站台，用瀏覽器打開此連結就可以看到 ASP.NET Core 網站了。如下：

.NET Core 都已經跨作業系統了，開發工具當然也就不再限制於 Visual Studio IDE (Visual Studio 2017/2015 等)。基本上純文字編輯器搭配 .NET Core CLI 就可以開發 ASP.NET Core 了，但沒有中斷點除錯或 Autocomplete 開發有些辛苦。如果是 Windows 作業系統，最推薦的當然還是 Visual Studio IDE，再來就是 Visual Studio Code (簡稱 VS Code)。
VS Code 是一套可安裝擴充套件的文字編輯器，有支援 Windows、Mac 及 Linux 版本，極輕量又免費。
只要安裝擴充套件就變成了 IDE，並且支援多種不同的程式語言。下載位置點我。
打開 VS Code 可以在左邊看到五個 Icon，點選最下面的那個 Extensions 圖示，並在 Extensions 搜尋列輸入 C# ，便可以找到 C# 的擴充套件安裝。如下圖：

VS Code 跟一般文字編輯器有些不同，它是以資料夾為工作區域，開啟一個目錄，就等通於是開啟一個專案。從上方工具列 File -> Open Folder 選擇 ASP.NET Core 專案目錄，大概隔幾秒後，VS Code 會提示是否要幫此專案加入 Build/Debug 的設定。如下圖：

如果沒有自動提示加入 Build/Debug 設定，可以在左邊 Icon，點選倒數第二個 Debug 圖示，手動加入 Build/Debug 設定。如下步驟：


設定完成後，VS Code 會自動建立 .vscode 目錄及設定檔 launch.json、tasks.json。目錄結構如下：
在程式碼行號左邊點擊滑鼠就可以下中斷點了，跟一般 IDE 差不多。然後在 Debug 側欄啟動偵錯：

當執行到該中斷點後，就會停下來，並在 Debug 側欄顯示當前變數狀態等，也可以用滑鼠移到變數上面檢視該變數的內容。如下：

偵錯方式跟大部分的 IDE 都差不多，可以 Step over、Step in/out 等。
如此一來就可以用 VS Code 輕鬆開發 ASP.NET Core。",,"['前言', '建立網站專案', '啟動網站', 'Visual Studio Code']","['安裝擴充套件', '開啟專案', 'Build/Debug 設定', '中斷點除錯']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192441,自我挑戰組,0,JavaScript30挑戰日誌系列,1,Day01：鍵盤鼓組,小北,https://ithelp.ithome.com.tw/users/20103384/ironman,1513772135000000000,140,"進入前端這個變化多端的異世界也已一年半，
每每拿著新手 jQuery 雙手劍砍怪總覺得特別的笨重；
這時候就特別需要獲得 原生 JavaScript 的 效能Buff 加持!!
如果你也是打算從 jQuery 準備正式轉戰 原生JavaScript 的勇者，
歡迎一起組隊，經驗加倍! (笑
在這裡我寫的未必是最好的寫法，
若你也能有更好的寫法、想法或建議歡迎留言，
大家一起討論互相學習!
PS. 本次挑戰學習筆記是基於 Wes Bos 的 JavaScript30 挑戰課程：
https://javascript30.com/
作品 Demo 連結: 傳送門
作品目標：按下鍵盤上對應的按鍵，發出對應的音效，並顯示特效。
難易度：★☆☆☆☆
HTML 於此僅列出 A鍵 及其對應的音效：
CSS 部分如果在 .key 上加入 .playing 則會有過度動畫產生：
我們先來處理發出音效的功能，接著再來處理頁面動畫。
首先我們先將所有的 .key 及 audio 選取出來
在 JavaScript 選取器中你可能曾經聽說過 getElementById / ClassName / Tag…
但是現在出現了比 getElementById 效能更高且更方便的 querySelector!
而且對於 jQuery 使用者也可以快速上手；
其實概念就是等於 jQuery 的 “$” 字號
選取器內容寫法跟 CSS, jQuery 方法一模一樣!
是不是很方便呢!?
querySelector 有分為兩種:
	1. querySelector	- 只會選取搜尋到的第一個對象
	2. querySelectorAll - 以陣列形式儲存所有符合的對象
這次是使用後者，所以如果打算針對單個目標進行使用，請使用遍歷或過濾。
此處的 addEventListener 近似於 jQuery 的 .on() 或者 .bind()
也就是綁定事件! 這次選擇綁定 keydown - 鍵盤下壓事件。
我們在此處透過 function 參數 event 來取得按鍵的詳細資訊。
因為在 HTML 當中，作者有給予鍵盤及音效相對應的 data-key，
所以我們在待會兒會透過 findAudio 函數取用 event 中的 .keyCode 部分。
在此處我們將之前已經選取的 audio 陣列來做遍歷。
透過 element.dataset.key 來取得當下元素的 data-key 內的數字，
如果數字與按鍵事件的 .keyCode 相同，
就將音效時間從 0 秒開始播放並且執行 findKey 函數後退出。
這一步也是根據使用者按下的案件 keyCode
去尋找匹配的 .key 元素。
若條件符合則添加 .playing 執行動畫。
這裡綁定了一個不錯用的事件 ""transitionend""
在過渡動畫完成之後立馬撤掉 .playing 類別回復成原樣，
這樣可以造成打鼓震動的錯覺","['前言', 'Day 01：鍵盤鼓組']","['【第一步：選取將會使用到的目標】', '【第二步：綁定鍵盤下壓事件】', '【第三步：遍歷尋找對應音效檔並播放】', '【第四步：螢幕過渡動畫製作】', '【第五步：綁定 Transition End 事件】']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192404,ModernWeb,1,ngrx/store4學習筆記系列,4,[ngrx/store-4]多重資料流的Operators,jerryhsieh01,https://ithelp.ithome.com.tw/users/20103574/ironman,1513771474000000000,154,"在多重資料流下，concat 會依次做完一個個 Observable，產生一個新的 Observable
這裡 timer.concat(sequence), 所以會先做完 timer, 再做 sequence
印出 0,1,2,3,a,b,c,d, 即使 timer 是一秒產生出一個值，concat 會等 timer take(4) 完，才一次印出 a, b, c, d
反過來，如果用 sequence.concat(timer), 結果當然會是馬上印出a,b,c,d,0然後在一秒印出一個值，直到 1,2,3, concat 的參數可以超過一個以上。
用 merge 的話就沒有這種紀律，先碰到的資料就先處理
即使是 timer.merge(sequence), 因為 timer 還要等一秒鐘，所以會直接印出 a, b, c, d, 0, 1, 2, 3
combineLatest 處理當兩個 Observable 資料都有變動時，拿最後的資料來產生一個新的 Observable
結果會是 {0, d}, {1, d}, {2, d}, {3, d}因為等 timer 產生第一個值時， sequence 已經做完了，所以叫 combineLatest，那如果我們希望一對一配對產生新的 Observable，而不管時間發生的順序呢？
zip 也就是處理當兩個 Observable 的資料有所變動時，如果有時間差，它會將值保留，再將他們一一配對產生新的 Observable

如圖所示，結果會是 {a, 0}, {b, 1}, {c, 2}, {d, 3}， combineLatest 跟 zip 的第二個參數稱為 project function, 也就是產生新的 Observable 時資料的格式，如果不設的話預設值會是一個陣列
如果不管兩個 Observable 中間產生的資料，只要等最後的結果，可以用 .forkJoin, 這是相當於 Promise.all，用在對後端的request 時，如果要等兩個 Observable 都做完，可以用的 Operator，但要小心的是，如果其中之一沒完成是不會產生 Observable 的，所以實作時，務必要做 error handling.
印出的結果會是 [3, 'd']
以上程式請參考 codepen
下次我們來看高階(High Order) Observable 的 Operators",['多重資料流的 Operators'],"['concat', 'merge', 'combineLatest', 'zip', 'forkJoin']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192399,SoftwareDevelopment,0,Swift菜鳥的30天系列,1,Day-01再度踏入程式碼的世界,Jeremy,https://ithelp.ithome.com.tw/users/20107701/ironman,1513771388000000000,132,"Hello, world  進入程式碼的世界的第一句話
2017.06.28 // 畢業於南臺科技大學 - 資訊管理系
2017.10.25 // 結束四個月的軍事訓練役旅途
2017.11.13 // 進入好想工作室學習 - iOS開發
其實在進入南臺科大的資訊管理系之前，就讀的是彰化高商的國際貿易系，是完完全全沒有相關的科系。
大學選擇科系時，高中時期因為某些原因沒選到資訊處理系，這次終於可以踏上程式的旅程。
但總是在真正進入之後才發現...
靠杯，怎麼這麼難阿!!
很多程式碼當初在學習的時候都以為是什麼很困難的數學公式，完全看不懂裡面的一些英文單字與語法的意思(雖然現在也沒有100%看懂)，有時候想寫一個簡單的東西，可能就是簡單的計算程式，但總是思考了很久才寫得出來，可能用的方法也不是最簡單的，這點永遠是最嘔的。
加上大學學習程式時，總是幾個學期就讓你碰了一個新的程式語言，
總是感覺好像剛要深入的時候，過沒多久又是下一個程式語言的來抓交替。
所以當初在大學時期也沒有跟程式碼打上很好的交道，只能略懂略懂，
比較有興趣的只有手機開發方面的：
有時候會聽到業界的學長或是前輩說一個笑話：
所以可能身邊的同學對於程式不太熟的，或是覺得困難的，
未來出路就不會打算繼續踏上程式相關的這條路了。
這些問題在我四個月的軍旅生涯也一直在我腦中盤旋，我一直思考著未來到底要從事什麼
我的程式能力真的可以應付外面的需求嗎？還是找個外面的行政工作做？還是簽下去?
在結束軍旅生涯我每天都是瘋狂的找工作，到各個求職網尋求工作機會
但總是在上頭看見一些都是沒人要做的      ""屎缺""
於是我告訴自己，我不想去從事那些「大家都能做的」 工作，
我想去專精我有興趣的專業能力，就是「手機開發」了。
因此我開始計畫我自己的學習計畫，再次踏上程式之旅
在找尋學習機會的時候，我的姊姊偶然告訴我南部有一個不錯的工作室，問我要不要詢問看看
然後發現他們在10月中左右的時候，臉書有一篇關於Android/iOS開發的學習機會的貼文，
雖然那篇貼文的張貼時間我還在服役期間，但看到這則消息的我馬上就寄信詢問
很幸運的，成功的獲取這一次的學習機會，能夠加入好想工作室學習。
目前遇到的困難基本上應該還沒什麼重大的吧？套一句前輩的老話
等你遇到就知道了(笑
我自己這一個月來開發的時候遇到的障礙有：
對我來說比起之前摸過的程式開發工具，Xcode開發工具就像是一個玩具，開發(玩)起來很容易上手
之後的文章我也會用一些口語化的說詞來讓每個想學習的人都能理解，畢竟現在也還是個菜鳥XD，還沒習慣專業術語。
這三十天的鐵人賽祝每個鐵人都能順利熬過30天～ 好想工作室的大家能一起挑戰成功團體賽","['自我介紹', '學習機會：好想工作室', '為什麼選擇Swift', '開始前準備了什麼？', '遇到的困難']",['為什麼選擇繼續寫程式這條路？'],['簡單來說，我當時選擇開發iOS及選擇Swift的原因有下列幾點原因：'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191667,ModernWeb,0,激戰ReactJS30天系列,1,【Day01】前情提要,kgh831127,https://ithelp.ithome.com.tw/users/20107674/ironman,1513771125000000000,113,"
ReactJS
是我在不久前接觸到較新的技術
當時用起來的心得
實在是似懂非懂又沒有足夠的時間透徹研究
導致對於基本概念機近全無
只有簡單的知道他是什麼東東而已
然而一個東西就這樣處理一半懸在那邊
感覺實在是有點給他渾身不對勁
所以
基於想要雪恥的心情加上多到溢出來的好奇心
我就決定要在這30天內
與ReactJS好好激戰一下啦~
在這30天中
筆記大致會分成三個部分：
讓自己了解學的是什麼東東
學習的時候偶爾會碰到不明所以的地方
有的時候是專有名詞
有的時候是特定或習慣的用法
如果不能好好理解來龍去脈
很容易成為死記而無法活用
因此我會在這部分下一些功夫
期望能夠真正理解其中的意義及用法
達到真正的融會貫通
進階練習提升熟悉度
基本規則了解了之後
接下來就是能不能靈活運用
我認為透過實際操作比較能真正將所學化作能力
因此在這部分
我會找尋一些題目來練習實作
並記錄撰寫過程、碰到的問題和解決方法
透過這樣的方式讓自己真正學會React
最後希望能夠自己設定一個小小目標
並且用React去實作出來
了解現況並且靈活運用
現今世代已經進入互相合作的時代了
一味的低頭猛寫是沒有意義的
因此在這裡我會尋找一些
常見的或熱門的開發套件來練習使用
不僅看看別人都是如何開發或使用ReactJS
也能讓自己往後開發相關技術的程式的時候
能夠更快速的進入狀況
大家好 我是瑞瑞（Ray）
我自認是一個
心智年齡低下好奇心旺盛過了頭偶爾強迫症發作個性內向又害羞
的臺北市立大學碩士班在學學生
因緣際會聽說了這個活動
於是抱著自我挑戰的心態就和兩個大學時期同班同學組隊參加了這次的鐵人賽
由於敝人不才在下我天生金魚腦特性
對於很多專有名詞的標準定義可能不是很能夠記憶清晰
加上我個人偏向實作能力大於理論的學習模式
因此在記筆記的時候我會有一些額外小習慣
像是把專有名詞的定義理解後
再用自己的語言描述並記錄起來
如果對於一些文章內用詞感到疑惑
可以在最後面的名詞註記那邊找找看
也許只是我的表達方式比較特別一點歐歐=P
針對內容的部分
基於小弟只是一個準備從資訊領域的學界進入到業界的小小小嫩嫩
可能很多地方還不是很懂
如若有任何不適當用詞或者理解錯誤的地方
還請各位讀者大大、資訊大神們不吝賜教
如果有跟我一樣的初初初心者
也很歡迎一起來討論喔=D
30天熱度這個名稱來自3分鐘熱度
我們每個團隊成員都有一些原因導致好像偶爾會出現3分鐘熱度的狀態
像我個人就是因為太金魚了
所以還沒過多久就忘記自己要做的事情
其他成員還有像是懶癌末期或者超級工讀生
導致我們都有
身理上心理上行為上
出現看起來3分鐘熱度的現象
但是這次不一樣！
所以我們以這個活動的30天作為熱度的延燒時間
並且做為我們的戰隊名稱
期望能互相督促並且一起完成這30天內各自的目標。
如果對於我們的學習筆記有興趣的話
可以留言或訂閱或追蹤我們
也很歡迎大家一起來討論歐歐
Day1 end
by 瑞Ray　ヽ(・×・´)ゞ","['前言', '內容規劃', '作者嘰嘰喳喳', '團隊 30天熱度', '>>> 隊友任意門 >>>']",,"['第一部分', '第二部分', '第三部分']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192416,自我挑戰組,1,花式PHP系列,13,Laravel：深入config:cache,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1513769363000000000,121,"這篇文章的性質偏向個人在研究 config:cache 指令的實作，
其中仍有部份自己不能理解、理解錯誤的部份，如果有前輩發現，還請不吝指教！
與這指令搭配的還有 php artisan config:clear，
兩者搭配用來對 Laravel 專案的設定檔產生快取，增進效能。
下指令時會執行到 \Illuminate\Foundation\Console\ConfigCacheCommand 這個檔案。
那這隻檔案的執行點是 fire() 這個函式，裡面依序做了幾個動作：
快取檔案產生好之後，具體要研究它如何被 Laravel 載入的話，
需要找到 \Illuminate\Foundation\Bootstrap\LoadConfiguration 這個檔案
在 \Illuminate\Foundation\Bootstrap\LoadConfiguration 檔案中，
定義了一個叫做 bootstrap 的 public 函式，其中便包含我想知道的東西。
底下是該函式的程式碼：
設定檔快取的載入流程差不多就是這樣了，
更細部的步驟需要繼續深入 loadConfigurationFiles() 。
其實我還是不太懂 getConfigurationNesting() 的用意為何，
而且取出 $tree 之後回頭在 getConfigurationFiles() 之中，
把它與路徑的 basename 串在一起當成 key 的意義在哪？
不過我在猜，
tree 就是我們在使用 config('app.env') 時的「app」（指向 config/app.php）吧？
呀，居然寫到Laravel的章節了，
可是已經有點懶的寫了阿～
","['PHP ARTISAN CONFIG:CACHE', '下指令時發生了什麼魔法？', 'murmur', '參考']","['載入設定檔快取', '細部步驟']","['loadConfigurationFiles', 'getConfigurationFiles', 'getConfigurationNesting']",['嘗試解釋自己看不懂的部份'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192401,DevOps,1,Kubernetes30天學習筆記系列,1,[Day1]前言&介紹Kubernetes,zxcvbnius,https://ithelp.ithome.com.tw/users/20103753/ironman,1513768977000000000,154,"第一次認識Kubernetes(aka. k8s)，莫約去年夏天時候的事。那時候還在一家新創擔任後端工程師，在資源有限的情況下，每個人都須身兼多職，除了開會、討論產品、程式開發、有時還需拜訪客戶。而同時，系統維護以及產品更新也是我們一個重要的課題，如何快速開發客戶的需求、如何確保系統的穩定、以及如何協助團隊之間合作更流暢等，可以說是忙得焦頭爛額。而Kubernetes給人最直接的感受是，相較於系統複雜的設定，只需要一名系統兼運維的工程師負責部署與維護、其他人就能更專注在開發上，即便像我們這樣『小』團隊、也是有能力面對複雜的系統設計，這並不是因為我們做了什麼，而是Kubernetes已經幫我們做了很多事情。
希望在未來30天裡，能每天不間斷的跟大家分享，不只帶大家認識Kubernetes，在最後幾天，也能使用第三方套件Kops帶著大家操作，在實際應用的環境中，架設Kubernetes與使用。這次的學習筆記可以分為以下幾個方向：
介紹與開發環境架設
Kubernetes基礎概念與實作
Kubernetes進階概念與實作
如何管理Kubernetes

(圖片擷取自：kubernetes.io)
如果對於Docker, Container還不太熟悉的讀者，不妨先看過IThome的專欄 Container技術三部曲，也許會對什麼是container更加了解
Kubernetes是一個協助我們自動化部署、擴張以及管理容器應用程式(containerized applications)的系統。相較於需要手動部署每個容器化應用程式(containers)到每台機器上，Kubernetes可以幫我們做到以下幾件事情：
筆者過去曾參與過大型專案開發，上線產品、除錯、與測試功能都包在一起。每次發布新功能、修改代碼都非常膽戰心驚，哪怕是一個bug也會影響整個系統效能。而相較於這樣單體架構(Monolithic Architecture)的服務，微服務(microservices)架構大大減少程式複雜度，將每個服務依照各自業務需求獨立出來，以Rest API互相構通。而microservices概念的導入，改善了我們過去所面臨到的問題：
然而，當系統中的微服務越來越多時，管理上也會面臨到很大的挑戰。而Kubenetes的出現，則是幫我們管理這些微服務程式更加方便。
可以跑在任何地方 Can run anywhere
Kubernetes可以運行在任何地方：不論是私有雲、公有雲(像是AWS, Google cloud platform)、或是混合雲。
高度模組化 High modular
每個服務都被切成一個container，不論是要做修改、擴張、甚至將服務遷移到另外一台機器，都可以快速被部署。
活躍的社群 Open source & active community
Kubernetes是開源的，受到社群的關注度也非常高。
Google的背書 Backed by Google
最初版的Kubernetes是由Google內部Borg team的成員撰寫且現在仍在持續維護。Google使用他們自身的系統Borg管理容器化應用長達十年多。Kubernetes的目的即是將Borg最精華的部分取出來，使得開發者能夠更簡單、直接應用。
筆者也還在學習Kubernetes中，如有對於文章有任何疑問或建議，也歡迎大家留言給我唷^_^","['前言', '未來30天的學習筆記', '所以，什麼是Kubernetes', '為何使用Kubenetes', 'Kubernetes的優點', 'Q&A', '參考連結']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192437,SoftwareDevelopment,0,Kotlinwithandroidstudio開發30天不間斷系列,1,#Kotlinandroid30天開發不間斷day1.安裝Androidstuio/kotlin/ankosupport,tedlee,https://ithelp.ithome.com.tw/users/20107700/ironman,1513768353000000000,133,"30天攻略行程表
day 1.安裝Android stuio / kotlin / anko support
day 2.kotlin 語法介紹
day 3.Android 介面設計
day 4.Android 介面設計-補充篇
day 5.Android 物件控制與監聽事件
day 6.Android 物件控制與監聽事件-補充篇
day 7.Android Activity
day 8.Android Activity-補充篇
day 9.Android 訊息元件
day 10.Android 訊息元件-補充篇
day 11.Android 繪圖
day 12.Android 繪圖-補充篇
day 13.Android 清單元件
day 14.Android 清單元件-補充篇
day 15.Android Service
day 16.Android Service-補充篇
day 17.Android Brodcast Receiver
day 18.Android Brodcast Receiver-補充篇
day 19.Android Google Map
day 20.Android Google Map-補充篇
day 21.Android SQL Lite
day 22.Android SQL Lite-補充篇
day 23.Android 儲存資料
day 24.Android 儲存資料-補充篇
day 25.Android 多媒體
day 26.Android 多媒體-補充篇
day 27.Android 專案1
day 28.Android 專案2
day 29.Android 專案3
day 30.Android 專案4
Day 1 安裝Android stuio / kotlin / anko support
今天所寫部分比較簡單 如何安裝Android studio 與Kotlin 工作環境
安裝部分沒啥特別的 依現在的程度 如果有問題都可以在之後工具中修改

安裝Anko support
Anko套件是在Android studio 中Kotlin使用者比較常用的一個套件 這個套件讓Android studio 寫法上可以省略很多奇奇怪怪

建立第一個專案

在完成以上作業之後 再新增專案時下方會有選項Include Kotlin support 預設是要勾選 才能用Kotlin 開發

請在bulid.gradle(Module:app) 注意有無導入

由於Kotlin 屬於比較新的語言 有時在網路上比較難找到支援資訊 所以寫不出來又找不到相關支援的話 最後大絕招是寫JAVA再轉Kotlin Android studio內部支援 JAVA => Kotlin
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192432,ModernWeb,1,邁向JavaScript勇者之路系列,17,"ES6開始的新生活let,const",卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1513767637000000000,156,"接下來本篇開始會介紹 ES6 語法，在很久之前聽到 ES6 這個名詞時我都是保持觀望的態度，裡面有許多語法讓我感覺的不是很真實，像是 ...、=>、class 等等，這些看起來與現有的 JavaScript 很不搭嘎 :(。
ES6 許多語法與現有的觀念有很大的關係，其中也很大一部分是為了改進現有的語法，就以本篇要介紹的 let、const 來說也是如此。這些語法改進目前很多問題，最大的感受在於 Promise()，他可以把非同步的語法處理得更漂亮。
至於該不該了解(或學習) ES6？當然要，這已經是可以用在伺服器端(Node.js)及瀏覽器(Chrome)，就如同 CSS 中的 Flex 是非常好用的語法，在各大主流網站都可以看到他的蹤影，與其不斷的觀望，不如實際體驗一次才能了解。
注意：目前還不是所有語法支援，詳細可參考 MDN 或 Can I use
ES6 出現以後，為了潮，我自己也是想先從最容易改變的變數開始，如果不了解看文件大致可以了解：
雖然還是有差異，但直接使用上確實感受不明顯，我們可以將先前的範例使用 let 來試試看：
將以上的 var 修改成 let。
和先前沒什麼不同，這個 console.log 的結果是 老媽，如果不去探究原理，其實還真的沒什麼感覺，不過現在在實戰上已經推薦多用 let 少用 var，接下來我們來看看差在哪裡。
先前提到 var 的重要觀念，在於變數的範圍在 function，而 let 的作用域在 block，block 意指 {} 這個符號(許多文件稱它為花括號，我自己則喜歡稱它大括號)，除了 function 以外 if、for 的 {} 都屬於 let 的作用域。
下面的範例可以看到，小明這個變數在兩者的結尾是不同的，因為 {} 所定義的空間並不同。
但我們知道，大多時候我們並不會這樣寫，常見的習慣中我們會將變數宣告放在 function 的前方，那麼我們再來看另一個情境：
如果先不講結果，你會認為以上出現什麼樣的結果呢？
我先前跟大家一樣都會猜 1，因為 for 幾次不就是幾次嗎 :D。但實際執行時會發現答案其實會是 這執行第 10 次... (延續 10 次)，因為 var 會直接將 i 宣告成全域變數，不斷透過 for 迴圈累加，在 setTimeout 實際執行時只會拿到 10 這個數字。
所以此段要正確地執行，可以使用 let 宣告 i 這個變數，i會被緊緊的鎖在 for... 後方的 {} 內。
用此種方法，就會正確的出現，因為 let 是屬於 block 變數。
除此之外，在先前有介紹過，var 在全域下的變數會直接再 window 上，可以在這裡使用 console.log() 看看兩者之間的差異：
這也是 let 的一大特性，他並不會讓整個 window 物件掛上在全域環境所宣告的變數，對於愛乾淨不喜歡污染全域的開發者會是一大福音。
const 是宣告一個常數，簡單來說就是不可以再做修改的變數(常數)，以下面這個範例來說，小明如果使用 const 做宣告，那麼就無法再使用 let、const 做調整了。
過去可以先宣告變數 (還記得吧，宣告變數未賦予值會是 undefined)，但 const 在宣告時一定要賦予值。
使用 const 宣告的物件，其內層屬性依然可以做調整，因為物件是傳參考，所以在此依然可以修改屬性。(一家人的成員依然可以更動)
承上，已經被明確宣告的物件，沒有辦法再調整其參考的物件(一家人的成員並不會被另一家取代)。
相信上述對於 let、const都有了基本的了解，那麼不管你有沒有開始寫 ES6，請問一下下述問題如何修正：
沒有使用 let 的情況下要如何修正成可以依序執行？
答案在下方
成功了嗎!?或許你能想到更棒的解法喔～
文章同時發表於：https://wcc723.github.io/javascript/2017/12/20/javascript-es6-let-const/",,"['ES6 的變數：let', 'const', 'var 的額外問題']","['let 與 var', 'let 與 for loop', 'const 必須一定要有值', '物件依然是參考']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192428,SoftwareDevelopment,0,擁抱Clojure系列,1,[第01天]擁抱Clojure：前言,林萌,https://ithelp.ithome.com.tw/users/20092259/ironman,1513766963000000000,239,"世界太新，很多事物還沒有名字，必須用手指頭伸手去指。
— 賈西亞•馬奎茲《百年孤寂》
Clojure 從 2007 年由創始人 Rich Hickey 公開發表以來，至今已經經過十個年頭。經過十年歲月的演進，Clojure 程式語言已經被越來越多公司採用，也有許多優秀的開源專案選擇使用 Clojure，是成熟與實用的程式語言。
Clojure 是動態程式語言，意思是指在 Clojure 裡頭，撰寫者可以在執行時期隨時改變構成程式的元素，例如物件、型態或函式，擁有比靜態更多的彈性與自由。
除了是動態程式語言之外，Clojure 也是一個函數式程式語言。如果搜尋網路上函數式程式語言的定義，可以找出每個人都有不同的看法。但是基本的看法是不變的，那就是函式能夠被當成基本型態一樣自由地建立、可以當成另一個函式的參數傳遞、也可以被當成函式的返回值，傳遞給上層的函式呼叫者。
Clojure 屬於 LISP 程式語言家族的一員，亦即它們有相似的語法以及「程式如資料」設計理念。從外觀上看起來就是一堆括號與關鍵字組合而成。LISP 程式語法使用前置表示法，將運算元或函式名稱擺放在括號中的第一個位置，其他位置則擺放參數或運算子。有其他程式語言經驗的人初次遇見時，可能會因爲它相異於目前主流的語法而卻步，然而如果花點時間耐心學習，將會理解到 LISP 語法其實非常簡單，但是在簡單的語法之中還能有複雜的變化，搭配強大的巨集系統，足以構建複雜的大型軟體系統。
Clojure 也是一個寄宿在 JVM 的程式語言，利用 JVM 成熟的虛擬化以及動態編譯技術，和數以萬計爲 JVM 編寫的成熟函式庫，能夠開發穩定可靠的軟體系統。雖然也有使用 .NET 技術的 Clojure 可供使用，但是目前的成熟程度仍然無法與使用 JVM 技術的 Clojure 相比。
Clojure 另外一個特點則是提供了方便簡單的並行程式設計方法，讓撰寫程式的人不必再去處理複雜的並行問題，專心處理核心問題。搭配設計精巧的語言特性，撰寫程式的人亦可以簡單地將程式遷移到具備多核心處理器的環境之中，充分發揮多核心處理器平行運算的能力。
Clojure 還提供了豐富好用的資料結構，這些資料結構都是不可變以及持久存在的。不可變指的是一個資料結構一旦建立之後，就無法再修改它，必須再建立新的資料結構存放新的資料；持久存在則是 Clojure 在建立新資料時會參考舊資料的內容，從舊資料中分支出的新的資料結構。這樣的方法有效地利用了空間，並減少了重新建立資料的時間。
如果你是想要了解學習 Clojure 的讀者，這一系列的文章就是爲你而寫的。雖然這一系列文章是寫給初學 Clojure 的讀者，但是如果你有其他程式設計語言的經驗，例如物件導向程式語言 Python 或 Ruby，這一系列的文章便非常的適合你。如果你完全是一個程式設計語言的新手，建議你搭配其他市面上一般程式語言學習的書籍一起閱讀。
如果你已經是個非常有經驗的程式設計老手，想要鑽研 Clojure 內部結構或是精妙的設計手法，這一系列的文章並不適合你，建議你可以另外再去閱讀更專門的書籍。
建議的閱讀方式是從頭開始閱讀起，有助於循序地了解 Clojure 的整體樣貌，在文章之中亦會穿插示範用的程式碼或操作，希望閱讀的各位讀者都可以在電腦上親自輸入並觀察結果。除了藉由輸入程式碼體會 Clojure 程式的樣貌之外，更可以在輸入並執行的過程中，了解還有哪些知識需要再補強。
在閱讀此一系列文章時候，或許因爲與過往學習的程式語言不同，而有卡關不理解的地方。這時候請你放慢腳步並保持耐心，畢竟新的思維並不是那麼容易就可以體會，但是一旦了解之後，定是非常舒暢愉快。
還有就是不要害怕括號。Clojure 程式中有很多的括號，那其實是 LISP 程式語言家族表現程式碼的方法，非常的單純與簡潔。當你多花時間體會之後，你將會對這種程式語言的表現手法感到讚歎！搭配編輯工具的套件來使用，輸入或修改括號不再是繁瑣無趣的工作。
在本系列文章中，有時候會在命令列模式下輸入指令，例如：
其中的 $ 符號代表命令列模式下的提示符號，是不需要實際輸入的，只有 $ 符號之後的文字才需要輸入。
除了命令列的提示符號之外，本系列文章中還會讓讀者在 REPL 之下輸入程式碼，例如：
分號在 Clojure 程式語言中代表的是註解區域的開頭，所有分號之後的文字將被忽略不會當作程式執行。在這裡表示 Clojure 程式運行之後的結果。
這裡將會假設讀者你已經有一臺電腦可以使用，並且電腦中搭載了你熟悉的編輯器。還會假設你不會害怕在命令列模式下操作，因爲有很多時候將會在命令列模式下輸入程式碼。
因爲 Clojure 寄宿在 JVM 之上，所以你使用的電腦需要安裝 Java，如果不確定你的電腦是否安裝了 Java，你可以在命令列下輸入：
如果出現類似以下的訊息，表示你的環境已經安裝了 Java，你可以到下一個步驟安裝 Leiningen：
Java 版本必須要在 1.6 以上才可正常運作。
如果沒有安裝 Java，請到 Java 官方網站 下載並安裝。
Leiningen 是 Clojure 的專案管理工具，類似 Java 中的 Maven 或 Node.js 中的 npm。首先到 Leiningen 官方網站 遵從指示安裝之後，在命令列上輸入以下指令：
如果出現類似以下的訊息，代表你的 Leiningen 已經安裝成功：
請注意，第一次執行 Leiningen 時因爲還會下載額外的套件，所以需要比較多的時間，請耐心等待。
當你的電腦已經安裝了 Java 與 Leiningen 之後，便可以開始建立專案了。在命令列模式之下輸入：
Leiningen 便會開始建立一個目錄名稱爲 embracing-clojure，目錄中已經預先放置了一些程式碼與專案的設定檔。再來切換到專案的目錄底下：
切換目錄之後，執行以下指令開啓 REPL：
出現類似以下訊息就表示 REPL 已成功開啓：
你可以試着在其中輸入程式碼 (+ 1 2) 並按下 Enter 按鍵，你將會看到以下的訊息：
REPL 是 Read Evaluation Print Loop 的簡稱，在 REPL 環境會將你輸入的程式碼讀入 (Read)，對程式碼求值 (Eval) 取得結果之後，把結果輸出到顯示裝置 (Print)，並一再地重複這一系列的動作 (Loop)。在 REPL 中不僅可以將腦中的想法一步步地輸入驗證，亦可以利用 REPL 測試已經寫好的程式碼，快速且即時的回應將使得程式更快的驗證，確保程式的正確。
恭喜你！你已經成功地執行了第一個 Clojure 程式！
從本篇文章中你已經知道 Clojure 的歷史與特性，知道它是建立在 JVM 上的語言並支持並行設計。也知道 Clojure 屬於 LISP 程式語言家族的一份子，還有 Clojure 的資料結構都是不可變的，不用再擔心哪邊的程式修改了不該修改的資料。
你也已經下載並安裝了 Java 與 Leiningen，利用 Leiningen 建立了第一個 Clojure 專案，還在 REPL 中輸入了第一個 Clojure 運算式。
還不賴吧？今天就先到這裡，下一篇文章再見囉！
（本篇文章同步刊登於 GitHub，歡迎在文章下方留言或發送 PR 給予建議與指教）",['前言'],"['Clojure 是什麼', '適合的讀者', '如何使用', '使用慣例', '該準備的工具', '回顧']","['安裝 Java', '安裝 Leiningen', '建立專案']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192425,自我挑戰組,0,30天Python學習分享路程系列,1,Python撰寫前的準備,jim0612,https://ithelp.ithome.com.tw/users/20107812/ironman,1513766843000000000,142,"再撰寫Python程式語言前，
只要先到官網(https://www.python.org/downloads/ )選擇適合自己的作業系統與位元數的檔案將他下載下來
並進行安裝,即可開始撰寫Python程式囉
Python雖然再安裝完成後會有一個陽春版的IDE供程式人員開發使用,如果妳不喜歡他提供的IDE的話
以下有幾個不錯的選擇
jupyter notebook(http://jupyter.org/install.html )
PyCharm(https://www.jetbrains.com/pycharm/download/#section=linux )
再現代寫程式對開發人員來說有個好的IDE,就像神器一樣,幫我們省了很多要做的事情,
如果是使用PyCharm內有非常多的Plugin可以安裝,接下來我的介紹也會以PyCharm為主
我會介紹簡單的PyCharm介面操作與Python基礎的語法跟Python相關的函式
再來深入到使用request,BeautifulSoup與selenium函式庫,開發一個爬蟲程式,
只是個簡單的小應用,想學高深技巧,來這邊可能不太適合
明天我會介紹用PyCharm來建我們第一個Python專案,並介紹Python的簡介",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191874,自我挑戰組,0,迷失在挨踢叢林的獎金獵人系列,6,「獎金獵人小分享」-HackNTU,獎金獵人,https://ithelp.ithome.com.tw/users/20107677/ironman,1513766563000000000,127,"嗨，我是獎金獵人，現在正迷失在挨踢叢林當中，唯有提供各種資訊養分給願意帶我走出叢林的當地居民，我才能成功離開。
今天要介紹的是已經舉辦到了第五屆的HackNTU，延續著“To think, to hack“的精神，但改變以往活動的競賽性質，以「分享交流」為這次的核心。並以軟體、手機應用程式和雲端服務等整合，開發具潛在目標市場的4G行動創作活動。
本次HackNTU圍繞在兩大主題「#資料科學」及「#公民科技」，希望在發揮創意中能帶入對社會議題的關懷。此次的活動持續三天，包含一天的Expo及一天的Demo。在三天的活動當中，規劃了許多交流活動，包含與會者媒合、MiniDemo、闖關活動、主題餐敘等。
#資料科學
資料科學（ Data Science ），是一門利用數據學習知識的學科，其目標是通過從數據中提取出有價值的部分來生產數據產品。結合了許多領域中的理論和技術，包括應用數學，統計，模式識別，機器學習，數據可視化，數據倉庫，以及高性能計算。 數據科學技術可以幫助我們正確的處理數據的並協助我們在生物，社會科學，人類學等領域進行研究。
在這之前或與你不熟悉什麼是「資料科學」，但你一定曾經聽過「大數據」。
我們能說「資料科學」就是「大數據的科學」嗎？
其實，從事「資料科學」，就像是在挖金礦，人人都希望有效率的找到黃金，因此我們需要一些工具與方法。
資料科學中談的就是這些工具與方法，以統計與數學為基礎，發展出的諸多技術，而整座金礦山就是所謂的「大數據」，從中挖掘出價值的行動與過程，就是「資料科學」。
因此，當我們把「大數據」抽離時，資料科學中的那些技術依然存在，就像是挖礦的設備和方法不會因為今天沒有金礦而消失。但我們可以說，大數據的崛起確實吸引人們注意到「資料科學」。因此，當我們把「大數據」抽離時，資料科學中的那些技術依然存在，就像是挖礦的設備和方法不會因為今天沒有金礦而消失。但我們可以說，大數據的崛起確實吸引人們注意到「資料科學」。
#公民科技
公民科技是指一類技術（尤其是信息技術），此技術能夠促使公民參與公益事業發展，加強公民之間的交流，改善政府的基礎設施建設。「公民科技」包含公民應用、平台、以及實現上述目標的其他軟體。
舉例來說，g0v.tw（零時政府）就是近年來非常知名公民科技的展現之一，g0v以提供一個資訊透明化的社群，讓公民能夠更加確實了解政府運作、更快速了解議題，不被媒體壟斷，也才可有效監督政府，化為參與行動最終深化民主體質。
簡而言之，「公民科技」是善用當代的科技為工具，鼓勵人們溝通，提升公民參與意願，進而從事公共事務或公民運動，創造並共享社會價值。
今天要介紹的是分別獲得企業獎＿威盛電子 OLAMI 人機語音交互應用及大會技術人氣獎的SigmaGo 智慧導盲犬。
從挑選、訓練到配對、服役，導盲犬為人類奉獻牠的一生，但其實可以不必這樣辛苦。SigmaGo 智慧導盲犬 使用威盛電子提供的 OLAMI 中文語意分析平台及現場提供的 Raspberry Pi 3硬體開發套件，連結自製的 Arduino 機械犬，讓盲胞可以自然地使用中文向機械犬下指令，機械犬就會引導盲胞前往想去的地點， 讓盲人在擁有另一雙眼睛的同時，也讓狗兒可以擁有更自由的生活。SigmaGO, Go For It!

圖片轉載至臺大黑客松
想參加比賽卻不知道哪裡有嗎？歡迎鎖定獎金獵人網站唷！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192420,自我挑戰組,0,資訊技術解戈迪安繩結系列,13,IT｜作業系統｜Linux｜Ubuntu安裝,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1513766334000000000,145,"Ubuntu是一個以桌面應用為主的 GNU/Linux 作業系統，目前最新發行（嚐鮮）版本為 17.10（2017 年 10 月發表，九個月支援，至 2018 年 07 月）。它是一個開放原始碼、功能強大且免費的作業系統，除了作業系統以外，還有文書資料處理、影像處理、影音播放、燒錄、……等免費軟體。
支援並啟用虛擬化技術，若導入VirtualBoX時無法選擇64位元的 CPU，需要有支援 Intel 的 VT-x 或 AMD-V 虛擬化技術才行。
[純淨系統安裝範例（採用 14.04版）]
1.使用製作完成的光碟或USB隨身碟開機，電腦開機以後進入BIOS設定畫面，設定BIOS為光碟開機會USB隨身碟優先，

2.開啟的畫面如下圖所示，預設的語言為英文。

3.選擇「中文()」，點選「安裝Ubuntu」。

4.勾選「當安裝時下載更新」與「安裝這個第三方軟體」，點選「繼續」。

5.使用預設的選項「清除磁碟並安裝Ubuntu」，點選「立刻安裝」。

6.使用預設的時區「Taipei (台北)」，點選「繼續」。

7.鍵盤排列方式選擇「英語 (美式)」，點選「繼續」。

8.輸入名稱、電腦名稱、使用者名稱和密碼，選擇「需要我的密碼才能登入」，點選「繼續」。

9.正在複製檔案。

10.正在安裝系統。

11.安裝完成。

12.輸入密碼，按鍵盤的「Enter」鍵，登入Ubuntu 14.04。

13.已經登入，可以開始使用Ubuntu 14.04。

設定 root 登入
Ubuntu 預設不讓使用者用 root 登入，系統偶爾會使用root帳號，可透過此一方式修改系統設定，取得root帳號；建議於系統研發時可用，若作一般系統建議不要啟用root。
使用任意帳號登入, 假設是kevin
這樣就完成修改 root 密碼囉！快點試試能不能用root登入吧:p
另一種方式是每次用 kevin 登入後，輸入下面的指令，兩種選一種即可
這樣就可以取得 root 的權限做事了!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192214,自我挑戰組,0,JAVA三十天自我分享歷程系列,1,原來是第一天：前言,天氣真好,https://ithelp.ithome.com.tw/users/20107811/ironman,1513765651000000000,149,"原本是想要來這挑戰發文與檢視自己這幾年開發上的心得
但某一天忽然突發奇想
在網路上許多高手分享自己的技術與經驗，可是都建立再有基礎程度上
對於沒有學習過程式語言的人來說，卻宛如天書一般難以理解
現在的科技日新月異，再教育上更開始注重從小開始養成程式邏輯的學習
如何讓新手或是學生，對於程式語言上更能引發出興趣，這是一個滿艱難的挑戰
所以我打算寫一篇算是勵志的愛情短篇小說
使用故事引導新手能夠先看的下去
畢竟很多人剛開始學的時候
才發現最痛苦的不是不會，而是明明是中文書，你卻看不懂
故事中再用穿插的方式，一步步從基本的JAVA概念，慢慢衍生下去
但目前也只有大概的構想，許多內容還要再這三十天內慢慢完善
趁這個機會督促自己，趕快完成這項任務
不然平時想寫的時候都會被許多誘因給吸取靈魂
再寫的途中若是有更好的意見也歡迎各位大大指（鞭）教（小）指（力）教（點）
成語說的好，人多勢眾嗎（？
好吧好像不是這樣用的，反正期許自己能夠順利完成吧！
""人生最悲慘的不是做不到，而是不知道""",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192250,ModernWeb,0,從工程師的角度看UX/UI系列,2,介紹、源起,superpucy,https://ithelp.ithome.com.tw/users/20091485/ironman,1513765068000000000,149,"第一次接觸UX，是從公司的內訓開始
上完一個下午的使用者體驗課程
只得到了一個結論：讓使用者爽(註)
專案開發的過程中，每次開發完一部份功能到承辦那邊測試時
最常聽到就是『好難用』『好難用』『好難用』『好難用』『怎麼這麼難用』
每當聽到他們這樣說，我總是心理唸著『需求還不都是你們提的!!!!』
沒錯，我們沒有導入UX，我們只有美美的UI
跟設計一些自以為很好用而且符合需求的操作流程
再加上不斷的需求變更，原本就四不像的東西變得越來越詭異
最終就是『你們的系統好難用喔!!!!!』
而至今，我們依然沒有導入UX
所以這系列的文章無法分享實際的專案經驗
算是我在學習UX的過程中一點紀錄跟心得
至於我為何會開始認真接觸UX ?
則是因為認識了一群設計師朋友
在因緣際會下加入了UX/UI台中聚
本只是個打雜的，順便可以聽一聽講座
但在幾場講座之後，竟然妄想用這微薄的認識挑戰鐵人賽
之後到底會怎樣呢??
請待下回分曉",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192418,自我挑戰組,0,Vuex學習筆記系列,10,[Vue.js]Vuex學習筆記(10)-專案結構,NomiSu,https://ithelp.ithome.com.tw/users/20107601/ironman,1513764819000000000,133,"Vuex 並不限制你的程式碼結構，但仍然有規定了一些需要遵守的規則：
只要遵守以上規則，如何組織程式碼都是可以的，但是如果把全部程式碼放在 store 的文件中，會顯得有些雜亂，所以我們可以將 action 、 mutation 和 getter 分割到單獨的檔案。
而對於大型應用，我們會希望把 Vuex 相關程式碼分割到模塊中。
以下是一個購物車專案結構範例：
同步收錄於部落格",['專案結構'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192402,ModernWeb,1,Go！從無到打造最佳行動網站系列,10,Day10純、手工系列Go(BeeGoRouting概念篇),網襪工程師,https://ithelp.ithome.com.tw/users/20107302/ironman,1513764374000000000,144,"
有點開心寫到第十天，剩下三分之二了，迫不及待的想把這篇完成，越接近年底感覺就好像有做不完的事情，現在都會很怕鐵人賽寫不完，為了好好記錄整個開發的過程，真的是一件挺麻煩的事。
Routing 也有人稱為Router、Route，其實意思都一樣，就是在處理使用者進到網站/API後需要取得什麼樣的controller，做一個統一管理，如果你不知道什麼是MVC的話麻煩請先了解什麼是MVC，本篇不會介紹MVC的概念。
在有View的網站中，Routing扮演著協調的角色，下面這張圖說明了進入網站後，如果有使用Routing的話他的運作方式

如果你沒有View，本來就不用再去將資料Render到你的html上面，你做的事情很單純，就是將資料包裝好，給別人用，沒錯別懷疑你就是一個賣資料的小女孩。

不過這都只是在講在伺服器端處理的問題，當然前端也有Router的處理，不過大家可以查查看，有許多的前端框架有做routing，像是Vue、React、Angular都有做Router的套件，透過這些前端框架的routing套件，可以讓網頁似乎沒有重新整理的感覺，像是Youtube，在點擊的過程中沒有閃動的畫面，而是非常平順的操作，這對UX來說可能是一種加分的動作。

好吧現在要來切入正題，Beego Routing的概念，可以參考下面由官方網站提供的執行邏輯

打開我們昨天產生的API專案，beego的進入點就是main.go這支程式所處理的，在上方的import中可以看到有routers的蹤影，因為進入點接著就要透過Router來解析使用者進入的資訊。
main.go
在進入點後，透過router.go這個檔案來解析url的參數。
還記得我們在前天有透過bee new hello建立一個hello的專案嗎？
他在router.go的程式中，與我們使用bee api Board有些不一樣有看出來了嗎？
hello/router.go
Board/router.go
在明天我們再來好好研究為什麼有這樣子的不同吧！
今天一早起來，嘴巴感覺特別想喝飲料，於是飲料誕生了！享受上班搭配珍珠紅茶的口感，開啟了今天美妙的工作環境，說好的減肥呢？那是明天的事...
早餐店的大冰奶好好喝
客人客人您有所不知，早餐店的大冰奶可以幫助排便以外，最令人擔心的是-奶精，成份中的「飽和脂肪」、「反式脂肪酸」會造成血管的阻塞跟硬化，另外最關心的熱量，液態奶精的熱量約260大卡，全脂奶粉約504大卡，全脂鮮乳約63大卡，奶精粉則為539大卡。所以還是盡量喝鮮奶茶吧！
(參考資料 TVBS新聞)
Pursue something so important that even if you fail, the world is better off with you having tried.
追求重要的事物，重要到即便你失敗了，這世界也會因為你努力過而更好。
Tim O’Reilly",,,"['BeeGo Routing 概念篇', '減肥專欄', '每日一句']",['小知識'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192415,自我挑戰組,1,每天學一個Lodash.js的函式系列,1,三十天學LodashJS#1：前言,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1513764058000000000,183,"
圖片來源：http://blog.onclickinnovations.com/lodash-a-better-utility-library-developed-by-javascript-community/
一開始會知道 LodashJS 這個函式庫是因為 在學 Vue.js 的路途中，在 Vue 官方範例中看到了 debounce 這個函式，這是第一次遇見 LodashJS。而我第一次想用 LodashJS 的動機在於看了這篇關於 deep copy 的文章：深入剖析 JavaScript 的深複製。裡面分別使用了不同的第三方函式庫實現深拷貝(Deep Copy)，例如：
文中不僅分享了五種方法，更比較了彼此的執行效能。其中 Lodash 不僅在效能表現優異，支援的特性也較多，例如對日期(Date)或正規表達式(RegExp)的深拷貝等等。
正是因為這篇文章開始好奇 Lodash 到底是何方神聖，也在無意間發現做自動化測試，End-to-End (E2E) testing 的 nightwatch 也有依賴 Lodash 的函式庫，這開始激起我學習 Lodash 的興趣。
由於同時在參加其他鐵人賽的關係，Lodash 的挑戰很有可能失敗，希望透過每天練習一個 Lodash 函式來了解這個函式庫。
這邊也分享一下我們團體賽的成員們：
我們是「露天拍賣」的工程師，這次決定一同組隊「露天廢物」參加鐵人賽，扶持彼此完成這艱難的 30 天任務。
成員如下（按字母順序排列）
歡迎大家閱讀我們的學習歷程！",,"['動機', '前言']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192414,AI&MachineLearning,0,MachineLearning與DeepLearning筆記系列,1,[DAY1]MachineLearning介紹與預計撰寫內容,kalan.chen,https://ithelp.ithome.com.tw/users/20103565/ironman,1513763941000000000,139,"機器學習毫無疑問地已經成為 buzzword 了，在網路上也有多到數不清的教學文章，只要會一點程式就能夠透過函式庫兜出一個 model 來，甚至說點 AI、Deep learning 就可以把別人唬得不要不要的。
但問題是，許多文章及教學當中，都是直接跳過理論部分，直接把文件上的程式碼複製貼上，對於一位工程師來說，我們的確只要確定結果正確就好，不需要關心如何實作。
了解背後的理論對提升自己仍然有許多幫助，像是「是資料太少還是 overfitting？」這類的問題，如果不知道背後的 model 如何運作，那麼一般的工程師就是無腦地繼續塞更多資料或是胡亂修改參數而已；知道理論的工程師能夠透過學習率曲線、誤差函數等等，來判斷到底是否繼續增加（減少）資料量、特徵。
因此，本系列文並不會有太多範例代碼，盡量著重在背後理論的部分，希望能夠用通俗易懂的方式讓大家理解。同時，我也仍然持續在學習機器學習的相關知識，可能會有不足或是錯誤的地方，歡迎大家不吝指教。",,"['Introduction', '前置', '預計撰寫內容']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192406,ModernWeb,0,勇者闖江湖身背三支刀GoGoGolang系列,1,Go的初心者（簡介）,米KLG羅,https://ithelp.ithome.com.tw/users/20107431/ironman,1513763910000000000,132,"這是與 Go 的第一次親密接觸, 今天就來開始我的初心者試煉吧！首先是Go的簡介
特性
1.開放原始碼
作為一門網頁開發端語言, Go 是開源的任何人都可以看見原始碼並且進行優化, 也因為開源讓Go的錯誤可以更容易的得到修正, 與一些非開源的軟體相比之下, 對開發者而言是相對友善的一門程式語言.
2.語法簡潔
作為一門靜態語言 Go 的語法相當的簡潔, 讓剛開始接觸的初心者不會因為冗長的語言架構而受到驚嚇.
3.跨平台支援
本身具備強大的跨平台支援, 不管是Windows, Mac OS, Linux等等主流系統都可以支援.
4.全自動的 GIGO
Go 本身具備了強大的系統資源回收機制, 開發者可選擇是否需要干預回收的時機
5.具備物件導向與函數程式設計
Go 支援多樣化的程式設計風格
6.無繼承層次問題
Go 的介面與實現是相當容易引用的, 當你需要使用類別時只需要宣告類型即可引用
7.快速的編譯與執行
Go 本身的執行與編譯速度都相當的快速, 這也是我選擇他的原因之一
優點
1.強大的開發效率
2.簡潔的程式架構
3.高度的通用性
缺點
1.語言成熟度可能尚不及其他相類似的程式語言
2.雖然易於開發 但是某些地雷還是要注意
3.垃圾回收期間會停止所有程式操作 對於高即時性的開發者而言可能會不適應",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192410,ModernWeb,0,菜菜菜的前端學習日誌系列,1,我的武器從一把槍變成了電腦-上,AndyTsai,https://ithelp.ithome.com.tw/users/20107702/ironman,1513763804000000000,171,"我是Andy Tsai，一個很菜很菜、菜到名字都有""Tsai""的前端工程師。
在成為一名前端工程師之前，我是一名職業軍人。
沒錯！！就是一個大部分人覺得""很爽""的一個職業
促使我想要離開部隊的原因有很多，最主要的原因是我的單位遍佈全台各地必須輪調，在我軍旅生涯中就從岡山->花蓮->澎湖->田寮數個地方，而我其實是一比較顧家的人(自己說的算？！)，不想以後結婚後的生活還是久久才能回家一趟陪陪家人(孩子看到叫叔叔？！)，所以決定要結束自己的軍旅生涯。
但做這決定並不是說離開就離開，必須也要想好離開之後的打算，總不能出去吃老本過生活吧，所以在離開前一年就在思考著出去要做什麼行業呢，嘗試過考國營企業，想像過做餐飲業，又或是重回自己的本科系，去當個電子工程師？！
在這思考過程中想著，做什麼還是好的呢，想著想著，應該要找一個現在是趨勢未來也是趨勢的領域，所以下了決定我要成為一個軟體工程師！！
~下集待續...~
第一次參加IT邦鐵人賽，其實原本沒有想參賽的，怕自己無法維持連續學習30天並發文，也怕自己參賽的內容很淺、很亂、很差，但Howard及Don鼓勵的說：不要想那麼多，你平常每天不都是在學習嗎？重點不是在你的內容到底多充實、多棒，而是能夠持續地向其他人分享你的學習成果，並且能夠得到其他人的回饋，這才是最棒的！！！
所以我也進這個坑了～希望自己能夠成功""鍊成鐵人""加油！！",['菜菜菜的前端學習日誌 - Day1'],,"['從拿槍變敲鍵盤', '離開', '跳坑']",,,['tags: 2018鐵人賽 前端'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10192413,Security,1,IT安全稽核系列,17,4.8是否與相關單位如主管機關、資訊服務廠商、檢警單位、電力單位、電信單位及防救災單位建立聯絡管道？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1513763803000000000,147,"「一群由獅子領軍的羊群，永遠可以打敗由羊領軍的獅群。」
我不知道誰是羊？誰是獅子？但是我可以確認一件事，一個企業的領導人，展現出甚麼樣的格局，就決定一家公司是甚麼格局。
我總覺得，一個領導像羊一樣，而且是那種還沒打戰，就慘遭獅群分屍，煮成羊肉爐吃掉的領導，這種羊肉爐格局的領導，真不知道該怎麼說了。
本人由衷的期盼資安單位，能扮演好獅子領導的角色，千萬別成為ㄧ隻沒用的羊，或者更慘的，ㄧ出場打仗就是羊肉爐一鍋，給人進補用的。共勉之了!
以下我們還是根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，繼續第四部分的分析。
四、資訊安全組織　（資訊安全組織、人事及資訊單位）
4.8是否與相關單位如主管機關、資訊服務廠商、檢警單位、電力單位、電信單位及防救災單位建立聯絡管道？
說明：此項說明一個重點：1.出事了，有沒有法令規範內的救援單位。
這問題所提到的單位，大部分是備援的單位，事前防範，大部分的公司都會有基本的防護，舉個實例，就以電力單位而言，大部分都有UPS不斷電系統，有次我所任職的公司，在炎熱的夏季，突然無預警的停電，雖然UPS啟動，但仍然很擔心，雖然事後沒有釀成大災難，但事前的防備，不管懂不懂資安，這種經費ㄧ定不能省。
此外，其實最麻煩的就是，遭駭客的入侵，大家也都知道wannacry 勒索病毒，我們也都知道，假設鎖住的檔案都是經由2,048位元RSA和AES加密，那幾乎不可能自行暴力破解救回檔案。我想處置的方法，我也就不再贅述，基本的動作，就事先拔除網路線，通報資訊部處理。
以上這些都太制式化的敘述了，我個人不想說這些，我想強調的是，如果你身為管理者，你對危機該如何去面對，是否具有「逆轉勝」的能力，我想這才是最重要的，這類危機管理最重要的，不只是管理者的問題，管理者領頭是「羊」，那整個資訊部門就不用玩了，如果主管是羊，那就得有獅子出來，如果你是職員，被附於一個屎缺，本人倒是覺得，化被動為主動，主動去面對問題，與其抱怨，還不如趕快練習，如何做好危機管理。
試著去想，同樣一個單位，沒有人能像你一樣，被附與這樣的任務，你越是能處理好，你的身價就越不同，你面對危機越多，你越能鎮靜處理，這才是重要的經驗累積，試想各式各樣的網路攻擊，不停的出現，沒有人能夠有把握去處理所有的事情，但是一個有經驗的領導人，也許就是你，在一團慌亂中，能夠馬上決斷，有條不紊的處理，指揮調度，這是需要多少經驗累積？ 這就是我要強調的東西，每個人對於資訊知識學習都有極限，但是有處理事情的能力，我覺得更是難能可貴的。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192407,ModernWeb,1,用範例理解Vue.js系列,10,用範例理解Vue.js#10：ConditionalRendering,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1513763570000000000,167,"今天是鐵人賽第 10 天，我開始了另一個自我挑戰賽，題目為「三十天學 LodashJS」，也是不知道哪來的勇氣發佈自己寫的糞Code在網路上。我認為要多認識強者才會進步得更快，所以有任何可以改進的地方都歡迎大家留言，大家有空也可以去逛逛我 LodashJS 的學習過程。

Conditional Rendering 就是條件渲染。
這邊介紹 v-if 和 v-show 兩種渲染方式，並補充 v-visible。
這個範例就不囉縮一次介紹 v-if, v-else-if, v-else。
附上 fiddle https://jsfiddle.net/hunterliu/6djv4tn8/
即使 data.ok 值為 false，仍會渲染只是透過 CSS display: none;隱藏。
附上 fiddle https://jsfiddle.net/hunterliu/12dj0qwk/1/
v-if 是真正的條件渲染，因為它會確保在切換過程中事件監聽器和子組件適當地被銷毀和重建。
v-if 也是惰性的：如果在初始渲染時條件為 false，則什麼也不做——直到條件第一次變為真時，才會開始渲染。
v-show 則只是簡單的切換 CSS display:none。
簡單來說，如果需要非常頻繁地切換，則使用 v-show；如果在運行時條件很少改變，則使用 v-if 。
補充：
vue-visible 則是切換 CSS visibility: hidden。
請看 w3schools display and visibility
但是使用 vue-visible 許額外引入：
範例：
附上 fiddle https://jsfiddle.net/fcpc6utm/",,['Conditional Rendering'],"['v-if, v-else-if, v-else', 'v-show', 'v-if vs v-show']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192196,SoftwareDevelopment,0,Swift學習目標--30天送審,1,第一天：來做個RGB跟Hex的colorconvertor吧！,ellstang,https://ithelp.ithome.com.tw/users/20107694/ironman,1513763469000000000,146,"RGB跟Hex之間的色碼轉換，是我們在選擇顏色時經常會遇到的問題之一。
第一,二天的文章會介紹如何實做一個簡易的RGB跟Hex切換APP，來解決這個小難題。
下圖即是完成後的樣子

首先在storyboard丟進一個UISegmentedControl作為切換，及四個textField可以輸入RGB及Hex值，一個轉換按鈕button，及顯示結果色的label。
開始程式的部分：
/* 首先用一個enum 來表示RGB切換成Hex及Hex切換成RGB的兩種情況，並丟出一個預設值給var conversion。 */
/* 接著讓UISegmentedControl成可以切換的模式。並在切換之際，使用TextField.text?.removeAll()，清空TextField裡面的值，以便進行下一次輸入 */
/*但是在這之前，我們必須確保使用在按下convert按鈕之前，者輸入四個TextField的值都是正確的，而非空值，將導致我們的APP壞掉(crush)。
這時候，我們可以先丟出 guard let 這個方法，並將可能發生錯誤的情況(空值)以return的方式處理。
*/",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192268,DataTechnology,1,GraphQL+ApolloData入門系列,14,ApolloData&Mutation(二),polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513763418000000000,120,"介紹
在Mutation 的部分 ，config  Apollo 提供了許多不錯的函式庫， 大體使用跟 Query 很相似，以下來介紹  config 有哪些可以 method 可以使用
跟 query 一樣 第一個參數使用 gql 配置如何 mutation 。第二個參數裡面可以放options 如下方所示位置
可以直接用使用 props 定義method，這部分也都跟 Query 一樣。
當然如果要直接在元件使用mutate 只要把 mutate 拿出來用就可以了
options.variables:使用 variables 接收 props 觸發 mutation 這部分也跟 Query 一樣
options.optimisticResponse 樂觀反應是為了增加使用者體驗，一般會發Request到後端去撈完資料在回寫道程式碼中，但是這樣的等待時間會降低UX體驗，所以樂觀回應也有人稱會樂觀ＵＩ， 當下先給預期反應，等到Server response 後Update正確的資料
總結
mutation 跟 Query Options 語法幾乎是一樣 ， 比較不同的是 optimisticResponse (給一個預期暫時的值來增加使用者的體驗).",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192310,自我挑戰組,0,AgileCultureChangeinCompany系列,2,Agile-Day2-What'sAgile,Tequila,https://ithelp.ithome.com.tw/users/20107855/ironman,1513763053000000000,113,"[what's Agile]
Agile這一個名詞，你從wiki查詢
敏捷軟體開發（英語：Agile software development），又稱敏捷開發，是一種從1990年代開始逐漸引起廣泛關注的一些新型軟體開發方法，是一種應對快速變化的需求的一種軟體開發能力。它們的具體名稱、理念、過程、術語都不盡相同，相對於「非敏捷」，更強調程式設計師團隊與業務專家之間的緊密協作、面對面的溝通（認為比書面的文檔更有效）、頻繁交付新的軟體版本、緊湊而自我組織型的團隊、能夠很好地適應需求變化的代碼編寫和團隊組織方法，也更注重軟體開發過程中人的作用。
Erwin:看完wiki以後來是不知道在說什麼?
Tim :感覺是很厲害的一種軟體開發方式
Erwin:有沒辦法再說的詳細一點
Andy:那我來嘗試說明一下好了
Agile是一種軟體開發方法，目前開發框架:Scrum,Lean, XP, FDD, DSDM, Crystal
其中Agile manifesto(ps.1)有四大宣言
Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan
Erwin:從上面字面中還是不太理解
Tim:感覺與我們工作中還是沒有很大相關
Erwin:能不能舉例或是實作出來，我們會比較有感覺
Andy:好的，既然大家對於Agile有興趣，就介紹Agile目前最多人的開發框架-Scrum
Erwin:Scrum?你是說美式足球術語中的scrum?
(唉呦,我以為Erwin只懂IT沒想到對美式足球也略懂)
Tim:沒錯，scrum跟Agile有什麼關係?
Andy:Agile是一種軟體開發方法，實施Agile有很多實作框架Scrum,Lean, XP, FDD, DSDM, Crystal
Erwin:這麼多框架，我們要挑哪一個來學習阿?
Andy:我們選擇在Agile圈中最受人歡迎的Scrum
Andy:Scrum主要由組成-3支柱,3角色,4活動,3產出物
Tim:什麼?3343?聽不是很懂
Andy:哈哈，沒關係一開始大家對於scrum也都是不了解
Andy:我這邊有簡單的scrum guide，你們可以參考，下次會議我們可以在討論
Erwin&Tim:好喔，沒問題，我們可以先研究
ps.1 Agile manifesto :於 2001 年由一群人共同撰寫，包括 Scrum、Extreme Programming(XP)、Dynamic Systems Development Method(DSDM) 和 Crystal 的創造者與軟體產業中公認的領導。針對當時所有不同的敏捷方法建立一套共同原則與四大價值,稱為Agile manifesto",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192267,自我挑戰組,0,30天-學習Beacon的成長紀錄系列,2,Beacon-Day2-介紹,Tequila,https://ithelp.ithome.com.tw/users/20107855/ironman,1513763022000000000,110,"[介紹]
自從領完主題後，大家就開始各忙自己的工作
彷彿大家都忘記有了Beacon這個主題
於是請大家撥空參與第一次的團隊會議
在過程中請大家分享對於Beacon的想法與概念
Tim :學生時間先前有針對Beacon進行實作
Andy:拿直接拿妳學生版本的來交差好了
(沒錯!Andy用著渴望的眼神看了Tim)
當然這個結果還是被眾人，總不能第一次開會成品就出現了吧!?
Becky&Winston:那我們先研究Beacon的原理以及應用吧
Beacon小學堂(from wiki)
Beacon是蘋果公司提出的「一種可以讓附近手持電子設備檢測到的一種新的低功耗、低成本信號傳送器」的一套可用於室內定位系統的協議這種技術可以使一個智慧型手機或其他裝置在一個Beacon基站的感應範圍內執行相應的命令。
沒錯，看完wiki敘述會完全不知道在講什麼?
文組板: 手機可以接收beacon的訊息

看完基本的Beacon介紹，突然覺得挑的主題好像沒有想像中的簡單
但是既然已經選擇該主題，當然還是要保持熱血的精神走下去",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192395,SoftwareDevelopment,0,30天Swift入門學習系列,1,iOSApp實作(1)Discount(SliderBar+Keyboard),z7924723,https://ithelp.ithome.com.tw/users/20107695/ironman,1513762900000000000,130,"
Description:
練習iOS App的第一天。
這個練習是讓使用者輸入價格後在通過拖動Slider Bar的方式來計算打折情況。
Component:
一個TextField可讓user通過keyboard輸入價格
一個Slider Bar可以通過拖動來改變打折數
兩個Label分別用來顯示打折金額、打折後價格
Highlight function：
Additional：
以下為UISlider常用的member function的介紹：
Reference：
Source code on Github",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192403,SoftwareDevelopment,0,Swift零基礎實作旅遊景點app系列,1,Swift從零開始-Day1：學習Swift記憶體管理,ethan510010,https://ithelp.ithome.com.tw/users/20107696/ironman,1513762853000000000,126,"
http://howtocodeiosapps.com/index.php/2016/10/24/value-vs-reference-types-in-swift/
資料大致上分成Value Type及Reference Type兩大類，常見的型別如Int, Float, Boolean...是以Struct來定義的，所以都是屬於Value Type。而Class, function, Closure則是屬於Reference Type。
學會 Swift 的關鍵：Value Type vs. Reference Type – WuFeng Chiang – Medium
可以看到把number1 分配給number2時，記憶體存放位置是不同的，所以更動number1的值不會影響到number2。

可以想像成是一個單一開口的箱子，Value Type的值會依宣告順序一塊一塊放在上面（向下排列），在上面的範例中number1宣告完後再宣告number2，在Stack的位置如下圖。

http://www.andrew.cmu.edu/course/15-440-s12/applications/ln/proccontext.jpg

https://manojbhoir.wordpress.com/2015/09/29/value-type-and-reference-types/
現在如果創建一個Class Person，此class內有firstName及lastName的屬性，這些屬性會放在Heap(樹狀結構)中，當今天我們實體化此類別var student = Person()，則變數student是放在Stack中(引用Person這個類別存在Stack)。
關聯性如下圖所示

PS: 如果在class裡面有宣告static屬性，則此屬性會存在另外一個記憶體區，不屬於Stack及Heap，額外的記憶體區（有人翻成靜態記憶體區）。",,"['分類：基本知識學習', '1. Value Type v.s Referencece Type', '2.  Stack 及 Heap學習']","['1-1. Value Type的特性', '1-2. Reference Type的特性', '2-1. Stack概念學習:', '2-2. Stack, Heap關聯']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192405,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,12,[XII]用CodeIgniter的30天-欠的越來越多不如自掛東南枝,qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1513762296000000000,131,"一早進公司，自掛東南枝
被同事陰，自掛東南枝
文章越欠越多，自掛東南枝",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192397,DevOps,0,用30天來介紹和使用Docker系列,17,Day17：使用DockerVolume的功能(一),yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1513761718000000000,160,"之前有說明過在執行 Docker Container 的時侯檔案系統會分為 Image 層、Init 層以及可讀可寫層這三個部份，當 Docker Container 刪除掉之後，存放在 Docker Container 上的資料也就會跟著刪除掉，因此需要把不想要被刪除掉的資料存放在實體機器上，避免資料不見的問題。
主要實作如何使用 Docker 的 Volume 功能，把資料寫入到實體機器上，主要的方式有二個方法：
在執行 docker run 指令時加上 -v 參數，使得 Container 裡面的檔案路徑Mapping 到實體主機的檔案路徑。
在撰寫 Dockerfile 時，加入 VOLUME 指令，做到把資料存放在實體的主機上。使用這種方法需要搭配 docker inspect 指令，才能查詢到實體主機檔案的存放路徑在哪。(這個明天會做介紹)
在使用 docker run 指令時，指定 -v 參數，使得實體主機的資料夾路徑 Mapping 到 Container 的資料夾路徑，指令如下
/home/user1/storage 是實體主機的資料夾路徑 Mapping 到 Container 裡面的 /storage 資料夾路徑。
執行畫面如下：

我們就會在上個畫面中的左邊視窗看到執行 docker run 指令時使用 -v參數 Mapping 到實體主機的 /home/user1/storage 的資料夾。然後在右邊視窗中的實體主機 /home/user1/storage 的資料夾建立一個 helloworld.txt 的檔案，最後再回到左邊視窗的 Container 裡面的 /storage 資料夾去看 helloworld.txt 的檔案已經存在了。
在使用 docker run 指令時，指定 -v參數，但是沒有指定實體主機的檔案路徑，指令如下
使用以上的指令會發現到沒有指定實體主機的資料夾路徑，那資料會跑到哪裡去了呢？
要回答這個答案之前需要先使用 docker volume ls 可以看到如下的畫面

上圖就是一個 Container 的 Volume，如果要找到在實體主機真實的資料夾路徑，可以使用以下的指令：
4c2a9ef663c2 是 Container 的 ID
執行畫面如下

上圖就可以找到 Volume 在實體主機的真實路徑，這時侯就可以使用 cd command 切進上圖查詢出來的資料夾路徑並且寫入一個檔案在此資料夾，但是要注意使用者權限的問題，這裡是直接切換成 root 權限，如下圖：

從上圖就可以看到helloworld.txt的檔案有在 container上出現，也就有成功的把 Volume 這個功能執行起來。
今天已經介紹了如何使用 docker run，指令把Container 的資料夾 Mapping 到實體機器上，明天要繼續介紹的部份是透過使用撰寫 Dockerfile 的方式把 Volume 掛載起來。",,,,"['Example1：', 'Example2：']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191620,SoftwareDevelopment,0,無中生有-從SWIFT語法學習到iOSAPP的開發系列,1,開始前的準備工作,soj,https://ithelp.ithome.com.tw/users/20107697/ironman,1513761659000000000,145,"本身是半導體產線出身，在生產線待了九年之後，想給自己放個假，只不過這是一個很長很長的假。在休息了快九個月後，我決心走回自己的興趣 ：軟體工程師。
這看起來很瘋狂！！沒錯！我是完完全全轉換跑道，而且一點基礎都沒有，唯二有的就是興趣...外加大學時期學過的程式語言，至於是C語言還是C++語言，說真的我也分不清楚。
不過既然要走軟體工程師了，當然要先選一種語言開始學啊！？那到底要選什麼語言開始呢？在沒基礎、沒學習管道、沒概念的情況下，只好從日常生活著手，看著我手邊的iPhone手機，再想想裡面有些App用得不順手，就決定從iOS App開始，又剛好前同事推薦了我一個工作室-好想工作室，有提供學習的環境，我就開始學習之旅了。
寫這篇文章時，我自主學習iOS App開發也一個多月了，工作室提供了一個很棒的交流環境，但是大部分的時間還是自主學習，網路上的資源很多，導致學習過程需要花費很多精力在查找資料，資料太多太雜就需要做個筆記，工作室夥伴有建議寫個網誌記錄自己的學習過程，這期間剛好遇到iT邦幫忙鐵人賽的活動，就利用這個機會順便把所學到（蒐集到）的資料分享給大家
首先想加入iOS App開發的夥伴們，開始之前有以下3個需要準備的東西。
	1. 一台電腦
	2. 開發軟體
	3. 學習資源
受限於開發軟體的作業環境，這裡的電腦只能限定macOS系統，也就是說只能接受iMac, MacBook的電腦。有人會說：「什麼！！都還沒賺錢就先推坑！！」沒錯！！就是這麼坑～～
也是有幾個替代方案拉
使用虛擬機或雲端mac都不能直接連接手機進行測試（雖然Xcode有提供模擬器可以測試，但是有些功能是要實機測試的。例如：照相功能），所以想加入iOS開發的夥伴們，還是買台蘋果電腦吧...
如果各位已經有了一台蘋果筆電。恭喜各位，接下來簡單多了。因為蘋果公司很貼心的已經準備好開發軟體-Xcode，而且從Xcode 4.1開始，使用者已經可以從Mac App Store免費下載。目前Xcode版本是9.2版，支援macOS 10.12.6或以上版本。
開發軟體有了（還是免費的），接下來就可以準備學習程式語言了。在這裡蘋果官方又很貼心的提供了兩種語言可以編輯：Objective-C & Swift，其中Swift是我這次主要學習的語言，接下來的文章也都會以Swift語言為主。
其實網路上有非常多的學習資源，大家自己上網搜尋關鍵字“Swift”就有很多資料可以看，但是小心網路上不少資料是Swift 2.0，目前Swift版本已經更新到Swift 4.0，部分邏輯與語法有些許增減或變更。
新手上路的話，個人最推薦官方手冊，因為官方手冊寫的很詳盡，不過如果各位也像我一樣是個程式語言的初學者，若在語法理解上有問題的話，建議先上網找找實例，對於理解上會很有幫助。但是如果網路上也找不到實例，我想只能先跳過，套句老一輩人常說的「等你長大就知道了」，學習程式語言不是一天兩天就會的，不管怎樣它還是個『語言』，既然是語言就要（多聽）多看。
以下提供官方手冊的路徑
Swift 4 英文版
網路上也有神人協助翻譯成 簡體中文版
Swift 4 簡體中文版
但是建議各位不要排斥讀英文版，因為在與人討論時不是每個人都懂中文翻譯是什麼，溝通上遇到專有名詞仍以英文為主。
除了網路上的資源外，我個人也是買了一本iOS設計的書，畢竟官方手冊的書寫的文謅謅的，一不小心就卡關了，而且網路資源太多太雜，很容易就迷失方向，可能在查找資料就花費太多時間，所以啊～～手頭上有一本好的工具書也是很重要的！！",,"['前言', '工欲善其事 必先利其器']","['一台電腦', '開發軟體', '學習資源']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192400,DevOps,2,Nightwatch101：使用Nightwatch實現End-to-EndTesting系列,10,Nightwatch101#10：BDDExpect,cythilya,https://ithelp.ithome.com.tw/users/20092232/ironman,1513761606000000000,340,"
Nightwatch 的 BDD Expect 是源自於 Chai 的 Expect API，並且只能用於網頁元素的比對。expect 比 assert 更有彈性和口語化，缺點是不能串起來（chain）使用。
本系列文章皆使用這個專案，可以拉下來玩玩；有什麼問題都可以提出 issue。
欸，前言就提到了一堆陌生的專有名詞，坐在隔壁的露天廢物成員 hunterliu1003 表示生氣（翻桌？） (╯‵□′)╯︵┴─┴
「不是說好是手牽手一起學 Nightwatch 嗎？」 (☍﹏⁰)
那麼就來一個個好好解釋清楚吧。
BDD 是指行為驅動開發（Behavior-Driven Development）意即在開發前先撰寫測試程式，以確保程式碼品質符合驗收規格。除了實作前先寫測試外，還要寫一份「可以執行的規格」。白話文就是使用者想看到什麼、打開什麼、點到什麼，就這麼寫在測試程式裡面。
像是這樣...
BDD 其實是一種 TDD，最大的差異在於
不論 BDD 或 TDD 都只是在談理念，它們並不是真正實作的方法喔。
總整理，來比較 TDD 與 BDD 的差異。
參考認試軟體測試的世界 & TDD/BDD 入門。
Chai 提供測試用的斷言庫（Assertion Library）。斷言庫是一種判斷工具，驗證執行結果是否符合預期，若實際結果和預測不同，就是測到 bug 了。
例如
預期 2 等於 2。
預期「foo」等於「bar」，若不相等就報錯「foo is not bar」。
有興趣可以參考這裡，內文有比較詳細的說明。
Chainable Getters 用於提高可讀性，但沒有任何測試上的功能，並且沒有順序關係，只是用來連接取到的元素和斷言。可以想像成說話上常用的連接詞，像是「然後」、「接著」、「的」，用了讓人覺得流暢，不用也仍能聽懂看懂。
Chainable Getters 有 to、be、been、is、that、which、and、has、have、with、at、does、of。
如下所示，檢視這個 DOM element 的 inner text 是否為「露天旗艦店」。
將「to」改為「be」也是可以的。
完整範例程式碼在這裡。
備註：開頭提到 expect 不能「串起來」（chain），這是指 不能 這樣接續使用
和 Chainable Getters 沒有任何的關係喔！不要錯亂了。
以下就來進入正題，來看看 Nightwatch 所提供的 BDD Expect 斷言指令。
對指定的 DOM element 執行斷言，作為比較的目標值可為 HTML 屬性值、元素內的文字或 css 屬性值等。
例如，檢視 #text 的 inner text 是否為 「Hello World!」。
檢視 #text 的 inner text 是否包含「Hello World!」。
檢視 #text 的 inner text 是否以「H」開頭。
完整範例程式碼在這裡。

否定，可表示為不等於、不包含。
#text 這個 DOM element 的 inner text 是否不為「Hello World!」。
#text 這個 DOM element 的 inner text 是否不包含「Hello World!」。
#text 這個 DOM element 的樣式中，display 的值是否不為「block」。
在指定時間前或後重新執行斷言，其後可串接其他判斷，增加重試的機會。
檢視 .rt-flagship .rt-ad-heading 這個 DOM element 的 inner text 是否為「露天旗艦店」、是否包含「露天」，並在 0.5 秒後重新檢視一次。
範例程式碼。
看完整範例。
執行以下範例。

檢視 .rt-flagship .rt-ad-heading 這個 DOM element 的 inner text 是否為「露天旗艦店」、是否包含「露天」，並在 1 秒後重新檢視一次。
範例程式碼。
看完整範例。
執行範例。

檢視 DOM element 的 tag name / type 是否為預期的值。例如：#text 是否為 <div>。
預期 #text 是 <div>。
預期 #text 是 <input>，若不是則報錯「Testing if #text is an input」。
檢視 DOM element 的是否存在特定的 HTML attribute，若不存在則可顯示客製化錯誤訊息。
body 是否含有 attribute data-attr。
body 是否「不」含有 attribute data-attr。
body 是否「不」含有 attribute data-attr，若存在就顯示客製化錯誤訊息「Testing if body does not have data-attr」。
body 是否「不」含有 attribute data-attr，並在 0.1 秒後重新檢查。
body 是否含有 attribute data-attr，並且這個 attribute 的名稱為「some attribute」。
body 是否含有 attribute data-attr，並且這個 attribute 的名稱不為「other attribute」。
body 是否含有 attribute data-attr，並且這個 attribute 的名稱包含字串「something」。
body 是否含有 attribute data-attr，並且這個 attribute 的名稱以字串「something else」為開頭。
這是錯的，因為只能檢查屬性是否存在，而不是檢查其值。
檢視 DOM element 是否有指定的 css 屬性，若不存在可顯示客製化錯誤訊息。
檢視 DOM element 目前是否 enabled。
檢視 DOM element 是否存在，但不一定是可見的。若要檢視是否可見，要使用 .visible。
確認 <input> element 的 radio 、checkbox 或 option element 被選取。
取得 DOM element 的 inner text，後續可串連其他斷言的動作，例如：.equal(value) / .contain(value ) / .match(regex)。
取得 DOM element 的值，後續可串連其他斷言的動作，例如：，例如：.equal(value) / .contain(value ) / .match(regex)。
檢視 DOM element 是否可見，可見就必定存在。若只是要檢視是否存在，使用 .present 即可。
檢視露天拍賣的頂層分類頁。
動作列舉如下
看完整範例。
這裡由 CSS Selector 取得的 DOM element 並不是一個集合，而是第一個符合選擇規格的元素。
執行以下範例。
執行結果。

以上看起來其實很雜亂 ◢▆▅▄▃崩╰(〒皿〒)╯潰▃▄▅▇◣
話說工程師都愛模組化，不要擔心亂糟糟，待之後使用 Page Objects 來改寫 (*´∀`)~♥
下一篇來看 BDD Assert。
網誌版。",,"['名詞解釋', '語法介紹']","['什麼是 BDD？', 'Chai', 'Chainable Getters', '.equal(value) 等於 / .contain(value ) 包含 / .match(regex) 符合條件', '.not', '.before(ms) / .after(ms)', '.a(type) / .an(type)', '.attribute(name)', '.css(property)', '.enabled', '.present', '.selected', '.text', '.value', '.visible', '範例']","['範例', '.before(ms)', '.after(ms)']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192203,ModernWeb,0,重新學習網頁設計系列,17,DAY17.three.js光源Light,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1513761375000000000,123,"在3D的應用當中, 光源Light是相當普遍的運用, 如果該3D場景Scene沒有光源, 通常會是黑漆漆的一片, 看不到東西。
在three.js中有以下幾種預設光源可供使用
其中在一個場景中最基本的光線就是環境光AmbientLight, 我們用該光源來添加一些顏色以及弱化陰影, 但由於環境光AmbientLight不會真正的產生光線, 因此通常會搭配其他光源使用。
參考以下範例, 了解幾個常用的光源
接著我們在render之前加入環境光AmbientLight, 觀察變化
觀察變化後可以發現, 正如先前所說, 畫面上並沒有產生甚麼變化
我們接著加入第二光源, 聚光燈SpotLight
接著我們就能看到畫面中的cube終於出現了鮮明的紅色
為了讓效果更加明顯, 調整render方式
這裡我們調整render方式, 賦予cube旋轉效果, 明顯看出各個面對於光餘所產反映
緊接著我們再加入另一個光源, 點光源PointLight
JSBin Demo
以上三個光源是在3D場景中最常被使用到的
使用光源的時候主要注意光源的位置, 以及場景中幾何所使用的材質是否能夠對光源產生反應。
更多關於燈光的介紹與使用請查看，官方文件",['DAY 17. three.js 光源 Light'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192220,SoftwareDevelopment,0,iOS三十天上架記帳APP系列,1,MoneyMom-不只記帳，還要財務規劃,shavenking,https://ithelp.ithome.com.tw/users/20107332/ironman,1513761226000000000,148,"一個能讓使用者維持記帳習慣，同時也可以協助使用者做財務規劃的記帳 APP。
你覺得自己了解自己的財務狀況嗎？
先別急著回答，請先思考下列問題：
你還覺得自己了解自己的財務狀況嗎？
不要再用諸如「及時行樂」、「有收入不要透支就好」這種自欺欺人的話欺騙自己了，事實上就是懶惰、不了解、不關心、逃避自己每天都會接觸到的事。
我有嘗試使用過台灣 App Store 裡面大多數的記帳軟體，包含網路上大家推薦的記帳軟體，確實，每個記帳軟體都做得很好，有完整的收支記錄，也有完整的報表顯示統計資料。
但是，不覺得少了什麼嗎？
我們完成了第一個步驟：「記帳」，但是 APP 卻沒有更近一步提供試算的功能，也沒有管理負債的功能，甚至也沒辦法記錄我的資產（股票、基金、任何有價值的物品），所以我還是得另外找工具（Excel）之類的，去做進一步的管理。
事實上，一般記帳軟體都只專注在實質金錢的收支，卻忽略資產的重要。一間公司真正的價值，不只是營收，同時也包含該公司有價值的物品。同理，一個人的價值，不只是現金，還有那個人的汽車、房契、土地等等資產。App Store 上有記帳軟體可以輕易地管理資產嗎？
如果已經有記帳的習慣，卻總還是覺得入不敷出，就是因為我們不了解自己真正的財務狀況，只看到「現金」這個財務的表面而已。
記帳僅僅是第一步而已，明確地了解財務狀況，我們才能更有效地運用錢！
每間公司都需要會計，為什麼？
因為公司的收入支出會比一般人更複雜，光是收入就會有各種不同種類的帳款，如果只是單純的紀錄收支金額，沒辦法有效地了解公司的財務狀況，更不用說了解公司的營運狀況。
如果一間公司不知道自己的財務狀況、營運狀況，這間公司能撐多久？
一般人不也是一樣嗎？我不了解自己的財務狀況、收支狀況，我要怎麼知道我每個月伙食費能分配多少？餐餐吃到飽還是餐餐吃不飽？
既然會計已經在公司有效地運行，代表會計的知識已經有能力應付公司這樣複雜的財務狀況，如果把會計知識簡化，也許能使我們更輕鬆地處理個人的財務。
簡單來說，會計的過程大約為下列步驟：
這樣的流程不就是我們每個人都需要的嗎？
不！
Money Mom 的想法就是簡化會計知識，融入日常生活，比方說會計的專業術語「應收帳款」，其實就是一般人接案時，完成的案子，還沒有跟業主收錢，業主可能預計下個月一起轉帳，如果轉化成日常用語，就是「還沒收的錢」。
所以我必須去消化這些會計知識，思考如何轉換成一般人能理解的記帳功能，而使用者只需要維持記帳的習慣即可。我只是去參考、模仿會計的方式，而不是去實現一個會計的系統。
因此，就像會計的流程，第一步還是得先記好帳。想要維持記帳習慣，最好的方式就是簡化記帳的時間。比方說，如果有一個 APP 能讓我三秒內記得一個英文單字，那我還會覺得背單字是一個麻煩事嗎？
同理，Money Mom 必須去思考，如何讓一般人能快速地記帳，進而讓使用者養成記帳的習慣，否則後續的功能都是空談。
因此，Money Mom 第一個主要功能就是「快速記帳」，也是這次鐵人賽的第一個目標。",,"['Money Mom 是什麼？', '市面上有這麼多記帳 APP，為什麼要再做一個？', '也許，會計知識會是一個解決方案？', '簡介會計知識', '所以每個人都要了解會計嗎？']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192396,ModernWeb,0,挑戰CSS30天系列,17,day17_margin,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1513761036000000000,115,"邊界 (margin) 是在邊框之外，並且是用來設定各個元素之間的距離。一個盒子有四個邊，所以我們可以對這四個邊逐一設定：
margin-top (上邊界)
margin-right (右邊界)
margin-bottom (下邊界)
margin-left (左邊界)
第五個屬性，margin，是用來作為同時設定四個邊的捷徑屬性。margin: [上面邊界值] [右邊邊界值] [下面邊界值] [左邊邊界值]
在這裡，順序非常重要。第一個值一定是上邊界的值，第二個值一定是右邊界的值，第三個值一定是下邊界的值，而第四個值一定是左邊界的值。
有三種方式可以設定邊界，分別為長度、百分比、以及 'auto'。
如以下範例：
若 margin-top 設定的數值越大，在藍色區域上面的橘色區域就會越大；
若 margin-left 設定的數值越大，在藍色區域左邊的橘色區域就會越大；
margin-right 設定 auto 則藍色區域會貼緊橘色區域；
成果如下圖：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192389,AI&MachineLearning,0,以100張圖理解NeuralNetwork--觀念與實踐系列,10,Day10：CNN應用--找出相似的照片,IcodesoIam.,https://ithelp.ithome.com.tw/users/20001976/ironman,1513760662000000000,140,"上一篇我們詳細介紹了 VGG 16 模型的使用方法，現在，我們就來應用它來進行照片比對，根據照片內主體的相似度(Visual Similarity)判斷，找出相關的照片，例如，我們要在 3D 模型網站搜尋『卡通人物』模型，我們可以輸入一張照片，程式就可以幫我們找出相似的 3D 模型，有興趣的讀者想了解詳情可參閱 Using Keras' Pretrained Neural Networks for Visual Similarity Recommendations。

圖. 照片比對，輸入最上面一張圖，找出下面類似的模型，圖片來源：Using Keras' Pretrained Neural Networks for Visual Similarity Recommendations
本程式名稱vgg16_vs.py，可在這裡找到，先準備一組照片檔，內含幾類照片，例如，狗、貓、熊等，放在程式所在目錄下的images子目錄，然後執行下列指令：
python vgg16_vs.py 1
vgg16_vs.py 程式需要一個參數，是images子目錄下第N張照片(即上面指令的 1，注意，陣列索引起始值是0)。執行結果會顯示最相似的兩張照片，我實驗結果相當好，可以找出不同姿勢的動物，相似度的判斷非常準確。
cosine_similarity 函數：這是程式最重要的部分，將images目錄內的每一張照片轉成特徵向量，再兩兩作比較，利用 cosine 函數計算兩個特徵向量的角度，越接近 1，表示越相似，這幾行程式碼來自Using Keras' Pretrained Neural Networks for Visual Similarity Recommendations。
main 函數：
由於相似度矩陣要倆倆比較，如果圖檔很多，執行就要等一下了，另外，我一開始是使用 keras 現成資料集 CIFAR100 small image ，準確率一直很差，我以為程式寫錯了，後來才發覺 CIFAR100 圖像素只有 32 x 32，太小了，不適合 VGG 訓練模型，所以，讀者找圖時要找像素大一點(224x224以上)的圖檔測試。
這個程式可應用在哪裡呢?
現在每個人一支手機在手，都會拍了很多照片，我們如果要從幾千張照片中找出與某個人有關的照片，就可以用本篇介紹的建模方式，自動比對就搞定了。
幾年前參加一場演講，講師談到『如何評估NBA球賽的廣告看板效益』，他們計算整段轉播影片中出現多少次某個廣告看板，藉此判斷是否符合成本效益? 以及放在哪一個位置的看板曝光率最高，當時覺得很神奇，現在，看完這一篇，讀者也可以做得到了，只要利用VGG模型，將看板、影片放入訓練資料，就可以找到有出現看板的影片了。
另類的商品推薦(cross sale/Up sale)：例如我們在電子商務網站上瀏覽某一項商品時，網站常常會推薦一些相關商品給我們，可能是熱銷或搭配使用的商品，譬如瀏覽電腦主機，系統就會推薦其他型號或廠牌的主機，推薦的商品通常是由後台依照產品分類、使用者偏好、促銷活動及商品銷售狀況統計出來的，如果用這個程式，要找到其他相似外型的商品就簡單多了。
罪犯追蹤：現在街頭監視器滿街都是，犯罪現場常能拍到嫌疑犯身影，若要追查行蹤，聽說刑警必須緊盯螢幕，看錄影帶一整天，才能找出嫌疑犯的藏匿處，若是能應用本篇介紹的演算法應用，也許在短時間內，就可以找到有嫌疑犯身影的相關影片了。
這次我們學會如何使用 Keras Applications，作出實際可用的應用，下次，我們就來討論另一個應用『風格轉換』(Style Transfer)，讓人人都可以變成畢卡索、梵谷，今天剛好看到一個新聞『催生全球首位AI繪師Andy，美圖搶攻人工智慧卻面臨一大挑戰』，這個主題很夯喔。",,"['前言', '實作', '程式說明', '結語']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192391,ModernWeb,0,30天打造我的WebGIS系列,1,[Day1]webGIS-資訊時代的地理大發現,gelab,https://ithelp.ithome.com.tw/users/20107816/ironman,1513760403000000000,161,"在現代的網頁應用中，地圖應用已經成為了不可或缺的網頁元素，一個現代網頁中，有了地圖應用，可以讓使用者查詢空間資訊；開發者亦可實踐各種LBS(Location Based Services)及IOT(Internet of Things)的應用。
目前網路上有許多開發資源可以協助我們建構一些地圖應用，並且透過資料視覺化及UI/UX，使空間資訊有效地呈現給user，user也可以request資訊，讓系統是雙向互動的，相關的應用國內外都有很多案例。
然而，目前線上整合這些資源且能涵蓋背後相關技術的完整介紹並不多，這次希望藉由2018 IT邦鐵人賽機會，除嘗試去整合開源資源應用外，再加強一些GIS相關技術面探討，目標是運用開源軟體，30天打造一個webGIS系統。
GIS是地理資訊系統(Geographical Information System)的英文縮寫，GIS在學術及產業應用上發展已經蓬勃發展數十年，而webGIS簡單來說就是把GIS應用在網頁相關平台上。
根據GIS應用軟體供應商龍頭Esri的定義：
In its simplest form, web GIS can be defined as any GIS that uses web technology to communicate between a server and a client (Esri)
更具體一點，Esri認為webGIS包含以下元素
上述文字基本上描述了webGIS的核心，在此我們可以加以擴充，有了webGIS技術，配合前後端技術的整合，得以讓網頁加入地圖應用元素。
參考文獻: http://www.geo-jobe.com/videos/web-gis-explained-5-essential-elements-web-gis/
以下是未來30天的規劃架構，希望能完整走過：
服務於國內知名工程顧問公司的應用開發團隊，希望藉由此次經驗，強化自己對開源軟體及本身核心技術的暸解！",,"['webGIS-資訊時代的地理大發現', '地圖應用與webGIS', '規劃架構', '關於作者']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192253,ModernWeb,1,ES666系列,1,ES6宣告變數新語法Day1,jimmy92,https://ithelp.ithome.com.tw/users/20107643/ironman,1513760256000000000,130,"ES6 又稱作 ES2015 ,是 JavaScript 的更新版本，有許多好用的新語法來解決舊版本 JavaScript 的一些奇怪的問題與帶來了許多便利，各家瀏覽器都已經實作 ES6 的新功能到自家產品上，因此已經可以放心的使用在專案上，今後大概會每天講一點自己對 ES6 所知道的部分。
使用 var 宣告變數會將變數加到全域物件 window 下，在多人開發的時候變數可能會互相影響導致其他問題，
let 變數範圍只(存活)作用在{}內，可解決影響全域變數的問題
在 for 迴圈中使用 var 會將變數與全域物件連結，導致在事件的運用上也會出現與自己預期不一樣的事件結果。
在 for 圈使用let宣告變數可以讓變數在{}內的程式碼執行時重新與變數邦定，使得結果如自己的預期。
用const宣告變數 會讓變數變成不能重新被指派，物件與陣列除因為不是原始型別，所以會依據參考指向整個物件，
物件裡的屬性是可以修改的，但不能將此物件重新指派成另一個新的物件，可使用 Object.freeze 方法將物件凍結讓物件不能被修改，但只有第一層屬性有效果。
let 與 const 不會向上提升( hoisting )，在同個區塊上不能重複命名，它們也不會與全域物件 window 連結 變成全域變數互相影響，
屬於函數範圍
會自動Hoisting
作用範圍屬於區塊範圍{}內，且同一區塊內不能重複宣告同一變數
用 var 宣告過的變數，不能再使用 let 宣告一次
變數無法在用 let 宣告前使用
變數是唯獨的(物件與陣列除外)
必須給予預設值
與 let 同屬區塊變數(只作用在區塊範圍內)",,,"['舊版 ES5  使用 var 宣告的變數會有互相影響的問題', 'ES6 宣告變數新語法-1 let', 'let -for 用法', 'ES6 宣告變數新語法-2 const', 'let、const 注意事項與使用時機', 'var let const總結']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192237,自我挑戰組,1,挑戰30天完成PHP聊天室範例系列,1,[Day01]序章-緣起,無言小獅子,https://ithelp.ithome.com.tw/users/20107848/ironman,1513759624000000000,123,"身為一個JAVA WEB的工程師,
在WEB這一塊,
時常耳聞PHP Laravel是優美的程式碼,
進而對PHP產生了興趣,
藉由鐵人賽的開賽,
想要挑戰30天學習基本的PHP語法(還不敢挑戰用Laravel建立),
然後做一個簡單的聊天室範例,
有興趣的朋友們可以一起來切磋學習並指教我(PHP新手)唷！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192262,ModernWeb,1,那些年，我們一起錯過的Javascript系列,1,Day01_還是要廢話一下吧,yawenxuan,https://ithelp.ithome.com.tw/users/20107670/ironman,1513759392000000000,158,"想分享這個主題其實是有點心虛的，畢竟自己對Javascript也是一知半解，怎麼還敢分享出來誤人子弟，但我認為，錯誤中才能改正，能用自己的話語表達才是真正的理解，也多虧Summer & Hunter的鼓勵，所以魯蛇如我決定參加這次的鐵人賽，好好重新跟Javascript來場轟轟烈烈的戀愛，一起跨年不孤單。

或許有人會問怎麼不介紹新的JS Framework等新技術，但真的不是我在浮誇，各位看官您看看上面這張圖↑，各種長江後浪推強浪，工程師死在沙灘上，JS新框架和技術像水滸傳一樣一個一個來投奔JS這隻大腿，新技術怎麼學得完呢?但聰明如您一定發現一個秘密，他馬的這些傢伙全部都依賴著Javascript阿，所以我決定效仿一拳超人，犧牲我的頭髮練出JS一拳，扎穩根基，重新擁抱Javascript。
圖片兼啟發來源
Preface
Javascript Intro
Value & Type & Operator
Object & Array
Functions
Hoisting
Prototype
This!
Closure
Scope)
Project - ColorGam
Review
參加鐵人賽的初衷就是想好好重新認識Javascript的概念，以往錯誤的學習方式(各種google + 腦補別人的程式碼)，造成自己觀念薄弱，藉由鐵人賽好好釐清這些重要的基礎，文章中9成9會有許多惹人發笑的低能錯誤或者疏忽的重要觀念，還望大家留言改正我的錯誤並建議，讓我能從錯誤中學習，謝謝大家。
我們是兩位研究生 +一 位待業米蟲組成的，希望能將3分鐘熱度加溫到30天，因為鐵人賽沒有3分鐘，希望彼此提醒激勵教訓嘴砲，一起見證90年代的名言實證，30天熱度。
成員如下",['前言'],"['為什麼是Javascript?', '30天預訂內容', '建議與指教', '關於30天熱度']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192021,自我挑戰組,1,用IT看世界系列,16,zoom視訊會議,allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1513758256000000000,121,"今天要跟大家分享一個好用的視訊會議軟體
因為部分付費，例如錄影的地方，請大家可以評估是否每場會議都要錄影，在考慮相對應的費用
不然就中小企業，其實free的方案很夠用
載點
操作手冊
登入後長這樣(有點像SK)

電子白板、畫面共享、錄影‧.....大概該有的都有吧...
支援手機APP平板，之前跟同事實際用4G網路去測試一下傳輸品質還算ok以後在位置上就可以開會?
連結來源皆屬原公司擁有",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192341,SoftwareDevelopment,0,Kotlin30天，通過每天一個小demo學習Android開發系列,17,Kotlin開發第17天PullToRequest(SwipeRefreshLayout+CardLayout),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1513757855000000000,123,"
這次研究 RecyclerView 的下拉刷新實作，類似於 iOS 的UIRefreshControl 在 Android 中也有 SwipeRefreshLayout.
通過 GridLayoutManager 實現每一個 row 都顯示兩個  View 的排版。
當下拉 RecyclerView 的時候出現下拉刷新的動畫。
下拉刷新後隨即改變 RecyclerView 中的內容。
在 Android 中實現下拉加載很容易，可以直接在 layout 文件中將想要可以拉動的部分用 SwipeRefreshLayout 標籤包起來：
建立一個下拉刷新的監聽方法
設置一個 refresh 的監聽
類似於 iOS 的 reloadData() 方法，我們通過對 Adapter 修改資料，並且通知他有變動並且可以更新了。

這次不打算使用 LinearLayoutManager 顯示每一個 row 佔滿左右的 View 了，
而是使用 GridLayoutManager 來每一個 row 顯示兩個 View
我們給 layoutManager 設定每個 row 顯示兩個 CardView：
CardView 是 Android 提供的一種卡片樣式，可以直接在 layout 中加入，也有一些基本屬性可以使用。","['PullToRequest', '筆記', '參考']","['Components', 'SwipeRefreshLayout', 'GridLayoutManager & CardView']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192384,DataTechnology,1,你都在公司都在幹啥R？R語言資料分析經驗分享系列,3,【03】當老闆再問：嗯...話說我們已註冊的會員中有多少人有消費過的？,jason9075,https://ithelp.ithome.com.tw/users/20107299/ironman,1513755507000000000,155,"前一天的示範中，已經為大家介紹如何分析每個月的會員註冊人數，老闆在看完會員人數後，好奇地問了一句，這些會員中會購買商品的轉換率是多少？ 所以啦，負責資料分析的你便開始動工，結合訂單資料來查找囉！

看到訂單資料中有個column 是BUYERID 了吧，我們將這個BUYERID 萃取出來。
dplyr套件中 distinct函式是個可以去除重覆並找出唯一值的方法，我們指定BUYERID ，因此我們得到一個存有消費紀錄的會員ID vector。
接著，我們在dplyr中多加一個mutate ，使用%in% 字符，他的會回傳TRUE/FALSE，來決定該值是否存在於其中

最後再用一次group_by() 就可以得到我們要的結果啦! 而group_by的參考值以Month 和HasBought 兩者來區分。

最後再用ggplot 畫出圖表。

由此發現，其實註冊會員後但有購買紀錄其實不多啊...(資料是亂數產生)
ref:
day3原始碼",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192383,ModernWeb,0,前端新手村系列,10,"前端新手村再論ex,em",chris,https://ithelp.ithome.com.tw/users/20107637/ironman,1513753863000000000,183,"「當你迷惘的時候，就回到原點想一想」-中華一番 蘭飛鴻
網頁前端新手村系列文章，宗旨並不在技術本身的教導，重點放在技術與技術之間的脈胳關係。讓零碎的網頁前端技術的關鍵字，成為比較有系統性的視野。
讓一開始接觸網頁前端的新手們，有一個比較友善的系統來架構你的學習，至於技術本身的深入探討，就留給其它的高手們吧。
ex: 定義「x-height 的高度」也就是說它是一種高度單位。
em: 定義「M 字母寬」也就是說，它是一種寬度單位。[1]
那定義都這麼清楚了，要再論什麼呢？
這一篇，會是一篇設計相關的小知識，不過有助於我們了解 ex, em 是否能正確使用。
我們都知道 x-height 定義的是小寫的x，那為什麼不是 o-height 或 a-height
我們來列舉一下類似高度的字母看看
其中有

視覺上，圓形略大感覺和方形一樣大。

所以淘汰有圓形的字母

剩下這四個。
淘汰有三角形尖端會凸出去的字母

比較了各種字型之後，發現一個殘酷的事

最後，殘酷的是 z 不是正方形。
做為一個基準尺寸，就是這麼殘酷。

同理可證，不過，還是寫個程式比一下字母
M 比 X 寬，且接近正方形字母。
(W 不是正方形 QQ)
在這可以知道
IE 的 ex 等同於 0.5em
firefox 的 ex 才真正接近 x-height。[2]
Chrome 和上述兩種瀏覽器長度不同。
[1]: Em (typography)
[2]:  x-height","['再論 ex, em', '參考資料']","['前言', '為什麼是 x', '為什麼是 M', '總結一下']",['網頁設計'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192382,ModernWeb,0,學會Elm寫前端系列,3,瞭解Elm裡的function,poligen,https://ithelp.ithome.com.tw/users/20107797/ironman,1513753038000000000,144,"我不太知道expression 在中文要怎麼翻？叫做表達式好了。在elm或是其他functional programming 的世界裡，沒有什麼物件的概念，你可以想成全部的東西都是表達式。而表達式會被elm判讀成一個數值。
在elm的世界裡，條件式的寫法只有一種，叫 if...then...else 。沒了。 注意沒有 ""truthiness"" 這種事，也沒有像js 裡的 else if。
上述的例子在elm要寫成：
而在javascript 裡condition 可以是""hello world""單一的string 或是數字；而在elm 裡面， if 之後只能是 Bool(也就是true or false)
耶，終來來到functional programming 最重要的function了。我們來寫一個function吧。你可以在elm-repl上試試，
每個expression 都會有 Type ，之後我們再詳談，你輸入一個expression，如果你沒有定義 Type , elm 會幫你推測你的 Type 是什麼。 我們的 isHello 是我們定義的 function 名稱，接著 空一格 的 word 是我們要輸入的值，在 = 之後，就是我們要這個 function 做得事情。整個function，就像是小時候上數學課 f(x) = a x + b ，是不是一樣！
很多時候，function 可以當成一個值被傳入，但你不想要替它在取一個名字，我們只是要用而已。那怎麼辦？
我們用了三個值 w, x, y 讓他們相加。不過因為是沒有命名的，之後要呼叫就不太能叫。但如果你要定義一個functions, 裡頭的值是另外一個function, 這種時候，我們常常就會用anonymous function。
到這裡，你就懂了，function 就是空一格代入值，everything is a kind of function。那 1 + 1 呢？ 怎麼辦？怎麼會這樣？，你答對了。不信你輸入： (+) 1 1 ，答案也一樣對不對？我們常用的 function , 是prefix function, 而這類的 加減乘除，我們叫 infix 也就是說可以放在輸入值的中間，如果要放到前面，就要加個刮號 () ，不信你來看 elm-doc  裡的定義:
(+) : number -> number -> number (-) : number -> number -> number (*) : number -> number -> number","['everything is an expression', 'if conditions', 'Functions']","['define a functions', 'anonymous functions', 'infix vs prefix']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192381,ModernWeb,0,一個JS學習者的日常系列,1,一個JS學習者的日常前導,誰發了個笑臉,https://ithelp.ithome.com.tw/users/20107703/ironman,1513752805000000000,242,"想法：
我想要對自己對於鐵人的發文進行管理，好完成連續 30
天發文的任務。比起建立習慣，先利用流程與工具輔助，
達到穩定關注是否 Po 文，好更專注在思考撰寫文章內容
之上。在 github 上建立一個 IronMan30 的儲存庫
就不用時常去記今天發文了沒有，只要把 github
上的綠色格子填滿就可以了。
再提交之前：
在github網站建立儲存褲，並 clone git 初始設定資料與資料夾
到本地端：
git clone https://github.com/wowdacom/IronMan30.git
從 Git 講起，什麼是 Git?
Git 是一個版本控制系統，幫助我們快速的管理、切換、
不同的檔案。
認識Git，只要要先知道三樣東西，工作目錄、索引、HEAD指標。
當我們建立一個儲存庫開始工作，儲存之後當前目錄多了一個檔案。
我們可以用指令看到有新的檔案新增
git status

於是我們要把它加入索引當中
git add <檔案或資料夾> //加入索引
git rm --cached <檔案或資料夾> //移出索引
最後一個我們將這些東西提交出去，於是現在目錄變成過去
HEAD標籤會標記現在變成過去的這個狀態。之後的改變都會
變成新的項目。
git commit // 提交，將現在變成過去，用HEAD標記起來
git reset --hard HEAD // 回到修改前初始狀態
再提交之後，將本地端的day1資料提交到遠端的github
git push origin master // 本地更新資料到遠端
git pull origin master // 遠端如有更新資料pull下來同步本地資料
最後剩下把綠色拼圖貼上空格。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192379,SoftwareDevelopment,0,LearningDesignPatternin30real-casepractices系列,1,[DesignPattern]Introduction,JB,https://ithelp.ithome.com.tw/users/20103220/ironman,1513751637000000000,138,"設計模式最有趣的地方，在於同一個需求(情境)，可能每個人解決的方式不同。
方式並無絕對好壞，重點在於解決及預防問題。
以下是部分建議的書單，可以參考看看。
GoF是誰？
Gang of Four, ""Design Patterns: Elements of Reusable Object-Oriented Software""的四個作者。
六大原則是指哪些？
GoF設計模式
Creational design patterns
| Abstract Factory | Builder | Factory Method | Prototype | Singleton |
Structural design patterns
| Adapter | Bridge | Composite | Decorator | Facade | Flyweight | Proxy |
Behavioral design patterns
| Chain of responsibility | Command | Interpreter | Iterator | Mediator | Memento | Observer | State | Strategy | Template | Visitor |
每個軟體開發人在從規劃架構到寫一個小函式的風格和方式都或多或少會有不同。
這也是此系列文的初衷，拋磚引玉、和大家一起切磋進步。歡迎提供任何指正/回饋/建議。",,"['學習設計模式的方式', '買(借)本好書', '初步了解設計模式', '參考別人經驗', '實作的語言', '文章編排方式']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192375,SoftwareDevelopment,0,函數式編程:從Elixir&Phoenix入門。系列,1,"Elixir,Phoenix:whatandwhy.",taiansu,https://ithelp.ithome.com.tw/users/20103390/ironman,1513744739000000000,267,"Elixir 是個函數式，動態型別的程式語言。繼承 Erlang 可分散，高容錯的特性，作者 Josè Valim 希望能在保持 Erlang 原先的編程哲學及思考模式的情況下，將更一致的集合操作介面，Ruby 友善易讀的語法，及簡單而強大的元編程（meta-programming）能力帶進 Erlang 生態圈裡。自 2013 釋出 0.1 版以來，獲得許多 Ruby 社群名人的關注，例如 Dave Thomas、Koichi Sasada 等。連 Erlang 作者 Joe Armstrong 都相當欣賞這個語言。
唸作 /ˈfiːnɪks/，一個根基於 Elixir 語言的 web 框架，作者是 Chris McCord 。初衷是想解決 Rails 上 WebSocket 的併行及分散式運算的問題，又能保有 Rails 的高生產力。利用了函數式編程的 function composition 方式設計，因此被譽為 “Rails with less magic”。
之所以想介紹 Elixir 及 Phoenix，是因為 Dave Thomas 說過，想成為一個更好的 programmer，每年都要學一門能改變你思考方式的語言。而 Elixir 是踏入 functional programming 一個很棒的起點。Phoenix 則用相當不同的想法，帶來不亞於 Rails 的開發生產力，以及更棒的效能。
Elixir 的副檔名可以是 ‘.ex’，也可以是 ‘.exs’。若是 ‘.ex’ 時，會先編譯成 ‘.beam’ 再執行，若是 ‘.exs’ 則不產生 ‘.beam’ 檔，編譯後直接在記憶體裡執行。由於在正式環境中是執行編譯完成的 ‘.beam’ 檔，所以大多數的情況下，Elixir 及 Erlang 的執行速度是同一個數量級的。

Erlang 是愛立信自  1987 年起開發的程式語言。在 Erlang 裡，有一整包函式庫、中介軟體及工具的集合, 叫做 OTP。在 Erlang/OTP 中有許多電信產業已經解決，也非常適合網路應用程式的神奇特性，例如：lightweight process、supervisor tree 及 hot code update 。許多 Erlang 的特性與解法，在 Elixir 上都可以直接套用。Elixir 也儘可能遵從 Erlang 的模式及基本哲學，例如 Actor model、”Let it crash” 等等。
由於 Erlang 在電信產業大規模長時間的運作，已經有十分健全穩固的實戰經驗及生態圈。而 Elixir 可以直接或間接利用這些模式、套件及工具，因此有人稱它為「有 30 年實戰經驗的新語言」。
值得一提的是 Erlang 本身並不是以效能著稱。在單執行緒處理大塊資料時，效能其實不是很好。它的優點在平行運算及高容錯。Erlang 曾在 AXD301 ATM 機器上達到二十年 99.9999999% (nine-nines, 九個九)的可用時間。更能在不關機的情況下，直接修正有錯誤的程式碼，而且不影響到正常使用的使用者。可以看看 “Erlang: the move” 這部非常老派的 Erlang 宣傳影片裡的實例示範:

(5:21 起)
Erlang/Elixir 中有個概念叫 light weight process。它並非作業系統中的 system process，而是 VM 中不互相分享記憶體，獨立運作的輕量級行程。在 Erlang/Elixir 系統中使用 process，就如同在 OO language 裡使用 object instance 一樣。process 間用訊息 (message) 相互溝通。這種分散式系統的運作方式，符合了學術上 Actor model 的定義，雖然 Erlang 圈裡大多不會用這個詞指稱自己。
用 2013 年實測 system process 與 light weight process 的差異讓大家有個概念。同一台硬體裡，用 C# 啟動一個 system process 約 300μs，兩個 process 傳遞每個訊息要 50μs。而 spawn 一個 light weight process ，在總數兩千五百個 process 時，每個約 1μs。當總數到達三萬個 process，則每個新的啟動花費 3μs。各個 process 間的每個訊息傳遞約是 0.8μs。這並非效能比較，而是顯示它們是完全不同層級的東西。而正因 Erlang/Elixir 這個極為輕量的分散式模型，使用多核運算的能力，對這個生態系來說，就如同寫在基因裡一般的。
Chris McCord 在 2016 Erlang Factory 演講，說一台 phoenix web server 可以撐住兩百萬 user session。Erlang 作者 Joe Armstrong 這樣回應：
在 Erlang/Elixir 系統裡,
沒有一台 web-server 可以撐住兩百萬個 session 這種事，
我們有的是兩百萬個 web-server，每個各處理一條 session。
再來看看影片吧。XD

(5:18 起)
自從 2014 因緣際會開始學 Elixir/Phoenix 以來，它帶給我非常多的樂趣，並讓我學會從全新的角度，看待寫程式這件事。而跟 Mickey Chen 一起辦了近二十場的 Elixir.tw meetup，也在明年的 Ruby X Elixir Conf 同時邀到 Ruby 的作者 Matz 及 Elixir 的作者 Josè。我想用 30 天的文章介紹這個語言及框架，希望它也能帶給你一些很棒的什麼。
Happy hacking！明天見。",,"['什麼是 Elixir', '什麼是 Phoenix', '一個很棒的起點', 'Elixir 與 BEAM (Erlang VM)', '總是要提一下 Erlang', '平行式模型：Actor model', '效能', '結語']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192154,ModernWeb,0,HappyCSSer報報系列,2,HappyCSSer-01)PokédexinCSSgrid,Rplus,https://ithelp.ithome.com.tw/users/20107823/ironman,1513741382000000000,300,"FB event: https://www.facebook.com/events/1890105347923108/
GitHub repo: https://github.com/Happy-CSSer/Happy-CSSer/tree/master/2016-12-25

第一次聚會是在外頭的咖啡廳
還是 WIFI 狀況挺慘烈的一家咖啡廳
所以特別考驗與會者的離線開發能力 XDDD
不過第一次來的人大多是老手，現場倒是還滿和平的
這週的主題是 Pokemon Go App 的各種 UI，任君挑選、自由挑戰
我自己挑了 pokedex 列表頁
成品如下
Pokédex in CSS grid
http://codepen.io/Rplus/pen/MbddMe?editors=1100
因為之前有針對細節寫過一篇文章了，所以這邊不會描述太多，
對實作細節有興趣的可以移步：
[POST] Introduction for 《Pokédex in CSS grid》
https://github.com/Rplus/rplus.github.io/issues/38
但這邊可以稍微提一下還比較有印象的點：
1] 練習使用 CSS Grid
去年這個時間段，大概挺常看到 Rachel Andrew 到處火力展示 CSS Grid 的妙用。
但是一直都處於只看 MDN 跟文章的階段，沒太多練習機會，趁活動強迫自己練習看看~
在這類格狀排版上，CSS Grid 真的是方便許多許多
可以在成品中看到 mixmax 跟 auto-fill 的搭配就直接把整個排版打完收工了
Grid 新屬性的各種搭配下，可以玩出很多奇妙的效果~
2] 嘗試使用 CSS variables
這邊的 CSS variables 主要是用在 CSS image sprite 的定位，
雖然現在看起來會覺得這定位方式還挺有改進方式的
( 包含 百分比的精度 & CSS Variables 的使用方式 )
不過作為試驗作品，也還算是不錯的挑戰項目啦~ XDD
而 sprite 的百分比定位，倒是在這次才曉得有這樣的公式
100% * $index / #{$grid-count - 1}, source
以前都是慢慢算吶~ 果然是遇到才會去學些奇奇怪怪的東西 XDD
這過程跟以前書本上教的科學方法有點類似
只不過這邊是比較簡略的步驟：提問、搜尋、實驗、學習、紀錄
3] 認識 CSS counter
這玩意其實並不常用
但有些時候，它就特別好用。
只不過你覺得它特別好用時，往往也就不是該用它的時候… ( 我並沒有特別喜歡繞口令，真的…
這邊我是拿來計數，很好玩、很好用，
但 counter 原本就不是拿來計數用的 XD
這邊比較建議的作法是用 JS 處理，因為它應該要是實際的數值，而不是顯示用的指示，雖然會有相同的視覺效果
在寫那篇筆記時，我認為 counter 很吃 DOM 順序，
雖然有部份對，但更精確的說法應該是：你要清楚地瞭解該在哪邊運算以及重置
所以之後有針對這點做了些更新
4] 奇怪的技能
在解決問題的過程中，人往往會需要學些奇奇怪怪、非預期的技能
這次活動裡我就為了合成那張大的 sprite image 而去練習了一些 ImageMagick 的指令
雖然指令要下哪些我現在也忘光了
但對於 ImageMagick 在合圖時可以做到哪些控制條件，我還是有些印象~
相信這樣的印象可以在下次遇到問題時，更快速地搜尋到想要的效果
( 好吧，我承認忘了做筆記…
從上面幾點不難看出來
不是練習就是嚐試，還有試誤，總之就是亂踹~
折騰一段日子後總是能理解，新的技術需要新的習作
而在實例中練習未熟悉的知識，也是我喜歡 Happy CSSer 很大的原因，
這是個很吸引人的實驗(修羅)場~ <3
而活動討論的方式其實也與本文相似，
大致都是較籠統地提及而已，
討論過程中，大家多以「這個你應該懂」的想法進行，
所以有時會有種「這個簡單我也會」的誤區 XDD
想要避免這類情況發生就是一旦覺得怪怪的就該停下來好好想想、趕快提問
第一週就先這樣囉~
本來是還想介紹一下別人寫什麼，
但活動一開始的運作模式還沒有很明確
現在我直接看 source code 也想不太起大家寫了什麼東西 XDDD
只大約記得 rulin 的 CSS grid 比我熟很多 XDD
Neko 細節很講究、也作得飛快，還有空做互動
yutin 直接用 React 做 UI 邏輯 XDDDD
啊拉拉拉拉~ 人老了忘光啦~
明天見",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191943,ModernWeb,0,從零開始的網頁設計系列,6,Day06:新手村的最後一個任務_常用標籤(四)_table,樂樂,https://ithelp.ithome.com.tw/users/20104423/ironman,1513739017000000000,163,"這一天就是常用標籤的最後一天，明天我們要開始分享CSS3的用法
就如同字面的意思他就是表格，在約莫不知道多久以前的網頁貌似都是使用表格在做排版的
那我們就直接來分享用法
table標籤包住整個表格，在標籤裡面的border是我們用來設定表格的線框的
tr 是橫列
td 則是直行

那我們在製作表的時候其實也會很常用到合併的表格，那應該怎麼處理呢？
我們直接來看實際例子
假設我們今天要製作的表格是長這樣
那我們先用上述一般表格來排列
第一列的最後面是不是多了段空白
那我們這時候在合併的欄位這一行的td裡面加上colspan=""2""
那其實這個的意思是代表他會橫跨兩個格子，你也可以解釋成他就是將兩個格子合併再一起

那如果我是想要合併直行呢？
那我們就要使用 rowspan

那這邊再補充說明幾個標籤 caption
他是指我這整個表格的標題
用法
th
是指我這個欄位的標題

有沒有發現利用th包起來的欄位變成職中加粗了，變得比較明顯？
今天的表格是我目前在工作上會比較常用的那明天就讓我們進入最讓我期待的CSS的世界吧！！！！",,['table'],"['一般表格', '結果', '合併欄位', '結果', '實例', '結果', '實例', '結果']","['範例', '結果']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190569,SoftwareDevelopment,0,脫魯實錄之如何30天把到凱特琳(Kotlin)系列,1,“初次見面，你好，我叫Kotlin”,lionlions,https://ithelp.ithome.com.tw/users/20107165/ironman,1513738960000000000,172,"脫魯實錄之如何30天把到凱特琳(Kotlin) - Day1
第一天 帶大家初步認識一下Kotlin
她出生於2011年7月
爸媽是 JetBrains 俄羅斯聖彼得堡分公司的一群工程師們
名字 Kotlin 是取自聖彼得堡附近的一個小島 (就像 Java 一樣也是取自爪哇島)

6年後，她在 Google I/O 2017 正式加入 Android 的大家庭跟大家見面
當 Stephanie 姊姊大聲地講出 KOTLIN 時!!!!!
現場歡聲雷動!!

下面是 JetBrains 的 CEO -> Max Shafirov

要好好感謝僅僅只有30多人的團隊
沒有他們的努力，就沒有今天的 Kotlin 啦
了解完 Kotlin 的身家背景後
我們來看看 Kotlin 有什麼迷人之處
為何 Google 要開放 Kotlin 成為 Android 的其中一門開發語言呢
第一： 擺脫 Oracle 的糾纏。今年年初 Oracle 再次對 Google 起訴，認為 Android 侵權使用 Java ，向 Google 求償 90 億美金，這對 Google 來說不曉得是不是筆大數字，但若能藉此換個語言來擺脫這事件，也是個好結果。(不過此說法也有人推翻，因為 Android 從上到下還是有許多用到 Java 的部分， Kotlin 要完全取代也要好一陣子的時間)
第二： IDE 直接支援。 Android 開發者應該曉得，Android Studio 的開發團隊就是 JetBrains ，因此在Android Studio 3.0 版本出來時，就直接支援 Kotlin 作為開發 Android App 的一種語言，而不必再另外下載 SDK 或是任何套件。
第三： 更簡潔。指的是程式碼可讀性，他變得比較直白易懂，且幫你做掉了一些基本的方法實作，讓你的程式碼可以從幾百行省略至百行以內都有可能喔。但強調一點程式的易讀性還是得靠工程師的編碼習慣和素質了。
第四： 更快速。這裡的快速不是程式跑得更快囉，而是因為 Kotlin 的簡潔，讓工程師開發的速度提升，不過在學習的過程中，不免俗的還是得花點時間適應啦!!
第五： 更安全。 Kotlin 把 Java 的 Run-Time Error 提升到 Compile-Time Error 讓程式在 Compile 的過程中就發現及提醒物件是否發生空指針異常 NullpointException。
今天大略認識了Kotlin了!!
明天，我們可以開始更深入了解Kotlin，甚至可以開始跟他握個手交個朋友囉~~ 嘿嘿~~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192371,SoftwareDevelopment,0,挑戰30天內送審一支ＡＰＰ系列,1,不一定會成為鐵人的鐵人賽Dday,sonnychi,https://ithelp.ithome.com.tw/users/20107698/ironman,1513737278000000000,181,"說到鐵人賽，就要先說到為什麼我會想要學習swift。
從前看著公司的前輩們寫著 C code，覺得他們真的很強，可以把這麼抽象的文字轉換成我們所能在電腦上使用的介面軟體。之前公司中也不太有機會接觸到 coding，每天做著很 ruting的工作，漸漸的也就忘記了自己也增經想要成為一名 programmer這件事了。
離開資訊業後在外面鬼混了幾年，從工廠端的品管到電子零組件的業務，每一份經歷都是重零開始，再回想當初去跑業務時，講話結結巴巴，客戶老闆對我一問三不知的菜鳥時光... 雖然之後逐漸上手，但也發現這樣的工作性質並不是我要的。於是毅然決然地辭了工作，打算重回資訊界的懷抱。
幸運地有這個機會來到好想工作室，和 APP camp 的同學們有著相同的目標一起前進，在營長Hugh 的鼓(ㄊㄨㄟ)勵(ㄎㄥ)下，決定與大家一起參加這次的鐵人賽，一方面有著不一樣的經驗，一方面也督促自己每天都要有進度，期許自己也可以像Don一樣，拼了命的學習，熱血一次，不要留下後悔。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192347,DataTechnology,0,MicrosoftRSolution系列,1,Day01-前言,arksu,https://ithelp.ithome.com.tw/users/20103333/ironman,1513737016000000000,179,"今年鐵人賽會想寫這個主題, 主要是因為討論Microsoft R解決方案的文章, 好像不多, 不過究其原因, 有可能是已經有Open Source的R可用, 為何還需要Microsoft R? 希望透過一系列的文章介紹一下Microsoft R解決方案有何過人之處? 另一方面也藉由此次鐵人賽整理一下這些年利用閒暇時間透過R實作Machine Learning的一些心得與筆記, 給跟我一樣是門外漢, 想跨入Data Scientist 一途的朋友作為入門的參考
在正式介紹Microsoft R解決方案之前, 先來聊聊入Machine Learning坑的動機, 話說當年公司交辦建置OLAP系統的任務, 著實地將MSSQL 2005的SSIS與SSAS跑過一遍, 而當年MSSQL 2005的新賣點就是新增了一些Data Mining的演算法, 而且那時候就有類神經網路(NN)即現在Deep Learning(CNN, RNN)的前身, 還是小嫩嫩的我, 就試著開啟來玩玩看如下:


紅線框起來的部分, 對那時的我根本是無字天書啊, 當時Microsoft還開了一門資料採礦班, 也去報名了, 上了還是一知半解, 不過那時卻亮了一個燈泡:

如果可以從Web丟參數給MSSQL,然後回傳預測結果, 應該是一個很炫的技能, 套一句現在的流行語, 這個叫智能APP, 不過當時專心在ASP.NET上, 這個念頭就被擱置了.
時間來到2013, 當時公司交辦將BI系統移置Sharepoint上時, 也順便把Office 的 SQL Server 資料採礦增益集裝了起來如下

以現在的眼光來, 不管是MSSQL 2005資料採礦或是Office 的 SQL Server 資料採礦增益集, 其實都可以算是機器學習範疇的一部份應用, 直到2014年Microsoft推出了Azure Machine Learning Service, 然後第一個中文視頻是 ” Machine Learning 機器學習實作 - 五分鐘完成商品推薦系統”

https://mva.microsoft.com/zh-tw/training-courses/machine-learning--11247?l=RRgjiKKBB_6504984382
當時想五分鐘就做得出來? 這麼神嗎? 結果就一樣畫葫蘆, 開開心心做的一個版本拿去給老闆看, 老闆只冷冷回一句 ”這個的理論基礎是什?” 結果我當場句點, 老闆接著再補一槍 “如果你無法解釋你做的東西, 我怎麼相信這個東西是有效且可信任的呢?” 再加上實作Azure Machine Learning時, 會看一些統計資訊如下紅框所示,

當下的我也不知道有甚麼用處, 一堆黑人問號?

所以當下就想說, 好好來理解一下機器學習為何物?, Google了一下, 很多人推Coursera上面Andrew Ng大神的課

https://www.coursera.org/learn/machine-learning
上了之後才知道機器學習的模型有Under fitting與 Overfitting的差異, 如下圖所示

當時還興沖沖的跑去問Microsoft的Azure窗口, 怎麼用Azure Machine Learning顯示上述圖形來判斷做出來的模型好壞, 想當然爾, 獲得無聲卡一張, 不過那時的結論是懂機器學習理論與實作的人, 應該是很少, 這條職涯或許是一個新藍海, 可以來入這個坑, 但是以現在略懂的一點皮毛的我來看, 當時真是好傻好天真問了個蠢問題啊!
不過真正推我入坑卻是因為一部美劇, Person of Interest(疑犯追蹤), 追劇人稱POI, 剛好那時同事推薦這部, 看到有一集, 男主角之一的宅總解釋π的時候, 其中一段話深深打動了我:

https://www.guokr.com/article/439682/
π
圓周長與其直徑之比
這是開始
後面一直有 無窮無盡 永不重復
就是說在這串數字中
包含每種可能的組合
你的生日
儲物櫃密碼
你的社會保險號碼
都在其中某處
如果把這些數字轉換為字母
就能得到所有的單詞無數種組合
你嬰兒時發出的第一個音節
你心上人的名字
你一輩子從始至終的故事
我們做過或說過的每件事
宇宙中所有無限的可能
都在這個簡單的圓中
用這些信息做什麼
它有什麼用
取決於你們
雖然數學無法證明這些話是對的, 但是用身為IT宅的一絲浪漫, 我是信了, 遙想當年若以前的數學老師用這樣的方式教數學的話, 我的數學成績應該就不會是倒數了, 在受到宅總啟發之後就努力的把Andrew Ng課上完, 後來Coursera推薦了台大林軒田教授的機器學習課程, 一查才知道林軒田教授是國內機器學習的大師, ptt機器學習界人稱田神, 也跟著學了兩門課, 上完機器學習基石與機器學習技法, 相較於Andrew Ng的課程, 林教授的課程對於機器學習理論的闡述更是札實與完整, 但是相對的門檻更高, 尤其對我這種數學沒打好基礎的人來說, 畢竟直接把大學的課程直接搬到Coursera上, 不像Andrew Ng是將Stanford課程刪減過後放到Coursera,

https://zh-tw.coursera.org/instructor/htlin
不過也了解到了Decision boundary, Regularization, Penalty 等機器學習專有名詞

總和來說, 上完了Andrew Ng與林教授的課之後, 真的是把這一生學到的數學複習了一遍, 從國中一元一次與一元二次方程式, 高中的高斯函數, 機率, 矩陣, 微積分, 大一偏微分與碩一統計學, 現在想想以前台灣的數學教育根本為機器學習設計的嘛! 不過人生也第一次對於底下兩句話有了深刻的體悟
少時不努力 老大徒傷悲
書到用時方恨少

學完了理論, 總想練練手, 看到有人推薦Udemy的Machine Learning A-Z™: Hands-On Python & R In Data Science,

https://www.udemy.com/machinelearning/
而且有Python與R的實作版本, 兩個願望一次滿足, 由於有前面的理論基礎, 上起來得心應手, 很容易有成就感, 而且上到某個演算法, 還會回去看一下Andrew Ng與林教授的影片, 反而覺得數學式不再那麼的陌生, 反倒有些熟悉且更能意會了, 基於個人經驗, 建議這三門課修習順序為:
Andrew Ng的Machine Learning -> Udemy的Machine Learning A-Z™: Hands-On Python & R In Data Science -> 林軒田教授的機器學習課程
若是一開始上林教授的課, 加上像我一樣數學底子又不好, 一看底下這種方程式

應該挫折感超大, 立馬想逃走, 當然若天縱英才不在此限, 另外也不建議一開就衝Udemy的Machine Learning A-Z™: Hands-On Python & R In Data Science, 原因是太容易做出東西, 會讓自己有已經全懂的錯覺, 引用一下何宗武老師臉書上的閒聊如下:

這也是機器學習的初學者最容易踩到的雷, 不可不慎啊!
而在Andrew Ng的最後一堂課亦有提及, 現行已有許多的ML框架可用, 不需要自己辛苦的刻演算法, 但其背後的理論必須要掌握, 舉例來說底下R裡面SVM的說明文件, 若對SVM理論不熟悉, 是無法正確調用紅框內的參數, 所以當初實作SVM時, 還回去翻了林軒田教授解釋Kernel Function的部分, 霎時豁然開朗!

所以接下來的系列文, 會有幾篇透過R Tools for Visual Studio實作Under fitting Overfitting, Regression等範例, 下一篇就先來介紹一下Microsoft R解決方案~
後記:POI沒看過的人又對機器學習有興趣的人, 一定要找來看一下!!!絕對立馬想入坑",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192359,ModernWeb,0,一隻巨大的UI/UX菜鳥系列,1,【Day1】想從平面轉UI/UX的巨大菜鳥起飛之路,GG,https://ithelp.ithome.com.tw/users/20107810/ironman,1513736353000000000,231,"哈囉，大家好：）
小妹是剛踏入社會就進入非常操的公司當平面設計助理，
每天加班到半夜十二點，沒有加班費，薪水21K。
兩個月試用期被各式壓榨到對未來產生絕望之情，
最後憤而離職，希望能從平面轉型成UI/UX設計的社會新鮮肝（鞠躬）
為什麼想轉型成網頁設計師呢？
現代網路發達之下，傳統被科技取代，紙本被網頁代替。
而平面設計也漸漸轉為網頁呈現。
若能有一些平面基礎，要踏入網頁設計相較於無基礎的人，會簡單一些，聽說。
是的，這是小妹聽說的，實際上如何我不知道阿阿阿
若點開文章的你，剛好也想從平面轉型成UI/UX設計
那麼太好了！小妹有伴了！！
在這裡我會每天分享一些，從0開始學習到的、或是覺得實用的UI/UX相關資訊。
可能是小紀錄，也可能是自己的學習筆記。
若是剛好也有正在孤軍奮戰的UI/UX自學勇士，
希望這篇文章能讓你感覺到你不是只有一個人，一起互相學習吧！
期許自己能堅持寫完這30天的學習紀錄 ",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192368,ModernWeb,1,重新認識JavaScript系列,17,重新認識JavaScript:Day17函式裡的「參數」,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1513735957000000000,342,"過去我們花了將近一週的時間介紹了瀏覽器裡的 JavaScript，也知道了 JavaScript 實際上是透過 BOM、DOM API 來與瀏覽器打交道。 相信看過了前面幾天的文章後，你已經對 DOM API 以及網頁事件有了基本的認識。
接著，如同我在系列文前言的預告，在接下來的分享中，要進入到「深入探討 JavaScript 篇」囉！
這系列的重點會著重於 JavaScript 語言的核心概念:「函式、物件、原型鍊」，與各位一同更深入地探討 JavaScript 核心的部份。
在 Day 10 函式 Functions 的基本概念 一文中，我們不斷地強調一個概念「函式是物件的一種」。 那麼，也許你也聽過這種說法：在 JavaScript 裡，「函式是第一級公民」。
「第一級公民」？ 什麼意思？
「第一級公民」指的是你可以將函式存放在變數、物件以及陣列之中，同時，你也可以將函式傳遞到函式，或者由另一個函式來回傳它。 而且，函式具有屬性，因為它實際上是一個「物件」。
換句話說，任何你對其他類型可以做的事，你都可以對「函式」做。
當我們透過 typeof 去檢查某個函式的時候，雖然你會得到 ""function"" 的結果，讓你以為 function 也是 JavaScript 定義的一種型別，但實際上它仍屬於 Object 的一種。
函式是一種物件，值也是物件。 你可以把它想像成是一種可以被呼叫 (be invoked) 的特殊物件 (值)。
之前我們說過，當我們呼叫一個函式的時候，可以透過「函式名稱」加上「小括號」的方式呼叫。 而小括號內的資料，就是「參數」。
像上面這樣，呼叫 plus(1, 2) ，其中的 1, 2 作為參數傳至 plus 這個 function，這時 numA 與 numB 內的值就會分別是 1 與 2。
於是，回傳的內容 numA + numB 自然就會是 1 + 2 的結果了。
然而，即便我們定義函式時有指定「參數的數量」(如上面範例，分別為 numA 與 numB)，但是在呼叫的時候，並不會針對代入的參數數量做檢查。
也就是說，呼叫 plus 你可以寫成：
或是
在 JavaScript 都是合法的，只不過在沒有傳入值作為參數的情況下，那些沒有指定的參數預設會是 undefined。 而多傳入的那些參數，在「大部分」情況下是沒有意義的。
既然我說了「大部分」那就代表還是可以拿得到的。
事實上，當函式被呼叫的時候，會產生一個 arguments 物件。 而這個 arguments 物件的內容，其實就是我們呼叫函式所代入的「參數」。
以剛剛的 plus 作為範例：
很明顯我們代入的參數數量超過了先前定義好的參數數量，那麼多餘的 3, 4, 5 我們有辦法可以取得嗎？
可以，就透過 arguments 這個物件。
請注意， arguments 雖然看起來像個「陣列」，但實際上他只是個帶有「索引」特性的物件，然後內建個 length 屬性，其他地方與「陣列」完全不同，當然也沒有 .map() 或 .filter() 這些陣列才有的方法。 [註1]
所以說，即便在定義函式的時候完全沒有指定參數給它，我們仍然可以在函式內透過 arguments 來取得參數。
除此之外， arguments 物件還有另一個屬性： callee，指的是目前執行的函式。
當我們需要在函式執行「遞迴」 (在函式內自我呼叫) 時，可以執行 arguments.callee() 來達成，這屬性在「匿名函式」時特別有用。 但要小心的是，在「嚴格模式」下不允許存取 arguments.caller 和 arguments.callee 這兩個屬性。
另外， ES6 的箭頭函式 (Arrow Function) 也沒有提供 arguments 物件。
除了我們可以透過 arguments 去取得超出宣告數量的參數外，另外也有一種常見的方式：將多個參數用一個「物件」包裝起來。
假設我們要做一個「將某人加入通訊錄」的功能，那麼就用一個叫 addPerson() 的函式來實作吧！
首先要有「姓名」、「電話」：
看起來很 ok 呢!
這時候 PM 大人來了，要求要可以加入 email 欄位：
但是，這時候問題又來了！
客服表示有使用者 英文不好 眼睛不好，在輸入資料後「Michelle」與「Michael」傻傻分不清楚，要求加入「性別」的欄位：
然後又多了奇奇怪怪的需求，加入「生日」、「地址」等等...
於是最後工程師在呼叫這個 addPerson() 的時候整個大崩潰。
順序不能錯，參數不能漏，一個蘿蔔一個坑。
只要中間少了一個參數，你的通訊錄欄位就整個 gg 了。
那麼這個時候，改用「物件」的方式來取代這一堆參數，就會是很簡便的做法：
像這樣，不僅呼叫函式變得更加簡便，而且由於物件的屬性不要求「順序」，所以就算中間忽略掉幾個非必填的屬性也沒問題，使得程式碼更容易閱讀，也易於維護。 往後就算要新增參數也不用擔心影響到過去的程式。
前面說過，在 JavaScript 中，即使函式的參數數量已經定義過，但實際在呼叫的時候仍然可以不傳參數或者傳入不對等的數量。
傳多了還無所謂，傳少了那些接不到值的參數們就會變成 undefined。
那麼，有個很實用的檢查法，就是透過我們在 Day 08 運算式與運算子 [3]: Boolean 的真假判斷 曾介紹過的 || (OR) 這個運算子來幫助我們處理。
在 plus 這個範例中，要是我們呼叫時，只帶入了一個參數：
那麼 numB 就會變成 undefined，加總後的結果就是 NaN。
為了要避免這種情況發生，我們可以改成這樣：
當然我們知道，會被判斷成 false 的值不只 undefined，或是改用嚴謹一點的寫法：
那麼這時，即便我們呼叫時只給定一個參數 plus(1); 最終得到的結果至少也會是 1 而不是 NaN 了。
另外，在 ES6 之後，我們也可以像這樣替參數指定預設值：
也可以達到一樣的效果。
[註1] : 雖然 arguments 物件並非是陣列類型，但仍然可以透過 slice 或是 ES6 的 Array.from 來將它轉成一個新的陣列。
[註2]：在使用 function 傳遞參數時，要小心 「Pass by sharing」帶來的誤解。
詳情可參閱本系列  重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？  一文
那麼，以上就是針對函式的參數所做的說明。",,"['一級函式 (First class functions)', '函式的參數', 'arguments 物件', '以「物件」作為參數', '參數的預設檢查']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192365,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,17,[PixiJS-Day-17]tint上色與在PixiJS玩顏色,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1513735782000000000,200,"支援 tint 方法的物件，可透過設定 tint:number 的方式將顏色套在物件上
(設定 tint:0xFFFFFF 會移除套色效果)
官方範例 DEMOS - Tinting：

原圖

tint 可以把指定的顏色套到物件上
但不是所有可視物件都支援；PIXI.Container 就沒有 tint 方法
支援：
PIXI.Container：不支援
PIXI.Sprite：支援
PIXI.extras.AnimatedSprite：支援
PIXI.Graphics：支援
PIXI.Text：支援
色彩模型：
除了使用 RGB 指定顏色外，
我常使用 HSL或 HSV 色彩空間使指定顏色
Wiki: HSL和HSV色彩空間

當控制「色相」變化，並維持「明度」「飽和度」不變時
就能做出一樣「鮮豔」、一樣「粉」、一樣「沉」但不同的顏色

當填色完成時，再搭配 Alpha 值變化、填色形狀
就能做出漂亮的顏色
使用 角度 漸層填滿方式，填滿白色
並將末端的透明度設定為 0

使用 角度 漸層填滿方式，填滿色相環
並將末端的透明度設定為 0

使用 角度 漸層填滿方式，填滿色相環
一端調高明度，另一端透明度設定為 0

也許有點難理解，攤成直線
一端調高明度，另一端透明度設定為 0

搭配動態，就會很漂亮

(原圖為網路上一張 Gif，我使用 PixiJS 練習重製出一樣的效果)
隨機顏色：
先隨機選擇色相環上的某個角度，再加上正負隨機幾度
就能選到紅、偏橘的紅、偏紫的紅
但不會選到綠色，因為超過隨機選擇的範圍


這是另一個使用 PixiJS 繪製花朵的效果，每一辦葉子田的顏色不完全相同
使用PIXI.Graphics 的 bezierCurveTo 方法繪製花瓣

做成動態的效果也很不錯",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192259,ModernWeb,1,只要有心，人人都可以做卡米狗系列,1,第一天：認識聊天機器人,etrexkuo,https://ithelp.ithome.com.tw/users/20107309/ironman,1513734930000000000,1225,"聊天機器人就像卡米狗，他可能是一個在通訊軟體上的帳號，或官方帳號，或粉絲團或者其他形式，只要你可以跟他互傳訊息，而他不是真人，那麼他就是聊天機器人。
聊天機器人是未來趨勢嗎？是的。
在智慧型手機還沒出現的時代，大部分的服務都是網站的形式存在，但是在智慧型手機普及之後，大家使用電腦的時間變短了，所以服務開始轉移到手機 App 上。近幾年發現雖然人們經常使用手機，但在手機上最常使用的 App 就是 Facebook、Line、Telegram...等等通訊軟體，已經越來越少人願意安裝新 App。安裝 App 要等下載、吃流量、吃手機空間，對大家來說都是困擾。
如果服務能以聊天機器人的形式存在，那麼大家就不需要安裝新的 App，只要加好友，就能馬上使用。若是聊天機器人在群組中，那麼一個人邀請進入群組，所有人同時可以使用，對服務商來說，這是一個會自動擴散的行銷模式。
除了通訊軟體之外，很多大型服務都有提供私訊或公開訊息的功能。舉例來說，在淘寶、露天拍賣、YAHOO拍賣等等的各大電商，你都可以跟店家私訊。因為一個服務如果不做私訊，很難滿足雙方的溝通需求。也就是說，私訊功能在大型服務上是必要的，而只要有私訊的地方，就有機會可以做聊天機器人。
做聊天機器人可以多一個接觸客戶的管道。如果你的霸氣老闆說過「大家都有做 App ，那我們也要做 App，不管做得好不好，氣勢上不能輸！」那霸氣老闆一定也會說「大家都有做聊天機器人，我們也要做，不管做得好不好，氣勢上不能輸！」。
從理論上來說，聊天機器人可以做到大部分網站和 App 能做到的事情，只是透過不一樣的呈現和互動方式，以下列出一些可能性。
現代的人對於長篇文章的接受度越來越低，以 FB 小編為例，常常有人問一些明明就寫在 FAQ（常見問答）裡面的問題，但你身為小編，你能嗆他為什麼不看 FAQ 嗎？你不能。你會複製 FAQ 裡面的重點，然後採用有禮貌的語氣回答。機器人最有耐心了，所以這種事情就很適合交給聊天機器人。如果存在一個系統，他可以讓你匯入 FAQ ，當有人問到 FAQ 裡有提到的問題時，就幫你自動回應，那不是很好嗎？
你可以想像聊天機器人其實是一個搜尋引擎，他是一個在你輸入關鍵字之後，只會顯示一筆短文的搜尋引擎。當然你要顯示多筆結果也不是不行，只是這樣的使用情境比較不像一個聊天機器人該做的事。
當你加入某個聊天機器人為好友，就代表你同意他傳訊息給你。取得有效的客戶連絡方式是在做行銷時很重要的一環，現在的人不會每秒都在收 email，但是對於 Line 傳來的訊息卻可以秒讀，這就是最有效的聯絡方式。目前常見的服務是鬧鐘、天氣或股票相關的資訊提供型聊天機器人。
現代的人很寂寞，也時常感到無聊，對他們來說，找樂子是一件很重要的事情。我有看過一個聊天機器人，他是酒店小姐，當你加他好友之後，他就會一直傳訊息給你，要約你去酒店消費，即使你不做任何回應，他也有辦法一直講。他有一個寫好的劇本，每天就照劇本跟你聊天培養感情，如果哪天你回應了，就會有真人跟你傳訊息約你出來。
像卡米狗這種聊天機器人，除了平時在群組講講幹話，同時也會講笑話、唱歌、占卜算命等等的聊天機器人也是受歡迎的一種類型。
在古代有一種遊戲叫做 MUD，他是在圖形化人機介面還沒成熟時的遊戲。遊戲會用文字描述玩家現在的處境，然後給玩家一些選項，而玩家可以用打字的方式選擇，比方說「在你面前出現了一個很大的湖，請問要把斧頭丟進湖裡嗎？(yes/no)」此時透過輸入「yes」或「no」來影響遊戲走向。
facebook 的聊天機器人支援顯示內嵌網頁在對話框，也就是說你可以在 facebook messenger 上面作一個開心農場。跟原版開心農場不一樣的地方是，原版開心農場在有人偷你菜的時候會給你一個 facebook 通知，但是在 facebook messenger 上的開心農場可以直接私訊你「熊孩子又來偷你菜了，要偷回去嗎？(yes/no)」這時候你可以透過私訊的方式去操作這個遊戲，而不用真正開啟這個遊戲畫面，對於上班族來說不用開啟遊戲就能玩遊戲是一件多麼棒的事情。
聊天機器人可以透過私訊傳遞機密情報，而在群組傳遞公開情報。舉例來說，你可以做一個聊天機器人，讓他在群組建立遊戲和讓其他玩家加入遊戲，而在私訊進行遊戲。一個邏輯正確的聊天機器人應該要透過私訊告訴你目前的手牌是什麼，而不是在群組。
傳說中的 RO 外掛可以做到脫機外掛，也就是不執行主程式，只開一個黑黑的畫面(終端機)，然後透過純文字的方式告訴你目前發生了什麼事。比方說「你攻擊了波利，造成了5點傷害。」，把這樣的訊息從終端機改成用聊天機器人發送訊息的形式也是可能的。像那個功德無量放生系統，我就覺得很適合做成聊天機器人。
雖然還沒有看到任何一家賣雞排的或賣手搖飲料的店做，但我覺得應該很快就會有結合 POS 機的聊天機器人，只要在 Line 上面傳訊息說「兩片雞排要辣」就自動把訂單打出來給店家的聊天機器人。
Line 上的聊天機器人可以傳送 Template 和 Carousel 這些類型的訊息，他看起來是像這樣的：

這很適合作為商品選單，或者說他其實是設計出來專門讓你賣東西用的功能。關於在 Line 上要怎麼付款這件事，有一個保證可行的方案是你跟聊天機器人對話的過程中建立訂單，然後再開啟一個結帳網頁。雖然現在 Line 有些事情還不能做，但既然他是趨勢，就表示通訊平台未來會設計出更多樣式的訊息和功能提供給大家使用，最值得期待的我會認為是 Line Pay 的整合。哦對了，聽說 Facebook 上的聊天機器人是有做完整金流的，所以如果做在 Facebook 上就不用另外開網頁囉。
像是 Siri 這類型的聊天機器人，他可以同時提供許多種上述服務，那他就會被稱為智能助理。
沒有這回事，卡米狗就是一個完全沒有用到這些技術的聊天機器人。
目前的聊天機器人從訊息的解讀方式來看的話，可以分為三大類：使用規則、使用按鈕、和使用語意分析。
卡米狗是使用規則來解讀訊息的聊天機器人，舉例來說「卡米狗學；你好嗎；我很好」這並不是一個正常人類會自然講出來的話，而是一種指令。對卡米狗來說，只要你打錯字，不符合規則，他就不會理你了。因為打錯字就無法使用，會讓大家造成很大的挫折感，所以卡米狗也有使用按鈕。
當你說「卡米狗」時，他會用純文字描述目前狀態，然後給出一個包含兩個按鈕的選單，接下來所有的操作你只需要點擊按鈕，因為沒有輸入文字的階段了，所以就不會有打錯字的問題。而一個好的語意分析能夠讓你在打錯字或者用不同的說法，都能猜到你要的是什麼。


目前語意分析做得最好的方法是使用深度學習技術加上大量良好的資料輸入。當然如果你有深度學習技術和相關的資料，你可以做得更好。但在成本考量下，做一個簡單的聊天機器人其實也可以做得不錯。
是的，廣義的聊天機器人是可以在透過任何文字交流的平台上發布或回應訊息。差別只在於 PTT 並沒有做 API (應用程式介面) 方便我們去串接，所以我們只能透過類似外掛程式的方式去控制網頁發布或回應訊息。","['什麼是聊天機器人(chatbot)', '聊天機器人是未來趨勢嗎？', '聊天機器人能做什麼？', '聽說做聊天機器人需要會人工智慧、機器學習等這些很潮的技術才做得起來？', '有可能在 PTT 上面做一個聊天機器人嗎？']",,"['網路客服', '搜尋引擎', '訂閱訊息', '角色模擬', '陪聊天', '純文字遊戲', '網頁遊戲', '線上桌遊', '放置 PLAY 型線上遊戲', '訂餐、訂位', '賣東西', '智能助理']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192366,Security,0,網路安全概述系列,1,網路安全介紹與預期內容,evanslify,https://ithelp.ithome.com.tw/users/20107704/ironman,1513734482000000000,198,"所謂的 ""網際網路"" 是指將許多網路以某種方式連結起來的集合體。因此，每個人和每個組織，都能在不受到邊境（某些狀況除外）或地理限制的狀況下，存取這個網路上的任何一點。
當然，有了便捷，通常都會有風險。這些風險，包括像是寶貴資訊有可能會受到竄改、偷竊或者是誤用。
""網路安全"" 的定義是很廣泛的，因此不太好定義。依據英文版維基，是這麼定義的：
以某些政策或是方法來監控與避免某一網路或其中的服務受到未經授權的存取、誤用、服務阻斷或者是修改。
這次的文章，若有講到程式的部分，通常會以 Python 3 來解說。由於這篇是 ""概述""，所以會針對比較常見到的問題，或是偏向應用的方面去做介紹。
目前預期會介紹的部分是：
由於鐵人賽是每天發文的，因此，這個列表不代表全部只會講到這些。如果有某些有興趣的題目，也請各位留個言。
另外，最後若還有時間的話，會講一個偏向惡搞的題目：實體層攻擊。","['Prolouge', '預期會講到的內容']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192364,DevOps,0,30天入門Ansible及Jenkins[2018]系列,9,[Day09]撰寫第一個AnsibleRole,tsoliangwu0130,https://ithelp.ithome.com.tw/users/20103346/ironman,1513733358000000000,188,"在了解 playbook 的基本架構與運行方式後，我會在接下來的章節內介紹如何使用 Ansible 搭建起 Jenkins 的運行環境。透過實際的例子，相信讀者會對操作 Ansible 將會更加熟練與靈活。
安裝 Jenkins 有許多方法，根據作業環境的不同也有可能會有安裝上的差異。這次我會介紹如何在 managed node 上安裝 Docker 這個容器技術工具，並將我們的 Jenkins 部署在容器之下運行。
使用容器技術來部署產品有相當多好處，一來是容器通常非常輕量級，啟動一個容器所需的資源都遠比運行一整個虛擬機例如 Vagrant 來的少許多，因此使用容器來分享開發環境及部署產品是業界中越來越常見的手法。除此之外，由於容器之間的資源是互相隔離的，這樣也同時可以避免應用程式之間常見的資源互相污染的狀況發生。礙於篇幅限制，Docker 容器的教學就不在這裡多加著墨，關於更進一步的介紹有興趣的讀者可以自行在網路上搜尋。
要使用 Docker 運行 Jenkins 我們需要建立一個 Docker 的映像檔 (image)，我們當然大可以從頭自己撰寫一個 Dockerfile 來建立容器環境，但所幸 Jenkins 也在 Docker Hub 上釋出了官方的 Jenkins image，所以對使用者來說，所有繁瑣的安裝細節都已經被 Docker 包辦，我們剩下要做的就只剩：
我們在前面的章節內學習了如何撰寫 Ansible playbook，並將我們的工作清單以 task 的方式在 playbook 中表列下來。然而，如果 Ansible 只能做到這樣的程度，充其量我們只能說這是一個比較方便閱讀的 Shell script 罷了。若是今天我們清單中的任務有上百個，這樣我們的 playbook 也可能會變得非常冗長，就算語法再如何易讀，整體而言 playbook 還是會變得十分難以理解。另外，很多時候其實我們會希望有部分的部署內容是可以被其他不同的 playbook 重新使用。舉例來說，很多服務都可以直接使用 pip 這個套件管理來進行安裝，我們並不會希望在每一個不同的 playbook 中都要重新定義一次 pip 的安裝方法。因此，為了解決上述的問題，Ansible 提供了我們在撰寫自動化腳本時一個角色 (role) 的概念。我們可以透過撰寫屬於自己的 role 來讓所有 playbook 重複使用，藉此提升透過 Ansible 自動化的靈活度。
考量到在安裝 Docker 的過程中會需要用到 pip 這項工具，同時，這個工具很可能會在未來頻繁地被其他的 playbook 重複使用，因此，我們在這裡就來介紹如何透過 Ansible 來安裝 pip ，並將其寫成一個可以重複被利用的 role ，而非僅僅只是 playbook 中的一個 task。
在 Ubuntu 系統下，一般來說我們可以利用以下這段簡單的指令來安裝 pip：
作為我們的第一個 Ansible role，讓我們嘗試將這段指令翻譯成 Ansible 的腳本。首先，在工作資料夾下依照以下結構新增檔案 (新增 roles/pip/main.yml)：
在這個結構下， pip 就是我們的第一個 role 的名稱，而這個 role 的工作流程就會被我們定義在下面的 tasks/main.yml 之中。現在打開 pip/tasks/main.yml 並在其中寫入以下內容：
我們在這個 role 的內容中呼叫了 Ansible 內建模組 apt，並利用它來安裝 python-pip 這個套件。其中 update_cache: yes 等效於在安裝前執行 apt-get update 這個指令。接著，打開我們的 playbook.yml，並修改為以下內容：
我們刪除了之前用來測試的 ping 劇碼 (play)，並在這個 playbook 中告訴 Ansible 我們想要執行 pip 這個我們剛定義好的 role。其中要特別注意的是，become 代表我們要升高當前使用者權限 （等效於 Unix / Linux 中的 sudo 指令）來運行當前工作。
在這裡我們使用了 Ansible 最常見的方式來調用我們剛剛寫好的 role。如果有一連串的 role 要被執行，可以將其定義在 roles 這個 list 之下，比如：
這樣一來，Ansible 就會依序執行每一個 role。最後，重新運行我們的 playbook，並得到以下結果：
雖然 playbook 被正確運行了，可是很顯然地，我們用來安裝 pip 的 role 並沒有被其呼叫成功。",['撰寫第一個 Ansible Role'],,,"['使用 Docker 運行 Jenkins', '什麼是 Ansible Role？', '我的第一個 role']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192215,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,16,3-5.監控工具之三:Elastic+Wazuh,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1513732982000000000,199,"Elastic beat有Filebeat,Packetbeat,Winlogbeat,Auditbeat是可以收集log做稽核用，但預設樣板功能不強，做SIEM少了處理data這塊，Wazuh可以配合做這方面的解析。
官方手冊:https://documentation.wazuh.com/current/getting-started/index.html
single-node架構如下

不想裝或想先嘗試的可以直接用ovf
https://documentation.wazuh.com/current/installation-guide/virtual-machine.html
安裝wazuh
設定wazuh repo
Install wazuh-manager
Install nod.js
Install wazuh-api
Install wazuh-agent
設定api帳密，帳號自己填
安裝Elastic
ELK照之前的即可，要設定templates
https://documentation.wazuh.com/current/installation-guide/installing-elastic-stack/elastic_server_rpm.html#elastic-server-rpm
1.Elasticsearch 安裝 templates
2.Logstash templates
啟動logstash
3.kibana裝plugin(目前是支援6.1版，要舊版到github找https://github.com/wazuh/wazuh-kibana-app#installation)
網頁設定
連至kibana網頁選wazuh，api要做連結，帳號密碼輸入之前wazuh api設定的，port設定55000
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192361,Security,0,資安分析師的轉職升等之路系列,1,Day1前言:想轉職成為資安小尖兵嗎?,frankyzyao,https://ithelp.ithome.com.tw/users/20084806/ironman,1513731718000000000,243,"很多人問我:當初怎麼投入資訊安全的領域？成為資安小尖兵後要做什麼？是不是整天要嘗試打自己公司的網路看會不會爆？還是像電影演的那樣，每天盯著黑螢幕敲敲打打，推著眼鏡喝咖啡，成為守護網路的黑暗騎士？雖然每間公司情況不同，每個人的經歷也不一樣，希能這次鐵人賽藉由分享自己的經驗和資安方面的學習，讓新加入資安領域的朋友少走些冤旺路，一起提升等級(Level Up!)。
初入職場從Helpdesk 基礎開始，每天幫電話另一端解決各項疑難雜症，忙得不亦樂乎/苦中作樂。幾年後覺得不能這麼下去，得要慢慢學習，提升自己的等級，不能一直在新手村瞎忙，為自己安排MCSA和 Mac的證照課程，想當個技術能力強大，windows + Max + Linux 各系統一把罩的超級IT ；接觸到虛擬化技術後驚為天人，還特地去上課學VCP，那時候是vSphere 5.0，也買了很多書研究hyper-v，想在這ㄧ塊技術上好好努力。持續學習一段時間後，毅然決定在職進修重返校園，下班後進研究所讀碩士學位。當年研究所並沒有資安的科系，只是在Information System碩士學位下有專修Information Security的分支，純粹是因為不想走database的分支所以選了專修Information Security，學校的資源非常不錯，憑教授的人脈請到幾位資安界有名的專家來課堂上演講，還帶我們到NYPD校外教學，見識紐約市警察局的數位鑑識實驗室，雖然大開眼界，卻沒有想過要投身資訊安全的領域。
畢業前一年，幾位高級主管找我進辦公室，進行ㄧ番長談，說明目前正籌備在MIS部門裡成立資安小組，直接由CISO(Chief Information Security Officer)領導，向CTO(Chief Technology Officer)報告，需要一名成員(類似資安助理)加入團隊，將來也許會從外面聘請Security Analyst或Security Engineer等資安工程師，如果我願意加入，可以現在慢慢開始由CISO帶著學習，等能力經驗足夠，完成碩士學位，便可以升職為資安助理或助理資安工程師。
如果是你，此時願意轉職嗎？
我之前的專業證照和資訊安全沒有關係，很多東西要重新學習。如果同意，白天一般的MIS工作照常要忙，同時還要開始幫忙屬於資安的工作(例如log analysis)，晚上更有研究所的課程，而且加入後到碩士畢業前的這段時間，由於職位沒變，薪水不會因此調漲，這樣的情況，你願意轉換跑道嗎？
「少許的勇氣才是真正的魔法
少年少女們懷抱夢想吧
那一步將改變世界」涅吉•史普林菲爾德《魔法老師》
下一篇將說明正式成為資安分析師的經過。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191922,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,15,英文自然語言處理基礎,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1513731276000000000,211,"所謂自然語言處理，就是希望可以讓電腦讀懂人類的文字。不過，這篇文章只會處理已經存成文字檔的文字，暫時不會提到手寫文字辨識、語音辨識、翻譯等功能。而單單處存成文字檔的文字，你或許很難理解，讓電腦讀懂有什麼用處，大約有以下可能的發展方向。
如果大家有注意到，這篇文章講的是英文的自然語言處理。之所以要分開來說是因為中英文的自然語言處理技術，在基礎上面困難點有很大的不同。英文自然語言處理技術上，比較難的是stemming，也就是把started變成start或是把eats變成eat，不過目前套件表現就已經滿不錯了。中文的主要難點在tokenize(斷詞)，由於中文詞彙變化多端，也不像英文直接用空白鑑分隔，所以斷詞上必須透過一些演算法去處理，套件的使用上開源社群比較常使用jieba，聽說中研院有做一套出來，但是幾次聽了相關領域的老師或是講者的反饋，大多
這個動詞的意思就是，把一個句子拆成一個個的單字。以下示範nltk中的兩種tokenize的方式。

stemming和lemmatize是一個把所有不同時態或是不同變化相同的字變成同一個字。而stemming比較像是去掉ed或是s這種添加在字後面的小字母，lemmatize則是字根化，就是把字還原到字根的型態。以下讓我們來看一下示範。
不過在前處理上，我們除了會使用tokenize配上stemming或是lemmatize之外，還會把英文字轉乘小寫，看句子的長度決定要不要把停用字跟標點符號拿掉。","['概述', '接下來的文章', '接下來可能會用到的套件', 'Import', 'tokenize(斷詞)', 'stemming and lemmatize', '前處理']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191805,自我挑戰組,0,經濟學角度思考敏捷系列,5,Day5一個sprint拿多少story,eviler,https://ithelp.ithome.com.tw/users/20107403/ironman,1513730984000000000,190,"今天我們來探討一下如何決定一個 Sprint 要拿多少 Story

通常會有下面兩種方式進行
根據之前每一個 Sprint 所完成的 story point 來當參考依據,來決定這一個 Sprint 要拿多少 Story.
在 Velocity based 裡,雖然每次參考的就是之前所完成的 Story point, 但是他總是有高有低,可能有下面幾種情況
總之高高低低有很多不同的原因,理論上我們都希望他能維持一定水準甚至是會越來越好,因為可能大家的技能提升,默契變好,做久了越做越順手等,但實際上總是有很多不同的原因導致高低起伏,而我們也不會每個 Sprint 都去記錄這些細節的部分.所以我個人認為 Velocity 真的只是純參考.
另外團隊也有可能覺得我們之前就拿這樣,所以這次也拿這樣,當做到 Story 快結束時,就會自動的調整做事的速度,以符合自己的預期(人會有實現自我預言的本能)
一次拿一個 Story, 拿完後 Team 決定是否還有能力繼續拿下一個 Story, 如果有就繼續拿,如果覺得吃不下做不完了就停止,這個 Sprint 就拿這些 Story.
在Commitment based裡,雖然是讓團隊自己決定是否還能吃的下,但是吃的下的依據又是什麼?大部分的團隊都是憑感覺,雖然這種感覺很準(實現自我預言的本能)
這裡我們來想像一下,如果有兩各團隊,一個採用 Velocity based 一個採用 Commitment based, 一兩年後可能會發生的情況會是什麼.
Velocity based,因為每次的 Velocity 總是高高低低,久而久之團隊會覺得這是正常的,所以會越來越不重視Velocity,認為他不準,每次決定要拿多少 Story point時就會跟上次一樣,如果做不完就會說我們沒有估準(雖然說估算的目的不在準確),做的完就會說你看這次準了吧!
Commitment based,因為每次都是我(團隊)說了算,也沒有依據,最後可能演變成看心情,這星期跟女朋友吵架,所以少拿一點,年底了要發獎金了,要認真一點,所以就多拿一些.
當然目前想的都是一些成熟度比較低的團隊所會發生的例子,雖然兩種方式都有他的缺點,但在一個剛開始的 SCRUM團隊,還是要挑一個來當基本,然後在慢慢的透過不斷的持續改進找到比較適合自己的方法.
在這裡我個人是偏向是先根據上一個 Sprint 做多少,這個 Sprint 就拿差不多的 Story point , 然後",,"['Velocity based', 'Commitment based', 'Velocity vs Commitment']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192356,Security,0,從接電話解任務開始到進入資安領域邊邊系列,5,接電話解任務(5/30):常見的通訊Port與強制關閉指令,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513730491000000000,203,"===常見的通訊Port與通訊協定===
21 : FTP (File Transfer Protocol) 檔傳輸協定服務
23 : Telnet  遠端登錄服務
22 : SSH ( Secure Shell ) 服務
25 : SMTP ( Simple Mail Transfer Protocol ) 簡單郵件傳輸協議，大多數郵件伺服器都用著個協定
53 : DNS ( Domain Name Server ) 功能變數名稱伺服器，網址名稱解析
80 : HTTP ( HyperText Transport Protocol ) 超文本傳輸協定，用於WWW ( World Wide Web) 服務上傳輸資訊的協定。
109 : POP2 ( Post Office Protocol Version 2 ) 接收郵件
110 : POP3 ( Post Office Protocol Version 3 ) 接收郵件
113：Windows的Authentication Service驗證服務
119：NNTP ( Network News Transfer Protocol ) 網路新聞組傳輸協定
135：RPC ( Remote Procedure Call )遠端程序呼叫
137：NetBIOS名稱服務 ( NetBIOS Name Service )
139：NetBIOS Session Service，Windows檔、印表機、Samba
143：IMAP ( Internet Message Access Protocol v2 )
161：SNMP ( Simple Network Management Protocol )
443：Https
554：RTSP ( Real Time Streaming Protocol ) 即時流協議
3306 : MySQL 資料庫服務
3389 : 遠端桌面
8080：跟80Port用途一樣，需要另外開。
===windows===
查看網路port
netstat

參數
-a  顯示所有連接和偵聽連接阜。伺服器連接通常不顯示。
-n  以數位格式顯示位址和連接阜號（而不是嘗試搜尋名稱）。

查看正在listening的port
netstat -an | find ""LISTENING""

用指令強關使用中的port
使用指令netstat -o找出對應的PID，再用taskkill關閉。

===Linux===
netstat
找出要關閉的Port process

找出對應的PID process關閉

<<<更換主題原文重發>>>
原文https://ithelp.ithome.com.tw/articles/10190964",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192344,ModernWeb,0,30天學習SpringMVC系列,1,前言-開始準備作業,jim0612,https://ithelp.ithome.com.tw/users/20107812/ironman,1513730288000000000,212,"這次主要呢是想要來挑戰自己,激發自己在30天內在對自己所學的Spring MVC做個介紹
今年原本試著要開使用Spring MVC開發RESTful Web Service時中間遇到了不少問題,
也試著去買了書局與看了線上教學,這三十天主要呢是要來分享一下自己學習的心得
技術方面可能還有不足的地方,請多包涵
目前的工作主要是維護與用Spring+Struts2的架構去開發維護網站,在一年內碰到了Spring與Struts2的不少問題後
發現了Spring MVC架構也是個不錯的選擇,想入門的話推薦穩定版的Spring 4.3
那首先我們要準備哪些東西呢?
當然就是缺少不瞭的IDE(Integrated Development Environment) ,在現代的環境,想開發個環境有個好的武器是非常重要的,在這邊呢有兩個不錯的選擇供大家參考
這兩個IDE,只要到了官網,選擇你對應的作業系統與位元即可下載
接下來我將會使用Spring Tool Suite官方的工具做介紹
再來我們還需要準備哪些軟體?
要使用Java開發,免不瞭要下載JDK ,目前Java 9已經release
到Oracle官網時,盡量還是選使用Java 8為主,我是以Java 8版本開發為主
最後接下來我將會分享使用Spring boot來建構我們的配置,利用spring boot內有一系列的starter ,可以讓我們快速的建構專案,Spring boot提供了習慣性的配置,讓我們不需手動去做傳統的xml等配置,可以加速開發我們的項目
希望能介紹到可以讓大家看完也可以搭建自己的Spring MVC網站或者Web Service
內容會以概念為主，程式碼部份並不會太深入到用很深入的技巧,目的也是要讓對於Java程式語言不熟悉的人
也可以好入門","['前言', '目標', '三十天規劃']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192355,DataTechnology,0,Python自習手札系列,5,Python自習手札(5/30):嘿～拍森，幫我蒐集哆啦a夢相關資訊,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513730254000000000,184,"傳說中，人類的肩膀上住了一隻小天使和一隻小惡魔，小天使代表的是正向光明勤奮，小惡魔代表的是負面黑暗懶惰，每當人類在決擇時，往往會受到小天使與小惡魔左右......
小惡魔:嘿～拍森，幫我蒐集哆啦a夢相關資訊(抱
小天使:有沒有著麼懶啊= =
小惡魔:科技始終來自人性啊...(笑
所以...然後...小惡魔贏了(小天使完敗QQ)...就著樣挖坑給自已跳下去惹...
大數據時代已經開始一段時間了，有沒有發現在FB或其它社群路過的時侯，出現的廣告越來越接近自已想灑錢的種類了呢?!
以往使用工人蒐集資訊匯整的工作，都在搜尋、復製關鍵字、貼到小本本上面，重覆、重覆再重覆的，直到工人爬完網路上大部份的文，累積足夠的資料量再予以分析，篩選出自已需要的。
網路爬蟲，實現自動化抓取網頁內容。
舉例來說，就是叫拍森幫我到網路上爬文，順便幫我建一份哆啦欣賞/必買清單，像著樣幫助心情愉悅的事情可以叫拍森做。
正經一點的事情，比方說弄一份網路新聞懶人包著樣，也可以叫拍森做。
但...小時侯老師都有教的，做人要有禮貌。
對於已經暗示加明示不歡迎爬爬的地方，好孩子要自覺一點退下就是了。
原想盡量的使用Linux原生的環境不裝其它的東東，但有些必要的套件(Selenium)還是需要安裝的...
後續需要實際跑跑、找時間實作的東東:
(1)  linux套件:Selenium、BeautifulSoup
(2)  瀏覽器:chromium
(3)  編碼:UTF-8
<<<更換主題原文重發>>>
原文https://ithelp.ithome.com.tw/articles/10191313",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192324,SoftwareDevelopment,0,一天介紹1個，開源購物車系統OPENCART的擴充插件系列,1,第1天-先來介紹全世界的開源購物車系統,suffixbig,https://ithelp.ithome.com.tw/users/20107860/ironman,1513730148000000000,191,"Woocommerce (wordpress的一個插件)
OpenCart
Prestashop
Magento
Virture Mart (joomla的一個插件)
shopify
X-Cart 以下太小的就不用講了
目前 Opencart 的最新版本是 3.0.2.0 已經隔了2年他到有沒有變好用!我可以告訴各位，天底有個真理，你要期待免錢東西會好用那你可能就要失望了。
如果你不想花太多時間學習的話，市面上一年要付10萬元以上的開店平台，會讓你認為比較好用。
而 Opencart 這套東西， 它的行銷策略 就是原版開源免費下載和使用，插件市場，隨便1個插件要20美金~200美金，說穿 原版只是 試用體驗版，他真正賺錢是靠插件市場， wordpress 也是一樣策略，說開源的東西，最後都會演變成，插件市場在賺錢，然後裝了插件超越原版。
所以如果沒有人跟你介紹Opencart插件的話這套東西就跟屎一樣，你用SHOPLINE 開店123 還有91APP 心情會愉快很多。
OpenCart擁有13000多個模塊和主題，鐵人30天，我就1天介紹1個模組 我大約初步規劃以下主題
繁體中文語系模組
專業且符合品牌風格的版型-去哪買
金物流模組-可以多比特幣交易
滿額免運費模組
一頁式結帳模組
簡化操作模組
資料庫電話欄位加密模組-防詐騙集團偷資料絕招
連動式鄉鎮市區
增加部落格功能
改成多供應商系統-把Opencart變成YAHOO拍賣
2017-12-20補充:IT邦應該寫一些有技術含量的東西，只是介紹插件，不用會寫程式的人也辦的到!好吧
前3天我 先來寫些只有工程師看得懂的東西","['全世界一共有6大開源購物車系統', '原版是故意做的很難用', '所以如果沒有人跟你介紹Opencart插件的話']",,"['在介紹OpenCart之前，當然我要先收搜尋一下有沒有任何關於 OpenCart 的相關文章，結果只找到一篇，2016年說OpenCart不好用的，', '『很久之前幫朋友中譯安裝的 Opencart 1.5.6.1，朋友說不好用』，']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192207,SoftwareDevelopment,0,Linux從零開始系列,2,Linux從零開始(2/30):安裝Linux,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513730056000000000,179,"Linux的版本繁多，選一個自已想用的、常用的就是了QQ
考量到自已小菜菜一隻，後續需要爬文的時機大大的有，個人選擇了大多數人使用的CentOS當做自習的環境。
===相關的發行版本網站===
Red Hat	http://www.redhat.com
Fedora Core	http://fedoraproject.org
CentOS	http://www.centos.org
Debian GNU（branch/stable/testing 和 unstable）	http://www.debian.org
Ubuntu	http://www.ubuntu.com
FreeBSD	http://www.freebsd.org
===安裝Linux===
圖形介面(GUI mode)：所見即所得的操作效果，友善的環境，使用起來跟Windows的作業系統相仿。
文字介面(CLI mode)：顧名思意就是使用文字操作的環境了，耗用的效能最小，善用各種指令就可以發揮強大的功用。
===安裝Linux===
安裝CentOS

按Enter鍵開始安裝過程

開始安裝過程(跑跑跑...)

選擇語言: 可愛的繁體中文

軟體：軟體選擇(預設：最小型安裝CLI mode)

軟體選擇調整為: 含有GUI的伺服器

系統：安裝目的地(預設：已選擇自動配置磁碟分割)

瀏覽後按完成離開
系統：網路與主機名稱(預設為未連線)

乙太網路：開啟(預設：關閉)

設定

一般＞勾選”當這個網路可用時自動連線”＞儲存

設置後按完成離開

開始安裝

設定ROOT密碼

輸入密碼，按完成離開。

設定使用者

使用者如果需要管理權限，可順便勾選”讓這位使用者成為管理員”。

輸入帳號與密碼，按完成離開。

安裝中(跑跑跑...)

同意許可協議
CentOS linux 7（Core）的初始設置
1）[！]許可證信息（許可證不被接受）
請從['1'進入許可信息spoke | 'q'退出| 'c'繼續| 'r'刷新]：1
許可證信息
1)閱讀許可協議
2)我接受許可協議。
請從上面選擇['q'退出| 'c'繼續| 'r'刷新]：
詢問
你確定要退出配置過程嗎？
如果你這樣做，你可能會得到一個不可用的系統。 除非許可協議被接受，否則係統將被重新啟動。
請回答“是”或“否”：
重開機後就安裝完成囉

登入後的操作畫面跟windows雷同
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192349,ModernWeb,2,前端初心者的30%經驗值系列,1,1%走進前端,sunny,https://ithelp.ithome.com.tw/users/20107672/ironman,1513729978000000000,212,"系列文名稱是前端初心者的30%經驗值，每天的一小步都是累積，即使在一天1%完成鐵人賽後得到30%，提醒自己還有很多需要學習(70%)，升等後還有更多等級在等你，網頁前端的綜合知識非常多樣，用不斷升等的概念期許要持續學習～
高職大學都是念設計相關，不知不覺畢業後才開始想未來工作的發展性，某天在家散步經過弟弟(資工系)的電腦旁，看到他在研究JavaScript的光箱效果，就擠過去湊熱鬧，又看到寫程式的編輯器有各種漂亮的顏色就被吸引了。於是各種騷擾弟弟，知道網頁可以呈現各種絢麗的樣子(美貌)，拜託他告訴我相關訊息後知道有網頁前端這樣的工作。
剛開始學習從youtobe上搜尋打「網頁前端」就有網頁前端工程入門或是六角學院的介紹等等很多很多很多，可以從這些認識網頁前端。開始學習後約一個月左右後另外也在這裡買了課程看，教學的錄像檔好處試聽一次不懂可以一直叫老師重講(暫停再播一次)不會像實體上課一樣漏掉一拍後面就會跟不上聽不懂。
英文是幼兒程度，在全是英文的程式碼裡要反覆查詢跟理解它的意思，看一次不會就要多看很多很多很多很多很多次。另外也要記得單字的發音，因為在請教別人的時候，別人在解釋時你會聽不懂，但是眼睛讀的時候明明就知道這個單字跟意思，眼睛和耳朵不同步會疑惑我們在講同一件事嗎，很不利於討論啊，就像 ikea我都念ikea，costco我都念costco，我們是講同一家嗎(離題)！？翻譯後的第二手第三手資料的優點是幫助英文苦手初步的學習，明白英文會容易取的第一手資訊，而且許多加速開發效率的工具官網文件也都是英文，英文要加油了～
另外是用詞的想像，例如：HTML是建構網頁的標準標記語言，透過瀏覽器渲染成圖像化的網頁。......恩？渲染？(黑人問號)一開始學習真的很糾結這種問題，因為在當學生的時候接觸到的渲染要麼這樣(手繪水彩顏料和顏料的重疊漸層暈染)或那樣(學習3D建模時建構完素胚後上材質表現)。學習到現在可以自己腦補成，用文字(HTML,顏料)經過瀏覽器(工具,水彩筆)畫出網頁(圖像化)，程式碼也是各種顏色也可以想像成顏料啊(硬掰)，以上是想像的畫面。
這是說明網頁渲染的圖解
正式學習約莫兩個月(還沒三個月可以說嗎XD)，想來沒什麼東西可以寫30篇文章，但是在朋友的撈叨(挖坑)下也想凡走過留點痕跡，於是開始沒有梗也要寫好寫滿30天的鐵人賽。",,,"['學前端的契機', '困難的兩點是英文很不好＋有些用詞難想像']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191700,ModernWeb,1,30天走訪ProgressiveWebApps(PWAs)系列,3,Day3-專案環境建設(含專案檔),DK.Harry,https://ithelp.ithome.com.tw/users/20103808/ironman,1513729823000000000,157,"本來打算文章安排上，先將概念全部看過一次之後，在開始寫程式，但我想程式還是編寫邊看邊學，來的更容易理解。
因此，今天就來建置一個基本的網頁後(已先為各位建置好)，只需要將下面的專案下載下來，並了解如何啟用後，就可以快速地進入學習的重點，接下去的文章內容，我將會以這個專案，一個個地將PWA的特色加進去。
此專案為我建置的基本網頁的模板。
https://drive.google.com/file/d/1UxD9FZeGrMhuN41X0v6Zy5gaYC78bnGA/view?usp=sharing

我撰寫的程式編輯環境，不一定要使用VS Code，只要能撰寫網頁的編輯器都可以。

非PWAs必要，在專案中我們可以直接點兩項index.html開啟網頁沒錯，但是URL的路徑會是檔案在電腦的路徑，如下段所示。
file:///C:/Users/DK/Desktop/30day-pwas-practice/public/index.html
由於PWA是吃Http協定的，所以為了模擬執行上的環境，我們需要裝http-server，這個套件能讓我們在建置的時候，模擬網站的環境，讓我們更容易學習PWA的特色。
https://www.npmjs.com/package/http-server

用在基本的RWD頁面，讓我們不要模糊學習的焦點，專心在PWA上吧! 
在專案目錄下的Command line，輸入npm install，會根據專案底下的package.json，建置需要的套件。


如上圖，devDependencies，即為模擬環境用到http-server套件。
在package.json中，設定start來啟用http-server之後，在command line輸入npm start。

接著會產出幾個連結，將網址複製貼到chrome，就能模擬執行local的專案了，如下圖。

俗說工欲善其事，必先利其器，現在東西都準備好了，就讓我們繼續看下去。",['專案環境介紹'],"['專案下載', '網站目錄', '本專案所用到的環境', '設定環境', '總結']","['1. Visaul Studio Code', '2. Node.js', '3. MATERIAL DESIGN LITE', 'npm install', 'npm start']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192312,SoftwareDevelopment,0,在Mac上開發.NetCore系列,2,Day-2事前準備,900pro,https://ithelp.ithome.com.tw/users/20103426/ironman,1513729623000000000,174,"由於這次的題目是 在Mac上開發.Net Core
所以首先我們得先確定有做好下列幾項的準備
1.你得先有個Mac
2.記得要買AppleCare(很重要)
3.要有網路(誤)
以上除了第一點以外，其餘皆為玩笑話....
輕鬆一下，不要那麼緊張....
首先我們得先在Mac上安裝Visual Studio fro Mac
以下是系統需求圖請先詳閱，避免日後跟不上進度....

接著我們可以在網路上搜尋visual studio for mac
或是心臟很大顆的點擊在下提供的連結 visual studio for mac
再來請選擇一個你喜歡的版本下載吧....

在這邊筆者安裝的是Enterprise
其實他們差異不大，就跟一般安裝在WINDOWS環境的差異類似
如果是免費版的用戶請選擇Community
由於安裝過程非常簡單...
這邊就不解說嚕....
.Net對於使用者是非常友善的!!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192345,ModernWeb,3,前端工程師養成手冊系列,17,教你開發出不會被後端吐槽的前端版型,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1513728956000000000,364,"當 UI 提供給你設計稿，你轉換為前端介面後，下一個步驟就是轉給後端工程師開發成動態應用程式，有些剛涉入前端工作沒多久的新人在不瞭解後端邏輯時，在溝通上容易有障礙，分享幾個觀念給各位，讓你減少被吐槽的機會。
我將會以下圖的產品列表當做案例解說：

以右側產品列表為例，很多人都會設計這樣的結構，每個 li 都有客製的 class 與對應的 CSS，請不要這樣，因為你根本不清楚右側產品列表會有幾項產品，假使會有 20 項以上你的網頁不就掛掉了？所以你必須在 CSS 選擇器上在 .product li來指定樣式，同時確保在內容變多時也能自適應從上到下排列才是。
你可能會想說，我跟企劃討論過，這裡一頁只會出現 20 個產品，那我寫客製化 20 個 class 不也可以解決問題？但這樣你會搞死後端啊，後端在從資料庫撈資料時，還必須針對你這個 class 名稱去客製化，每新增一個產品就要數字加一，無形之間也增加後端的 loading，如果不想讓後端討厭你，會跑迴圈的資料請盡量讓裡面的 class 保持固定名稱。
以右側產品列表的其中一個產品，如果你寫成這樣，後端一定會討厭你，或是默默將你列入黑名單。
縮排不正確，看不出來誰是第一層誰是第二層，然後 class 推敲不出來前後關係性，HTML 標籤完全看不出語意，然後亂下 div，不管任何元素全部都用 div 搞定，以前的我就是這樣排版給後端被念到臭頭，較好的方式是下面這樣。
自己比較看看，如果是你，會希望拿到哪份前端程式碼呢，答案應該呼之欲出了吧。
請去瞭解一個樣版語言(template language)，當後端拿到你的前端程式碼時，也會拆解版型，將共用的版型獨立成一個檔案，例如叫做 layout.php，其它頁面都會載入到 layout.php，舉例來說，你做了 30個網頁，如果表頭要新增一個文字，只要改那隻 layout.php 就好，不需要改 30頁。
如果你不懂後端，至少要自己用 gulp 學一個樣版語言，這樣當後端問你哪些範圍要設計成 Layout，你才知道該如何回應他。叫常見的樣版語言有 pug、slim、Haml。
以 API 為例好了，有時候後端在組 JSON 時，可能因為一些限制，導致較難從資料庫整出你想要的結構，這時就必須討論彼此都好做的方式。
但還是會有些東西是前後端都必須做的，就是「資料驗證」，例如填寫 Email 格式，當前端就已經寫錯，就必須用 JS 回饋他寫錯必須重寫。有些人都以為前端寫完，後端就不用寫了，這是錯誤的。因為使用者的瀏覽器五花八門，它就是有辦法繞過你的 JS 去傳送，或是用像是 Postman、curl 方式去傳資料到後端就能繞過前端，不可不防。
有些時候一定會遇到些問題是前端比較好處理，後端比較難做的時候，亦或相反，這時就相互溝通，彼此協助提昇工作效率。
有很多朋友聽完我以上的建議，還是覺得他們跟後端的問題相當多，我個人建議你就試著學一個後端語言吧，這真的才是一勞永逸的方法。希望用 JS 寫後端可以選 Node.js，或是 PHP + MySQL、RUBY、.NET + MSSQL。
要你投入不是要你成為後端工程師，你是為了以後能夠跟每位後端合作都能溝通順暢才投資的。現在學習資源相當豐富，如果看書看文章都覺得不夠，現在中文線上課程也很多，每天看個三十分鐘，不到一個月練習就能瞭解大概的輪廓，最起碼瞭解到後端語言如何與資料庫介接，並顯示到網頁上就相當足夠了。",,"['設計版型時要考量當內容變多時，也能自適應延伸', '語意要寫清楚，不要全部都寫 div', '瞭解樣版語言', '前後端合作細節', '投入一個後端語言']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192346,ModernWeb,0,30天快速上手Meteor-使用UniversalJavaScriptFramework開發即時聊天大平台系列,1,Day00：前言,谷哥,https://ithelp.ithome.com.tw/users/20104727/ironman,1513728943000000000,189,"Node 的出現以及 ECMAScript 對 JS 的規範，帶動 Universal JavaScript Framework 的發展， Meteor 就是其中之一，目前在 github 上擁有 38.9k 顆星，Meteor 不只是 Framework，更是一個功能完整的開發平台，包含 build tools、跨用戶端的 reactivity 功能整合，透過單一語言 JS 即可開發運行於 server、browser、行動裝置等環境的應用程式。
前半段將 Meteor 的架構以自身在實務開發上較常會接觸到的部分去切分成幾個不同的重點，帶各位快速上手：
Blaze 與 模板
Meteor 的 methods
Meteor 與 Mongo
資料訂閱 與 資料出版(?)
Reactivity
會員系統
URL routing
React 整合
跨平台
多語言
後半段則會帶各位實作出類似 WooTalk 的跨裝置即時聊天平台。
小弟目前除了使用 Meteor 來開發網站之外，也同時用來開發 iOS 和 Android app，公司新進的工程師也都延續使用這套框架來開發。今年有幸擔任 iThome 舉辦的 modern web 講師，和參與者分享 Meteor 的開發技術與心得，不過短短的 40 分鐘能講的內容有限，希望在接下來 30 天可以分享更多細節的部分。
參加鐵人挑戰賽，除了磨練自己的文筆之外，也算是整理這一年多來工作上所學到的技術與經驗，來和大家分享，若內容有錯誤或是有任何疑問，還請大家多多包涵，不吝指教<(_ _)>","['Meteor 簡介', '前半段快速上手 => 後半段實作開發', '開始！']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192342,ModernWeb,0,JavaScript基礎二三事系列,17,Day17　傳值byvalue與傳址byreference,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1513728837000000000,193,"今天來看傳值與傳址
call by value傳值與call by reference傳址指的是電腦記憶體中的東西，與程式的參照傳遞互動的模式。
call by value
當我們創造變數並給值時，變數會指向值在電腦記憶體中的位置，若我們以這個值為參照，指定另一個變數指向這個值時，電腦會在記憶體中新增(複製)一個新值，讓後來的這個變數指向新的值。
在JavaScript裡，布林值、字串、數值、null、undefined都是call by value。
來看看以下程式碼
現在變數a是30，變數b是100。

挺合理的，a和b指向的值在電腦記憶體裡不一樣，當a修改時，b並不會被影響，這種特性就是call by value。
call by reference
當我們創造變數並給值(物件)時，變數會指向物件在電腦記憶體中的位置，若我們以這個物件為參照，指定另一個變數指向這物件，這個變數就會指向電腦記憶體中同樣的物件，不會有新的物件在記憶體中被創造出來。
在JavaScript裡，物件、陣列、函式都是call by reference。
來看看以下程式碼
如果用上面a、b的例子(call by value)來看c、d，那麼：
console.log(c)應該是顯示出{ hello : '你好' }
console.log(d)應該是顯示出{ hello : '安安' }
畢竟d和c指向的記憶體物件應該不一樣，彼此會互不影響，來看看結果

疑?兩個都一樣?
當我們給變數一個物件，其實賦予變數指向這個物件在電腦記憶體的位址，而d = c，變數d也指向同一個物件，同一個該物件在記憶體的位址。
當c.hello = '你好'時，c指向的物件，hello屬性變成'你好'，因為d指向的物件和c是同一個，d自然也是{ hello : '你好' }囉。
承接程式碼，若用函式傳參數(物件)，結果也是一樣的
上面說過，物件是by reference，c、d都是指向記憶體中的同一個物件，結果自然是：

兩個都一樣
另一個例子：

疑？按照上面的說明，此時e和f應該都是{ hello : '哎呀' }才對啊？
這是因為，雖然他們的值字面上看一樣，但在電腦記憶體位置中，這兩個物件在記憶體中是獨立分開的，=運算子會建立一個新的命名空間，而且用到了物件實體語法來創造物件，是故e和f指向各自指向不同的記憶體位置，彼此自然不影響囉。
這邊再給大家看看call by value和call by reference的差別
call by value

都是100

只有byValue1的值受到了影響，這代表byValue1、byValue2、byValue3、byValue4指向的數值都是電腦記憶體中獨立分開的值，所以彼此互不影響。
call by reference

現在電腦記憶體中的{ByReference:100}其實只有一個，只是同時4個變數指向它。

變數obj1、obj2、obj3、obj4都指向同一記憶體內的物件，所以透過變數obj3去修改物件，全部指向它的變數都受影響。
　
最後，來加碼分享面試時有被考到的題目，當時已經知道by value與by reference的概念，但還是被陷阱坑到。
求a.x和b.x，console分別顯示出來的內容
　
　
　
　
解析
可以分三部分來看
第一部分
因為by reference的關係，a、b此時都指向憶體中的同一個{ n : 1 }
第二部分
=運算子是右相依性，所以這行乍看是先從右邊看到左邊....嗎？
別忘記決定運算子順序的是優先性與相依性，可以參考MDN的運算子優先性表格
.運算子的優先性高於=運算子
所以先看最左邊的a.x，但因為a物件{ n : 1 }並沒有x屬性的存在，
於是就創造x這個屬性，a.x值是undefined。
a、b此時共同指向的物件變成{ n : 1 , x : undefined }
然後才因為=運算子，由右看到左。
a改指向記憶體中的新物件{n:2}，因為by reference的關係，此時b仍指向記憶體中的物件
{ n : 1 , x : undefined }。
將a現在指向的物件{ n : 2 }賦予給a.x，這邊的a.x其實是先前與b一同指向的
{ n : 1 , x : undefined }的x屬性，也就是undefined，
此時{ n : 1 , x : undefined }這個物件變成{ n : 1 , x : { n : 2 } }。
現在的狀況
a指向{ n : 2 }
b指向{ n : 1 , x : { n : 2 } }
第三部分
瀏覽器console，看看結果：

　
　
　
小結
JS同時具有call by value和call by reference的特性，這種傳遞特性稱作call by sharing。理解這種特性是很重要的，畢竟面試會考它是物件導向語言啊，瞭解JS物件、函式的call by reference，可以幫助我們避掉一些開發上的bug。
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分4-36",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192060,AI&MachineLearning,0,MicrosoftBotFramework30天上手+自幹LineBuilder串接+LineBotDemo系列,2,OhTypeScript,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1513728626000000000,167,"因故重新撰寫發文
開發Botframework 可以選c# 或node.js
而node.js是用JavaScript語法。
故可以使用type script ,
但主要是講botframework,
故 Type script 的部份，
讓我一章帶過吧。
https://code.visualstudio.com/docs/languages/typescript
https://www.gitbook.com/book/zhongsp/typescript-handbook/details
TypeScript具有类型系统，且是JavaScript的超集。 它可以编译成普通的JavaScript代码。 TypeScript支持任意浏览器，任意环境，任意系统并且是开源的。
閉人在從 andorid 轉到開發 node.js應用時，
最大的困擾就是，
js無法再開發階段就可以偵錯。
例如
let a = i=>i+1;
我想要的得到的是 數字 相加的結果。
可是當我誤輸入 a(""a"")，也是會回傳 ""a1""，也是不會報錯，
這可是天與地一般的差距啊。
用 typescript
let a =(i:int)=>i+1
若我輸入 a(""a"") 就會先報紅，
而不用等到最後輸出結果時，
才會發現這不是我要的，
這是其中一個最基本的好處。
*註 botframework 本身就是使用 type script 做開發。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192232,SoftwareDevelopment,0,提神？看程式比喝咖啡更有效。系列,2,99乘法表到底可以怎麼玩?[1]\t排版,martinsit011138,https://ithelp.ithome.com.tw/users/20107818/ironman,1513728548000000000,180,"我記得老師說過，科技的研究大概往2個方向，不是最複雜化，就是最精簡化。
大家第一個學會的程式就是 hello world，而其次應該就是九九乘法表了
但大家有沒有想過九九乘法表，到底可以被我們搞得多複雜呢？
執行結果如下圖

======================分格======================
這應該是入門必學的程式了，但用這個去交作業，通常都會被老師打槍，要你去排版
這個時間就應該加一點\n (換行)、\t(TAB)
所以又產生了以下程式
執行結果如下圖

======================分格======================
每完整輸出一句，均下一行。
這樣可不行，太長，所以要每9個才執行下一行
一般新人很直接的想：加一個if的判斷碼，判斷每9個，才下一行。
但其實我們可以在第二個loop結束後，執行下一行的動作。
第二個loop執行結束時，便回到第一個loop作判斷，合乎條件再執行一次第二個loop
結果如下

======================分格======================
問題又出現了，下一句的輸出結果黏著上一句的輸出結果
這個時候\t(TAB) 用途要出現了
結果如下

======================分格======================
噢不...句與句之間是有分格開，但怎麼變那麼醜?
老師說過：程式不會有錯，有錯的一定是人
我們仔細看一下，乘1的時候，排版都沒有偏差
但從乘2開始，程式所使用的\t，出現長短不一的距離
而且長TAB出現的位置都是前面是雙位數的結果；而短TAB出現的位置前面則是單位數的結果
首先，我會懷疑是不是\t前面輸出字元的長度，會影響\t所產生長短不一的間隔?
所以我把空白(Space)先刪去
結果如下

======================分格======================
根據結果與理論，初步相信我的結論是對的
所以，我們來證明一下理論
結果如下

======================分格======================
在結果中，我們可以得知：當前一輸出字元長度超過7時，\t(TAB)會突然變超長
那我們知道\t前的輸出會影響\t(TAB)的長度，那\t後的輸出也會同樣影響到嗎？
結果如下

======================分格======================
結論：
根據輸出結果，我們看到\t的長度，只受前一輸出字元的長度而影響
\t是以每8個作一個區分，因為要留一空白作區隔，因此最高為7個字元
當超過7個字元時，電腦會自動幫你區分至下一個區段，因此會出現「突然變超長的情況」
解決辦法：
盡量統一輸出長度，方便\t排版
輸出長度盡可能為7+Nx8  (N為區隔數量)
為什麼是乘8，而不是乘7？
因為除了第一區隔不需要計算空白外，接下來的區隔，均要計算上一區隔所沒有佔用的空白。
======================分格======================
心得：
可能大家覺得只是\t排版遇到問題而且，修改一下，程式有美觀就可以了。
其實我當初寫九九乘法表，也是為了交作業，因此出現「結果出來就好了」的概念。
如果被老師問到「你根據什麼理論而寫這一行程式？」通常學生啞口無言，因為也不知道為什麼會出現這個結果。
因此希望從很簡單的程式入手，再參入一些研究方法，把大家常常忽略的東西，提出再加以驗證。
最後，其實我有點怕沒有主題可以寫，所以目前是分享撰寫程式的考慮及分析(當然，跟業界的工程師無法相比)，同時也為踏入研究所提早準備，一定要堅持30天。希望大家能給我鼓勵及評論(好壞也可以)
(其實我也沒有想到做九九乘法表，最後會思考\t排版問題...)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192286,ModernWeb,1,用30天深入Angular5的世界系列,1,[新手教程-1]建立一個Angular5的專案,ClaireChang,https://ithelp.ithome.com.tw/users/20107113/ironman,1513728367000000000,215,"這系列的文章為我在官網學習Angular 5時所紀錄下來的學習筆記。 原文的原始教程都可在Angular的Docs看到。 這三十天的筆記大綱預計分為新手教程、功能介紹、技術支援三個部份：
確認電腦已有安裝NodeJS(6.9.x以上版本)以及NPM(3.x.x以上版本) 
然後安裝Angular CLI
打開src/app/app.component.ts，改為
打開src/app/app.component.html，將內容改為
  
",,,"['建立Angular', '創建專案', '開啟專案', '編輯第一個自己的頁面', 'src資料夾內的檔案架構', '根目錄資料夾檔案列表']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192209,自我挑戰組,0,TDD-紅燈，綠燈，重構，30天TDD之路有你有我系列,3,Day3.來談一點點的測試,sqz777,https://ithelp.ithome.com.tw/users/20107209/ironman,1513728367000000000,177,"這一篇將會談一點點地測試和為什麼需要自動化測試。
測試在開發過程中是不可或缺的一環，軟體上的測試方法分了兩種
或許你可能沒有做過「真正的測試」，但是你肯定寫過類似這種東西

甚至是…

你發現了嗎?我們其實都已經做過了測試，但這些方式都十分的沒效率，但又時常出現在我們的開發過程中，並且反覆的出現，甚至很常需要重複的build程式碼→啟動→輸入→驗證，無限的輪迴，並驗證我們自己所打的Code到底是否為我們預期，這樣子的過程，就可以稱之為測試。
害我想到…

在沒有自動化的情況之下，我們每一次進行軟體的測試都必須要Build、啟動、輸入(執行)、驗證，每一個步驟都是重複的。
我們人類最不喜歡做的就是重複的動作，但也時常因為精神上的狀況，而產生「就算我們做的是重複的動作，但我們也很有可能會發生錯誤」的問題，不過電腦就跟我們人類不一樣，電腦擅長做重複且乏味的事情。
自動化測試的基礎就是建構於我們讓電腦幫我們做測試這件事情，我們只要告訴電腦，我要做哪些事情，我要讓他做10遍、100遍甚至是1000遍都可以做出同樣的結果，只要我們給電腦的指令是正確的，那電腦就會忠實的反饋給我們它執行的結果。",['自動化測試的存在是為了有效率的我們認為重複性高且簡單的測試案例。'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191832,DevOps,0,Puppeteer系列,2,Puppeteer基本設定,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513728363000000000,176,"介紹
Puppeteer 起手式，簡單幾行Code就完成網頁拍照效果，入手就是這樣的容易
程式碼解析
安裝完 node i puppeteer 之後直接使用就可以了 ，未來都會看到以下起手式基本的就是要
起一個 使用 puppeteer.launch 這個開一個 chromium 瀏覽器，這個chromium瀏覽器也可以像 Phantomjs 使用背景模式(HeadLess)，這個下一章節設定檔的部分再來說明
有注意到了  Puppteer 都是要用 es6 async await 包起來這個地方要注意，跟其他套E2E使用 chainable 的地方不太一樣，要稍微注意一下，接下來就是在瀏覽器開 tab 語法，
就是這個  const page = await browser.newPage();
開起瀏覽器後要開分頁，接下來就看這個分頁要到哪個網址
await page.goto('https://example.com'); 真的都很語意話 ， 接下來就說要拍照了
await page.screenshot({path: 'example.png'});
完完全全無痛上手，最後如果要觀察結果就不要 close這邊是有把他關起來
await browser.close();
總結
用 Puppteer 寫做爬蟲E2E是一件很幸福的事情，語法簡單文件齊全 下一篇來介紹launch的設定檔",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191177,ModernWeb,0,菜鳥前端奮鬥史(欸?系列,1,Day1.「菜鳥為什麼想分享」──媽，我報名鐵人賽了,阿陰,https://ithelp.ithome.com.tw/users/20107640/ironman,1513728358000000000,199,"各位看官大家好，台嘎後，歡迎來到菜鳥的日記分享 (欸?
我是曾經想天真快樂的當個網頁切版師（喔呵呵只要跟愉快的 HTML、CSS、jQuery 打交道？）
現在正在跟 JavaScript 還債的求職中菜鳥。
簡單扼要地說明一下這次想寫些什麼！
這邊不會記錄什麼太艱深的技術（因為我也不會）
不會講到工作上的心法（因為我也還在求職 Orz）
也不會講到什麼優化效能之類brabra等我從來沒碰過的東西
（看到大神用一行寫出我滿滿一頁才寫完的功能我也是五體投地覺得超神呀）
其實我現在也還是持續在產出各種髒碼，變數汙染到有時候自己都看不懂的那種

在這系列文中，我會分享到一些自己覺得實用的資料
一些自己做的筆記、記錄一些自己走過的冤枉路
也會帶一些自己手邊正在做的 side projects？　（先打個問號避免坑開太大填不完呀　
一、同樣是菜鳥的求道者
你是否曾經被奇怪的 bug 困擾呢？ 也許我剛好有遇過唷，看看不吃虧啦 (來嘛來嘛
二、想看菜鳥有多菜的人
學長姐好，如果文章有錯誤，還請您留言指正 （鞠躬
三、剛好想入坑前端的菜菜鳥
噢，歡迎你加入這個奇妙的領域，一起扣丁人生吧！
能看到這篇文章的你/妳，如果喜歡的話，可以給點鼓勵讓我堅持寫完這系列吧 （畢竟我相信自己的惰性還是很強大的 (喂
小聲說一下，其實我從來沒習慣用 Markdown 寫這麼長的文章呀，也許可以把鐵人賽當成在鍛鍊寫 Markdown ？(欸",,"['這系列文會分享一些什麼呢？', '這系列文適合什麼樣的人觀看呢？']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192189,ModernWeb,0,Next.js+各種套件組合系列,17,Next.js+SSRCache,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513728278000000000,162,"介紹
Next.js SSR部分如果要更快，可以參考這次要介紹的作法，主角是 'lru-cache'
先設定一個 LRUCache,max 一定要記得設定沒有設定是無限大很容易ＧＧ,maxAge 快取時間基本上建議這兩個要設定
更多參數可以參考 https://www.npmjs.com/package/lru-cache
在原本route 的 res.send 的部分，就寫一個 renderAndCache的 method來代理
代理部分也很容易理解，先把網址設定為CacheKey
總結
在SSR部分可以使用，cache套件來幫忙加快速度，這次介紹的是'lru-cache'，使用上只要在server加上 key 與 網頁 到cache中， 並且使用 getCacheKey 來 match 是不是已經有 cache過了
Next.js 官方範例可以參考
https://github.com/zeit/next.js/tree/canary/examples/ssr-caching",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192338,Security,0,為了明日的重開機系列,2,為了明日的重開機-1(最重要的工作.v2),sunallen,https://ithelp.ithome.com.tw/users/20006132/ironman,1513728232000000000,248,"我們的歲月 在每次敲打鍵盤後 被自己遺忘
我們的青春 在每次滑鼠滑過後 像流星 消失在遠方
機房裡的冷風 伴隨我們成長
卻不知有誰
願意牽著我們 在未來的路上
我想那樣的生活 便能稱為天堂
「那個小四啊，我說，你要準備的乖乖，準備好了沒? 千萬不要忘了，我們的重大使命啊!」
這人怎麼這樣，一定要在我剛把褲子脫了，準備坐到馬桶上時，跟我講這些嗎?
「小四，你回個聲啊，我知道門裡面是你，到底乖乖準備好了沒? 你是說個話啊!」
『太子哥，你到底是那根筋不對，我在廁所，準備出恭，你一定要在這個時間，跟我說乖乖嗎?』
「 IT人，你不要講文言文好不好? 我聽不懂啦，總之，你記得綠色的乖乖，OK? 30箱啊，不要忘了啊...怎麼? 你昨天是吃了臭豆腐是不是? 真沒禮貌，我回辦公室了。」
這位太子哥總算離開了，不過，他怎麼知道我昨天吃了臭豆腐? 他那鼻子是屬狗的?
準備離開廁所時，我有個習慣，就是走到最後一間，放工具的雜物間，對雜物間訴說我的苦悶...我知道門後沒有神父，更沒有都市傳說裡的花子，但還是要訴說一下，為什麼呢? 因為不就是廁所般的苦悶嗎? 所以留在廁所就好了，不需要帶到辦公室裡，『裡面有沒有人啊，我知道沒有人，就當我自言自語吧，乖乖30箱，要綠色的，我上那去買30箱啊? 』
話說回來，我到現在這公司，也快三個月了，到現在都還是覺得很奇怪，為什麼男生廁所，要設置在整層樓的最角落? 這到底是為什麼? 難道長官們不知道，人生，很多時候，不是差那最後一哩，是只差一步。
現在的工作，用白話文解釋，就是...很難解釋，像是什麼IDC(Internet Data Center)，NOC(Network Operation Center)，之類的。總之就是一堆不是C語言的C，也不是C#的C，更不是維它命C的C...簡單來說，我的工作就是監控很多資訊設備，俗稱『資訊安全』，在我們公司則稱為ICBM，不是洲際導彈的那個ICBM( Intercontinental ballistic missile )，是「Internet Content Believe Monitoring」當然，就像現在我們說的『洗衣服』一樣，誰洗衣服呢? 大部份的家庭，應該都是洗衣機洗吧。
所以，到底是『誰』監控很多資訊設備呢? 當然不是人啦，真正在『監控』的，可能是硬體式的設備，就是有個Box的設備，或是軟體式的監控，就是安裝一般主機作業系統裡的設備。那我的工作到底是什麼呢?
我的工作，就是，看電腦螢幕、看報表、看記錄檔，等等等。然後，再根據這些呈現出來的內容，去判斷，是否有異常之類的...簡言之，我就是要像電視名嘴一樣，看到一個影子，就要用很科學很專業的精神跟態度，向長官報告，這個影子是怎麼來，為什麼會有這個影子，要怎麼樣才不會有這個影子，這個影子會對系統造成什麼影響...之類的。
上述都是廢話，最重要的工作，就是幫他們叫飲料外送和買午餐。
(待)
IDC (Internet Data Center)網際網路數據中心。
原文的意思是，擁有Internet服務的電信公司，使用它們現有可連接到Internet的資源優勢，開發「主機代管」或「主機空間租用」等業務。過去常用的行話IDC指的就是「機房」，不管它是不是符合IDC的原意，IDC(機房).
NOC(Network Operation Center)網路維運中心 或 網路維運監控中心
假設，在某個IDC裡有三百台實體的機器，200個VM，50台防火牆、200台L3 Switch，那麼，可能會有一個地方，是隨時監測這些設備的「狀態」。狀態指的是，像Current CPU使用量、虛擬記憶體量、某單張網卡的流量、總頻寬、防火牆或網路設備的In & Out等等。這些「地方」，都可稱為NOC。
例：TWAREN NOC http://noc.twaren.net/noc_2008/AboutTwarenNoc/NocIntro/
2017/12/20  SunAllen",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191438,ModernWeb,0,GoogleTagManagerMicroChallenge系列,2,GTM02-建立帳戶(Account)和容器(Container),aco,https://ithelp.ithome.com.tw/users/20107582/ironman,1513728186000000000,163,"建立帳戶
大概了解 GTM 是什麼之後，就可以來建立新帳戶 (Account)，登入 Google 帳號後，一開始進來 GTM 可以看到下圖的畫面，先輸入帳戶名稱，可能是公司名稱

建立容器
按一下 「繼續」(Continue)，就可以接著輸入容器(Container)名稱，可能是網域或網站名稱，並選擇網路(Web)，最後按下「建立」(Create)，之後會跳出確認使用 Google Tag Manager 的條款，看過之後沒問題按下「是」(Yes)即完成

GTM Snippet
建立完成後，畫面就會出現下圖所示的兩個 Script，以下的 Script 要埋在網站中，最好是埋在共用的程式部份，這樣網站中所有頁面都可以載入 GTM 的設定

這兩個 Script 最好放置的位置如以下程式碼所示：
當按下「OK」之後，就會到 GTM 的總覽(Overview)畫面，如下圖所示，如果需要再把 Script 叫出來，可以點擊下圖紅框的代碼，這個代碼就代表這個 GTM 容器的 ID

基本上，完成以上步驟，已經大致做好了最初的設定，把 GTM 嵌入到網站中，接著我們就可以在接著新增代碼(Tag)了",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191757,SoftwareDevelopment,0,爬蟲始終來自於墮性系列,21,漫畫抓取,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1513728001000000000,207,"身為一個熱血工程師，看漫畫肯定是平常愛好，而網路上其實有很多漫畫資源，除了追漫畫外，也很常去回味一些經典漫畫。不過網路上的漫畫資源都是用網頁呈現，體感不是很流暢，有時候遇到塞車或開圖慢，整個看漫畫的悠閒就不見了，是不是能把整本漫畫下載下來，我們就能夠慢慢的回味。
ps. 這次 demo 我們使用動漫伊甸園來做演示。

打開網址，印入眼簾的是一堆漫畫目錄，我們就隨便挑一本來探訪。點了漫畫之後，可以看到漫畫目錄，我們需要將所有目錄列表裡面的漫畫都抓下來。再進一步觀察，隔目錄列表裡面的每個集數，都有這個集數的 ID 類似 296977，點擊其中一個目錄後會進到漫畫頁面，同時發現這一集的網址 http://dmeden.net/comichtml/296977/1.html?s=8&d=0 是由這個目錄 ID 所組合而成的。

進到這集的漫畫頁，左上角有頁碼，這樣就能夠知道這集有幾張圖片。然後點下一頁，發現網址有變化，是用第幾頁當成是 html 檔名來傳遞。

接下來我們來觀察一下圖片網址，雖然在 dev tool 的 elements tab 可以看到圖片的網址，但是在 network request 裡面卻看不到圖片網址，可見這個內容肯定是 js render 出來的，那麼待會我們做研究的時候，這部分應該就會是技術點。
我們若要抓到整本漫畫，那麼會拆解成以下三個步驟：

用 postman 測試一下是否能夠順利抓到頁面，然後再用 selector 來選擇 .l_s 看看，那麼就確定漫畫集數沒有問題。

用 postman 測試一下是否能夠順利抓到頁面，然後再用 selector 來選擇 #iPageHtm a 看看，那麼就確定圖片張數沒有問題。

剛剛探訪時就已經得知這部分是由 js render 出來的，這時候我們就要發揮偵探的精神，去把產生圖片的方法找出來。首先我們先針對已知條件做個搜尋，目前已知圖片 ID 是 img1021，那我們就來搜尋這個字串看看。
發現找到另一個結果在 view.js，點開發現，他是屬於 getCuImg()，然後這個 function 感覺就只是確認有 id 然後回傳而已，所以我們再網上追搜尋看看 getCuImg。

接著在 view.js 裡面出現另外兩個使用 getCuImg 的地方，其中一個在 window_onload function 裡面。我們可以嘗試著設 breakpoint 來去觀察看看裡面的變化。發現 arrDS 是分流伺服器的選擇，cuImg.src = sCuDomian + unsuan(cuImg.name); 這行才是關鍵，了解他是透過一個叫做 unsuan function 來解譯圖片位置，而加密過的字串就是圖片的 name。

接下來我們要來取得關鍵的 unsuan function，我們直接搜尋就能得到 unsuan 的 definition，來觀察一下這個 function，試試看能否順利解密取得圖片位置。

基本上我們可以直接拿來用，不過我們要改寫一下 su = location.hostname.toLowerCase(); 這段，因為雖然都是 js，但在前端和後端的環境不同，所提供的變數也不同，location 就是前端獨有的變數，我們可以直接將他的數值給一個固定的結果，所以程式會改寫如下，在測試一次解譯圖片位置，確認沒問題就能進入實作了。
將我們剛剛研究的 unsuan function 加進來。
再來撰寫一個取得所有集數的 function，輸入參數為漫畫網址和一個 callback 接收所有集數 ID。
接下來撰寫取得這集有幾張圖片的 function，輸入參數為這個集數的 ID 和一個 callback 接收圖片張數。
接下來撰寫取得圖片網址的 function，接收參數集數 ID、第幾張圖片，和一個 callback 接收圖片網址，這邊再把剛剛準備好的 unsuan 一起加進來解析。
首先我們先 call getIndexs 取得所有集數，然後用 async.map 去 call getPages 取得每一集的圖片張數，然後再次用 async.map 去 call getImage 取得該圖片網址，這樣就能順利取得這本漫畫的圖片 url。
好的，我要鄭重的申明我並不鼓勵盜版，所以取得連結之後，請不要下載到自己的電腦裡面，如果你這麼做的話那就是犯法了!
基本上對岸有很多這類的 resource，而每個網站多多少少都有機制去防止別人輕易地取得圖片原始檔。但說句實在話的，在前端 browser 能看到的，基本上就代表程式碼已經在使用者端了，能做的只是盡可能讓使用者解析困難，而這種解譯過程對我來說是很好玩的一部分。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍伸應用']",,"['取得漫畫所有集數 ID', '取得這集有幾張圖片', '取得圖片', 'unsuan function', 'getIndexs function', 'getPages function', 'getImage function', '組合積木', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192322,自我挑戰組,0,hexo-從初學到入門-again系列,4,將你的hexoblog發佈到github上,josephwu,https://ithelp.ithome.com.tw/users/20107307/ironman,1513727934000000000,164,"首先安裝自動發佈到github的npm套件hexo-deployer-git
$ npm install hexo-deployer-git --save
接著設定hexo中的config.yml檔

先找到以下程式碼
接著修改成




https://joseph2068.github.io/",,,"['昨天我們建置好github空間同時也設定了github ssh後，今天我們就要來實際將我們的blog發佈到github上了，走到這一步終於可以看見blog的面貌了!', '但是，等等，發佈到github前我們需要再hexo的config.yml作一些設定', '這樣我們就發佈成功了，來看看結果吧!']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192335,SoftwareDevelopment,0,輪子們，聽口令，大部分解開始！系列,1,向前人致敬！,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513727872000000000,164,"大家在使用 Laravel 或是其他套件時，相信都用的非常開心。
但是否有想過，為何這些套件會這麼好用？新增功能，加個檔案就行了；修改功能，加個檔案就行了；移除功能，改個設定就行了。怎麼會這麼簡單？
而為何自己做的共用套件卻是常常被人嫌？該要有的功能都實作出來了呀，一樣都是共用，為何命運大不同？
這些套件會有這麼多 Star ，當然是有原因的。
首先，套件是需要精心設計的。它們會遵守物件導向設計原則，做出適合擴展的設計，大家才能順利寫出客製化功能。
再來，不僅要有設計，也要有夠完整的測試。測試除了測功能，確保套件行為正常之外，還會測「身為開發者，會如何使用程式」；同時，測試也會是最好的範例文件。
最後還要有簡單易懂的說明文件，才能讓路過的開發者，在最短的時間理解套件的功能，並可以知道套件是否適用於自己的專案上。
無論是設計、測試或是文件，都是針對多數開發者需求而做的，也因此，大家才能夠愉快地開發。筆者身為一個開發者，先對所有開源作者致上十二萬分的敬謝之意。
往後的日子裡，會開始研究套件的設計，了解巨人的肩膀是如何實作出來的，期望自己在提升設計能力之後，有朝一日也能成為開源作者的一員。",,['以開發者為本'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192301,自我挑戰組,0,自我挑戰日記系列,14,CSS：font文字重疊,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1513727812000000000,149,"有看過一些廣告的文字
會把陰影用斜線作為背景
今天試作把文字重疊作出效果
首先需要先用一個 box 作為容器
再用 position 位移來作
範例一     把陰影作成斜線

範例二     將 範例一 的HTML文字和陰影相反

範例三     陰影漸層拉長

範例四     將 範例二 的文字加背景

--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192275,ModernWeb,0,Nest.jsframework30天初探系列,16,Nestjsframework30天初探:Day16SQL(Sequelize)PART1,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1513727675000000000,158,"Sequelize是神好用的模組，可以透過它建立ORM架構的Restful API，用過Sequelize的大大們應該對它不陌生，還沒接觸過的大大們，可能先用一般的node app玩一下Sequelize再來看本篇會比較好，接下來我會使用Sequelize來操作SQL Server的資料。
1.0 sql script如下。
1.1 建立新專案，NestCLI雖然是很方便的工具，不過似乎透過NestCLI建立的專案，其模組有的不是nestjs最新版，所以我們還是透過git去copy一份吧。
cmd 指令
3.1 請把預設的modules資料夾刪掉，專案架構要調整一下。
新架構如下，請先新增好下列資料夾、檔案。

3.2 server.ts程式碼如下。
src/server.ts
定義好Users介面
src/app/Users/interfaces/IUsers.service.ts
定義好操作Users資料表的介面。
src/app/Users/interfaces/index.ts
src/app/database.module.ts
程式碼都在github
待續...",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192182,DevOps,0,Openstack學習與介紹系列,4,DAY4OpenStackNetworking介紹-1,帥哥,https://ithelp.ithome.com.tw/users/20103615/ironman,1513727516000000000,140,"在介紹Openstack網路架構前，先來介紹幾個基本名詞。
Ethernet
乙太網路（英語：Ethernet）是一種電腦區域網路技術。IEEE組織的IEEE 802.3標準制定了乙太網路的技術標準，它規定了包括實體層的連線、電子訊號和介質存取層協定的內容。
在OSI 7層model裡，屬於第2層 Data link。
所以當在討論ethernet常常會聽到，local network, layer 2, L2, link layer and data link layer
the hosts connected to the network communicate by exchanging frames. Every host on an Ethernet network is uniquely identified by an address called the media access control (MAC) address
雙方主機是藉由frames(訊框)來相互溝通，是藉由MAC來辨識封包該送往哪個host。
VLANs
虛擬區域（Virtual Local Area Network、VLAN）是一種建構於區域網路交換技術（LAN Switch）的網路管理的技術，網管人員可以藉此透過控制交換機有效分派出入區域網的封包到正確的出入埠，達到對 ""不同實體區域網中的裝置進行邏輯分群（Grouping）管理"" ，並降低區域網內大量資料流通時，因無用封包過多導致擁塞的問題，以及提昇區域網的資訊安全保障。
VLAN is a networking technology that enables a single switch to act as if it was multiple independent switches. Specifically, two hosts that are connected to the same switch but on different VLANs do not see each other’s traffic. OpenStack is able to take advantage of VLANs to isolate the traffic of different projects, even if the projects happen to have instances running on the same compute host. Each VLAN has an associated numerical ID, between 1 and 4095.
VLAN這個技術可以讓2台host就算接到同一台switch上，還是無法與對方溝通。看起來就像是在完全不一樣的區域網路內。
一般VLAN能指派的ID是1~4095。因為數量有限，所以之後會有VXLAN的出現。
Subnets and ARP
Subnet就是單純的子網域。
While NICs use MAC addresses to address network hosts, TCP/IP applications use IP addresses. The Address Resolution Protocol (ARP) bridges the gap between Ethernet and IP by translating IP addresses into MAC addresses
網卡適用獨一無二的MAC來分辨network host，但是 TCP/IP的協定是依靠 IP address來分辨。
這中間就是靠 ARP 來建立起橋梁。
ARP協定能把IP address轉換成 MAC address",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192115,SoftwareDevelopment,0,[行銷也要自動化]用PythonSelenium+NodeJS+AmazonEC2打造簡易關鍵字搜尋報表應用！系列,4,Day3：關於middleware的小示範｜KeywordSearch1.0爬蟲關鍵字報表工具,jiunyiyang,https://ithelp.ithome.com.tw/users/20107784/ironman,1513727461000000000,147,"什麼是KeywordSearch 1.0 爬蟲關鍵字報表工具？
是作者近期兩周實作出來的小專案，把不同關鍵字搜尋工具的api及部分爬蟲寫在nodejs App當中，讓使用者可以一鍵拿到搜尋趨勢和相似詞組推薦。此專案尚有很大擴充空間，未來在作者自己的部落格若有進一步更新，會回來附在此處：________
為什麼要做KeywordSearch 1.0？
精闢有效的前導市調可以避免不符市場需求的產品出現，定期觀測關鍵字趨勢，是網路行銷或市場分析人員的日常；但網路資訊四散各地，市調人除了大量閱讀、蒐集、篩選判斷外，還要把資料整理過後呈現給團隊，這個過程非常需要耐心、想像力、判斷力、大把時間，能夠獨立做出完整市調非常不容易；因此作者和朋友想幫市調人員節省文書、搜尋時間，讓他們能專注在判斷、分析上。
現在進度到哪了？為什麼文章是有關nodejs？
這個工具已經開發完成，現在在測試修改中，這30天文章是想把自己的開發過程完整記錄下來。第一周的進度是初步架好NodeJS App的基底，以及在jupyter上測試爬蟲script。
昨天我們實作Express 4架出自己的App，以及動手設定了新的route。還記得前天我們提過middleware的作用吧？
在我們把爬蟲script寫進function以前，先再把middleware的實現方式搞清楚一點。
到目前為止我們只知道，在router.get中使用next()表示接續下一個middleware，但實際上要怎麼運用呢？
讓我們接續使用昨天的code，加上幾行來了解：
筆者也只是新手，為保大家學習品質，我是先閱讀完官方文件、自己理解後再寫出來；即便這些實例並非100%原創，但絕非直接複製其他網站資料過來的唷
打開你的about.js，小小調整一下router.get內部：
接著在terminal運行：
因為你的console.log訊息是寫在router裡面，意思是當你用GET method request url的時候，他才會被執行。
因此我們讓瀏覽器前往localhost:3000/about，看到他成功出現和以前一樣的訊息（respond with a yo），再回到terminal看
就能看到我們的URL和Type依序出現，about.js第6行的next();奏效了。
接下來用個複雜一點的，結合不同訊息推到頁面上。
一樣是about.js：
第8行:id意思是 localhost:3000/about/後面接任意數字
第9行req.params.id是解析url中對應id的值；如果判斷id是666，就會運行後面的next('route')，並接到下一個router.get，也就是第15行
接著一樣在terminal運行：
然後我們到localhost:3000/about實驗一下，輸入localhost:3000/about/109273，頁面回傳 ""nah, not 666""
再輸入localhost:3000/about/666，頁面這時回傳 ""666666666666666666666""
這個部分在驗證用戶登入，或回傳相對應blogpost、todolist相當好用。
很明顯的今天是一個小品XD
明天我們實作如何get url params，並酌量補充說明其他api。因為到後面我們會從url中抓取使用者輸入的關鍵字後，丟到selenium script執行。",,,,"['使用情境1：如果同一個路徑你有先後次序的訊息想要顯示', '使用情境2：如果你有不同編號的路徑，大體上的結構差不多，但想呈現不同的內容']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192336,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,15,【Day15】解除依賴之六：Stub和Mock一起使用2,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1513727357000000000,142,"（這個要消化比較久）
---先卡位---",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192127,ModernWeb,0,Expo---跨平台App開發從零到上架系列,15,ExpoDAY15---Brightness,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1513727271000000000,143,,['Expo DAY15 --- Brightness'],"['前言', '現在就做看看', 'Refs']",['Expo'],,,['tags: day15 iThome鐵人賽2018 ReactNative Expo Brightness'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10192332,SoftwareDevelopment,0,爬蟲始終來自於墮性系列,20,2017/12/1923:46:00原始數據統計(json),Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1513727228000000000,157,"發現有好多人在寫統計的分析，其實我也寫了個 bot 來爬所有文章，不過每次執行大概都要 60 秒左右，目前還沒找到 free 的 node hosting 可以執行超過 30s，若有也歡迎提供呀！！
所以我打算接下來每天晚上都提供原始數據的 raw data，提供給有興趣的人去做分析，若是有更想要進一步的資料但我沒抓到的，也能留言告訴我。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192334,ModernWeb,0,每日文章推薦系列,16,Day16OpenSpace,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1513727003000000000,179,"其實個人不大會整理資訊
所以一直不大會跟人講解要怎麼做比較好
但是就知前參加過一次開放空間會議以後
才覺得這玩意很適合我
因為大家都能發言
所以就算一個人講的有不足的地方
也可以互相補足
再成為一個整體資訊
我個人參加過兩場
一次是devopstw 辦的
https://devops.kktix.cc/events/meetup7-openspace-215e70
ㄧ次是https://devopsdays.tw/
兩次都都讓我討論得很盡興
就算不發言聽別人討論也很過癮
-【文章】何謂開放空間
-【文章】關於開放空間
-【文章】「開放空間會議技術」的溝通魅力
-【文章】漫談開放空間技術
-【文章】開放空間會議定義和應用方法
-【影片】開放空間會議技巧(OST, Open Space Technology)(一)
-【書籍】開放空間科技引導者手冊
一分钟了解“好”接口的设计与实现
真的把重點縮到一分鐘看完
厲害
客户想要的 vs 客户实际预算：漫画解读软件开发模式 ​​​​ - 文章 - 伯乐在线
有趣
【译】按钮设计8年发展史
個人還是喜歡有立體感的
Web开发这十年
回顧一下
vue+koa2+mongodb点餐系统总结
有整理開發過程遇到的問題
先看看可以參考一下
CSS工程化演进
整理得不錯
讓我注意到前幾天寫的前置處理器有放到後置處理器的部分
​
Performance Calendar » Clearing cache in the browser
實際上能通用的方法沒幾個ORZ
Vue.js Examples
有空看看 可以參考一下
亞洲 CS職涯在日本的普遍問題 - 看板 Oversea_Job - 批踢踢實業坊
https://github.com/fripig/article_log/issues/424",,"['開放空間會議', '今日分享文章', '今天看的文章']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192333,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,16,Props&States,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1513726741000000000,141,"React components 基本上是 JavaScript functions, 所以它們也可以代入 arguments，在 React 叫做 props。
Props 是唯讀，不可變更的。
Props 可以是 string, number, object, 或者 array.
然而UI元件會隨著互動過程改變狀態，React 又介紹一個新的概念叫 states。
States 控制 React component 的狀態，一但 states 改變，整個 React component 會重新 render.",,"['Props', 'States']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192145,自我挑戰組,1,使用PHP串接金流相關API系列,9,Day08-Linepay(6)支付API,royal801991,https://ithelp.ithome.com.tw/users/20107301/ironman,1513726732000000000,156,"發燒趕文中
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192320,SoftwareDevelopment,0,做一個JVM語言系列,2,參考資料：一本書及一系列的文章,timloo,https://ithelp.ithome.com.tw/users/20045230/ironman,1513726564000000000,153,"編寫程式語言最經典的參考書，當然是最有名的恐龍書，幾十年來，書愈編愈厚，基本上是不要讓人在當學生時
可以練習完的厚度，而且滿布了編譯器的專有名詞。
而本文所要參考的書，是ANTLR 的作者，Terence Parr教授編寫的手冊，The Definitive ANTLR 4 Reference。
薄薄的322頁書，至少比恐龍書少了一千頁。給你很多設計語言的案例，來學習使用ANTLR工具，程式碼產生器，類別庫。
如果你志不在一個JVM語言，其實熟練ANTLR，你就可以做一些有趣的應用了。
例如語言的自動轉換器。有一個日本高手寫了一個Objective-C   轉Swift 的線上轉換器，
Objective-C   轉Swift 的線上轉換器。
有人學習新語言的同時，有人用轉換舊語言到新語言來學新語言。
強國也有人寫了一個Objective-C   轉JS的工具，
這工具是想迴避APP STORE的上架審查機制所寫的。
以上兩種都是借用ANTLR的應用案例。
如果，你覺得轉換語言不夠讓內心踏實，一定要有個指令，如JAVAC 來編譯程式，JAVA執行程式，才
叫語言，那可以試試JVM語言。
可能是東歐牛人的JAKUB DZIWORSKI，寫了一系列博文，用自創的Enkel語言，
結合ANTLR，ASM ，來產生bytecode ，可在JVM上執行。
未來28天的文章，就圍繞著這兩個參考來源，實作一些程式碼來驗証JVM語言。
新創一個語言，這引發著一個問題，什麼樣才算一個新語言？個人覺得C like 的語言其實很多，C++, JAVA,
PHP 都是C-like的語言，只是主攻的強項不同。
而PYTHON類的語言，從文法風格上，就覺得很特別，和C LIKE類的語言，從外貌上就差異很大。
而函數式語言很多的括號（），外貌上也很特別。
這三種形的語言，外貌上有差異，讓人覺得差異頗大。
而以強打的功能而言，那又是另一種分類為新語言的方式。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192326,自我挑戰組,0,ArasPLM開發練功30天系列,16,[Day16]ASP.Net-ArasOpenWebForm,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1513726463000000000,146,"本篇介紹Aras SP9打開個人網頁站台的方法，在以往11SP5的版本中，可以用form post或是aras modal open 方式打開一個視窗，但是在sp9就完全不能這樣思考來使用，因為在此版本有分頁控制，那麼就讓我們直接來看看吧~
先新增一支Javascript Method

新增一支Action

設定Action

在首頁上方Action顯示出自己的按鈕

點擊執行，跳出aspx畫面
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192331,自我挑戰組,0,"Let's""Go""系列",14,Day14　DataTypes,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1513726450000000000,147,待補,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192330,ModernWeb,0,PHPlaravel的邂逅系列,16,DAY16-laravelEloquentORM,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1513726228000000000,147,"where：收尋特定欄位的資料，這邊會找到id=1的那一筆資料。
orderBy：針對某個去做排序的行為，又有分兩種，ASC為由小至大排列，DESC由大至小排列，如果都沒下這兩個參數，預設為由小至大派列的方法。
take：限定取得幾筆資料，假設結果收尋到很多比資料，這邊為1所以只會顯示一筆出來。
get:取出該筆資料，沒有get會出錯
where裡面也可以大於或小於的條件，來搜尋你要的資料
使用model來新增一筆資料，而不只是用sql來新增料，可以看到要先new一個News的物件，存在$post的變數裡面，接著新增title和description的資料，最後記得新增完必須要下save()來儲存這個物件的資料，新增完以後就可以去資料庫看到多一筆資料了。

透過create新增資料的時候，記得也要在model裡面新增允許的欄位，這樣create才不會出錯，也確保了只有特定欄位的資料才能存進去。",['DAY16-laravel Eloquent ORM'],,,['create新增資料'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192328,ModernWeb,0,ZerotoherowithReact.js系列,13,【Day13React】React+Webpack——搜尋功能#Part2,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1513726091000000000,172,"昨天做到 input event 的綁定，不過尚未取得 input 的值，在 handleQuery 裡，我們可以用 event.target 的方式來取值。下面的截圖可以看到我輸入 tooth 觸發了五次 handleQuery function，每一次都可以抓到當下 input 裡的值。

我有一包假資料，放在 app/product.js 裡面，內容就是一些產品的價錢、製造商、是否有存貨等等的產品資訊。

現在我也要把這個檔案 require 到 app/index.js 中，我才能透過 Query 去假資料裡面瀏覽我要的資訊，做法是在最前面多加一行：
我將還放在 Search Component 裡的 result 區塊切分出來，建立一個新的 Results Component 去存放這些資料
我們在 component 的 constructor 設定 state 初始值
constructor(props) { super(props); this.state = { query: '' }; }
由於我們要偵測的 onChange 基本上就是 keyup，鍵盤一有動作就會觸發一次，而每次的變動等於 state 狀態不同，因此透過 this.setState 可以改變 state，讓 React 知道最新的狀態。為了防止大小寫造成讀不到值的狀況，我直接把輸入的值一律改成小寫 toLowerCase，同時也把不必要的 space 透過 trim() 移除。
接下來，要變魔術了（咦），我們要進行雙向綁定的 magic～
在 Search component 裡面綁定 handleQuery function
並且在 handleQuery function 裡使用 props 來呼叫 parent component 裡面的render()以處理這些資料變動所帶來的UI改變。
這個階段，我們會用到元件的生命週期中的 Updating 的方法 componentWillReceiveProps(nextProps)
在最後 render() 的地方，寫上
<Search product={products} /> 前面的 products 指的是 props name，後面的 products 是 products.js 裡的變數名稱（我存取產品的陣列變數）
在 <Results /> 裡就可以透過 this.props 來呼叫
接著在 componentWillReceiveProps(nextProps) 裡面，先來測試現在我們 onChange 會出現什麼樣的結果

每一次 onChange 都呼叫 products 物件。
嗚！以為今天效率高可以完成，不過事實上無法ＸＤＤ
只能再切成 Part3 惹～這種寫法快招架不住了！！
一次吸收太多。。。。希望晚上不要夢到我在學 React QQ
專案連結 Github",,,"['取得 input 的值', 'Pass the Query', '拆解 Results component', '搜尋產品']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191324,ModernWeb,1,GoogleTagManagerMicroChallenge系列,1,GTM01-GoogleTagManager是什麼?,aco,https://ithelp.ithome.com.tw/users/20107582/ironman,1513725336000000000,245,"Google Tag Manager
Google 代碼管理工具(Google Tag Manager，簡稱 GTM)。Google 代碼管理工具，其中代碼的意思就是指一段程式碼，我們可以用這段代碼將資訊傳給第三方服務(Ex：Google Analytics、Google AdWords、FB Pixel 和 Hotjar等)，也可以透過 GTM 所提供的 Custom HTML Tag，把 HTML、CSS 或 Javascript 嵌入到自家的網站上

[來源：https://camo.githubusercontent.com/]
如果我們使用 GTM 來統一把這些代碼，就不需要逐一維護網頁中的程式碼，只要在 GTM 的介面中，指定要啟用的代碼(Tag)及啟用時機(Trigger)就行了。減少直接修改網站程式碼的次數和找開發人員幫忙的次數，能有效減少錯誤發生的機會。沒有 GTM 之前我們要在網站上埋追蹤碼(Tracking Code)的話，就如下圖的紅色 Tag 一樣，需要在網頁上去加入相關的程式碼

[來源：Google Analytics Academy]
如果使用 GTM 去管理相關的 Tag 就像是下圖一樣，在 GTM 的使用介面中去做 Tag 的設定，Tag 有可能是追蹤碼，也有可能是追蹤工具的 Pageview 或 Event 的設定，甚至有可能是 Custom HTML

[來源：Google Analytics Academy]
使用 Google Tag Manager 的好處
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192291,DataTechnology,0,DataSciencewithAzure系列,1,[01][MachineLearning-推薦系統]使用情境,bymiachang,https://ithelp.ithome.com.tw/users/20103632/ironman,1513724968000000000,203,"
前言：相信許多人在最近都時常聽到機器學習、深度學習等的話題，本次的ithome鐵人系列文 Data Science with Azure 將會帶大家從幾個有趣的例子，從演算法以及實作當中學習推薦系統、分類、分群以及電腦視覺的應用。
首先出場的是大家很熟悉的推薦系統，不管是電子商城(pchome, ebay, amazon)或是youtube, spotify也都有推薦系統的蹤影。到底這樣的系統是基於什麼樣的使用情境以及演算法設計呢？讓我們繼續看今天的內文...
許多人會想知道，什麼樣的狀況下會需要建立一個推薦系統？
身為一個使用者，你可能在逛商場的時候，會想要找到適合你的商品。
而身為一個店家，你可能在經營商場的時候，會想要讓商品可以帶來更多的利潤。
站在商家的立場
宣傳新品，增加曝光
透過推薦拉長顧客停留時間
清庫存(?)讓過季商品有再度出現在顧客眼前的機會
站在顧客的立場
在太多商品的情境下找到相似的物件
在太多商品的情境下找到適合我的物件
因此我們可以知道，在一個品項繁多的商場(無法用手點擊滑鼠看完的數量)，可能在一樣新商品要推出時，使用者們還不曉得如何透過搜尋找到這項商品。也可能是過去販售過的某樣商品，跟近期的某些熱賣物品屬於同一類型，這時候就很適合透過推薦系統讓這樣商品重回熱銷排行榜。另外像是youtube, spotify也會透過推薦曲目、影片，讓使用者駐留在該服務的時間延長，轉而讓該平台的廣告商或平台有更多機會與使用者互動及推銷。
這次的系列文章會使用Azure Machine Learning Studio當作範例，
如果還沒有註冊的讀者也可以點擊Azure Machine Learning Studio註冊。
看影片了解Azure Machine Learning Studio：
Machine Learning Studio對於許多演算法初學者來說，是非常友善的平台。不管是豐富的學習資源(開放資料及、官方範例等)，也不需要撰寫程式碼就可以完成一個能夠與外界互動的API。讓大家能夠從非常初學開始學習，了解各項演算法的概念後，也能夠加入自己撰寫的 python 或 R 程式碼在其中。

其中最推薦的就是Gallary:(https://gallery.cortanaintelligence.com/) Gallary當中有不同產業的應用範例，包含零售、製造、銀行、醫療等產業，讓不同領域的人都可以找到適合自己的使用情境。

而這次我們要討論的則是當中的 Recommender: Restaurant ratings
可以先點入了解，複製一份到自己的workspace，熟悉一下環境。
明日會帶大家更深入探討： 推薦系統的類型 以及 其背後的演算法。
Reference
圖片 https://www.slideshare.net/shopieasy",,"['推薦系統的使用情境', 'Azure Machine Learning Studio中的推薦系統']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192006,自我挑戰組,1,蚵蚵攻城記系列,9,[Day09]垂直置中(3/4),azer19890427,https://ithelp.ithome.com.tw/users/20107340/ironman,1513724611000000000,189,"昨天練習用position的方式置中，
今天試試看用flexbox，
今天不要請阿鼠，

今天叫B6來幫我們。

(阿鼠是rat，B6是mice喔!)

B6 很緊張，他也躲在籠子的角落裡，
我們把籠子變得舒適一點，讓他不要那麼緊張。

B6 自然而然的就走到中間了!
深入去看了flex的用法發現很多方便的特性
justify-content決定了flex水平對齊的位置，
如果沒有設定，預設就是flex-start


則是會靠向右。
是我們用的水平置中。


都會平均分配elements，但不同的是space-between，會黏住左右兩邊；
space-around，則會平均分配間距。
align-items則是垂直對齊的位置。
與justify-content相似，除了可以靠頂端對齊，
也能對齊底部及置中。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192305,自我挑戰組,0,R語言與演算法自學系列,1,Day1開賽熱熱身,tacoyakii,https://ithelp.ithome.com.tw/users/20107464/ironman,1513724489000000000,174,"近期動態是利用Coursera學習Machine Learning，在上週結束台灣人工智慧學校的申請及複試後，將前幾週的進度補齊，就先用我上週的學習筆記來做為開賽第一篇。
Classification problem can use Logistic function(Sigmold function) to solve. The value of Y is discrete, only shows 0 and 1. For example, whether is E-mail spam or not, we could create a classifier to seperate.
predict ""y = 1"" if h(x) >= 0.5
predict ""y = 0"" if h(x) < 0.5
We change the hypothsis to h(x) = g(z) = 1/(1+e^(-z)), z = transpose(theta)×x, to avoid the problem like h(x) > 1 or h(x) < 0, and add some larger x.
Decision boundary
Ex: predict ""y = 1"" if -1 + x1^2 + x2^2 >= 0, the the boundary is -1 + x1^2 + x2^2 = 0
Cost Function
J(theta) = (1/m)sum(cost(h(x), y), cost(h(x), y) = (-y)log(h(x)) - (1-y)log(1-h(x))
Vectorized implementation
h = g(X×theta), J(theta) = (1/m)×(transpose(-y)log(h) - transpose(1-y)log(1-h))
今天先試試看部分筆記，課程編碼是使用Octave，之後在po作業的程式碼上來。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192295,自我挑戰組,0,rails學習紀錄系列,7,[Day7]關於模組(Module),thehappyend,https://ithelp.ithome.com.tw/users/20107708/ironman,1513724479000000000,178,"模組(module)，是一個很容易跟類別(class)搞混的名稱！
觀念
可以把模組想成是包含許多方法和常數的工具箱。模組其實和類別的概念很相似，但模組不能建構實例（instance），而且也不會有子類別（subclass），它只是用來儲存東西的。
可以選擇性的引用Module內的方法，不會讓Module內的變數或是Method與其他Class互相影響
模組與類別的關係
類別是模組的小孩，模組能做的類別都能做。
根據繼承概念，類別比模組還擴充了哪些方法呢？
[註1].allocate是什麼？
看個例子理解一下：
當我們幫Test類別建造實體物件時...
如何引用模組
什麼時候要用繼承還是要用模組？
如果你發現你要做的這個功能，它可能在很多不同體系的類別裡都會用得到，那你可以考慮把功能寫在模組裡，需要的時候再 include 進來即可。但如果你還是不知道到底類別跟模組有什麼差別。
參考資料
為你自己學Ruby on Rails
[Ruby]include v.s extend以及require的差別
Ruby女孩：10萬.times { puts ""為什麼？"" }",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192151,自我挑戰組,0,30天學習J2EESpring+Hibernate學習心得記錄系列,2,Day02IoC/DI介紹,Zero.Cheng,https://ithelp.ithome.com.tw/users/20107820/ironman,1513724291000000000,193,"IoC(Inverse of Control)控制反轉
將此稱作""控制反轉""較好理解此觀念，即把程式中需要手動生成創建對象控制權限交付給Spring框架負責管理
，使用者只要從Spring容器(BeansFactory)中獲取要使用對象不需要關心創建過程(Don't Call Me,I'll call you)．
DI(Dependency Injection)依賴注入
Spring創建對象過程中，將對象依賴屬性（數值，集合，對象）通過配置設值給對象
IoC和DI為同一種概念不同角度描述，明確敘述＂被注入的對象依賴IoC容器配置依賴的對象""
Container:容器負責對象創建/初始化/操作/銷毀的管理
上面概念描述我覺得難以理解將以HelloWorld程式來釐清觀念
1.下載STS(Spring Tool Suite)並解壓縮工具下載網址
2.創建JavaProject並建立lib目錄
3.準備Jar包將解壓目錄中sts-bundle\sts-3.8.4.RELEASE\plugins裡面的org.springframework.data.core_1.11.4.20160223-RELEASE
org.springframework.beans_4.3.0.20160611-RELEASE
兩份Jar包導入

4.建立HelloWorld

4.1並寫sayHello方法Public void sayHello(""Hello Spring"");
4.2建立測試類別app然後建立HelloWorld對象並調用sayHello方法

5.實作IoC將創建對象交給Spring
5.1建立Source Folder並建立applicationContext.xml然後至官方網站找尋xml範本並貼上然後配置bean

6.實作DI將注入數值配置給依賴IoC對象
先配置applicationContext.xml屬行值

寫與xml相應的set方法

這樣既可將XML屬性數值調用至程式內

最後整個HelloSpring檔案架構如下圖
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192319,ModernWeb,0,使用Django開發網頁系統系列,1,[Day01]前言,Frank,https://ithelp.ithome.com.tw/users/20107183/ironman,1513724242000000000,187,"Hi, 大家好，我是Frank ， 先謝謝你們願意來看我的文章XD，
這是我第一次參加鐵人賽，我的主題是，<<使用 Django 開發網頁系統>>，現在Django 教材，我覺得非常多了XD，但都是比較舊的版本了，想寫一個新的版本，我想藉由這次鐵人賽，來完成這個心願XD。
適合對象:
有一些網頁程式基礎，略懂MVC即可，或是從其他語言的framework 跳過來也行
話說我最近也在學php framework laravel，哈哈。
如果說沒有程式基礎的也想進來這個領域，也歡迎，可以在底下留言一起討論。
本系列文章，分為兩個部分，前半部以從頭開始學習django為主，並帶一個實例操作，也會寫一些曾經犯過的錯。後半部是以比較進階的部分，會以分享個人使用過的套件及經驗，來達到特別的需求。如果有任何寫得不好的地方，歡迎留言討論，順便學習新知，謝謝。
我為什麼會選Django?
因為
人生苦短，我用Python
滿認同這句話的，哈哈
Django 是一套用Python寫的Web Framework，選這個原因，他是目前在python framework市佔率算比較高的，另外有滿知名的flask屬於比較輕量級的。
python framework ranking
https://hotframeworks.com/languages/python
有興趣的可以再看一下各個框架的差異
https://insights.dice.com/2016/11/22/5-top-python-web-frameworks-2017/
使用Django 有名的網站
(底下這一個比較舊的)
http://ddi-dev.com/blog/programming/top-sites-built-django-framework/
https://worldwebtech.weebly.com/blog/top-ten-most-popular-website-development-using-python-and-django-platform
看完了這些網站，有想學django 衝動了嗎?",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192313,ModernWeb,0,初探前端之路-React-由生到死的踩地雷系列,10,偵測滾動事件,Luis-Chen,https://ithelp.ithome.com.tw/users/20103556/ironman,1513724060000000000,179,"React 有幾種偵測Scroll 的方式，通常是用的方式寫
不過有時候你要動到邏輯問題的撰寫方式，你可能就要拆步驟寫：
基本上 是分這三大元素去修改，
componentDidMount(),componentWillUnmount(),handleScroll(event)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192090,Security,1,CEH之越挫越勇系列,15,[Day14]惡意程式-概念篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1513723960000000000,332,"- 病毒(Virus)
- 不完整的程式碼，無法獨立執行
- 改檔頭的執行位置，或以執行跳躍程式碼的方式竄改執行位置
- 蠕蟲(Worm)
- 完整，可獨立執行
- 利用網路、系統弱點或是社交工程方式大量複製，產生大量垃圾資料或流量，造成無法正常服務
- 木馬(Trojan Hourse)
- 不完整的程式碼，無法獨力執行
- 依程式內容「指定」執行路徑或目標檔案
- 隱藏或偽裝成無害的檔案，不知不覺得由後門進入的程式
後門(Backdoor)：沒有授權使用的隱藏程式
(Rootkit)：隱藏其他程式行程的軟體，木馬偽裝的系統核心程式
//這個我不知道要怎麼翻譯 Q""Q
- 勒索病毒(Ransomware)：加密後催你付錢的惡意程式
//先說這個是原材教材的老師翻譯完的筆記 (因為我看網路上的來源翻譯不太一樣…)
//粗體字有出現過在考古題
//明天要交報告惹 剩下來的再慢慢翻譯惹 Q""Q","['Malware Threats', '惡意程式分類', '注入方式']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192318,ModernWeb,0,從無到有，使用Go開發應用程式系列,11,Firstclassfunction,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513723867000000000,185,"昨天定義好的函式，可以當作變數來使用，如：
上面可以看到 add 函式也可以當作一個變數來操作，熟悉 Javascript 一定對這個寫法不陌生。
上面同時也看得到變數的型態，因此我們也能定義一個變數是函式型態（Function Type）：
因為它是變數，所以也可以成為其他函式的傳入值，就像 Javascript callback 一般：
看到一堆 func(int, int) int 會覺得很冗長，我們可以使用 type 來定義新的型態：
除了直接宣告函式傳入之外，也可以使用匿名函式：
或者直接 inline 會更簡潔：",,"['匿名函式', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192317,SoftwareDevelopment,0,看到code寫成這樣我也是醉了，不如試試重構？系列,9,SOLID之里氏替換原則（Liskovsubstitutionprinciple）,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513723797000000000,186,"一樣要考古一下原文：
Subtypes must be substitutable for their base types.
子類別必須要能取代它的父類別。
這次的考古講得非常簡單，它背後所代表的意義是：父類別出現的地方，子類別就能代替它，而且要能做到替換而不出現任何錯誤或異常。
文字描述依然抽象，我們繼續看昨天的例子：
這裡面，父類別是 DataResource ，子類別是 XmlResource 。現在有個 Model 物件需要把資料拿出來儲存，我們可以這樣寫：
但問題來了，昨天我們還有寫另一個 class 它也能取得資料呀！
可是 Model 傳入 JsonResource 是不能跑的！因為 Model 只認 XmlResource ，不認 JsonResource 。
解決方法其實很簡單，我們只要把 Model 的定義改成兩個子類別所繼承的 DataResource 父類別即可。
這程式能跑的原因正是一開始所提到的：「父類別出現的地方，子類別就能代替它」，但有做到「要能做到替換而不出現任何錯誤或異常」嗎。
因為 save() 使用的 getData() 是 DataResource 所定義的公開方法，因為繼承會把父類別的所有行為繼承到子類別，因此子類別也會有 getData() 而不會讓 save() 出錯，因此也有做到「不出現任何錯誤或異常」。
原本程式的做法，是 Model 只能依賴 XmlResource ，這並不符合「里氏替換原則」；改依賴 DataResource 後，程式就符合原則了，接著就會發現程式的擴展性變好， Model 的 Resource 就可以有多樣化選擇，除了 XmlResource 與 JsonResource 之外，甚至還可以新加 CsvResource 讓 Model 也能讀取 CSV 檔。
為避免發生錯誤或異常，實作可以參考要領，如下：
里氏替換原則的重點是要增加程式的強健性，讓版本升級的時候也能有很好的兼容性。比方說：子類別增加或修改，並不影響其他子類別，這正是強健性的特質。
上例的使用情況是：子類別處理不同的業務邏輯，參數定義使用父類別，實際上傳遞的是子類別，這樣就能同份定義，執行不同的業務邏輯。",,"['遵守原則的要領', '優點', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191460,自我挑戰組,0,當運輸遇見IOT系列,1,Day01-當運輸遇見IOT-智慧型運輸系統意涵,allenchen,https://ithelp.ithome.com.tw/users/20107143/ironman,1513723215000000000,172,"  運輸是人的基本需求，早期的定義：運輸主體（人或者是貨物）通過運輸工具（或交通工具與運輸路徑），由甲地移動至乙地，完成某個經濟目的的行為；現階段則著力於結合電子、通信、資訊、控制、機械及管理技術，追求安全、效率、經濟及環保之智慧型運輸系統，隨著物聯網的興起，任何設備都可以連上網，交通環境中的人、車及路都可以相互溝通，勢必對運輸系統造成不少影響，因此希冀藉由這個自我挑戰，可以探討這方面的影響，找出自己在運輸結合物聯網可以著力的方向。
  首先了解智慧型運輸系統的意涵，依據維基的定義：
智慧型運輸系統（英文：Intelligent Transport System、Intelligent Transportation System，縮寫：ITS，又名：智能交通系統）是將先進的信息技術、通訊技術、傳感技術、控制技術及計算機技術等有效率地集成運用於整個交通運輸管理體系，而建立起的一種在大範圍內及全方位發揮作用的，實時、準確及高效率的綜合的運輸和管理系統。[維基百科]
依據中華智慧運輸協會針對智慧型運輸系統的定義：
智慧型運輸系統 ITS, Intelligent Transportation System
乃是應用先進的電子，通信，資訊與感測等技術，以整合人，路，車的管理策略，提供即時(real-time)的資訊而增進運輸系統的安全，效率及舒適性，同時也減少交通對環境的衝擊。ITS的目標可以分為安全、環保、效率，以及經濟等四大目標。
而智慧型運輸系統一般可分為以下九大面向之服務
  針對智慧型運輸系統之九大服務面向定義，及交通環境（人、車、路及平台）組成，未來將針對物聯網四個層面包括實體層、感知層、網路層、應用層進行智慧型運輸系統(ITS)及物聯網(IOT)之影響探討，如下圖所示。
","['前言', '智慧型運輸系統', '小結']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192308,Security,0,資訊系統安全與CISSP的簡單應用系列,5,"[Day05]安全與風險管理(Laws,Regulations,andCompliance)",wisdomryanlin,https://ithelp.ithome.com.tw/users/20107753/ironman,1513723144000000000,202,"前幾年安總想做一個大數據的專案，裡面被質問最大的就是「數據隱私 (Data Privacy)」，那個時候大數據的風潮才剛起來，法遵對此也所知甚少，安總只好自己來研究。想不到時隔多年，我們又再次見面了。

圖片來源：歐盟 (EU)
這裡面歐盟講了很多很多很多喔，我就來幫大家整理三個關鍵的個人權益保證吧：
(事實證明，同樣的話多聽幾次您就會愛上它，您會習慣成自然，漸漸忘記它的存在..)
還記得我們幾天前談到需求 (Requirements) 的重要性，在一開始就納入設計考慮，才有可能實現和確效喔，來，把下面這些需求加進您的工程規格吧 (哈哈哈，痛苦吧，讓您們也嘗嘗我的痛苦，哼哼)：
哈哈，驚不驚喜，意不意外，連告知員工被監控都有流程喔，來，我畫個流程圖給您看，真的有流程操作起來才不會慌、不會亂：

真的好殘忍，我其實真的不知道這是不是合法的，若有知道國內外法源的大大，可否於下方留言提供，作為這篇文章的補充。(謝謝泥們)
這本算是我大數據的啟蒙書，裡面舉了日本小松公司 (做怪手的) 為例，讓人知曉數據科學的商業應用；受益良多，誠心推薦給大家。

《Big Data 大數據的獲利模式：圖解．案例．策略．實戰》","[""EU's Data Protection Directive"", 'Data Privacy Requirements', '員工系統活動監控告知流程']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192315,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,16,[Round16]題材,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1513723126000000000,157,"題材在桌遊的組成中是最好嘴的了。
即使如此，還是需要時間取材、記錄，以便日後提煉出來點綴遊戲。.
除了因為本身的喜好，正好看到專業鄉民討論殭屍的話題
https://www.ptt.cc/bbs/movie/M.1511870944.A.EA9.html，
覺得好看之餘，也該是時候當個專業粉，
所以本次的主題就決定是中國(香港?)殭屍。
雖然很難再回想以前怎麼會那麼喜歡暫時停止呼吸系列，
不過緊張刺激中，又帶有絕對安全的""停止呼吸""一招，恐怕就是最大的魅力了吧。
嗯，倩女幽魂2中的定身咒也很棒，一起亂入吧 :D
之後的文章將不時的穿插這些作品的心得跟整理。
[電影] 鬼打鬼
http://suling213.blogspot.tw/2011/12/blog-post.html
Re: [討論] 林正英電影
https://www.ptt.cc/bbs/movie/M.1511870944.A.EA9.html",,"['題材的決定', '預計清單', '參考文章']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192289,自我挑戰組,0,菜鳥工程師初體驗系列,1,php＋資料庫＝後端工程師？,YChia,https://ithelp.ithome.com.tw/users/20106219/ironman,1513723028000000000,172,"您好 您已錄取後端工程師一職 下週三報到可以嗎？
當初在 w3School 依據ＰＨＰ的教學 簡單的做了個沒有後台 存抓ＤＢ資料的網頁
匆匆的面試 匆匆地找到後端工程師的工作 （有洞快跳 跳了快補）
面試時 也還不清楚ＰＨＰ語言版本差異 開始了 一段奇幻大冒險
探索 求知 求救 絕望 繼承人 培育 離開
接下來的30天 想把一年多來的心得記錄下來
然後觀察自己的學習路徑 再往下個目標走去",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192004,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,15,15.單元測試衍生的題外話—技術債(待補完),依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1513722912000000000,160,來不及發文，先卡位,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191595,自我挑戰組,0,iflen(learning.python)==30:系列,16,Day16-Built-inTypes-Recap,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1513722506000000000,152,,,['參考'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192309,SoftwareDevelopment,0,在Mac上開發.NetCore系列,1,Day-1閒話家常,900pro,https://ithelp.ithome.com.tw/users/20103426/ironman,1513722457000000000,170,"話說...這是在下第2次參加鐵人賽了
想到上次很有幹勁的打算開始寫...
結果沒想到第二天就敗給了饒河夜市的美食了...
後來雖然還是決定繼續寫下去
但是...敗給了尾牙= =
本來由於去年的挫敗，今年不想參加了
但...在這裡要多多感謝好友團的支持!!
所以才能在這裡與大家繼續閒話家常
也請大家多多期待嚕!!
請多支持2018 新年快樂的眾鐵人文章",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192307,SoftwareDevelopment,0,每天Racket3分鐘系列,16,"(display(call/cc(lambda(day-15)(day-15""天下第一奇招—Racket的Continuation""))))",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1513722437000000000,157,"沒錯，這真的是我第一次學到 Continuation 時，心裡的 OS，這啥？
我們先來看看大家怎麼說：
Whenever a Scheme expression is evaluated there is a continuation wanting the result of the expression. The continuation represents an entire (default) future for the computation. [1]
當一個 Scheme 的 expression 執行時，便有一個 continuation 會獲取這個 expression 執行的結果。而這個 continuation 便代表了 expression 運算流程所有接下來的進程。
A continuation is a value that encapsulates a piece of an expression’s evaluation context. [2]
Continuation 就是封裝了 expression 執行時的上下文環境。
During the evaluation of a Scheme expression, the implementation must keep track of two things: (1) what to evaluate and (2) what to do with the value. ...
We call ""what to do with the value"" the continuation of a computation. [3]
當 Scheme 的 expression 執行時，執行平台必須保持追蹤兩件事情：一、要執行的對象；二、執行對象值的操作...而我們稱 「執行對象值的操作」為每次運算的 continuation。
或許可以在腦袋裡想像一下，一個 function 在執行時，或各位在呼叫一個物件的 method 時，執行一半，然後停下來，把控制權交出來給別人，然後在後來的某個時刻裡，又再重新呼叫，繼續執行完。
好，這很像什麼呢？很像作業系統的行程管理。Continuation 強悍之處，在於 Scheme 與 Racket 把它當第一級物件來傳遞，可以很容易地實現這種 preemptive 的行程管理機制，也可以說是一種 coroutine。
我們再看 R6RS 接下來的說明：
The call-with-current-continuation procedure allows Scheme programmers to do that by creating a procedure that reinstates the current continuation.
The call-with-current-continuation procedure accepts a procedure, calls it immediately with an argument that is an escape procedure.
This escape procedure can then be called with an argument that becomes the result of the call to call-with-current-continuation.
這段看不懂沒關係，我們用一個簡單的程式來說明：
這個 call-with-current-continuation（簡寫為 call/cc） 是一個函式，把它安插在函式執行過程中，可以捕捉到函式執行當下狀態的 continuation。而 call/cc 的參數，是一個 lambda 函式，這個 lambda 也要接受一個參數，這個參數稱 escape procedure ，這個 escape procedure 也可以接受一個參數，作為 call/cc 的回傳。
我們在這個簡單的加法運算裡面，看到了一個簡單的 continuation 的使用，而在很早之前的說明中，我們談到了在 Racket 裡所有的運算都是函式操作，因此可以想像一個這樣的 AST：

當然，+ 的後頭可以接很多個數字，但我們在此先用兩個。而我們設定的這個 call/cc，正是在第二個參數，像這樣：

這個最後帶進 esp 的 5 成了 + 的第二個參數，然後順理成章地完成了計算。
我們擴充上面的概念，再來寫一個範例：
我們先宣告了一個 cc，給它什麼值都好，Racket 與 Scheme 是弱型別語言，亦即你後來可以把它指定給其他型別的值。然後我們在 call/cc 裡頭，多加了一段 (set! cc esp)，把這個 escape procedure 指定給 cc，接下來跟上面一樣。但我們拿到 cc 後，就有趣了，你可以傳給 cc 任意數字，它會回到剛剛那個 expression 的狀態，重新執行一次 (+ 5 ?) 的結果。這就是 Continuation 的基本概念。
雖然很難理解，可是沒關係，不要卡在這裡，明天我們繼續討論 Racket 的 Continuation 與幾個經典的應用。",,['1. Continuation！你在說啥？'],"['R6RS', 'Racket Guide', 'TSPL4']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192138,自我挑戰組,2,工程師職災的認識與預防系列,1,就是個前言,rabbitlai,https://ithelp.ithome.com.tw/users/20107803/ironman,1513722171000000000,220,"以一個物理治療師的身分，來參加工程師的活動，好像誤入叢林的小白兔(?)
不知道該寫什麼開場，就直接進到正題吧~
我預計會寫到的內容大概是
關於姿勢─正確的站姿、坐姿、睡姿。
關於工作─正確的使用電腦姿勢、辦公室伸展與核心訓練。
關於生活─吃飯、洗碗、做家事、搬重物都有可能有受傷風險。
關於傷害─分項介紹各種傷害的成因、預防及緩解。
尤其是工程師或一般久坐上班族常見的傷害，如肩頸痠痛、下背痛、網球肘、腕隧道症候群、膝蓋痛、手麻腳麻等等。
關於日常─可能會有一些跟主題無關的碎碎念。
但是每篇的內容不會太多，因為要撐到30天，請不要太期待，哈哈。
大guy 4這樣。掰掰~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192304,SoftwareDevelopment,0,如何讓程式碼告訴你他在做什麼?系列,2,Day0-在開始之前~說來話長阿~~,dcvsling,https://ithelp.ithome.com.tw/users/20107411/ironman,1513721739000000000,200,"一開始在想這個主題的時候，雖然都已經想的八九不離十了
但真的開始要寫的時候發現，怎麼寫都似乎寫的會讓人不怎麼懂
再加上過去有一些與人溝通上的問題(總是被說太過抽象)，所以一直想不到要怎麼去一一描述
不過後續因為在寫一個Project 時突然想到
也許已這樣的方式(接下來的文章會表現)，會是最好的描述法
除了是一個較為實際的案例外，我也可以再一次的重新檢是我的作法與思維
如果有需要我多加描述或解釋的部分，請別客氣隨時歡迎以個角度各管道指教
畢竟接下來的內容並不見得是完全正確，有多半是一個個人心得的累積 (而且還可能經驗值不足!? XD)
所以～開始囉~~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192272,ModernWeb,0,Confluence線上協同作業之平台系列,15,page的評比,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1513721557000000000,177,"透過PAGE的瀏覽率可以看出那些文章有較多的人在瀏覽，那如果要細看這些PAGE的各自喜好程度的話，則可以透過
Ratings for Confluence(https://marketplace.atlassian.com/plugins/com.adaptavist.confluence.rate/server/overview)來看出這些文章的各自喜好程度為何，它可以讓使用者來為這些文章來做評比，而要如何來在每篇文章中來加入此plugin呢？它的設定方式會有一點類似viewtracker的使用，可參考下列的說明
而可以在global tempate中來調整rating macro的顯示位置，參考如下圖的簡視圖

如此使用者在每一篇page中就可以來評分，看這篇文章有獲得幾顆星的評價

版主則可以在每篇文章總共得到幾顆星

如果有版主想知道那些文章比較舊了，使用Auto Wiki Gardener(https://marketplace.atlassian.com/plugins/com.atlassian.confluence.plugins.auto-wiki-gardener/server/overview)，可以達到此功能。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192282,自我挑戰組,0,再戰軟體工程系列,5,『等價類劃分法』--談測試的基本：快速建立所有可能案例,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1513721505000000000,240,"撰寫本篇文章是因為在一個讀書會當中，聽到了成員分享邰曉梅老師在著作中提到的觀念，雖然他不是該章節的重點，但是可以快速幫你已安全的方法，列出所有可能的測試案例。這個測試案例，可以不只手動測試適合使用，想要做出高覆蓋率、高品質的單元測試或整合測試，等價類劃分法也可以幫上大忙。
簡單來說，等價類就是找出可以影響測試目標(可能是單一函式，一個模組，或是系統的一個完整功能)的所有變數，同時把程式的邏輯抽出來，最後將這些邏輯一個一個拿出來檢視，看所有變數的值各自落在哪裡時，這個功能會吐出什麼結果。
很難懂嗎？代表你很正常。我們接著往下看：
我們在一次把前文中我的妹妹找對象的例子拿出來，還記得他列出的十個條件嗎？天啊！要為這個程式建立測試真的太可怕了。不過沒關係，我們一項一項看。在這之前，我們來介紹除邏輯以外，等價劃分法另一個觀念：變數。
當我們檢視每一個單一變數時，它都可以最粗略地分類成為兩類：
舉個例子吧！
第一個變數是""有錢""，所以isRich的有效等價類就是true，無效等價類就是false。對了！聰明如你，一定就可以應變，舉一反三地知道第二個變數""帥""的有效等價類就是顏值(facePoint)大於90，無效等價類就是90分及以下。
好了，以此類推，你應該就可以接著走下去了。等你把10個條件都列完以後，你應該會得到一個[二元樹]http://btechsmartclass.com/DS/U3_T3.html)，就像下圖所示：

太好了！代表你的資料結構老師沒白教！如上圖，從I~P都是我們把所有條件都衡量後，所有可能的結果。同時，聰明如你，一定也發現了，就我們這個測試目標的邏輯來說，只要第一個條件無效，後面都不用再看了，也就代表從第二個變數開始所有值都是無效值。如此一來，這棵二元樹就會變成一個非常""偏斜""的樹。如此一來，需要驗測的情況又更少了。太好了！這又代表你的演算法老師沒白教！
到此打住，我想最粗淺最粗淺的等價類劃分法你已經有了基本概念。上網google有很多資深老司機會教你怎麼應用，這不用我這個半路出家的工程師在這邊班門弄斧。但是！你發現了嗎...
還記得我們解完波動拳後，又用一篇文章介紹怎麼消除DataClump嗎？忘記沒關係，按我簡單複習一下先。這時，解耦合的價值來了。因為我們用建立Man這個獨立物件的方式來改寫了這段邏輯，除了可讀性增加以外，同時等價類的數量也是一口氣下降到只剩4種喔！怎麼辦到的？很簡單，因為我們已經把所有變數對邏輯的影響藏到同一類別的4個method裡面了，於是你只要討論這四個條件的有效與無效值就可以了。當然，你也可以依樣畫葫地每次都從同一個等價類的可能變數值中random出一組來進行測試，以增加信心。
瞧！解耦合是不是一舉多得！",,,"['邏輯抽象化', '變數的值', '好處', '解耦合的價值來了']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192303,SoftwareDevelopment,0,如何讓程式碼告訴你他在做什麼?系列,1,Day-1是程式？還是語言？,dcvsling,https://ithelp.ithome.com.tw/users/20107411/ironman,1513721415000000000,196,"也許是開始工作時遇到的困境的緣故，在下對於程式的命名與語意有些許的研究
也嘗試使用甚至創造過各種不同的撰寫方式（當然還包括那些寫完才發現沒異議後全部刪掉的Case)
並且在有限的時間與能力下去盡可能的探索各種寫法及其目的
但看來看去，身為一個懶人開發者
我自己是很推崇一種風格或規範
這個風格與規範，對我而言他減輕了一個負擔
也就是透過這樣的規範讓你寫出來的東西不再是一個程序型的描述
而是一種吻合規劃或開發者心裡面所要
這也是其中一種，從問題為考量出發點，而不是從使用語言為問題考量出發點
那回到標題上所說的我們用的是命令機器的程式，還是描述決方案的語言?
國外的討論議題中，有一項叫做人類可讀的編成方式
以我自己的解讀，這個方式的最高目標應該是任何人皆可讀，而不是僅僅開發者可讀
這種目標也許看起來遙遙無期，但是其實從很多面向都可以看到這件事情
例如 :
先別描述太多，程式碼才是工程師心靈交流最深的東西，所以接下來我們就實際來看Code吧",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192297,DataTechnology,0,DataScience到底是什麼-從一個完全外行角度來看系列,1,[DataScience到底是什麼-從一個完全外行角度來看][01]開篇,AlanTsai,https://ithelp.ithome.com.tw/users/20083151/ironman,1513721157000000000,221,"
圖片來源：https://pixabay.com/en/books-spine-colors-pastel-1099067/ 和 https://pixabay.com/en/math-blackboard-education-classroom-1547018/
又到了新的一屆鐵人賽，這次和之前不一樣的是，多了團隊模式。然後，不知不覺就組成了一個團隊.... 失敗的話應該會永遠被釘死吧。
所以，為了不被釘死，要好好努力來寫啦，已經被警告，別像去年那樣，待補，結果和卡債一樣，永遠翻不了生（雖然到目前為止還在努力的補當中）。
那今年的主題是什麼呢？不是新的程式環境（OS: .Net core哪去了？)，不是延伸去年內容打造更完整的建制環境（OS: 整合docker的DevOps哪去了？），而是一個完全不熟悉的領域，Data Science（資料科學）。（如果你是工程師，那麼別錯過 1/6 在台大的 Study4.TW Study4Love - 與大師對談。）
今年的題目是：Data Science 到底是什麼 - 從一個完全外行角度來看
同步發表於我的部落格：http://blog.alantsai.net/2017/12/data-science-series-01-introduction.html (部落格的格式會漂亮一些，ithome不支援html好不方便）
先給各位我的背景，我其實是一個一般的Web Developer，主要使用微軟的技術，所以都是.Net、Asp .Net這些東西。從我這幾年參加過的鐵人賽可以看出，算是剛脫離junior的階段：第六屆跑去寫了java：，第七屆寫了如何自定自己的框架， 第八屆寫了建制Devops （也是滑鐵盧的一屆，努力還債中....），今年本來是想延續去年的主題，然後進入到Docker整合DevOps。
不過剛好在最近，因為想了解大數據（Big Data），然後有去上課（如果大家有興趣，然後在台中，可以參考看看， 最近1月也會開課：鏈接），剛好認識了Data Science的整個big picture。
不得不說，我有點 震撼 到，因為雖然一直以來都有聽到：Hadoop、Big Data、Machine Learning、Internet Of Things這些詞，然後也模模糊糊知道在做什麼，但是並不知道整個組合起來對 世界正在造成什麼改變。
雖然大家可能常常聽到，我們實在經歷 工業4.0 的工業革命。但是可能我們比較沒有意識到的是，每一次工業革命其實都是對整個世界的巨大改變。而Data Science正是推動工業4.0的其中一個主要的推手。

工業革命的大事記。來源：台灣轉不動工業 4.0，如果企業經營者不丟棄成本思維
既然這麼重要，那麼正經歷變革的我們難道不需要有些了解嗎？大變革就像大海的巨浪來襲，是要準備好能在裡面游泳存活下來，還是因為措手不及而淹死？
所以，雖然對於這個領域完全是外行，而且對於我的工作上面也沒有什麼直接幫助（反而要花時間去了解），但是不記錄的話估計一個月就忘光了，因此想要借這個機會把學習到的做一個整理，方便以後回來看。
這個系列是給完全不了解這個領域的人看的，所以假設你有聽過Data Science（沒聽過更好）但是不知道在做什麼，那麼這個很適合。會從底層的資料到上面的Machine Learning做一個入門總覽介紹。
如果你是大神級人物（對我來說任何懂Data Science都是大神 XD），那麼也麻煩不吝指教。
整個 Data Science 其實就是在建立一個 預測模型，讓決策者可以依照這個模型去制定策略。Data Science工作就是讓這個預測模型能夠非常準確。要達到這個效果，有好多知識和技能一起組合使用才能達到。
這個系列大概會拆幾個部分：
整個的浪潮會掀起其實是因為Big Data能夠有辦法用一般電腦來做處理。因此，會先從這個部分先介紹，包含：
有了資料了之後，接下來就是對資料做處理。這邊會用R來介紹：
有了乾淨的資料，可以來了解如何透過machine learning建立模型做出預測：
基本上只需要一般電腦就好，這邊範例會使用一般的Windows 10的電腦做操作，如果要在Hadoop也跟著做的話，那麼電腦記憶體要高一點，因為會用建立VM的方式架設Ubuntu。
至於後面用到的R基本上一般電腦都可以裝，所以沒有特殊要求。
希望這篇讓大家有個概念，Data Science 很重要，Data Science 很重要，Data Science 很重要。
想想，如果在做決定的時候，透過預測模型，可以讓你本來成功幾率，從-11%到+6%有利，那麼翻個幾次不就整個成功了。
下一篇，從Data Science開始介紹 - 先來了解什麼是Data Science。
今年的團隊機制不知不覺就集合了10位隊(坑)友 - 大家幫忙多多關注別不小心我們就gg了 XD
** 一群技術愛好者與一名物理治療師的故事 提醒著我們 千萬不要放棄治療 **
沉浸於.Net世界的後端工程師，樂於分享，現任台中Study4成員之一。除了程式以外，就愛看小說。
歡迎有任何問題或者建議都可以告訴我，可以再以下找到我：
部落格：Alan Tsai的學習筆記
我的Linkedin
我的粉絲頁
我的github
我的Slideshare
我的Twitter",,"['為什麼想寫這個主題？', '這個系列的主要程度和內容？', '需要準備什麼環境？', '結語', '小小介紹我們團隊成員', '小小的自我介紹']","['Data Science的概觀', 'Big Data的概念和Hadoop', 'Data Processing - R 語言介紹', 'Machine Learning - 做出預測模型', '總結']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192300,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,17,什麼是Browserlist？設定Autoprefixer、Stylelint來支援你想要的任何瀏覽器！,"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1513721048000000000,187,"Hi, 大家好
昨天我們在介紹 package.json 的相關設定時
有看到一欄不是 npm 預設的欄位
這個套件我沒有自己設定過
直到昨天看到，想搜尋看看功用
不過他的官方文件第一眼看的時候還滿不懂的
後來查文章，也還是有點看無
https://css-tricks.com/browserlist-good-idea/
(所以我想說今天終於懂了，來寫篇教學)
他其實 GitHub 上的介紹就有寫到了，不過第一時間比較難讀懂

Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env.
『用來在不同的前端開發工具之間，分享指定的目標 Browser。像是 Autoprefixer，Stylelint，和 babel-preset-env』
基本上這邊提到一個關鍵字『Targer Browser』(目標 Browser)
如果這邊有使用過 Autoprefixer Stylelint babel-preset-env 的人應該馬上就懂這個套件在做什麼了
這個套件是我們前幾天提到
前端開發生態系眾多『Transpiler』(轉譯器)的其中一項

舉例來說，像是
這個 css 屬性好了
如果我們上 Can I Use 去找

會發現現在 IE 11 不算是正式支援
正式支援代表你直接寫 display: grid; 要不會壞
不過假設瀏覽器覺得這個屬性太新
他會先在這個屬性前加上自己的 prefix (前綴)
代表他認為這個屬性還在實驗範圍內，瀏覽器還不想正式支援
像是如果你想支援 IE 11 的話
你必須寫兩行

display: -ms-grid; 這行是給 IE 11 看的
display: grid; 這行是給其他瀏覽器看的
像是因為有些功能支援性較差
你所有前綴都寫過一次，會很辛苦而且繁瑣

備註
-webkit- 給 Chrome 及 Safari 的前綴
-moz- 給 Firefox 的前綴
-ms- 給 IE 的前綴
像是 autoprefixer 的功用就是
他會自動幫你把語法都編譯成所有瀏覽器都支援的語法

這個工具是一種 linter
如果對 linter 不熟悉的話，他就是一種語法檢查工具
可以幫你看你有沒有寫錯，或是不符合 coding style
去年有一篇介紹 Lint 工具寫的超棒的 https://ithelp.ithome.com.tw/articles/10184924

基本上他是一份設定檔，所以也可以給編輯器讀
讓他跟你提示有哪些 css 語法是不支援的

這個我會想放到後面做介紹，因為 Babel 是一個很大的主題
如果前面細心的人，應該可以想到一個問題
「Autoprefixer和 stylelint，如何決定要不要提示你不支援 or 要不要轉譯的」
答案是:
他們都有相關的設定，可以調轉譯器(autoprefixer)和語法檢查(stylelint)
要嚴格到什麼程度
autoprefixer 的設定會長的像是這樣

這個行的設定意思是
「請包含所有使用率 > 1% 的瀏覽器，並且支援該瀏覽器最新的兩個版本」
參考資料:
https://evilmartians.com/chronicles/autoprefixer-7-browserslist-2-released
stylelint 的設定也長得差不多

你一樣可以去調整你要支援多少 %使用率以上的瀏覽器，以及版本到哪邊(stylelint 本身也可以忽略特定的樣式不做語法檢查)
參考資料
https://github.com/ismay/stylelint-no-unsupported-browser-features
如果去讀文件說明的話

這些瀏覽器幾 % 的資料，都會是從 Can I Use 上爬來當作參考的(Can I use 的公信力真大)
現在我們有兩個工具要做設定
而且他的設定內容很接近
都是選擇要支援哪些版本的瀏覽器
今天一個 production 的專案，我們常常是很嚴格地希望 90% 以上的使用者都可以看到正常的網頁
所以各種 linter 轉譯器一定不會少
Browserlist 的功用很簡單
他試著創造一個設定檔
可以用來給你想像得到的工具都引來使用
這樣可以避免花很多時間在為不同工具調整成同樣的目標瀏覽器配置
備註: Browserlist 當然也是使用 Can I Use 來當作參考數據
Browserlist 套件的相關設定語法介紹

Browserlist 會使用下列來源來當作他的設定參數
Browserlist 支援的版本選取語法
browserlist官方文件 https://github.com/ai/browserslist
Can I Use https://caniuse.com/
Browserlist 介紹文 https://evilmartians.com/chronicles/autoprefixer-7-browserslist-2-released
CSS-trick 上的介紹文 https://css-tricks.com/browserlist-good-idea/
列出你的 Browserlist 語法會選到的瀏覽器 http://browserl.ist/
AutoPrefixer 官方文件 https://github.com/postcss/autoprefixer
PostCSS 也是一個有趣的專案，後續有機會介紹 https://github.com/postcss
Stylelint 介紹 https://css-tricks.com/stylelint/
很棒的 Linter 介紹 https://ithelp.ithome.com.tw/articles/10184924","['什麼是 Browserlist ?', '沒用過 Autoprefixer Stylelint babel-preset-env ?', 'Browserlist 解決的問題', '問題', '所以', '備註', '參考資料']","['Autoprefixer', 'stylelint', 'babel-preset-env']","['autoprefixer 的設定', 'stylelint 的設定', '這些使用率幾 % 的數據從哪來？']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192280,自我挑戰組,0,漫遊前端系列,1,參加前言,a089069,https://ithelp.ithome.com.tw/users/20107854/ironman,1513721021000000000,187,"這是第一次參加鐵人賽，平常都是看各位邦友們大展身手，沒想到我也有站上這舞台的一天。
雖然都說眾在參與，如果能拿到獎當然就更好啦XD
目前預計只有十天的存稿，希望能堅持完這三十天，大家一起加油吧!!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192211,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,16,"[Day16]我們來學Node&ExpressJS吧,先來個CRUD",dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1513720852000000000,189,"我react 學完, 那我想說來學一下後端的技術. 那我選node 因為 node 跟javascript 是一樣的所以我不需要在學一個新的語言. 我可以專心理解後端的技術跟觀念. 所以我們開始吧. 我那時候用Express 做了 blog, 購物車, facebook 聊天機器人, 認證系統
NOSQL 代表 Not only SQL, 但是你還是可以用 SQL 的功能譬如 primary key, index, relationships. NOSQL存檔的格式就是JSON格式(key-value pairs). 所以跟 Javascript 還滿合的. 聽說一開始node是沒有支援mysql.
NOSQL 的優點
　　1.分散(distributed)-例如有些noSQL可以在不中斷資料庫運行的情況擴充database空間
　　2.欄位自由(schema-free)-你不用在一開始即規劃好每個資料庫內要有什麼欄位
　　3.資料格式的一致(eventually consistent)-這是分散式系統的概念，簡單地來說分散式系統node會很頻繁地加入或退出，所以node在進出同時和進出後也要維持資料不會出錯
　　4.支援大容量的資料庫運算-有時可能會到以TB為單位
適合用在: 大數據, 讀很快, 寫很慢
我在demo 裡面我會用mongoose, mongoose 是一個mongodb的ORM. 基本上會提供一些方便的API讓我們更容易寫SQL指令
ExpressJS 是nodeJS 裡面最普遍的框架. 其實很多其他的框架的底成也是用express 寫的(Sail.js, Keyjones.js). Express 是一個很輕量的框架, 很多東西都要自己來, 但是這樣也不錯就是我們可以真的了解code實在做什麼.
我會用我的blog 專案來demo. 連結
安裝mongoose
在App.js設定連結
用 model/post.js 建立一個 schema(欄位)
去mongo shell 輸入假資料
在routes/posts.js 寫出相對的CRUD 路徑
產出需要的view
index.ejs
addPost.ejs
editPost.ejs
showPost.ejs
Delete 我要拿出來講,因為做法不一樣, 我們這裡用AJAX 的方式, 然後有成功的話就會回來 /posts. main.js
以上就是我們如何用express做CRUD, 我這裡帶過整個code, 我知道很多基本的觀念我沒有講解. 如果要寫可能寫不完. 如果看不懂, 可以參考我的github repo. express-blog",,"['背景', '教學', '總結', '參考文件']","['Database NOSQL', '框架 express']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192277,SoftwareDevelopment,0,來做個網路瀏覽器吧！Let'sbuildawebbrowser!系列,9,Mozilla/Servo瀏覽器引擎開發環境架設,微中子,https://ithelp.ithome.com.tw/users/20103745/ironman,1513719906000000000,213,"連續好幾天比較硬的解說文章，今天插入一篇比較輕鬆的文章。雖然是介紹 Servo，其實本篇也可以當作 Rust 的環境架設，因為使用 Rust 第一名的專案是 Servo，你說呢？ＸＤ
此專案由 Mozilla 贊助，並以全新的系統級程式語言 Rust 編寫，Servo 專案旨在實現更好的平行化、安全性、模組化以及高效能。
想了解更多可以進官網看，開玩笑的 030 ，想從官網了解還不如訂閱我的文章 XD 我是說真的，官網真的沒啥內容，不過還是要推銷一下，因為是我翻譯的喔！
Servo 詳細在幹嘛，技術細節、突破留到以後的文章再說。 汪！汪！

因為 Servo 幾乎都是用 Rust 寫的，所以我們很大部分在設定語言的環境。
Rust是一個由 Mozilla 主導開發的通用、編譯型程式語言。它的設計準則為「安全，並行，實用」支援函數式、平行化、程序式以及物件導向的程式設計風格。
安裝 Servo 的環境參考 README 做就好，因為各系統做法差異很大，直接照文件做最快。不過這邊還是貼上 macOS, Ubuntu, Windows 的做法。
首先你要有 brew，可以透過 App Store 下載 XCode，就會順便一起裝了
原本文件是寫裝 VS2017，這邊我建議裝 VS2017 build tool 就好。這是我花很多時間得出的心得，官方文件的這個方案也是我改的。不過後來我都不用 Windows 開發了。
cargo 是 rust 的套件管理器，這邊我們要安裝 racer 才能自動提供語法建議
為了讓 racer 可以正常執行，我們要取得 Rust 的 repo，我們把它放在 home
接者更改 VSCode 的 setting.json，左下角有個齒輪，點擊就可以看到。加入這兩行。
接著你就可以享受 rust 的 IDE 環境囉！開發 Servo 也變更加輕鬆，事實上因為 Servo 檔案已經非常多，不使用智慧連結的功能找函數定義會找到死，此外語法支援對開發來說只會更方便。
希望對大家有幫助，大家明天見！
關於作者
劉安齊，軟體工程師，熱愛寫程式，更喜歡推廣程式讓更多人學會",,"['Servo', 'Rust', 'Envornment', 'Rust']","['取得 Servo', 'macOS', 'Ubuntu', 'Windows', 'Rust', 'IDE']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192290,自我挑戰組,0,30天的切版日記系列,16,Day16:1/2,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1513719872000000000,182,"看標題就知道是偷懶用的文，當然要坦白說“之後應該也懶得補”。
主要是年底快到了，總是很忙碌。
學會了下次若還參賽，就要先準備庫存文章 XD。
最近發現慕課網開始有些收費課程了，記得以前都是看這裡學做網頁的，這是我覺得還不錯的大陸網站，還有一個是極客學院，許久沒上來看也豐富許多。
因為之前曾在大陸求學生活過一段時間，用詞跟裡面老師的各種鄉音還算是比較習慣的，不過因為每個老師各有各的風格，在聽的時候仍然偶爾有點負擔就是了。
這兩個網站都有用職業路徑或難度來安排課程的機制，慕課網我是在它剛開始的時候就加入會員了，還成為了“慕星人” ，就是能夠在他們開發還在測試課程或功能就能搶先使用的那群人，當他們知道我是台灣人的時候，就說：
“ 你們台灣有沒有什麼類似慕課網的網站？”
“ 推薦給我們看看吧  彼此交流一下 ”
好多年前的那時候慕課網所有課程都是免費的，機制也算完善，一時之間還真找不到類似的網站，且即便有，課程數量也不多，總覺得輸了啊～這麼說也不是想要長他人志氣，滅自己威風，就是希望台灣也能有這種平台，我們也能用著自己人開發的plugin，不管自認多簡單無聊的問題，都能提問，也有人認真回答，有那種一起進步的環境。
目前台灣的話，大概就是六角學院 , 這下子我也有個能推薦給他們的網站了。
另外，台灣似乎也喜歡在 youtube 創作教學主題的頻道，語言、做菜...這類的，資源總是很多啊。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192254,自我挑戰組,0,用laravel尻出自己形狀的linebot，還要撐三十天！系列,14,【第十四天】今天簡單做,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1513719701000000000,172,"先回顧一下昨天的部分，有地方要調整。
在deploy到heroku之後在推送slack訊息時會噴掉！
原因是在於Laravel 5.5也有在helper裡面做一個transform，接著他們就會互相打架了！
接下來就看各位是想要用laravel提供的或是用Yish大大的了，或是也可以都不要用(參考)。
好像也是有做法可以去調整，以下可以參考！但這邊不花時間去try了～
好像很多慣老板會這麼說：搞什麼這麼麻煩？能動就好啦！
其實本質上要做的事情是一樣的，各種用法看各自喜好了。
沒錯！接下來就是快速把之前爬的漫畫套到slack上！因為接下來還想推twitch實況咧！
好了，漫畫完成！今天速度比較快～詳細可以看這份PR
如果實作完成就可以第一時間Follow我們追蹤的實況主了～耶！
該是來研究的時候了，先來玩大家來找碴吧！我們要先分辨出實況開台中和關台時的差別有什麼！
這是小熊關台時
這是Faker開台時

那我們來試試看吧！
矮唷～水喔！只有一個！

對照一下！

好啦～剩下就只是訊息要組什麼資訊的問題啦！
今天時間到啦！那剩下我們就明天做囉～",['【第十四天】今天簡單做'],"['回到今天正題！', '該換twitch了！']",['恩～看來最好處理的就是這個了！'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192284,自我挑戰組,0,Kaggle的解題挑戰系列,6,[Day06]Kaggle的解題挑戰-Kafka實作,BillLin1983,https://ithelp.ithome.com.tw/users/20103074/ironman,1513719464000000000,153,"可惜第6天中斷了，不過我還是會盡我最大的努力完成30篇了。
雖然大數據處理不算是Kaggle解題的一部分，但在實際應用上，也算是正相關的技術。
1 下載Kafka 1.0最新版本，並解壓縮
https://www.apache.org/dyn/closer.cgi?path=/kafka/1.0.0/kafka_2.11-1.0.0.tgz
2 啟動Zookeeper

3 啟動Kafka
bin/kafka-server-start.sh config/server.properties

4 建立和查詢Topic test
新增Topic
查詢Topic

5 傳送和接收訊息
傳送訊息
接收訊息


第10-18行，主要就是設定Produce的properties，第20行，建立Kafka Producer，第21-22行，發送100則訊息到指定的topic，produce是thread safe的，因此，在實際開發時，使用單一個instance也比較有效率，第24行為關閉producer。

第10-16行，設定properties，第17行，建立Kafka Consumer，第19-23行，為不斷的接收訊息並將其印出，第20行，為取得資料並等待100 ms。
我並沒有實作到cluster和新的connection和stream的功能，因為就官網上的例子，還蠻簡單的，但，我想比較符合production的應用是如果部署幾百台和進立設備監控，但這又有點偏Devops，暫時先跳過，各位有興趣的可以自行研究，另外，其實我沒有鑽太多底層的觀念，有些觀念其實也還蠻重要的，有興趣的人可以看我的參考資料，至少要知道partition如何達到分佈式這式，其實我後來才懂的，明明有不少東西是可以建cluster的，那為何還要使用某些大數據的技術，其實就是機器數量上的差異，使用Kafka是可以到上萬台的設備的。
Kafka深度解析",,"['Kafka環境建置', '程式實作', '後記', '參考資料']","['Producer', 'Consumer']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192287,DataTechnology,0,Python自習手札系列,4,Python自習手札(4/30):親切的繁體中文變亂碼,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513718882000000000,165,"昨天在寫註解手札的時侯，在註解欄位輸入親切的繁體中文......
跑跑跑的時侯，出現了神秘的幾行文字......
問卦股狗大神之後，得知亂碼是編碼錯誤造成的......
python原始碼默認使用ASCII編碼，當腳本中的字符出現ASCII不支援的部份，而使用者未指定編碼方式就會出現亂碼現象。(原始碼編碼需要與顯示程序編碼一致。)
原來腳本包含註解，都需要符合ASCII編碼或指定其它編碼方式才能正確顯示。
還以為，註解可以任意的使用字符標示，原來著個想法是錯的。
在原本的腳本上，加上著2行字符，指定編碼方式。
後來就順利執行啦~^^~

===參考/引用資料來源===
https://read01.com/NyeP3z.html
<<<更換主題原文重發>>>
原文https://ithelp.ithome.com.tw/articles/10191243",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192185,ModernWeb,1,Go！從無到打造最佳行動網站系列,9,Day9純、手工系列Go(BeeGoTool篇),網襪工程師,https://ithelp.ithome.com.tw/users/20107302/ironman,1513718788000000000,184,"昨天介紹了beego這套golang的framework的安裝與測試，今天要更認真介紹他，由於這次的主要是要使用API實作，所以並不會使用到view，很貼心的beego有考慮到有人會拿他的framework 來做API的部分，
還記得昨天我們練習的範例嗎？我們透過指令來產生新的測試環境
今天要來筆記的是這個bee tool的使用方式，當然你必須使用他們的framework。
官方文件上，有完整的說明
這次鐵人賽想要練習寫Go的API
透過bee的指令我們先產生一個API的專案目錄，使用api後面加上這次的專案名稱，產生這次的專案
你會看到在你的Cmder上面會有工具自動幫您產生許多的檔案，這時候工具會在$GOPATH/src/下幫您自動產生檔案，檔案的目錄結構如下
相對於我們昨天用bee new產生的相比，少了static跟views，可是多了一個test目錄，他可以用來幫忙協助做單元測試用。
來測試看看吧！
再來打開瀏覽器，輸入 localhost:8080/v1/object，是不是能看到有東西呢？

(在Cmder中你可以看到會有許多的資訊)

如果以上的步驟都做對了，你會看到這個畫面
如果你測試完了以後，需要關掉時記得使用Ctrl+C來中斷 bee run喔！
阿！今天還有一個沒有提到，在安裝bee tool的時候，會產生一個檔案叫做 bee.json，這個設定檔可以針對這個工具進行一些設定，例如版本的檢查、預設資料庫、環境變數...等等。如果後續的開發中有需要設定，會再將設定的內容分享給大家。在官方文件中也有做詳細的說明。老話一句想了解更多請自行閱讀。
最近真的忙到一個沒有時間減肥阿，想到這邊真的覺得很心酸，到了年底不知道大家是不是也都常常要加班呢？今天減肥專欄休息一天。真的太忙了啦！！！
穿出去的網襪太耀眼，那就穿膚色的吧！
因為沒有人會看得到。
By 網襪工程師
",,,"['BeeGo Tool 篇', '減肥專欄', '每日一句']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192285,Security,0,從接電話解任務開始到進入資安領域邊邊系列,4,接電話解任務(4/30):認識網路架構,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513718774000000000,168,"網路架構是基礎中的基礎，務必要熟悉～
#TCP/IP模型，網路架構分為4層，分別是:
-鏈結層Link Layer: 實體層是網路的基本，0與1的傳送與接收。
-網路層Internet Layer: 定義IP/封包如何通過路由器
-傳輸層Transport Layer: 定義傳輸資料走TCP還是UDP，TCP:會檢查資料完整性，UDP:不會檢查資料完整性。
-應用層Application Layer: 定義Client和server的資料交換方法(Http,https,smtp,ftp)
傳送端的資料經過層層打包後，在由接收端反序拆解讀取。
#OSI模型，網路架構分為7層，分別是:
-實體層Physical Layer: 負責管理設備和網路媒體之間的溝通。(針腳,電壓,網卡,主機介面卡...最基底的硬體媒介)
-資料鏈結層Data Link Layer: 負責網路位址尋找、錯誤偵測和改善。當表頭和表尾被加至資料包時會形成影格。資料鏈表頭(DLH)包含有實體位址和錯誤偵測及改錯的方法。
-網路層Network Layer: 定義資料路徑和轉寄，將網路表頭(NH)加到資料包變成封包，網路表頭(NH)包含網路資料。(IP)
-傳輸層Transport Layer: 將轉輸表頭(TH)加到資料裡以形成資料包。表頭包含要用的通訊協定。(TCP)
-會議層Session Layer: 資料傳輸中設定和維護傳送端與接收端之間的通訊連接。
-表現層Presentation Layer: 資料轉換為接收端相容的格式
-應用層Application Layer: 定義與另一應用軟體之間的通訊(http,https,ftp,telnet,ssh,smtp,pop3)
網路分層，層層獨立分工處理資訊，彼此相亙依賴。
符合傳輸模型即可使用，相容性提高了，也更方便靈活運用。
媒介層-
實體層:位元(Bit)
資料連結層:資料訊框(Frame)
網路層:封包(Packet)
主機層-
傳輸層 : 資料段(Segment)
會議層、表現層、應用層 : 資料(Data)
<<<更換主題原文重發>>>
原文https://ithelp.ithome.com.tw/articles/10190890",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192269,自我挑戰組,0,AgileCultureChangeinCompany系列,1,Agile-Day1-TheTeam,Tequila,https://ithelp.ithome.com.tw/users/20107855/ironman,1513717757000000000,213,"每個公司都有習慣的做事方式與方法，那麼新的知識與領域要怎麼導入公司?
相信這是每一個團隊會遇到了問題與困境，但是就少了一種方法來突破困境
希望可以透過像""鳳凰項目ps1""的方式來說明經歷的過程
過去每個公司都習慣於PMP這一套模式來執行專案
不過，近幾年Agile culture的席捲，讓很多公司都知道這個新名詞，
但是對於Agile大部分都保持觀望的態度，既期待又害怕受傷害
沒錯，目前我司也是遇到相同問題，接下來的文章會與大家分享經歷的過程
[The Team]
新人剛進到公司後，沒有快樂的三個月蜜月期
主管Erwin很熱情的邀請我與同仁Tim，提出可以一起研究有趣的主題(疑?不是變相找事情做XD)
頂著菜味的我，當然不會拒絕Erwin熱情的邀約
於是我們馬上召開了一個會議
會議過程中大家透過Brainstong提出自己的想法與想做的事情
如:DevOps,Git,CI/CD,SEO,Agile,Scrum,kanban,Marketing....
在2個小時內大家敘述自己的能力與興趣整理出三大方向
1.Git
2.Agile
3.Web tech
我們很滿意的看著自己的story map，非常高興有個明確的方向
到了隔天Erwin很積極的建立一個Line的群組[E.A.T]
Erwin:知道為什麼要取名EAT嗎?
Andy :你要請吃飯嗎?慶祝成立群組
Erwin:沒有，之前已經請吃過了
Tim  :訂購外食用的?
Erwin:很沒有想像力也，都想不到
(但這也不能怪我們，畢竟公司福利很好，有下午茶與水果
同事們也會互相的團購下午茶，進來不到1個月，體重卻以增加2-3公斤了)
Andy :想不到了，請開式
Tim  :沒錯，不是跟吃得有關，我們也沒有想法
Erwin: 'E'rwin 'A'ndy 'T'im
(很有創意沒錯，但是主管沒有要來個Kickoff meeting的相見歡吃飯感覺就少了一味，
只好在未來的團隊專案中，再想辦法讓他請吃飯了)
接下來，將會針對團隊目標進行分享討論
ps1 :鳳凰計畫是一個IT計畫的傳奇故事，透過小說的方式來敘述IT遇到的故事",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192113,DevOps,2,LearnAzuerin30days系列,1,#1-放輕鬆開賽,Alan.Liu,https://ithelp.ithome.com.tw/users/20087544/ironman,1513717744000000000,412,"嗨,大家好~打給後~胎嘎後~ 又參加了IT邦幫忙鐵人賽
連續三屆參加鐵人賽盛會,我想我一定是瘋了之類的 XD
事實上一直到活動資訊出來前,腦袋中總是突然有個邪惡的聲音傳出:
Study4Love與大師對談,看到大師點下去並且報名就對了
逃避著逃避著~就發現第九屆的鐵人賽官網出爐了,接著協助小財神分享活動資訊於Study4.TW粉絲專頁,原以為這樣就功德圓滿,能夠撒花坐等各大好手系列文章準備好好充電一番了(握拳
殊不知只要參加過社群活動就會有一群熱血的社群好友, 無論如何都會施展推坑無極限,再不瘋狂就等死,@#!#!%#%$#% 等等的特殊招式QwQ
直接將邪惡的小惡魔一腳踢落於無底之中,一股熱血滿腔湧來之類的~於是乎我們立刻開團2018新年快樂並且於FB上開始招募前往偉大航道的夥伴(別人推我入坑,怎能不拉著一些夥伴下海呢 你說是吧XDD)

除了社群好友的推坑之外,主要原因是為未來工作轉移做準備,Coder->Clouder(暫且翻譯為雲上隨時會摔落的人吧LOL),所以為了學好一門技術,或是強迫自己去深入學習,對我而言最快的系統化學習方式絕對是寫文章! 好文分享-91-我為什麼鼓勵工程師寫blog
其次希望能夠靠著這一次參加鐵人賽文章的學習過程能夠成功獲取Microsoft Azure相關認證,不過考證照好貴 嗚嗚
影片也是決定參加的原因之一,今年鐵人賽宣傳非常盛大,不同於以往宣傳模式,還有歷屆得獎者錄製的鐵人賽宣傳影片,真的每一位前輩都句句說到心坎裡,透過學習的過程最後取得完賽,那種完成後的成就感,真的太痛快了

參加鐵人賽的原因有一半是我醒來才發現的(或是說事後再來安慰欺騙自己也行 XD,必須感謝我的隊友於是特地撰寫此區塊,HightLight並且提醒大家交友要慎選(誤,我愛大家),事發當時,我努力敲打著鍵盤,胡亂塗抹即將上線的需求,接著收到一則FB標記通知,就參加了,沒了就這樣(前面到底是廢話什麼我的老天鵝 根本騙字數啊)

隊友清單來也:若對於主題有興趣的朋友也歡迎熱情按下訂閱幫我們打氣,完全不需要客氣喲
近幾年鐵人賽的參賽方式有不少型式上的變動,從之前的分組競賽開始,到今年的組團參賽,除了自我勉勵以外,還能跟靠隊友的提醒與霸凌來完賽<-如果因個人原因團隊參賽失敗將要被PO上FB標記轉貼分享轉貼分享,還要請客吃慶功宴...組團對於我來說真是能夠大大的增進完賽的成功率阿XDD,接下來談談我們開賽時的溝通和提醒模式吧
我們使用Slack當作群組通訊軟體,利用訊息與Poll投票來決議團隊的命名或溝通方式,重要文件與連結的標記,不過考量到部分人員上班較少使用Slack,目前正在投票票選Messager or Line等等

Excel真的是文書神器,搭配Office365轉為線上版本,用來手動填寫進度以及相關資料的收集,最重要的是要求大家留下電話聯絡方式,方便奪命連環摳,以免團隊失敗

其實我還想PO很多張參加鐵人賽頒獎的相關圖片...不過這樣首篇也太長了吧XDD,
那就來一張去年的歡樂照,明年我們頒獎典禮見!
祝各位鐵人都能順利完賽 <3
",,"['輕鬆開賽~先別談技術,聊聊吧', '會參加鐵人賽的原因', '推坑隊友區', '未開賽先開始團隊合作']","['Slack', 'Online Excel', '聊完惹 回顧完賽(茶...老了需要回顧過去RRR']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192278,AI&MachineLearning,0,到底是在learning什麼拉系列,1,[day0]開始之前,nylon,https://ithelp.ithome.com.tw/users/20107448/ironman,1513717164000000000,200,"在開始之前，我不打算來個 Machine learning 緒論，我想跟大家一起看看我選用的教材
從大綱來看看接下來的30天裡面，我們會觸及到那一些跟 Machine learning 相關的細節
這是一堂華盛頓大學在 Couresra 上的課程，這堂課將透過case來學習 Machine learning，分別是
本書扣除第一章外，二到三分別是討論 Machine learning 中最常使用的兩類演算法，分別是監督式學習與非監督式，這兩個章節涵蓋了全書約六成的篇幅，四、五章分別敘述了 Machine learning 處理資料及模評估和參數調整
基本上網路上的技術文章與實體書的編排大同小異，皆是從監督式學習中的 Classification 和 Regression 作為開端，這30天的挑戰也遵循這樣的傳統XD",['開始之前'],,"['Machine Learning Foundations: A Case Study Approach', '精通機器學習使用 Python', '參考與準備:']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192274,ModernWeb,0,學會Elm寫前端系列,2,Elm的安裝,poligen,https://ithelp.ithome.com.tw/users/20107797/ironman,1513716836000000000,195,"今天有點取巧，只有寫安裝，明天再多來談談基本的Elm 語法。
如果不想要安裝想先嚐鮮，也有Ellie這個網站可以直接線上使用Elm
為什麼安裝還要教…其實我只是照慣例寫而已…或是你覺得這一段太無聊了。但請耐心等待。 詳細的安裝其實 官網 寫得很清楚喔，他是一整個platform都有打包成給 windows 的，還有給 mac 的
但是如果你不想要一整包，其實最常用的就是使用npm來安裝了
這樣就有Elm 全家餐了！
這裡推薦使用Ellie線上編輯，可以所編即所得，立刻看到，還可以把你寫的elm，編成js給你。等你真的想要開始好好用Elm，再安裝也還來得及！

這個就像是ruby 的 irb ,可以直接打一些指令互動 。
這裡 有一些很不錯的小例子。
如果你只是想要一個elm 的互動式環境，可以使用這個online 的elmrepl
顧名思義，就是為了安裝elm的套件。
前期還不太會用到。等要打包你整個專案時才會用上，有機會再聊
今日偷懶，明日再多聊！",['安裝'],['我只想先試試？'],"['elm-repl', 'elm-package', 'elm-make 和 elm-reactor']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192273,SoftwareDevelopment,0,簡潔高效的PHP&Laravel工作術：從ElementaryOS下手的聰明改造提案系列,9,第9天：安裝Brave瀏覽器,shengyou,https://ithelp.ithome.com.tw/users/20107229/ironman,1513716481000000000,201,"本文同步刊載於作者部落格：https://medium.com/@shengyou/2018ironman-eos-for-php-developer-day9-a0d6b3900ec1
在這個瀏覽器也是眾家爭鳴的年代，身為 Web 開發者，電腦裡有多套瀏覽器也是很合理的事。最近，一個新的瀏覽器 - Brave 搶到了我的眼球！Brave 是一個強調速度、安全及無廣告的瀏覽器，其使用 Chromium 為基底加上 Blink 渲染引擎，採用開放原始碼散佈並提供三種作業系統的桌面版本及兩種手機版本，從作業系統的涵蓋範圍就可以看出其野心如其名一樣的勇敢。而之所以引起我的興趣，是因為 Brave 的創辦人之一就是知名的 Javascript 之父 - Brendan Eich。
雖然目前 Brave 還在早期開發階段，不過相信您一定跟我一樣好奇，就讓我們在 elementary OS 上安裝 Brave 瀏覽器來體驗看看吧！
我們可以直接使用 apt 套件管理來安裝 Brave。且經過實際測試後，這也是筆者比較推薦的安裝方式，只要輸入以下指令即可：

註：因為 elementary OS 不是標準的 Ubuntu，因此安裝指令跟官方提供的路徑有些許不同，詳細內容可以查閱文章未的參考資料。
警告：依據筆者目前實測，使用 Snaps 安裝的 Brave 在啟動時會 Crash，可能暫時還不是很穩定。若您也遇到這樣的情況，建議移除後重新以 apt 套件管理方式安裝。
為了在各 Linux 發行版發佈並降低安裝難度，Brave 官方預設採用 Snaps 進行散佈。使用 Snaps 安裝的好處，是開發者會幫我們處理好相依元件且未來可支援自動更新機制。所以在安裝 Brave 之前，先來安裝 Snaps。其安裝機制很簡單，一樣透過 apt 套件管理指令即可：

註：若您使用的是 Ubuntu 16.04 的話，其實預設就已經內建了。(畢竟 Snaps 是 Ubuntu 背後的公司 Canonical 所推動的格式)
有了 Snap 指令後，接著就可以用 Snaps 來安裝 Brave，指令跟 apt 很像：

不論你喜歡用哪一種方式安裝，只要依照上面的步驟，等到安裝程序跑完，就可以在應用程式選單內看到 Brave 瀏覽器的圖示。

點擊後就可以開始使用 Brave，其介面如下：

實際使用後，覺得 Brave 是個具潛力、新概念的瀏覽器，不過目前仍在早期開發階段，所以使用起來並不是非常穩定，視窗的設計也不太符合 elementary OS 的風格，可以再關注一段時間。
連續幾個單元，筆者介紹了三種瀏覽器的安裝方式，也順道示範/體驗了 apt 及 Snaps 安裝應用程式的方式，希望能對您有幫助。平常在開發的時候習慣使用什麼瀏覽器呢？歡迎在留言裡跟我分享！",,"['使用 apt 套件管理指令安裝', '使用 Snaps 套件管理指令安裝', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192263,自我挑戰組,0,30天-學習Beacon的成長紀錄系列,1,Beacon-Day1-啟程,Tequila,https://ithelp.ithome.com.tw/users/20107855/ironman,1513715077000000000,209,"背景:
將過去團隊學習Beacon的成長過程記錄下來，過程中的點點滴滴
同時也會穿插一些討論的回答在文章中
期許自己可以撰寫如:鳳凰項目，目標等書籍，透過小說的方式來說明過程
團員介紹
Andy, Tim, Becky, Winston, Maxwell, SJ
[啟程]
剛進入公司，本來可以期許自己像新人一樣快樂享受三個月的蜜月期
沒想到剛進入一個月多，馬上遇到一個課題，新人需要參與""技術研討會(ps.1)""
What?技術研討會?，當下接收到這訊息有點小崩潰!
不過因為是新人，身上來是有菜味，所以還是接受這個挑戰
於是加入了技術研討會。每周兩次固定兩小時
加入的當下，與其他同仁相互打招呼，互相介紹認識
技研Leader-Raymond開始請大家提出希望可以實作的主題
大家開始分組討論，於是分了三組進行討論
1.chatbot
2.IIot
3.Beacon
團員們在激烈討論中，我們挑選了""Beacon""來實作
當時的想法是感覺就這個最簡單!挑這個準沒錯
於是，有了主題當然要有一位組長
團員們大家對於組長這一個職位都虎視眈眈(疑?)
於是我們決定用Line-爬樓梯，來選擇組長(真是隨興的方式阿!)
在眾神保佑下，Andy獲得了這一個得來不易的機會啊
在歡樂的爬樓梯中，第一次的會議結束了
ps.1
技術研討會:IT部門的新策略，針對現有的新技術來進行主題討論，並實作成品",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192249,ModernWeb,0,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,16,物件導向與函數導向簡析,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1513712462000000000,212,"隨著簡單的部分結束
一天一天構思主題變成一件痛苦的事
今天打算來聊聊物件導向與函數導向
雖然這個主題有點超乎我目前的能力所及
但我還是會盡我所能，將我理解的部分呈現給各位
還請大家不吝指教
物件導向是1970年代為了解決當時日漸龐雜的需求，為了讓程式更好維護，同時能夠重複使用而發展出來。一般會把Smalltalk視為經典，但最早在1960年代的Simula就可以發現物件導向的蹤跡。[1]
在物件導向的思維世界當中，程式裡面的每一個元素都可以拆分為獨立又互相呼叫的小單位，這與傳統的程序思維剛好相反：程式是一個函式系列的集合。物件導向一般有下列的特徵：類別、物件、繼承、封裝：
因為畢竟不是教科書，這邊大略介紹一下。
如果物件導向是以物件為基本組成元素的程式設計觀念，函數導向程式設計(functional programming) 便是提倡以函數為基本單元來組織程式[2]。根據「Why Functional Programming Matters」一書表示函数式導向程式語言通常有下面的特性：
不包含變數給值，變數一旦給定，就不會有變化。簡言之沒有副作用。一個函數一旦執行，除了產生結果沒有其他影響。這就消除了一個主要的bug來源，也使得執行順序無關緊要。
與傳統觀念比起來，函數導向非常在意「沒用副作用」這個精神，相同的輸入一定要有相同的結果。並且利用這個特性，將一個複雜的問題，不斷的透過純函式逐層推導出複雜的運算，而不是設計一個相對複雜的執行程序[3]。
函數導向的特性：
介紹到這裡，可能還是有些模糊不清
讓我們來看一個簡單的例子做比較：
在物件導向的世界中「萬般皆物件」
所以""ABCabc""是一個類別為String的物件
因此可以使用String的類別方法downcase
相對在，在函數導向思維""ABCabc""只是一個類別為String的參數
我們呼叫String module下個一個function donwcase並傳入參數
最後得到函數運作後的結果
雖然語言本身就已經區分特性
但事實上物件導向與函數導向是一種思維方式
所以就算是物件導向的程式語言
我們依然可以使用函數導向的思維來開發（反之我不確定可不可以）
例如React雖然是使用Javascript的框架
但其中就充滿著函數導向的特性
根據林信良的說法：
物件導向與函數式並不衝突，兩者可相輔相成。當面對職責混亂的物件，可試著以函數式概念對物件的函式進行重構，若一開始不知如何畫分物件職責，可試著先以函式為單元進行設計，再看看函式是否可進一步重構出子函式。當問題被分解為子問題，函式被切得夠細小，回過頭來會發現數個函式間的關聯性，這時無論是使用類別組織資料、將函式搬運至適當類別之中，都會有較清楚的判斷界線，從而實現更高階的物件導向概念。
目前網路框架的後端主要還是以物件導向為主（PHP, Java, Python, Ruby）
函數導向的好像只有Elixir（而且使用者還很少）
說穿了這其實是兩種不同的思維方式
在不同情境下用不同的方式解決問題
而且按照程式進化典範學習的慣例
未來的語言應該會融合兩者的特點而持續進化（例如Scala）
讓我們拭目以待吧！
參考資料：
https://www.ithome.com.tw/node/73705
https://blog.miniasp.com/post/2016/12/10/Functional-Programming-in-JavaScript.aspx","['物件導向(object-oriented programming)', '函數導向(functional programming)']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192256,ModernWeb,0,ASP.NETMVC網頁程式介紹系列,10,[Day10]如何用ASP.NETMVC接收Get資料,小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1513711574000000000,211,"昨天我們提到了Get跟Post，一般寫網頁很常遇到的就是這兩種，基本上Get的話參數會出現在網址列上面，而用Post的方式參數不會出現在網址列上面，以下就簡單示範如何接收Get資料並顯示在螢幕上，在此偷懶一下用了上次的表單，

我們在Views/Home底下新建了一個Transcripts.cshtml，並且在HomeController加上了一個Transcripts函式，這個函式可以接收id, name, score並且輸出到畫面上，以下是Home/Index.cshtml的內容，跟上次有些許的不一樣，
我們注意到每個input type=""text""都多了一個name，傳送表單的Get或Post事實上它接收的就是這個name，當按下按鈕的時候，因為
所以會將資料傳到/Home/Transcripts，最前面的斜線代表網頁的根目錄，MVC會先去執行HomeController的Transcripts函式，而下面是HomeController的部分，基本上偷懶用上次的方式再傳一次資料就好了，
通常接收的資料都是用文字，不過我在score的地方是接收數字，如果輸入文字傳到後端印象中score應該會是0，然後直接將接收到的內容存成Model再傳送到前端，就會變成以下的畫面

畫面簡潔有力，以下是Transcripts.cshtml的部分：
應該不用特別解釋了，
今天大概分享到這邊，
欲知後事如何，請待下回分解。
歡迎大家批評指教~
--
小弟不才，
如果有謬誤或是要補充的，
都歡迎一起來討論！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192231,ModernWeb,0,從無到有，打造一個漂亮乾淨俐落的RESTfulAPI系列,9,[Day-9]JavaScript基礎篇(2),10程式中,https://ithelp.ithome.com.tw/users/20107247/ironman,1513711482000000000,204,"任何一種程式語言程式碼都是由上而下逐一執行的，此外有時候必須程式判斷依照不同的數值給予不同的路徑輸出，稱之為控制流程。
ES6 中新增了程式區塊是用大括號包起來的區域：
if...else 是任何語言最常見的控制流程語句，他的概念非常簡單以下用 pseudo code 演示：
此外在開發上若遇到大量的if、esle if、else 會造成程式冗長與不易閱讀，所以這時就可以使用 switch 判斷也可以達到相同效果。
迴圈總共分為三種寫法分別有 for、while、do while，其中最常見也被最常使用的就非 for 迴圈莫屬了，故這邊就先只提 for 一種。
for 迴圈的小括號內有三個參數用分號隔開，它們各自有其功用，for迴圈的基本語法如下:
這邊值得一提的是我並不是使用 i++ 做每次間隔，由於 ESLint 建議Unary operator '++' used. (no-plusplus) 不要使用 ++ -- 官方是這樣說的
Why? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like num += 1 instead of num++ or num ++. Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.
簡單來說使用一元遞增(減)會導致程序中的意外行為所以盡量不要使用
for of 是 ES6 新增的語句，可用於迭代就件上取出容器裡的值例如陣列、Map、Set、字串等等。
foEach是屬於陣列裡的一個方法他也可以做出相同的事情。
箭頭函式在 JavaScript 中改寫原本 function 的撰寫方式。除了較短的語法外，它們在保持this  關鍵字範圍方面也有優勢 參見這裡，此外在 ESLint 中官方也建議使用箭頭函式取代傳統寫法。
函式 (function) 又稱方法 (method)，用於程式碼過多重複時定義一個方法來去重複呼叫他來解省我們的開發效率，以下為範例：
output: 4
相等於
output: 10
文章同時發表於：https://andy6804tw.github.io/2017/12/19/js-tutorial-psrt2/",,"['控制流程', '迴圈', '函式(function)']","['區塊(block)', 'if...esle 判斷式', 'for 語句', 'for of 和 foEach 語句', '撰寫方式']","['原本寫法', '變成']","['1. 當你在宣告時若沒有傳入值(arguments)，必須放空括號。', '2. 當只有一個傳入值(arguments)，可以省略括號。', '3. 當函式有回傳時可濃縮一行']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192255,Security,0,為了明日的重開機系列,1,為了明日的重開機-0,sunallen,https://ithelp.ithome.com.tw/users/20006132/ironman,1513711482000000000,227,"這個世界上，有一個平行宇宙，叫做工程師們的宇宙，這個宇宙的時間序，大概是這樣的，
2010年的『誰溫暖了工程師』->https://ithelp.ithome.com.tw/articles/10043935
2010年的『IT人在廚房』-> https://ithelp.ithome.com.tw/articles/10047911
2010年的『FB不浪漫』->https://ithelp.ithome.com.tw/articles/10050850
2012年的『工程師不哭』-> https://ithelp.ithome.com.tw/articles/10071673
2012年的『工程師復愁記』-> https://ithelp.ithome.com.tw/articles/10098826
接著，在這裡宇宙裡，有幾個重要的事件回顧...
第一個，有一張，在火車上的照片，這照片，就像加班費一樣(大家都聽過，但都沒見過，也沒摸過)。
第二個，有一位曾經是老闆，但後來卻變成工讀生的Allen。
第三個，變成工讀生的Allen，以為是他的夥伴Peter陷害了他，卻沒想到，真正陷害他的人，是多年前的幻影。
第四個，聽說，這工讀生開發了一套超級可遠端連線所有網路上的系統，這超級系統，也像加班費一樣，許多IT人都聽過，在電影中看過，但可能都沒用過。
第五個，Allen某次在安裝Server時，因幫手Asuka不小心，讓Allen的腳被Server砸出一個洞。
第六個，Allen很久前的老闆叫老王，老王的兒子叫小四，小四的女友叫小七，小四自以為陷害了Allen，卻不知自己的身後還有大魔王。
第七個，Allen在工程師復愁記的最後，揭開了大魔王的真面目，也向小四叫陣攤牌...這些IT人的後來呢?
(待)
2017/12/19 SunAllen",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192129,自我挑戰組,0,從0開始的菜鳥工程師挑戰賽系列,7,第七天-溫習一下,lf2exe,https://ithelp.ithome.com.tw/users/20107727/ironman,1513711146000000000,209,"俗話說的好:溫故而知新，讓我們來看一下前面我到底說了甚麼挖貴!!
基本架構:
< html>
< head>大腦
< title>< /title>標題
< /head>
< body>身體
< /body>
< /html>
用法:
用< div>包起來，劃地為王，然後命名。
命名方法:
class用於大範圍，例如班級。
id多用於唯一性，例如班級裡面的座號。
外接CSS:
用途就是拿來美化你的頁面，跟一些活化物件。
CSS常用語法:
框架類:
border最外圍，間距，無色無味。
margin邊線，可以上色以及不同形式畫線。
padding內容，背景顏色。
不知怎麼歸類類:
background設定背景用。
color文字顏色。
font:設置所有字體的屬性。
結論:
耶!?好像講完了!?我這一個禮拜有學的這麼少嗎??????為什麼我覺得度日如年((淚奔))。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192031,ModernWeb,0,React.js&Laravel30天訓練系列,1,【Day1】TransferSQLintoMySQL&InitializeLaravel,gary_lin,https://ithelp.ithome.com.tw/users/20107767/ironman,1513710856000000000,219,"這是一個舊專案 改寫成 新專案的過程
舊專案的架構是 Asp.Net MVC & AngularJs
新專案的架構是 Laravel 5.1 & React.js
這過程中簡易安裝過程會省略，主要放在重點使用處
那我們就開始吧~
資料的處理為先
這只是習慣，不過當我在弄前後端的東西，習慣將資料準備起來，這樣前端完成後，就可以開始做拉資料填資料的測試動作
通常使用SQL to MySQL 免費的方法大約有兩種(以我搜尋的結果)
但是這兩種對於一些資料比較複雜的來說，都是一堆坑...
第一種方法 ...
Open WorkBench -> Database -> Migration Wizard -> ...
SQL設定部分

MYSQL設定部分

然後一連串的NEXT，我就遇到
Data copy results:
???.??? has FAILED (0 of 0 rows copied)
???.??? has FAILED (0 of 554 rows copied)
???.??? has FAILED (0 of 0 rows copied)
???.??? has FAILED (0 of 0 rows copied)
???.??? has FAILED (0 of 0 rows copied)
???.??? has FAILED (0 of 144 rows copied)
???.??? has FAILED (0 of 0 rows copied)
也許是有解的，但是困住一天就覺得不該在這打轉~
然後，如果你是使用第二種方法，先不用急著倒進去 MySQL，可以先簡單檢驗一下..
CSV:

TXT:

這兩種格式的儲存結果是使用特定符號來做區隔，例如 ',' or ';'
很不幸的，通常你若有儲存一些資料，裡面有包含這些，就會像上圖這樣的結果，完全欄位對不上
最後，我用SQLyog，當你用過前兩種方法之後遇到他，你會覺得你好像遇到救星
使用他你唯一要注意的就是FK關聯的問題，要依序載入相關的Table
他是要付費的，不過你只要在Google 搜尋 SQLYOG 然後 SPACE 就會有 破解的TIP XD
Finish ~

總結:",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192251,自我挑戰組,0,,16,[未完成]今天來更新一下有趣的數據給大家看,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513709233000000000,207,"抓資料的部分正在寫...
大家等等吧",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192200,DataTechnology,1,你都在公司都在幹啥R？R語言資料分析經驗分享系列,2,【02】當老闆想問：話說我們的會員註冊情況如何時？,jason9075,https://ithelp.ithome.com.tw/users/20107299/ironman,1513709186000000000,211,"第一個教學就先用dplyr 當開頭吧，在我還沒使用過dplyr 時，每次對有相同特徵的資料做分群並運算時，常常把R 寫的非常奇怪...，不僅在程式碼閱讀上困難，效能上也可能非常低落，所以第一個問題開始...，如何知道網站的註冊會員狀況？
使用read.csv 將資料載入

至於如何分析問題呢？ 我第一個想法是：利用CREATETIME 時間分出不同月份，在看每個月份註冊的會員總數是多少，因此我需要創建一個新欄位:Month，但目前CREATETIME 的儲存欄位還是character

再來就是要介紹dplyr 的mutate 功能，mutate可以為原先的dataframe 新增一個新的欄位，因此我們這樣子寫
就取得了Month結果

但因為我們是用月份來切割的，因此只需要取得前面7個字，所以再呼叫mutate一次並使用substring() 取字。
接再來介紹dplyr 的group_by() 和summarise() 函式，group_by可以將你指定的同個特徵集合一起，再利用summarise() ，取得結果，其中，可以用n() 來得出被group的筆數。
這樣就完成了各個月份註冊人數的統計

再利用ggplot 畫出圖表

因此，你就可以拿著這張圖表去報告目前會員的註冊狀況囉！
ref: day2原始碼",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192242,自我挑戰組,0,半路出家的工程師重新認識JavaScript系列,1,01.菜鳥工程師對於JavaScript的愛恨情仇!?,awws,https://ithelp.ithome.com.tw/users/20103518/ironman,1513707665000000000,264,"身為一個菜鳥工程師，處理前端頁面時肯定會使用 JavaScript 做一些效果。
大致的開發流程如下
=> 確認需求
=> 找看看以前有沒有寫過
=> 沒寫過就問 Google 大神
=> 找到感覺可以的 Code 就複製貼上並展開 debug 之旅
DEBUG 時的心境就如圖片所示

由於案子有時程壓力，往往都以能驗收就好，品質都是優先被犧牲的選項
開發過程就像擲杯一樣瘋狂 try & error，這樣一日復一日的下去不是辦法
加上我選擇 Speaking JavaScript 這本書當作讀書會的報告主題
於是就促成這次鐵人賽的主題 「半路出家的工程師重新認識 JavaScript」
希望就由寫網誌以及團隊的壓力下
記錄重頭學習 JavaScript 的心路歷程
由於本身還是個小菜鳥，所以文章可能無法太深入探討一些技術層面的問題
這次的分享對象會比較偏向跟我一樣是菜鳥，或是沒碰過 JavaScript 但有興趣的人
希望藉由這 30 天能夠補足一點 JavaScript 的知識
讓未來開發時能夠更加順利並少踩一點雷
Speaking JavaScript 原文有線上免費版可以閱讀 ( http://speakingjs.com/ )",,"['前言', '大致規劃有幾個方向', '開發環境', '其他', '延伸閱讀']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192239,AI&MachineLearning,0,機器學習你也可以-文組帶你手把手實做機器學習聖經系列,1,前言-機器學習？？,shortid,https://ithelp.ithome.com.tw/users/20107850/ironman,1513706464000000000,257,"到底什麼是機器學習？？
機器學習是人工智慧的一個分支，一種實現人工智慧的途徑。
通常的作法就是在過去的資料中尋找某一種規律，藉以預測未來會發生什麼！
聽起來很神奇，不過他到底可以用在哪？
其實機器學習的應用已經充滿我們的生活惹。
例如很常見的手寫辨識，就可以用機器學習的方式來解決。
簡單來說，每一個人寫這個""難""字，寫起來一定不一樣，有的很美很正，有的很醜很歪，到底要怎麼判斷這是什麼字呢？傳統的機器學習呢，就會收集很多人寫的""難""，然後丟進去電腦，並且告訴電腦這是""難""。經過神奇的機器學習演算法，以後大家寫""難""，電腦就會知道這個是""難""了！
或著是你運氣很差，常常被騙錢，你就把騙你錢的人的資料都丟到電腦裡面，告訴電腦這些人騙你錢。以後有人跟你要錢的時候，你把他的資料跟電腦講，他就會說他會不會騙你錢了！
扯ㄅ
不過實際上當然沒那麼準...，像是第一個例子，你只教電腦一個字很醜的人的字，不跟他說一般人會怎麼寫字，你以後一般人寫字給電腦判斷，大概總是判斷錯誤。我想電腦心裡大概是在想這個字不夠醜吧。
PRML這本書呢全名叫做Pattern Recognition and Machine Learning，他是出版於2006年的書。
ok，看到這邊你已經可以發現，如果你追求的是最新最潮的技術，那這邊沒有QQ
不過這本書他包含了許多機器學習的基礎以及背後的原理，並且以相當有條理的方式跟讀者介紹，因此被很多學校的機器學習課程拿來當成課本。
被當成課本表示什麼意思呢？就是你只要大概知道這本書在幹麻，你就可以對外宣稱你懂機器學習惹！！！
所以秉持著拉人下水的精神，我就在這邊跟大家介紹一下這本書跟一些基礎的演算法！
小弟我才疏學淺，路過的神不要太苛責我QQ
對於這三十天的規劃，簡單列點如下：
介紹到演算法的時候，我會以python實做，並且不免俗的也貼一份如果call function應該要怎麼做的版本XD
其實也不是不免俗，正如介紹所寫，小弟我大學文組，code寫的不好，只留我的太難看了QQ
我猜測有人可能會想知道演算法是什麼，當年我也不知道是什麼，我只覺得，""天啊這個詞好潮好厲害""。簡單介紹一下，演算法指的是從開始的狀態到結束的狀態，中間的步驟。
這樣講我也聽不懂就是了，簡單來說呢，就是例如下圖
這就是一個有問題到沒問題的演算法！

希望你可以大概理解，如果還是不行，沒關係不用在意，反正對我們的文章不太重要！
內容有點多，希望我可以完整寫完QQ
如果在哪邊有問題，也歡迎留言問我。","['前言', '介紹', '30天的規劃']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192243,ModernWeb,0,挑戰CSS30天系列,16,day16_list-style-image,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1513705397000000000,199,"list-style-image 屬性是用來將某個圖案設定為記號。此屬性的用法為，
list-style-image:url([image_url]);
如以下範例：
成果如下圖：

因為我的圖片有點大，加上上一篇文章有提到 list-style-position 屬性預定值為 ""outside""，因此猜測為導致記號被切掉的原因。
以下為解決方式：
list-style-style、list-style-position、及 list-style-image 屬性可以被簡化為一個 list-style 屬性。這種做法稱為捷徑 (shortcut)。在這裡，屬性的順序並不重要。
如以下範例：
成果如下圖：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192241,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,16,[Day16]EasyFlowGP--Web表單元件-Grid表格,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1513704031000000000,216,"今天簡短分享Grid 表單。
表單開啟時，要將資料載入到Grid中
表單儲存時，要將資料存入隱藏值。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192235,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,15,(Day15)基本繪圖功能與資料快速瀏覽(上),Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1513702168000000000,219,"開始進入了繪圖的功能，首先要說明的是，常在資料處理與作業過程，常需要快速的瀏覽資料的樣式或是分布，以便能繼續的處理資料，這時候，往往有個可以快速呈現資料圖表的工具，能加快處理的作業。
往往這類的繪圖，重點都放在能即時的提供結果瀏覽與判定，樣式與視覺化上的美觀，可能就不是重點。
本篇旨在強調實作的演示，將採用R中內建的資料集當作實作的資料來源。
暫列出常用的幾個資料集，官方的說明，也常以此為範例，多點了解也是好事。

程式上，本篇會有函數qplot()說明，套件ggplot2，還是叫用先。
根據散佈圖-MBA智庫百科，用以判定資料之間，是否有相關聯性。大致為:


根據折線圖-MBA智庫百科，用以判定數據資料變化的趨勢。

線加點

其他圖型
R Graphics Cookbook-Chapter2 Quickly Exploring Data",,"['散佈圖 Scatter Plot', '折線圖 Line Graph', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192234,AI&MachineLearning,0,深度學習環境安裝筆記系列,8,[Day08]深度學習環境安裝筆記—編譯Caffe,a7552005,https://ithelp.ithome.com.tw/users/20091307/ironman,1513700703000000000,217,抱歉，這幾天真的快忙不過來了，先佔個坑之後會再補上,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192222,SoftwareDevelopment,0,初探Kotlin系列,14,[Day14]VisibilityModifiers,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1513698936000000000,216,"Kotlin有4種不同的Visibility Modifiers
private, protected, internal 和 public
Functions, properties and classes, objects 和 interfaces可直接宣告在package中宣告
宣告在類別中的成員變數","['Packages', 'Classes and Interfaces']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192141,ModernWeb,1,三十哩路，我的前端學習路程系列,16,Day16::我所知道的CSS重構第四章之二,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1513698451000000000,249,"錨點標籤(anchor tags)提供可連到其他HTML文件或同一份HTML文件中段落的連結
能搭配常用來顯示狀態:link、:visited、:focus、:hover、:active虛擬類別，再定義其基底樣式時瞭解這些虛擬類別是很重要的。
:link：套用在具有效href屬性的元素上。
:visited：套用在具有效href屬性的元素上，且該連結的位置已列在瀏覽器的瀏覽歷史紀錄中。
:focus：套用在使用中的連結元素上。當元素被點選、觸碰或透過跳位鍵(Tab key)選到該元素時樣式也會被套用。
:hover：樣式會套用在滑鼠指標下的連結。觸控裝置上因為不具有hover狀態，樣式通常會套用在被觸碰的元素上。
:active：樣式會套用在""被啟用(activated)""的元素上。在使用滑鼠的狀況下點選連結但滑鼠鍵還未放開時就是處於這種狀態，在觸控裝置上點選元素但手指尚未移開螢幕時元素也會處於這個狀態。
要注意，先定義:link和:visited，這兩個虛擬類別(偽類)擁有相同的特定度。
若某一連結已被造訪過，且:visited定義在:hover、:focus、:active之後，任何為:visited所定義的重疊樣式(overlapping styles)會優先顯示。
另外一件要注意的事情是，這些虛擬類別是由一個類型選擇器與一個虛擬類別選擇器所組成，他們都會讓連結具有較高的特定度。
為錨點標籤與虛擬類別定義基底樣式時，應考慮定義下列常用屬性：
background-color
border
color
font-weight
text-decoration
文本語意(text semantics)用來賦予文本更多意義或結構的元素，這些元素通常是行內型。
包括<addr>、<b>、<cite>、<code>、<data>、<dfn>、<em>、<i>、<kbd>、<s>、<strong>、<sub>、<sup>、<time>、<u>等標籤。
因為這些元素通常用來調整文本，為其定義基底樣式時，應該考慮設定下列屬性：
color
font-family
font-size
font-weight
列表(List)元素包含<ol>有序列表(ordered list)、<ul>無序列表(unorder list)與<dl>定義列表(definition list)
有序與無序列表只能內含<li>列表項目(list item)元素
定義列表只能內含<dt>定義項(definition term)與<dd>定義說明(definition description)元素。
列表的用途廣泛不容易為其設定適當的基底樣式。
為有序與無序列表定義基底樣式，應該考慮設定下列屬性：
font-family
font-size
list-style-type 或 list-style0image
list-style-position
line-height
margin-bottom
margin-top
padding-left
群組元素(grouping elements)包括，<div>、<main>、<span>。
雖然<span>標籤的語義就技術上而言是文本層級的，它主要用來群組文本或行內元素。
<div> 與 <main>標籤是典型的區塊層級元素，而<span>則是行內層級，因為這元素直接被用來群組其他元素，通常不會帶有任何基本的樣式；它們的樣式會依照每次使用的情況而用類別來設定。
若<main>被視為視覺元素容器，其margin與padding樣式有設定值的話會比較方便。
表格會用表格是的結構來呈現資料，用來呈現表格資料的元素包括<table>、<caption>、<colgroup>、<col>、<tbody>表格主體(table body)、<thead>表格標頭(table header)、<tfoot>表格頁尾(table footer)、<tr>表格列(table row)、<td>表格方格(table cell)、<th>表格標頭方格(table header cell)等元素。
在1990年代晚期與2000年代初期，常用表格來構成整張頁面的版面但現今CSS與瀏覽器已經變成只用表格來呈現表格的資料，而不用其他具樣式的元素來處理。
表單用來搜集使用者所輸入的資料，相關元素包含<form>、<label>、<input>、<button>、<select>、<datalist>、<optgroup>、<option>、<textarea>、<output>、<progress>、<meter>、<fieldset>、<legend>。
表單基底樣式應該考慮設定下列屬性：
font-family
font-size
line-height
margin
padding
樣式可以設定在<form>元素上再由子元素繼承，較複雜的設計則需設定更多的樣式。",,,,"['錨點標籤', '文本語意', '列表', '群組元素', '表格', '表單']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192229,自我挑戰組,0,區塊鏈報明牌系列,1,[區塊鍊報明牌]Day1前言,willyc20,https://ithelp.ithome.com.tw/users/20107460/ironman,1513698382000000000,418,"虛擬貨幣到底該買哪支呢?誰是下一個漲上數百倍，讓人一夜致富的明日之星?比特幣、乙太幣還是IOTA?恩，其實我根本就不知道，恭喜你被騙進來了。
開玩笑的，不浮誇點沒人點進來就白寫啦(／︿＼)，雖然有些標題檔，但這次的30天鐵人賽的確是要研究區塊鏈相關議題，雖然現在區塊鏈的報導文章非常多，但身為IT技術人想必會想對周遭的技術知其然、知其所以然的，我自己希望能在這次的比賽機會當中以程式的輔助、理論的角度，來對區塊練相關應用進行探索與了解，想必會是一次美好的體驗，就讓各位與我一同開始這趟旅程吧。
2008年次級房貸暴發引發全球性金融危機，美國曾經的第四大投資銀行雷曼兄弟倒閉後的兩周，中本聰發表了著名的比特幣論文《Bitcoin: A Peer-to-Peer Electronic Cash System》。不論比特幣最終是場騙局還是革命，區塊鏈(blockchain)做為比特幣的實現技術，標榜去中心化(decentralization)、去信任化(Trustless)和可靠資料庫(Reliable Database)等等特性，如今在許多領域中都已經有初步的相關應用出現。
關於詳細的技術討論留到後面的章節，我們先假設區塊鏈相關技術的思想是可以被完善實現的，那麼這些第一眼看來有些虛無飄渺的名詞，有可能帶來怎樣的影響呢?
法定貨幣的價值從何而來?我們可以舉出許多原因:政府保障法定貨幣的價值、國家存有美元跟黃金儲備等等，又或者反正我就是能用10元買到茶葉蛋，價值哪來的很重要嗎?說到底，交易雙方相信茶葉蛋跟10元新台幣的價值等價。
我們需要相信造幣廠的作業手續不會讓人有貪汙機會、中央銀行會控制通貨膨脹的程度、警察會嚴格打擊偽造假鈔等等因素，我們才能對政府機構做為人民代表發放貨幣有所信任，這種代理-信任間的運作模式，必然會消耗掉非常多的人力來進行作業，並且無論是作業疏失或有人為了自身利益心懷不軌，總會有錯誤發生的。
首先不再需要大量的作業人力，背後所有交易處理都可以由機器取代，且交易流程無法被竄改，無須擔心作業疏失、惡意行為，不用再把信認交給某個代理機構執行，它自己就會運作。當然理想跟現實一定有所差距，但如果能有某種程度的實現，我想區塊鍊技術所帶來的改變是值得期待的。
預計的30天進度會大致分成三個部分，將盡量以實際的程式做輔助理解。
第一部分是區塊鏈的運作機制。除了最初的比特幣論文外也希望能介紹後面延伸出的技術如閃電網路(Lightning Network)、側鏈(sidechain)等等。
第二部分是區塊鏈在各行各業上的應用，例如金融服務、醫療、物流等領域。
最後第三部分是虛擬貨幣相關議題。包括比特幣、支援圖靈完備智能合約的以太幣(Ethereum)、號稱第三代加密貨幣的IOTA等等。
由於是現學現賣我也不能保證不會進度delay或有變化，不過大致會是如此。另外如果是將從其他地方閱讀的參考資料拼拼湊湊成一篇文就太沒意思了，所以文中會有很多我個人的主觀見解，如果有錯誤或是值得討論的部分還請不吝指教，歡迎收看。
《Bitcoin: A Peer-to-Peer Electronic Cash System》
https://bitcoin.org/bitcoin.pdf
區塊鍊技術指南
https://yeasy.gitbooks.io/blockchain_guide/content/
為什麼我認為區塊鏈是物聯網的主幹基礎？
https://www.bnext.com.tw/article/45216/blockchain-iot-decentralized",['前言'],"['對區塊鏈技術的見解', '預計30天規劃', '相關參考資源:']","['以區塊鏈最初希望實現的應用-貨幣來看', '這種信任從何而來呢?', '如果假設我們使用的是一種理想的虛擬貨幣(cryptocurrency)呢?']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192221,自我挑戰組,0,Verilog從放棄到有趣系列,8,[Day8]testbench1/3,Sheng,https://ithelp.ithome.com.tw/users/20107543/ironman,1513697576000000000,270,"前幾天大致上把語法介紹差不多了，會用到的大致上就那些，如果以後有用到一些比較特殊的語法會在介紹，或者說如果有讀者想要瞭解其他沒有介紹的語法也歡迎留言，我會在留言區介紹，又或者站內信給我也歡迎喔．
當你完成你的電路之後，要如何知道自己寫的對不對，不建議採用try and error的方法來debug，除了非常消耗時間以外，還會越嘗試越難過，所以今天要來介紹testbench，目的是用來驗證電路的正確性，首先先來看一下testbench所扮演的角色：

一個寫好的電路可能會用一個或數個module來呈現，所以在寫testbebch時，就是要產生input的訊號線的值給你的module，然後把output的值拿出來驗證正確性，今天大概會先介紹該怎麼去寫簡單的testbench，那我們直接開始吧．
我們沿用之前的加法器電路
module adder(
input clk,
input reset,
input [7:0]a,
input [7:0]b,
output reg[7:0]c
);
always@(posedge clk)begin
if(reset)
c <= 0;
else
c <= a + b;
end
endmodule
下圖為加法器的testbench:

那現在來對testbench一行一行做解釋吧，
首先line.22是testbench的名稱，因為沒有input output所以括弧內沒東西，
line.24開始是宣告你要接到你的module的訊號線，這邊要注意的是接進去的訊號線為input的話，要宣告為reg形態，反之，如果是output的話，宣告要為wire．
line.31這邊就是在宣告你的module，有點像是include的概念，所以這邊我宣告一個adder(我要測試的module名稱)名字為uut，名字取什麼都可以，然後把要接進去或拉出來的input，output設定好，舉例來說line.32的.clk(clk)，左邊的clk是adder裡面宣告input的clk，而括弧內的clk為testbench所產生的clk，然後要把這兩條訊號線串接起來的意思，這樣說明應該比較好理解．
line.38的initial begin end在這裡面的block就是要做驗證電路的pattern，這裡面寫的方式就像c code一樣，在模擬的時候是由上往下一行一行執行，以這邊來說明一下，通常我在寫的時候都會先把input歸零，就像line.40到line.43，
之後把電路做reset功能line.44到line.47，中間#10 代表過了幾個單位時間，這邊來說一單位時間為1ns，接下來就可以開始寫你要給的測資(line.48到line.54)．
最後line.57.是產生一個clock，每當5單位時間就做反向，以這邊的話就是產生100MHz的clock，一個單位時間為5ns．
這樣就完成一個簡單的testbench，實際來跑一次吧．

跑出來的結果如上圖，電路剛開始所有input都會歸零，過10ns個做reset，然後看一下紅線的部分，是給第一筆測試資料(a=4,b=7)，至於黃色線部分是給完第一筆資料所產生的結果(c=0b)，並給下一筆新的資料(a=8,b=11)，之後下一個正緣觸發產生新的結果值(c=19)，上面所說的直都是16進制，如果要改進制的話可以參考下圖．

今天大概介紹testbench的一部份，接下來會再花個一兩天介紹．",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192225,SoftwareDevelopment,1,認識scala系列,16,Scaladay16(traitsselftype),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1513697354000000000,232,"Self types 使用的符號是 =>
Self types 的作用是把不同的 trait 混合(mixed)在一起，並且定義了要 with 它的話，也必須同時具有它 this 的 trait :
this 只能有一個，所以要多個 Self types 要使用 with :
定義一個 class 去 extends Users，這時候會出錯，因為使用 Self types 的 trait 等於強迫定義了如果要 with 它時，也一定要 with 它所混合的 trait．這邊 Users 的 Self types 有 Ids 與 Names，所以類別 Customer 也要 with Ids 與 Names :
如果 class 的變數名稱如果與 trait 的變數相同會產生衝突，所以要注意(Ids已有id,Names已有name,Users已有user) :
把變數名稱改掉 :
Self types 也可以定義 with 它的類別一定也要具有 Self types 定義好的方法 :
沒實作方法的話，就會出錯 :
再來做個實驗，如果是 abstract class，沒定義的話還是會出錯，但可以不用在 abstract class 實作出方法，可以先定義成抽象方法，就可以過了 :
最後還是乖乖實作方法吧 :",,,"['Self types', 'Self types 定義 function', '總結']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192218,ModernWeb,0,從工程師的角度看UX/UI系列,1,序章(目錄),superpucy,https://ithelp.ithome.com.tw/users/20091485/ironman,1513695597000000000,274,"這次是第三次參加鐵人賽
老實說比之前兩次緊張許多
因為這是我完全不熟悉的領域
能不能寫到30天我實在也很疑惑
在加上這次是組團打怪
不斷賽的責任就更加重大
依照老規矩，還是先列一下我未來30天到底要寫甚麼文章
1.	介紹、源起
2.	與UX的第一次接觸
3.	與UI的第一次接觸
4.	讀書報告：UX從新手開始：使用者體驗的100堂必修課
5.	活動心得：Ux in the Jungle
6.	活動心得：敏捷工作坊
7.	活動心得：UX 起手式 - 從瞭解使用者開始：訪談、觀察與體驗
8.	活動心得：服務設計與使用者經驗設計
9.	活動心得：進入開發前服務設計思考：生態系觀點的顧客旅程
10.	活動心得：從研究到企業價值-UX research 的企業實作面面觀
11.	活動心得：在實戰中學習: A/B Testing 讓我們學會的事
12.	專案應用：主計處
13.	專案應用：問卷系統
14.	生活中崩壞的UX案例
我列不下去了…………",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192178,ModernWeb,0,ngrx/store4學習筆記系列,3,[ngrx/store-3]Observable的運算子(Operator),jerryhsieh01,https://ithelp.ithome.com.tw/users/20103574/ironman,1513694376000000000,243,"什麼是 Operator? Operator 是 Observable 的 method, 例如 .map(...), .filter(...)等等，它有一個很重要的特性是它基於輸入的 Observable 產生一個新的 Observable, 這個特性讓我們可以用 Javascript 的 chain method, 例如 test.add().del()
為了理解 Operator 的概念，我們自己來打造一個 map Operator, 這是一個對資料流用 someCallback 加工, 為了解說方便，將一切從簡，拿掉所有的 error handling
codepen
簡單解說一下
Observable 的 Operator 群非常強大，歸類的方式也有很多種，這裡只取我們會用到的，先前其實在產生 Observable 時已經看過一些 Operator, 像是 .from, .of, .interval, .fromPromise..., 這些由 Data Provider 產生 Observable 的 Operator, 還有上面已經提過很重要的 .map Operator，接下來是針對單一資料流的 Operator
對於資料流只取參數值的個數
codepen
印出 0, 1, 2, 3, 4
根據參數裡的判斷條件，過濾資料流，返回一個新的 Observable
codepen
因為我們的資料流是連續不斷的，這個例子用 .take(10) 取 10 個值，用 .filter 來過濾偶數
印出 0, 2, 4, 6, 8
對資料流每個元素做累積，產生單一值的 Observable
codepen
從  0 加到 9, 最終印出一個值45
對資料流每個元素做累積如同 reduce, 但會產生中間經過的這些所有值的 Observable
codepen
印出1,3,6,10,15,21,28,36,45
下次再來介紹針對多個資料流的 Operator",['Observable 的運算子(Operator)'],"['造一個自己的 Operator', '單一資料流的 Operator']","['take', 'filter', 'reduce', 'scan']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192216,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",16,Day16-ApacheSpark簡介,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1513694131000000000,273,"目前Big data最熱門的open source專案莫過於Apache Spark。為什麼Spark會這麼受歡迎？原因有三個：速度、速度與速度，是的！沒看錯就是速度。當初Hadoop正式釋出後造成轟動，一個跨世紀的儲存、運算、資源管理的平台誕生了，但由於MapReduce運算花費太多的磁碟IO，造成運算效能與使用者的期待落差甚遠，所以Spark推出後就因為他的運算速度而快速吸引眾多的使用者！
根據Apache Spark官方網站的說明，Spark在記憶體內執行運算時，最快可以比Hadoop MapReduce快100倍。即使與MapReduceㄧ樣將運算結果儲存在硬碟上，運算速度也可以快上10倍。
Run programs up to 100x faster than Hadoop MapReduce in memory, or 10x faster on disk.

From: https://spark.apache.org/
由於Apache spark主打的是Lightning-fast cluster computing，輕量又快速的叢集運算，小至個人PC大到企業級伺服器，只要透過設定皆可以在這些機器上使用Spark來進行運算。
Apache Spark是一個分散式的運算框架(Framework)，可分為以下幾種執行運算的方法，後面的文章會介紹這幾種執行方式的方法與差別。
目前Spark Api所支援的語言有：
由於Spark原始碼是以Scala撰寫，所以在Scala Api的支援相較於其他語言比較完整，其次為Java、Python、R。建議使用Scala撰寫Spark Application 可以使用完整的Spark Api，未來若有機會trace source code也比較看得懂。
Spaek主要包含四個函式庫的功能：

From: https://spark.apache.org/
在Spark的篇章會介紹Spark SQL與Spark Streaming。
簡單介紹完Apache Spark，接下來會針對下面的內容做更詳細的介紹：",,"['運算方式', 'Spark Api', 'Components', '最後']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192212,DevOps,0,Ops的轉職之路-Puppet從入門就放棄系列,9,Day9-手把手系列-第一個module,shazi7804,https://ithelp.ithome.com.tw/users/20089211/ironman,1513693127000000000,253,"本系列文資料可參考以下：
Module 是 Puppet 管理中非常重要的一環，利用已經編寫好的 module 在 manifests 就不需要在打上落落長的設定檔。
如果覺得線上的所有 module 都不符合你的需求，可以自己動手寫，在這篇會以基礎的 module 方向去寫。
你可以把 module 放在以下位置：
以一個 apache module 為例，我會需要產生以下這些檔案結構
init.pp 是預設被讀取的檔案，通常用來定義變數、引用 class。
install.pp 用來定義如何安裝 package。
service.pp 用來處理服務
config.pp 用來處理設定檔
要引用 module 只需要使用 include 就可以把已經寫好的 apache module 引用進來
只要三行、三行、三行 !! 就完成佈署安裝 apache 了
這樣 Puppet code 就簡潔許多了，恭喜你已經學會了基本的 module 寫法，可以再往進階 module 前進。",,"['動手寫 Module', '怎麼引用 module']","['基礎 module 檔案結構', 'module 的 manifests']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192204,ModernWeb,0,我每天都接一個API系列,1,[30api]Day0:前言＋基礎XHR,chiaroluna,https://ithelp.ithome.com.tw/users/20107688/ironman,1513692367000000000,284,"大概去年的時候我才知道有鐵人賽這個東西，今年又看到鐵人賽要開始的消息時，我就開始想，如果我要參加的話，那我要寫什麼呢？
最近碰巧在學 ReactJS ，但 React 是個特別熱門的題目，歷屆都很多人寫。雖然並沒有得獎的心思，但實在不想要給自己太多競爭者，想來想去還是來練基本功，寫多一點網站吧。
然後又想到我一直都搞不懂 AJAX 是什麼，也一直不會接 API 呢，那就來接 API 好了，而且要接很多個。
接 API 主要是指 第三方提供的 Web API ，比如說 Facebook API 、Youtube API 等。
那要接哪些呢，當然是都接阿。
以下是想接的主題：
然後在決定要把這系列叫做 <我每天都接一個API>的時候，被妹妹吐槽說 It’s a lie 了哈哈哈。
現在我要認真學接 API 了。
通常這種時候，就是看看網路上有沒有什麼教學吧，但剛開始真是非常困惑。
有那麼多關鍵字： AJAX 、Fetch API 、 Promise 、$.ajax()、HTTP Request
呃要先學哪一個阿，有順序嗎？好像一團打結的毛線一樣。
後來被帥氣的前輩說了一句「你先去搞懂 XHR 吧」，才找到一個開始解結的線頭阿。
在閱讀完這篇<輕鬆理解 Ajax 與跨來源請求>之後，大概理解了 AJAX 是什麼，然後我又看了這個 Youtube 影片：AJAX Crash Course (Vanilla JS)

邊看影片邊搭配 MDN 的教學：
MDN - XMLHttpRequest (XHR)
MDN - Using XMLHttpRequest
還看了 XMLHttpRequest 的歷史：
High Performance Browser Networking - XMLHttpRequest
這樣應該夠用了吧？剩下的就實作再說了阿。
以下是給懶得經歷我所經歷過的教學的人：
最後，所有文章的 source code 都會放在 CodePen Collection 裡面。
CodePen 連結","['前言', '基礎 XHR']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192202,DataTechnology,0,SQLServer學習日誌系列,1,01.開始與簡介,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513690976000000000,298,"從求學開始到工作至今，接觸了不少程式語言、框架與套件，在不同平台進行開發、處理了不少 infrastructure  問題與經歷了不少專案。雖然與許多前輩比較相差甚遠，但至今仍希望自己保持熱誠，不斷的學習。 前兩年的工作相當可惜，做了很多專案、學了很多技術與累積了不少經驗，但也忘了很多：常常過去曾經處理過的問題或撰寫程式的技巧，過了幾個月後遺忘得一乾二淨。之後的兩年開始嘗試撰寫部落格紀錄工作遇到的大小問題，並且在學校擔任業師簡單授課，漸漸發現透過這種方式雖然花費時間，但學習的很札實。
如同系列文章簡介所說的，今年陸陸續續重新開始接觸 SQL Server 與 Stored procedure 相關工作(社群部分則是接觸Azure SQL)，雖然不是第一次接觸，但總覺得自己基礎沒有打得很好。今年正好遇到一群朋友組團參加鐵人賽，就想趁這次機會，紀錄下今年所遇到的問題與學習的新知識。這個系列文章將比較偏向先介紹程式、設定與架構，再提供一個小範例的形式呈現，每篇篇幅會較簡短。因為這個領域個人屬於初學，此系列文章若有錯誤觀念或任何建議，還請各位先進不吝指教。
主要使用
Developing with .NET on Microsoft Azure - Getting Started
https://www.pluralsight.com/courses/developing-dotnet-microsoft-azure-getting-started?twoid=FEED65A23CB221A7
Azure SQL Database for the SQL Server DBA
https://www.pluralsight.com/courses/azure-sql-database-dba
SQL Server Fundamentals
https://www.pluralsight.com/courses/sql-server-fundamentals
SQL Server 2016 New Features for Developers
https://www.pluralsight.com/courses/sql-server-2016-new-features-developers
Study4TW 01月活動(台北) - Study4Love 與大師對談
http://study4.tw/Activity/Details/12
15 位講師，分享他們的專業知識和經驗，在一整天的議程中，您將可以盡情地享受 IT Infrastructure、Dev、Agile、DevOps、Azure、Database、AI...等相關的議題
本系列文章將同步分享於個人部落格與點部落
http://dog0416.blogspot.tw/
https://dotblogs.com.tw/dog0416","['前言', '系列文章規劃 (持續更新)', '團隊成員', '相關參考資料與資源(持續更新)：', '社群活動推薦', '其他']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192201,SoftwareDevelopment,1,系統架構秘辛：了解RISC-V架構底層除錯器的秘密！系列,1,Day01:規劃與大綱簡介,HelloWorld,https://ithelp.ithome.com.tw/users/20107327/ironman,1513690871000000000,266,"第一次參加這個比賽，尤其還是被同事們拉來參賽~~
如果覺得文筆不太好，而且主題比較生硬一些，還請見諒!
來公司也超過三年，用這個主題的系列筆記，算是做個紀錄，
紀錄一下這些日子學到的東西!
  
  
  
本次參賽預計分成以下五大主軸
每個主題預計用4~5個篇幅來說明，會由3~4篇配合1個小小Lab當作試煉，
另外每篇文章中，應該會是講解+程式碼穿插說明。
當然，這只是個預計，搞不好之後會有更多的內容也說不定XD!
  
  
  
絕對不承認第一篇是拿來騙(衝)文章數量的啦~~ XD
最後還是來自我介紹一下，本人是來自晶心科技的HelloWorld，專長是打雜，
未來三十天三十篇還請各位多多指教，感謝各位!!
  
  
  
NONE","['0. 前言', '1. 架構', '2. 主題大綱', '99. 結語', '參考資料']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192198,ModernWeb,0,認識Chrome開發者工具系列,16,原始碼面版-使用中斷點1,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1513689982000000000,237,"今天我們要開始來一起討論如何使用原始碼面版 (Sources panel) 來除錯你的網頁。在開發者工具中，我最常用的面版就是元素面版跟原始碼面版，每當我在進行開發的時候，我的開發者工具是一直都開著的，不是在元素面版，就是會在原始碼面版。可見這兩個面版的重要性，我相信在我們一起看完原始碼面版之後，原始碼面版也會成為你每天開發工作中不可缺少的工具。
原始碼面版主要由三個大區塊組成：

圖 1：原始碼面版由這三個主要的控制台組成
會不會使用中斷點是一個很重要的技巧，當你知道怎麼使用中斷點後，要找到程式中的臭蟲就相對簡單很多。我們今天要使用來除錯的範例是官方文件裡提供的一個 Demo 網頁，我本來是想要一樣用 IT邦的網頁來做介紹，但是怕這樣原始碼內容太複雜，並且網頁有更新的可能，所以最後決定就用官方的文件 Demo 網頁
在 JS 中，要設定一個中斷點，可以使用 debugger 這個關鍵字 (Statement)，如下：
使用中斷點的時候要注意幾件事：
首先，你的程式需要被執行到，不然中斷點並不會被執行，所以下面這段程式的中斷點是不會被觸發的。
有看出來為什麼嗎？因為 greet 方法沒有被執行，所以 debugger 自然沒有被觸發，所以假設我們有 if 判斷式：
上面這一段程式一樣不會觸發 debugger，所以我們可以清楚的知道，你的 debugger 要放在可以被觸發的位置。
好，除了要注意這件事之外，在使用中斷點時，你的開發者工具一定要是開著，不然瀏覽器是不會有任何動作的。
我們剛剛提到了如何設定一個中斷點，並且知道中斷點是需要被執行並在開發者工具打開著時，才會作動。接下來我們就用官方提供的文件來試試設定中斷點。我需要幾個步驟來完成這個中斷點的設置：
在確定程式正確後，請儲存檔案(Mac Cmd + S, Windows Ctrl + S)，然後回到頁面上，在 Number 1 跟 Number 2 這兩個輸入框裡輸入任意的數字後，按下 Add Number 1 and Number 2 這個按鈕。這時候你的程式就會停在中斷點上。

圖 4：中斷點作用中的畫面
如果沒有儲存成功的話，中斷點就不會出現。當透過原始碼面版編輯一個檔案時，在檔案名稱的頁籤上會出現一個星號在你的檔案名稱旁 (在我們這個例子裡是 get-started.js*)，而當你儲存成功後，這個星號就會不見。另外，就像我前面一直在提到，如果你重新整理頁面，這些編輯包含中斷點都會消失。
我們今天就先停在這邊 (但是你的程式可以先關掉，不用停在那XD，重整頁面或是直接把開發者工具關掉就可以了)，明天我們會接續著一起討論，如何來操作中斷點的進行、了解執行當下的變數值、並抓出我們程式裡的臭蟲。因為原始碼面版算是比較重要的面版之一，我們會多花幾天的時間在這裡，我希望能把它說明清楚，但是如果過程中大家有不明白的，可以留言給我提問喔！",,"['原始碼面版介面簡介', '使用中斷點 (Breakpoints)', '小結']","['設定一個中斷點', '設定一個中斷點在原始碼中']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192193,DevOps,0,k8s不自賞系列,1,Day1：ContainerOrchestration,James,https://ithelp.ithome.com.tw/users/20107062/ironman,1513688475000000000,269,"近幾年，雲端平台（AWS, GCP, Azure, ...）的興起，大幅提升取得運算資源 (cpu, memory, volume, ...) 的方便性。接著無狀態（Stateless）的應用，水平擴展 (Horizontal Scaling) 程式因應龐大的用戶端訪問變得容易。隨後到來的容器 (container)，提供一致性的基礎架構。再輔以微服務 (Micro Services) 架構降低了程式耦合度 (Loose Coupling)，使得每個服務能更專注在個別提供的功能上。而 Kubernetes (k8s) 的出現，則是讓管理容器更簡潔方便。
未來的三十天，讓我們從觀念開始欣賞 k8s，接著透過實際操作更近一步了解 k8s。
關於 k8s
k8s 目前相當活躍，平均三個月會更新一次。本次鐵人賽意在將基本觀念與操作帶給大家，期望有了基本觀念後，日後再針對其他項目加強。因此，只會針對最重要的物件進行說明。
就在幾天前 k8s 已經正式發佈 v1.9 版本。k8s 不自賞一文操作的環境是以 v1.8 為主，請特別注意。
為方便閱讀，每日文章將會包含下列主題
本日共賞：Topic, 即今日分享主題
希望你知道：Prerequisites, 對於了解本日共賞有幫助的議題
本文：文章本體
額外補充會寫在這裡
這裡會放置 30 天文章的連結，以方便查閱
概念篇：適合什麼都不知道的你
基礎篇：適合知道容器與略懂 k8s 是什麼的你
常見問題與建議：適合已經有 k8s 概念的你
應用篇：適合正要往實務應用的你
時間寶貴，就讓我們開始好好欣賞一下 k8s 吧！
在開始討論 k8s 之前，我們先來聊一下容器 (Container)
容器是一種以應用程式為中心 (application-centric) 的架構，能夠在選定的基礎環境中 (Infrastructure) 部署高效率 (high-performance)、可擴充 (scalable) 與個別獨立 (isolate) 的應用程式。
選定的基礎環境：可自行決定需要使用的環境、版本。
試試撰寫 Dockerfile
高效率：不似龐大的系統，啟動一個容器只需短短幾秒
試試 docker run
可擴充：可動態新增或刪除容器
個別獨立：容器可互相溝通但容器間的運作並不會互相干擾
其中高效率、可擴充與個別獨立為容器的主要特色。再來由於容器可以部署在多種不同環境 (Desktop, VMs, Cloud 等等)，不但增加了便利與彈性，更能確保跨平台的一致性。
一致性
開發程式最常見的的問題是 ""我的電腦可以跑！沒問題"" ，但事實可能是 *""就只有我的電腦可以跑""*。透過容器一致性的特性能確保使用的環境都是一致的而不再因為環境的不同造成程式無法運作。
容器中最為人熟知的莫過於 Docker，而 Docker 恰恰是 k8s 預設使用的容器。因此，如果對 Docker 的概念已經了解的話，對學習 k8s 是有加分的效果。當然，如果不會也沒有關係，可以先了解 k8s 後再自行研讀。
這次鐵人賽有大大分享 Docker 相關知識可以參考喔
yangj26952： 用30天來介紹和使用 Docker
jia_hong： 讓我們來玩玩Docker吧
不同於開發/測試環境，在容器運行的正式環境 (production) 中，我們必須要確保應用程式能夠
可擴展
可擴展應該分成兩個部分來討論：
Vertical Scale：透過雲端平台，硬體 (host, cpu, memory, disk, ...) 的擴展可隨著需求隨時增加或減少。
Horizontal Scale：而應用程式的可擴展則需要透過類似 Container Orchestration 這類的工具來達成。另外，此類型的擴展有時候也需要增加更多硬體。
手動擴展應用程式也是可行，但相對複雜度就會提高
Container Orchestrator 便是幫助我們能達到上述目標的工具，常見的 Container Orchestrator 如下
Orchestration
記得第一次查 Orchestration 這個英文字的時候，畫面跳出 ""管絃樂編曲"" 的解釋時真是差點沒昏倒。一度以為是要先學個樂理才能學 k8s。
比較了解 k8s 之後才發現這個用字真的很精妙。想像一下在你精妙的指揮下，運行在 k8s 中的應用程式協同運作並發揮了最大的效能。就如同管弦樂器在彼此的配合下，彈奏出一首首令人陶醉的樂章。

了解什麼是 Container Orchestrator 以及好處後，我們就可以正式進入 k8s 的世界，未來的 30 天，不！，只剩下寶貴的 29 天，就讓我們一起好好欣賞 k8s 。
本文同步發表於 https://jlptf.github.io/ironman2018-day1/",,['前言'],"['文章連結', '本日共賞']","['Contaner', 'Container Orchestration', 'Container Orchestrator 的好處']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192194,自我挑戰組,0,網頁學習日誌系列,16,AJAX:網頁顯示資料-JS篇,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1513688082000000000,259,"在此先用javascript抓遠端資料(JSON格式)到網頁，並把它轉成文字顯示在網頁上。
功能是按下按鈕下方就會顯示遠端抓取的文字
先定義一個新的XMLHttpRequest，並且藉由它來onload 資料，因為目前只是要得到資料並顯示在網頁，所以send設定為空值。
然後要把json轉成物件可方便javascript抓取，則用到下面語法：
W3C ：
json.parse解釋：
https://www.w3schools.com/js/js_json_parse.asp
xhr.responseText解釋：
http://www.w3school.com.cn/ajax/ajax_xmlhttprequest_response.asp
轉成物件後，現在來利用javascrip處理顯示在網頁上的工作：
for迴圈處理：
定義 「content」並在此組合迴圈資料,console結果如下：

迴圈的內容「content」放入str空字串中，如果沒用「+=」只會跑一筆資料。
最後再for 迴圈外層加上innerHTML資料排到ul下層，成為ul li清單列了。
要讓按鈕按下才顯示，則在for迴圈上層加上onclick 事件，就完成了!!
",,"['html：', 'javascript：', 'codepen網址：https://codepen.io/yuski/pen/baEpvj']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192195,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,16,16.應用：自用英文翻譯機器人,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513688033000000000,252,"經過上一篇簡單說明與設定 Cognitive Service -  文字翻譯服務，在這一篇我們要開始實作英文翻譯機器人。這邊提供一個範例，您可以透過這個範例進行延伸，增加文字語言偵測或多語言翻譯功能，讓這個機器人功能更加完善與嚴謹。
註：若您尚未設定 Azure Translate Text API，請回到上一篇
如同上一篇說明的，我們的流程如下圖，會有兩個程式區塊：取得 Access Token 與使用翻譯服務。

Step 1. 首先我們新增一個類別，命名為 AzureAuthToken.cs。

Step 2. 增加一個方法GetAccessTokenAsync用來進行驗證並且取得 Access Token，內容如下(參考範本)：
Step 3. 開啟 Bot Template 範本新專案，開啟 RootDialog.cs，先增加一個私有方法 AuthoizeService
Step 4. 新增一個私有方法 TranslateString，用於呼叫翻譯
註：因為是簡單講解如何介接服務，XML剖析部分，實作時請用更好的方法處理
Step 5. 增加 Key
Step 6. 修改程式如下：
Step 7.啟動專案

Step 8.透過模擬器測試，成功!!

https://github.com/matsurigoto/TranslatorBotExample.git
其實做多功能機器人好像沒有很難...? (被毆)","['前言', '程式', '範例']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192191,SoftwareDevelopment,1,與妖精共舞：在RISC-V架構上使用GO語言實作binutils工具包系列,1,第一日：系列文規劃與介紹,nonerkao,https://ithelp.ithome.com.tw/users/20103524/ironman,1513686676000000000,246,"在諸多學門之中，資訊科學可說是相當年輕的一支，就算僅僅發展數十年，其不成比例的影響力仍然形塑今日人們的科技生活的所有面向。其中，許多觀念、理論、技術經過歲月的淘洗，成為內行不可不知、外行也常常略有耳聞的普及知識。這樣的例子俯拾皆是，比方說經典的 quick sort 演算法、判定人工智慧的圖靈測試、或是由學術網路發展成全球通訊框架的網際網路等等。
在這次的鐵人挑戰賽之中，筆者準備介紹的不是那些搏人目光的熱門詞彙或是趨勢，而是非常樸實、默默耕耘，在各種電腦系統之中持續運行的一個核心要素：ELF (Executable and Linkable Format)，也就是 Unix-like 系統中最為通用的二進位檔案格式。若將資訊系統的 0 與 1 比擬為生物體的 DNA 分子，那麼 ELF 就可比是細胞的架構一般：儘管有大小、形狀、功能之不同，仍有基本格式可尋。
ELF 檔究竟是什麼？網路上不難找到諸多詳實的資料，但筆者自己也常常苦於理解那些文件，總覺得，若是能有中文的內容，而且還附帶範例來讓人理解，那該是多麼方便啊！於是，想要理解 ELF 檔案格式的願望，也就成為了筆者參與本屆鐵人賽的原動力，希望在圓夢之餘，也能夠分享給需要的網友一同勉勵切磋。
為了避免缺乏新意的老調重彈，筆者還在這個主題中摻入自己想要學習的部分：GO 語言與 RISC-V 開放指令集架構。
GO 是一個靜態型別的編譯式語言，它的內建功能短小精悍，是 Docker 及 Kubernetes 等大型專案的原生開發語言，至今累積了許多的用戶、開發者與愛好者社群。在官方函式庫中，也有 ELF 相關的方法，因此作為這個主題的主力語言應是十分合適。
RISC-V 是一個方興未艾的指令集架構。不像 x86 或 ARM 這類已經在市場上橫行多年的 ISA 巨獸，RISC-V 的指令集相當簡潔，甚至可以被完全包含在一張不足 A4 大小的紙卡上；這份精簡的特性，應該有助於減輕讀者閱讀組合語言時的吃力程度。由於筆者私人興趣以及在工作上的需求，未來也會培養與 RISC-V ISA 相當程度的默契吧。
關於標題中最後的一個英文字 binutils，則是多年以來人們處理與理解 ELF 檔的工具包集合體，是自由軟體基金會的 GNU 專案的一部分。裏面包含了人盡皆知的 ld 連結器以及 as 組譯器，也有一些像是 nm、ranlib 等乍看之下不知是什麼的工具。這些工具幫助人們免於處理二進位格式的困頓，從而在每一個專案之中都直接或間接的加速並輔助了軟體的建置、除錯與監控的方便性。
這開宗明義的第一篇文章的後面兩個章節，筆者先提出鐵人賽計畫的總體目標與相關說明，日後也將視情況更新後續文章的目錄索引於本節之中；最後章節提供參考資料的連結，並將在過程中不斷更新。感謝 IT 邦幫忙再度主持這個利己利人的年度盛會，也歡迎各位讀者一同就相關的主題討論，當然還有所有形式的建議與批評。
為了讓有興趣的讀者諸君能夠一同體會這個主題的樂趣，筆者提供了這個 repo：RISC-V Playground from Scratch，也就是從零開始建置 RISC-V 的開發環境。今天我們先介紹這個 repo 的懶人版使用方法，明天再理解其中的過程為何。
首先我們要準備 docker 工具的安裝。Docker 是一個功能強大的工具，即使年初 Docker 公司已經宣佈將之併入 moby 母專案，多數 Linux 發行版也沒有改變軟體包的名稱，可以直接使用發行版的安裝方式。使用者也可以選擇加入官方的軟體包 Repo 作為上游，安裝 docker-ce 的免費社群版本。
筆者發現某些發行版似乎沒有更新舊有的 docker，因此像是 CentOS 或 Ubuntu 的用戶，最好依照官方教學進行安裝。
筆者也很高興慣用的 Archlinux 直接讓 docker 軟體包成為後來的 docker-ce 的別名。
Windows 或 Mac 的朋友也請不要氣餒，可至官方網站確認 docker-machine 的安裝方式。
一旦安裝好 docker 以及一般用的開發軟體包（最主要是 Makefile）之後，就可以使用 git，
進入目錄之後，簡單的兩道指令即可完成環境建置：
然而，這個過程可能會花去非常久的時間以及 20G 以上的空間，請各位讀者耐心等候，先理解建置 RISC-V 軟體環境的過程中，筆者經過了哪些步驟。
make update 可以用來追上官方的新更動，而不需要耗費太多的時間在 git clone 上面。隔一段時間沒使用之後都可以 make update 一下。
之後若要做一次性的模擬，可以用
若是需要一個持續的開發環境，這套 script 也提供類似虛擬機器的使用方式。第一次必須使用：
確定開機之後就可以連線
不需要之後可以關掉
若要儲存修改，必須額外指定
其實這是 Docker container 環境，只是用起來像虛擬機器。
這個環境是 Archlinux 的環境，所使用的軟體管理工具是 pacman。
不想要使用 docker 或是 Arch 的讀者，請參考明天的完整解析內容，將會包含一步一腳印的教學與說明，也可以由各位讀者自行選擇喜歡的開發環境。",,,"['總論', '目標', '環境架設：懶人篇', '參考資料']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191639,自我挑戰組,0,迷失在挨踢叢林的獎金獵人系列,5,「獎金獵人小分享」-曉數碼黑客松,獎金獵人,https://ithelp.ithome.com.tw/users/20107677/ironman,1513686668000000000,239,"嗨，我是獎金獵人，現在正迷失在挨踢叢林當中，唯有提供各種資訊養分給願意帶我走出叢林的當地居民，我才能成功離開。
每年都舉行黑客松活動的曉數碼股份有限公司，今年的曉數碼黑客松大賽與資策會智慧系統所一起合辦，曉數碼為台灣相當知名的遊戲公司，總公司位於東京及福岡，「以遊戲的力量，為世界帶來幸福」則是他一慣的宗旨，目的是提升台灣遊戲製作能量與風氣。
此次比賽主題為「融合 Fusion」，共吸引超過130人報名，聚集 45 位遊戲開發好手，他們各自擁有美術、企劃、程式等不同專業，經歷 11 月 25 日和 26 連續兩天 30 小時不休息的激戰後，完成一款遊戲並達成上台Demo的目標，活動順利結束並從中選出了包含「Huminator」、「萊姆兄」、「媽媽的Bang當大作戰」等多件優秀作品。

(圖片轉載至曉數碼官網)
想參加黑客松卻不知道哪裡有嗎？歡迎鎖定獎金獵人網站唷！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192180,自我挑戰組,0,專案學習的30天系列,3,Day3-為了誰做專案-RD,馬達,https://ithelp.ithome.com.tw/users/20107754/ironman,1513686452000000000,260,"專注於技術，追求更好的品質和結構，最重要的就是「能懶就懶」，最終目的就是寫好一套，讓他去賺錢吧
從RD的角度來看，是為了技術而做專案，透過技術累積實力，就可以完成更有深度的專案，長期投資會有回報的，假如技術沒有光速的成長。",,"['RD', '菜逼八第一次專案心得，若不盡不詳之處還請包涵，若有其他想法也請大神們不吝指教']","['精神', '公司責任', '實際問題', '為了誰做專案']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192187,ModernWeb,2,AngularMaterial完全攻略系列,1,[AngularMaterial完全攻略]Day01-開始&簡介,Wellwind,https://ithelp.ithome.com.tw/users/20020617/ironman,1513685313000000000,1974,"從Angular第2版正式release後，根據全球最大工程師討論區StackOverflow的統計，從2016開始的Angular討論度就不斷竄升，甚至超越了React，直到了2017年，甚至擺脫了前一代Angularjs的陰影，躍升成為最熱門的前端議題！可以見得Angular這個前端框架確實具有它值得學習的地方，而在2017年底Angular正式邁向第5版，隔天Angular Material就從breaking changes不斷的beta版正式升到趨於穩定的rc版，沒幾個禮拜就直接正式release了！
一個是由Google推出的前端框架，一個是由Google推出的設計語言的Angular實作，兩者結合想必能加乘產生N倍以上的爆發力！接下來的日子，我們將一步一步地學會所有Angular Material的元件及特性、Angular CDK及一些進階的技巧，今天第一天就讓我們以比較輕鬆的節奏來認識所有的基礎知識吧！

圖片來源：StackOverflow
Angular是由Google推出的前端框架，其熱門程度在前端領域的不用多說，佔有了非常重要的一席之地，有別於著重在view上的React或Vue這類library，Angular本身就是一個完整的MVC框架！由於整合了大部分前端常用的套件，開發人員只需要著重在學習如何使用Angular這個架構即可，對於剛入門前端或是由後端轉前端的人來說大幅降低了學習的曲線，如果本身已經有MVC架構的基本概念，學習上更是如虎添翼。
搭配Angular CLI，開發人員能夠以更簡單的方式產生一個基本的專案範本，同時只要下一些簡單的指令即可產生基本的程式碼架構；隨著Angular CLI逐漸的進步，開發的彈性也越來越高，例如@angular-devkit/schematics可以讓我們在團隊中建立共用的範本程式等等，讓開發速度大耀進！
Angular主要以TypeScript作為開發語言，TypeScript是JavaScript的超集合，能讓我們在開發JavaScript時能以強型別的方式撰寫程式，並在轉譯成JavaScript時自動檢查型別的錯誤，減少runtime時的debug成本；同時TypeScript能讓我們不斷享受使用最新的語法來撰寫程式的快感，只需要稍作設定即可把最新的語法轉為比較舊的語法，避免瀏覽器支援度的問題！也由於Angular開了這一槍，讓各種熱門的前端library/framework也陸陸續續有了TypeScript開發的版本，足見TypeScript對於前端世界的影響力也將越來越高！
由於本系列文章屬於稍微進階的Angular議題，因此對於Angular基礎的知識將不會有太多的介紹，建議讀者至少具備以下Angular基礎後，在閱讀本系列文章：
就算沒有以上的知識，也完全不用擔心，網路上也有很多的參考資源，甚至還有中文版的文件，只要願意花個幾天時間，要對Angular有基本的認絕對不會是個問題！
當然，如果你有更多前端的相關知識如node、webpack等等，對於學習Angular或Angular Material絕對是加分的要素。
Material Design是由Google推出的設計語言，也可以把它想像成是一種設計的pattern，把視覺化設計的概念、網頁元件、操作互動等等理論及實作整理出來的設計準則，從元件的配色、陰影到特效都有一定的規則可循，我們能透過這些準則設計出清楚明確且容易使用的使用者介面(UI)，打造更好的使用者經驗(UX)；如果你是Google相關服務的愛用者，又對Material Design有點了解，相信你一定也有發現Google的各種服務在設計上也已經不斷朝Material Design邁進了。
由於Material Design僅僅只是一種設計的準則，不像bootstrap這類css framewrok，有直接的css樣式或javascript library可用，而是交由設計人員依照準則進行實作，偏偏Material Design的設計準則又非常多，一般開發人員不可能有時間依照這些準則一一設計，好在也有許依照Material Design的設計準則開發且open source的專案可用。例如Google官方推出的Material Design Lite和多平台都支援的
Material Components，或是由4個亞洲人合力開發出來的Materialize.css等等，都是目前常見的Material Desig實作版本。
當然像是React或Vue這類熱門的前端框架也很容易能夠找到相關的設計套件，透過這些實作套件，即使是沒有美感的前端工程師也能夠輕易設計出簡單大方，又不失設計感的頁面。
而身為爸爸同樣是Google的Angular，有一套由官方推出的Material Design套件也不是件奇特的事情，也就是接下來要介紹的Angular Material。
Angular身為Google自家推出的主力前端框架，而Material Design又是Google未來設計的主要方向，自然而然的，也免不了要替Angular量身打造一套Material Design的套件，也就是本系列的主軸－Angular Mateial。
根據Angular Material官方的說法，Angular Material的目標是使用Angular及TypeScript打造出高品質的UI元件，同時這些元件必須遵守Material Design的設計標準。
所謂的高品質，對於Angular Material來說包含了以下幾個重點：
從上段介紹可以看到，Angular Material對於品質的要求，從程式碼本身到元件實用性都完全顧慮到了，如果能夠達到這樣的品質，絕對可以說是目前其他任何Material Deesign套件所望成莫及的程度！也因此不難想像在beta時期，Angular Material可以說是不斷的breaking change，想必就是為了能夠不斷的往所謂「高品質」的目標邁進，這也成了很多想要進入Angular Material世界的人裹足不前的理由；儘管罵聲不斷，但朝著目標邁進的Angular Material在不斷進化的Angular推出第5版後，Angular Material的版本也從2.0.0-beta一下子大躍進為5.0.0-rc！同時才幾個禮拜後的2017/12/06邁入正式版，在這個剛release的時候進入學習既能避免不斷breaking changes的傷害，又能夠 跟別人炫耀 贏在起跑點，實在是個很不錯的進入時機！這也成了這次鐵人賽想要以Angular Material為目標的主要原因！
本系列的文章將會以Angular Material的官方文件為主要依據，一步一步帶領讀者們學習利用目前(5.0.0)所有的元件(共30個)來打造一個具備設計質感後台網站(dsahboard)，並完成一些簡單的頁面，並會進一步介紹功能強大好用的Angular CDK，時間允許的話，再介紹一些關於Angular Material的進階技巧！初步的規劃有如下3個單元：
之後的程式碼將會統一放在GitHub上，並以天為單位建立分支(day-02, day-03, ...ect)，方便大家隨時切換到每一天的記錄去了解程式碼的變化，相信對於學習會更有幫助。
關於這系列的文章，是筆者個人對於Angular Material及Angular CDK研究後的整理，希望能幫助讀者更容易進入Angular Material的世界，如果有任何問題，歡迎隨時在留言提出討論，彼此學習，互相成長；若發現有任何詞句不順、錯別字、或是觀念錯誤等等，也一樣歡迎提出來，讓整個系列文章的完整度更高！幫助更多人進入這個美妙的世界！！
今天的文章目標主要是讓大家對於Angular、Material Design及Angular Material有個初步的理解，Material Design本身是個非常棒的設計概念，以筆者有限的能力可能無法很完成的將精髓傳達給每個人，建議大家有空可以直接多去看看Material Design的設計風格，時間允許的話也可以大致瀏覽一下Material Design的設計準則，對於之後學習Angular Material開發時會更加的有感覺！
明天開始就讓我們前往高質感的前端設計之路邁進吧！！
這次的鐵人賽很特別，雖然早就有參賽的打算，但對於這次新的玩法團體賽可以說是從來沒想過，收到Alan Liu哥邀請的時候，實在是受寵若驚XD；也因為加入了團隊，在賽前的討論也讓這次的參賽更加不寂寞，一群人相約在同一時間發文，並在群組內互相加油打氣(甚至定下懲罰條款XD)，感覺實在是很好^^
希望未來的鐵人賽也能繼續加入這個制度，讓彼此在學習這條路上不寂寞。

以下是這次參賽的團員，按照2018新年快樂團隊介紹的順序排列，歡迎大家訂閱他們的系列文章，給他們加油打氣！",,"['關於Angular', '關於Material Design', '關於Angular Material', '系列文章規劃', '討論是進步的起點', '本日小結', '後話']","['Angular CLI', 'TypeScript', '基本門檻', '相關資源', 'Material Design的實作', '相關資源', '高品質的Angular Material', '追求高品質的後果與成果']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192186,ModernWeb,2,寫給朋友的PHP從0到100實戰教程系列,2,Day2.PHP教學:把資料記到變數盒子,falconwei,https://ithelp.ithome.com.tw/users/20107394/ironman,1513682932000000000,277,"Why
為什麼我們用 PHP 要學『變數』啊？
因為我們會需要暫時記住一些資料，用來重複使用或是用來計算，這個暫時儲存的空間稱為變數。
很像是我們數學上的 X 代數，可以代表某個數字或資料。
來舉個例，假設一個情況我們今天要組合一串文字
如果今天發生意外，臨時要換另一隻神奇寶貝叫『走路草』來做一樣的事情。
找工讀生來幫忙改，是不是要一行一行找，找到妙蛙種子改走路草：
How
如果不幸我們妙蛙種子用了一千次一萬次，那改完可能天亮了。
聰明又懶惰的你一定會想說，有沒有辦法改一次就好。
當然有，寫成這樣就可以了：
What
這段可執行出相同結果的例子，想看懂先來了解幾件事：
那麼我們只需要改這行：$pokemon = ""妙蛙種子""; 就可以把全部的妙蛙種子改成走路草
改成：
就可以瞬間完成一千行的修改，再去喝杯咖啡，悠哉的回報說你超神速解決問題了，變數是不是超實用。
這時候一定有人舉手問說字串可以放到變數裡面，那可以放數字嗎？
我會說老天你怎麼這麼厲害，會舉一反三！
再舉個例子：
今天的課後問題是最後 echo 印出的 $damage 是多少呢？
想真的執行 PHP 語法的話，可以到這個網址把問題複製上去，就可以看到答案了。
http://sandbox.onlinephpfunctions.com/
疑，你說怎麼不是 220? 班上如果有知道答案的資優生幫我留言回答解釋一下，謝謝 :D",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192184,自我挑戰組,0,TDD-紅燈，綠燈，重構，30天TDD之路有你有我系列,2,Day2.什麼叫單元測試?再給我說一次，什麼叫他__的單元測試?,sqz777,https://ithelp.ithome.com.tw/users/20107209/ironman,1513682743000000000,289,"這一篇，就先來簡單的談談什麼叫做「單元測試」你再給我翻譯一下 什麼他___的叫單元測試
這一篇將會談談單元測試原則、FIRST和3A原則，這篇應該會很有趣XD

單元測試，英文又稱為Unit Test，就是針對程式最小單元，進行的測試，稱之為單元測試。
現在我們終於知道了單元測試以及最小單元的定義，做單元測試之前，我們要知道要保持什麼樣的原則及特性才能成功的做出「好的」單元測試。
下圖參考91大大的部落格的圖翻做出來的Unit Test的定義及基本準則圖

1.	一個測試案例只測一種方法
若一個測試案例測了多種方法，那你這個測試案例就會很複雜，假設今天這個測試案例中有很多種方法，如果這個測試案例錯了，你會不知道錯在哪一個方法之中
2.	最小的測試單位
3.	不與外部（包括檔案、資料庫、網路、服務、物件、類別）直接相依
不與外部相依的原因是需要排除「不是在我們的方法上出錯」的可能性，假設相依在線上的資料庫上，很有可能會因為網路、資料庫被異動而導致測試案例失敗的可能，所以不與外部直接相依，而是以stubs、mock的方式來進行單元測試。
4.	不具備邏輯
單元測是本身不可以具備邏輯，如果單元測試具備了邏輯那就需要在寫一個測試來測試這個測試案例是不是正確的，這樣一看就知道是一個不符合邏輯以及奇怪的事情。
5.	測試案例之間相依性為零
測試案例之間如果有相依性，那就很有可能會造成測試案例之間的「干擾」，假設某一個B測試案例需要A測試案例先啟動才會通過，如果A測試案例不過，B測試案例就不會過，這樣就會干擾我們去判斷今天是因為錯了A才錯B還是B本身就是錯的。
我就想先讓你翻譯翻譯，什麼叫最小單元?

最小就是單個程式、函式、過程等，在物件導向中的解釋，就是在基礎類別、抽象類別或者子類別中的「方法」，就是最小單元。
大哥這個是FIRST原則啊

如何定義這個單元測試是不是好的單元測試?，一個字FIRST(參考於無暇程式碼)

1.	Fast：快速。
好的單元測試要可以快速的執行完成。
2.	Independent：獨立。
好的單元測試要是獨立性的，也就是無相依的。
3.	Repeatable：可重複。
好的單元測試要是可以重複執行的。
4.	Self-Validating：可反應驗證結果。
好的單元測試是要可以真的驗證一件事情的結果的，不需要透過人為的操作來進行驗證。
5.	Timely：及時。
單元測試的程式碼與產品程式碼是兩個一起完成的。
談了這麼多的準則、原則，這些雖然看起來很明瞭，但卻又很模糊，那我們在實作上到底要如何開始呢?
單元測試就是要3A原則
呼呼，終於說到了最後一個原則啦!!!

3A原則是單元測試的開始，常常在寫測試的時候不知道該如何開始就可以直接在程式碼寫下這三行再開始

不過這3A到底是甚麼意思呢?
1.	Arrange
初始化物件、相依物件、方法參數、預期結果或是預期的互動方式
2.	Act
呼叫被測試的目標物件方法
3.	Assert
驗證是否符合預期
Note:這一個3A原則最主要是用來輔助撰寫的測試程式碼，讓我們的測試程式碼更好理解。

當然，在這一個巨大的開發世界中，我們常常會遇到某些單元會覺得也太大一個了吧！！(跟我現在的肚子一樣)
這些一開始嬌小可愛的「單元」就跟剛開始交往的女/男朋友一樣，好看，好維護，好測試。
只要一不注意，這些嬌小可愛的「單元」就會像交往多年的女/男朋友一樣，經過每一次的需求或版本的更新 (吃飯、出遊)，不知不覺就變大、變肥、變得不好維護和測試了，不過只要有愛(錢、薪水)就可以把這個單元(感情?)繼續更新和維護下去。
不是大隻就是不好，而是「不健康」。 (如果你跟成吉思汗館長一樣壯碩大隻那另當別論了)，程式碼就跟人一樣，太肥就會讓人覺得「不健康」。
通常看到這一些變肥的單元，我們必須要想辦法把它拆解，重構，讓這些單元「可測試化」，但我們這一次要說的主題是預防寫出難以「可測試」的程式，所以我們需要TDD來幫助我們寫出「可測試」的程式。
(廢話 不能測試的話 就沒辦法開發了啊XDDDD
我們，下一篇見!","['前言', '什麼叫單元測試?', '單元測試的準則', '什麼叫做最小單元?', '好的單元測試－FIRST特性', '談點常常看到的情形']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192183,自我挑戰組,1,Vuex學習筆記系列,9,[Vue.js]Vuex學習筆記(9)-modules的核心概念,NomiSu,https://ithelp.ithome.com.tw/users/20107601/ironman,1513682233000000000,262,"由於使用單一狀態樹（single state tree)，應用的所有狀態會集中到一個比較大的物件，當應用變得非常複雜時， store 物件可能變得非常臃腫。
為了解決這樣的問題， Vuex 允許我們將 store 分割成模塊（module），每個模塊擁有自己的 state、mutation、action、getter，甚至我們可以嵌套子模塊：
對於模塊內部的 mutation 和 getter，接受第一個參數是此模塊的局部 state。
模塊內部的 getter ，根節點狀態會作為第三個參數曝露出來：
對於模塊內部的 action ，局部狀態通過 context.state 曝露出來，根節點狀態則為 context.rootState。
在前面的範例中，模塊內部的 action 、 mutation 與 getter 是註冊在全局命名空間，這樣使得多個模塊能夠對同一個 mutation 或是 action 做出響應。
如果我們希望模塊可以有更高的封裝度與重用性，我們可以通過新增 namespaced: true 的方式使其成為命名空間模塊。當模塊被註冊後，它所有的 getter 、 action 與 mutation 都會自動根據模塊註冊的路徑調整命名。
啟用了命名空間的 getter 與 action 會收到局部化的 getter 、 dispatch 和 commit，這代表我們在使用模塊內容是不需要在同一模塊內而外添加 namespace 前綴，更改 namespace 屬性后不需要修改模塊內的代碼。
如果你希望使用全局 state 和 getter ， rootState 和 rootGetter 會作為第三和第四個參數傳入 getter ，也會通過 context 物件的屬性傳入 action 。
若需要在全局 namespace 空間內分發 action 或提交 mutation ，將 { root: true } 作為第三參數傳給 dispatch 或 commit 即可。
當使用 mapState, mapGetters, mapActions 和 mapMutations 這些函數來綁定命名空間模塊時，寫起來可能比較繁瑣：
為了簡化這樣的情況，我們可以將模塊的空間名稱字串作為第一個參數傳遞給上述函數：
此外，我們可以通過使用 createNamespacedHelpers 建立命名空間 helpers：
模塊的概念這邊看完可能會比較不清楚到底如何使用，未來有時間我會再新增一些範例來讓大家更清楚明白，礙於最近案子比較忙，未來有時間一定會把它寫的更清楚。",['Modules'],"['模塊的局部狀態', '命名空間']","['mutation / getter', 'action', '在命名空間模塊內訪問全局內容', '帶命名空間的綁定函數']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192175,ModernWeb,4,重新認識JavaScript系列,16,重新認識JavaScript:Day16那些你知道與不知道的事件們,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1513680303000000000,377,"在前面兩篇文章中，我們已介紹過事件的傳遞機制，以及如何阻擋事件的冒泡與預設的行為。 那麼，作為「事件三部曲」的最後一篇，我們就來大略介紹一下，DOM 規範當中究竟提供了哪些事件。
瀏覽器可能發生的事件有很多種，了解這些事件的情境及效果，是開發 Web 應用程式不能忽略的基礎。
介面相關的事件不一定會與使用者對 DOM 的操作有關係，反而大多數與 window 物件比較相關。
load 事件：
註冊在 window 物件上，指的是網頁資源 (包括CSS、JS、圖片等) 全數載入完畢後觸發。
如果是 img 元素的 load 事件，則表示是此圖片載入完畢後觸發。
unload 、 beforeunload 事件：
與 load 事件相反，unload 與 beforeunload 事件分別會在離開頁面或重新整理時觸發，而 beforeunload 會跳出對話框詢問使用者是否要離開目前頁面。

像這樣，當 image.jpg 這個圖檔不存在的時候，馬上就會觸發 error 事件。此時就會透過 this.src 將 <img> 的 src 屬性替換成指定的預設圖檔，是相當實用的技巧。
若是在網頁 load 完成後才註冊 error 事件的 handler，你只會看到叉燒包或者破圖的結果，因為 error 事件不會再次被觸發，後來掛上去的 handler 就等於沒有一樣。
resize 事件：當瀏覽器 (window) 或指定元素 (element) 的「尺寸變更」時觸發。
scroll 事件：當瀏覽器 (window) 或指定元素 (element) 的「捲軸被拉動」時觸發。
DOMContentLoaded 事件：
類似於 load 事件，但不同的是，load 事件是在網頁「所有」資源都已經載入完成後才會觸發，而 DOMContentLoaded 事件是在 DOM 結構被完整的讀取跟解析後就會被觸發，不須等待外部資源讀取完成。
簡單來說， DOMContentLoaded 與 load 的時機可以用這張圖來解釋：

圖片修改自: Web Browsers : What is Web Browser
我們在 Day 12 透過 DOM API 查找節點 曾介紹過，<script> 標籤要是放在 <head> ... </head> 之間，因為還沒解析到網頁本體會有選取不到 DOM 的問題對吧？
那麼，改成這樣
就可以排除 <script> 標籤放在 <head> ... </head> 抓不到 DOM 的問題了。
與大家所熟知的 jQuery $( document ).ready( handler ) 作用類似。
mousedown / mouseup 事件: 這兩個事件分別會在滑鼠點擊了某元素「按下」(mousedown) 按鈕，以及「放開」(mouseup) 按鈕時觸發。
click 事件: 當滑鼠「點擊」了某元素時觸發。
dblclick事件: 當滑鼠「連點兩次」了某元素時觸發。
mouseenter / mousemove / mouseleave 事件：
這三個事件要放在一起看

這些滑鼠相關的事件，都可以透過上一篇曾介紹的 event.pageX 與 event.pageY 屬性去取得目前在網頁對應的座標。
鍵盤相關事件有下列三種，在大多數情況下會將鍵盤事件註冊在 input 的輸入框上。
keydown 事件: 「壓下」鍵盤按鍵時會觸發 keydown 事件。
keypress 事件: 除了 Shift, Fn, CapsLock 這三種按鍵外按住時會觸發，若按著不放則會連續觸發。
keyup 事件: 「放開」鍵盤按鍵時觸發。
如果我們針對同個元素同時綁定了這三個鍵盤事件，那麼這三個事件執行的順序會是：
若此時想要知道使用者按下的按鍵，則可以透過 event.keyCode 屬性來查詢。
註： keyCode 的對應表可以到這裡查看：https://gist.github.com/tylerbuchea/8011573 。
例如，今天你想要當使用者在 input 輸入框按下 「enter」 時，發動 submit，就可以這樣做：
像這樣，透過 e.keyCode 就可以判斷使用者目前按下的是哪個按鈕。
input 事件： 當 input、 textarea 以及帶有 contenteditable 的元素內容被改變時，就會觸發 input 事件。
change 事件： 當 input、select、textarea、radio、checkbox 等表單元素被改變時觸發。 但與 input 事件不同的是，input 事件會在輸入框輸入內容的當下觸發，而 change 事件則是在目前焦點離開輸入框後才觸發。
submit 事件：當表單被送出時觸發，通常表單驗證都會在這一步處理，若驗證未通過則 return false;。
focus 事件：當元素被聚焦時觸發。
blur 事件：當元素失去焦點時觸發。
Composition Event 其實指的是 compositionstart 、 compositionend ，以及 compositionupdate 這三個事件。
介紹 Composition Events 之前先來談談 DOM API 過去對輸入框偵測變化的幾個方式。
前面介紹過，常見的表單輸入框如: <input type=""text""> 如果要動態監聽輸入框的文字變化時， 大多會透過監聽 keydown、keypress、keyup 等鍵盤事件來判斷 value 是否變動，但如果是透過「複製貼上」之類的操作，就無法透過鍵盤事件來判斷。
而即使是 change 事件則是要在使用者改變內容，且焦點離開輸入框的前一刻才會被觸發。
所以後來有了 input 事件， input 事件會在輸入框的內容被改變時即時觸發，確實也解決了過去在 onChange 以及鍵盤相關事件功能不足所產生的問題。
但是，新的問題來了！
通常像這樣的搜尋框，我們會用類似 autocomplete (自動完成) 的方式給使用者搜尋建議 (以 google 為例)：

如上圖，在輸入中文的時候，通常會需要透過注音之類的輸入法來做拼字。
但是在大部分的情況下，針對「注音符號」或是「拼音文字」去給搜尋建議是沒有太大意義的。
這個時候就需要透過 Composition Events 來為輸入框做增強。
透過 Composition Events 我們可以觀察使用者在輸入框內開啟輸入法 (Input Method Editor, IME) 時，組字或選字的狀態。
Composition Events 提供三個事件給開發者監聽：分別是 compositionstart 、 compositionend ，以及 compositionupdate。
執行的時候像這樣：

可以看到，如果要確認使用者輸入完成並送出文字時，就可以透過 compositionend 來做最後確認。
自訂事件可以用 Event constructor 建立，同樣透過 addEventListener 去監聽，由 dispatchEvent 決定觸發的時機。
若是想要在自訂事件內增加更多資料，則可以改用 CustomEvent：
那麼在 Event Handler 就可以透過 event 來接收：
當然，瀏覽器提供的事件相當多，今天分享的部分主要是比較常見，以及工作實務上需要特別注意的部分。
其他的多數事件你都可以在 MDN 的 Event reference 找到。",,"['事件的種類', '自訂事件']","['介面相關事件', '滑鼠相關事件', '鍵盤相關事件', '表單相關事件', '特殊事件']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192174,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,11,[XI]用CodeIgniter的30天-積欠篇數+=1,qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1513679497000000000,248,"標題很程式
其實又欠了一天
崩潰中",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192170,ModernWeb,1,邁向JavaScript勇者之路系列,16,JavaScript建構式與原型,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1513679439000000000,294,"還記得先前幾篇的原型鍊嗎？多個物件可以使用相同原型的那個章節，兩個不同的角色但是共用相同的原型，所以當原型增加新的功能，另一個角色一樣會獲得相同功能：

現在已經透過 JavaScript 建構式產生一個獨立的物件，我們接下來會使用原型鍊的概念來創造原型。
目前已經使用建構式製作一個簡單手機樣板，但我們會發現作為一個手機似乎少了一個重要的功能 打電話，這個功能是所有手機都具備個功能，無論他是何種型號。因此，這裡要透過 原型 的概念將手機賦予 打電話 這個功能，無論是哪一種型號，都能直接繼承此功能。
以下這段和上一個章節的程式碼是相同的，這裡已經透過手機範本 (PhoneTemplate)建立了兩隻手機。
接下來直接在 手機範本 上使用  prototype 的語法來加入撥打電話的功能 (callSomeone)，加入此功能後這兩隻手機都同時具有撥打電話的功能。
發生什麼事了？可以透過 console.log() 來看看兩隻手機內有什麼樣的變化，此段的 __proto__ 是 PhoneTemplate 的原型，在 __proto__ 內可以看到 callSomeone() 的方法，我們直接在手機範本上加入就會使透過此建構式生成的物件套用這段原型。

此時我們如果查看另一支手機也會有相同的功能。

在概念上，這段的原型會如下圖顯示，兩者的上層皆是 phoneTemplate，並且共用相同的方法，這也像魂結一樣兩個連向共用的物件，當此物件新增了任何功能，兩個物件也能一起繼承。

除了共用的概念外，我們每次新增一個物件時，物件內的屬性、函式都會需要佔用記憶體空間。也就是一個物件內有 10 個屬性，生成 10 個則會佔用 100 單位的記憶體空間，如果適當地將 5 個屬性轉至原型內，則只會佔用 (5*10) + 5 = 55 的記憶體空間。

這點在開發 Node.js 應用程式時影響更大，由於伺服器端的記憶體不能像瀏覽器隨意關閉釋放，所以記憶體的控制更為重要。
如果你了解此段，很容易就能看到任何物件的根本，對於看懂 JavaScript 的文件也會更為容易，就如同以下是 ""陣列"" 的原型，所以所有陣列都與此原型產生魂結牽連，因此可以用以下的方法。

而為什麼 DOM 方法取得的陣列為什麼不能用很多陣列方法，原因他是屬於 **array-like(類陣列)**，我們可以從原型中得知它與陣列不是共用的。

文章同時發表於：https://wcc723.github.io/javascript/2017/12/19/javascript-constructor-and-prototype/",,"['範例', '記憶體概念', '原型觀念']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192166,Security,0,IT安全稽核系列,16,4.7重要資訊處理人員是否簽署保密協議並定期審查？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1513679378000000000,273,"公司的資安無法落實，往往最大的破壞者，就是高層。
公司內部文件，都需要保密，也簽署保密協定，大家也都很努力去寫制度、流程，一切表單也照流程簽核，可是遇到高層就像海豚灣一樣，突然間所有的制度都變成廢紙，以下本人就針對這種形式上的保密協議，做個討論。
四、資訊安全組織　（資訊安全組織、人事及資訊單位）
4.7重要資訊處理人員是否簽署保密協議並定期審查？
說明：此項說明二個重點：1.簽署保密協議。2.定期審查。
一般來說，每個員工進入一家新公司，都會要求簽署很多合約，這種保密協議一定會有，但是正常的情況下，也沒人會真的去看內容，反正為了一碗飯，該簽的賣身契還是得簽，這也是無奈的地方。
以下是網路上的參考範例：
保 密 協 議 書
茲            (以下稱甲方)為與 (以下稱乙方)因之需要，一方擬將其持有之機密資訊告知或交付他方，或一方將有接觸另一方相關研發成果或技術秘密等機密資訊之機會。任一方所告知或交付之機密資訊，內含其自身所擁有之研發成果或技術秘密重要智慧財產權之法定權利或期待利益。為保持所知悉或交付資訊之機密性，他方同意恪遵本協議書下列各項規定：
第一條　本合約所指任一方之機密資訊係指與任一方相關並經該方標示「機密」、「限閱」或其他同義字之一切商業上、技術上或生產上尚未公開之秘密，或雖未標示但依一般商業及法律觀念，應視為機密之物品、文件及資料等，包括但不限於任一方未公開之發明、創作、專門技術、電腦軟體或其他技術資料或研發成果。
第二條  任一方所交付之機密資訊，包括但不限於書面、圖儀、電腦或磁碟片檔案、錄音、錄影帶或光碟片資料檔案等，凡他方自一方取得或知悉或接觸的一切資訊均屬之。但下列情形不在此限：
一、	已有書面證據證明，一方所交付或告知之資訊，他方所已知者；
二、	已見於公開發行之刊物或出版品等欠缺機密性質之資訊；
三、	經一方事先書面同意他方公開或揭露給第三人之資訊；
四、	自不須承擔任何保密義務及責任的第三人處合法取得者。
五、	依法律、政府機關或法院之命令須為揭露者。
第三條  任一方保證對於他方之機密資訊嚴守保密之義務，非經他方事前書面同意，絕不以任何方式使其他第三人知悉或持有任何他方之機密資訊，更不得於甲乙雙方約定目的以外為自行利用或以任何方式使第三人利用他方之機密資訊或取得任何權利。
第四條  雙方同意於本協議書簽署時，完成與其職務作業必須知悉任一方機密資訊的員工及相關人員簽署保密合約，要求其負擔與甲方相同的保密義務。
第五條  任一方違反本協議書之約定或有因可歸責之事由，致使他方的機密資訊被洩露者，除該違約方負擔一切法律上責任，並應負損害賠償之責。
第六條  若非因一方因素造成，當該等機密資訊對外公開或解除其機密性時，該方亦同時解除對該等機密資訊之保密責任。
第七條  本同意書之條款，如部份無效或無法執行，不影響其他條款之效力。
第八條  本協議書以中華民國法令為準據法，凡因本協議書而生之爭議，雙方同意先本誠信原則磋商之，磋商不協時，同意以台灣地方法院為第一審管轄法院。
第九條  本協議書正本壹式貳份，甲、乙雙方各執存乙份。
我想誰都不想看這裡面到底寫了甚麼，除非真正出事，這種協議書才會變成呈堂證供，高層也不見得會多遵守這裡面的規定，但這就是官場文化，要確實執行，某種程度，形式大於實質，定期審查也是一樣流於形式。
這類的文件，都會由文件管理部門留存，主要還是應付主管機關的，公司裡面若是真的有再強調，這真的難能可貴。畢竟，即使公司有給組織員工看過宣導影片，或者做些簡單的測驗，員工都會嫌煩，這也不意外，畢竟，工作要緊，不能因為這些耽擱工作。
本人只強調一點，做任何事情，**請留下軌跡(紀錄)**，免得到時候，死無對證，又被公司拿了簽過名文件反告，對於員工來說損失是非常大的。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192172,ModernWeb,1,用範例理解Vue.js系列,9,用範例理解Vue.js#9：v-bindandClassBindings,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1513679232000000000,253,"
在 Vue 中，綁定樣式分為 Binding HTML Classes 或是 Binding Inline Styles。
通常為了分離 HTML 和 CSS，不會使用 Binding Inline Styles，所以這邊只介紹 Binding HTML Classes。
由於綁定 HTML Classes 會使用到 Vue Directives 的 v-bind，且 Vue.js 針對 v-bind 使用在 class 和 style 上有特別增加功能，就是說其表達式的結果可以為 String, Object, Array。
先看個簡單的 v-bind 範例，可以綁定 img 的 src 為 imageSrc，當修改圖片路徑時，圖片會更新。
而 v-bind:src 可以簡寫為 :src。
附上 jsfiddle https://jsfiddle.net/hunterliu/zq1v3e2k/1/
Vue 可以透過傳入物件或陣列動態的切換 class。
附上 fiddle https://jsfiddle.net/hunterliu/sne6f5zc/3/
簡單改寫上面的範例
附上 fiddle https://jsfiddle.net/hunterliu/auyrptfv/",,"['v-bind', 'Binding HTML Classes', '參考資料']","['Object Syntax', 'Array Syntax']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192168,SoftwareDevelopment,0,Linux從零開始系列,1,Linux從零開始(1/30):關於Linux的二三事,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513677113000000000,333,"===自學Linux需要準備什麼===
忘記Windows、自動自發解決問題的熱血、一台開機後鍵盤按下去字會乖乖跑出來的設備、還有一付堪用的肝……
===關於Linux===
創作者: Linus Torvalds
開發者: 好人、善心人士、本國人還有外國人
程式語言: C語言、組合語言
源碼模式: 自由及開放原始碼軟體
作業系統家族: 源自於Unix的Unix-Like系統
初始版本: 1991年的0.01版（代號「Freax」）
最新版本: Kernel: 4.14.6（2017年12月14日）
最新測試版本: Kernel: 4.15-rc3（2017年12月11日，​6天前）
市場定位: 桌面、伺服器、嵌入式裝置、行動裝置等
支援語系: 多國語言
支援平台: DEC Alpha, ARM, AVR32, Blackfin, ETRAX CRIS, FR-V, H8/300, Itanium/IA-64, M32R, m68k, Microblaze, MIPS, MN103, OpenRISC, PA-RISC, PowerPC, s390, S+core, SuperH, SPARC（包括SPARC64）, TILE64, Unicore32, x86（包括x86-64）, Xtensa等。
預設的使用者介面:指令介面(文字)、圖形介面（X視窗系統，Wayland）等多種
核心類別: 單核心
吉祥物: 企鵝
===常見的Linux證照===
LPIC（Linux Professional Institute Certified），Linux專家協會。	
區分為Level 1、Level 2以及Level 3等3種不同等級，而每個等級則各有2項考試科目，考試以線上筆試的方式為主。
1.1  低階的Level 有101 Exam和102 Exam兩項科目，其中101 Exam以測試常用指令為主，至於102 Exam則是著重在基本的系統操作。
1.2  Level 2包含201 Exam和202 Exam。201 Exam涵蓋的範圍為系統的進階管理；202 Exam的訴求則是以如何讓Linux達到最佳化為主要目的，除了作業系統與各項服務之外，也將系統安全的項目涵括其中。
1.3  Level 3是LPIC等級最高的一種，欲取得這張證照必須通過301 Exam和302 Exam兩項考試科目。
NCLP - Novell Linux認證
2.1  NCLP（Novell Certified Linux Professional）	
2.2  NCLE（Novell Certified Linux Engineer）
需實機操作，具shell script能力。
RHCE - Red Hat Linux證照
Red Hat的證照體系一共包含了3張證照：
3.1  低階的RHCT（Red Hat Certified Technician）
3.2  中階的RHCE（Red Hat Certified Engineer）
3.3   高階的RHCA（Red Hat Certified Architect）",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192165,Security,0,資安的學習心得及分享系列,16,DAY16BBS,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1513677105000000000,284,"什麼是Telnet? Telnet就是一種在Internet上進行遠端登錄服務的協議。
通常Telnet是網路上應用層協議上的其中一種，顯示方式是透過虛擬終端機的方式來互動，在虛擬機上是提供雙向、以文字字串為主的互動。




『電子佈告欄系統 (BBS, Bulletin Board System) 』就是以這樣的方式在營運，前提是有人架一個虛擬機營運，別人才可以利用Telnet的方式連線登入。
話題回到Wireshark，Wireshark軟體應用在BBS系統上我們同樣的可以觀看封包的安全狀態，為什麼會突然提到，因為今天我是一個架虛擬機的人，我可以順便把Wireshark架好放著，這樣我可以看我的BSS平台的安全狀態，例如我上一篇有提到，Wireshark可以看封包的傳送、也可以看封包的協議。


所以我只要寫好程式就可以利用這個程式，並且方便的幫助我們抓取某個時間內的流量，也可以保障平台的穩定性以及使用者的安全性。所以Wireshark在網路安全上是一個很不錯的軟體。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192162,AI&MachineLearning,2,以100張圖理解NeuralNetwork--觀念與實踐系列,9,Day09：CNN經典模型應用,IcodesoIam.,https://ithelp.ithome.com.tw/users/20001976/ironman,1513675720000000000,305,"ImageNet 每年舉辦的競賽(ILSVRC)這幾年產生了不少的CNN冠軍，歷屆比賽的模型演進非常精彩，簡單敘述如下：
Keras把它們都收錄進框架內，稱為Keras Applications ，包括下列幾項：
它們的模型結構資訊如下表：

註：
除了 Xception and MobileNet，其他的Applications都與 TensorFlow 及 Theano 相容，我們就挑 VGG16 為例子，解釋如何使用。這些模型的隱藏層數都很多，也使用了大量的資料作訓練，一般電腦可能要執行很久，等結果可能要很多輪的咖啡XD，因此，Keras將研發團隊精心調校的模型及執行結果收集進來，一般使用者就不用自
己訓練模型，可以直接套用，故稱為預先訓練的模型(pre-trained models)。
由於，這些模型使用了大量資料作訓練，且使用非常多層的處理，例如 VGG 使用ImageNet 100萬張圖片，共 1000 種類別，幾乎涵蓋日常生活看到的事物，例如動物、交通工具...等，訓練出來的模型，就變成一種『通用解決方案』(Generic Solution)，如果要辨識照片內事物屬於這1000類，例如貓、狗、大象等，就可以直接拿VGG模型來用了，反之，如果，要辨識的內容不屬於1000類，也可以換掉input卷積層，只利用中間層萃取的特徵，這種能力稱為『Transfer Learning』，比較嚴謹的定義如下：
Transfer learning allows you to transfer knowledge from one model to another. For example, you could transfer image recognition knowledge from a cat recognition app to a radiology diagnosis. Implementing transfer learning involves retraining the last few layers of the network used for a similar application domain with much more data. The idea is that hidden units earlier in the network have a much broader application which is usually not specific to the exact task that you are using the network for. In summary, transfer learning works when both tasks have the same input features and when the task you are trying to learn from has much more data than the task you are trying to train.
資料來源：Deep Learning Specialization by Andrew Ng — 21 Lessons Learned
VGG 是英國牛津大學 Visual Geometry Group 的縮寫，主要貢獻是使用更多的隱藏層，大量的圖片訓練，提高準確率至90%。VGG16/VGG19分別為16層(13個卷積層及3個全連接層)與19層(16個卷積層及3個全連接層)，結構圖如下。

圖. VGG16 結構圖，圖片來源：Building powerful image classification models using very little data

圖. VGG19 結構圖，圖片來源：Applied Deep Learning 11/03 Convolutional Neural Networks
乍看到 Keras 的官方文件 ，就傻眼了，竟然只有寥寥一頁，除了參數說明，沒了!! 花了一整天的搜尋，總算搞懂怎麼用，迫不及待的想跟大家分享。
所有Applications執行都只要一行指令，就可以把模型及權重載入程式中，例如，載入VGG16的指令如下：
model = VGG16(weights='imagenet', include_top=True)
相關參數說明:
如果你不用Applications，要自己寫也很簡單，程式碼如下：
我們就來看一支範例程式，我們使用include_top=True，全盤採納VGG16模型，僅改變輸入為一張圖片(tiger.jpg)，程式碼如下，我在程式中加了註解，請參考這裡 ，本範例為vgg16.py：
幾點心得整理如下：
我又做了幾個有趣的實驗：

圖. 『熊讚』，圖片來源：熊讚爆紅升格市府吉祥物 前進雙橡園

圖. 『熊讚與狗』，圖片來源：陽明山那場雪救了「熊讚」 狂刷存在感屢創熊式奇蹟
我們如何選擇要用哪一個預先訓練的模型? 請參考下圖，它列出各種模型運算次數與準確度的比較，圓圈大小是參數的多寡，我們可以根據問題的型態與運算資源的多寡，來決定使用哪一個預先訓練的模型。另外，我喜歡它的標題『Standing on the shoulders of giants』，使用預先訓練的模型就是站在巨人的肩膀上，沒有龐大資源，也可以有變通之道。
圖. 各種預先訓練模型的比較，圖片來源：Learning Deep Learning with Keras
VGG 19 與 VGG16 類似，只是它更多層，在後續篇章的『風格轉換』(Style Transfer)中會使用到。下一篇，我們繼續使用 VGG16 套用在照片相似度的比對上，說明如何找出相同主題的照片，也讓我們更熟悉如何活用這些Applications。",,"['ImageNet 競賽的冠軍們', '關於 VGG', 'VGG16/VGG19 模型結構', 'VGG16 使用方法', 'VGG16 實作', '程式說明', '實驗', '結語']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192164,DevOps,0,用30天來介紹和使用Docker系列,16,Day16：實作簡單的service程式打包成DockerImage(二),yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1513675481000000000,332,"延續昨天的在 Build Code 時把 Jar 打包成 Docker Image 的部份，今天要實作把打包完成的 Docker Image 自動的在 Build 完 Image 之後 Push 到 Docker Hub 上，這樣就不用另外的下 docker tag 和 docker push 指令，才能把 Docker Image Push 到 Docker Hub 上。
一. 修改 build.sbt 的檔案如下
完整的程式在 GitHub 上，網址如下：
https://github.com/jackyoh/akkahttp-docker-example/blob/master/build.sbt
這裡最主要的地方就是在 tag 和 push 的地方，只要有在 sbt 指令後面加上 tag 和 push 參數，就會先把 Docker Image 建立一個能 Push 到 Docker Hub 上的 Image 格式 (""DockerHub 帳號/Image Name"")，最後再把 Docker Image Push 到 Docker Hub 上。
二. 把 Build 完的 Jar 檔，打包在 Docker Image 裡並且把此 Docker Image Push 到 Docker Hub 上
執行的畫面如下

執行的結果如下

三. 執行完成可以看到 Docker Image 已經 Push 到 Docker Hub 上，畫面如下

四. 測試把 Docker Image Pull 到其它的 Host 上執行，指令如下
畫面如下

輸入http://10.1.3.243:9090/hello 的URL 就可以看到以下的畫面。IP 為執行 Docker 那台 Host 的 IP：

完整的程式放在 GitHub 上，有興趣的話可以參考看看，網址如下：
https://github.com/jackyoh/akkahttp-docker-example
這二天介紹的把開發的程式打包成 Docker Image 和自動的把 Docker Image Push 到 Docker Hub 上，最主要的目的是要讓在開發程式和佈署程式這一段更加的自動化，避免換了一個環境之後確忘了安裝一些套件或是少設定到幾個參數而造成開發完成的程式無法執行。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192161,SoftwareDevelopment,0,Kotlin30天，通過每天一個小demo學習Android開發系列,16,Kotlin開發第16天PushMessaging(Firebase+BroadcastManager),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1513670556000000000,306,"
這次通過 Firebase 對設備進行 Push Notification
這是一家被 Google 收購的公司，提供多種 Serverless 的服務，這次打算通過 Firebase 來 push message 到設備上。
Firebase 已經被整合進 Android Studio 當中了，所以可以直接通過 Tools -> Firebase 來進行設定。

Firebase -> Cloud Messaging -> Set up Firebase Cloud Messaging

通過 Connect to Firebase 建立一個應用，並取得設定檔 google-services.json

通過 Add FCM to your app 會加載需要的 Plugin，當然也可以手動到 build.gradle 中引入

我們通過建立一個繼承於 FirebaseService 的 service 並且 override onMessageReceived()
在 AndroidManifest.xml 中加入這個 Service
在 Firebase 的後台上發送消息。

推送後在 Android Studio 的 Run 中可以看到我們的 log

當然也可以通過昨天提到的 NotificationManager 來顯示推送資訊。
如果我們想要在收到 Push Notification 之後，在 Activity 上顯示 Alert message ，可以通過 LocalBoradcastManager
在 MessageService 中加入一個方法，用來通過 Intent 進行廣播。
其中 Intent 會指定 action 為 「DonMessage」之後 BroadcastReceiver 可以通過這個 action 來篩選出這條廣播。
然後我們在 MainActivity 定義一個 BroadcastReceiver
MainAcitvity 在 onStart() 的時候註冊廣播監聽，通過 IntentFilter 來篩選廣播
MainActivity 在 onStop() 的時候取消註冊廣播監聽
這次開發過程中一開始不是很順利，收不到 Firebase 的 Push Messaging。
後來發現是 IDE 生成的 google-services.json 有錯，替換成 Firebase 網站上的 google-services.json 以後就沒問題了。
問題：Android 似乎不像 iOS 一定要通過官方的 Server 來對設備進行 Push Notification
之後可以在寫後端的時候進一步了解。","['筆記', '參考']","['Firebase', 'FirebaseMessagingService', 'BroadcastManager']","['Firebase Notification', 'google-Services.json']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192160,DevOps,0,30天入門Ansible及Jenkins[2018]系列,8,[Day08]透過Vagrant運行playbook,tsoliangwu0130,https://ithelp.ithome.com.tw/users/20103346/ironman,1513669795000000000,290,"除了直接使用 Ansible 的 ansible-playbook 指令來對 managed node 進行部署外，若我們是用 Vagrant 搭建虛擬主機的話，我們還可以利用 Vagrant 內建的 provision 直接運行 playbook。由於 Vagrant 已經知道管理主機的各項資訊，因此我們可以完全省略在上一個章節中設定 inventory 及 PRIVATE_KEY_FILE 的部分。
首先，在 Vagrantfile 中添加以下內容來告訴 Vagrant 要以哪個 playbook 來做部署配置：
接下來我們只要在終端機運行以下指令，就可以看到與使用 ansible-playbook 指令完全一樣的結果：
雖然透過 Vagrant 運行 playbook 的步驟容易許多，但必須注意的是，這個方法只限於我們使用 Vagrant 搭建虛擬機的時候才能使用。若今天我們需要直接部署配置到實體主機上，我們就無法透過 Vagrant 指揮 managed node 了。這也是為什麼我們還是必須知道如何使用最正規的方法運行 playbook 進行部署，這個章節的教學只是提供一點搭配的小技巧，讓讀者在練習或開發 Ansible playbook 的時候能夠節省更多時間。",['透過 Vagrant 運行 playbook'],,,['Vagrant 如何運行 playbook？'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192087,ModernWeb,0,前端新手村系列,9,前端新手村橫向排列&實現純手工RWD,chris,https://ithelp.ithome.com.tw/users/20107637/ironman,1513667913000000000,385,"「當你迷惘的時候，就回到原點想一想」-中華一番 蘭飛鴻
網頁前端新手村系列文章，宗旨並不在技術本身的教導，重點放在技術與技術之間的脈胳關係。讓零碎的網頁前端技術的關鍵字，成為比較有系統性的視野。
讓一開始接觸網頁前端的新手們，有一個比較友善的系統來架構你的學習，至於技術本身的深入探討，就留給其它的高手們吧。
網頁的橫向排列，其實包含了直向排列的一些觀念，因為要處理橫向共存的問題，所以遇到的問題又更複雜了一點。
今天針對橫向排列的實作方式，在此列舉一些常見的做法。
只要打上文字，所有的文字自然排列就是橫向排列。
而文字本身會橫排在一個稱為匿名區塊裡的地方[1]。
使用 float
特性描述
若有 float ，則 float 會在該行靠左或靠右，若有非定位的 block 元素，則會忽視 float 元素並佔用它的空間，但是 block 元素的內容，則會和 float 相擠排列。[2]
與 float 共生的 clear
指定該元素的哪一邊不要和float相鄰
float 和 clear 是一種輕鬆做出「文繞圖」的技巧。
也就是說 float 要設定在「圖」身上。
大多數的資深開發者，也早就習慣拿它來做橫排的行為。而且熟練之後相當好用。但卻不直覺(容易踩雷)。
《Pen-Pineapple-Apple-Pen》（日語：ペンパイナッポーアッポーペン），簡稱《PPAP》，是一首由日本搞笑藝人古坂大魔王所扮演的虛構創作歌手Piko太郎（日語：ピコ太郎）創作[3]
2016年日本搞笑藝人古坂大魔王學 w3c 設計 inline-block 的概念，創作了 PPAP 這首歌。(誤)
那...有了 display: inline-block 就好了(嗎？)
看似完美的解決方案，就在預設值不直覺的情況，還是有使用上不直覺(容易踩雷)的地方。[4]
先看程式碼

囧!!!
這樣怎麼離得開 float 呀？
解決方案
要了解這問題的完美解決方式。
要先明白，預設 white-space: normal ，就是填入空白，視情容器大小斷行。
所以，將「空白鍵」的空間消除就可以了。
在容器設定 font-size: 0; 再設定各別的 font-size 回到原本的大小即可。

有了 flex 正中了好多人的下懷。簡單又好用的存在!!!
但是卻有一間廠商不願意讓世界完美起來，也正因為如此前端工程程師的肝與價值有了變化。
flex 預設不斷行，若要再讓它斷行，需要再加其它的語法。(還是和 float 不一樣!!!)
所謂「最好的是手工，最爛的也是手工」
上述的技術透過調整寬度，允許斷行的方式，再配合 media query ，即可以做 RWD 效果。
之前在網路上看 來聊聊一些個人切版的經驗與個人切版技巧吧！ - Live Coding 和 隨機挑一個版型來切版當作練習 - Live Coding 切版影片。片中的手刻 RWD 示範，正是以 inline-block 的技巧+調整寬度辦到的。
而 Bootstrap 3 和 Bootstrap 4 的網格系統，也是透過 float 和 flex 的技術，實現 RWD 。
[1]: 9.2.1.1 Anonymous block boxes
[2]: 10. Floating boxes - w3.org
[3]: Pen-Pineapple-Apple-Pen
[4]: CSS Layout - inline-block","['橫向排列 & 實現純手工 RWD', '參考資料']","['前言', '人人都會用', '資深級 or 為 IE 而用', '後來橫排問題試著被解決', '橫排的問題，又再度被...順便解決', '純手工 RWD !!']",['常踩的雷'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192159,自我挑戰組,0,資訊技術解戈迪安繩結系列,12,IT｜維運管理｜作業系統｜Linux｜利用Netdata資源監控管理linuxinRaspberryPi,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1513662844000000000,377,"
Netdata 是一個實時的資源監控工具，它擁有基於 web 的友好介面，由 FireHQL[1] 開發和維護。通過這個工具，你可以通過圖表來了解 CPU，RAM，硬碟，網絡，Apache， Postfix 等軟硬體的資源使用情況。它很像 Nagios 等別的監控軟體；但是，Netdata 僅僅支持通過 Web 介面進行實時監控。
了解 Netdata
目前 Netdata 還沒有驗證機制，如果你擔心別人能從你的電腦上獲取相關信息的話，你應該設置防火牆規則來限制訪問。UI 很簡單，所以任何人看懂圖形並理解他們看到的結果，至少你會對它的快速安裝印象深刻。
它的 web 前端響應很快，而且不需要 Flash 插件。 UI 很整潔，保持著 Netdata 應有的特性。第一眼看上去，你能夠看到很多圖表，幸運的是絕大多數常用的圖表數據（像 CPU，RAM，網絡和硬碟）都在頂部。如果你想深入了解圖形化數據，你只需要下滑滾動條，或者點擊在右邊菜單的項目。通過每個圖表的右下方的按鈕， Netdata 還能讓你控制圖表的顯示，重置，縮放。
監控資源：
CPU
儲存空間
網路介面流量
支援多台主機切換
支援平板觸控功能

支援 SNMP 設備監看，請參閱 SNMP Data Collector 的設定方法。
[安裝相關套件]
基本上安裝分為：
標準安裝
完整安裝(本例採用)
curl -Ss 'https://raw.githubusercontent.com/firehol/netdata-demo-site/master/install-required-packages.sh' >/tmp/kickstart.sh && bash /tmp/kickstart.sh -i netdata-all
複製原始碼 from git
git clone https://github.com/firehol/netdata.git --depth=1
編譯及安裝 (自訂安裝目錄)
安裝完後，netdata 會自己啟動
ps aux | grep netdata
需要停止服務時，直接砍掉這個行程就好了
sudo killall netdata
想重新啟動的話，可以直接執行主程式，預設目錄在 /usr/sbin 下面，本例安裝在 /opt/netdata/usr/sbin
開機自動啟動
增加新功能及漏洞修補
sudo ./netdata-updater.sh
排程定時更新
sudo ln -s /home/pi/netdata/netdata-updater.sh /etc/cron.daily/netdata-updater.sh
反安裝
刪除使用者及相關群組
[系統設定]
sudo vi /etc/netdata/netdata.conf
總共分成四個段落：
顯示附載資訊
http://localhost:19999/
CentOs/RHEL7 安裝 netdata 請參考：
http://linux.onlinedoc.tw/2017/05/centosrhel7-netdata.html",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192156,SoftwareDevelopment,0,30天快樂學習FunctionalProgramming系列,6,"Higher-orderFunction={Map,Filter}與Recursion",阿志,https://ithelp.ithome.com.tw/users/20103386/ironman,1513653241000000000,432,"我們說好的 Curry 與 Compose ？別緊張，他們也是 高階函數 (Higher-order Function) ，但為了真正讓你體會它們的威力，原諒我必須先介紹 Higher-order Function。
Higher-order Function 是一種特別的函數︰
就像俄羅斯娃娃那樣。

也像是 9 與 3 那樣，我除了你，還是你。
在開始之前，我們先來複習一下文法吧！（有人說看不懂 QQ ，你也可以選擇跳過這段，看不懂時再回來）
我們先來一個普通的 Fucntion 。
如果要傳入多個未知數量參數，可以使用 Rest Operator ，並可搭配 Spread Operator 。
若一個 Function 要再回傳一個 Function，可能會有以下語法。
在操作陣列時，也有很多常用 Funciton 。
就像是這隻毛毛蟲

舉例來說，像是 applyTwice 即是 Higher-order Function 。
因為可以參數接受 Function ，使 Higher-order Function 具有極大的彈性，其他常用的函數還有 Map 、 Filter 、 Reduce ，讓我們以 Array 為例。
Map 將遍歷 Array 並回傳一個新的 Array 。
Map 需要被傳入一個 function ，在 Map 中的 function 會依序接到三個參數︰
你可以藉由以下程式碼觀察︰
因為 conosole.log 並不會回傳任何值，所以會得到一個充滿 undefined 的 Array 。
以下範例是 把每個元素都 increment 。
我們可以使用 For 來實作 Map。
OK，我覺得是時候告訴你了，我已經很久沒有寫 for 了。
Whyyyyyyyyy，如果沒有 for ，該如何遍歷陣列？
讓我先試著實作看看，等等再回來修改它。
（剛剛那個版本，真是有學生這樣寫喔，我覺得蠻有創意的）
遞迴的邏輯就是持續做某個動作，直到遇到終止條件為止，舉例來說，就像是費氏數列。
費氏數列的終止條件正是 x == 0 || x == 1，而之於 Array ，終止條件很常是 Array 空了 ，我們可以藉此實作出一個簡單的 Map 。
是不是看起來優雅多了呀！同樣的作法在 FP 中相當常用，之後還有機會練習到。
遞迴有點像 在數學中定義集合 的作法，我猜測這可能有影響，雖然這是我的猜測。
Filter 會遍歷 Array ，並將返回 true 的值留下， false 的刪去。
Filter 需要被傳入一個 function ， Filter 中的 function 會接到參數與 Map 相同。
同樣可以藉由相同的程式碼確認。
因為 console.log 並不會回傳任何值，所以會得到一個空 Array 。
以下範例是 過濾出奇數 。
同樣的可以用 Array 空了 為終止條件，實作出一個簡單的 Fliter 。
來藉由幾個實際的小範例練習，各位可以先想想看再回來看答案。
另外為了避免大家直接看到答案，我把答案貼在留言區了。
從其實從第二天開始就有人問我︰「 FP 不是有御三家 Map 、 Filter 、 Reduce ，它們怎麼都不見了？」
我心想，我的御三家一定要講得比別人還要詳細才行，結果一個不小心就走火入魔了，但唯有開始寫遞迴，才會有 FP 的感覺，這點我保證。
明天來講來聊聊 Reduce ，然後靠御三家改寫一些面試考題吧。",,"['本章重點', 'Higher-order Function', '在開始之前', '一個簡單的 Higher-order Function', 'Map', '遞迴只有天上有，凡人應當用迴圈', 'Filter', 'Try it', '後記', '參考資料']","['Zip', 'Quick Sort']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192155,自我挑戰組,1,GAME30天系列,9,Firebaseintro.(3/3,我是一支小小小小鳥,https://ithelp.ithome.com.tw/users/20107379/ironman,1513650213000000000,360,"接續昨天的資料存取
更多時候我們需要一個清單的資料類型, 先改良一下目前的程式碼
name 輸入 andy, age 輸入 87, 可以發現資料已經被存入 users, 並且 firebase 幫我們加了一層時間雜湊的 Unique Key

進入Realtime base 的重點, 我們可以對database進行監聽, 觀察資料的變化, 這點搭配VueJs的 data binding, 會幫我們實現非常多強大的功能, 我們在 mounted() 裡實作他, 共有五種事件：
只要 DB_USERS 有新的資料存入, 就會印出資料！",,,['firebase 的監聽事件'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192153,ModernWeb,0,HappyCSSer報報系列,1,HappyCSSer-00)起。,Rplus,https://ithelp.ithome.com.tw/users/20107823/ironman,1513649976000000000,394,"
Happy CSSer 是個出門一起寫 CSS 的小活動。
我們會在 FB 上糾團、在 GitHub 上遞交自己的作品、並在活動中分享及討論各自的理解與技巧。
而這一時興起的 Happy CSSer 小活動不知不覺也快一年了~ <3
算一算也有二十來場，我將試著回顧這一年來題目中有趣的內容。
感謝不少同好一起出門來跟 CSS 玩耍，學了很多、也多認識了不少有趣的朋友們！
希望會有更多的人快樂地寫著 CSS、也寫著快樂的 CSS~
Here is Happy CSSer.
https://www.facebook.com/HappyCSSer/",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191951,ModernWeb,2,Vue怎麼寫測試系列,2,Day2.你看，我心中的惡魔已經那麼大了。,Mos,https://ithelp.ithome.com.tw/users/20104476/ironman,1513649189000000000,377,"先來介紹一下為什麼我會想講這個主題，畢竟測試這個主題已經不是潮流了，可以說是經典或者有人會說這94門派的教義，但真的有很多人在寫測試嗎？有的，基本上技術底子好的公司都一定會有負責寫測試的人，或是有很想寫測試的人，只是有趣的是，大部分的前端工程師都不寫測試的。
你問：為什麼？
當然是跟環境有關，先說好，等下會有許多偏頗的言論。
一個問題開頭，身為一個前端工程師人員，你怎麼學習技術的？
有很多人學習技術的背景是這樣，非資工畢業但大學科系或研究所稍微沾到邊的，從資策會出來的，看線上課程自學的，參與讀書會、討論會、年會各種場合去啟發你的學習熱情，使得你有coding能力的，前端工程師有一個大族群的學習背景是轉職來的，這樣子的人才，通常是自卑的，當然啦，有些人的自卑得以解決，但更多人的自卑會用另外一種方式呈現，說謊、放棄、裝作漠不關心。
我認識的人當中，有很大一部份這樣子背景的人，認定自己的邏輯能力比較差或沒什麼資訊長才，認為自己比不上資工科系畢業或是不是這個領域的天才，更甚至這樣比喻，如果工程師有一座金字塔，自己是在最底層的那層，而且大部分的前端工程師的年齡都在 25-35 歲這個區間，身邊有很多的朋友，有些人都買車了，有對象的還結婚小孩都出生了，出國讀書的也在國外也混得好好的，而自己卻領著很低的薪水，可能 35K~40K 甚至更低 28K，掛著工程師的頭銜，但就是做做活動頁，刻刻設計畫的頁面，接接別的公司外包的專案，反正也不是自己公司的，誰願意把 code 寫的乾淨好維護，能跑就好了。
那這跟前端工程師不寫測試有什麼關係？
有，因為對自己的能力感到自卑，認為因為自己才能有限所以拿著廉價的薪水，還只能浪費自己的才能在重複的商業邏輯，而且稍微大一點的專案又都是外包來的，只要 bug 不要被發現就一切好說，說得明白一點，你根本不需要進步，反正你再怎麼進步，老闆不會給你加多少薪水，遲到三分鐘全勤 1000 元就沒了，加班一個晚上，還不給你報加班費呢。於是你因此止步，只因為小看了自己的才能。
環境致使你沒有能力判斷，什麼是真正對你好的技術或想法。
為了讓自己能看清當下的你是什麼樣子
請想想前端工程師的美，這個美，不是因為那位工程師剛好是辣妹，而是在於前端工具瘋狂的演變時，你可以完全接收新的資訊，並且轉化成你的內涵。你不害怕變化，反正你都已經放棄之前的一切，轉職進入工程師的行列了，還有什麼是不能接受的？
再想想前端工程師的醜，這個醜，是我們慣於期待新的架構能拯救自己高度耦合的程式碼，是我們慣於使用新的工具來隱藏自己的自卑，好像使用了，才是這個社群的一份子。
證明你自己還想進步，就對自己的程式碼負責，培養分辨好壞的能力，找更好的老闆更甚至自己出來當老闆，面對你討厭和猶豫不決的問題而不是忍受或說謊，想想 2017 就快結束了，多少列在今年必做清單的事情還沒做？我這趟學寫測試的車要開了，你上不上車我無所謂
車票在這裡，自己領
https://vue-test-utils.vuejs.org/en/guides/getting-started.html
參考資料：
https://vimeo.com/68375232
https://ingramchen.io/blog/2014/04/how-i-do-test-driven-development.html
https://laracasts.com/series/testing-vue","['文章好長；不想讀', '正文']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192114,SoftwareDevelopment,0,提神？看程式比喝咖啡更有效。系列,1,{DAY0}影像處理＿Laplacian1至2階微分法(程式解說),martinsit011138,https://ithelp.ithome.com.tw/users/20107818/ironman,1513646826000000000,345,"前言：影像處理是把數位的影像作前置的加工及處理，以便日後的分析。
人可以透過眼睛傳遞影像，並利用大腦的分析；而鏡頭就仿如人類的眼睛，當數位影像傳遞給電腦時，無時無刻也有機會產生雜訊，而且電腦在處理影像時並沒有人類大腦般聰明，因此需要影像處理，把雜訊濾掉、邊緣銳化...，把重要的影像轉換成電腦的角度，以便日後處理(影像處理完後，下一個課題是影像識別)
開發環境：C-Free 5
注： 1)以下只提供演算法程式，沒有提供main檔案
　 2)原始圖檔取自網路
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝分格線＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

圖1)上圖為 影像原始影像
解釋：在圖1中，我們可以看出從負X 至 正X之間的f(x)為一個漸變層
在電腦視覺最喜歡瞬間變化的影像，相反而言，最害怕遇到漸變層的影像
舉個例子：1000度近視的人，沒有戴眼鏡所看到的東西，就仿如電腦所看到的視角，一片模模糊糊的；因此而要為電腦戴上眼鏡(影像處理)，而是次所解說是用Laplacian微分法作處理。

圖2)上圖為 經過1階Laplacian微分後的影像
解釋：我們可以透過圖2得知，1階微分後，f(x)由一個漸變層，變成近似脈衝的波形，而這個脈波就是影像中物體與物體或物體與背景的交界線。把整個影像所有的交界線勾晝出來，我們就可以對影像作後續的處理。

圖3)上圖為 經過2階Laplacian微分後的影像
解釋：2階微分處理後，f(x)會產生正負相反的脈波，而像素沒有比0更小的強度(灰階值中：0為黑色；255為白色)。此外，我們在數學公式中得知，脈波是無限的延伸，因此我們需要把超過255的像素，固定為255；把低於0的像素，固定為0。(我會稱作:收歛)(程式碼所處理的影像為RGB，bmp檔)
*一階對比二階而言，後者影像的強度會比前者為大，因此輸出影像的圖像邊界會銳化。(邊界會更明亮)

圖4)上圖為 經過2階Laplacian微分，並且經過收歛後的影像
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝分格線＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
以上為Laplacian 1至3階微分法的程式碼
=========================>程式解說<=========================
image_in[Y_SIZE][X_SIZE]   //輸入影像的解析度&像素大小 (矩陣)；輸入影像是利用矩陣的方式
image_out[Y_SIZE][X_SIZE]  //輸出影像的解析度&像素大小 (矩陣)；而輸出影像也是使用矩陣的方式
amp                        //輸出影像的像素放大率；在低階數或面對較暗沉影像時，我們可以透過放大像素的倍率，而達至影像更明亮的需求。
type                       //階數微分運算；決定影像需要幾階處理

圖5)上圖為 Laplacian一階微分運算3x3的遮罩

圖6)上圖為 Laplacian二階微分運算3x3的遮罩

圖7)上圖為 Laplacian三階微分運算3x3的遮罩
*遮罩所產生方式，希望日後有機會詳細說明
type = type - 1;         // 對應c[type][]的矩陣 矩陣是0~2；人是1~3；所以需要-1，由人的角度轉移至電腦角度
if (type < 0) type = 0;  // 如果type小於0，type=0，防呆設計，防止超出範圍
if (type > 2) type = 2;  // 如果type大於2，type=2，防呆設計，防止超出範圍
for (j = 1; j < X_SIZE-1; j++) {   //掃描輸入的影像，從第一行開始掃描 因為「3x3階數微分運算」是(X-1,Y-1)開始，所以i=1便可以 因為「階數微分運算」是(X+1,Y+1)結束，所以X_SIZE需要-1
for (i = 1; i < Y_SIZE-1; i++) {   //掃描輸入的影像，每一行掃描結束後，往下一行再重新掃描 因為「3x3階數微分運算」是(X-1,Y-1)開始，所以i=1便可以 因為「階數微分運算」是(X+1,Y+1)結束，所以X_SIZE需要-1
此程式為「3x3階數微分運算的遮罩」對每一個輸入影像陣列作相乘，從而達到微分的效果。
(int)(d * amp)  //其中d變數為int(int為4 bytes) ; amp為double(double為8 bytes)
//d變數 x(乘) 放大倍數後，並轉換成int型態(收歛為整數，減少記憶體使用)
//d變數不會「四捨五入」
d = (int)(d * amp) + OFFSET;  //計算結果 x(乘) 放大倍數 + 偏移量
//雖然我們可以用amp把輸出影像的像素以倍數方式放大；但OFFSET可以對像素作微量的調整。
在上文也提及到，在微化運算所產生的脈波，有機會超出0至255這個範圍，而且上段程式曾把「變數d作放大」，因此需要作出收歛。
if (d < 0) d = 0;      //如果計算結果小於0 ，則d=0;
if (d > 255) d = 255;  //如果計算結果大於255， 則d=255;
如果是筆者，我會直接修改程式直接用以下方法：
// unsigned char為1 bytes；範圍：0~255
//這樣也可以達到收歛的效果
經過收歛後，資料型態需要更改(減少記憶體使用量)
(unsigned char)d;     //unsigned char = 0~255
//原來d為int (32 bits)是多預留空間作運算
//經過收歛後便可轉換資料型態，減少記憶體使用量
image_out[i][j] = (unsigned char)d;    //把新的強度(像素) 放在輸出端(陣列)
=========================>結果<=========================

圖8)上圖為原始影像 (圖片取自網路)

圖9) 上圖為 原始影像轉換為bmp檔案，把每一像素強度限制於0-255 (減少檔案佔用空間，但同時也令影像失去美感)

圖10) 上圖為 一階微分，放大1倍後影像

圖11) 上圖為 一階微分，放大5倍後影像

圖12) 上圖為 一階微分，放大20倍後影像

圖13) 上圖為 一階微分，放大100倍後影像

圖14) 上圖為 一階微分，放大2147483647倍後影像

圖15) 上圖為 二階微分，放大1倍後影像

圖16) 上圖為 二階微分，放大5倍後影像

圖17) 上圖為 二階微分，放大20倍後影像

圖18) 上圖為 二階微分，放大100倍後影像

圖19) 上圖為 三階微分，放大1倍後影像

圖20) 上圖為 三階微分，放大5倍後影像

圖21) 上圖為 三階微分，放大20倍後影像
===========================延伸===========================
!~!~!~!~!~!~!~!~!~!~!~!~! 問題一 !~!~!~!~!~!~!~!~!~!~!~!~!
問題：  laplacian function中的amp(放大倍數)，如果過度放大會影像會變得更暗沉。(見圖14：一階微分，放大2147483647倍後影像)
說明：   因為在運算過程中，每一像素的強度為int(即4個位元組數)，如果超出最高位元組數，數值會變為負數，再存放至變數中。(見圖22: 超出資料類型之結果)
在int 32位元中，最高位元(第32位元)是用來控制正負數。
解決辦法1：在運算過程中把int改為long，提升位元組數。
解決辦法2：在運算過程中把int改為unsigned int，防止出現負數。

圖22) 上圖為 超出資料類型之結果
!~!~!~!~!~!~!~!~!~!~!~!~! 問題二 !~!~!~!~!~!~!~!~!~!~!~!~!
問題：   輸出影像放大倍率超過20後，運算過程只要不超過int的極限，輸出影像的亮度沒大改變。
解決辦法1：使用更高階數的Laplacian微分。在(圖12：一階微分，放大20倍後影像)與(圖17：二階微分，放大20倍後影像)中可以看出，放大倍數不變的情況下，愈高階數微分，在觀看上影像更明亮。
說明：   同時，我們可以從(圖2經過1階Laplacian微分後的影像)及(圖3 經過2階Laplacian微分後的影像)中的數學得知，在2階Laplacian微分後所產生的正負相反脈波，經過收歛後，像素強度雖然有機會與1階Laplacian微分一樣(同為255)，但2階Laplacian微分負脈波收歛後，影像的黑白會產生強烈的對比，在視覺上顯得較明亮。
解決辦法2：利用OFFSET變數，為laplacian function產生偏移量，對影像的像素作調整。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191452,自我挑戰組,0,經濟學角度思考敏捷系列,4,Day4不同Sprintplanningmeeting方式的優缺點,eviler,https://ithelp.ithome.com.tw/users/20107403/ironman,1513646389000000000,324,"昨天我們探討了三種不同方式的 Sprint Planning meeting 進行的方式,
今天我們來討論一下每種方式的優缺點
這種方式的好處在於 Part 1時討論完 What to do後, PO在part 2就可以休息了,因為Part 2討論的是How to do, PO 是可以不用管的,他可以去做其他他應該做的事,把 How to do 留給 team去處理.
當然team在Part 2 拆 Task時, 如果有要釐清的東西還是可以去請教PO.
這種方法的好處是拿一張 Story 就拆一張 Story,並且可以馬上估算這個 Story 的工時,所以通常是會搭配這個 Sprint 的總工時來決定要拿多少 Story.
避免在 Part 1 討論了太多 Story, 然後到 Part 2 時發現預估的工時超過總工時太多根本作不完,這就表示在 Part 1時花費了太多時間在討論這個 Sprint 做不完的 Story.
這種方法的好處是每一次我們只針對優先順序最高的 Story 做拆解,拆解完後大家馬上動手做 Task, 這時大家的記憶猶新,做起來應該會比其他方式在Planning當天就拆解完所有的 Task 來的得心應手.
因為通常 Sprint 的第一天就拆完所有的 Task 了, 如果一個 Sprint 有 2個星期, 10 個工作天, 通常做最後一個 Story 時大概都在第八天左右了,人的記憶可能都忘了當初為什麼要這樣拆了.不過這個方法有一個比較明顯的缺點就是每次拆解 Story 時,大家都要集合一次,每次集合總有人要先喝個水,上個廁所,所以集合一次可能要花各 3 ~ 5 分鐘,那這就是時間上的浪費囉.
每種方法都有他的優點,而這些優點可能就是其他方法的缺點,所以沒有對錯好壞,只是看你們團隊所需要的是什麼.
如果你問我,我喜歡哪一種,我會說在團隊的不同時期我會採用不同的方法,
如果團隊目前的運作還算順利的話,我個人會偏向區分 Part 1 和 Part 2的方式,然後在加上一些Part 2採用 Just In Time的方式來進行.這通常會發生在團隊已經把原本所有拿的 Story 都做完了,去跟PO多拿一些新的 Story 時發生.",,"['區分 Part 1 和 Part 2', 'Part 1, Part 2交錯進行', 'Part 2 採用 Just In Time 方式進行']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192142,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,16,[PixiJS-Day-16]使用dat.GUI工具除錯,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1513646173000000000,352,"如之前提到的，由於 PixiJS 不是 HTML DOM 結構，無法使用開發工具調整物件
我常使用的工具是 dat.GUI，
是Chrome Experiments 開發的工具之一

不只是 PixiJS 專案，像在開發 three.js 專案時，dat.GUI 也相當好用．
當基本的操作介面由dat.GUI 提供時，更能專注在開發 操作介面之後產生的行為
教學：
網址：https://workshop.chromeexperiments.com/examples/gui/

教學頁短短 10 頁，提到了大部分的用法
API文件：
網址：https://github.com/dataarts/dat.gui/blob/master/API.md

dat.GUI 的 API 文件相當清楚，在大致理解 dat.GUI 可以做什麼後可參考看看
官方教學與文件裡，整個操作介面是 GUI 類別
Controller 是每一塊可以控制的區塊，使用 add() 與 addColor() 方法新增進 GUI 實體裡
基本用法：
官方基本使用範例：
https://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage
產生的操作介面：

程式碼：
1~7 行：
定義了一個對應到 dat.GUI 的物件，
也可以寫作 var testData = { message : 'dat.gui', speed : 0.8};
然後丟給 dat.GUI 實體使用
11 行：
在建立 dat.GUI 實體後，會自動在頁面上產生操作介面。

此時操作介面上只會有一個 Open Controls，還沒有功能
12~15行：
在 dat.GUI 實體裡加入相對應的操作介面。
- 當指定物件裡的屬性是字串：
建立動態文字框

程式碼中的 text 是 對應到 dat.GUI 的物件，'message' 是 該物件裡的屬性名稱
- 當指定物件裡的屬性是數字：
建立滑動區塊，可另外指定滑動範圍的最大值與最小值

- 當指定物件裡的屬性是布林值：
對應到的介面是 checkbox

- 當指定物件裡的屬性是function：
按下按鈕時會執行對應function

接下來介紹一些 dat.GUI 的操作操作與特色：

滑動區塊：
當指定的值為數字時，除了最大值與最小值外，也可設定滑動時一次變動的幅度
例如：
最小值0，最大值100，一次變動的幅度：
設定為  10，結果為 0, 10 , 20, 30, … 100;
設定為   5，結果為 0, 5, 10, 15, … 100;
設定為 0.1，結果為 0, 0.1, 0.2, … 100;
程式碼：

下拉選單：
可以指定下拉選單對應的字串，或是選擇字串對應的值
程式碼：
檢色器：
dat.GUI 有選取顏色的操作介面

程式碼：
要注意的部分有兩個：
Saving Values：
可以將調整的值列出來或存下來
團隊分工時很好用，可讓調整視覺的同事在調整完後，將設定存給開發者


使用 gui.remember() 後，會多一條控制列：

Events：
事件有兩種：
Updating the Display Automatically
有時情況會反過來，需要將數值塞回dat.GUI 介面裡

使用 controller.updateDisplay(); 的方法，將更動過的資料
套回到 dat.GUI 裡即可",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192019,自我挑戰組,1,用IT看世界系列,15,雲硬碟,allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1513644811000000000,348,"今天跟大家分享一下Qnap有趣的功能
有點類似像Dropbox
記得要先去申請My Qnapcloud ID然後做My DDNS

內建smart share的功能，可以自行產生連結設定密碼有效期限",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191678,ModernWeb,1,30天走訪ProgressiveWebApps(PWAs)系列,2,Day2-所以怎麼PWAs(核心技術)?,DK.Harry,https://ithelp.ithome.com.tw/users/20103808/ironman,1513644737000000000,336,"
在沒有Service Worker的情況下，一般的網頁都是Client-Server Model(主從式架構)，也就是將用戶端和伺服器端分開，舉例來說，當我打開一個ITHome的首頁時候，本機端的瀏覽器(用戶端)會發出一個請求到ITHome的伺服器(Server)，Server接收到請求的時候，會回傳ITHome首頁的資源回去用戶端，然後顯示出網頁。

也就是說，假如Server掛掉，那首頁也就無法顯示。
而Service Worker是一個用戶端的Proxy(Javascript檔案)，介於網站(Server)與瀏覽器(Client)之間，而他能存在用戶端意思就是說，可以做的事情就更多樣了，原本資料必須向Server端請求，現在我們可以將回應的首頁快取起來，如果網路不穩或甚至沒有網路，我們也不會馬上直接出現小恐龍的畫面(網頁無回應)。

發出請求時，可以先看Service Worker有沒有存在，如果存在且有Cache網頁的內容，Service Worker就可以直接回應用戶端發出的需求，而不用發需求到伺服器，當網頁有更新時，再透過事件更新網站內容即可達成，在網路不穩的地方也能輕易瀏覽網頁這件事。

The web app manifest is a simple JSON file that gives you, the developer, the ability to control how your app appears to the user in areas where they would expect to see apps (for example, a mobile device's home screen), direct what the user can launch, and define its appearance at launch.
引言：(https://developers.google.com/web/fundamentals/web-app-manifest/)
從定義來說明，Manifest是一個JSON格式的檔案，裡面主要定義了要呈現給使用者的內容，像是App的名稱、Icon圖片或顏色等等的設定。

如上圖，簡單的設定了App的名稱、各尺吋的icon圖示和顯示方式，從這些設定實現「Add To Home Screen」的功能，Android手機，瀏覽網站時，就可以將網站設定的manifest內容，新增到用戶的手機上，就像其他App一樣，點開就可以直接連接到網頁，而且不用下載空間。

如上圖，就跟原生的App一樣，在手機上有一個Weather的icon可以直接連結到網頁。

如上圖，點擊icon的之後，出現的網頁可以設定成滿版(看不到網址列)等特色。
今天簡單的概述，如何實現PWAs的網頁所有的技術後，覺得網頁可以辦到的事情，真的越來越多了，雖然網頁一大限制就是瀏覽器支援度的問題，對於一個技術是否引入專案佔據了很大的層面，但是PWAs的概念卻很吸引人，現在的使用者不會為了某一個網站，而刻意去下載App，就是我們不會為了只買某間玩具店的玩具，就去下載他們出的App(因為通知很煩?)，但一個網頁的icon不佔空間，且能提高使用者回顧網站的機率，因為就在手機的主頁上，而不是還要透過瀏覽器搜尋或我的最愛實現。
Offline瀏覽的功能，也讓使用者能感覺像是在操作App，而不會因為沒有網路就什麼都看不到，因此接下去，就讓我們更深入的了解每個技術的知識，以及如何實作這些功能吧。",['談談PWAs核心技術'],"['Service Worker', 'Manifest File']",['總結'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192149,ModernWeb,7,前端工程師養成手冊系列,16,打破工程師就必須加班爆肝的迷思,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1513644276000000000,768,"我是「不加班主義者」，你的人生已經有八小時奉獻給公司、八個小時睡覺，剩下八個小時扣除掉吃飯、睡覺、洗澡、通勤的時間，你認為還剩下多少？或許連五小時都不到，那麼你為什麼還要加班壓縮自己的生活品質呢？我認識很多人都會對工程師一定會加班爆肝有刻板印象，所以這裡我要告訴你如何面對加班這檔事。
這點不對，你要清楚知道公司錄取你這新人，表示你值得投資，並在試用期內培訓你成為戰力。而在三個月試用期的過程中，他們也在觀察你的能力，如果不如預期那就掰掰找下份適合你能力曲線的工作。
你可能會想說：「老闆給我機會，我當然要好好把握，盡早掌握公司的事情啊？」，摒除掉一些慣老闆壓榨員工加班的黑心公司外，老闆真正看重的是你的工作能力，你應該在工作時間內展現出你的產能，什麼是產能呢？白話一點就是公司交辦給你的事情都有如期完成，那就代表你有符合他們的期待。那假使沒有呢？有兩種情況，一種就是公司的任務超出你的能力太多，另一種就是你還沒不熟悉如何控管工作時程，溝通過少。
較常見的就是希望讓一位只會基礎 JS、jQuery 的初級前端，在一個禮拜內瞭解 Vue、Angular、React 的框架，並完成專案。我可以告訴你這根本是不可能的事情，這些高級 SPA 框架並不只有前端那麼簡單，你要瞭解後端 API 邏輯、整合第三方 API、生命週期 (init、offline)，更別說還需要瞭解各種抽象的程式觀念。光學皮毛就很吃力，怎麼可能還能立刻用在專案上呢？
但一般許多接案公司或是非資訊背景的主管級根本不懂這些，在囫圇吞棗地狂接案子時，都會認為跟前端有關，聘請一位前端就可以搞定一切事情根本大錯特錯，我許多同行也因此被搞得不勝其擾。明明原生 JS 就可以搞定得事情，因為甲方要求要用 Vue.js 設計，就被逼得要在不可能的期限生出來，如果當下明講這期限沒辦法做到，要公司向甲方告知期限必須推延，有可能還會被公司質疑工作能力，甚至因此被資遣的也有，我真想幫這些可憐的前端講他們的內心話：「真是操你媽的B有理說不清，有種你自己來寫寫看！？」。
當你接受到工作任務時，首先必須先確認這東西要何時交付，如果主管沒提出，你也要自己提問，或主動告知這大概何時會好，讓上層能掌握專案狀況。我常遇到新人因為不了解如何控管工作時程進度，而吃了不少虧，這裡也分享幾個要點給你。
很多人遇到複雜的專案，你跟主管都不曉得如何壓時程，於是主管只好先給了你一個時間點。投入幾天後才發現會 delay，但自己又抱持著這幾天加班應該有辦法的逃避心態，結果到最後一刻主管跟你要東西的時候，你交不出來不被罵到臭頭才有鬼。
你可能會想說：「我已經很努力天天加班了啊，但怎麼還是一直被公司罵？」因為公司要得是結果，沒有依照時程產出，你就會被主管責備，主管又必須被客戶抱怨，頻率變多後客戶就不相信公司，流失客戶公司賺不到錢，大家就一起完蛋，你自己看看這循環有多嚴重？切忌不要犯這個錯。
如果上層交辦的東西比較複雜，一時之間無法評估時程該怎麼辦呢？當下不要回可以或不可以，較好的方式是你跟主管說先花半天、一天的時間投入研究，就如同前面提到的將事情給碎片化，瞭解核心功能所預估的工時，再回報較準確的時程會較好。
有時候你在公司可能不會只有一個長官，可能會同時會有 N 個人交辦工作或插件，但請不要因此而增加你的工時，舉例來說如果 A 主管給你一項工作，期限就在下班前，而你評估花整天的時間才會勉強趕上，這時 B 主管在中午時也交辦你一個項目，也要你下班前完成，工時大概也需要半天左右。那這時該怎麼辦呢？
我想答案應該很明顯了吧？很多人都會下意識選 A，但為了要讓公司能夠在有效時間內增加最大產能，自然必須討論出哪個代辦事項才是最重要的，讓公司能夠有效推動才是正解。拜託不要當爛好人，什麼事情都答應，最後只會造成無限負面迴圈，還會讓長官以為壓榨你是理所當然。問問你自己，你犧牲生活品質為得是什麼？有加薪水加比較多又有加班費嗎？你滿意你現在的生活嗎？
最正確的方式應該是密切保持溝通，不要畏懼你的上司，你要讓你的公司賺錢，就是要確保自己現在做的事情是目前公司最需要的，讓公司擁有更多銀彈去作戰。你做得任何工作跟進度都要密切保持溝通，例如說：
絕大部分的朋友還會問我，同事跟主管是超級機八毛的人，EQ 超級低，完全無法溝通該怎麼辦？啊就辭職啊，不然怎麼辦？如果你是持續補齊你不足技術的地方，在台灣根本不愁找到工作。但如果你心裡抱怨，但又一直留在公司，反而要思考你是不是能力一直沒有自主提升，自覺能力不夠不敢跳槽？所以提昇自己的能力，選擇下一個能夠發揮你的長才的的舞台才是王道。
是你工作能力差才需要加班？還是你習慣性地加班，心裡總想著反正會加班，事情就慢慢做？或是老闆希望員工加班，你演戲給老闆看？問問你自己內心的答案，真的，不要加班。你人生最多活到一百歲，你沒必要花那麼多時間投入在工作上，還是你真的覺得你奴性很重？人生有很多值得投入的地方，如果你想不到現在可以開始挖掘，不要窮到只奉獻給工作。",,"['我很菜，所以要自主加班將不足之處補起來', '主動提出建置時程', '不要讓加班養成習慣']","['不要拖到最後關頭，才說你做不出來', '沒把握的東西先進行初步評估', '確認事情輕重緩急', '溝通溝通再溝通才是王道']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192146,ModernWeb,1,JavaScript基礎二三事系列,16,Day16　函式陳述句與函式表示式,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1513644026000000000,330,"今天來看Function Statement(函式陳述句)與Function Expression(函式表達式、表示式)
等等...Statement與Expression又是什麼東西呢?
Statement
程式碼的單位，這段程式碼不會產生一個值
Expression
程式碼的單位，這段程式碼最終會產生(回傳)一個值，而這個值不一定會被開發者賦予變數。
看看以下程式碼
我們先宣告一個變數a，然後直接在瀏覽器console做後續動作

接著看看以下程式碼
if()的()，需要布林值true、false來決定這個程式判斷會不會成立，故()裡面會放表示式，但if(){}這段程式碼本身是陳述句，本身不會回傳值，我們也無法將它賦予、指向給變數。

現在拉回來函式，函數的定義也有分為Statement與Expression
例如：
當電腦在執行轉譯的JS程式碼時，上面這段程式並不會報錯，因為它是Function Statement函式陳述句，程式碼本身不會回傳值，除非我們呼叫執行使其執行。
而這種先宣告函式定義，等待我們(開發者)呼叫執行的寫法，也稱為Function Declaration函式宣告，它會在電腦的創造階段它就會被設定進記憶體，發生提升Hoisting現象。
我們可以這樣寫不會報錯

呼叫執行cat的cat()雖然寫在函式定義上面，但電腦在創造階段就先把函式設定進記憶體，在執行階段呼叫其內容，創造其函式執行環境，關於Hoisting可以參考第三天的筆記。
由於函式就是物件，cat()這段程式碼，還可以理解成透過cat去查找在記憶體中的function，找到名子NAME屬性cat的函式物件，接著執行其程式屬性console.log(""貓咪"");，關於這部分，可以參考昨天筆記。
那Function Expression函式表示式呢？

當程式執行到=運算子右邊的程式碼，才建立這個函式物件，將其指向變數dog，並且它可以當成一個值，所以是Function Expression表示式。
這裡的函式並沒有名子，也就是說它是一個匿名函式，var dog = function()可以理解是將這個逆名函式在記憶體中的位址傳給變數dog。
而呼叫執行它的程式碼dog()，則可以理解是透過變數dog有的地址，去呼叫查找在記憶體中的該匿名函式，並執行其程式屬性console.log(""狗"");
那這樣寫呢?

變數會在創造階段被設定進記憶體，所以程式碼實際上會像這樣：
發生了提升現象，呼叫函式時變數dog其實沒有函式，自然報錯dog is not a function
而函式在呼叫執行時，也可以傳參數進去。
接續上面的內容，這裡建一個Function Statement
然後也可以把Function Expression表示式當成參數傳進去
透過變數
或直接放入匿名函式
結果

若是想要直接執行這個傳進去的匿名函式，原本的Function Statement可以改成這樣

　
　
　
　
小結
今天複習了Statement與Expression的差別，也複習了函式表示式、函式陳述句，瞭解函式可以當參數傳入其他函式。
明天來看JavaScript的傳值by value與傳址by reference。
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分4-35",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192144,DevOps,1,Nightwatch101：使用Nightwatch實現End-to-EndTesting系列,9,Nightwatch101#9：指令Part3,cythilya,https://ithelp.ithome.com.tw/users/20092232/ironman,1513643956000000000,902,"
前情提要-指令 Part 1 與指令 Part 2。
指令分為兩種－Nightwatch 提供的指令與開發者撰寫的客製化指令，以下介紹 Nightwatch 所提供的指令。程式碼可以打在 test/e2e/testDemo.js 並執行 nightwatch ./test/e2e/testDemo.js 來跑跑看喔！
以下繼續 Part 3，來聊聊與執行流程相關剩下的指令，例如：瀏覽網址、指定執行某件事/某個指令、載入外部 script 檔案、暫停、關閉瀏覽器和截圖。
本系列文章皆使用這個專案，可以拉下來玩玩；有什麼問題都可以提出 issue。
功能同 .url()，用於設定 launch_url。這裡使用 webdriver 的 url 協定指令。只有一個參數 url（optional）。
可在 callback 中執行 Nightwatch 所提供的指令，或執行某件事情，做完記得呼叫 done()。

載入外部 script 檔案，第一個參數是檔案路徑，第二個參數是放入 script 的 element id（optional，預設值是放在 <head>），第三個參數是 callback（optional）。


暫停測試程式，可指定暫停時間（ms）。
範例如下，登入露天網站，鍵入帳號和密碼後點擊送出按鈕，然後確認是否登入成功，來到首頁。
看完整範例。
「不要學！！」剛開始寫測試的時候，我們都傻傻的使用 pause 做等待，等個一兩秒等表單送出後驗證是否到達指定頁面或取得正確的結果。現在想想只覺得傻傻的 XD
好的測試項目儘量不要使用 pause 做等待，因為等待時間可能會因網路速度而有所不同，說不定等到天荒地老都完成不了送不出去等不到結果。比較好的驗證方式，確定是否得到正確結果，例如：轉跳到正確頁面，當然是使用 waitForElementVisible 看看 <body> 是否出現，然後驗證網址或者特定元素是否可見會是比較好的方式。
結束 session，關閉瀏覽器。
對目前頁面截圖，並指定儲存檔名。第一個參數是儲存檔名，第二個參數是 callback（optional）。
執行完上面的範例，螢幕截圖如下。

這在我們比對
的時候很常用到。
Nightwatch 指令三部曲已完成。
下一篇要來看 BDD Expect。
網誌版。",,"['init', 'perform', 'injectScript', 'pause', 'end', 'saveScreenshot', '總結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192046,DevOps,0,利用Node.js結合Docker開發一個能即時收集條碼的平台系列,3,從DOCKER出發！你會LINUX嗎？,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513643734000000000,338,"DOCKER是近來虛擬架構的新起之秀~
DevOps也似乎帶動了它的起航！
但DOCKER的運行最佳環境，一定是LINUX的OS平台。
先從裝個LINUX開始吧~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191774,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,14,Pandas(Python中的Excel)Day4-DataFrame的新增、迴圈與刪除,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1513643623000000000,314,"提醒: 本篇文章的code在這裡: Titanic
新增資料有兩種可能的意思: 要新增column或是要新增row，在pandas可透過concat完成這件事。順帶一提，concat是concatenate的縮寫，其實是把兩張DataFrame併在一起的意思，不過這邊純粹是整併同樣順序或是同樣欄位的DataFrame，如果你希望透過某個欄位的值對應出其他欄位，那麼你需要尋找的語法叫做join，由於這屬於相對進階的操作，並不會在這一系列的文章中提及。
這邊用一個案例，假設你發現要拿來預測的資料的類別比例與訓練資料的比例不符，(你可以透過上傳全部為1的檔案去看分數判斷每個類別的比例(噓...我什麼都沒說))，在鐵達尼號來說可能你發現生還者的比例在測試資料比較高。那麼你可能要複製一些生還者的資料，已使預測結果的比例比較接近測試資料，增加比賽準確度。

這裡當然也可以用concat去做(設定axis=1)，不過一般你要做出一個與DataFrame等長的、而且直接對應到rowID的資料欄位，除了跑回圈取得之外，也很難用其他方法做出來，所以這邊就來介紹一下，DataFrame跑回圈的幾種方法。


刪除資料一樣可以分為丟掉column或是row。




pandas的教程就到這邊告一段落拉。我知道，學這些基本工具很痛苦，不過這大約也是我覺得最重要的基礎技能。所以為了讓大家有繼續看下去的動力，這邊來給大家一個好玩的小專案，大家可以自己玩玩。不過因為使用到一些自然語言處理的技術，後面的文章會詳細的談，大家先玩玩就好。總之，我們可以來看一下，哪一些詞彙在人名當中出現比較多次。


3.畫出漂亮的文字雲
","['新增資料', '刪除資料', 'groupby', 'sort_values', '小小的遊戲']","['1. 新增rows', '2. 新增columns(DataFrame的迴圈)']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190599,自我挑戰組,0,2017挨踢人生大事紀系列,16,ERP改來改去何時了~教育訓練的重要性！,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513643435000000000,369,"ERP導入後，若是能撑過期初的「陣痛期」~
基本上，導入的完成度就已經算及格了！
有人想問說：「何謂陣痛期？」
我對這個問題解答的定義是：
『幾乎斷絶了所有使用者對舊系統(導入前的作業方式)的使用懸念！』
之所以保留「幾乎」兩字，是要留餘地給那1%的必要需求。
導入前的資料、資訊系統仍有一定的參考價值。
要保留三、五年，萬一要查詢以前的交易資料時，還能有機會查得到。
千萬不要以為導入後，以前留下的主機硬體閒置下來有點浪費，
或是以為它不再有用處，就「處理」掉了它！
渡過「陣痛期」後，接下來有個很重要的議題：『使用者教育訓練』。
ERP會改來改去的因素裡，我之前就有提過，可以略分為：
其中第 1.和第 4. 很明顯是使用者對系統不熟悉所致。
而第 3.的狀況，其實也能透過加強使用者對系統的了解，
讓使用者自然而然的改變作法來配合系統的流程邏輯。
可見，加強『使用者教育訓練』的效果，可大大消除ERP的維護困擾一半左右！
但是『使用者教育訓練』的進行方式，到底是各單位自行辦理呢？還是由挨踢主導？
這又是一個會互踢皮球的議題了~
以我公司的現行作法，有二種：
第一種方法是資訊部門會定期安排系統的整合測試作業。
整合測試中，視情境演練的作業相關單位，
其作業流程若是挨踢自己没把握能取代，就請相關單位他們派員參與。
這作法當然要取得上級的支持，也要和公司內部的各單位協調好。
第二種就是在使用者反應問題時，藉機介入去植入『使用者教育訓練』的部份內容。
也是趁機去了解實際狀況，反饋回給挨踢去更新，是否ERP的整合測試已不再符合現況？
導入ERP的所有作業流程，應該要能適時適當調整！
以上內容，提供邦友們參考。
在此期許各位邦友們，能順順利利過個好年~
不再挨踢！

...",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192109,ModernWeb,0,重新學習網頁設計系列,16,DAY16.Three.js相機Camera,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1513642273000000000,324,"在3D的環境中可以把它當成視角, 我們可以給它定位、關注點, 也可以搭配相機的位置角度來達到畫面移動的效果, 在一般的情況下相機使用非常容易，我們只需要給他合理的定位以及目標即可。
我們有以下幾種預設相機可供選擇
一般情況中我們最常用的即是視野相機PerspectiveCamera
相機都包含以下幾個屬性
執行以上範例只能看到漆黑一片的畫面，這是因為我們還沒調整相機本身的位置，以及要相機看甚麼地方，所以我們緊接著將該設定補上
JSBin Demo
如此一來我們就能看到畫面中的物件了, 但此範例的前提是你沒有改變物件的預設位置(0 , 0, 0)，通常一個3D場景如果看不到物件很有可能是因為忘記設定位置，所以相機還在原點，所以看出去不會有任何東西，因為相機與場景物件重疊。
若對相機有更多的好奇
可見官方Camera 文件, 我將在之後慢慢將更多使用方式補齊。",['DAY 16.Three.js 相機Camera'],['相機 Camera'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191654,SoftwareDevelopment,0,爬蟲始終來自於墮性系列,19,商城商品爬蟲,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1513642042000000000,356,"我曾經接過一個 case，案主的需求是他想監測競業對手商店的價格，然後根據對手的價格去調整自己商品的價格，打價格戰。他之前的作法就是 hire 一個工讀生每天都去掃一遍對手的商城，一樣一樣的用 excel 記錄下來，然後再一樣一樣的調整自家商品。整個流程下來，這位工讀生大概就要花半天在這件事情上面，那我們今天就來試著解決這件事情。
ps.我在網路上隨便找的，就以電器批發來做 demo。

進到 Yahoo 超級商城的電商頁面，若要抓取全部商品，肯定就是要把所有分頁都走過一遍，然後每個分頁抓取上面的產品清單，包含商品的名稱、圖片、價格、連結等。

接著觀察到他每一分頁會陳列 48 個商品，然後按下面分頁選單後會跳頁，網址參數有個關鍵的 b=48 ，在按下一個分頁，這個參數變成 b=96，我合理猜測這個 b 是  begin 的意思，這個分頁會是第 96 個商品開始陳列的意思。
探訪結束，也就是說只要能爬完這全部分頁，應該就可以抓完所有商品。
所以我們可以把步驟定義成以下兩個動作：

我們可以抓取畫面上的多少比數符合結果，這個數字目前是 908，也就是說總共會有 908 個商品。接下來是數學問題，一頁最多 48 個，908 那麼 908 個會是幾個分頁呢？908/48 = 18.91，也就是說會有 19 個分頁。那根據網址參數，只需要將分頁減一在乘上 48 就是參數 b 的 value，我們用 postman 來測試其中一個分頁看看，確定是可以拿到資料那就沒問題了。

接下來我們做 selector 來抓取這個分頁的商品列表。這邊發現產品列表的 html 格式挺特別的，他不是一個產品在一個 dom 裡面，而是分成三個 tr，這我也是醉了...。好在我們觀察到可以用 tr.border 來取得每個項目的分界，那應該就能抓取了，確定可以順利抓取後就能進入實作了。
我們先實作取得總數和分頁的 function，取得後將分頁陣列丟給 callback。
接下來我們來實作每個分頁取得分頁產品的 function，並將產品清單回傳 callback。
最後我們來處理整個流程邏輯，先取得分頁，然後用 async.map 來跑 getPageProducts，最後再將 array 扁平化，這樣就大功告成了。
取得商品清單只是整個動作的其中一環，之後還有比對商品、修改價格等動作。不過掌握了爬蟲之後，這些動作都可以自動化，可以將一個人花半天的時間縮短為五分鐘，而我想這就是一種成就感，能多出來的人力應該要用在更重要的事情上，而能做到這點的工程師，也才會真正突顯其價值。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍伸應用']",,"['取得分頁數量', '抓取所有分頁商品', 'getTotal function', 'getPageProducts function', '積木組合', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191917,ModernWeb,0,從零開始的網頁設計系列,5,Day05:新技能GET_常用標籤(三)_olulli&開始使用開發者工具&a,樂樂,https://ithelp.ithome.com.tw/users/20104423/ironman,1513642040000000000,319,"「請問為什麼你會很常用他！！！」
當我們要做複數個連續的一樣長相的元件的時候就會使用他
最簡單的莫過於我們直接往上看iT邦幫忙的選單，也就是你目前正在看的這頁的最上方的那一排
他就是利用ul li 去製作的
「你怎麼知道他是用ul li去做的」
想知道嗎？ 小精靈跟我說的 （被痛毆
我們先簡單的講解一下ol ul li
通常li都是被包在ol 或者是 ul 裡面的

這兩個最大的差別就在於一個是有序號一個沒序號，是不是很簡單明瞭啊？
那我們就來講關於小精靈告訴我的選單是用ul li 做的是去哪看到的
在這邊我們要開啟的是 開發者工具
什麼是開發者工具呢？顧名思義就是方便我們開發網站用的工具，每個瀏覽器都有
點擊Chrome右上方的的三個點點

選擇 更多工具 > 開發人員工具
快捷鍵
windows -> F12
MAC -> option + command +i
這時候我們會看到像這樣的頁面跑出來（偷偷換成iT邦幫忙的網頁）

是不是一大堆東西跑出來，我們今天只先分享一個最基本的功能，剩下的等之後有用到在講會比較有印象
點擊 開發者工具左上角的 icon 

這時候你的滑鼠只要移動到任一個元件上面
都會出現一層藍色的覆蓋區域
黑色的小小對話框顯示的是他目前的標籤以及CSS的class名稱 (這個部分大概在未來幾天會開始分享)
點下去後，開發者工具會自動幫你跳到該元件的html標籤位置

橘色的高亮（ 那一條橘色的槓槓 ）部分就是我們目前選取這個元件的標籤
而右手邊則會一起出現這個元件有套用到的CSS效果
我們會看到裡面有一個標籤 a
簡單講就是用來製作超連結的標籤 有時候我也會利用a來製作按鈕
用法
我們來實際看例子

文字變成了藍色有底線的狀態，代表目前他是一個連結
我們來用開發者工具看看

是不是就跟我們index.html裡面的內容一樣呢？
今天的分享就到這邊，明天要來分享table的使用方法後就開始進入CSS3的世界
套件推薦
Auto Rename Tag
在第二天的時候我們提果html標籤大部分都是有起始標籤以及結束標籤的
那如果當我們越包越多要改的時候就會有點小麻煩
這個套件的用處就是當你更改起始標籤的時候，結束標籤也會一起改變",,,"['實例', '結果', 'a', '結果']",['今天要分享的標籤是我在工作的時候超級無敵常用程度僅次於 div 跟 span'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192089,SoftwareDevelopment,0,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,13,Day13-使用SpringSecurity驗證OAuth授權,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1513641953000000000,302,"說明一下怎麼保護 ResourceServer
套件依賴
spring-security-oauth2 spring-security-jw 是我們需另外加進來的
我們會有一些基礎的帳號或是角色的物件
帳號
角色
配置 ResourceServer Security
接下來就可以在 Service 這邊配置需要的權限
像是 hasScope('role') 或是 hasScope('role.readonly') 其實都是非常簡單好讀的敘述方式
那像用到 spring-boot-starter-data-rest 的功能，你其實可以像下面這樣設定
RestResource 預設是 exported = true，所以有的時候你自己會卡到外部內部權限問題
舉例說外部 rest 操作必須要有 account 操作範圍，但是某些時候是系統內部要操作，這時候你就沒有 token 來檢驗
不過你可以另外設定個系統操作的 Repository 像下面，這樣一來這個 Class 內部所有的方法都不對外露出，就可以放心用啦
啟動程式
透過標準的 OAuth 跟 JWT 是不是省下很多自己開發的力氣呢?
使用 OAuth 不論是自用或開放兩相宜XD，使用 JWT 簡化驗證架構跟流程
雖然學習是有成本的，但是比起自己做一套授權系統，應該還是划算的很多
把力氣留在你的商業平台吧，這種基礎建設就盡量使用開源以及標準吧",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191830,DevOps,0,Puppeteer系列,1,Puppeteer介紹,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513641878000000000,324,"介紹
相比 Selenium 與 NightWatch..等等 E2E 工具，Puppeteer 是一個比較新的工具，是Google的專案，Api 文件寫得很清楚，寫作的當下這個專案的星星數 Github 已經到20922， 使用簡單 接下來的30天就來 玩玩Puppeter好物吧
列出常見使用範圍
1.生成頁面的截圖和PDF。
2.抓取SPA並生成預先呈現的內容（即Server Side Render “SSR”）。
3.可以當爬蟲抓取網站內容。
4.自動表單提交，UI測試，鍵盤輸入等
5.創建一個最新的自動化測試環境。使用最新的JavaScript和瀏覽器功能，直接在最新版本的Chrome中運行測試。
6.網站的時間線追踪，以幫助診斷性能問題。
這邊要注意的是Selenium / WebDriver是一個完善的跨瀏覽器API，可用於測試跨瀏覽器支持。
但是 Puppeter 雖然僅適用於Chromium或Chrome。在非測試用例中，Puppeteer提供了一個功能強大但簡單的API，因為它只針對一個瀏覽器，使您能夠快速開發自動化腳本。
Puppeteer包含了最新版本的Chromium。
總結
為來30天 會講解一些常用API 與一些 小技巧，也歡迎加入線上讀書會，有一些朋友都會一起研究
https://github.com/GoogleChrome/puppeteer",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192058,DataTechnology,0,GraphQL+ApolloData入門系列,13,ApolloData&Mutaion(一）,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513641850000000000,297,"介紹
ApolloData  Client 在可以 Query 資料之外，還可以使用GraphQL Mutation。在GraphQL中，Mutation與Query 的語法中是相同的，唯一的區別是使用關鍵字 mutation 而不是 query(預設 query可以不用寫) 。
gql 內容與 query 相同只是多了 mutation
基本的 mutation 會使用到的 lib 也都跟 query 一樣
最長見最簡單 mutation 使用，可以使用ApolloData 提供的 props.mutate method 直接定義好gql 看需要哪些參數如下就可以發一個 mutation的 payload到Server 端了。
Apollo 可以使用以上的枋來來進行fetach，但通常都會封裝在一個method底下，在使用HOC的時候就可以透過graphql第二個參數 物件中的 props 使用 apollo提供的mutate去包裝起來 ，底下的submit就是一個 props.submit的 method ，之後在元件之中之需要傳入參數就可以了，如果沒有封裝起來在元件直接fetch就要再些then 去等帶回傳的資料。
總結
ApolloData 提供 mutation 可以在元件中直接使用，也可以透過graphql 的第二個參數中的 props 綁一個function 元件使用 ，使用上跟query都差不多只是在寫 gql語法要多加一個mutation",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192136,ModernWeb,0,Next.js+各種套件組合系列,16,NEXT.JS&PageTransitions,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513641832000000000,296,"介紹
在Next.js中，在Route轉換的時候希望有過場效果，這次來介紹兩個 Page Transitions的寫法，因為在Next.js中如果更換 Router是直接把元件拔掉在重新裝上所以寫法上可以利用下面兩個方法來達到換頁時的效果
第一種
原本的Dom複製後在 Append到下一個 router 畫面 節點之前，可以看到使用了Router的onRouteChangeStart Event Method 把 目前   const $clone = $container.cloneNode(true) container 結點複製一份 ，在增加一個  loading的 class 動畫效果，使用 raf這個lib 是因為有些瀏覽器還不支援某些動畫的API 是一個 polyfill 補丁 ，動畫API 可以參考
https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame
在 _document 也在加入 static css 動畫細節 可以參考這隻css 這邊也可以使用Next.js提供的 Head
https://github.com/zeit/next.js/tree/canary/examples/page-transitions
另外一種過場效果寫法
跟上面一種的寫法差不多比較容易，也是使用 Router.onRouteChangeStart Event觸發在配合
Router.onRouteChangeComplete或 Router.onRouteChangeError 結束動畫
動畫部分可以參考 這裡
第二種比較簡單使用Router提供的三個 onRouteChangeStart，onRouteChangeComplete，onRouteChangeError去判斷過場
範例位置
https://github.com/zeit/next.js/tree/master/examples/with-loading
總結
在Next.js要了解 Router 轉場時可以使用的Event Method ，最主要的就是以 Router.onRouteChangeStart 為觸發事件,另外如果有Css 可以透過 _document.js先把會使用到的 css放入 或是使用Next.js 提供的 Head 方法把css 放到 Head 提供動畫使用",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191972,自我挑戰組,0,花式PHP系列,12,Object：PassByReferenceByDefault,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1513641766000000000,290,"你知道在函式的參數前面加上「&」就可以達成 Pass by reference 吧？
但你知道在 PHP 裡面，
Object 是不管怎麼傳都是 Pass by reference 嗎？
舉例來說，
底下這段程式碼執行完之後，$obj->key 會是 value 還是 12345678 呢？
大家只要把這程式碼拿去執行就知道答案了！
根據 PHP 官方的說法，
說 Object 這東西預設就是 Pass by reference 是不完全對的說法。
怎麼說呢？
從 PHP 5 之後，每當你在 new 一個 Object 的時候，
其實你宣告的變數得到的並非 Object 本身，而是得到對 Object 的參考。
所以「參考」傳到哪都是參考，只不過 PHP 可以用它來找到參考指向的 Object。
也因此，如果改寫上面的範例，
讓 assign 函式在修改資料之後把 Object 回傳，
並比較原 Object，及修改後的 Object，
會發現它們其實還是一樣的。
除非對傳入 Object 執行 clone，PHP 才知道你要的並非傳入 Object 的參考，而是它的複本：
希望今天的內容可以幫助到你，
讓你能避免浪費許多踩雷及 debug 的時間～","['物件傳到哪參考到哪？！', '離真相還有一段距離', '建立物件的複本']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192059,AI&MachineLearning,0,MicrosoftBotFramework30天上手+自幹LineBuilder串接+LineBotDemo系列,1,OhBotframework,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1513641766000000000,300,"因故 重新挑戰
所以看過這篇 就不用再看囉
假設你是要開發FB的chatbot，
且不具有程式背景(或懶得code)，
但邏況能力還行的話，
那建議你可以直接採用 chatfuel ，
chatfuel 聽說是台灣團隊所開發，
且直接被FB給投資。
重點是，
Chatfuel有UI介面，
你只要拉一拉 連一連，就可以完成大部分的需求了，幾乎用不到任何code，但如果你想寫，也是有部分的支援。
而且，
chatfuel權限是直接被FB開啟的，
你不需要去跟FB要權限就可以做很多事，
例如 取得user profile...(申請fb權限，要審核，真的很麻煩!)
而且!!! 台灣某大銀行的FB chatbot是用企畫人員 chatfuel 拉出來，
然後該銀行就發新聞稿，自已站在潮流之上了，而且運作的還ok!。(廢話，chatfuel這麼多人在maintain 怎麼可能會差)
但是，
相對的，當然也會受限於Chatfuel的UI介面，
而使你的Chat bot 無法靈活開發，
達到一些，你所希望的功能，
另外，因為A.I.是採取chatfuel所訓練好的，
所以每個Bot 可能會交談起來都是固定的模式。
假設你有跨平臺的需求slack telegram Skype...
也是不能直接套用的。
如果你會 c# 或 node js，
那你就可以試一試 botframework，
botframework其實就是一套腳本+狀態的機制。
採用的好處就是你直接可以依照這個框架，來撰寫你的整個chatbot流程，
而不用從 message api 開始作一系列的發展。
但目前為止，最大的壞處，就是m$因為該公司有Cloud的產品，
為了帶動該Cloud的發展，
硬是綁在一起，
導致這麼好的一個框架，
得先連到美國作轉發，
所以整個就會慢。
*註：因為 Line不被 dev.botframework.com 所支持，
所以我自幹line builder 時，
就順便把轉發這個問題給幹掉了。
不過我FB messenger 的部分還是先採用 dev.botframework.com ，因為 npm 上的 FB builder都沒在做更新。
而FB又很愛改，所以先採用好了，以後再看看要不要幫忙 maintain FB builder.",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192134,自我挑戰組,0,30天學習J2EESpring+Hibernate學習心得記錄系列,1,Day01　Spring基本介紹,Zero.Cheng,https://ithelp.ithome.com.tw/users/20107820/ironman,1513641515000000000,326,"今天到新公司報到成為網頁程式設計師(JAVA)經由帶我工程師介紹要我研讀學習Spring+Hibernate未來業務範疇都使用此相關技術，今天開始研讀資料了解基礎概念及術語.
Spring簡介
1.由Rod Johnson建立的開源框架(Open source framework)
2.Spring是一種輕量級的DI依赖注入（Dependency Injection，DI）/IoC控制反转（Inversion of Control)       和AOP（Aspect-Oriented Programming）開源框架
3.倡導以""最少侵入""的方式管理應用中的代碼即是要使用時就加入使用，如果不用也可以除去
4.適用所有JAVA領域(Web/GUI....)
Spring使用術語
1.應用程序(Application)完成的功能成品
2.框架(Framework)即是取代重複代碼並簡化專注於業務邏輯開發
3.非侵入式設計從框架角度理解無需要繼承框架所提供的類別
4.輕量級即依賴東西少資源占用少簡單部屬
5.POJO(Plain Old Java Objects)簡單Java對象包含業務邏輯不繼承實現任何框架類或接口
6.容器為管理對象創建初始化工作銷毀相關生命週期
Spring優點
1.低侵入/低耦合
2.聲明式事務管理
3.方便整合其他框架
4.降低開發難度
5.MVC三層每一層解決方案(Struct2+Spring+Hibernate)
** Spring家族及框架架構**
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191594,自我挑戰組,0,iflen(learning.python)==30:系列,15,Day15-Set,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1513641375000000000,288,"和數學上的定義相同，無序性(unordered)且元素不重複。通常用來做集合運算或者移除重複元素。
不支援sequence-like的操作，例如:取出其中某一個資料(indexed)或其中某一段資料(sliced)。
操作層面分為集合運算、走訪、判斷元素是否存在於集合內
交集、聯集、差集和XOR",,"['概觀(Overview)', '宣告(Declaration)', '操作', '參考']","['集合運算', '走訪', '判斷元素是否存在於集合內']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192137,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,14,【Day14】解除依賴之五：Stub和Mock一起使用（待續）,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1513641370000000000,296,"---待續---
---先行卡位---",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192126,自我挑戰組,0,hexo-從初學到入門-again系列,3,GitHub創建靜態網頁-day3,josephwu,https://ithelp.ithome.com.tw/users/20107307/ironman,1513641328000000000,289,"
如有註冊帳號後，選擇 Start a project 或是右上角的 New repository 都可以建立新專案。
新專案的名稱必須是 用戶名.github.io 例如我的帳號名是joseph2068,
所以我建置的專案名稱就是 joseph2068.github.io，
之後你的網址就是 https://用戶名.github.io/
我們利用 Git 來做版本控制並上傳到 Github空間，首先我們先到 Git官網
下載適合自己作業系統版本的 Git，安裝完後打開你的終端機輸入git --version可以看到你的 Git版本確認安裝成功

在終端機設置user.name和user.email
git config --global user.name ""你的GitHub名字""
git config --global user.email ""你的GitHub信箱""
生成 SSH Key，使用 SSH Key 可以幫助每次上傳檔案就不用再登入，詳細請參考這篇
 多重 SSH Keys 與 Github 帳號
ssh-keygen -t rsa -C ""你的GitHub信箱""
接下來連續按Enter,不用設定密碼
找到產生的.ssh的文件夾中的id_rsa.pub公鑰，打開後將內容複製

打開 https://github.com/settings/keys ，將剛剛複製的內容貼到Key裡，Title可以任意填寫，按Add SSH key新增

新增完後在終端機輸入 $ssh git@github.com，看GitHub公鑰是否設置成功",,,['我們前兩天hexo環境創建完成後，接著我們必須為hexo部落預備一個可以發佈靜態網頁的空間，我們選擇了Github Pages這個免費且穩定的空間。'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192097,ModernWeb,0,Nest.jsframework30天初探系列,15,Nestjsframework30天初探:Day15MicroServices_RabbitMQ,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1513641027000000000,288,"MQ全稱為消息隊列，消息隊列（MQ）是一種應用程序對應用程序的通信方式。應用程序通過讀寫出入隊列的消息（針對應用程序的數據）來通信，而無需專用連接來鏈接它們。消息傳遞指的是程序之間通過在消息中發送數據進行通信，而不是通過直接調用彼此來通信，直接調用通常是用於諸如遠程過程調用的技術。排隊指示的是應用程序通過隊列來通信。隊列的使用除去了接收和發送應用程序同時執行的要求。(整理自知乎)
RabbitMQ的是一個AMQP實現，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等。另外，AMQP協議更多用在企業系統內，對數據一致性，穩定性和可靠性要求很高的場景，對性能和吞吐量還在其次。(整理自知乎)
RabbitMQServer第一個參數請複製第2點的AMQP URL，是我們稍早創建的AMQP Server的 URL，第二個參數是queue，queue是儲存訊息的架構，訊息會被客戶端拿走。
rabbitmq-client.ts、rabbitmq-server.ts 程式碼請見nestjs github，nestjs作者寫的已經處理好pub、sub，我們只需要無腦呼叫使用即可。
說明:詳見程式碼註解說明。

成功使用了RabbitMQ作為訊息傳遞的方式!
程式碼都在github",,['MicroServices_RabbitMQ'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192002,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,14,14.單元測試的靈魂角色—TestDouble(待補完),依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1513641011000000000,283,"筆者心裡OS: 其他鐵人太利害了，都能準時完成、發文。我每篇文章至少要兩三個小時才能產出來，所以目前欠的技術債有點多……囧
聊完了單元測試的概念與原則，各位看倌一定覺得筆者都在說廢話。說了那麼多，還是不知道要怎麼做單元測試。
在我們開始聊 Test Double 之前，筆者先分享一個網站 xUnit Patterns.com 給各位看倌，這個網站是 xUnit Test Patterns: Refactoring Test Code 的作者 Gerard Meszaros 建立的網站。
雖然筆者還沒有拜讀過 xUnit Test Patterns 這本高達 833 頁的的實體書，不確在網站內容與實體書的內容差異有多少。但就網站內公開的資訊，就令筆者收獲良多。
但是……
它的內容很多都有套上 Pattern，算是有點硬的資料，如果沒有 Pattern 的基礎，可能會吃力了點。不過，如果要進一步了解單元測試，很推薦各位看倌花點時間研讀。
We replace a component on which the SUT depends with a ""test-specific equivalent.""

上圖是 Gerard Meszaros 用來說明 Test Double 概念的圖，搭配文字說明，大致就可以明白 Test Double 的作用與意義。
The ""system under test"". It is short for ""whatever thing we are testing"" and is always defined from the perspective of the test. When we are writing unit tests the system under test (SUT) is whatever class (a.k.a. CUT), object (a.k.a. OUT) or method(s) (a.k.a. MUT) we are testing; when we are writing customer tests, the SUT is probably the entire application (a.k.a. AUT) or at least a major subsystem of it.
The parts of the application that we are not verifying in this particular test may still be involved as a depended-on component (DOC).
簡單來說，就是待測試的項目，不管我們要測的是類別、物件還是方法，都可以統稱 SUT。
An individual class or a large-grained component on which the system under test (SUT) depends.
The dependency is usually one of delegation via method calls.
In test automation, it is primarily of interest in that we need to be able to examine and control its interactions with the SUT to get complete test coverage.
在 Gerard Meszaros 的《xUnit Test Pattern》中，針對 Test Double ，將其分為五種類型，Dummy Object, Test Stub, Test Spy, Mock Object, Fake Object。但我們只針對比較常使用的 Stub, Mock, Fake 進行討論。
引用某個函數的目標，不外乎是為了取得回傳資料、變更內部狀態、引發物件與物件之間的互動。所以進行單元測試，為了驗證函數內的邏輯是否正確，自然而然的，分為三種不同的測試方式，以應對不同的情境。
Checks the value returned from a function.
Checks the noticeable behavior changes in the system under test, after changing its state.
Tests how an object sends input to or receives input from other objects—how that object interacts with other objects.",,"['1. xUnit Test Pattern', '2. Test Double 的概念', '3. Test Double 測試替身', '4. 驗證方式', '5. 後言', '6. 推薦']",,"['2.1 System Under Test, SUT', '2.2 Depended-On Component, DOC', '3.1 Stub', '3.2 Mock', '3.3 Fake', '4.1 Value-based testing', '4.2 State-based testing', '4.3 Interaction testing', '6.1 文章', '5.2 網站']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192135,SoftwareDevelopment,0,簡潔高效的PHP&Laravel工作術：從ElementaryOS下手的聰明改造提案系列,8,第8天：安裝GoogleChrome瀏覽器,shengyou,https://ithelp.ithome.com.tw/users/20107229/ironman,1513640917000000000,300,"本文同步刊載於作者部落格：https://medium.com/@shengyou/2018ironman-eos-for-php-developer-day8-664c32283a08
對比於 Firefox，另外一大陣營的瀏覽器派別相信就是 Google Chrome 了。Google Chrome 嚴格來說可以分成兩個版本，安裝方式也稍有不同：
兩種版本在核心其實是一樣的，差在是否有整合 Google 官方的一些功能及應用程式內部使用的元件授權。依照您的喜好可以選擇自己喜歡的版本來安裝，在這邊筆者會逐一介紹如何安裝這兩種版本的 Google Chrome。
現在，就讓我們在 elementary OS 上安裝 Google Chrome 瀏覽器吧！
若要安裝 Google Chrome 官方釋出版，需要先至官網下載安裝檔。請先開啟瀏覽器輸入網址：https://www.google.com.tw/chrome/browser/desktop/index.html 進入首頁後，點選「下載 Chrome」按鈕即可。網頁會很聰明的偵測您的作業系統自動切換對應的下載版本。

當跳出選項時，請選擇正確的 Linux 版本。以 elementary OS 來說，請選擇 Debian/Ubuntu 的 64bit .deb 版本。

下載完畢後，因為 elementary OS 預設沒有辦法直接安裝 .deb 的檔案，所以接下來這步驟得依靠終端機來完成。請使用快速鍵 Meta+T 開啟終端機，將工作目錄切換到下載 (Downloads) 資料夾，並輸入以下指令：

接下來 apt 套件管理就會自動安裝相依套件，並把 Google Chrome 安裝至應用程式選單內。

雖然需要靠終端機才能完成全部的步驟，不過也還算簡單，對 apt 套件管理庫是不是愈來愈熟悉了呢？假如您覺得手續太繁複了，想要直接一次在終端機裡搞定，其實也可以輸入以下指令完成：
相較之下，Chromium 開源版就更好安裝了，假如您已經愛上應用程式商店的話，其實直接開啟應用程式商店，搜尋 Chromium 再按 Free 安裝就搞定了！

當然，用 apt 套件管理安裝也不遑多讓，一樣一行指令就搞定：

不論是哪一種安裝方式，完成後一樣可以在應用程式選單裡看到 Chromium 的圖示。剩下就看個人習慣設定和安裝 Chrome 的外掛程式了。您有推薦的 Chrome 外掛程式嗎？歡迎在留言裡跟我分享！",,"['安裝 Google Chrome 官方釋出版', '安裝 Chromium 開源版', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192100,DevOps,0,Openstack學習與介紹系列,3,DAY3OpenStack基本原件介紹,帥哥,https://ithelp.ithome.com.tw/users/20103615/ironman,1513640858000000000,270,"好的記性 不如 爛的筆記
在查資料的過程中偶然發現的一句話，希望我能繼續寫下去，並且完賽。
各位就繼續看我的爛筆記吧(大誤

Nova
Nova主要是提供compute的服務(computing service)，管理VM的生命週期等都是Nova所做的。
是Openstack最核心的服務。
(必要)
Neutron
Neutron提供Openstack的網路服務(network service)，Openstack的網路架構可以分成2種，分別是provider與self-service。這2種網路架構會在之後的文章介紹到。Openstack的網路架構非常複雜。
負責創造與管理L2、L3的網路服務，為instance提供virtual network與physical network的連接。
(必要)
Glance
Glance 提供的是Image service，負責管理啟動VM的Image(鏡像)，當Nova在創造instance時，就會使用Glance裡有的image
(必要)
keystone
keystone提供的是Identity service(身分認證的服務)，為Openstack的服務進行認證與權限管理。
基本上Openstack上的每一項操作都必須經過keystone的審核。
(必要)
Cinder
Cinder提供的是 Storage service(儲存服務)，為VM提供儲存空間。
Cinder會將compute node上的硬體儲存空間轉換成一個個的Volume，提供給V作為虛擬硬碟使用。
(必要)
Swift
Swift：提供对象存储服务。VM 可以通过 RESTful API 存放对象数据。作为可选的方案，Glance 可以将镜像存放在 Swift 中；Cinder 也可以将 Volume 备份到 Swift 中。
(非必要)
Horizon
Horizon提供一個WEB UI的介面，讓使用者能不透過下指令的方式就能操控openstack
比如說 : 建立網路、發起instance
每一個元件均由多個細部agent所構成，細部結構會在之後篇幅介紹到。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192133,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,15,React-Toolbox,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1513640823000000000,268,"就像我們不太會做設計，有 Bootstrap 這樣的工具能讓我們直接套用，就能做出好看的頁面。在 React 也有類似的工具，在試用過後我是覺得 React-Toolbox 算是不錯用，它已經設計好許多 Material Design 風格的元件，我們只要 import 到原始碼裡面，就能夠使用，而且它還提供一些自訂的功能。
安裝
$ yarn add react-toolbox -dev
因為 React-Toolbox 是用 Post-CSS 寫的，在 webpack.config.js 裡要多加上 Post-CSS 的設定：",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192132,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",15,Day15-HBaseSQL工具介紹,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1513640681000000000,283,"在前面的介紹篇章有提到，HBase本身並沒有內建SQL查詢的介面讓使用者查詢。
但並不因為這樣就無法使用SQL語法對HBase進行查詢。這篇要來介紹幾個基於HBase可使用SQL查詢的工具。
Phoenix是基於HBase所開發出來的數據查詢層，使用者可以透過JDBC向Query execution engine使用ANSI SQL語法進行查詢，Phoenix會將SQL語法轉換成各種Scan與Filter的HBase Client API後，並使用預先在HBase內註冊的Coprocessor對HBase進行分散式查詢。
由於是透過HBase Coprocessor的方法進行查詢，反應時間最快可以在毫秒等級，是目前HBase SQL查詢的推薦工具之一。使用者只要透過撰寫JDBC的程式即可使用符合ANSI SQL的語法對HBase進行資料的操作！除此之外還具有ACID功能讓使用者可以更近一步的使用SQL對HBase進行更近一步的操作。
不過使用Phoenix後HBase的 raw data有可能會被修改成Phoenix制訂的格式，而原先使用HBase scan可認得的資料可能就無法辨識！
Phoenix原先由Saleforce所開發，爾後捐獻給Apache基金會，後來變成Apache Top project。
相關安裝教學請看官方網站

From:https://phoenix.apache.org/presentations/OC-HUG-2014-10-4x3.pdf
由台灣的軟體公司亦思科技所研發，結合Apache Hive與HBase Coprocessor的特點，除了擁有媲美Apache Phoenix的查詢效能外，一鍵即可使用、免安裝，讓使用者可以透過內建的Web介面來對HBase進行資料的操作。內建支援HBase Bulkload功能，可讓使用者在Web介面設定資訊後，一鍵送出即可，並可透過監控畫面進行Job的觀察。
其最新版本1.120.04s支援HBase 1.12版本，並內建Hive on Spark功能，可對儲存於HDFS上的格式化的資料，使用Hive SQL透過Spark的分散式運算進行查詢，效能比MapReduce快上許多！
免費版本可至sourceforge，或者到HareDB官方網站下載。
60天完整試用版經過Cloudera官方認證，具有Security功能。
簡單介紹完了HBase 的SQL查詢工具後，HBase的介紹也告一段落，接下來的篇章要來介紹Apache Spark。",,"['Apache Phoenix', 'HareDB HBase Client']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192131,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,15,15.CognitiveService-文字翻譯服務,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513640523000000000,288,"在查詢 Cognitive Service 能做些什麼事情的時候，第一眼覺得最實用的功能非翻譯服務莫屬。因為個人在工作環境因素，撰寫電子郵件、Skype 與團隊討論、撰寫文件…等多數情況下都需要用到英文。英文不是很好的我，偶爾用詞遣字需要翻譯翻譯，就得開啟 Google 翻譯/搜尋。不意外地，趁這次參加鐵人賽的機會，強化自己的 Skype Bot 功能。
Translator Text API 是 Microsoft Cognitive Service 其中一項服務，呼叫方式相當簡單，若先前介紹介接政府開放資料、第三方英文笑話API 或 Google Calendar API 都能夠實作，銜接 Translator Text API應該沒有問題。他提供一組看似簡單卻實用的功能：翻譯、語言偵測、建立自訂翻譯與斷句…等等功能。

圖片來源：Translator Text API 文件
開啟 Translator 文件 -  http://docs.microsofttranslator.com/text-translate.htm，可以看見類似swagger 呈現方式，呼叫方法(GET/POST)、Header、Parameter 寫得蠻詳細的。

使用服務流程圖如下，大致上都需要先取的 access token 後，再使用相關服務

以單一翻譯功能來說，需要放入的資料有
appid：在header 內有放入驗證資料就可以保持空白，主要放入 Bearer access_token 即可
from 與 to：語系代碼、從哪一個語言翻譯成另一種語言
text：要翻譯的內容

偵測服務也不難，除了驗證資料，只需要 text 資料即可 (要偵測的句子)

官方當然也很貼心了提供範本：https://github.com/MicrosoftTranslator
但開始撰寫程式之前，我們似乎要先啟用服務，才能取得驗證相關資料…
Step 1. 登入 Azure Portal → 點選新增 → 輸入搜尋 Translator → 選擇 Translator Text API

Step 2. 拉至最下方 → 點選建立

Step 3. 填選相關資料 → 建立 (免費層相當實用)

Step 4. 建立完成後 → 開啟服務，很貼心地多了一個 Quick Start；我們按照步驟先取得 key

Step 5. 記錄其中一個 Key，測試與撰寫程式的時候會用到

Step 6. 與過去相同，我們透過 postman 做測試，取得access token
選擇POST
URL: https://api.cognitive.microsoft.com/sts/v1.0/issueToken
Header 放入 Ocp-Apim-Subscription-Key : 你剛剛紀錄的key

Step 7. 我們組合參數並測試翻譯功能 (雖然我還是比較愛 JSON格式啦...)
Url ：https://api.microsofttranslator.com/v2/Http.svc/Translate?text=Hello&from=en&to=zh
Header 放入 Authorization: Bearer 你剛剛回傳的access_token (Bearer access_token與中間要空白)

https://azure.microsoft.com/zh-tw/services/cognitive-services/translator-text-api/","['Translator Text API 介紹', '設定 Translator Text API', '參考資料']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191877,SoftwareDevelopment,0,做一個JVM語言系列,1,緣起：受了詛咒似的愛創作新語言，愛學新語言的程式設計師天性,timloo,https://ithelp.ithome.com.tw/users/20045230/ironman,1513640502000000000,274,"創世紀11章，
那時，天下人的口音、言語都是一樣。
...
他們說：「來吧！我們要建造一座城和一座塔，塔頂通天，為要傳揚我們的名，免得我們分散在全地上。」
...
耶和華說：「看哪，他們成為一樣的人民，都是一樣的言語，如今既做起這事來，以後他們所要做的事就沒有不成就的了。
我們下去，在那裏變亂他們的口音，使他們的言語彼此不通。
於是耶和華使他們從那裏分散在全地上；他們就停工，不造那城了。
...
之前，google 翻譯強勢崛起時，我會回想起這段經文，google 試著做千年前被耶和華變亂的語言，
快速又能精準的翻譯語言，讓地球變平的。
前不久，google 和apple 各推了一個簡化的語言，試圖簡化手機應用上的開發，
又讓程式員陷入了學習的焦慮，以為到了頭，卻又沒完沒了的學。
而先知型的大師James Gosling 說：
Most people talk about Java the language...
And this may sound odd coming from me,but I cound not care less,
What I really care about is the Java virtual machine as a concept,
because that is the thing that ties it all together,
It is the thing that makes Java the language possible,
it is the thing that make things work on all kinds of different platforms,
and it make all kinds of languages able to coexist.
先知總能理解神的想法，他用JVM 來做為一個基底，來讓每件事變成可能，
而外觀表現上又滿足人類天性愛創作新語言，讓各語言彼此間，看起來非常的不相同。
各有各的死忠擁護者，龐大粉絲，滿足文人相輕，愛打嘴炮的快感。
但最後都在JVM的生態圈裏，讓它更龐大更無法被替代。
所以先知不CARE, 或CARE LESS JAVA 語言已死的這件事。
但JVM已死，這就相對嚴重了。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192130,自我挑戰組,0,"Let's""Go""系列",13,Day13　DataTypes,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1513640490000000000,274,這節要談的是struct，待補,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192124,自我挑戰組,0,再戰軟體工程系列,4,『波動拳消除了，然後呢？』--談CodeSmell辨識與消除,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1513639936000000000,313,"在前文中，我們消除了惱人的波動拳，藉由邏輯抽象化的方法，同時提高了程式可讀性與易擴展性。我們先來複習一下，看看上次的結果如下：
再讀一次程式碼後，嗅覺靈敏的您，肯定這個時候已經發現了：Code Smell!!!對的。在解決了波動拳以後，我們馬上讓另一個問題顯現出來了 -- Data Clump。Data clump指的是一個函式需要引入的參數太多(本例中有10個)。要呼叫一個函示需要準備10個變數實在是太多了，他也是會造成可讀性下降的問題，他同時也讓呼叫他的程式片段難以精簡化。
怎麼辦？改嚕！
一般來說，對付Data Clump最標準的作法就是把參數分組，然後物件化。譬如，我們來看看這樣如何：
我們把參賽男仕轉化成一個Man類別的物件，這樣一來isOK這個函式就只剩一個變數了。好處是(除了易讀以外)，外面的程式片段只要想辦法湊出一個『Man物件』，就可以直接丟給isOK來判斷了。而且，因為Man類別已經被另外定義出來，所以再為了Man物件而另寫Utility類別或定義各種Constructor都會清楚且容易得多。
以此類推，Man類別也把這10種member variable再進行分類，所以顏值、物質條件、工作能力、與心腸好壞都被有系統地分門別類了，這樣一來，前文所說的Interface化與製造靜態工廠也變得更容易了。你看，是不是一舉多得？
這樣就沒有問題了嗎？有啊！當然還有。這樣改完了以後，另一個Code Smell馬上浮現出來了：Feature Envy。這個函式倚賴Man的成員函式太多了。這樣一來，也許可以考慮把控制權反過來，讓Man這個Interface去控制通不通過這件事。當然，你也可以就此打住，原因是你研判這樣一來程式邏輯與思考邏輯顛倒過來了，反而看不懂，而且說不定會很難寫。
可以不改嗎？當然可以。設計程式架構其實很怕Over Design。設計的架構只要做到『能清楚表達意圖，並兼顧可擴展性』，其實就很棒了。過度追求完美的設計，有時會造成RD花費太多時間在很少的收益上，那就划不來了。
身為工程師，我們只要隨時保持一個想要『持續改善』的心，在看到不易讀且擴展不易的程式碼時，想辦法為後人鋪個好路，就很有功德了。至於要做到什麼程度，就要看付出與收益的比例如何嚕！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192107,ModernWeb,0,ZerotoherowithReact.js系列,12,【Day12React】React+Webpack——搜尋功能#Part1,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1513639201000000000,314,"前面幾篇的做法，我都是直接引用 CDN 來操作。我們還有第二種方法可以 include React，就是透過第二篇介紹過的 Webpack，所以今天就來學學 Webpack + React 的應用。
在專案裡面的 package.json 檔案中，我們可以分別看到 devDependencies 和 dependencies，這兩個差別在於：前面的有 dev，後面的沒有（廢話xD）。前面的 dev 指的是  development ，就是在開發時需要用到的素材，開發中我們需要 babel 幫我們轉譯 JSX 語法，也需要 Webpack 幫我們打包。而後者則是在 production 時需要用到的素材，這個時候我們不需要 babel 和 webpack，但我們仍然需要 React 專案才能執行。
我在這個專案裡面載的是 15.4.2 版本的 React，不想用最新版本的話可以用這種寫法去定義你要安裝的版本
安裝完畢 package.json 檔案中可以看到以下：
接下來透過
這行指令的作用是，去讀取每一行 dependencies，確認你取得所有素材的最新版本。
跑完之後我們可以再下這行指令
去看是否能順利運作～
若順利運作，會出現 compile 成功的訊息（最後一行）
在這中間你會發現一行 url，這行就是我的專案的網址：
http://localhost:8080/webpack-dev-server/
環境都設定完畢之後，就開始今天的專案吧～
我先簡單畫一下這個產品搜尋應用程式的大架構，最上面有一個搜尋 bar，下面是一個個搜尋結果區塊。

打開 app/index.js，我們可以開始寫我們的邏輯了！
不過有一點要注意，現在我們的應用程式還沒有引入 React 這個函式庫，因為我剛剛先試了一下
在 debugger 裡面發現出現 ReactDOM 沒有被定義的錯誤訊息
因此，我們要透過 require，把 React 和 ReactDOM 呼叫進來
現在我要創一個 Search component
我在這個 component 裡面放了 input，現在頁面的樣子：

我先放入一個搜尋結果區塊

大架構出來之後，我們就可以開始拆解它，把它分解成一個個 child component 優化程式碼的維護。
切 component 囉～像切蛋糕一樣（突然肚子餓了ＱＱ）
我切了一塊 SearchBar child component
現在我要在 input 上面綁定 onChange 就像我上次做的氣球換色，也是透過 onChange 去觸發 function。因此我在 <input /> 裡加上 {this.handleQuery.bind(this)}
關於 bind 的用法，我無法透過我的言語來解釋⋯⋯在詳讀 Reactjs 30 天邊做邊學系列 這篇文章之後，我只能說感恩 Seafood，阿不是！是謝謝這位前輩寫的超詳細
我在 handleQuery function 寫了 console.log 測試看到底有沒有綁到

結果是 YESSSSSSSS，我輸入了 tooth 五個字，觸發了五次 Hi～It's time to bed
不過仔細看了一下，咦，It's time to bed 是到了睡覺時間的意思嗎xD
還好我看得懂英文。。。
好吧那我就乖乖聽它的話準備上床睡囉
各位高手晚安不要太拼ＸＤＤ
專案連結 Github",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192110,SoftwareDevelopment,0,每天Racket3分鐘系列,15,"(sendday-14set-title!""Racket也有物件導向—Class與Object—2"")",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1513639025000000000,294,"我們先回頭來看昨天的程式：
記得昨天講了物件導向的概念嗎？我們第一段程式，正是定義類別的方式：(define class-name% (class object%))，在 Racket 裡，定義類別習慣使用 % 做結尾，當然你若想用 Java/C# CamelCase 的命名法，也不是不行。先宣告了一個 id 名為 student% 之後，再宣告它一個以 object% 為基礎的類別 class，object% 是 Racket 裡頭的根類別，因此若你的類別沒有繼承別的，預設要以 object% 為根基。
接下來的 init，你若看到第二段程式的時候，會知道原來這是一個 建構子（Constructor），用來作為初始化這個物件的內容。我們在 init 裡頭定義了三個變數：id、name、gender，這三個變數接下來就用來傳給另外三個正式的物件屬性：student-id、student-name、student-gender。而除了這三個外，student% 另有一個屬性 courses，內容是一個空 list。
接下來有一個很奇妙的東西，回想一下我們在 Java/C# 寫物件導向時，預設建構子裡似乎不需要加東西。但若翻 Java 語言規格書 [1]，它說到當你的類別的建構子，若是沒有參數、沒有呼叫其他建構子，即使你不寫，它也會隱性地呼叫 super()，也就是繼承上層的建構子。然而，我想為何要隱性呼叫呢？這應該是一種語法糖。換句話說，Racket 在提供物件導向特性時，其實是把那些語法糖都拿掉，好讓程式更清晰。
接下來便是定義物件的行為（method）了，我們定義了三個，分別是 get-name、join-course、get-current-courses。裡面所使用的機制其實很簡單，相信各位從前文中可以了解它的作用。
最後，定義完了類別，我們便來建立物件。使用 new，後面接著類別名稱 student% 與它的參數，於是我們可以使用這個物件了！
那好，你想，物件導向的四大特性：繼承、抽象化、封裝、多型，這些 Racket 能不能勝任。Racket 可是 Northeast PLT 的代表作。我們介紹繼承與封裝，多型與抽象化讓你回去研究看看。
再來看個範例程式：
首先，我們引入一個好用的日期工具：racket/date，並且在 student% 下方，定義了新的類別：alumni%，表示校友。在 class 定義處，不再寫 object% 了，而是寫 student% 表示 alumni% 是從 student% 繼承而來。校友有一個重要的屬性，就是畢業年：graduated-year。
我們在 init 看到宣告了四個變數，除了 student% 的三項之外，還有一個 year，並且（這裡是重點！），在 super-new 時，傳了 student% 所需要的三個變數給上層的 student% 類別。
在下方 alumni% 的 method 定義處，我們一樣給了一個 get-graduated-year 的 method，但是多了三個特別的 method：
以上，我們已經介紹完 Racket 的物件導向很基礎的部份，更深入的部份可以參考 Racket Guide[2] 與 Racket Reference[3]",,"['1. 細說物件導向', '2. 繼承、封裝也難不倒 Racket']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192128,ModernWeb,0,PHPlaravel的邂逅系列,15,DAY15-laravelsqlquery介紹PART2,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1513638859000000000,302,"在router裡面新增一個更新url，

更新完後再去資料庫看看，title已經變了，那就代表成功囉
在router裡面新增一個更新url，

執行完以後，資料確實被刪了
現在來新增一個news的model，來讓model變成我們的中介，不用再寫原生的sql語法，現在介紹的語法會比原生好理解的多，但是sql還是很重要的，如果是初學的話，還是建議要都搞懂，再來使用ORM會比較能夠理解為什麼是這樣做的。
先在終端機中打上下面的語法，接著就可以在專案的app目錄底下去找到news.php的檔案，開起來看看裡面長怎樣
model很厲害，預設會去抓你名稱的複數為資料表，那如果我們用了覆數的名稱怎麼辦呢？可以打下面的程式碼指定特定的資料表，下面的語法會去抓到news的資料表。
接著到route的檔案中，在上面要先引入News的model才能使用，News::all()的意思，會撈到news裡面所有的資料，因為是all，那就一定是陣列，再使用foreach來把每一筆的title印出來。
剛剛是搜尋所有的資料，那現在來看看怎麼尋找特定的資料，這邊把剛剛all()改成find()裡面的參數是id的數字，這樣就可以把他回傳試試看
顯示出來的畫面會像這樣，如果是使用chrome的朋友，建議可以extension可以使用json Formatter來看資料，而不會讓資料都是一大坨的文字，看起來也舒服許多。",['DAY15-laravel sql query介紹 PART 2'],,['今天來講講更新和刪除，還有model要怎麼讀取資料。'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192125,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,15,卡位越卡越多了呀...呀呀呀呀,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1513638289000000000,314,題材容易想，實際遊玩的機制卻很難下手...,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192123,ModernWeb,0,挑戰CSS30天系列,15,day15_list-style-position,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1513637909000000000,290,"list-style-position 屬性讓我們可以決定記號是否應該被視為是文字的一部份，並且由此而決定記號的位置。這個屬性可能的設定值為 ""inside"" 及 ""outside""。預定值為 ""outside""。
如以下範例：
成果如下圖：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192116,ModernWeb,0,Confluence線上協同作業之平台系列,14,Attachments的管理,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1513637797000000000,301,"先介紹一下在confluence下，他如何來定義所謂的attachments
An attachment is any file that is included with your page. Examples of attachments are screenshots, photographs, other images, Word documents, presentations, PDF documents, videos and sound files. Attachments are useful when you want to share information that exists in another file format. You can attach files to any page or blog post, provided you have permission to do so. (attachment包含在page下任何形式的檔案，像是screenshots截圖、照片或其他影像，word文件、簡報presentations，pdf文件，影片跟聲音格式的檔案，attachments是有用的當您要使用另外的檔案格式來分享資訊時。您可以加入檔案到任意page或blog下，當您有權限的時候)
顧名思義就是把所要分享的檔案來上傳到page頁面下，滿大多數的情況下，遇到滿多比例上都是跟attachments的問題居多，整理了比較會常被問到的幾個問題，
1.要怎麼避免使用者亂傳檔案呢？目前是透過限制使用者上傳檔案的大小來限制，目前的單一檔案大小上傳限制是設定在2GB，每次上傳最多可以到25個attachments

2.要如何避免使用者上傳同樣的attachment？減少SERVER空間的使用呢？目前是透過isos attachment dedup plugin (https://marketplace.atlassian.com/plugins/com.isostech.confluence.plugin.attachment.dedupifier/server/overview)， 在使用者新增attachment到page內容的時候，主要會由演算法來判斷所上傳的attachment是否有跟之前的版本重複
3.如何減少attachments空間的使用？當有符合下列的幾種情況，可以透過Attachment Tools Plugin (https://marketplace.atlassian.com/plugins/com.drunkendev.confluence.plugins.attachment-tools-plugin/server/overview) 來達到節省SERVER空間的效果",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191987,自我挑戰組,0,rails學習紀錄系列,6,[Day6]關於Ruby物件與類別（Class)的關係,thehappyend,https://ithelp.ithome.com.tw/users/20107708/ironman,1513637670000000000,303,"Ruby 是一款物件導向程式語言（Objecte-Oriented Programming, OOP），這是一款物件化的很徹底的程式語言，在 Ruby 的世界裡，幾乎所有的東西都是物件。

從上圖可以看到物件的階層關係，所有型別皆繼承自物件(Object)，甚至是模組(Module)和類別(Class)。

在 Ruby 裡面，所有的類別的類別都是 Class 這個類別。
即使是 Module (模組) 也是屬於類別的一種。
至於 Class.class 還是會得到 Class 自己本身
學習Class時，理清類別的繼承關係也很重要，我們可以使用 superclass 方法：
class表達的是類與實例的關係，superclass只用於類。
superclass查找父類，表達的是繼承的關係。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192096,自我挑戰組,0,用laravel尻出自己形狀的linebot，還要撐三十天！系列,13,【第十三天】你開過變形金剛嗎？,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1513637184000000000,326,"我們已經知道slack自己組積木的強大魔力了，既然我們可以組出各式各樣的訊息Template，那在組的過程勢必就不能像之前一樣直接硬組，不然會變得很雜亂！
所以我們又要站在巨人的肩膀上了！
使用前請詳閱說明書～
度的！沒錯！就是要用變形金剛 Transformer！
（但我比較喜歡環太平洋）

我們先以這張圖為概念！

沒錯！這是單純輸入網址後會自己拓出來的preview！（可惡啊！為什麼機器人吐出來就沒有！）
算了！這種東西我也組的出來！所以就刻出了這樣的變形金剛！
PushAnimationTransformer.php
恩～看來當初的爬蟲要再調整不少了！
好的！完成了！有點臨時拼湊，大概會是將原本的改成這樣！
至於怎麼爬這邊就不贅述了，可以回頭看這裡，雖然頁面不同但做法大同小異～
CrawlerService.php
那麼現在我們就只差把它組上去囉～
給你的變形金剛塞上火種源
接著就是把它結合起來啦！
這邊要記得在你的composer.json裡面加上這些
可以參考
以上詳細操作可以參考這份PR
今天的成果大概是長這樣！這樣就算再用電腦也可以接收到動漫的通知啦哈哈！

快被自己宅死了",['【第十三天】你開過變形金剛嗎？'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192102,SoftwareDevelopment,0,來做個網路瀏覽器吧！Let'sbuildawebbrowser!系列,8,瀏覽器引擎處理CSS的簡易版（三）,微中子,https://ithelp.ithome.com.tw/users/20103745/ironman,1513637173000000000,345,"明天一樣討論 robinson 這個「玩具」專案。讓我們來直接看 robinson/src/style.rs 這邊如何實作 style。如果你還沒看過 CSS 系列的前兩部分，建議你先看一下。如果是系列的新讀者，建議你從第一篇開始讀。
這邊要注意一下，我們昨天提到的四個特性，在這邊都沒有實作，這邊做的部分只是最簡單的，把 CSS 綁定 DOM。也就是讓 DOM 能有顏色、大小之類的樣子。
這邊程式碼不上色（ ITHelp 不支援 Rust ORZ）
這邊我們定義一個 StyledNode 作為 style tree 的節點。還記得 DOM tree + CSS tree = style tree 嗎？
每個節點對應的 DOM 和 style 的屬性
接著從 CSS tree 中，遍佈的尋找對應的 DOM，為什麼從 CSS tree 而不是 DOM tree 呢？因為 CSS 一定會有對應的 DOM （除非是無效 CSS），而 DOM 不一定會有對應的 CSS，所以從 CSS 找 DOM 效率比較高。
還記得我們 CSS 模組做過的事情嗎？ Stylesheet 裡面有很多 rules，每個 rules 裡面又有很多 selectors，對應各自的值。
所以這邊直接遍佈 Stylesheet，這時候每檢查一個 rule 會呼叫 match_rule，每次 match_rule 會再檢查 selectors。
藉由之前在 DOM 模組做的，這邊可以輕鬆取得 DOM 的 CSS 是什麼。
再藉由 matches 由 selector 去對應 DOM 的 CSS，如果有匹配就回傳
最後我們就讓本文一開始提到的 style_tree  藉由執行 specified_values 取得樹裡面的數值，取得方式是靠上面提到的 matching_rules。
以上就是簡單的 style tree 實作方式，其實眼尖的話就可以發現沒什麼技術，等於就是好幾個迴圈去做匹配，只是寫法比較好看而已。這種寫法是完全線性，非常沒效率，最新的 Servo 的 Stylo 就針對這部份做高效能的優化，其中一項就是平行化處理樹。
希望有幫到大家，大家明天見！
關於作者
劉安齊，軟體工程師，熱愛寫程式，更喜歡推廣程式讓更多人學會",,['程式'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191935,自我挑戰組,0,專案學習的30天系列,2,Day2-專案SOP,馬達,https://ithelp.ithome.com.tw/users/20107754/ironman,1513636877000000000,327,"初心者，總是希望有一套完美的流程，想像如此就可以完成專案，不瞞你說我也想要有一套
整個專案啟動，需要了解客戶想要甚麼，而公司又可以給予甚麼，再來規劃產品的功能和用途，了解客戶想接觸的族群，針對族群設計畫面和功能，寫好網站企劃，雙方確認，開始交由前後端工程師去製作產品，待產品完成，由公司先行驗收再由客戶驗收，正式上線，結案。
總結流程
1.了解客戶需求
2.與客戶商談建置網站的架構、畫面和功能等等
3.確定一切內容，製作網站企劃書
4.開始製作
5.完成驗收
6.完美結案
對應流程補充
1.公司應給予客戶更多的選擇(時程、任務階段、價位、雙方人員投入)，目的在於符合雙方的成本
2.與客戶協議後最少要有書面證明，個人因為沒有證明，所以反覆修改
3.企劃書對於未接觸過的功能和網頁內容有極大的效果，一方面可以先構思出功能的流程和畫面，後續更改幅度也會有所依據，但對於企劃書該由誰撰寫，個人覺得雙方都要派人員來負責，若客戶端沒有經驗，則可以由我方提出企劃書給對方，當然客戶需要付相對的費用或者是較低幅度的修改
4.資料庫規劃→程式碼功能→動作流程→整合→優化(這部分很深啊，尚在學習中)
5.此次的驗收我將所有功能做成影片當作驗收，程式碼沒有TDD，純手工驗收
6.優化網站的CSS、JS、程式碼和圖片
參考
Clean Code無瑕的程式碼-番外篇
http://sony1708.pixnet.net/blog/post/29993099
https://blog.miniasp.com/post/2011/09/28/Building-Website-is-not-that-easy-the-SOP.aspx",,"['個人的幻想', '書本、網站和經驗啟發', '菜逼八第一次專案心得，若不盡不詳之處還請包涵，若有其他想法也請大神們不吝指教']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192121,自我挑戰組,0,,15,一半過後，還是要統計一下數字,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513636628000000000,301,"304組參賽
OS:果然鄰近20號的時候，報名的數字會暴增呢
20號中午就可以統計總共的報名數字了
2017/12/18 22:32
AI & Machine Learning：15 組 占 4.9342%
Data Technology：15 組 占 4.9342%
DevOps：14 組 占 4.6052%
Modern Web：93 組 占 23.0769%
Security：11 組 占 3.6184%
Software Development：63 組 占 20.7236%
自我挑戰：93 組 占 30.5921%
晚點更新一下抓取程式，來分享一下有趣的資料",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191870,Security,0,資訊系統安全與CISSP的簡單應用系列,4,[Day04]安全與風險管理(BusinessContinuityPlanning),wisdomryanlin,https://ithelp.ithome.com.tw/users/20107753/ironman,1513636579000000000,324,"昨天我們談到風險管理 (Risk Management)，其實，服務不中斷 (Business Continuity Planning) 是風險管理的一個子集。我們特別拉出來談的原因，是因為風險管理提供的是一個通用系統性方法 (General Systematic Approach)；若果不單獨拿出來看，服務不中斷 (BCP) 將很難在執行面有真正果效，同時也缺乏即時處理的速度與交付客戶的能力。
先問大家一個問題：為什麼將「法遵人員」納入您的服務不中斷計畫，是如此地重要呢？因為，許多的國家、地方法律和規範，會要求服務不中斷的實施；「法遵人員」可以幫助您了解是否有遵守法規與契約條例，這對於組織與個人面臨緊急事件時之權益保障有直接關係。接下來，我們就仔細來了解最近很夯的「法遵長」這個名詞。

圖片來源：https://ithelp.ithome.com.tw/upload/images/20171218/20107753VF1zVdvFl0.jpg
日前某銀行之紐約分行，遭美國重罰 1.8億美元，原因之一是法務人員兼法遵人員。什麼是法遵？法遵跟法務有什麼差別？
「憑感覺試試看 (Fly by the seat of your pants)」是很危險的，所以我們會另外設置一個安規部門，讓他負責去看所有的安全規範 (Safety & Regulations)、可靠度規範 (Reliability)、進出口通關規定、合約文件記錄 (Records of Service Agreements and Contracts)、官方認證授權 (Agency Authorization)、保險資料 (Insurance Records) 等等。
講了這麼多，您的組織設立「法遵長」了嗎？(好嗆好嗆好爽啊..


識別必要服務之相依關係 (Identify Essential Service Dependencies)：
產出功能資源相依圖 (Function Resource Dependency)，識別並記錄該服務相依之必要功能與資源。
準備服務不中斷所需之內外部資源與人員 (Prepare for Service Continuity)：
產出風險管理工作表 (Risk Management Worksheet)，進行風險評估與控制，分析對於這些資源之潛在威脅或危害。
驗證與確效您的服務不中斷計畫 (Verify and Validate the Service Continuity Plan)：
產出故障症狀、原因與行動一覽表，常見的基本元素有
*授權人員之正式名單，相關聯絡方式與溝通管道
*支持必要功能之替代資源與位置
*恢復步驟 (Recovery Sequence)
*常見問答 (FAQ)
*客人意見與審查回饋、重大變更之版次記錄
很著迷這個題目，很敬佩他的熱情，作者是臺灣大學法律學院教授，任教臺大 30 年，研究領域為刑事法學、法社會學，致力推動刑事實體法與現代財經的結合。(巨作啊！不愧是 30 年的精華！)

《集團化公司治理與財經犯罪預防》","['法遵長 (Legal & Compliance)', '服務不中斷計畫流程 (BCP Process)']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191870,Security,0,資訊系統安全與CISSP的簡單應用系列,4,[Day04]安全與風險管理(BusinessContinuityPlanning),wisdomryanlin,https://ithelp.ithome.com.tw/users/20107753/ironman,1513636579000000000,325,"昨天我們談到風險管理 (Risk Management)，其實，服務不中斷 (Business Continuity Planning) 是風險管理的一個子集。我們特別拉出來談的原因，是因為風險管理提供的是一個通用系統性方法 (General Systematic Approach)；若果不單獨拿出來看，服務不中斷 (BCP) 將很難在執行面有真正果效，同時也缺乏即時處理的速度與交付客戶的能力。
先問大家一個問題：為什麼將「法遵人員」納入您的服務不中斷計畫，是如此地重要呢？因為，許多的國家、地方法律和規範，會要求服務不中斷的實施；「法遵人員」可以幫助您了解是否有遵守法規與契約條例，這對於組織與個人面臨緊急事件時之權益保障有直接關係。接下來，我們就仔細來了解最近很夯的「法遵長」這個名詞。

圖片來源：https://ithelp.ithome.com.tw/upload/images/20171218/20107753VF1zVdvFl0.jpg
日前某銀行之紐約分行，遭美國重罰 1.8億美元，原因之一是法務人員兼法遵人員。什麼是法遵？法遵跟法務有什麼差別？
「憑感覺試試看 (Fly by the seat of your pants)」是很危險的，所以我們會另外設置一個安規部門，讓他負責去看所有的安全規範 (Safety & Regulations)、可靠度規範 (Reliability)、進出口通關規定、合約文件記錄 (Records of Service Agreements and Contracts)、官方認證授權 (Agency Authorization)、保險資料 (Insurance Records) 等等。
講了這麼多，您的組織設立「法遵長」了嗎？(好嗆好嗆好爽啊..


識別必要服務之相依關係 (Identify Essential Service Dependencies)：
產出功能資源相依圖 (Function Resource Dependency)，識別並記錄該服務相依之必要功能與資源。
準備服務不中斷所需之內外部資源與人員 (Prepare for Service Continuity)：
產出風險管理工作表 (Risk Management Worksheet)，進行風險評估與控制，分析對於這些資源之潛在威脅或危害。
驗證與確效您的服務不中斷計畫 (Verify and Validate the Service Continuity Plan)：
產出故障症狀、原因與行動一覽表，常見的基本元素有
*授權人員之正式名單，相關聯絡方式與溝通管道
*支持必要功能之替代資源與位置
*恢復步驟 (Recovery Sequence)
*常見問答 (FAQ)
*客人意見與審查回饋、重大變更之版次記錄
很著迷這個題目，很敬佩他的熱情，作者是臺灣大學法律學院教授，任教臺大 30 年，研究領域為刑事法學、法社會學，致力推動刑事實體法與現代財經的結合。(巨作啊！不愧是 30 年的精華！)

《集團化公司治理與財經犯罪預防》","['法遵長 (Legal & Compliance)', '服務不中斷計畫流程 (BCP Process)']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192119,Security,0,從接電話解任務開始到進入資安領域邊邊系列,3,接電話解任務(3/30):常用指令,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513636249000000000,306,"windows常用指令
ping	查詢網路狀態
ping -a IP -t	查詢電腦名稱
ipconfig 	顯示資訊
ipconfig/all	顯示祥細資訊(win98之前的:winipcfg)
ipconfig/release	釋出IP
ipconfig/renew	取得IP
ipconfig/flushdns	清除DNS cache
ipconfig/displaydns	顯示DNS cache
nslookup		查詢IP或電腦名稱
netstat -a [電腦名稱] -c		用電腦名稱查IP
netstat -A [IP位址]	用IP查電腦名稱 (比ping的方式更完整)
netstat -s -e		更祥細的網路資料
net user 帳號 / domain	查詢網域內的帳號
net time %logonserver% /set /y	設定網路時間為登入server
net start dnscache	啟用dns cache
net stop dnscache	停用dns cache
net share 	顯示共享資源
sfc / scannow		掃瞄錯誤並復原
mstsc		遠端桌面
devmgmt.msc		裝置管理員
taskmgr	工作管理器
eventvwr	事件檢視器
regedit.exe	註冊表
chkdsk		檢查磁碟
gpupdate/force強制遠端群組更新
exit 退出
Linux常用指令
cat 顯示檔案內容 (cat 檔案或目錄)
cd 改變位置 (cd路徑=前往路徑、cd ..=回到上一層資料夾)
cd前往資料夾 (cd ..回到上一層資料夾)
clear 清除目前的顯示內容
cp復製
exit退出
grep 尋找 (grep 字串 檔案名稱)
grep查詢字串
gzip 檔案壓縮 (壓縮檔案:gzip檔案、解壓縮:gunzip檔案)
history顯示已輸入的歷史記錄
kill 強制關閉程序 (kill PID)
killall 強制關閉程序 (killall程序名稱)
ls 列出目錄中的內容
ls顯示目錄內容
man 求助 (man 指令 (與cmd的/?或help用法相同))
mkdir 建立目錄 (語法:mkdir目錄路徑與資料夾名稱。在Linux的環境架構中未建立指定的資料夾，跑腳本的時侯會因為沒有指定的資料夾而無法順利丟資料，無法像windows執行批次檔一樣強制建立指定的資料夾並丟檔案進去。)
mkdir建立資料夾
mv移動
ps -1顯示此次登入的PID
ps aux顯示所有記憶體中的程序
ps -ef|gerp ssh|grep -v grep查找指定的程序並濾掉自已
ps -ef顯示所有使用中的程序
rm -rf刪除目錄
tail顯示檔案 (tail -f 顯示並寫入)
vim 程式編輯器 (vim 路徑檔案名稱。esc退出編輯模式、:w寫入、:wq寫入後退出、:q!強制退出)
vi文件編輯(esc退出編輯模式、:w寫入、:wq寫入後退出、:q!強制退出，跟linux大同小異...)
PS:
(1).  Putty無法用鍵盤Ctrl C/Ctrl V復製貼上，要改用滑鼠:復製(左鍵選取)、貼上(右鍵)
(2).  在linux環境使用vim編輯文件的時侯，無法使用鍵盤復製貼上，要改用滑鼠呦~
<<<更換主題原文重發>>>
原文https://ithelp.ithome.com.tw/articles/10190777",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192120,ModernWeb,1,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,16,Vue-Cli所創建的package.json+Webpack設定大解析,"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1513636158000000000,289,"Hi, 大家好
今天原本我在昨天預告的主題是想做些 Gulp 和 Webpack 的介紹
不過我後來使用 Gulp 的機會比較少，現在 Webpack 算是主流
所以今天我就想直接開始介紹整個 Vue-Cli Boilerplate
有關於 package.json 和 webpack 的設定了
我會把整個專案相關的 setup 都想辦法介紹一次
順便可以補充到 npm 之前時間不夠介紹的部分
現在我們的 package.json 有 10 個欄位，包含了 name, version, description, author, private, scripts, dependencies, devDependencies, engines, browserlist
這邊為了篇幅方便，我先把太長的內容省略
想看完整版可以點 這裡，不過下面也都會貼來做介紹
你這個專案的名稱
在 npm 的官方文件中，他被形容是跟你專案的 version (版本)，都是 package.json 最重要的欄位
命名規則跟滿一般的，要注意的是他不允許專案名稱有大寫
如果你將來有想把你的專案 publish (發布) 到 npm 官網 上讓世界上所有人都可以下載，要注意名字不要跟現有的專案衝突
小故事
關於在 npm 上註冊你的專案這點，身為一個開源、開放的資料庫
在 npm 註冊專案通常也是採「先註冊先得」的方式
這聽起來很合理，不過也會引起一些 Drama (八點檔)
像是如果你想當 npm 註冊蟑螂，先把一些可能會有人使用的先註冊起來
通常你的名字被註冊掉的話，可以跟原作者要
或是請 npm 官方願不願意改給你
這邊有個 npm 的小外傳，有興趣可以看一看
http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm
代表你這個專案開發上的版本
如果沒有 name 和 vesion 的話，是無法 npm install 的
npm 的版本號總共有三位
通常在版本的命名上都會有些慣例，這個可以上網搜尋「npm version convention」
https://stackoverflow.com/questions/28421489/what-is-the-convention-for-versioning-npm-packages-prior-to-1-0-0
這個欄位會是你這個專案的基本介紹
基本上內容隨意，真正會影響到的是
就是紀錄開發者有誰的欄位
比較多位的話通常會使用 contributors
這個欄位為 true 時，會在你想要 publish 時把你擋住
可以避免不小心私密的專案手賤推上線

這個欄位非常的實用和方便
首先，我們一般開發一個專案
會有許多預設執行的指令
像是「開啟開發用的伺服器」「建置專案」「跑單元測試」
以前的是寫在 README 裡面
不過 npm 有提供一個特定的欄位來記錄這些指令
執行的時候要打 npm run <script-name>
像是 npm run dev, npm run start, npm run test
(這些都要手動定義在這個欄位裡，Vue-cli 有幫我們新增幾個預設的)
備註
npm script 還有一個很方便的點
像是圖中，webpack-dev-server 或 eslint 這個 指令
通常我們都得使用 npm install -g 來安裝才能跑
但是如果你是寫在 npm script 裡面
他會自動去 node_modules 裡幫你尋找可以用來執行的 dependency
這樣就不必在全域手動安裝一次 webpack-dev-server 或 eslint 了
這兩個東西的差異，我們在前面有講後續會說明
(Vue-cli 新增了哪些會在明天講)
dependencies 和 devDependencies 都是在你 Project 裡面會用到的依賴
他們主要的差別是
如果你安裝一個 package，只是要把它拿來當作 Module 用，或是跑起來使用的話，那基本上只需要裝 dependency
如果你安裝一個 package，你是會動到原始碼，像是要修 Bug 或是跑單元測試，你八成 devDependency 也要裝一裝
舉例來說，這是 Vue-cli 產出來的 devDependecies
這邊像是 Babel、ESLint、或是 uglifyjs 、 *-loader、Webpack，全部的東西要不是轉譯器、就是開發 Server
你如果實際已經把一個 Project Build 完了，其實是不用把這些安裝的
而真正要裝的只有兩個
那就只有 Vue 和 vue-router
就算你有寫 Sass、他也會使用轉譯器邊過、所以 Sass 相關的可以想見，他也是 devDependencies
備註
npm install 在 npm5 以前，預設是不會加進 dependencies 裡的
npm5以下 npm install 預設是 npm install --no-save，代表不存
npm5 以後，預設是 npm install --save-prod、代表 npm install 預設就會存
如果要存成 devDependency，要使用 npm install --save-dev
他有簡寫像是 -P -D- O
相關可以去看官方文件
https://docs.npmjs.com/cli/install
在備註
其他還有像是 peerDependencies、bundledDependencies 和 optionalDependencies
有空的話會再介紹
可以指定你 Node 的執行環境(第幾版)
不過我也比較少用到，不知道有沒有人踩過類似的雷
這個是類似 CSS 版的 Babel ，他會你把比較新的 CSS 功能加上 Prefix
我後來發現這個套件網路上沒有半個 demo，我決定明天自己來寫一篇= =
https://css-tricks.com/browserlist-good-idea/
明天將會開始一個一個介紹這些套件，不知道會花多久","['一窺 package.json', 'name [必填]', 'version [必填]', 'description', 'author', 'private', 'scripts', 'dependencies 和 devDependencies', 'engines', 'browserslist', '我們明天見']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192118,DataTechnology,0,Python自習手札系列,3,Python自習手札(3/30):寫註解提示自已曾經寫過什麼東東‧‧‧,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513635883000000000,282,"自已碼的東西一段時間沒看，港覺不像自已寫的一樣…(冏
著個時侯就需要註解提示提示啦^^
註解的方法有: 單行註解、多行註解
單行註解
多行註解


vim編輯模式:
/    搜尋字串
i    編輯
Esc    跳出
!    強制
:w    存檔
:q    退出vi
:wq    存檔並退出vi
:x    存檔並退出vi
<<<更換主題原文重發>>>
原文https://ithelp.ithome.com.tw/articles/10191163",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192108,ModernWeb,0,初探前端之路-React-由生到死的踩地雷系列,9,React-Redux表單練習,Luis-Chen,https://ithelp.ithome.com.tw/users/20103556/ironman,1513635254000000000,289,"當react結合redux後，就有的觀念就大轉變，要趕快脫離段適應期，所以要不段的修煉，今天練習的是redux 表單
練習目標
看來挑錯練習範例了，這邊比較偏向套套件，直接聊核心程式
./store
什麼是store? 將aciton跟reducer 結合在一起的物件叫store
這邊可以看到 redux 建立 createStore 跟 combineReducers 看來就是要做結合的動作，
下面的redux-form，應該是有名的套件，可以試試看
combineReducers :意思是組合起reducering function
剩下的都是套件的使用了
可惜，codepen redux的範例不是很多","['前言', '程式']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192050,自我挑戰組,3,使用PHP串接金流相關API系列,8,Day07-Linepay(5)支付API,royal801991,https://ithelp.ithome.com.tw/users/20107301/ironman,1513633613000000000,353,"今天延續昨天的內容，要實作延後請款的功能。
一樣是對 reserve API 發送 request，但參數 capture 的值要設為 false。
不過目前會出現 parameter error

已去信詢問 LINE Pay，請各位大大多多包涵，知道發生甚麼事的邦友也歡迎留言或站內信告訴我   XD
",,,['延後請款'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192112,自我挑戰組,0,30天的切版日記系列,15,Day15:d3學習筆記-用資料繪圖,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1513633426000000000,296,"在 d3 如果要把一個類別加到某個元素，會用 selection.attr() 函式。
attr() 是用來設定 DOM 的特性值，style() 是直接在某個元素上套用css樣式。
在檔案中加入這個css設定
d3的部分則是

美化一下

隨機資料

cx 是圓形中心點的 x 軸，d的值仍然是dataset 內的，i 是被自動產生，這裡 i 可以隨意命名。
cy 是圓形中心點的 y 軸，把 cy 設定為 h 的一半，因為 h 是整個 svg 的高度，將 y 軸設定 h 除以 2 ，可以讓所有圓形都對齊垂直中心點。
加點顏色

",,"['div', 'svg']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191994,SoftwareDevelopment,0,[行銷也要自動化]用PythonSelenium+NodeJS+AmazonEC2打造簡易關鍵字搜尋報表應用！系列,3,Day2：NodeJS與Express4、route設定｜KeywordSearch1.0爬蟲關鍵字報表工具,jiunyiyang,https://ithelp.ithome.com.tw/users/20107784/ironman,1513632316000000000,298,"什麼是KeywordSearch 1.0 爬蟲關鍵字報表工具？
是作者近期兩周實作出來的小專案，把不同關鍵字搜尋工具的api及部分爬蟲寫在nodejs App當中，讓使用者可以一鍵拿到搜尋趨勢和相似詞組推薦。此專案尚有很大擴充空間，未來在作者自己的部落格若有進一步更新，會回來附在此處：________
為什麼要做KeywordSearch 1.0？
精闢有效的前導市調可以避免不符市場需求的產品出現，定期觀測關鍵字趨勢，是網路行銷或市場分析人員的日常；但網路資訊四散各地，市調人除了大量閱讀、蒐集、篩選判斷外，還要把資料整理過後呈現給團隊，這個過程非常需要耐心、想像力、判斷力、大把時間，能夠獨立做出完整市調非常不容易；因此作者和朋友想幫市調人員節省文書、搜尋時間，讓他們能專注在判斷、分析上。
現在進度到哪了？為什麼文章是有關nodejs？
這個工具已經開發完成，現在在測試修改中，這30天文章是想把自己的開發過程完整記錄下來。第一周的進度是初步架好NodeJS App的基底，以及在jupyter上測試爬蟲script。
昨天我們碰了一下最陽春的Nodejs和Connect來管理middleware，今天讓我們直接用Express架構KeywordSearch 1.0的基底！
跑完以後會看到你的App架構長這樣：
當你看到
就表示成功deploy了！可以打開localhost:3000跟大大的Express標題打個招呼。
在bin資料夾中的www就是你的App的starting script，裡面大致做的事情是幫你創一個server、指定監聽哪個port等。www會再啟動app.js，app.js裡面是基本設定，如route。
在你一建好App的同時，就可以在routes資料夾裡面看到users.js，以及你也可以在app.js裡面看到這一行：app.use('/users', users);，你可以隱約的猜到，這應該是已經預設好的路由。
我們在localhost:3000後面加上/users試一下：localhost:3000/users，嗯，確實有頁面，上面就是users.js中的response訊息。如果我們把users.js的res.send裡面的('respond with a resource');隨意換成其他文字，你就會看到他出現在剛剛的/users頁面。
現在我們來加加看新的route，只要一次更新這三個地方：
其中的<%= title %>是模板變數，讓你可以在about.js的res.render設定好整組變數。
（模板部分先簡單複製index.ejs的，後面我們會詳細講模板的變化，除變數以外，還有固定模板、如何載入json等等。）
/* 補充 */",,"['安裝', 'route設定', 'Express 3 -> Express 4的改變']",,"['在route/下層新增about.js', '在app.js新增兩行', '在views/下層新增about.ejs']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192106,ModernWeb,0,從無到有，使用Go開發應用程式系列,10,Functiondeclarations,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513632226000000000,300,"在我們 Hello World 的練習裡，曾提到一點點函式的定義，今天要來詳解它。
函式的定義語法如下：
先來個簡單的範例：
其中 add 函式， a 與 b 為相同型態，所以可以寫在一起，如下：
如果回傳值只有一個，而且沒有宣告名稱時，可以不用加括號 () 。下面是回傳兩個值的範例
這有點類似 Map 取值的用法，第二個值是確認這個回傳是正確的。
如果有定義名稱的話， return 會把當下兩個變數的內容回傳出去。
常看過很多程式在一開始就定義 result ，在 return 的時候回傳出去。 Go 則是在規格上直接實作出來，覺得蠻有趣的。
傳回多個值的時候，必須照順序接值；如果不需要回傳值，可以用 _ 略過：
傳回多值通常會用在錯誤處理，如果使用不恰當的話，容易違反單一職責原則。
如果傳入值是不定的，可以用 ... 來表示，如：
裡面的 numbers 型態會是 Slice []int ，所以可以用 for range 走訪。",,"['定義函式', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192105,SoftwareDevelopment,0,看到code寫成這樣我也是醉了，不如試試重構？系列,8,SOLID之開關原則（Open-Closeprinciple）,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513632100000000000,328,"原文定義是這樣子的：
Software entities (class, modules, functions, etc.) should be open for extension, but closed for modification.
直接翻成中文大概會是：「軟體實體應該對擴展開放，對修改關閉」。這到底在說什麼呀？
說明前，先來看個小範例：
這是一個簡單從 API 下載 XML 並解析的小 class 。某天 API 單位說要開新 API 改使用 JSON 作回傳格式，但還在測試階段，可以先行測試，下個禮拜將會上線。
請問，這時大家會如何修改這個程式呢？
太簡單了，相信大部分的人應該會想要把解析 XML 的程式改掉，如下：
改好測好後，繼續開心的開發其他功能。過了一個禮拜， API 團隊突然說有重大 issue 無法如期上線，可是其他功能要依續上線，不應該因為 API 延期而延期，該怎麼辦呢？
最保險的方法當然是接 XML ，因為那是舊有還在線上維運的 API 。可是瑞凡，程式都被刪光光，回不去了。
當然版控或是備份還原都能解決，不過我們也可以從設計上解決－－重構成新舊規格都可以用的程式！
我們先使用 if 快速實作試看看：
如果還記得單一職責原則的話，會發現它有濃濃的壞味道－－ XML 處理是一種職責、 JSON 處理應該是另一種職責。
因為它們都是在解析 $content 因此我們可以抽出一個抽象方法 parse ：
截至目前為止，我們使用了樣版方法模式（Template Method Pattern），把解析資料抽離出另一個 class 實作，它同時也符合了單一職責原則。
現在，我們來回想一下需求：「新 API 改使用 JSON 作回傳格式」，可以怎麼實作呢？相信大家會換另一種方法：「寫新的JsonResource class 繼承 DataResource ，再把使用的地方改成新 class 就好，這太簡單了！」
同時也回想一下今天的主題：「軟體實體應該對擴展開放，對修改關閉」
相信這樣大家對開關原則應該有更深的了解了。
最大的好處正是降低修改風險。思考一下，前面的修改，是修改既有程式碼，因此有可能破壞原有功能；後面重構後的修改，只有新增程式碼，舊有程式因為沒修改，所以理論上問題當然會比較少。
擴展的情境並不一定在設計階段就會發現，常常要到了需求調整才會知道，像上面的範例正是如此，誰會知道 API 團隊突然要改 JSON 呢？但我們還是有辦法面對改變的－－透過重構讓設計可以更符合需求。",,"['優點', '潛在問題', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192103,自我挑戰組,0,TDD-紅燈，綠燈，重構，30天TDD之路有你有我系列,1,Day1.動機－自我挑戰的開始。,sqz777,https://ithelp.ithome.com.tw/users/20107209/ironman,1513631748000000000,311,"Hi，大家好，我是DZ，這一次是我第一次參加IT鐵人競賽，希望可以透過 (自己挖的坑) 30天的寫作關於測試、關於TDD，讓自己可以對於TDD的練習能夠更加的精進

練習TDD對我來說，不是練習寫Unit Test，而是讓我能夠了解如何拆解需求，把需求拆得更細，讓我可以針對每一個小需求進行測試，經過這樣不斷的實作，刻意練習，進而讓TDD的過程變得像是呼吸一樣正常，紅燈、綠燈、重構這個過程也會在每一天的文章中出現，而這一次的挑戰過程也會是紅燈、綠燈、重構。
這一次的寫作內容主要會先從何謂測試、測試的定義到開始用TDD練習，TDD練習的內容就會從拆解題目開始，紅燈，綠燈，重構最後將所有需求完成需求並驗證成功，帶大家一步一步的了解測試並利用TDD來進行實作。
這次要用的語言是C#，是小弟我較熟悉的語言，測試的框架就使用MS Test來進行TDD的練習

小弟我目前接觸的開發項目不多，都是遇到強者的提點而進化，其中一個就是91大大，在此感謝他點燃我對於開發的熱情，讓我開始用寫作來內化自己對於技術上的了解，透過寫文章的方式讓自己透過自己的方式來描述一件事，就可以知道自己對於某一種技術了解到了多少甚至可以知道有沒有缺漏。
我很喜歡之前與91私聊時的這一句話 :
我們需要找到一種持續給自己回饋的方式，才能持續改善
所以 scrum 裡面有 iteration (迭代)
所以有 retrospective
一切都是持續改善的基本要素
此目錄為暫時的目錄，每日更新時會補充連結及主題
Day1. 動機－自我挑戰的開始。
Day2. 什麼叫單元測試? 再給我說一次，什麼叫他的單元測試?
Day3. 來談點測試吧
Day4. 套路，到處都是套路
Day5. 套路的開始，第一個題目。","['動機', '目錄']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192104,ModernWeb,0,每日文章推薦系列,15,Day15docker,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1513631585000000000,332,"在linux下面的話不用跑vm就可以直接開一個環境
比之前方便很多
不用看VM在那邊吃記憶體跟CPU
雖然docker本身也會吃XD
是的
這個標題是從昨天的內容複製貼上過來的
從Dockerfile去把docker image編譯起來
也算是一種infrastructure as code
而且每次建立起來的image都是新的環境
所以可以確定環境的獨立性
不會被之前作過的操作所影響
如果你要處理多個容器之間的連結
直接使用docker會感覺很麻煩
這時候就能使用docker-compose來作整合
可以把設定檔整合成一個yaml檔案
一次看懂你的系統要用到哪些service 跟image
也能直接設定好容器之間的連結
https://docs.docker.com/samples/library/drupal/#-via-docker-stack-deploy-or-docker-compose
Kubernetes是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。https://www.kubernetes.org.cn/k8s
上面的docker-compose只限於在一台電腦裡面處理
當你需要用到cluster的狀況時
就要搭配Kubernetes 俗稱k8s來協助處理
docker 本身有推出Docker-swarm
但是一直沒打下市場
反倒是google 推動的k8s越來越多人用
現在在google cloud platform 上面的container container engine
更是直接改名成container Kubernetes engine
直接支援k8s的功能
之前就有支援啦
只是名字直接改成Kubernetes就更明顯了
而AWS也直接推出Amazon EKS
顯示出google,aws兩大雲端服務都已經覺得Kubernetes比較會有市場了
https://github.com/Chalarangelo/30-seconds-of-code
可以看很多功能可以用怎樣簡短的方式去實作
有興趣可以看一輪
但是要用還是要考慮一下相容性
因為大部分都使用到ES6的特性了
https://github.com/fripig/article_log/issues/423",['Docker Compose'],"['好處', 'infrastructure as code', 'Kubernetes', '今日分享文章', '今天看的文章']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192101,自我挑戰組,0,ArasPLM開發練功30天系列,15,[Day15]ASP.NetWebForm-簡易搜尋介面,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1513631080000000000,307,"延續上一篇來做一個簡易的搜尋介面，首先在.aspx裡規劃好輸入欄位，再開始寫自己的搜尋邏輯
先看一下完成畫面

TestIntegration.aspx
Search按鈕事件",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192092,ModernWeb,0,Go！從無到打造最佳行動網站系列,8,Day8正在初始化環境中,網襪工程師,https://ithelp.ithome.com.tw/users/20107302/ironman,1513625678000000000,331,"摸魚了一個禮拜，今天開始真的要開始來寫一些程式碼了，如果提早寫完再來寫一些比較邊理論上面的事情
這一次的鐵人賽實作網站，想要寫一個簡單的佈告欄，主要其實不是網站的功能性強與弱，其實是想要練習用Go寫一個網站，不要抱持太大的期待xDD
我的開發環境主要有兩個，會透過Github來整合程式碼，大致上先簡單介紹這次開發的環境
環境A
環境B
Go 版本 1.9.2
開發工具
Sublime Text 3
Cmder
寫到這邊其實有點懶了
這次用的go framework 叫做Beego，進入到官方網站很快地就可以知道是中國人寫的，因為下面有滿滿的中國企業在使用，不要懷疑今天就是要學習怎麼使用它！

要先使用這套framework 必須先將他的檔案下載到自己的電腦中，我們透過指令
使用 -u 會註冊到全域喔，這個動作有點像nodejs 中的npm install 的感覺有點像
如果你在上面的指令會出錯時，先查看自己的GOPATH路徑，如果發現沒有印出路徑時，你就要走設定環境變數步驟了
設定環境變數
點選桌面上本機右鍵，點選「內容」，左方選單上有「進階系統設定」，點選「環境變數」，在XXX的使用者變數(U)中點選「新增」(如果想直接註冊在本機上面可選擇下方「系統變數」中)，變數名稱輸入「GOPATH」，變數值輸入在您電腦中使用者目錄下go的資料夾(如果沒有可以自己新增一個)，一起將Go下面的Bin資料夾一起註冊，輸入內容如下


重開機
重新打開Cmder
出現下面這張圖片代表你做人成功

應該還會再跳出這張圖，如果你很單純的話，請只要將私人網路，例如家用或工作場所網路打開就好

打開瀏覽器輸入 localhost:8080 如果有顯示下面的畫面，代表你晉升為人生勝利組！

留點體力明天繼續...
今天真是個美好的一天，開始自暴自棄的我今天真的很想喝一杯珍珠奶茶，中午的時候就一杯了，晚餐應該吃吃蔬菜就好了吧！其實珍珠奶茶的熱量真的很高，如果你想要增肥建議每天一杯，不用幾天後腰圍就會越來越粗喔~
X分鐘快速瘦身的迷失
網路上常常看到有人在分享「X分鐘快速瘦身」，簡單的來說如果你想減肥沒有不二法門「飲食控制+運動」才是正解，一般來說你必須先具備一些知識，一般運動要有減脂的效果需要每次運動30分鐘以上，身體才會開始燃燒到脂肪。如果你想透過X分鐘快速瘦身，可以在你運動完後(30分鐘以上的運動)，在來做這樣的運動效果會比較好喔！
當同學笑你為什麼穿著黑絲
你可以笑著跟他說「因為今天天氣很冷」
By 今天穿黑絲的工程師
",,,"['減肥專欄', '每日一句']",['小知識'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192056,AI&MachineLearning,0,深度學習環境安裝筆記系列,7,[Day07]深度學習環境安裝筆記—安裝與編譯OpenCV,a7552005,https://ithelp.ithome.com.tw/users/20091307/ironman,1513624875000000000,327,"Ubuntu 的源裡面有收錄 OpenCV 可以直接用 apt 來裝，不過版本比較舊只有 2.4 就是了，但如果沒有特別的需求的話其實這樣就夠了。
這裡沒有特別的需求指的是你在安裝安裝其他深度學習的框架時會需要用到，但又不需要使用 OpenCV 裡一些比較特別的功能。
抱歉今天因為要幫老闆寫計畫太忙了所以只寫了這樣，包含安裝 3.2 以及編譯 OpenCV 的部分我之後會再補上，目前這樣裝在安裝 Caffe 、 Tensorflow 等等框架已經足夠了。",,['直接安裝 OpenCV'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192093,自我挑戰組,0,從0開始的菜鳥工程師挑戰賽系列,6,第六天-第一個成品((傷眼請注意)),lf2exe,https://ithelp.ithome.com.tw/users/20107727/ironman,1513624413000000000,372,"這幾天的衝刺學習下來，感覺吸收不太良，所以決定試著刻一頁html試試看!!!
結果路途艱辛阿~~中間弄得亂七八糟，哈哈哈哈哈哈哈((以瘋))。
我看了一下大部分的基礎網頁分成三部份，開頭選單、中間內容、最下面的頁尾。
所以就依樣畫葫蘆地借(ㄔㄠ)鑑(ㄒㄧˊ)一下了，如下圖。

做完以後我沉思很久，我根本沒想到要做甚麼主題((WTF))!!!!
........好吧，我們就來做個經典問答題吧!!
那麼開頭就是題型，中間就是問題與選項，頁尾就.....白卷吧((遠目))。
先分別把三個框框畫出來

登愣~~~

...............還好我是念機械系的，處女座比較陽春麻~
接下來插入圖片的時候我是用div包起來放的，不然他會一直亂跑或是比例歪掉。
這是最後的完成版!!


其中圖片那個框框上下置中我當時搞了好久，然後我朋友說只要在css的裡面加入  box-sizing: border-box;就可以了，雖然我沒搞懂原因，但是就是這樣XDDD",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192095,ModernWeb,1,ASP.NETMVC網頁程式介紹系列,9,[Day09]表單中的GET與POST,小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1513624291000000000,352,"今天好累喔...
配合原本要講的主題，
今天的內容主要是參考網路上的文章。
參考資料會附在最後面：
GET 與 POST 有寫過網頁表單的人一定不陌生，但你了解什麼是 GET 與 POST 嗎!? 現今的網頁設計工具相當的發達，甚至不需要接觸 HTML 語法就能完成一個規模不小的網站，漸漸地很多人都忘記了 HTTP 底層的實作原理，造成在發生錯誤的情況下無法正確進行偵錯。
早期在撰寫 HTML 表單語法時，都會寫到以下的寫法，然而大部分的程式設計師都會採用 POST 進行表單傳送。
然而在我們的網頁程式中要獲取表單的變數只需要呼叫系統已經封裝好的方法即可，像是 PHP 使用 $_REQUEST、JAVA 使用 getParameter()、ASP 使用 Request.Form() 這些方法等等。
由上述的方法看來，似乎用 POST 或 GET 好像不是很重要。許多網頁程式設計師對於表單 method 用法的記憶為""POST可以傳送比較多的資料""、""表單傳送檔案的時候要使用 POST""、""POST比GET安全""等等奇怪的概念。
What's HTTP Method ??
其實使用 POST 或 GET 其實是有差別的，我們先說明一下 HTTP Method，在 HTTP 1.1 的版本中定義了八種 Method (方法)，如下所示：
OPTIONS
GET
HEAD
POST
PUT
DELETE
TRACE
CONNECT
天阿，這些方法看起來真是陌生。而我們使用的表單只用了其中兩個方法 (GET/POST)，其他的方法確實很少用到，但是在 RESTful 的設計架構中就會使用到更多的 Method 來簡化設計。
GET vs POST Method
先舉個例子，如果 HTTP 代表現在我們現實生活中寄信的機制，那麼信封的撰寫格式就是 HTTP。我們姑且將信封外的內容稱為 http-header，信封內的書信稱為 message-body，那麼 HTTP Method 就是你要告訴郵差的寄信規則。
假設 GET 表示信封內不得裝信件的寄送方式，如同是明信片一樣（感謝網友 Kevin 的建議，採用明信片來詮釋 GET），你可以把要傳遞的資訊寫在信封(http-header)上，寫滿為止，價格比較便宜。然而 POST 就是信封內有裝信件的寄送方式（信封有內容物），不但信封可以寫東西，信封內 (message-body) 還可以置入你想要寄送的資料或檔案，價格較貴。
使用 GET 的時候我們直接將要傳送的資料以 Query String（一種Key/Vaule的編碼方式）加在我們要寄送的地址(URL)後面，然後交給郵差傳送。使用 POST 的時候則是將寄送地址(URL)寫在信封上，另外將要傳送的資料寫在另一張信紙後，將信紙放到信封裡面，交給郵差傳送。
接著我來介紹一下實際的運作情況：
我們先來看看 GET 怎麼傳送資料的，當我們送出一個 GET 表單時，如下範例：
當表單 Submit 之後瀏覽器的網址就變成 ""http://xxx.toright.com/?id=010101""，瀏覽器會自動將表單內容轉為 Query String 加在 URL 進行連線。
這時後來看一下 HTTP Request 封包的內容：
在 HTTP GET Method 中是不允許在 message-body 中傳遞資料的，因為是 GET 嘛，就是要取資料的意思。
從瀏覽器的網址列就可以看見我們表單要傳送的資料，若是要傳送密碼豈不是""一覽無遺"".......這就是大家常提到安全性問題。
再來看看 POST 傳送資料
網址列沒有變化，那我們來看一下 HTTP Request 封包的內容：
看出個所以然了嗎？原來 POST 是將表單資料放在 message-body 進行傳送，在不偷看封包的情況下似乎安全一些些.......-_- 。此外在傳送檔案的時候會使用到 multi-part 編碼，將檔案與其他的表單欄位一併放在 message-body 中進行傳送。這就是 GET 與 POST 發送表單的差異囉。
參考資料：
淺談 HTTP Method：表單中的 GET 與 POST 有什麼差別",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192094,ModernWeb,0,重新學習網頁設計系列,15,DAY15.Three.js渲染器Renderer,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1513624013000000000,330,"在Three.js 初探文中, 我在最後寫了這麼一段程式來渲染整個場景
首先要認識的是, 在three.js中渲染器Render, 我們有以下幾個選擇
在普遍的情況下我們優先考慮WebGLRenderer, 另外兩個Renderer通常是在環境不支援WebGLRenderer時的替代方案, 原因是相較於WebGLRenderer, 其他Renderer可能渲染品質較差, 或是功能較少(例如不支援複雜的材質與陰影)
##requestAnimationFrame
在很久以前, Javascript渲染動畫的方式通常是使用全域計數器window.setInterval搭配CSS屬性來實現
這樣的方式雖然能夠實現動畫效果, 但實際上會遇到遺失間隔與間隔之間的幀, 進而降低了秒張率FPS, 更多詳細解說可以查看這篇詳細的介紹
因此, 現代瀏覽器為了更好的體驗, 一致的實作requestAnimationFrame, 而我們也將使用此方法來渲染我們的3D內容
另外我們可以使用Renderer的setClearColor方法來設定場景背景色
接著我們可以與先前的範例做結合
如果測試這段程式, 畫面中將會呈現一個不停旋轉rotate的方塊cube且背景為白色的3D場景。
方塊cube會旋轉是因為在函式animationRender中我給方塊cube調整了旋轉rotation屬性, 使我們方便觀察出目前的場景已經由requestAnimationFrame不斷的渲染, 驗證動畫渲染的效果。
以上就是渲染器Render的介紹, 以及requestAnimationFrame的why and how，在實際使用的情境中, 我們很少會調整animationRender函式, 因為它的職責僅止於不斷的在每一幀渲染畫面。",['DAY 15. Three.js 渲染器 Renderer'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192091,自我挑戰組,0,自我挑戰日記系列,13,CSS：text-stroke文字外框,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1513621958000000000,339,"今天繼續昨天的裁切
作出文字的外框及鏤空的效果
先作出加粗的外框及顏色

外框加粗

文字填色 color: white;
還可以再多加陰影

要把文字鏤空
就不需要 color: white;
因為用 -webkit-text-fill-color: transparent;
就會把文字外框之內的顏色透明

把文字鏤空就不能增加陰影
因為透明的部分也是會產生陰影
就會影響到文字鏤空的效果
--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192045,ModernWeb,0,從無到有，打造一個漂亮乾淨俐落的RESTfulAPI系列,8,[Day-8]JavaScript基礎篇(1),10程式中,https://ithelp.ithome.com.tw/users/20107247/ironman,1513621490000000000,349,"各位先前可能聽過 ECMAScript 若不知道也沒關係，ES6的出現就他有關係，在1995年時 Netscape(網景)公司與 Sun(昇陽)公司合作 設計一個網頁程式語言名為 JavaScript 名稱屬 Sun(昇陽)公司擁有，後來被Oracle(甲骨文)公司所收購。1996年11月，網景公司將 JavaScript 提交給歐洲計算機製造商協會(ECMA)進行標準。各位可以發現ES4為什麼沒釋出？由於此版本更新幅度太大更新許多功能，怕龐大的變動讓使用者吃不消所以最後決定每年固定釋出更新直到最近的 ES6、ES7。
JavaScript 在變數方面處理很特別，由於作者之前是學 C 與 Java 語言出生的，剛踏入 JavaScript 時發現變數命名竟然用 var 就可以了!? 相對的 python 也是如此，這就是所謂的動態型別的語言 (Dynamically Typed Language)。此外相信各位讀者在使用 JavaScript 時常發現一個問題就是 undefined ，這個夢魘相性各位也有經歷過，因為變數位置放置不對或是已經被重複命名當下都不了解，只能可憐的半夜抓蟲就為了變數這可惡的傢伙。然而 let 和 const 都是 ES6新版本所規範出來的，在這之前變數定義只能使用 var 。
let 和 const 都是為了彌補 var 的一些缺陷而新設計出來的，那他們到底有什麼差別呢？在官方文件和 Airbnb 的語法規範中都會建議你不要使用 var 來做宣告改請改用 let 或 const ，說了這麼多以下就開始介紹兩著的使用時機與差別。
參考資料:

這邊來解釋上述的程式由於迴圈內的變數只有區域特性，跑出迴圈後就不會再使用到它了，所以這邊就只用 let 做變數宣告就行了，所以迴圈結束後再呼叫 i 會出現 i is not defined 的錯誤，此外 Airbnb 也建議別使用 i++ 雖然我也不解，聽說是效率上問題？最後 ES6 有多行字串功能眼細的讀者可以發現我是使用 ` 裡面可以直接使用 ${} 來包入變數，以前的話還要用 + 相當麻煩。

由於我是宣告 const 常數故 mName 變數初始化後並不能再給值變動內容，所以第二行就會出現 TypeError 的錯誤。
JavaScript分為很多種資料型態：
Java 和 JavaScript 雖然名稱相似，但是卻天差地遠，JavaScript 是一種直譯式的物件導向程式語言，其具備簡單好上手、應用範圍廣泛，容易有成就感，但精通不易等特性在鱒新的 ES6 標準當中加入了程式區域（Lexical Block Scoping）以及承諾（Promise）還有變數 const 與 let 的作用域，這些新增讓 JavaScript 使用上更明確與人性化，此外在 ES7 async/await 的非同步演進更加方便的遠離 ES5 可怕的 Callback hell。後續幾篇文章會從最基楚由淺入深帶各位進入 JavaScript 的世界！
文章同時發表於：https://andy6804tw.github.io/2017/12/18/js-tutorial-part1/",,"['JavaScript 歷史與發展', '規格與版本', '變數與常數', '資料型態', '結論']",,"['1. 宣告 let', '2. 宣告 const']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192088,SoftwareDevelopment,1,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,12,Day12-使用SpringSecurity建置OAuth2授權服務,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1513618626000000000,342,"JWT 介紹網路有很多
這邊有很詳細的 Oauth 說明 OAuth 2.0 筆記 (1) 世界觀 但目前我們不會全部都用到 目前只用以下兩個 可以參考看看
是你常見的像 FB 那樣，當別人的問券或是網站要用的你資料，則會回到 FB 取得授權後才能繼續玩

關於 Implicit Grant Flow 注意幾點
是比較會偏內部可信任的應用在取得授權，因為會經手用戶的帳號密碼

關於 Resource Owner Credentials Grant Flow 注意幾點
會建立一個用戶 admin 密碼為 123456

其實 Spring Security 有個預設的流程 org.springframework.security.oauth2.provider.token.DefaultTokenService 可以去看看
但我們不用修改這套流程
Spring Security 預設的 org.springframework.security.oauth2.provider.token.store.JdbcTokenStore 管理方式是 Single sign-on 也就是會踢掉前一次登入的 Token ，但是這並不符合我們要的
當你是登入的時候，會依照上面 DefaultTokenServices 的流程跑這幾個方法
當你是 Refresh Token 的時候會依序執行以下方法
所以我們實作以上幾個動作就可以了 請參考 ps-authservice\src\main\java\com\ps\security\CustomTokenStore.java
介面 UserDetailsService.java
這是介面提供 security 來讀取用戶資料 請參考 ps-authservice\src\main\java\com\ps\security\CustomUserDetailsService.java
繼承 org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider
這支是在驗證用戶帳密，我們使用 org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder 來做密碼的儲存 相關範例請參考 Spring BCryptPasswordEncoder
BCryptPasswordEncoder 是 spring security 3 推薦的
安全性更多閱讀 在我的印象中，hash+salt已经足够好了。为什么我还要使用BCrypt？
實際程式碼部分在這 ps-authservice\src\main\java\com\ps\security\CustomUserDetailsAuthenticationProvider.java
最後 AccessTokenConverter 不一定需要實作 這個是把原本亂數產生 Token 的方式轉成 JWT 格式
而我們這支 ps-authservice\src\main\java\com\ps\security\CustomAccessTokenConverter.java 是跟原本 org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter.java 的一模一樣
只是方便我們想去加些什麼在 JWT 內
如果 JWT 內的 exp 時間直接解開來看起來很怪是沒有問題的喔，因為在轉換過程中有處理過，你用其他套件他也會換算回來的
怎麼設計 Scope 也許可以參考 https://developers.google.com/identity/protocols/googlescopes
Client 其實也可以配置到資料庫中，不過我們還沒對外開放，所以還不需要。
我們配置了兩個客戶端 clientapp 是走 password 可信任的內部服務
web 則是 implicit 外部一次性授權 網頁方式授權
忘記了就回上面看吧
啟動主程式
Request
response
Request
response
使用瀏覽器開啟 http://localhost:8080/oauth/authorize?response_type=token&client_id=web

有點醜沒關係，這是可以客製的
再看一下原始碼這頁面是有擋 跨站請求偽造（Cross-site request forgery）
輸入正確帳密之後後有個授權清單頁面

同意之後就會產生 Token 透過瀏覽器 轉回客戶端設定的 http://www.google.com.tw 網址如下
AuthServer 這邊就已經可以用了
想簡單用可以走 implicit 想控制權高一點又可以 refresh 就用 password
Resource Server 則不一定需要套 Spring Security 你也可以簡單使用 Filter 、 LocalThread 、 JWT 套件 就可以達成
那些 x-xss-protection 再自己加上也蠻快的
https://github.com/samzhu/ps-authservice
補充說明
剛剛有講到會註冊這個服務作為驗證主流程
https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java
每次都會呼叫這方法驗證Token
那誰呼叫這方法，就是藏在Filter
https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/OAuth2ClientAuthenticationProcessingFilter.java",['使用 JWT 跟 OAuth2 來實作授權系統(spring-security)'],"['什麼是 JWT ?', '什麼是 OAuth2 ?', '實做一個用戶管理', '測試', '參考資料', '程式碼']","['OAuth 中的角色定義', 'Implicit Grant Flow', 'Resource Owner Credentials Grant Flow', '資料庫表格', 'OAuth 流程', '實作 TokenStore', '實作 UserDetailsService', '繼承 AbstractUserDetailsAuthenticationProvider.java', '如果要客製化 AccessTokenConverter', '在 WebSecurityConfiguration 註冊元件', '配置 AuthorizationServer 並把我們服務組件組裝起來', 'password Auth', 'password refresh', 'implicit']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192066,ModernWeb,0,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,15,Phoenix起步走：Changesets基本操作,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1513618568000000000,329,"過去兩天我們分別介紹了Django與Laravel的console模式與基礎ORM操作
今天我們回過頭講解Phoenix的部分
首先，進入介面的指令如下：
為了後續操作方便，我們會先對想要操作的Model取個別名
這樣接下來就可以直接使用User
來試著新增一個空的user
會得到提示：name與email不可為空
驗證是設定在User Model的changeset當中
接著我們把必填欄位補上
其實回傳值當中已經可以觀察到valid?: true
但我們依然可以用驗證的方法確認是否通過驗證
但是到目前為止
這個changeset只存在記憶體當中
我們接下來要把它存入資料庫
這樣就可以把剛剛的changeset存進去
你可以觀察他自動產生的SQL字串，基本上就是一般的SQL insert
包含了預設的時間戳記
也可以直接把user 欄位資料寫在insert內
這個時候不會檢查必填
所以這樣依然會新增成功
來檢查一下剛剛新增的內容：
可以看到剛剛新增的兩筆資料
假如我們不需要全部的欄位，只需要Email
會以array的方式回傳
括號內類似SQL的語法稱為DSL
實務上，查詢會另外寫
query 可以疊加重組，自由度相當高
假如只需要取第一個寫入的資料
按照Elixir的語法，也可以改寫如下
參考資料：
https://github.com/mydearxym/phoenix-doc-in-chinese/blob/master/H_ecto%E6%A8%A1%E5%9E%8B.md
https://hexdocs.pm/ecto/Ecto.Query.html","['新增', '查詢']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192072,SoftwareDevelopment,0,初探Kotlin系列,13,[Day13]Interfaces,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1513618111000000000,333,"Kotlin的Interface相似於Java 8 可包含抽象方法及方法的實作
也可含有property, 與抽象類別不同的是Interface不能儲存狀態(?)
使用關鍵字interface
實作方式
可在interface中宣告屬性 屬性可以是抽象的或者可以為引用的類提供實現","['Interfaces', 'Properties in Interfaces']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192048,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,15,[Day15]EasyFlowGP--Web表單元件-Dropdown下拉式選項,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1513612454000000000,378,"今天要分享的是另一個常用的元件，下拉式選項- 
選項的內容值可以直接寫在選項內，也可以抓取資料庫的值。
方式一.直接寫選項值
點選元件後，到[設定選項]，將要放入的下拉值設定好。
如下圖，設定幣別有台幣和美金，兩種選項。
方式二.透過SQL抓資料值
EFGP的BPM文件也有介紹說明方式，在此忽略，細節請登入EFGP看BPM文件。
我在此分享BPM文件沒有介紹，我很常用的抓資料方式，兩行就搞定。
在此要留意，SQL註冊器的Select 欄位數要為兩個，前面放表面值 後面放實際值。
以此範例為例。

通常載入資料到下拉選項的語法會寫在Form Open() 表單開啟時。
但這會遇到一個狀況，當選項有A，B，C三種資料時，第一關卡選B，
執行到下一關卡時，系統執行Form Open又會重新再載入一次資料
這時選項B的紀錄已被刷掉。這是我起初開發表單時常遇到的狀況。
所以請大家務必在Form Open時，先載入下拉選項的資料，再加入
以下語法，讓下拉選項的隱藏值定住選項值。
補充另一種做法，將SQL語法寫在FORM 裡。
結論:
使用 FormUtil.appendOptionBySqlId  載入SQL註冊器的選項值，或FormUtil.appendOption載入SQL語法
使用 DWRUtil.setValue  鎖定下拉式選項值。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192065,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,10,[X]用CodeIgniter的30天-一切都是幻覺，越欠越多,qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1513612051000000000,393,崩潰ＸＤＤ,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191895,Security,0,CEH之越挫越勇系列,14,[Day13]網路入侵-實作篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1513609836000000000,491,"就列幾個老師畫起來的工具先實作，不然章節太多好難擠 Q""Q
成功登錄後，取得彩虹表(Rainbow Table)

破解本機上的帳號 & 密碼





顯示帳號密碼 =3=+

利用 Hydra 暴力破解網站/遠端主機的登入密碼 //因為走投無路了，什麼都試試看 Q""Q

原廠教材放在公司，再補上嘿 =3=+","['Password Cracking Tools：Pwdump7', 'Password Cracking Tools：L0phtCrack', 'Tools to Create Rainbow Tables：RainbowCrack', 'Tools to Create Rainbow Tables：Winrtgen', 'Password Cracking Tools：Hydra', 'freeSSHd', 'NTFS Stream Detector Tools：ADS Spy', 'Spyware：General Spyware：Power Spy 2014', 'Spyware：General Spyware：Spytech SpyAgent', 'Steganography Tools：Image Steganography Tools：OpenStego', 'Steganography Tools：Image Steganography Tools：QuickStego', 'Steganography Tools：Whitespace Steganography Tools：Snow', 'Tools for Remotely Executing Applications：RemoteExec', '其他工具']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192030,ModernWeb,0,ngrx/store4學習筆記系列,2,[2]ngrx/store用到的Observable,jerryhsieh01,https://ithelp.ithome.com.tw/users/20103574/ironman,1513608245000000000,362,"如果您寫 Angular, 那您一定對 Observable 不陌生, 當您對後端做 GET, POST, PUT, DELETE 要求時所使用的 HttpClient 就是 Observable. 因為整個 ReactiveX 非常龐大, 甚至包含了其他程式語言, 這裡我們只簡單的介紹針對 Javascript RxJS 而且在 ngrx/store 常用到的基本定義以及運算子, 完整的 RxJs 請參考 RxJS API
Observable 簡單來說就是資料流, 至於如何產生 Observable 呢? 一般而言有幾種情況
有幾個比較重要的基本定義
用一個例子來說明
codepen
還是覺得很神奇？那我們自己來打造一個簡單的 Observable 好了
codepen
輸出的結果會是

最後談一下 Subject, 因為 ngrx/store 裡的 store 跟 dispatcher 都是 Subject
Subject 是 Observable 跟 Observer 的延伸, 也就是同時具有 Observable 跟 Observer 的特徵, 他可以被 Subscriber subscribe 也同時 subscribe 到其他的 Observable. 我們可以當它是代理人, 舉個例子
codepen
有了 Observable 的基本認識, 接下來我們來談一些運算子 Operators",['Observable'],"['產生 Observable', 'Data Provider, Observable, Subscriber 跟 Observer', 'Subject']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192049,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,15,"[Day15]ReduxDevTool,debugredux的好工具",dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1513607808000000000,359,"你需要redux dev tool, 因為這個工具會幫助你debug. 他會追蹤你的state跟Action. 你需要先去 Google Chrome extension  安裝這個套件. 連結
簡單的步驟完成了, 我們現在需要在我們的 react app 設定好, 所以我們在開發模式才可以看到我們的dev tool, 然後在production 模式看不到.
這是我設定redux dev tool, 因為我的專案有用middleware(redux-promise). 所以我需要改變一下設定. github
最後你只要在你的chrome 打開你的dev tool, 然後觸發action就可以在dev tool 看到了. 有這個工具之後如果你的app 有問題我們就可以知道問題發生在那邊.



",,"['背景', '設定', '如何使用', '參考文件']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192055,Security,1,IT安全稽核系列,15,4.4~4.6有關權限的討論。(題目詳見內文),wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1513607578000000000,383,"冗長的開會，真的會讓人的腦袋鈍化掉，我很討厭開會，但又不能不開，我們總經理每次說，開會的目的，不只是討論問題，另外就是讓各部門的人可以宣洩情緒，有事攤開來說。
我心裡總是OS，大家如果對你最不滿，難道也能攤開來說嗎？
今天發文已經過一半了，今天就一次討論三個主題，只是，只有一個重點，就像開會一樣，冗長的原因，常常把一個問題，拆成十個部門，然後，重複十次一樣…..
以下我們根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，繼續4.4~4.6項之探討。
四、資訊安全組織　（資訊安全組織、人事及資訊單位）
4.4是否依一般使用者、系統管理者、系統擁有者等不同職務分別訂定其安全責任？
4.5是否訂定規範員工的資訊安全作業程序與權責(含經管使用設備及作業須知)？
4.6是否訂定各項資訊設備的安全作業程序及授權處理層級？
說明：此項說明只有一個重點：1.職務分級，設定核決權限。
在很多決策上，一般有規模的公司，都會依照資金動用的金額大小，來分配權限，當金額大到一個程度，就要由董事會來決定是否動用資金；反之，當金額較小的情況下，就由部門副總決定。這種就是核決權限，正常的公司都會設有核決權限表，以便區分權與責，避免出事的時候，公司找替死鬼代替。
用到資訊管理方面，我想這也不用解釋太多，網管也一樣會依各部門分出不同權限，這在一般的Windows系統控制台裡的使用者帳戶都看得到，如下圖所示，這也是很基本的網管的方法之一，設定核決權限之後，很基本的資訊安全就有了，只是，組織裡的員工，常常會打電話問資訊人員，為什麼這個不能打開？那個也不能打開？

因為一般的員工也不知道，到底網管開了多少權限給一般員工使用，而系統管理者也不會去主動告知，你的電腦到底權限開了哪些給你，只有在面對某些特定狀況之下，使用者不能使用時，才會向網管求救(or抱怨)，可是，資訊人或資安人員，有其專用的語言，不見得每個員工都聽得懂到底資訊人員在說甚麼東西，於是，有些爭執就開始產生了。
我講一實例，台灣原來是用一般公認會計準則GAAP，後來改用國際財務會計準則IFRS，在導入的過程，資訊人員與會計人員，花了四年時間，在系統上一直無法有效討論出結果，主要原因，就在於各有各的專業領域所使用的語言，一方講的天花亂墜，一方還是照著自己的意思去做。不停的修改，這種循環就不停的下去，然後不知不覺得過了四年。
當然，所謂核決權限這種東西，實則上，在一般公司很少會為了權限而爭執，但問題仍然存在，資訊人員普遍是沉默的一方，使用者通常會比較強勢，我不否認這種互動模式，因為這種模式的存在，基本上就是一種平衡。
我比較少聽到資訊人員跟其他部門為了系統、權限產生爭執(或許有，有的人歡迎在底下留言，我對這方面的經驗較少，也想多了解一些經驗談)，主要是因為這不涉及到利益，這也是我對於核決權限的結論。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192051,自我挑戰組,0,網頁學習日誌系列,15,AJAX:基礎觀念,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1513606284000000000,418,"逛購物或社群網站通常要註冊帳號，一定會有檢測這個帳號名稱是否有使用過，如果沒有才讓你註冊,而且通常是你輸入帳號，立刻就能顯示是否有人使用該帳號，而不用送出資料才能確定帳號，效率來說提升很大，簡單來說：
AJAX不用重新整理網頁，就能直接跟後端資料庫撈取資料
註冊帳號：即時確認該帳號是否有人使用

搜尋協助：輸入搜尋文字時，下方自動出現雷同的關鍵字。

庫存顯示：

當在網頁呼叫這段語法時，可以在console看到會有下列資訊，可以自己製作json檔案，上傳到遠端練習。
網址：https://ruienyuski.github.io/git_test/data.json
onload: 從遠端撈資料後，就可觸發event事件

readyState：0
產生一個XMLHttpResquest,但是還沒有連結你要撈的資料
連結方式：

readyState：1
你用了open(),但沒有把資料傳送過去

readyState：4
撈到資料，數據已經完全接收

readyState：2
偵測到你有用send()
readyState：3
讀取資料中loading…",,['連結遠端伺服器方式：'],"['常見使用情況如下：', '利用瀏覽器跟伺服器要資料時，可透過XMLHttpRequest()：', 'readyState：從遠端撈取資料的狀態，有5個狀態']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192052,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,14,(Day14)玩一下文字雲,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1513605815000000000,393,"先準備資料先
segA:直接seqment(注意：都是table 注意轉型別)
segB_top50:僅取斷詞結果一個字以上的詞的前五十個詞
segC_top50:同上 方式小小不同


min.freq 將決定文字多寡
scale 調整畫面可容納字數的多寡 字越小 可容納就越多
前述參數請自行調整
出現Error in plot.new() : figure margins too large 請重置margins par(mar=c(1,1,1,1))

給背景色 外型指定

文字尺寸儘量小比較容易表現

兩個字也沒問題
",,['文字雲'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192047,ModernWeb,0,認識Chrome開發者工具系列,15,應用面版,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1513603416000000000,356,"在 HTML5 的標準裡面，加入了很多以前所沒有的前端儲存方式像是 Local and session storage, IndexedDB 等等。而 Chrome 開發者工具為了方便開發者可以存取及編輯這些儲存方式，提供了一個應用面版 (Application panel)，今天我們要來介紹如果透過這個面版來檢查、修改及刪除這些儲存方式，但我們會主要針對 Local storage 及 cookies，其他的幾個儲存方式我沒有使用過，如果你想更深入的了解，你可以在官方文件裡找到使用說明。
應用面版是兩欄式的介面，左邊有所有可選用的項目，點選後，右邊的欄位就會顯現選項內容。

圖 1: 應用面版的介面
你可以檢視你的網頁所使用的 Local storage 資訊，打開左邊側欄的 Local Storage，在這邊會有可用的網域列表，選擇你所想要查看的網域。Local storage 所儲存的資訊是用鍵及值 (key-value pairs) 來做存放。你可以在列表中看到所有儲存在 Local storage 的資料，你也可以透過上方的 Filter 來搜尋特定的鍵及值。
編輯鍵及值：在你想要編輯的鍵或值用滑鼠左鍵點兩下或是用鍵盤的 enter 鍵來進入編輯模式，在編輯後用滑鼠在編輯區域外點一下或是再按一次 enter 鍵就可以完成編輯。
刪除鍵及值：選定要刪除的資料後，使用鍵盤的 delete 鍵或是工具列上的刪除按鈕來刪除這一筆資料。如果你想清除所有 Local storage 裡的資料的話，可以使用上方工具列的清除按鈕來清除所有資料。
新增一筆資料：在資料列表的最下方空白處用滑鼠左鍵連點兩下就可以新增一筆新的資料

圖 2: 檢視及編輯 Local storage
上述的新增、刪除、尋找及編輯的功能其實也都可以透過 JavaScript 來完成，如果你打開控制台抽屜 (Console drawer)，直接使用 HTML API 來操作，這些操作的結果都會立即更新到 Local storage 列表中
從左邊的側欄打開 Cookies 後，它一樣會有網域列表，選取你想要檢視的網域後，就會看到在這個網域中所有有用到的 cookies 列表。這個列表裡有幾個項目：
cookie 的編輯、刪除、新增方式都與上面提到的 Local storage 相同，所以在這邊我們就不再做說明。

圖 3: 檢視及編輯 cookies
如果你想一次清除所有前端所使用到的儲存資料及快取，你可以透過 Clear storage 來完成。在選取 Clear storage 後，在列表中選取你想清除的項目，然後使用 Clear site data 來清除所有的儲存資料。

圖 4: 在 Clear storage 選項中清除所有儲存及快取
你可以透過左邊側欄的 Frames 來查看這個網頁或是應用程式所有的資源，像是 JavaScript, 圖片或甚至字型檔案，都可以在這邊做檢視。以前開發者工具功能比較陽春的時候，我會常常來這裡找一些檔案，不過現在就很少用到這個功能了。

圖 5: 使用查看資源來尋找頁面所用到的圖片檔
今天我們很快的一起看過應用面版，其實這個面版的主要功能就是讓你來檢視及修改你的應用程式有用到的一些前端儲存方式。如果你有用到這些儲存方式，透過這個面版就可以很快速的來除錯及知道你儲存資料的狀態。雖然有幾個不同的儲存方式我們沒有講到，但是其實操作都大同小異，像是 Session storage 的操作方式就跟 Local storage 完全相同。在講完這個面版後，接下來我們要花幾天的時間來講原始碼面版 (Sources panel)，這個面版可以大大的提升我們除錯的效率，讓我們快速的找到問題並修正。好，廢話不多說，我們明天見啦。",,"['應用面版介面簡介', '檢視及編輯 Local storage', '檢視及編輯 cookies', '清除所有儲存及快取', '查看資源', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192044,自我挑戰組,0,Verilog從放棄到有趣系列,7,[Day7]表示式以及運算元,Sheng,https://ithelp.ithome.com.tw/users/20107543/ironman,1513601099000000000,405,"今天要來介紹verilog的表示式以及運算元，verilog的表示式其實剛接觸時蠻令人霧煞煞的，所以想先來介紹一些表示式的用法，先來看一行給值的方法．
wire[31:0] temp;
assign temp = 32’d100;
這邊我是先宣告了一個32-bit型態為wire的變數
指定一個32-bit且為十進制值為100給temp
所以32’d100，32代表32bit，d代表十進制 100代表要給的值
所以一樣給100的值，也可以寫成以下形式
assign temp = 32’h64;(32bit 16進制)
assign temp = 32’h00000064;(前面的0可有可無)
assign temp = 32’b0000_0000_0000_0000_0000_0000_0110_0100;
上面都是表示要給十進制為一百的值給temp
給值的時候也能指定給特定的位置，像是：
assign temp[3:0] = 4’d7;
assign temp[7:4] = 4’b1010;
上面這行的意思是指定第3到第0個bit的值為7，第7到4個bit為10，也可以這樣寫：
assign temp = {4’b1010,4’d7}
用一個大括弧括起來，所表達的意思是一樣的，就看大家覺得哪個方便．
接下來要介紹運算子，一個一個講有點太冗長，所以直接整理一個表格給大家：

這邊的&跟&&可能比較會搞混，&比較像是and邏輯閘，可能把某幾個值用and閘and起來，&&比較屬於用在判斷條件上，像是if(c1 && c2)代表c1跟c2條件都成立時所要做的事情，某種程度上&也可以代替&&，所以像|跟||也是一樣的道理。

上面這表格是各個運算子的優先權整理，如果要用多個運算子的話要小心優先權大小並用多個括弧去搭配需要的電路。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190791,ModernWeb,2,30天走訪ProgressiveWebApps(PWAs)系列,1,Day1-WhatandWhyProgressiveWebApps(PWAs)?,DK.Harry,https://ithelp.ithome.com.tw/users/20103808/ironman,1513599966000000000,532,"Progressively enhance web apps to look and feel like native apps.
PWAs透過漸進的方式，優化網站並達到原生App的優點，講白一點就是使用者的環境只要有支援，就能享受更好的使用者體驗，環境不支援沒關係，就只是繼續使用原本網站該有的模樣。
Progressive(漸進性)，當你的網站符合要求，能將網站漸進式的昇華到與原生App匹敵的效果，但如果環境不支援，也可以向下降級到原本網站的功能。
使得Web更能與App匹敵的特性都是以漸進的方式增強的，在比傳統網頁應用更好的同時也保證了降級兼容。
像Service Worker(PWAs需要使用到的技術)目前的支援度上，iOS的Safari就沒有支援，但Chrome for Android就有，雖然iOS沒有支援，但並不影響原本在手機上操作的體驗性。

資料來源：https://caniuse.com/
具備載入(Loading)快速，而且提供**離線瀏覽(Offline)**的功能

圖片來源： https://developers.google.com/web/progressive-web-apps/
而實現離線功能的主要功臣就是Service Worker，是一個在Client端跑的背景程式，能達成資料的快取、推播和離線瀏覽等等。
快速回應使用者的需求(UX體驗好)

圖片來源： https://developers.google.com/web/progressive-web-apps/
現代的使用者，如果網站載入超過3秒就會有53%的人選擇離開，
因此網頁的效能，變成了前端一個很重要的課題。

圖片來源： https://developers.google.com/web/progressive-web-apps/
操作起來感覺像是在使用原生(Native)的Mobile App，擁有可安裝性
，簡而言之就是能在手機桌面，新增一個網頁的快速連結(url)的icon，
還有推播功能來吸引使用者回顧網站，擁有像原生App一樣的特色。
官方點出了四個使用PWAs的理由。
這時候網頁開發者需要會面臨地挑戰，一下子從網頁開發轉到了SEO、UX(使用者體驗)、效能調整(檔案壓縮)和RWD(Responsive Web Design)等等，以使用者體驗為導向的開發方式，也因為這樣才陸續地出現了很多的Framework(React、Vue、Angular5)讓開發者以更系統化的方式滿足使用者體驗。
但有一點很重要的事項必須提醒，就算不依賴PWA，也能達到快速且使用者體驗很好的網站，只要遵守網站效能的規定，就算網站不是以新的Framework、Google AMP或PWAs等方式實現，也可以提升網站的體驗感
1. 因為潮
既然PWAs那麼好，那是否一定就要學PWAs，其實不然，在決定導入技術之前，有許多要考量的，如下：",['關於漸進式網頁(PWAs)'],,"['What are Progressive Web Apps(PWAs)?', 'Why PWA?', '說了那麼多，那為什麼還需要PWA呢?', '是否該使用PWAs']","['Progressive 的涵義', '主要的三個特色']","['Reliable', 'Fast', 'Engaging']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192039,Security,0,資安的學習心得及分享系列,15,DAY15Wireshark,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1513597098000000000,401,"
今天來講Wireshark 的運用，簡單來說Wireshark是一種幫我們看網路封包的工具。

當開啟Wireshark時，我們會看到很多的封包在跑動，Wireshark這軟體也可以讓我們知道當下的網路流量是否正常，是否遭受到攻擊等。主要目的就是讓我們可以監測網路的流量，上圖由於我們看的是乙太網路，所以封包的流量會比較多。

但如果要進一步的了解內容，我們可以點選Follow(流量)這功能，它可以讓我們開啟下圖這個視窗。例如:紅色是我方送出的DATA，藍色是傳回方的DATA。但是通常這個協定都是加密過的，主要是避免有心人士去破解。

這類的協議就像我們常常聽到別人說的『Protocol』，但Protocol種類也有很種，像是telnet就是網路上常用於應用層協議上的其中一種，顯示方式是透過虛擬終端機的方式來互動，在虛擬機上是提供雙向、以文字字串為主的互動。

(待續)..",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191616,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,13,Pandas(Python中的Excel)Day3-DataFrame的索引與更新,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1513595647000000000,409,"提醒: 本篇文章的code在這裡: Titanic
pandas好用的原因其中之一就是其索引的功能非常強大，相比於sql語法要敲一長串select <columns> from <table> where <column> == <value>，pandas的語法會比較像是df.loc[df['<column>']==<value>, <columns_list>]，而且甚至索引出來就可以直接更改值，以下詳細示範。





探究其內部運作邏輯，上面所送入的indices_list可以是一個與df等長的、只含有True與False的list，它只會把True的欄位show出來，以下詳細示範。

接著我們可以看到，我們剛剛所設的條件，是不是與這個格式相符。這邊用了一個滿好用的計數器Counter，想要看一個list裡面甚麼樣的元素出現了幾次，便可以使用這個工具，其import方式為from collections import Counter，記得collections要加上s，Counter的C要記得大寫。

其更新其實跟索引的使用方法沒差太遠，只是更新一個值或是更新多個值的方法有些不同而已。其實，也就是把值指派給所以出來的欄位而已。

","['DataFrame的索引', 'DataFrame的更新']","['特定column或是row', '多個columns或是rows', 'column與row同時索引']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192038,SoftwareDevelopment,0,認識scala系列,15,Scaladay15(traits&abstractclass),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1513595034000000000,363,"抽象類別的 super :
trait 的 super 由於是動態的所以 with 的順序不同會影響 super 最後的結果，所以又稱 stackable modifications (堆疊修飾) :
stackable modifications 會從最右邊開始，例如下面 coutner1 這個物件，
Filter1 的 super 會呼叫 Counter1 的 method ，Counter1 的 super 會呼叫 MyCounter 的 method :
counter2 這個物件，Counter1 的 super 會呼叫 Filter1 的 method ，Filter1 的 super 會呼叫 MyCounter 的 method :",,,"['traits VS abstract class', '總結']","['抽象類別只能被單一繼承，trait 可以被單一繼承又可以 with 多個', '抽象類別有建構子，trait 沒有', '抽象類別的 super VS trait 的 super']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192035,DataTechnology,1,你都在公司都在幹啥R？R語言資料分析經驗分享系列,1,【01】前言、先備技能需求以及環境介紹,jason9075,https://ithelp.ithome.com.tw/users/20107299/ironman,1513594771000000000,389,"前言
嗨，這是我在iThome 的第一篇文章，在開始介紹之前，我先簡短介紹一下這篇系列文的方向，此系列的文章是我在公司做一些數據分析的經驗為主，因此不會有太多介紹R 的地方，當然我自認我目前還不算是個資深的資料科學家，也就是我的分析程式碼也許還有很多可以優化的地方，就還請大家多多指教囉！
技能需求
你已經架設好Ｒ語言的開發環境，而且了解相關資料結構（vector, list, data frame...）
你會操作基礎git ，文章中我會放上許多不同commit 方便讀者將專案clone 下來
github連結
開發環境 與 專案架構
開發環境為macOS High Sierra 10.13.1
Ｒ的版本為3.4.0 ""You Stupid Darkness""
day1 原始碼
專案主資料夾主要會放Rscript檔，downloaded 資料夾則是從網路上爬下來的資料夾，input 資料夾是你欲分析的資料夾，output 資料夾是當你分析結束後，將結果轉成csv 檔的資料夾。
而input 資料夾中有兩個我自己做的測資檔，user.csv 是模擬我從資料庫裡匯出已註冊會員的資料，ID 是資料庫中的主Key, ACCOUNT是該會員帳號, CREATETIME 是註冊成會員的時間, MOBILE 是該會員手機

另一份orders.csv 則是使用者購買的訂單記錄，ID是資料庫的主Key, NAME是購買的商品名稱，商品名稱的括號是某廠牌，（沒錯...這邊我用亂數當產牌名稱）, AMOUNT是購買數量, PRICE 是商品單價, PAYMENTTYPE 是付款方式, BUYERID 是買方會員ID, CREATETIME 是購買時間。

希望以上的介紹能讓大家更了解本系列方向。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192036,DevOps,0,用30天來介紹和使用Docker系列,15,Day15：實作簡單的service程式打包成DockerImage(一),yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1513594712000000000,403,"昨天和前天是介紹如何使用 Docker 提供的 Restful API，操作啟動 Docker Container，這樣可以透過程式方便建立測試環境，對撰寫測試程式建構環境方面有幫助。
今天要介紹的部份是在開發完程式之後會 Build 成一個檔案， 然後把這個程式包在 Docker Image 內，這樣使用者要使用此程式時，也就可以不用安裝或佈署此檔案，只要執行 docker run 指令就可以把程式執行起來。
今天就來寫個簡單的 Akka HTTP 程式，並且透過使用 SBT Build Tool 來打包 Docker Image。
在執行 sbt build 的指令時就把撰寫的 Akka Http 程式打包到成 Docker Image，之後再使用 docker run 指令把 Container 啟動起來。
一. 我把此程式放在 GitHub 上，如果有興趣的話可以直接 clone 到 local 測試，指令如下：
二. Akka HTTP 程式和說明如下：
以上的程式主要是啟動一個 Akka HTTP Web Server，並且程式裡有實作一個方法，只要使用者輸入 /hello 的 URL 就會印出 Say hello to Akka 字串。
設定 SBT 的方式如下：
加入 sbt-docker 的 plugin
這裡主要的重點在 dockerfile in docker 這一段，主要是把程式使用的第三方 Jar 檔和 Project 的 Jar，複製進去 Docker Image 裡面，最後在用 Docker 的 entryPoint 設定 Docker run 裡執行啟動此 Project 的 Jar 檔。
四. 把程式打包成 Docker Image 的指令如下
輸入以上的指令就可以把程式打包成 Docker 的 Image，這裡要注意執行這個指令的使用者是否有執行 docker 指令的權限。
五. 使用 docker run 指令測試
執行結果如下

今天已經介紹了要如何把 Build 完成的 Jar，打包到 Docker Image 內，可以方便使用者使用，明天繼續介紹要如何的把此 Docker Image push 到 Docker Hub 上。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191950,ModernWeb,0,寫給朋友的PHP從0到100實戰教程系列,1,Day1.PHP教學:寫程式真的不難，從零開始也可以,falconwei,https://ithelp.ithome.com.tw/users/20107394/ironman,1513594106000000000,479,"Why
我真心推薦，因為這個語言學習門檻最低，非常適合新手入門，
不會痛苦的卡在深奧的隱藏架構上，也不用需要先理解複雜的除錯工具。
只要了解基本的邏輯，就能自己蓋出一個網站，真的非常有成就感。
全世界上使用率最高的網頁開發語言就是PHP，
超過兩億個網站都是PHP為基底，甚至連臉書也是，
學會了就不怕沒案子沒網站可以賺錢，想開發什麼應用都做得到。
簡單來說，PHP 就是學習飛快。
How
好，怎麼開始學呢？一開始看英文程式碼就跟天書一樣看不懂
我會把它轉成中文跟用一些遊戲來解釋比較簡單，其實概念不難。
給自己一點耐心，遇到不懂的就去 Google 用關鍵字找答案！
就像小智遇到陌生的神奇寶貝，只要查一下圖鑑就能應對了。

What
舉個例子：
假設你現在正在玩神奇寶貝寶可夢，小智跟皮卡丘遭遇到一隻野外的傑尼龜。
我們簡單的用中文來描述發生的事。


蛤？看你一臉問號的說很難看懂。
那我幫你排版一下變成這樣是不是好看很多：
這樣就容易看懂多了。
程式也是一樣的概念，硬要一行寫完也是可以，只是真的很醜很難看懂。
讓第二個人容易看懂，不吃力是一件很重要的事情。
另外，電腦跟我們一樣就是一行一行看懂指令，一行行動作。
上一行做的事會影響到下一行的狀態。
前一行是因，接著是果，因果相連。
有點像數學的算式，但是我們依照需求可以做很多變化。
那我換英文 PHP 的語法來舉例囉：
上面的簡單印出文字指令，可以了解到幾個觀念：
是不是覺得很簡單，撿幾個觀念就可以自稱會寫PHP了

對了，我的語法裡面有藏兩個錯誤，有人可以幫忙抓到這些bug嗎？
抓到就快去留言！順便告訴我你有沒有看懂，再分享給想一起學程式的朋友！
補一個名詞解釋：bug 念起來類似『霸格』其實就是 程式的臭蟲，可以泛指語法或邏輯錯誤。
在執行過程中，會導致結果不如預期，要找出來錯誤的點進行修正。
想真的執行 PHP 語法的話，到這個網址可以任意修改語法，不用安裝環境就能無痛玩 PHP 唷
http://sandbox.onlinephpfunctions.com/code/b937779a7950c728c0c2538cfa0aa375a6817268
找看看差異，再留言告訴大家差在哪裡，為什麼要有這個差異？
如果有人問問題，明天我會挑一個最棒的問題來回答:D
今天到這裡好了，被人找去用 PHP 串接國外金流模組了，可能會有人想問是哪一家： https://www.nmi.com/
接下來會慢慢深入，畢竟是從 0 開始，會由淺入深用同樣好理解的方式，直到教你架出網站！","['為什麼我們要選 PHP 當作第一個程式語言來學呢？', '怎麼看懂程式碼的語法']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192029,ModernWeb,0,學會Elm寫前端系列,1,Elm的學習資源,poligen,https://ithelp.ithome.com.tw/users/20107797/ironman,1513593714000000000,365,"同步發表在個人blog
看過很多Elm 的學習資源，不過因為中文資料甚少（根本就沒有吧），會想說來為Elm推廣一下。目前台灣只有purescript的社團（也是個類Haskell的前端語言），都有其優缺點，如果學了Elm或是PureScript之後要互換，都是可行的。但Elm我本身也是初學者，只是想把這一陣子的學習記錄下來，如果有錯誤或不清楚的地方，再請大家指教和學習了。
我覺得介紹寫太多，雖然身為推廣文，應該要多寫一點，不過我覺得以下資料其實都說得很清楚：
如果看完這一些，真的想要學Elm，再來仔仔細細地開始學吧。
如果你想要找找看有什麼Elm的套件可以用，社群裡有人做了這個：ELM DIRECTORY
其實我覺得學語言最重要的就是去他的官網好好把Doc看一看，雖然有些語言的Doc實在是寫得讓人看不懂……。不過Elm的值得一讀，但如果不想讀英文的沒關係，接下來我打算把Doc上的一些介紹、使用、安裝，記錄下來，不打算做100%的直譯，不過可以的話，Elm 的官方文件的介紹寫得很容易懂。
利益聲明：以上podcast都是我自己使用過的、覺得不錯的。","['為什麼學Elm', 'Elm 的學習資源', '官網']","['Podcast', 'videocast', '免費的video course', 'Elm 的套件搜尋', 'Elm 的專案', '書']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192033,自我挑戰組,0,資訊技術解戈迪安繩結系列,11,IT｜作業系統｜Linux｜CentOS｜CentOS7安裝於VirtualBox,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1513592928000000000,368,"安裝 CentOS
首先需要下載 CentOS，請按以下連結下載即可。若有 Docker 安裝需求，由於只支援 CentOS 6.5 或以上，最後安裝 CentOS 7.x 以上的版本。
CentOS 下載：https://www.centos.org/download/
VirtualBox 虛擬化軟體下載：https://www.virtualbox.org/wiki/Downloads
安裝好 VirtualBox 後，執行左上方「[新增」選單

配置 Guest OS 記憶體，建議配置不要少於 3GB，惟須考量 Host OS 實體記憶體大小。

按下「繼續」，這步是要求大家設定虛擬硬碟的類型。為節省空間選擇「立即建立虛擬硬碟」，再按「建立」。

選擇虛擬影像檔格式，建議採用 VirtualBox 專屬檔案類型 VDI，便於日後空間不足時可動態擴充。

接著選「動態配置」便可。

然後是分派 Size，按自己實際需要進行設定即可，然後再按下「建立」便完成 VirtualBox Guest OS 的設定了。

此時會見到這畫面。在這裡請於左方剛建立的名稱按下滑鼠右鍵，然後選「設定值」即可。

請選上方的「存放裝置」選單，然後選「空」再於右方的光碟圖示按一下，並再選擇「選擇虛擬光碟檔案」，然後選取剛下載回來的 CentOS ISO 檔案後再按下方「完成」即可。

[進入 CentOS 安裝]
然後請按上方的 「啟動」按鍵，接著會彈出一個黑色畫面，此時代表終於開始安裝 Linux 了。
第一個畫面請選「Test this media & Install CentOS 7」。以預設的安裝設定完成安裝，假如大家對 Linux 熟悉話，請自行以常用方法解決 Linux 安裝部份。

請等一會，此時會出現這畫面，這裡就是開始安裝 CentOS 的畫面，請先選擇安裝過程採用的語言後再按「Continue」。

接著按「Installation Destination」，進行初步設定後按下「Begin Installation」。

進入安裝過程。此時大家應會見到類似畫面，請按上方並設定好帳户以及密碼。

完成安裝後，請按右下方的「Reboot」即可。

一切順利的話，大家便會來到 Linux 的登入畫面，在這裡輸入剛剛所建立的帳户及密碼。

大功告成！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192034,ModernWeb,0,邁向JavaScript勇者之路系列,15,JavaScript建構式製作物件樣板,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1513592344000000000,419,"了解原型繼承後，可以開始思考這個概念可以用在哪個地方，其中一個就是建構式。我們先不介紹建構式有什麼優點，先了解一下該怎麼透過 JavaScript 來寫建構式，然後再用原型的概念來介紹他的特別之處。
小明到手機行決定挑選一支手機，手機款式很多但基本上都有相同的功能，僅有少部分的規格上有差異，過去那種資料連連看的方式一定會把資料搞得一團亂 (參考先前的 Javascript 物件 ""傳參考"" 特性)，於是他想到一個新方法，先寫好一個樣板，有需要的格式直接從該樣板取用即可。
手機的規格樣板：
如果使用一般的物件製作手機規格的樣板，就會出現以下的問題，當物件賦予到另一個物件上時，兩者其實是使用相同的資料，當修改後者時前者也會跟著修改 (JavaScript 傳參考的特性)。
雖然先前有介紹到如何將值一一的取出來，但此方法也會完全與樣板斷開關聯性。
使用 JavaScript 建構式寫法，可以先建立一個範本，接下來新增的物件都會依據此範本作為延伸。

JavaScript 建構式中，我們會使用 function 來建立物件樣板 (只能使用 function，亦不能使用箭頭函式)。
這個結構與前方所使用的結構接近，不同的是：
使用建構式時，盡可能使用大寫開頭，讓合作的朋友也能知道他準備作為建構式之用。
而套用樣板會使用 new 這個方法，並且可以透過傳入參數的方法來改變預設值，接下來會出現兩台手機物件，包含相同的樣板套用上不同的值，但兩者並沒有任何關係。
兩者也可以獨立運行自己的方法：
我們這裡可以得知是使用相同樣板，但產生兩者毫無關係的物件，並且可以針對其中一個物件新增修改方法。
到這裡我們可以得知這種建構式可以透過 ""同一個物件樣板""，不斷地產生 ""不同""的物件，每個物件彼此都是獨立的(不會有參考的問題)，只不過共用相同的原型。

其中一支手機可以看到 __proto__ 是 PhoneTemplate，這就好像是使用同一個模具產生兩個獨立的物件，我們也可以更新這個模具讓產生的物件有更多的功能，接下來我們會再介紹 原型繼承與記憶體 的關係。",,"['一般物件寫法的問題', '建構式']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192032,ModernWeb,0,用範例理解Vue.js系列,8,用範例理解Vue.js#8：WatchvsComputed,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1513591840000000000,374,"
雖然在大多數情況下，Computed 更合適，但有時仍需要使用 Watch。
附上 fiddle (https://jsfiddle.net/hunterliu/s3rg5s5c/)
使用 computed 或 watch 皆可得到同樣的效果，但 computed 會是一個更好的選擇 - 更精簡易懂。
當你需要響應更改的數據執行非同步或複雜的計算時，Watch 就非常有用。
下面的範例使用 v-model 綁定 input 的值為 question，當使用者輸入問題時會執行 watch 的 question 函式，並執行 getAnswer，再送出 AJAX 去取得問題的答案。
附上 fiddle (https://jsfiddle.net/hunterliu/2tc0dd3o/1/)
注意：
getAnswer 函式中使用了 lodash.js 的 debounce 函式，並設定在使用者輸入停止 500 毫秒後，會先確認這個問題包含了'?'，接著才發送 AJAX 去取得問題的答案，目的是為了避免使用者在輸入完問題之前，就發送不必要的 Request。
附上 fiddle (https://jsfiddle.net/hunterliu/gtpyLcc9/)",,"['Watch', '參考資料']","['Watch vs Computed', 'Watch 基礎範例', 'vm.$watch 與 immediate']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192028,AI&MachineLearning,2,以100張圖理解NeuralNetwork--觀念與實踐系列,8,Day08：CNN模型設計,IcodesoIam.,https://ithelp.ithome.com.tw/users/20001976/ironman,1513590016000000000,375,"前兩篇我們介紹了CNN的概念及程式撰寫方式，有幾點要再強調：
以上就是各種隱藏層堆疊的原則，之後再觀摩幾個經典的模型，就比較清楚隱藏層的安排順序與原則。
除了全連接階層(Dense)外，CNN隱藏層分為下列幾類：
下面我們就詳細說明各層的參數。
Keras 提供的卷積層又分為幾個小類：
重要的參數說明如下：
其他參數用法與一般的 Neural Network 相同，請看 『Day 05：模型參數說明』介紹。
池化層(Pooling Layer) 又分為幾個小類：
重要的參數說明如下：
經過以上介紹，你應該會有很多疑問，究竟CNN要設幾層? Filters要設多少? 卷積核要設多大? strides要設多大? 根據我目前找到的答案是，『多加實驗，找到最佳值』，如果是真的，難怪連大師都說『Neural Network』的結果是很難對一般人解釋清楚的。我喜歡前百度首席科学家、史丹佛大學副教授吳恩達下面這段評論:
Deep Learning has also been overhyped. Because neural networks are very technical and hard to explain, many of us used to explain it by drawing an analogy to the human brain. But we have pretty much no idea how the biological brain works.
資料來源：What does Andrew Ng think about Deep Learning?
下一次我們就看看一些很成功的CNN模型，觀摩他們的模型設計，並且研究如何使用他們的模型，來實作各種應用。也作一些簡單的實驗，與時事作結合，實驗『太陽花看成香蕉』的機率有多少呢?",,"['前言', 'CNN 隱藏層', '卷積層(Convolution Layer)參數', '池化層(Pooling Layer)參數', '結語']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191944,ModernWeb,1,Vue怎麼寫測試系列,1,Day1.當主管問你：他媽的你為什麼想寫測試？,Mos,https://ithelp.ithome.com.tw/users/20104476/ironman,1513589875000000000,476,"你好，我是 鐵人小生，偶然客串 30 天你的人生。
（小生梗好像被用過了，我道歉）
針對主管的問題
很簡單，跟我這樣做
但主管還在你眼前，如果這題不好好回的話，就可以當自己的老闆了。
所以請你用力的拍桌面，把臉貼到主管的臉上，鼻尖頂著他的鼻尖，嘴巴微張輕吐著熱氣，深情的說
：為了我..呵呵，你個小淘氣。
如果你的主管是辣妹，我願意為你示範一遍。
當然你會說
：這樣解釋主管怎麼可能聽懂
那是當然的
重點不只是你心裡的答案，還有她心裏的答案啊！
好啦，事實上是工程師們不太指望非技術出生的主管能理解為什麼 butterknife、retrofit 這些知名專案要寫測試，還要理解什麼叫 Code Coverage？ 什麼是TDD? 而且什麼TDD還已經死了?
況且獲得主管的理解也不一定有用，他們還是會站在營運的角度為你的決策加上權重，讓更上層的決策者可以清楚你的決策在整個專案的地位，還要確保加上你的決策之後，能使公司繼續存活在當下的生態裡。
我會說
：為了規格 (Spec)
寫測試就像是給一份約定
就像是小學生在長桌中間的那條白線
就像是指考數學前說好不能打咖不能打手槍
就像是剛下班決定今晚隨便吃吃
老婆生氣地提醒你今天結婚紀念日
就像是，有太多的就像是
但約定不一定會把你變成更好的人
沒有打那槍，就遇不到現在的這群好朋友
沒有踰矩那條線，她不會在 15 年後重逢還記得你是誰
並成為你的老婆
我知道你在想什麼
冷靜！冷靜！
所以我說
：重點在你心裡的答案
現階段的測試被提升到了道德層次，成為了新的宗教信仰
然而我們都知道，宗教不一定會把你變成更好的人
喔對了，黃國昌的罷免同意票哪來的
..太敏感了嗎?
haha, 宗教不一定會把你變得更好，但好的原則會
我們在這 30 天會檢視哪些測試對 VueJS 是良好的
而哪些原則只會把你的 code 弄的更糟。
喔對了，如果想吃牛排，還剩兩天可以激怒老闆來參加自我挑戰組
我現在就寫我的第一個測試
good, 測試過了。","['給主管的答案', '給自己的答案']",['尼瑪，那我還要不要寫測試？'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192027,DevOps,0,Nightwatch101：使用Nightwatch實現End-to-EndTesting系列,8,Nightwatch101#8：指令Part2,cythilya,https://ithelp.ithome.com.tw/users/20092232/ironman,1513589538000000000,1551,"
前情提要-指令 Part 1。
指令分為兩種－Nightwatch 提供的指令與開發者撰寫的客製化指令，以下介紹 Nightwatch 所提供的指令。程式碼可以打在 test/e2e/testDemo.js 並執行 nightwatch ./test/e2e/testDemo.js 來跑跑看喔！
以下繼續 Part 2，來聊聊 Cookie、Window 和 Log 相關的指令。
本系列文章皆使用這個專案，可以拉下來玩玩；有什麼問題都可以提出 issue。
取得特定 cookie 的値，格式為 JSON。這裡使用 webdriver 的 cookie 協定指令。第一個參數是 cookie name，第二個參數是 callback（optional），回傳一個物件或 null。
打開露天首頁，取得名為 _ts_id 的 cookie。檢視名稱、資料型別是否為字串。

取得所有可得的 cookie，格式為一個陣列，裡面是 JSON。這裡使用 webdriver 的 cookie 協定指令。第一個 callback（optional），回傳 Array.<object>。
打開露天首頁，取得所有可得的 cookie，並檢視是否有 5 個項目。由於只拿到 3 個，就出錯了 ╮(╯_╰)╭

設定 cookie。這裡使用 webdriver 的 cookie 協定指令。第一個參數是 cookie 物件，第二個參數是 callback（optional）。

刪除指定 cookie，若指定的 cookie 不存在就不執行。第一個參數是 cookie 名稱，第二個參數是 callback（optional）。

刪除所有可取得的 cookie，類似上面的 deleteCookie。

設定目前 window 的位置，以距離螢幕右下角為基準。第一個參數是 offset x，第二個參數是 offset y，第三個參數是 callback。
如下範例，會看到 demo 網頁跑到距離螢幕右下角 100px 的地方。

設定目前所在視窗。第一個參數是 window 名稱，第二個參數是 callback。

關閉目前的視窗。這裡使用 webdriver 的 window 協定指令。
調整目前 window 的大小。第一個參數是寬度，第二個參數是高度，第三個參數是 callback。
如下範例，會看到 window 縮到 500px * 500px。
將目前 window 展開到最大。
有時候我們會檢視網頁上的某個元素是否可見，但當 window 不夠大勢必就「看不到」。所以在測試時就會控制視窗大小、展開至最大。
取得指定 DOM element 在頁面上的位置。這裡使用 webdriver 的 elementIdLocation 協定指令。第一個參數是使用 CSS 或 Xapth Selector 選定的元素，第二個參數是 callback（optional），回傳一個物件 { x: number, y: number }，表示距離左上角的 X 和 Y 座標。
下例預期 #userid 這個 DOM element 應該在距離頁面（不是視窗喔）左上角 200px 的位置，但實際上卻是 720px 與 105px。


取得指定 DOM element 在螢幕上的位置。這裡使用 webdriver 的 elementIdLocationInView 協定指令。第一個參數是使用 CSS 或 Xapth Selector 選定的元素，第二個參數是 callback（optional），回傳一個物件 { x: number, y: number }，表示距離左上角的 X 和 Y 座標。

檢視 log type 是否可用。

取得 selenium 的 log。

這在 debug 的時候滿好用的，參考這裡。

取得可用的 log types，回傳一個陣列。
",,"['getCookie', 'getCookies', 'setCookie', 'deleteCookie', 'deleteCookies', 'setWindowPosition', 'switchWindow', 'closeWindow', 'resizeWindow', 'maximizeWindow', 'getLocation', 'getLocationInView', 'isLogAvailable', 'getLog', 'getLogTypes']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191959,自我挑戰組,0,花式PHP系列,11,Array：Compact&Extract,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1513589511000000000,333,"在第一章提到的 Online PHP Functions網站，
因為安全性因素所以不提供執行這個函式。
這個函式可以在執行當下的空間，建立一個包含你指定的變數(以及它的值)的陣列。
比如像下面原本要用六行才能把所有參數打包成一個陣列的動作，
使用這個函式的話一行就能搞定了！
可以這樣做的原理是，compact的參數其實也吃陣列，該陣列參數包含所有你需要打包的變數的名稱。
而正好可以利用 explode 把所需變數寫在一個 string 裡面，
並轉換成包含變數名稱的陣列給compact使用。
參考自 M Spreij 的留言
這個函式剛好是相反的功能。
它可以幫你把關聯陣列中的 elements 按照其原本的鍵值對(key-value pair)形式放進當下的作用域。
有時候你也可能遇到這樣的狀況，
幸好這個函式可以透過預先定義的一些常數改變它的行為。
比如下面這段改寫自上面範例的程式碼：
$data　已經被宣告成一組包含 1 到 10 的序列，
但在使用帶有 EXTR_OVERWRITE 的 extract 之後，
原本的 $data 就會被來自 $response 的 data 覆蓋過去。
注意！其實在任何不指定第二個參數的時候，這個函式都會直接覆蓋已存在的同名變數！
當你指定的第二個參數是下列其中之一：
也就是在遇到有衝突的時候，第三個參數才有意義。
因為也許你打算讓新舊同名參數共存（但不可能），所以你只好讓新變數加上前綴。
要注意的是，它會自動在指定的前綴，與變數名中間加上底線！","['compact', 'extract']","['第二個參數：決定已存在同名變數時的行為', '第三個參數：前綴']","['上面的寫法等同下面的', '上面的寫法等同下面的', '上面的寫法等同下面的']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192022,ModernWeb,0,Expo---跨平台App開發從零到上架系列,14,ExpoDAY14---Permissions&Location,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1513586939000000000,378,,['Expo DAY14 --- Permissions & Location'],"['前言', '現在就做看看', 'Refs']","['Expo', 'React Native']",,,['tags: day14 iThome鐵人賽2018 ReactNative Expo Location Permissions'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10192020,SoftwareDevelopment,0,Kotlin30天，通過每天一個小demo學習Android開發系列,15,Kotlin開發第15天Notification（NotificationManager）,Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1513585110000000000,384,"
Android 的 NotificationManager 是一個用於本地推播的類。
這類似於 iOS 的 UILocalNotification（in iOS 10 is deprecated 取而代之的是 UNUserNotificationCenter）
和 iOS 開發很不一樣的是，在向 Android App 進行推播的時候，不需要向用戶請求許可。
通過 NotificationCompat.Builder 建立 notificaiton 的內容，通過 NotificationManager 來發送通知。
notificationManager.notify(id, notification)
這裡的 id 如果一直都是同一個，系統會覆蓋掉通知的內容，所以如果要發送不同的推送通知，需要給不同的 ID
setSmallIcon() 和 setLargeIcon() 的圖片位置：

一開始在給 Android 手機設置 navigation small icon 的時候，不知道為什麼一直失敗，畫面都是顯示一個全色的方塊。
後來發現 small icon 需要給帶有透明背景的 png 檔，這裏用一張圖解釋：

另外我的測試手機是一台紅米，紅米的系統比較特別，
完全無視 setSmallIcon 和 setLargeIcon 的內容，而是拿 App icon 來使用。
後來是拿 Pixel 的模擬器來測試，才看到了兩種 icon
.setSound 方法指定通知的音效
.setVibrate() 給通知信息加入震動提示，其中的參數是由停止時間、震動時間組成的 Pattern
.setLights 設定通知消息的閃燈效果","['Notification', '筆記', '參考']","['關於 Small Icon 的問題', '其他功能']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191824,DataTechnology,0,MicrosoftBotFramework30天上手系列,11,Manageaconversationflowwithmultipledialogs,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1513584801000000000,369,"這個範例主要是示範
多個目地的對話。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191510,自我挑戰組,1,用IT看世界系列,14,OEM到底好不好???,allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1513584435000000000,466,"這故事應該是在兩個月多前發生的
有天我同事叫我送修一顆非原廠購買的OEM硬碟!!!
公司為了成本考量，由採購最終去決定購買的對象，當然這個無可厚非
但卻延伸出一些後續的保固問題，明明是在保固內，原廠卻不受理?
同事告訴我只能找代理商
在我的認知裡面，代理商有點像""掮客""這種腳色
怎說?
我曾經待過國內知名的掮客商，公司代理國外的網路或者儲存設備
原廠為了拓展的自家的業務，會把份的工作分包下去給""代理商""
好讓，原廠更有較多的時間去推展自家的產品
當然這些掮客也是會有排名的
這會影響所謂的資源分配問題，這跟我們的學校教育一樣的
辦學績效好的可以獲得較多的經費及補助
所以大者恆大，這也是為何?
台大的畢業生有高達7成以上會出國留學，而這些能進入台大的學生多數來自北部的學生
而這些北部的學生台北市佔了一半，然後再看台北市理大安區......
扯遠了!!!
那這些小掮客注定沒有生存的機會嗎???
不見得!!!
話說當時我待的掮客商，有天我同學來拜訪我的時候
他告訴我
你知道xx公司薪水發不出來，去了一大半的人
我說!!
真的假的????
在學術網路佔有一席之地的SI
也抵不過時代的巨輪嗎?
當然這個時候我想到我送修的硬碟
一修修了兩個月，保內要收500元檢測費
我心想，這個我從來沒聽過的""掮客""商，可能只有一次生意
OEM沒有全然不好，價格低廉
相對的就要購買者去承擔，後續維修的一些成本跟風險
如果你跟我一樣，不喜歡耗費太多心力去處理這個
原廠是你最好的選擇
有句話很經典，不用錢的最貴!!
所以我同事說了一句話，下次再也不會找OEM的東西
我心裡想，這是基本常識吧......
除非你沒在外面走跳過....
或者你的技術能力有辦法去掌控這一切
不過我的經驗告訴我.....
這通常都是經費不夠而衍生出來的問題....
而決策者，往往都不會考慮到這種""隱性成本""",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191986,ModernWeb,1,前端新手村系列,8,前端新手村橫向排列,chris,https://ithelp.ithome.com.tw/users/20107637/ironman,1513580772000000000,454,"「當你迷惘的時候，就回到原點想一想」-中華一番 蘭飛鴻
網頁前端新手村系列文章，宗旨並不在技術本身的教導，重點放在技術與技術之間的脈胳關係。讓零碎的網頁前端技術的關鍵字，成為比較有系統性的視野。
讓一開始接觸網頁前端的新手們，有一個比較友善的系統來架構你的學習，至於技術本身的深入探討，就留給其它的高手們吧。
在 HTML 中，直向排列會預設 width: 100%; ，但是在橫向排列時，會預設 width: auto 也就是依照內容決定寬度。在 Normal flow 的規則之下，它就會成為文字的排列方式。
橫向排列時的思考方式，比較不接近 Box Model 而是要使用「 inline 排版」的思考方式。
舉例來說
div 可以使用 margin-right: auto; 靠左，用 margin-left: auto; 靠右。
但是 span 不會有這樣的表現。
這一段，純屬我個人的推敲，尚未全部證實，但是卻很好用。

文由行組成，行由字組成。
表現「文」形式的做法，最簡單就是將文裝進 block 容器中。
這樣就可以將「文」當作「文字區塊」的概念進行排版。
對「文章」的設定，可以設定在容器(在此為div)。
可作用在容器的 CSS
可作用在元素的 CSS
文由行組成，不是由字組成。
相對於 block 排版，「行」是在 inline 排版裡較特別的概念。
可作用在容器的 CSS
可作用在元素的 CSS
行由字組成。
有字距(字母) letter-space ，有單字距 word-space
文字可以改大小寫 text-transform
可作用在容器的 CSS
可作用在元素的 CSS
文字的垂直對齊，對於初學者來說是一件很不好理解的事情。
因為，要垂直對齊，必須要在「行高」空間裡。

也就是說， inline 元素要垂直對齊，必須要先找到該元素的「行」，並且「把行撐開」，才可以使用 inline 的對齊屬性

在多行的情況中，文字的垂直對齊更受限於行與行之間，並不像 block 元素般自由的移動。必須使用另一種排版觀念思考，掌握度比較高。
[1]: 16.2 Alignment: the 'text-align' property - w3.org
[2]: 16.6 White space: the 'white-space' property - w3.org
[3]: 10.8 Line height calculations: the 'line-height' and 'vertical-align' properties - w3.org
[4]: 16.1 Indentation: the 'text-indent' property - w3.org
[5]: 16.5 Capitalization: the 'text-transform' property - w3.org
[6]: 16.3 Decoration - w3.org
[7]: 16.4 Letter and word spacing: the 'letter-spacing' and 'word-spacing' properties - w3.org","['橫向排列', '參考資料']","['前言', '個人的 inline 排版觀念', 'inline 的垂直對齊']","['文', '行', '字']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192017,SoftwareDevelopment,2,30天快樂學習FunctionalProgramming系列,5,PureFunction很純的函數,阿志,https://ithelp.ithome.com.tw/users/20103386/ironman,1513578286000000000,531,"這兩篇有大量的 JS 語法講解，如果你覺得看不太懂程式碼，可以先看看這兩篇。
Pure Function 的目的就像是 Immutable Data ，竭盡所能的避開副作用。 Pure Function 只在乎輸入與輸出，相同的輸入，必定拿到相同的輸出，不能依據外部狀態，若這週可以執行，下禮拜就爆炸，也不是 Pure Function 。
像是 全域變數 、 外部環境交互作用 ，有可能會影響輸出結果，這些都被認為是副作用，舉例來說像是：
基本四則運算，這些都是 Pure Function 。
在 這個 Object 怪怪的 中的 TodoList 全都不是 Pure Function ，另一個很明顯的例子，像是 Array.slice 與 Array.splice ，其中 Immutable Data 能夠讓我們更確定這 Function 是安全無疑的。
依據全域變數的這種也不是 Pure Function 。
除了輸入值以外， minimum 有可能影響輸出結果，這種也不是 Pure Function 。如果 minimum 是藉由參數傳進來，那 isBigger 就是一個 Pure Function 。
來個 快取乘法 簡單實作！
這不是個健康的 memoize function ，因為在 JSON.stringify 會造成不必要的負擔（但適用任何 case ），正確使用是要傳入一個自訂的 keyGen ，但它已經成功達成目的了。
Pure function 與一般的 Function 不同，而不同的點就是他們是一種對應關係，只要輸入，就有對應的輸出，不受其他因素控制。
這不就是 國二數學裡的函數 嗎？

在國中二年級的數學課，我們就學到了函數，當時老師說了函數是一種對應關係，只要輸入，就有對應的輸出，不受其他因素控制，那時還說了只能一對一、多對一，不能一對多、一對無，我全部都想起來了，原來我早就學過了阿，謝謝你，謝啟凰老師 [1] 。
假如有一個函數， y = x + b ，如果固定 b 為 1 ，那就得到了一個全新的函數 y = x + 1 ，這也正是我剛在 isBiggerThan18 做的事。
假如有兩個函數 f 與 g 。

這就是 Functional Programming 最核心的概念，我們可以使用函數去產生函數，然後把函數組合起來！而且沒有任何副作用！
天呀！這真的是個了不起的構想！
而這兩個概念分別稱之為 Curry 與 Compose ，在 Scala day 9 (Currying) 中也有提到，這兩個概念的重要性，足以分開寫兩篇文章。
我們先來個簡單總結：
當然，現實世界不可能只有 Pure function ，總有需要使用者輸入的時候吧，有一件事是非常確定的：有可能有錯誤發生，不過這不是件另人沮喪的事，至少我們有大量面對這種狀況的經驗。
在 FP 中需要更多工具來處理， MayBe 、 Either ... （別擔心我之後會詳細的介紹它們），現在我們能先撰寫 Pure 的部份，並與 Impure 的部份一同使用，現在我們的代碼已經比以往清楚很多了。
我開始理解為什麼很多人都斷在第九篇左右了，可以跟我說一聲加油嗎？",,"['本章重點', '在開始之前', '純粹是唯一目的', '純粹的好處', '函數式編程的全部', '如何面對 Impure Function', '後記', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192016,自我挑戰組,0,GAME30天系列,8,Firebaseintro.(2/3,我是一支小小小小鳥,https://ithelp.ithome.com.tw/users/20107379/ironman,1513567805000000000,443,"不會ajax也可以完成溝通

firebase被google買下後, 現在我們只要到 firebase 登入google帳號, 就可以開始新增專案

建立專案後, 選擇連結web app, 畫面會自動秀出程式碼片段, 我們把他和firebase的CDN連結先貼到 index.html 底部, 像這樣
在左邊功能列選擇Auth, 我們先把匿名登入啟用, 方便測試

在左邊功能列選擇database,新增一個person欄位後,在規則那邊更改權限, 讓讀取和存入沒有限制
在Hello.vue測試, 先把database的實例化, ref參數為資料節點名稱, set方法存入資料, 格式當然是json
回到firebase主控台, guest已經確實新增進去了

接著我們試試取資料, 新增一個button和 get method, 注意set和get都是非同步操作
按下按鈕, 確實得到person內的資料了

刪除資料, 就不附圖了",['start'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192015,ModernWeb,1,重新認識JavaScript系列,15,"重新認識JavaScript:Day15隱藏在""事件""之中的秘密",KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1513565724000000000,601,"上回我們提到，註冊事件的方法 addEventListener() 內有三個參數，分別是「事件名稱」、「事件的處理器」(Event Handler)，以及「捕獲」或「冒泡」的機制切換。
那麼，今天我們要來看的第一個部分，就是隱藏在 Event Handler 中的 event。 (柯南音樂請下)
當監聽的事件發生時，瀏覽器會去執行我們透過 addEventListener() 註冊的 Event Handler (EventListener) ，也就是我們所指定的 function。
這個時候，EventListener 會去建立一個「事件物件」 (Event Object)，裡面包含了所有與這個事件有關的屬性，並且以「參數」的形式傳給我們的 Event Handler：
當點擊 <button> 後，可以從 console 看到 event 物件提供了這麼多東西：

像是
相關資訊當然還有很多，這裡就不一一介紹。
不過要注意的是，每個「事件物件」所提供的屬性都會根據觸發的事件而稍微不同。
HTML 部分元素會有預設行為，像是 <a> 的連結，或是表單的 submit 等等...，
如果我們需要在這些元素上綁定事件，那麼適當地取消它們的預設行為就是很重要的一件事。
像這樣，有一個通往 google 連結 <a>:
假設今天點擊這個 link 時，我希望瀏覽器執行 console.log('Google!'); ，那麼根據先前所說，我可以先註冊 click 事件：
結果你會發現，即便我們為了 <a> 去註冊了 click 事件，但是當我點擊這個 link 的時候，瀏覽器依然會把我帶去 google 的網頁。
如果這時候，我希望執行的是 console.log('Google!'); 而不是直接把我帶去 google 的網站，那麼可以怎麼做？
這時候我們就可以利用剛剛介紹的「事件物件」 event 提供的 event.preventDefault() 方法：
這個時候，再試著點擊 link 一次，你會發現瀏覽器預設的跳轉頁面的行為不見了， console.log('Google!'); 也可順利執行。
但要注意的是， event.preventDefault() 並不會阻止事件向上傳遞 (事件冒泡) 。
另外，值得一提的是，在 event handler function 的最後加上 return false; 也會有 event.preventDefault() 的效果，但切記不可以加在前面，若是加在前面 event handler function 就直接結束了。
如果我們想要阻擋事件向上冒泡傳遞，那麼就可以利用 event object 提供的另一個方法： event.stopPropagation()。
最常見的使用情境如下：
應該很多人都知道，為了增強 checkbox 的易用性，通常會特地加個 label 標籤，然後給個 for 屬性給對應的 chkbox:
但有時候因為排版需求、不想增加太多 id，或是某些其他原因，可能會寫成這樣：
在單純的使用上也有一樣的效果。
但是，這時如果我們在 label 上面註冊了 click 事件時：
你會發現 console.log('lbl click'); 執行了兩次：
會有這樣的問題，是因為在 label 標籤包覆 checkbox 的情況下，我們去點擊了 label 觸發 click 事件，此時瀏覽器會自動把這個 click 事件帶給 checkbox。
而 checkbox 受到事件冒泡的影響，又會再度把 click 事件傳遞至 label 上，導致 ""lbl click"" 出現了兩次。
這裏我們分別為 label 與 checkbox 註冊 click 事件來實驗：
執行結果：
現在既然已經知道是 checkbox 受到事件冒泡的影響將事件向上傳遞，這時如果要修正 label 的 click 觸發兩次的錯誤行為時，我們就可以這樣做：
在 checkbox 的 click 事件加上 e.stopPropagation(); 就可以囉！
注意， stopPropagation() 不是掛在 label ，而是要放在 checkbox 上才有效！
另外值得一提的是，很多人會在 jQuery 的 event handler 最後加上 return false 來得到 preventDefault() 與 stopPropagation() 的效果，這是沒問題的。
但是在 JavaScript 的 addEventListener() 裡，最後面加上 return false 只會有 preventDefault() 的效果，不會有 stopPropagation() 的作用。
在 Event Handler 的 function 裡頭，若是想要對「觸發事件的元素」做某些事時，該怎麼處理？ 在 Event Handler 重新用選擇器挑選嗎？ 如果沒有 id 肯定是個大工程吧！
沒關係，這時候我們可以用「this」。
像這樣，當事件被觸發時，此時 this 就會是觸發事件的元素，也就是這個範例中的 label。
注意：this 代表的會是「觸發事件的目標」元素，也就是 event.currentTarget 而不是 e.target。
回到剛剛的範例：
然而，當我按下了 label 觸發 click 事件時：
前面兩組 ""LABEL 1"" 與 ""INPUT 2"" 不意外，因為 label 與 chkbox 確實會各自觸發一次 click 事件。
然而最後的 ""INPUT 1"" 、 ""LABEL 1"" 從後面的「1」可以看出事件是由 label 所發動，但為什麼這時的 e.target 與 this 會是不同的兩個對象呢？
在事件主動被發動的時候，此時 e.target 與 this 確實會指向同一個 DOM node。
但我們已經知道最後的 ""INPUT 1"" 、 ""LABEL 1"" 其實是由 chkbox 的冒泡機制所發動的 (注意這裡沒有 e.stopPropagation() )，此時這裡的 e.target 指的是 chkbox。
換言之，e.target 其實是「觸發事件的元素」，而 this 指的是「觸發事件的目標」元素，也就是 event.currentTarget。
當然，如果在不考慮事件傳遞的情況下，this 實質上就等同於 e.target 了。
事件指派是利用前面介紹的「事件流程」以及「單一事件監聽器」來處理多個事件目標。
以 重新認識 JavaScript: Day 12 透過 DOM API 查找節點 的範例來說：
如果我們要分別為 myList 的 li 綁定 click 事件，就要使用 for 迴圈來一個個綁定：
此時，若是我們再新增元素至 myList：
這個時候，你會發現一個問題，就是後來才新增的 newList 節點並不會有 click 事件的註冊。
解法很簡單啊，appendChild 之後再 addEventListener 就好了
如果每次新增後要再重新 addEventListener 那就沒完沒了，而且若是我們不斷地的去重覆監聽事件，又忘了移除監聽，甚至可能會造成 memory leak 的嚴重問題。
所以接下來要介紹的「事件指派」(Event Delegation) 就會是比較好的做法：
發現了嗎？
我們把 click 事件改由外層的 myList 來監聽，利用事件傳遞的原理，判斷 e.target 是我們要的目標節點時，才去執行後續的動作。
這樣的好處是你的事件管理會非常輕鬆，而且後續加上的 newList 也會有 click 的效果，無需另外再去綁定 click 事件。",,"['隱藏在 Handler 中的 ""event""', '阻擋預設行為 event.preventDefault()', '阻擋事件冒泡傳遞 event.stopPropagation()', '在事件中找回「自己」', '事件指派 (Event Delegation)']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192014,DevOps,0,30天入門Ansible及Jenkins[2018]系列,7,[Day07]運行playbook以及配置inventoryfile,tsoliangwu0130,https://ithelp.ithome.com.tw/users/20103346/ironman,1513564626000000000,423,"要透過 Ansible 來運行 playbook 相當容易，我們只要使用 ansible-playbook <playbook> 的指令就可以輕易運行我們編寫好的 playbook：
執行完畢後我們應該可以在終端機上看到以下的輸出：
然而，這個結果是正確的嗎？
在看到輸出結果後，我相信大部分的讀者可能會納悶為什麼輸出結果沒有任何執行成功或失敗的資訊。從終端機的結果我們可以知道 Ansible 什麼任務都沒有做，這樣的結果也不是我們所預期的。在解決這問題之前，讓我們先回憶一下我們之前撰寫的 playbook.yml：
從這份 playbook 中，我們可以很清楚地看到 Ansible 應該要對 server 這台主機進行任務清單中定義的任務。在之前 Vagrant 介紹中，我們的確對運行起來的主機進行了命名，然而，我們卻從來沒有告訴 Ansible 過哪一台主機是 server。因此，解決這個問題最直接的方法就是定義一個目錄 (inventory) 並讓 Ansible 參照，這樣 Ansible 才會知道該對哪一台主機做什麼事。
為了知道 server 這台主機的詳細資料，我們可以透過 vagrant ssh-config 這個指令來列出主機的相關資訊：
接著新增一個檔案並命名為 inventory ，然後在檔案內寫入以下內容：
根據 vagrant ssh-config 列出來的主機資訊，我們在 inventory 中依序定義了 server 這台主機的連線 IP、port 入口以及登入使用者的身份。現在，讓我們重新執行運行指令，並將這份主機清單指定給 Ansible 參照：
現在，輸出結果如下：
透過 inventory file 的配置，我們可以輕易的將不同部署環境做有系統的整理。舉例來說，在軟體開發實務上根據開發階段的不同，我們常常會有多種不同的部署環境，好比說最常見的 testing, development 以及 production。其中，每個環境可能又有不止一台的主機需要被維護，因此我們可以將每個環境需要配置的細節清楚定義在不同的 inventory file 中，然後透過類似以下指令來透過 Ansible 真正實現一鍵部署：
當然，也有人喜歡將所有不同環境都定義在同一份 inventory file 中，例如這樣：
這也是一種相當常見的做法，但筆者比較偏向把不同環境的 inventory file 各自獨立出來各自管理。這沒有什麼對錯，純粹就是個人習慣上的問題而已。在 inventory file 中，我們也可以根據環境的不同來定義一些變數，比方說：
關於 inventory file 更進一步的寫法，可以參考這份官方文件。撰寫清楚的 inventory file 不但能夠讓我們在使用 Ansible 管理 managed node 的過程中更清楚操作對象的資訊，以大幅降低人為疏失的的機率，也能夠有效提升我們進行部署工作時的效率。
現在 Ansible 知道哪台主機是 server 了！不過，看起來 Ansible 似乎並沒有將我們 playbook 中定義內容成功地部署到 server 主機上。
從上面的錯誤訊息中我們可以知道部署失敗的原因發生在 SSH 連線失敗。還記得我們說過使用 Ansible 操作 managed node 必須要透過 SSH 連線嗎？一般來說，我們如果要透過 SSH 存取主機 (由於篇幅的限制，我們在這次的教學文中就不對 SSH 設定著墨太深，有興趣的讀者可以上網搜尋相關資料或是參考 GitHub 的 SSH 設定教學) 我們會預設將產生出來的公用金鑰 (public key) 存放在 ~/.ssh/ 的路徑下，然後再手動將這組金鑰加到我們想要授權的服務列表 (authorized_keys) 上。不過，因為我們是使用 Vagrant 建立起一台虛擬主機作為練習，Vagrant 其實已經事先幫我們把控制主機與遙控節點做好 SSH 配對了，所以我們並不需要手動設定這個部分。從上面的 vagrant ssh-config 輸出的結果中，我們可以看到一個特殊的參數：
這個參數告訴了我們這台虛擬主機 private key 的存放位置，我們只需要透過以下指令，將這個檔案的路徑指定給 Ansible，我們就可以成功運行我們的 playbook 囉！
運行結果如下：
大功告成！我們成功接收到從 server 回傳回來的 ""pong"" 了！在未來的章節內，我們還會介紹如何透過 ansible.cfg 這個檔案的設定來告訴 Ansible SSH 金鑰以及 inventory file 的位置，來讓整個部署流程看起來更加簡潔也讓開發人員更易維護。",['運行 playbook 以及配置 inventory file'],,,"['Ansible 如何運行 playbook？', '什麼是 inventory file？', '設定 PRIVATE_KEY_FILE']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192013,DevOps,1,Ops的轉職之路-Puppet從入門就放棄系列,8,Day8-手把手系列-第一個manifests,shazi7804,https://ithelp.ithome.com.tw/users/20089211/ironman,1513562932000000000,434,"本系列文資料可參考以下：
前七天把環境都搞定之後，終於要來開始寫 Code 了，從這個階段開始 Ops 會辛苦一點，而 Developer 會開心一點。
Puppet 是用 manifests 來管理每一個 node 要做的事情，透過 Catalog 來存放 dependency information 進行 deploy

Master 和 Agent 之間取得佈署清單流程：
Master 和 Agent 提交的關係有：
在 Puppet master 上撰寫 manifests，而 manifests 是可以被即時生效，不需要 reload service。
在建立 manifests 前或許你可以先查看有哪些 resource 能夠使用，在這邊簡單利用 package、service、file 來示範。
這個範例也藏了小小的陷阱：",,"['目標', '建立 manifests']","['Example: install chrony', 'Example: install apache']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192011,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,15,[PixiJS-Day-15]PIXI的resize,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1513560738000000000,432,"很多時候 PixiJS 需要 resize，使用方式相當簡單
由於 PixiJS 的座標預設左上是 (0, 0);
所以在 window.onresize 時，放在 (0, 0) 的物件不會改變看起來的位置


由於所有可視物件都是放在 app.stage 裡，而 app.stage 本身是一個 PIXI.Container
如果是以畫面中心為延伸與縮放的情形時，可以直接將 app.stage 放在 renderer 一半寬高的位置
在 window.resize 時，就會是從畫面中間延伸了
需注意的是，物件本身的中心點也要設定在物件中心，非預設的左上角


適合情形：萬花筒效果

不同情境下，也不一定都需要調整 app.stage 的座標

以這類型的使用情境來說，
我會維持 app.stage 的 (0, 0) 在左上角
演算的程式就直接以 app.renderer 的寬與高來撰寫即可
由於 app.stage 也可以設定 scale 與 rotation 等，可視情況調整",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191958,DataTechnology,0,GraphQL+ApolloData入門系列,12,ApolloData&Querymethod(三),polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513560095000000000,424,"介紹
因為 Query method 還滿多的 ，這次繼續來介紹好用的 Query mehtod Api
data.startPolling:通常如果會希望固定一個時間 ，向Server發送 請求fetch 就可以使用 startPolling，反之就使用  this.props.data.stopPolling() 來停止這個動作
data.updateQuery(updaterFn):在ApolloData裡面通常都會有 query cache 但有時會使用到mutation對資料庫操作(新增刪除修改等等) 就會需要使用 updateQuery，要注意的是這個 method 不會異動到 Server 的資料，只對 Store(cache) 去做 update
同常會是把之前的結果與變數傳入updaterFn ，常用的 Query method 也差不多介紹完了
接下來介紹一些options的設定
options.fetchPolicy
ApolloData 默認情況下，元件將嘗試從緩存中讀取，如果查詢的數據在 cache 中，那麼 Apollo 只是從緩存中返回數據。如果查詢的數據不在緩存中，則Apollo將使用網絡執行Fetch。但通過選項可以改變行為。
cache-first：嘗試從緩存中首先讀取數據。如果查詢所需的數據都在緩存中，那麼將返回該數據。如果緩存結果不可用，Apollo將會從網絡中獲取。這個策略減少渲染組件時發送的網絡請求數量。
cache-and-network：這會讓Apollo首先嘗試從緩存中讀取數據。如果完成查詢所需的所有數據都在緩存中，那麼將返回該數據。但是，無論整個數據是否在緩存中，這fetchPolicy將始終使用網絡接口執行查詢，cache-first而只有在數據不在緩存中時才會執行查詢。此策略讓用戶獲得快速響應進行了優化。
network-only：這永遠不會從緩存中返回初始數據。相反，它將始終使用您的網絡接口向服務器發出請求。特性是與 Server 的數據一致性。
cache-only：這永遠不會使用網絡查詢。相反，它從緩存讀取。如果數據不存在，則會拋出錯誤。
總結
startPolling 對於定時要發request非常好用，另外 options.fetchPolicy 提供了四個策略可以選擇，不同情境選擇適合的 fetchPolicy 將會提高UX的使用體驗",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192007,ModernWeb,0,Next.js+各種套件組合系列,15,Next.js&React-md,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513558327000000000,425,"介紹
Next.js 套件中有個比較輕量級，material design 的 React-md ,很容易的使用設定上比較簡單這邊來介紹這個 React-md 好玩意兒，不同 Css in Js 這套是由 Sass build出 靜態css 使用
安裝這套要先安裝這兩個
這套的使用重點在於 Head 直接加入 css ，static是靜態檔案存放位置 ，也意味著如果要改變 react-md 佈景就要透過 node-sass 去建立css檔案 例如底下的 /static/react-md.light_blue-yellow.min.css 就要使用node-sass 產出
官方也有提供一個 theme build ，非常方便選好後就可以使用
https://react-md.mlaursen.com/customization/theme-builder

注意要在 next.config.js webpack 中設定 delete  ,這是避免 Server 無法 resolver
可以參考這個討論串
https://github.com/zeit/next.js/issues/2324
這邊再補充一下 使用React-Md，切入點通常會選擇使用 NavigationDrawer 來當作 起始的元件 這個物件就包含了所有基本的Layout ，參考網址
https://react-md.mlaursen.com/components/navigation-drawers
總結
對sass 語法熟悉的朋友，可以考慮使用 react-md 設定不需要像 Css In Js 考慮到許多 SSR ，直接就是在Head裡面塞入一個靜態的css ， 對入門的朋友非常快速就可以上手，文件也非常齊全小巧好用
Next.js 官方範例
https://github.com/zeit/next.js/tree/canary/examples/with-react-md
React-md 官網
https://react-md.mlaursen.com/",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191966,ModernWeb,1,三十哩路，我的前端學習路程系列,15,Day15::我所知道的CSS重構第四章之一,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1513558009000000000,439,"網頁可以被視為是用來呈現資訊的文件集，也能被視為一套複雜的應用程式
這兩種面像都需要具語意的HTML標籤來描述要呈現的內容，也都能從功用型的樣式設定法(intent-based styling)上獲益。
功用型樣式設定法有助於創建出更好的架構，將樣式組織成不同的分類能讓樣式碼更容易複用，也更容易達到預期的效果。
瀏覽器有其內建的預設樣式表(stylesheet)，稱之為使用者代理人樣式表(user agentstylesheet)，瀏覽器會將這些預設樣式套用到HTML文件上。
樣式正規化(normalizing styles)提供不同元素的屬性預設值，若沒有預設值的話不同的瀏覽器會為網頁中的元素套用不同的樣式預設值。
基底樣式(base styles)用來做為其他特定度更高之樣式的建構基點，他們會套用到只帶單一類型選擇器的元素上，或是由類型選擇器、組合器以及任何套用到其上的虛擬類別所形成的簡單組合上。
除了正規化樣式之外，基底樣式應該是樣式表中特定度最低的樣式。
HTML元素已設定了基底樣式就不需要再重新宣告，除非該樣式有不同的用途。
編寫基底樣式時要注意的原則是，在元素上若需套用更多樣式，後來添加的樣式應該不需要去複寫太多基底樣式就可以做出來。
基底樣式應該只設定最常使用的屬性與值：
color
font-family
font-size
letter-spacing
line-height
margin
padding
如果網站的本質是訊息性質，設定這些樣式可能就已足夠。
編寫基本屬性時，要考慮到上列的屬性，這些屬性都可由上原(ancestors)繼承而來(除了margin和padding之外)，並非每一次都要設定這些屬性。
文件詮釋資料(metadata)，標籤包括<head>、<title>、<base>、<meta>等
因為使用者看不到他們，所以無法指定這些標籤的樣式。
分段元素(sectioning elements)包括<address>、<article>、<aside>、<body>、<footer>、<header>、<nav>、<section>等
這些元素通常會包含其他元素，構成HTML文件中不同的段落。
考慮在分段元素上設定下列屬性：
color
font-family
font-size
font-weight
letter-spacing
line-height
padding
標頭元素(heading elements)包括<h1>-<h6>用來定義每一個不同段落主題的元素。
文本元素(text elements)包括<figure>、<figcaption>、<p>、<pre>用來顯示文本區塊。
在鏢頭與文本元素上應考慮定義下列屬性：
font-family
font-size
font-weight
letter-spacing
line-height
margin-bottom
margin-top",,,"['樣式分類的重要性', '樣式正規化', '基底樣式', '定義基底樣式', '文件詮釋資料', '分段元素', '標頭與文本元素']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191284,自我挑戰組,0,經濟學角度思考敏捷系列,3,Day3敏捷中的選擇Sprintplanningmeeting的方式,eviler,https://ithelp.ithome.com.tw/users/20107403/ironman,1513557492000000000,430,"在 Scrum 中的 Sprint planning meeting 通常有下列幾種方式

首先來做簡單的名詞解釋
Scrum 是一種疊代式增量的軟體開發流,程詳細的說明可以參考
在 Scrum 中有一個活動叫做 Sprint planning meeting, 用來決定這個 Sprint 要做些什麼事情, 而 Planning meeting 通常會分兩個階段
今天想要探討的就是 Part 1 和 Part 2 所進行的方式
Part 1 時 PO 跟團隊說我想要做哪些 Item(又稱 Story),並且將優先順序排好,請團隊按照優先順序拿 Story
此時團隊會根據一些方式來決定要拿哪些 Story,這些方式我們明天會討論.
當 Part 1 結束後, PO 已經知道這個 Sprint 有哪些 Story 將會被執行,所以他的預期是等 Sprint 結束時,這些東西應該是會做完,並且處於可以 release 的狀態.此時大部分的 PO 就會離開 planning meeting 不繼續參加 Part 2了.
Part 2 時 team 將所拿到的Story  一一拆分成 Task.
進行的方式大概是拿一張 Story, 然後將這張Story要做的事情把他一一列下來,寫成 Task. 另如
通常會對每一個 Task 寫一下預估的工時以小時為單位,例如
不過由於team內每個人的能力不同,所以估出來的時間可能也不一樣,這裡估工時的目的不在準確,而是在溝通,可以有很很多種不同的方式來達到共識或是說寫下一個數字
Part1 ,Part 2交錯進行,也就是說 Part 1 先拿一個Story 然後就進行 Part 2 拆 Task, 拆完後可能根據拆出來的工時,和人力來決定是否繼續拿 Story.
例如:一個 team 有 5個人,每人每天的工時算6小時(相信我很多了),這樣一天有30工時,
如果一個Sprint兩個星期有 8個工作天,
那就會有 240個工時,
如果有人請假或是開會等,再把工時扣掉,假設有200個工時
所以以上面的例子,
第一個Story可能要花掉的工時為 8+2+2+1+3+1 = 17,
拿完第一個Story後還有 200 - 17 = 183 Hr,
team 可以繼續拿下一個 Story,繼續拆Task,估工時,一直到剩下的工時太少不足以做一張story為止.
Part 2 採用 Just In Time 方式進行,也就是說先拿完 Part 1, 這個 Sprint 要做哪些事情也許5個 Story
然後 Part 2 等要做的時候再拆Task,
所以第一次只會拆下一個工作天需要的量,
等量不夠了後在拿下一個 Story來拆Task.
瞭解了這三種常見的方式後,
明天我們再來討論這三種方式的優缺點",,"['區分Part 1, Part 2', 'Part1, Part 2交錯進行', 'Part 2 採用 Just In Time 方式進行']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191914,ModernWeb,0,從零開始的網頁設計系列,4,Day04:技能升級_常用標籤(二)_div、span,樂樂,https://ithelp.ithome.com.tw/users/20104423/ironman,1513557468000000000,481,"「我有問題！！！什麼是切版！！！」
這個問題問得很好，簡單來說～切版就是我們將設計師設計好的畫面製作成網頁
我們會將畫面分類成一個一個的區塊，然後開始進行頁面的製作
今天要分享的就是 div 以及 span
div : 簡單的說就是一個區塊，我們會在裡面塞很多很多東西。
如果地球是一個網頁，那每個國家對於地球來說就是一個一個區塊
那每個國家裡面都有市區，這些市區就是這些國家的小區塊
span :通常會用來做區塊或者是標籤內的細部變化
本篇會加入一點點的css來做講解
不囉唆我們直接來實例

看起來好像很不明顯對不對？沒關係，我們幫他加一點顏色讓你有點感覺
我們在標籤裡面加入style=""""就可以針對這個標籤進行CSS的修改
那我們要幫他加上的是背景顏色，所以會使用background-color
所以整個加起來就是
結果

你會發現是不是變成兩個區塊了？
只要在我們區塊內的標籤都會套用這個效果
我們將昨天講的標籤都一起加進來實際運用
你會發現包在div裡頭的標籤都一起套用到div的CSS效果

這樣好像還是很沒有感覺對不對
我們來看兩個小例子
我們要做的是一個深灰色底白色字的網頁
這邊新增了一個CSS效果，字體顏色，我們要使用的屬性是color
利用;將兩個屬性分開
style=""background-color:#3b3b3b;color:#fff""
第 1 個做法：利用div將我們的標籤都包起來套用

第 2 個做法：不使用div

有沒有發現什麼不一樣了？
假設我們使用第一種方法，我們就只需要在最外層的div加上style就好
但如果是第二種，我們就必須在每一個標籤上加上style 是不是有一種做重工的感覺？
而且還會一塊一塊的看起來不像同一個區域的東西一樣
那我們在最前面提過，我們會將網頁做區塊的分類再去切版
如果不使用div的話我們在製作的過程會很痛苦，而且也會造成下一個維護你專案的人的痛苦
通常span會包在標籤裡面做更細部的變化
我們這邊就直接給一個實際例子

這邊我們會發現一件事，span 不是一個區塊 ，雖然它的功用跟div看起來好像很像
我們往尋尋覓覓，冷冷清清，淒淒慘慘慼慼。  這行看 冷冷清清 這四個字有被我使用 span 包起來
但是因為我沒有對他下任何樣式修改所以他看起來並沒有變化
乍暖還寒時候，最難將息
三杯兩盞淡酒，怎敵他、晚來風急？
被我用span包起來的最難將息變成了桃紅色，但其他的文字並沒有跟著有任何改變
這樣是不是有對div以及span有比較多的瞭解了呢？
VS Code功能分享
以往我們在新增顏色的時候都需要特別去查色票
但在本篇中我所有的顏色都是直接利用VS Code 去拉的
1.隨便下一個顏色
有沒有看到我用白色圈圈框起來的地方有一個色塊

2.點擊色塊
會看到一個好像在Photoshop裡面你在選顏色會出現的調色盤
選取你想要的顏色，你的色碼就會改變了
",,['Div'],"['實例', '結果', '結果', '結果', '結果', 'Span', '結果']",['今天要講的是我們在做網站切版的時候會很常用到的標籤'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191984,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,15,3-4.監控工具之三:ElasticNetflow收集,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1513556978000000000,477,"Netflow方便分析網路量問題，例如哪幾個IP使用流量大、用什麼protol，不論在維運或資安上都非常方便
補充Netflow為cisco協定，其他還有sflow等等 https://zh.wikipedia.org/wiki/NetFlow
**原理:**利用logstash將收到的netflow訊息轉成json格式傳給elasticsearch
到logstash資料夾(cetnos7 在/user/share/logstash)後安裝插件
config，filter是將ip拿出來做GeoIP(logstash內建功能)，可以產生經緯度國家位置等，方便畫圖。
收到數據後可以到kibana畫圖

也可以用Grafana畫
要裝worldmap Panel插件


成果

注意:這會產生大量流量及消耗儲存空間，需要定時刪除，或是在對資料做合併二次處理
這裡用的是安裝Codec plugins的方式
https://www.elastic.co/guide/en/logstash/current/plugins-codecs-netflow.html
另外還有找到另一種方式Logstash Netflow Module， 不太確定原理還沒試驗成功
https://www.elastic.co/guide/en/logstash/current/netflow-module.html",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191983,自我挑戰組,0,蚵蚵攻城記系列,8,[Day08]垂直置中(2/4),azer19890427,https://ithelp.ithome.com.tw/users/20107340/ironman,1513556227000000000,439,"昨天嘗試了用line-height來做到垂直置中，
今天試試看用position來達到垂直置中的效果。
照慣例還是請到阿鼠，

阿鼠臉太大。
我們把阿鼠放到一個籠子裡，

鼠鼠很緊張，躲到籠子的角落了。
先打造一個舒適的環境給鼠鼠，
將我們的籠子(父元素) 的position指定為relative，
(再把阿鼠打個麻醉，)
這樣想把阿鼠放哪裡就放哪裡囉！
阿鼠就躺在正中間囉！！！

如果指定position: absolute，會相對於父元素定位，
接著四個property：top、bottom、right、left
分別代表了與四個方向邊界的距離，
一開始會在top: 0; left: 0;的位置，
如果將兩個相對的位置都設定為0，
就會有置中的效果。


所以我們把四個property都設定為 0
就可以置中囉！
阿鼠其實很可愛對吧??",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192005,DevOps,0,利用Node.js結合Docker開發一個能即時收集條碼的平台系列,2,內容有那些？,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513555975000000000,430,"大致上，我會的主軸會是系統建構過程的重要指令分享，
加上系統分析中，思維裡浮現的操作畫面，和相關的程式碼等等。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190550,自我挑戰組,0,2017挨踢人生大事紀系列,15,凌晨發文真累人！,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513555842000000000,478,"牛哥是四十幾歲的人了~
十幾天下來，為了這鐵人賽，每每在深夜時分發文，著實累人。
因為通常一天下來，唯有在家人都入睡後，我才能真正擁有自己獨處和思索的時間。
和一群年青人比著當鐵人？！
是有些自不量力也~
今天就早日歇息了~
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192003,ModernWeb,0,JavaScript基礎二三事系列,15,Day15　函式就是物件,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1513555534000000000,418,"今天來看看函式Functions
在JS這個物件導向語言裡，其函式的特性被稱為一級函式。
一級函式First Class Functions
開發者對別的基礎型別做的事，也可以對函式去做，因為函式就是物件，而物件就是名稱/值的組合。
開發者可以指派函式給變數，將函式傳入另一個函式，也可以用實體語法建立函數。
函式可以有屬性和方法，因為他就是物件，所以它可以連結到物件、屬性、其他函式(Methood)
關於一級函式的介紹，可以參考：
維基百科頭等函式
ITome專欄物件導向語言中的一級函式　by林信良
而JS的函式還有隱藏的物件屬性，其中最重要的有兩個：
NAME
即名子屬性，然而名子不是必須的，函式也可以沒有名子(匿名函式)
CODE
即程式屬性code property，這個屬性的內容，就是開發者在編輯器上開發時，寫在函式內的程式碼。
我們寫的程式碼會成為這個屬性的值，而CODE屬性的特性是，它的內容是可以呼叫執行的。
來看看以下程式碼
因為函式就是物件，所以我們可以接著這樣寫
結果是

為何沒有報出錯誤訊息？
因為JS函式就是物件，物件可以自由擴增屬性，我們等於對sport這個函式物件，新增一個basketball屬性，其值為字串打籃球。
那這個函式，它的名子、物件屬性NAME是什麼呢？
就是greet
當我們欲呼叫執行函式，在編輯器寫上greet()，其實就是透過函式屬性名子greet去呼叫這個函式物件的定義，而()就會創造執行環境，執行這個函式物件程式屬性裡的內容，也就是console.log('hi');這段程式碼。　
　
　
　
　
小結
今天複習了函式就是物件這個觀念
先前我只曉得函式是物件型別，可以自由擴增屬性，但沒想深入想過函式的名子也是屬性(NAME)這件事。
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分4-34",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191646,SoftwareDevelopment,0,爬蟲始終來自於墮性系列,18,日幣匯率訂閱,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1513555401000000000,474,"很多朋友常常到日本去玩，換匯肯定都是要精打細算，挑選個良辰吉日匯點低的時候換匯，但常常因為忙碌就會忘記這件事情，所以我們今天來寫個關於匯率的主題。
匯率的換匯每個人都有自己的習慣和眉角，那我們就先定義一下我想換匯的條件，若目前這個匯率是 14 天以來最低點匯率點，那我應該就會行動，若不是，那麼就通知我目前匯率多少就好了。

想到換匯，我第一個就想到臺灣銀行的牌告匯率，接著看到臺灣銀行有提供日幣的歷史價格，我只需要比對這邊資料的最近七天，然後判斷今天是不是這七天的最低點，就能達成我們的目標了。
我們會將這隻爬蟲分解成二個動作：

單純的 get request，可以很順利的取得資料。不過這邊有個有趣的狀況，因為這個頁面有歷史線圖和歷史價格 table，所以抓取七天資料可以有兩種做法，一個是直接使用歷史線圖，他的資料來源是 js，所以要用 jsdon 來模擬 js 的執行來取得。另一種是從 table 下手，由 dom 爬取資料。

我們這邊選用 dom parser table 來取得資料，那就來驗證一下是否能順利取得，同時試試看今天是不是今天的最低價格。
發送 get request 並且將結果丟給 callback。
取得七天的賣出價格，使用 filter 去取出條件為「本行賣出」和七天內的資料。然後再去取得最這七天的最低匯率點，若是等於今天的匯率點，那麼 gotoBackRightNow 就等於 true，反之等於 false。
除了日幣以外，任何跟匯率有關的都能抓取，像是比特幣、黃金、期貨...等。每個人都能自己去抓取資料用自己的方法做分析，不過在網路上，其實有很多熱心的人已經做好這些 api，有些收費，有些免費，不過免費的大都會有限制，端看你的使用情況和使用量來決定你要用什麼方式來取得這些資料。
對很多網路上的服務來說，其實難的都不是在技術本身，而是在於當你有了這些資料之後，你會怎麼應用？而不同的人應用的方式不同，就會產生不同的成效，也因為如此 open data 才會如此重要。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍伸應用']",,"['request 歷史價格頁面', '比對七天最低價格', 'getData function', 'filter 7 day', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191952,ModernWeb,1,前端工程師養成手冊系列,15,工程師是否有年紀背景限制？,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1513555234000000000,672,"想想我來寫這個題目還真是不太夠格，2017 年的我今年 31 歲，科系的話大學是 3D多媒體設計、碩士念資管，所以也算一半的本科系，所以這個篇幅，至少我能向你分享我所遇到的前端們，儘管非資工、資管科系，但也憑藉著一步一腳印深耕技術，最終也如願成為前端工程師。
半路轉職需要不小的決定，絕大多數是認為現在的工作非常無聊，而且他們也能夠看出在那個行業的薪資天花板，所以想試試看工程師這行業。
我最常被問到的是：「老師，我做了三年XX業，現在轉職工程師可以嗎？有沒有跟我有一樣的例子轉職成功？」
就我輔導到現在有遇過像是大樓管理員、平向設計、企劃、服務業、業務、建築、金融、旅遊業等等你意想不到的行業，你可能會想說，那他們去面試的時候，不是履歷一看到你之前做了好幾年非相關產業，不就直接被打槍？其實並不會，這些人會有一些優勢，例如說：
很多人都會認為轉職就要拋棄你前份工作的經驗，這種想法完全錯誤，現在各行各業都會有資訊化的需求，就連傳統產業也是。我曾經輔導過一位在金融產業工作三、四年的學生，當她技術有所小成開始準備投履歷，一直很擔心自己沒辦法得到面試機會，我就建議他可以先將履歷開放，自然會有人對你背景有興趣。
最後竟然有間銀行邀請她去面試，原因是他們的內部系統需要大改版，需要有一個金融背景的協助開發，而在同時的時間，有個前端同行也和我要人，做的內容也是跟會計有關的服務，只能說吸引力法則真的很有趣。
另外的優勢在於在面試時如果競爭對手程度都跟你差不多，但你剛好曾經有做過該產業的 know how，自然加分不少，所以在尋求前端機會時，也能夠針對你的前份工作經驗再寫一份客製化的履歷，假使剛好投遞的履歷剛好是相關產業，獲得面試機會自然就大得多。
所以絕對不要嫌棄以往你的經歷，他有助於你找到適合的職缺方向，讓身上的十八般武藝都具有發揮長才的機會，讓未來的你擁有更多武器作戰。像是我就有學生原本做旅遊業的跑去雄獅，做保險的跑去 xx 人壽 擔任前端工程師XD
有工作經驗的人在溝通應對上會比較得體，這也助於面試上具有一定的優勢。最常見的就是我在幫模擬面試時，剛畢業新人沒有社會歷練，過程會比較生疏不自在。但如果你的工作時常會需要「溝通」的話，這段自然是駕輕就熟。就我協助的樣本數，有兩個職業的轉職成功率相對較高，一個是服務業、另一個是業務，很讓人意外吧？也分享給你他們的求職經驗談。
我常會到遇到一些朋友，加社群好友後，就會急迫地詢問我各種事項：
「如果我花半年至一年的時間，有辦法成為前端工程師？」
「工作薪水低，養不活一家老小。」
「工作十年的公司準備要收起來，想尋求新的方向。」
「在家沒辦法集中精神學新的東西」
「很久沒有學東西了，怕自己做不來」
「我不知道自己能不能成功」
絕大多數有家累的人，除了原本工作無聊想轉職外，主要都是因時代進步而逐漸萎縮，只好另尋求職管道，但又因特定行業做得太久，沒有接觸新事物的習慣而感到障礙，例如報社、DVD 書店等等。
在想要轉職又有家累需要維持家計時，行事也會特別小心謹慎，因為對他們來說，要做就必須成功，因為生活已經不允許他們有犯錯的機會，我自己本身現在也是一個小孩的爸爸，所以非常能體會，所以這裡我也分享一些建議給妳們。
「絕對不會有所謂的保證就業這檔事」，我在協助轉職前端的這群人當中，也只有逼近五成的學員有轉職成功。有些人中途覺得那不是他想要的，那其實我覺得也很好，至少你認真嘗試過認為這條路不可行，再找下條路即可，這些曾經投入過的經驗也會帶領你更順利探索自己想要的工作。
人越長越大後時間也會被分散得很零碎，再加上父母年長容易有病痛，又必須兼具家庭事業與瑣事，所剩下的時間也是所剩無幾，就連我也是一樣。但也因為如此，你應該要先學得不是技術，而是在時間管理。
像是我前面介紹的番茄工作法就是一個掌握零碎時間的小幫手，有些人下意識就覺得「做一件困難的事情要花幾個小時」就會懶得動，但如果是只有單純一顆番茄 25 分鐘的時間，便自然能夠打起精神來完成。先學著將困難的東西碎片化，再將碎化的任務利用番茄鐘觀念逐一攻略即可。
另外請不要一個禮拜只抽出一整天的時間來練習，而是應該要求自己每天都要花一小段時間平均練習，這樣好處在於你能夠隨時浸淫在程式世界，投入的效果才好。
在這個產業上你要有「隨時將自己踏出舒適圈」的心理準備，每隔一陣子你又會看到許多新技術取代原本你會的東西。但如果你養成這個心態，就沒什麼事情難得倒你了。只要你遇到一個新問題不會將他當做困難，而是將他視為一個「躍躍欲試的挑戰」。
如果這段背景和你/妳相近，也歡迎你來找我聊聊，我身邊也有一些朋友最後有轉職成功，也能幫您約時間與他們聊聊，畢竟背景相同也能貼近彼此的想法，例如這位朋友便是。
我曾經跟一位學生辯論「邏輯培養」的問題，他一直嫌自己邏輯很差，好像永遠都沒辦法培養起來。後來我向他提議做一個   todolist  來練習。
學生：「老師..做這東西沒辦法找到工作吧，而且我有點放棄了，每次寫到一半就都想不出來該怎麼做...」
我說：「凡事都是都基礎打起的，而且你幹嘛小看 todolist，它能做得事情可多了」
學生：「...(一臉不相信」
我說：「這樣好了，你先做新增跟刪除 todolist 的練習，做完後我會幫你改寫，你就從我寫的內容去看我們的差異」
因為我很瞭解她的背景，所以我都會將程式碼用七成看得懂三成她沒用過的觀念來提升他的程式視野，她再自行找資源瞭解這些程式與邏輯上的開發，之後我們又接著做：
當學生做到中間，我就說：「這樣你不會再小看 todolist 了吧？」
學生：「真的...原來一個 todolist 可以做那麼多東西。」
所以當你在研究程式時，就像我前面所提到的，不曉得怎麼寫的時候，先去 Github 上找一個「比你會寫一點的同學」，能看懂七成，其他的三成就可以自己研究。在研究對方的範例時，你的邏輯才會逐步地培養起來。
另外在籌備前端項目時，去參考一個成熟的服務也是個很好的學習方式。例如上面的 todolist 列表，就可以參考這個服務，去使用他的功能，並思考如何從小做到大，才能讓你的技術能夠更加全面。
年紀是否會影響到前端轉職呢？我都會拿去年受邀參加 中國 CSS 開發者大會時，在機場上遇到的賀師俊 來勉勵各位，他是在中國極有知名度的前端開發者，其他開發者都稱他為「賀老」，原因也是他的歲數超過 40 歲了。在兩天的旅途中也時常交流前端技術，更讓我驚訝的是他的前端思維並未因年紀減退，反而有遽增的趨勢。研討會上也不乏遇到許多 6、7 年生在相互交流，聊得不是自己自己歲數大了怕找不到工作。而是最近研究了什麼有用在專案上，或是覺得公司很差，準備要跳槽。
所以不要讓年紀下意識影響你的技能學習，工程師並不是體力活，你所要做的是就是持續更新你的大腦，讓它隨時跟上時代潮流，當科技有所變動時，你也能因應時勢來適應社會。",,"['各行各業轉職前端', '家有老小轉前端', '無資訊背景，自認邏輯不好轉前端', '不惑之年轉前端', '延伸閱讀']","['滿足T型人才需求', '具有足夠的社會歷練', '沒有人能保證你絕對成功，除非是詐騙集團', '時間管理比任何事都來得重要', '要有心理準備隨時面臨新事物', '小結']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191962,ModernWeb,0,Nest.jsframework30天初探系列,14,Nestjsframework30天初探:Day14MicroServices,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1513554980000000000,409,"
這邊的MicroServices的意思是透過transport layer(傳輸層)的協議(TCP)起一個應用程式提供服務。Nestjs原生支持兩種方式，TCP、Redis pub/sub,不過透過實作 CustomTransportStrategy介面，就可以簡單導入新的transport strategy。
connectMicroservice 會將MicroService連結到NestApplication介面，並將Application轉換成混合型介面。另外，connectMicroservice()方法可以傳入四個參數，

MicroService成功。
程式碼都在github",,['MicroServices'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191939,自我挑戰組,0,ArasPLM開發練功30天系列,14,[Day14]用ASP.NetWebForm連線至Aras,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1513554853000000000,387,"一般開發 Windows Form和 Web Form都需要引用Aras的DLL元件，可以先從安裝好的Aras資料夾 C:\Program Files (x86)\Aras\Innovator\Innovator\Server\bin裡找到所需要的元件，當偵錯後發生錯誤有元件不存在，表示元件參考少了其他DLL，以下就先建立一個新的Web Form專案
新增專案

選擇Web Form

建立完畢後，會有預設檔案

新增一個項目，選擇Web表單

從C:\Program Files (x86)\Aras\Innovator\Innovator\Server\bin上複製元件到自己的專案bin資料中

加入IOM.DLL參考

加入IOM.DLL參考

在Page_Load寫登入程式

若偵錯模式下，可以驗證成功，代表連線成功會有正確的Innovator物件，這樣就能做Aras Method一樣的功能了。若是登入失敗，可以再加入login_result.getErrorString()來看看錯誤是什麼。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190558,DevOps,0,利用Node.js結合Docker開發一個能即時收集條碼的平台系列,1,收集條碼~~緣由,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513554839000000000,417,"Docker有著容易建構，移植方便，效能需求低等好處。
Node.js能統一語法，打通前後端的開發作業環境。
結合兩者來處理一個收集條碼的需求！
條碼在生活中，處處可見！
製造業裡，倉庫一堆堆進進出出的零組件，少不了要把條碼的資料收集起來備查。
思考建構一個簡單的小系統，針對一組組的成品，
把每組成品裡的條碼收集到一個小型資料庫。
主要目的是日後能够查詢某單一零組件的條碼，是屬於那一組成品，
甚至是那一組出貨訂單？！
希望短短30天，能把規畫的思維和設計內容記錄上來，也順利完成這個小系統的開發。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191604,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,13,13.單元測試的概念與原則(待補完),依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1513554771000000000,390,"在談談單元測試，我們閒聊了一下單元測試，接下來，我們來聊聊單元測試的基本原則。
筆者在這邊再次說明，在這個系列文章，大多是說持續優化程式碼的方向，使用的技術的概念與原則。文章內容不會提過於深入的實作與內容，因為每個主題，都是一門很深的學問。筆者沒辦法，也不可能在這 30 天，鉅細靡遺的全部說明。
最小的測試單位
不與外部（包括檔案、資料庫、網路、服務、物件、類別）直接相依
一個測試案例只測一種方法
測試案例不具備邏輯
測試案例之間相依性為零
Fast 快速
Independent/Isolated 獨立
Repeatable 可重現的
Self-Validating 可自我驗證
不管單元測驗通過否，應該可以從測試工具產生的測試報告，明白的得知測試結果與失敗原因。
Timely 即時
Arrange
在這部份，負責宣告或定義所有使用的資料、物件、期望輸出的結果。
Act
Assert
就筆者目前己知的單元測試，本身是非常吃物件導向的特性與 SOLID 原則。所以，假若本身對物件導向相關概念不熟悉的話，是非常難切入單元測試的。
順帶一提，對於單元測試的測試案例，應該也要特別注意測試案例的閱讀性，當測試案例己經不符合待測試功能本身的特性時，也會需要做對應的修改。這時，測試案例的閱讀性就顯得十分重要。",,"['1. 基本準則', '2. FISRT', '3. 測試案例的分工 - 3A', '4. 後言', '5. 推薦']",,"['書藉', '文章']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10192000,ModernWeb,1,PHPlaravel的邂逅系列,14,DAY14-laravelsql語法介紹,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1513554634000000000,371,"資料庫部分是用sequel pro這個軟體來開起來的

登入帳號用root密碼預設為空，其他都預設就可以了。

，先新增一個database名稱，取名跟專案一樣(firstproject)
接著到專案的目錄下面的.env，設定上面幾個選項
在news的migration中新增title和descript的欄位，在終端機下php artisan make:migrate
先新增一筆資料到資料庫裡，執行完後再去資料庫看看有沒有新增成功，也可以多新增幾筆。

上面的route會把每個最新消息的title印出來，也可以直接回傳$results看看裡面的陣列結構。",['DAY14-laravel sql query介紹'],,['今天來講講怎麼新增資料和查看資料'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191999,SoftwareDevelopment,0,簡潔高效的PHP&Laravel工作術：從ElementaryOS下手的聰明改造提案系列,7,第7天：安裝Firefox瀏覽器,shengyou,https://ithelp.ithome.com.tw/users/20107229/ironman,1513554276000000000,390,"本文同步刊載於作者部落格：https://medium.com/@shengyou/2018ironman-eos-for-php-developer-day7-bb3915b51634
elementary OS 出廠預設帶的瀏覽器是 Epiphany，它是一個奉行簡單唯美原則的瀏覽器。大多數您需要的功能，都可以在 Epiphany 上找到，書籤、歷史紀錄、網頁原始碼一應俱全。
不過，由於這個系列的目標對象是 Web 開發者，相信您一定有自己習慣的瀏覽器。在這些眾多瀏覽器裡，也一定不乏 Firefox 的愛用者。現在，就讓我們在 elementary OS 上安裝 Firefox 瀏覽器！
在 elementary OS 上安裝 Firefox 瀏覽器非常簡單，筆者將介紹兩種方式：
在軟體安裝與更新一篇裡，筆者介紹了 elementary OS 內建的應用程式商店。現在，我們就實際透過應用程式商店來安裝 Firefox 瀏覽器吧！請先點擊 Dock 上的應用程式商店圖示，開啟應用程式商店介面，然後在右上角的搜尋框輸入 Firefox。

出現 Firefox 選項後，點選進行應用程式詳細介紹頁，在這邊會有應用程式的詳細介紹。因為 Firefox 本身不需要額外付費使用，所以直接點選 Free 即可開始安裝。

安裝前會先彈出需要系統管理員權限的對話框，輸入您的密碼即可開始下載/安裝 Firefox。


安裝完成後，就可以在應用程式選單裡看到 Firefox 的圖示，點選就可以開啟 Firefox 瀏覽器。當然，您也可以將 Firefox 放到 Dock 上方便隨時開啟。

就這樣，非常簡單吧！
當然，假如您比較習慣在終端機裡透過套件管理庫來安裝軟體的話，也可以直接下指令安裝，在 elementary OS 裡，Firefox 瀏覽器的套件名稱就是 firefox，所以指令就是：

一樣也是需要輸入具 root 權限的密碼，指令跑完就裝好了。一樣可以在應用程式選單裡看到 Firefox，剩下就看個人習慣設定和安裝 Firefox 的外掛程式了。

您有推薦的 Firefox 外掛程式嗎？歡迎在留言裡跟我分享！",,"['透過應用程式商店安裝', '透過套件管理庫 (apt) 安裝', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191998,DataTechnology,0,Python學習筆記系列,14,[Day14]鏈式比較運算子和陳述式,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1513553716000000000,367,"
Python vs 其他語言
如果我們今天有一個陳述式，如下
""如果a比b大，則將a值設成2，b值設成4""

我們可以注意到Python的寫法較其他種語言簡潔，藉由冒號和空白取代()和{}。
陳述式以冒號和空白(縮排)用來表示程式區塊，縮排為4個空白鍵或一個tab鍵。
不像其他語言一樣，Python不需要用分號結束陳述式。",,,"['Python比較特別的地方為可以將多個比較運算子放在一個表達式中', '介紹Python陳述式']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191990,自我挑戰組,0,自我挑戰日記系列,12,CSS：background-clip裁切,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1513553541000000000,371,"今天要作的是裁切範圍
裁切範圍也包括一個很有趣的效果
就是用顏色或圖片填色的文字
先做裁切漸層文字

用這效果作出的標題可減少製作圖檔及出現圖片壓縮後的雜點
裁切範圍 ：  border-box | padding-box | content-box

border-box 範圍在 border 外圍
border 的粗細會影響到裁切範圍

padding-box 範圍在 border 之內
依外框大小決定
不管 border 粗細和內文的多少

content-box 範圍是文字框
不論外框大小
範圍就只有文字的部分
--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191997,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,14,Reactfundamental,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1513553339000000000,352,上面的範例也能寫成非 JSX 形式。,,"['React is all about components', 'JSX', 'You can use JavaScript expressions anywhere in JSX', 'You can write React components with JavaScript classes']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191847,DevOps,0,Openstack學習與介紹系列,2,DAY2Openstack安裝與介紹-1,帥哥,https://ithelp.ithome.com.tw/users/20103615/ironman,1513552915000000000,366,"https://docs.openstack.org/ocata/install-guide-ubuntu/overview.html
最基礎的Openstack架構，需要2個Host，分別是一個controller跟一個compute node。
controller負責掌控整個Openstack，操作、控制各個Host，並具有網路管理的功能。
在前幾個版本的Openstack裡，Networking跟controller是分開的。
在目前這個版本[Ocata]，已經將Networking的部分併入。
要launch一個VM(instance)，最少需要controller與compute的幫忙。
Controller
The controller node runs the Identity service, Image service, management portions of Compute, management portion of Networking, various Networking agents, and the Dashboard. It also includes supporting services such as an SQL database, message queue, and NTP.
Optionally, the controller node runs portions of the Block Storage, Object Storage, Orchestration, and Telemetry services.
The controller node requires a minimum of two network interfaces.
Controller上面有 ""身分認證的服務""(Identity Service)、""映像檔管理""(Image Service)、""網路管理(Networking Service)""、""運算資源管理(Compute Service)""、Dashboard。
另外，他還有包含了像是SQL DB、Message queue(EX: Rabbit MQ)等服務。
DashBoard是一個提供web介面的服務，可以透過WEB UI介面來操控整的Openstack。
由於網路架構的問題，Openstack的controller跟compute，都需要2張網卡。
Compute
The compute node runs the hypervisor portion of Compute that operates instances. By default, Compute uses the KVM hypervisor. The compute node also runs a Networking service agent that connects instances to virtual networks and provides firewalling services to instances via security groups.
You can deploy more than one compute node. Each node requires a minimum of two network interfaces.
Compute上，提供了hypervisor的服務。
Q :
什麼是Hypervisor呢?
A :
在compute node上面，我們需要將我們的硬體資源虛擬化，方便切割、規劃，才能供給VM使用。那Host是怎麼將自己的硬體資源虛擬化，讓instance只用呢?
是使用了一個叫做 Hypervisor 的程式實現的。
根據 Hypervisor 的施行方式與位置，虛擬化又分為2種：
1型虚拟化
Hypervisor 直接安装在Host上，多個VM在 Hypervisor 上運作。Hypervisor 實現方式一般是一个特殊的 Linux 系统。Xen 和 VMWare 的 ESXi 都屬於這類型。
2型虚拟化
Host上首先安装一般的OS，比如 Redhat、Ubuntu 和 Windows。Hypervisor 作為 OS 上的一个程式運行，對VM進行管理。KVM、VirtualBox 和 VMWare Workstation 都屬於這類型。
理論上：
1型虛擬化一般硬體虛擬化功能會特別優化，性能上會較好。
2型虛擬化因為是在普通的OS上，較靈活。
在Compute node裡，你可以選擇是否要用KVM(預設)來做Hypervisor。同時也提供了一些networking的服務，因為在上頭的VM需要""對外網路""與""跟controller""的連接。
並根據security group提供一些基礎安全防護。
因此，在compute node上也需要2張網卡。
KVM
節錄至 虚拟化 - 每天5分钟玩转 OpenStack（2）
KVM 全名 Kernel-Based Virtual Machine。也就是说 KVM 基於 Linux Kernel的VM。
KVM有一個module叫 kvm.ko，只用於管理 CPU 和内存。
那 IO 的虛擬化，比如儲存和網路設備由誰實現呢？
交给 Linux kernel和Qemu来。
做為一個 Hypervisor，KVM 只關注虛擬機調度和内存管理。IO 任務交给 Linux kernel和 Qemu。
Libvirt
大家應該在查KVM時，大多會看到的關鍵字。
Libvirt 是啥？
簡單說就是 KVM 的管理工具。
Libvirt 除了能管理 KVM 这种 Hypervisor，還能管理 Xen，VirtualBox 等。
OpenStack 底層也使用 Libvirt，所以要學。
Libvirt 包含 3 个东西：backend daemon process、 libvirtd、API 库和命令行工具 virsh
打到快睡著了 ZZZZZZZZ",['DAY2  Openstack安裝與介紹 - 1'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191996,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,13,【Day13】解除依賴之四：Mock改寫我們的LogAnalyzer,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1513552598000000000,374,"上一篇文章，說明了什麼是mock，以及要如何區分stub和mock。這篇將會改寫我們LogAnalyzer。
我們要測試，是否LogAnalyzer首先我們需要修改我們的程式流程，從取得檔案名稱，衍生至從網站中上傳檔案，然後取得檔名，再檢查檔案名稱，當檔名正確，回傳為true，否則為false。
所以變成：
然後使用mock後，會變成：
首先我們先製作屬於我們的主要功能與程式（Day13_LogAnalyzer）：
接著是**測試的程式Day13_LogAnalyzer_Test**：
最後結果成功！！（可以是看看錯誤的，會有怎樣的錯誤訊息）
明天製作出Stub和Mock一起使用的案例。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191979,SoftwareDevelopment,0,每天Racket3分鐘系列,14,"(sendday-13set-title!""Racket也有物件導向—Class與Object"")",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1513552394000000000,362,"今天禮拜天，廢話不多說，我們先上一個範例程式：
執行之後，會得到以下結果：
為什麼直接看程式呢？因為我想讓大家先看不懂，再來詳細地討論 Racket 的物件導向。
說到要寫物件導向程式，你會先想到什麼呢？類別？物件？還是 .？如果換個問題好了，我們有一個名叫 racket 的學生，他的基本資料是：
他這學期修了三門課：
你會怎麼表示並解決這樣的問題呢？
我們面對複雜世界的複雜問題，最常使用的解法，是分而治之法。在沒有物件導向的語言裡，我們若要表達上述方法，可能會考慮以下流程：
在這樣的程式設計觀點裡，我們看待問題，將它分為資料與資料結構，以及演算法與流程，這樣的觀點稱之為演算法分解。然而，在面對更高的複雜度時，雖然我們可以按照資料與它的型態來分辨處理的問題領域，但諸多的函式僅透過參數或回傳值表達了它與哪些資料之間的關係，這樣分解的方式，其實也製造了其他的副作用。
因此，Simula 67 與 SmallTalk 導入了另一種問題的分解方式，稱之為物件導向的問題分解方式，它的概念是這樣的：
因此，在物件導向的解法觀點中，程式的操作就是物件之間的互動，演算法不是單純的程式邏輯組成的代碼，而是物件的行為，資料不是單純的數字與文字，而是物件的屬性。
因此，這就是我們上面那段程式碼在操作的內容。
其他的程式細節，容我明天再完整說明。",,"['1. 這個 OOP 哇哪跨攏謀', '2. Lambda 風味的物件導向']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191995,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,13,(Day13)取出有幫助的分詞資料,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1513551552000000000,402,"接下來，回到本專案的正題，直接把先前爬出的第一層議題欄位，餵進去處理。
江~江~ 結果就是長這樣子

來看看前50是那些內容吧!

看來是一些單字無義的詞句，用掉最多! 直接濾掉字元長度>1
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191587,自我挑戰組,0,iflen(learning.python)==30:系列,14,Day14-Tuple,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1513551349000000000,375,"tuple是sequence type的一種，有不可異動(immutable)的特性，通常用來存放異質性(heterogeneous的資料。
可以indexed或unpacking的方式取出tuple的元素。
empty tuple，但有甚麼用途呢?
只有一個元素的tuple
多個元素和異質性元素
操作層面分為取出資料、如何走訪
可以取出tuple中的某一個資料和部分資料，分別為indexed和sliced或者利用unpacking
和list相同，使用for加上in或是while走訪tuple",,"['概觀(Overview)', '宣告', '操作', '參考']","['取出資料', '如何走訪']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191991,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,14,[Day14]EasyFlowGP--Web表單元件-Button資料選取器進階應用,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1513550524000000000,393,"續昨天分享的Button 資料選取器，這一篇要和大家分享的是資料選取器進階應用
資料開窗除了單選之外，也可以多選(複選)。
再選取資料後，呼叫函示進行資料的編輯。
舉個例子，開員工資料，選擇多位員工，且將值放進Grid表格中。
這就應用到資料多選的設定，資料列選取後，呼叫功能函示，將資料解析再逐筆放進Grid中。

設定方式
Step1.選取資料設定

Step2~3.設定欄位值和名稱，這設定細節和昨天介紹一樣，省略說明。
Step4.請指定回傳值是放在一個隱藏欄位中。
完成以上1~4的步驟後。
再設定Grid表格的欄位列，以本文例子，從資料庫取出4個欄位值(工號、姓名、部門代號和部門名稱)
其中第一欄放置序號，再將設定值[將最前面的欄位設為自動增加的流水號]的選項勾選，
系統會自動編序號碼。

最後請切換到表單的JavaScript頁面，增加函示MeetingUserList()
以上的操作，就完成開窗資料多選，陳列在Grid單身的方法。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191904,SoftwareDevelopment,0,[行銷也要自動化]用PythonSelenium+NodeJS+AmazonEC2打造簡易關鍵字搜尋報表應用！系列,2,Day1：NodeJS基本安裝、環境設定、淺談Connect｜KeywordSearch1.0爬蟲關鍵字報表工具,jiunyiyang,https://ithelp.ithome.com.tw/users/20107784/ironman,1513550523000000000,402,"什麼是KeywordSearch 1.0 爬蟲關鍵字報表工具？
是作者近期兩周實作出來的小專案，結合不同關鍵字搜尋工具的api及部分爬蟲，讓使用者可以一鍵拿到搜尋趨勢和相似詞組推薦。此專案尚有很大擴充空間，未來在作者自己的部落格若有進一步更新，會回來附在此處：________
為什麼要做KeywordSearch 1.0？
精闢有效的前導市調可以避免不符市場需求的產品出現，定期觀測關鍵字趨勢，是網路行銷或市場分析人員的日常；但網路資訊四散各地，市調人除了大量閱讀、蒐集、篩選判斷外，還要把資料整理過後呈現給團隊，這個過程非常需要耐心、想像力、判斷力、大把時間，能夠獨立做出完整市調非常不容易；因此作者和朋友想幫市調人員節省文書、搜尋時間，讓他們能專注在判斷、分析上。
現在進度到哪了？為什麼文章是有關nodejs？
這個工具已經開發完成，現在在測試修改中，這30天文章是想把自己的開發過程完整記錄下來。第一周的進度是初步架好NodeJS App的基底，以及在jupyter上測試爬蟲script。
昨天我們簡單玩了一下爬蟲，今天就要來開始準備我們的應用程式啦！
就像你昨天看到的，雖然用terminal或jupyter都可以run爬蟲程式，但如果想開發成一個人人都可以使用的application，我決定把爬蟲程式寫進nodejs的function來執行。
第二天進度條來到安裝nodejs XD
採用PPA(註1)來安裝最新的nodejs(包含npm)，
註1：PPA(personal package archive)是為了方便Ubuntu用戶安裝那些無法進入官方套件庫的package而生的套件管理包。
安裝完畢後，你可以運行以下指令來檢查版本：
原本我的appliation是直接用Express 4來架構，不過既然我們提到了nodejs，還是來理解一下他的原理。
確認好node及npm都安裝了以後，在你滿意的地方創一個新資料夾、進到資料夾中並把他用code editor開啟（我預設的是VScode）：
new一個app.js，
註2：這個內建的http module是用來讓nodejs能順利在超文本傳輸協定（hyper text transfer protocol）中傳遞資料。
順利的話應該會出現""Server is running at localhost:3000!""，切換瀏覽器到localhost:3000，也能看到Hello Keyword。
剛剛看到的是最陽春的nodejs，你可以發現他只能response一次資料。如果我們有不同次序的資料想要response到client端該怎麼辦呢？這時候你可以用nodejs的middleware framework：Connect。
他帶有許多的內置middleware，詳細可以拜讀這篇：http://blog.fens.me/nodejs-connect/
其中的next()，用來連結middleware之間的啟動。如果我們在 function firstOne 把 next() 拿掉，那下一個 function nextOne 就無法執行到了。
下一篇我們要來使用Express 4 重新架構（是很快的那種 ;-) ）並處理route的部分。",,"['安裝 Nodejs // Ubuntu 16.04', '如何 setup 一個最陽春的 nodejs server', '同場加映：Connect']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191992,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,15,前端也需要編譯？Transpile、Compile、Minify、Uglify基本介紹,"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1513550368000000000,383,"在 Day10 的時候，我有預告之後會介紹的幾個主題，包含了 npm、Webpack、Babel
現在我們有了 JavaScript 基本模組化的概念後
終於可以來打魔王，也就是介紹「Webpack」了！
我們花了許多篇幅介紹「前端模組化」
基本概念就是，我們想自幹一套 JavaScript 原生缺乏的模組系統
我們看了許多民間自幹的模組化套件，像是
我們前幾天講述歷史的時候，有提到 AMD 規範比較沒落了
所以後來前端模組化，我們幾乎都是使用 CommonJS 的規範
在我們介紹有哪些前端模組化方案可以使用前
這邊會先介紹一些實際「使用前端模組化」會是什麼樣子
比較能幫助我們了解為什麼接下來介紹的工具，會有這些功能
這邊有人會叫他 compile(編譯) 或是 transpile(轉譯)
(我知道編譯有特別定義，不過如果在前端的討論範圍不會有太大影響)
因為原生 JavaScript 不支援 像是 require, export 這些 CommonJS 定義的物件
所以我們寫完一份模組化的 code
實際上，丟到瀏覽器，他是執行不起來的
這邊現在主流的做法，是使用一些 task runner (建置工具)
這些 task runner 有點像是 livereload 這樣的開發工具
他會在你每次儲存後，都把你剛剛寫的 code 都轉成瀏覽器版本的 JavaScript
像是我們待會會介紹到的 Webpack，他也有提供轉譯的功能
原本我們開發上寫了一個 module
他編譯出來的結果大概會長這樣(簡略版)
第一次看可能很嚇人
不過你會發現，基本上他還是沒有超出我們的知識範圍
這段 code 的功用很簡單
他寫了一個 IIFE (立即執行的 function)
並且把你寫的所有模組都當作參數，丟進這個執行器裡面去跑
全程都包在 IIFE 裡面，沒有全域變數
像是常用的框架 Vue, React, Angular
都會發展出自己特別的語法
(像是 Vue 有 .vue、React 有 .jsx)
這些語法跟 Module 一樣，原生瀏覽器是不認得的
所以我們也會得把他做一次編譯
最後，寫完 code 時，我們還會根據自己需求而做 minify 或是 uglify
什麼是 minify, uglify
如果你有打開網頁看原始碼的習慣
像是 Facebook，你可能會發現你看到的原始碼很髒很亂
變數全部都是 a, b c ，並且都寫在同一行
不，這不是因為在 Facebook 工作寫的 code 就這麼髒
這是使用特定的工具像是 https://javascript-minifier.com/ 轉譯出來的

(Vue 的 minify 版本)
要這樣做的原因有兩個
minify 通常只會把它轉成越短越好
而 uglify(混淆器)，通常還會把其他邏輯打散
今天我們簡單介紹了我們在前端使用 task runner 會做的事情
通常 task runner 很簡單
我們會指定一系列我們寫完的 code 該怎麼被轉譯
像是今天我使用 JSX 以及模組化的 style 來寫了一個網站
我的 task runner 設定就會長得像
希望這樣可以幫助了解前端為何會發展出 task runner 這樣的機制
明天會介紹常用的 task runner，再會！","['什麼是 Webpack', '知識補充', '1. 在前端實作模組化，是需要把 code 做 transpile(轉譯) 的', '2. 通常不只有模組需要編譯，你還會編譯語法', '3. 根據特定規則的轉譯', '明天']",,['舉例'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191977,ModernWeb,0,Confluence線上協同作業之平台系列,13,Page頁面瀏覽率統計,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1513549748000000000,379,"每篇文章有多少人看過，這會是版主們所關注的重點，畢竟還是需要知道那些文章是具有吸引力、人氣較高的文章，而以下有2個方式可以參考使用，其一是使用Page View Tracker plugin ( 可參考網址:https://marketplace.atlassian.com/plugins/net.kentcom.page-view-tracker/server/overview )，透過安裝此plugin後，將可以在每個page下透過page view statistics功能來看出每個page的瀏覽紀錄

而每個page的瀏覽紀錄將會以下列清單格式來呈現

而我目前知道的是他可以透過SQL語法來抓取，但目前我不知道如何來與pageid及spaceid來結合，因為試想如果可以將他與另外兩個資料表content及spaces來結合應用，應該會有更多管理報表可以產生來使用

而另外一個方式是使用Viewtracker Plugin ( 可參考網址：https://marketplace.atlassian.com/plugins/ch.bitvoodoo.confluence.plugins.viewtracker/server/overview )，而因為它需要手動加入元件到每個page內容下，經過與原廠確認後，可使用下列的語法來快速在每個頁面來加入這個plugin，

而語法的部分可使用下列語法 (因為我們是要在每個page的表尾來顯示瀏覽清單)
將可以看到這個page在那個時間點之後，被那些帳號瀏覽的次數統計

身為版主的人員也將會focus這些文章的瀏覽次數統計來調整自己的POST文章內容",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191981,SoftwareDevelopment,0,初探Kotlin系列,12,[Day12]PropertiesandFields-1,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1513549612000000000,374,"Kotlin的類別中可以宣告可變(var)或唯讀(val)的屬性
使用類別中的屬性與Java引用方式相似
property的引用其實是對getter及setter方法做訪問
initializer跟geter及setter是可選的 var是允許有getter及setter方法
val不可以有setter方法","['Declaring Properties', 'Getters and Setters']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191989,ModernWeb,0,從無到有，使用Go開發應用程式系列,9,MapType,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513549525000000000,384,"許多語言都有提供 key-value 存放方法的 map 結構， Go 使用內建型態 map 實作。
map 型態的表示方法為： map[keyType]valueType ， map 是關鍵字， keyType 必須是可比較（Comparable）的型態，如 string 、 int 等， valueType 則是內容形態。
建立 Map 資料型態也是用 make ，設定與取值的方法跟大部分的語言（如 PHP ）都很像，範例如下：
如果有初值的話，設定的方法很像 JSON ：
值得一提的是，宣告值最後一行 ""Chou"": 60, 的逗號是必要要加的。
這個寫法如果不給初值的話，就會跟使用 make 方法結果一樣：
map 跟 slice 一樣是使用參考，比方說：
試了幾次，它的順序應該是不固定的。
取值使用 [] 指定 key ，事實上它會回傳兩個值，如果 key 存在，會回傳值與 true ； key 不存在則回傳零值與 false ：
移除 key 使用 delete 函式：",,"['建立', '操作', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191985,自我挑戰組,0,"Let's""Go""系列",12,Day12　DataTypes,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1513549050000000000,375,"今天要提的是Map，Map是由key、Value所構成
Map內的元素我們可以透過map[K]來取得它的對應值
若要做刪除則可以透過內建的delete函式",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191969,自我挑戰組,0,rails學習紀錄系列,5,[Day5]關於Rspec的簡單介紹,thehappyend,https://ithelp.ithome.com.tw/users/20107708/ironman,1513548769000000000,381,"前言：什麼是Rspec
RSpec是一套Ruby語言底下的自動化測試框架，主要用於測試程式執行是否符合我們想要的結果，可在實際手動執行之前先讓程式自動進行測試，節省開發和維護的時間。由於RSpec強調其寫法非常口語化，有別於一般的測試語法，又稱BDD(Behaviour driven development)開發框架，意思是開發者可以將RSpec視為一種規格撰寫的說明書。在實際開發之前先將規格寫好，像是說明書一樣，接著再照這份「說明書」進行開發。這也是為何RSpec要將自己的每一個測試單元都稱為「specification」，字面上就是「規格」的意思。
以五倍上課的測試舉例
參考資料：
寫測試讓你更有信心 Part2
Ruby on Rails 實戰聖經
Rails 使用 RSpec 寫測試：基本說明及安裝篇",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191982,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",14,Day14-HBaseBulkload簡介,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1513548533000000000,386,"前面介紹了使用hbase shell與HBase client APIs新增資料，但這兩種方法只能一次新增一組key-value的資料，假如有一批檔案數十GB甚至上百GB，一筆一筆慢慢put所需要花費的時間就無法想像了，更不用說觸發split或是compact的情況下，效能可能會更加低落。
無論是hbase shell或是API，使用put新增資料時，會被放入被稱為MemStore的記憶體內，同時寫入WAL[1]。在頻繁地寫入的使用情境，為了保護資料的完整，卻會讓寫入的效能低落。
[1] Write-Ahead-Log，用來記錄對HBase表格所有操作的日誌，用來確保table資料不遺漏，一個RegionServer只會有一個。
為了提升輸入資料的效能，HBase提供bulkload的功能，讓使用者可以一次將大批資料透過MapReduce的方式將資料存入。
先來看一下HBase Bulkload的Usage：
上傳至HDFS路徑/tmp/bkloadInputData/test.txt
成功執行後，可在http://{hadoop-master}:8088的頁面看到有個importtsv的JOB正在執行，成功執行完成後bolkload第一階段也就完成了。
這個步驟所需要花費的時間相當短，數秒鐘就可完成。
經過Step 4 與Step 5後，test.txt的檔案內容就已經被匯入bkloadTable資料表內。匯入資料時可以搭配前面所介紹的Rowkey設計，這樣會讓HBase發揮更好的效果。接下來的篇章要來介紹HBase相關的SQL工具。",,['HBase Bulkload 步驟'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191978,ModernWeb,0,重新學習網頁設計系列,14,DAY14.Three.js初探,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1513546591000000000,402,"用來建立3D場景的函數庫其實很多，Three.js是其中之一
關於Three.js的介紹網路上有很多，在此就不多贅述
直接從應用層面說起。
首先到 Three.js GitHub 下載, 或使用 CDN來取得three.js。
以上簡單的10個步驟已經在該html中建立3D元素, 並且渲染
但結果並不令人滿意, 因為畫面將會是黑色且無任何內容
因為此時的我們的相機camera與方塊cube都在該場景scene的中間
所以我們不會看到任何東西
因此必須做點調整
如此一來就會有一個帶有法向量顏色的方塊在我們場景scene中。
以上範例是實作3D的幾個重點
步驟1 ~ 步驟5 是每個3D環境都必須建立的前置作業
步驟6 ~ 步驟 9 是一個實作3D物件並加入場景scene的範例
步驟10是渲染畫面使內容呈現的關鍵, 少了這個步驟畫面不會出現任何東西
第一個關於three.js的主題快速帶大家導覽了一下建立3D場景的步驟
在這之後會寫一些關於three.js個元件使用細節。",['DAY 14. Three.js 初探'],"['HTML', 'app.js']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191892,Security,0,CEH之越挫越勇系列,13,[Day12]系統入侵-概念篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1513546488000000000,679,"目前進度：
資訊蒐集(Footprinting) > 網路掃瞄(Scanning) > 列舉攻擊(Enumeration) >系統入侵(Hacking)

接下來入侵系統步驟：
(1) 覆蓋原有密碼(recover passwords)
(2) 取得執行存權(gain unauthorized access)
(3) 猜密碼(guessable passwords)
偷看、偷聽、跟蹤…
在背後偷看密碼(shoulder surfing)
鍵盤側錄(keyboard sniffing)
社交工程(social engineering)
傳統破解方式，直接與目標接觸，以不斷嘗試密碼或弱點去猜測密碼
防禦方式是限制密碼錯誤次數，並且將其阻擋其來源或限制再次登入時間
將密碼檔離線做靜態分析，故較不容易被偵測到
使用字典檔破解(dictionary attack)
暴力破解(brute-force attack)
混合攻擊(hybrid attack)：先用字典檔猜密碼後，再用暴力破解嘗試
預先計算Hash(pre-computed hashes)
彩虹表攻擊(Rainbow Talbe Attack)：rtgen、Winrtgen
分佈式網路攻擊(Distributed Network Attack)：Elcomsoft
防禦方式：Password Salting (加密)
Microsoft Authentication =>
Security Accounts Manager(SAM) Database
NTLM vs LM authentication protocol
路徑：C:\Windows\System32\config\SAM

NTLM：NT LAN Manager (NTLM)驗證通訊協定是微軟的一種安全協定，根據挑戰或回應(Challenge/Response)機制進行使用者身分驗證。
//NTLM 相關弱點：CVE-2017-8563
延伸閱讀：http://blog.darkthread.net/post-2016-04-17-check-auth-method-of-browser.aspx","['System Hacking', 'Password Cracking', '防禦方式']","['破解密碼工具', '執行應用程式', '隱藏檔案']",['密碼攻擊類型'],"['(1)  非電子攻擊(Non-Electronic Attacks)', '(2)  線上主動攻擊(Active Online attacks)', '(3)  線上被動攻擊(Passive Online Attacks)', '(4)  離線攻擊(Offline Attack)']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191968,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,14,[Day14]React-Redux?React跟Redux合體,dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1513546162000000000,384,"
我們先把react component做個區別， Component有分 Component 跟 Container. Container 就是會跟redux有互動的， Container 處理狀態跟資料然後把相關的資料分給下面的Component。 那Component就是單存的把container傳給它的資料顯現出來，還有處理靜態的東西（比如html, css）。 有時候container又稱為smart component(聰明的組件) 然後 component 為笨的組件(笨的組件)。
我會用我的recipe 專案來做教學。 Recipebox Github
mapStateToProps 是串redux的state 。
mapDispatchToProps 是串redux的action。
5.現在我們把state跟action 當成props 傳給我們的components(dumb components). 在以下的例子，我們把我們的質傳給Recipelist 跟AddForm component. 接下來我就可以在我的 component呼喚那些 action 跟 state。
以上就是如何把redux跟react串在一起。 當我們的App慢慢長大，我們需要一個中央狀態管理器。 那你以為這樣就結束了嗎？ 當然不是， 我明天教大家如何用redux dev tool. Redux dev tool 是一個chrome的工具 我們可以追蹤我們的action.",,"['介紹', '設定', '結尾', '參考連結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191941,自我挑戰組,1,使用PHP串接金流相關API系列,7,Day06-Linepay(4)支付API,royal801991,https://ithelp.ithome.com.tw/users/20107301/ironman,1513546065000000000,425,"在 Day 03 - Linepay (2) 功能介紹 有提到，一般付款有 授權 和 請款 兩個步驟，今天的內容會介紹到 LINE Pay 一次付清的功能。
由於 LINE Pay 不允許賣家直接從使用者瀏覽頁面發送 API ，所以我們把顯示商品資訊留在 index.php，將 reserve 和 confirm 的動作分割到不同檔案。


▲ 當買家點選 一次付清 的動作後，商品資訊會 POST 到 reserve.php
▲ 首先，先把 ChannelId 和 ChannelSecret 放到 header 中
▲ 再來將必要欄位都填上，
▲ 接下來就是流程圖中的 Step.2，發送 request 給 LINE Pay Server，請他回傳付款頁面的連結。
▲ 接著來到了 Step.3，直接導到 Server 回傳的 info.paymentUrl.web 網址

▲ 這邊可以選擇使用網頁版，或是手機掃 QR Code 的方式登入。

▲ 登入成功後會跳出付款視窗 (需允許瀏覽器彈出視窗)。

▲ Step.6 付款完成後原頁面會被導到 confirmUrl (confirm.php) 。
                                              
                                        ▲ 若手機有開啟付款通知也會顯示。
這樣我們就完成一次付清支付 API 的串接了。
測試網址",,,"['一次付清', '付款 reserve API']",,,"['( 流程圖出處 & 詳細範例可參考 6chinwei/LINE-Pay-PHP-Tutorial )', '* “confirmUrlType” 設為 “SERVER” 來呼叫時，必須使用 “https” 協定，並在 real 環境必須使用 “可信賴之SSL憑證書”。但，在 sandbox 環境是因為測試期間使用的環境，因此可以忽略憑證錯誤。']",1513814115190786000
https://ithelp.ithome.com.tw/articles/10191967,SoftwareDevelopment,0,來做個網路瀏覽器吧！Let'sbuildawebbrowser!系列,7,瀏覽器引擎處理CSS的簡易版（二）,微中子,https://ithelp.ithome.com.tw/users/20103745/ironman,1513545308000000000,435,"處理 CSS 又分兩個步驟，有 Parser 和 style，前者是解析原始 CSS，後者則是讓 DOM 有 style。
昨天討論過 CSS parser 了，而今天就來談談 style。
在開始講解實作之前，先來談談 style 幾個性質。
可以先看一下 mozilla 的文件。
簡單來說就是 style 有分好幾個等級，使用者定義高過瀏覽器預設，有加上 !important 的等級比沒加的高。當使用者沒有定義 style 的時候，瀏覽器就會使用自己預設的。所以你會發現 <h1> 比 <h2> 字體要大，明明自己的 CSS 沒有定義，這就是因為瀏覽器有預設的 style 了。
這部分可以看 W3C 的文件。
主要是說當瀏覽器開始解析並構建 DOM 樹，那麼就必須為 DOM 樹中的每個元素的每個屬性賦予一個值。
然而每個屬性的最終值最終值是通過四步計算得來的：
繼承是指延續父節點的屬性，直接繼續套用。我們可以讓子節點進行繼承父節點的屬性，例如字體和顏色，如下：
因為有繼承，我們不用每個元素都特地設定字體、顏色等等屬性，他們自己就會遵循父節點的設定，要是每個節點都要特地設定，那該有多麻煩！
然而像是 margin、padding、border、background-image 這些就不會被繼承。這些攸關於版面輸出，要是他們也被繼承，那畫面根本就會是一團亂了！
CSS 我們通常定義在 .css ，並被 .html 引入，或是在 html 中使用 <style> 標籤來著名是 CSS 的定義區塊。但我們也可以在寫 HTML DOM 的時候，直接賦予它 CSS，這就叫做 attribute。所以瀏覽器除了從 CSS 中解析之外，在處理 DOM 的時候也要留意有沒有 CSS 並把它插入 CSS 的樹當中。
例如原本應該是：
可以寫成：
明天再來討論如何實作，一樣會使用 robinson 這個「玩具」專案。robinson 將 CSS 拆成兩個模組，在 robinson/src/css.rs 和 robinson/src/style.rs。再提一次，Servo 的 CSS 部分在 servo/components/style，對照著看對之後我們學習 Servo 會有幫助。
希望對大家有幫助，大家明天見！
關於作者
劉安齊，軟體工程師，熱愛寫程式，更喜歡推廣程式讓更多人學會",,['Style'],"['Cascade', 'Specified, computed, and actual values', 'Inheritance', 'Attribute']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191974,DataTechnology,0,Python自習手札系列,2,Python自習手札(2/30):生出HelloWorld腳本~,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513544172000000000,400,"繼續哈囉臥倒 ~
打開文字編輯器，生出第一個腳本吧~
輸入
另存為helloworld.py


打開終端機，跑看看執行結果吧~

切換到腳本資料夾，執行腳本並顯示結果~

ps:退出Ctrl+D
<<<更換主題原文重發>>>
原文https://ithelp.ithome.com.tw/articles/10191012",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191975,ModernWeb,0,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,14,Laravel起步走：artisantinker操作ORM練習,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1513544151000000000,390,"昨天因為朋友來訪的緣故
完全趕不及，所以留下羞恥的記錄
總而言之今天要介紹的是artisan tinker操作
雖說php原本就有提供互動指令功能，稱之為REPL
但這樣的指令無法與專案的資料庫或model互動
所以在Laravel 4.1開始整合了Boris，
提供tinker互動指令功能
類似於Rails console
透過下面指令進入
下面都會以會員為例
這是單行新增資料的方式
新增後會將物件的細節回傳印出
包含自動產生的時間戳記，排除密碼欄位
另外與rails一樣，有先找資料，找不到就建立的方法
目前我的資料庫沒有任何會員
等等新增後可以確認一下
跟其他語言不同的是
在官方範例結尾會加分號
雖然不加的話一樣可以執行，似乎沒有任何差別
這樣會得到一個集合
可以使用集合方法
類似的方法，也可以用來新增資料
只要把第一行的find更改為$user = new User;
也可以直接update，這樣就可以省略save
參考資料：
https://laravel.tw/docs/4.2/eloquent
https://www.slideshare.net/shengyou/10-eloquent-orm","['新增資料', '查詢所有資料', '取出特定資料', '篩選條件', '集合方法', '更新']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191960,自我挑戰組,0,用laravel尻出自己形狀的linebot，還要撐三十天！系列,12,【第十二天】襪！Slack很有趣欸！,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1513544019000000000,430,"我覺得Slack真的挺不錯的！今天發現他有好多有趣的東西！
拿到玩具，那我們就來組積木吧！
如果對昨天這串還有印象的應該都都瞭解傳送的格式就是J的兒子json！
LINE也是json，只是之前我們都用他的SDK，不用自己組，不過SDK的內容其實也是在組json，這點大家要知道哦！
那麼既然要自組json，上面提到的工具就要多拿來使用看看了！
就某種程度上來說...個人認為用Slack自己組出來的template比較有自己的形狀好玩！
再加上可以支援Markdown來當內容送出，趣味性又更高了！
相關的套件應用和程式provider怎麼寫其實和之前的做法相差不遠，有興趣的可以參考這份PR
那麼大家今天就來好好地玩玩Slack的Meggase吧！","['【第十二天】襪！Slack很有趣欸！', '首先，不要重複造輪子！']",['之後的流程就跟昨天大同小異，這裡就略過'],"['自己的表情自己做！', '可以做一堆有的沒的APP', '當然，也可以開一個共用不限任何頻道的webhook來做使用，這也是我們今天要來講嘴的玩具了！']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191973,ModernWeb,0,Expo---跨平台App開發從零到上架系列,13,"ExpoDAY13---Alert,Console&Viewing",iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1513543783000000000,389,,"['Expo DAY? --- Alert, Console & Viewing Logs']","['前言', '現在就做看看', 'Refs']",,,,['tags: iThome鐵人賽2018 ReactNative Expo day?'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10191970,ModernWeb,1,重新認識JavaScript系列,14,重新認識JavaScript:Day14事件機制的原理,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1513543335000000000,495,"JavaScript 是一個事件驅動 (Event-driven) 的程式語言，當瀏覽器載入網頁開始讀取後，雖然馬上會讀取 JavaScript 事件相關的程式碼，但是必須等到「事件」被觸發(如使用者點擊、按下鍵盤等)後，才會再進行對應程式的執行。
什麼意思呢？
就好比辦公室擺了一台電話在桌上，但是電話要是沒響，我們不會主動去「接電話」 (沒人打來當然也無法主動接) 。
電話響了 (事件被觸發)  ->  接電話 (去做對應的事)
換以我們很常見的網頁對話框 UI 來說，當使用者「按下了按鈕」之後，才會啟動對話框的顯示。 如果使用者沒有按下按鈕，就狂跳對話框，那使用者一定覺得這網站壞掉了吧。
以 Bootstrap Modal 為例：

如同上面範例，當使用者點擊了按鈕，才會啟動對話框的顯示，那麼「點擊按鈕」這件事，就被稱作「事件」(Event)，而負責處理事件的程式通常被稱為「事件處理者」(Event Handler)，也就是「啟動對話框的顯示」這個動作。
假設有兩個重疊的 div 元素，外層是 <div id=""outer"">，而內層是 <div id=""inner"">:

這時內層的位置一定在外層裡面對吧 (先不管 position: absolute; 的可能性)，這表示 inner 也是 outer 的一部分。 那麼，當我們點擊了 inner 的時候，是不是代表我們也點擊到 outer，甚至再看遠一點，可以說實際上我們也點擊到整個網頁。
而事件流程 (Event Flow) 指的就是「網頁元素接收事件的順序」。
事件流程可以分成兩種機制：
接著就來分別介紹事件的這兩種機制。

圖片來源： Event Flow: capture, target, and bubbling
事件冒泡指的是「從啟動事件的元素節點開始，逐層往上傳遞」，直到整個網頁的根節點，也就是 document。
假設 HTML 如下：
假設我們點擊 (click) 了 <div>CLICK</div> 元素，那麼在「事件冒泡」的機制下，觸發事件的順序會是：
像這樣 click 事件逐層向上依序被觸發，就是「事件冒泡」機制。

圖片來源： Event Flow: capture, target, and bubbling
剛剛說過「事件冒泡」機制是由下往上來傳遞，那麼「事件捕獲」(Event Capturing) 機制則正好相反。
假設 HTML 同樣如下：
假設我們點擊 (click) 了 <div>CLICK</div> 元素，那麼在「事件捕獲」的機制下，觸發事件的順序會是：
像這樣 click 事件由上往下依序被觸發，就是「事件捕獲」機制。
既然事件傳遞順序有兩種機制，那我怎麼知道事件是依賴哪種機制執行的？
答案是：兩種都會執行。

圖片來源: W3C, DOM event flow
假設現在的事件是點擊上圖中藍色的 <td>。
那麼當 td 的 click 事件發生時，會先走紅色的 「capture phase」：
由上而下依序觸發它們的 click 事件。
然後再繼續執行綠色的 「bubble phase」，反方向由 <td> 一路往上傳至 Document，整個事件流程到此結束。
要檢驗事件流程，我們可以透過 addEventListener() 方法來綁定 click 事件：
當我點擊的是「子元素」的時候，透過 console.log 可以觀察到事件觸發的順序為：
而如果直接點擊「父元素」，則出現：
由此可知，點擊子元素的時候，父層的 Capturing 會先被觸發，然後再到子層內部的 Capturing 或 Bubbling 事件。 最後才又回到父層的 Bubbling 結束。
那麼，子層的 Capturing 或 Bubbling 誰先誰後呢？
要看你程式碼的順序而定。
若是 Capturing 在 Bubbling 前面：
則會得到：
若是將兩段程式碼順序反過來的話，就會是這樣了：
剛剛我們看過 addEventListener 方法對事件的綁定，事實上綁定事件的方式還有其他方式，我們這裡來一一介紹。
對 HTML 元素來說，只要支援某個「事件」的觸發，就可以透過 on+事件名 的屬性來註冊事件：
如同上面範例，透過 onclick 屬性，我們就可以在 <button> 元素上面註冊 click 事件，換句話說，當我按下這個 <button> 元素時，就會執行 console.log('HI'); 的程式碼。
但是需要注意的是，基於程式碼的使用性與維護性考量，現在已經不建議用此方式來綁定事件，詳情可參考「維基百科: 非侵入式JavaScript」條文，或自行 Google 相關資訊。
像是 window 或 document 此類沒有實體元素的情況，我們一樣可以利用 DOM API 提供的「on-event 處理器」(on-event handler) 來處理事件：
如同我們昨天介紹過的 document.write 方法所說，上面這段程式碼會在 window 觸發 load 事件時執行對應的內容。
另外，若是實體元素也可透過 DOM API 取得 DOM 物件後，再透過 on-event 處理器來處理事件：
若想解除事件的話，則重新指定 on-event hendler 為 null 即可：
剛剛介紹的 on-event 對應的 function 指的是「事件的處理器」，而現在我們要回頭來說明 addEventListener() 這個「事件的監聽器」。
addEventListener() 基本上有三個參數，分別是「事件名稱」、「事件的處理器」(事件觸發時執行的 function)，以及一個「Boolean」值，由這個 Boolean 決定事件是以「捕獲」或「冒泡」機制執行，若不指定則預設為「冒泡」。
使用這種方式來註冊事件的好處是可以重複指定多個「處理器」(handler) 給同一個元素的同一個事件：
點擊後 console 出現：
若是要解除事件的註冊，則是透過 removeEventListener() 來取消。
removeEventListener() 的三個參數與 addEventListener() 一樣，分別是「事件名稱」、「事件的處理器」以及「捕獲」或「冒泡」的機制。
但是需要注意的是，由於 addEventListener() 可以同時針對某個事件綁定多個 handler，所以透過 removeEventListener() 解除事件的時候，第二個參數的 handler 必須要與先前在 addEventListener() 綁定的 handler 是同一個「實體」。
像上面這樣，即使執行了 removeEventListener 來移除事件，但 click 時仍會出現 'HI'。 因為 addEventListener 與 removeEventListener 所移除的 handler 實際上是兩個不同實體的 function 物件。
不知道為什麼這兩個 function 是兩個不同實體的朋友請參考：
「重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？」與 「重新認識 JavaScript: Day 10 函式 Functions 的基本概念」。
那麼以上就是今天為各位介紹 JavaScript 事件機制原理的部分。
在下一篇分享中，我會繼續來介紹事件的種類，以及更多實務上處理「事件」時需要注意的事項。",,"['事件流程 Event Flow', '事件冒泡 (Event Bubbling)', '事件捕獲 (Event Capturing)', '事件的註冊綁定']","['on-event 處理器 (HTML 屬性)：', 'on-event 處理器 (非 HTML 屬性)：', '事件監聽 EventTarget.addEventListener()']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191942,自我挑戰組,1,再戰軟體工程系列,3,『珍惜生命，遠離波動拳』--從壞習慣談程式可讀性,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1513542239000000000,553,"程式可讀性要高，這件事大家都知道，但是真正能做到的有幾個？在工作中，當你在撰寫一個功能時，因為你的心思全心全意都放在你的邏輯裡，你不是一個『隨便拿以前的code複製貼上就交差』的人...（吧？），所以妳寫出來的程式脈絡，不管怎麼看都是合理的。然而，別人怎麼看呢？不知道？你隨便拿一個同組的同事的code起來看看就能體會啦！
我們在前文中提過，『寫出機器看得懂的code很簡單。compile能過機器就看得懂，寫出人類看得懂的才是真功夫。』本文從另一個角度出發，如果你遇到一個邏輯比較複雜，條件比較多的判斷式，你應該怎麼寫出人類比較看得懂的程式，降低別人閱讀你的程式碼時的『WTF/min』率。

我們來看看範例吧！這個範例超簡單。我有一個妹妹，他想要交男朋友，於是就列出他的擇偶條件如下：

我就很熱心的幫他把這樣的條件寫成判斷式：
看得很痛苦吧？如果你感到痛苦，恭喜你有一雙正常人的眼睛。這樣的程式寫法只有機器看得懂，人類是看得很痛苦的。於是，一些比較有經驗的RD就發現，幫他們分些層次，比較能提高可讀性。為了分出層次，著名的波動拳就出現了：
這樣的波動拳是否在你的專案中經常出現？如果是，那你要小心了。為什麽？因為，上面的例子是非常簡單的，但是在工作中常出現的其實比較像：『沒有初沒關係，只要不花心就好。』、『萬一是個花心男，那至少要有錢，不然就是要體貼
。』、『如果不體貼，那一定要有錢，或者是高學歷且幽默』...等複雜狀況。那麼，你的波動拳就沒有辦法像上面這麼順暢了。他應該會呈現『大波中有小波，else中有if』的狀況。什麼？想像不出來？明天回去公司開你自己的專案出來看看...
Robert C. Martin說，程式碼本身就要給予閱讀者足夠的資訊。所謂『足夠的資訊』包含很多，先前提過的命名是一種，這裡把條件分類提成帶語意的函式也是一種。於是我進一步分析，發現妹妹的條件其實可以概略分成四種：長得好看、物質生活高、工作表現好、個性好。於是我重新整理了一下，就像下面所述：
您會不會有一種感覺：『這麼一來把原本很短的的程式拉得很長，哪有好讀？』好讀多了！別忘記，我們先前說的，這是波動拳中最簡單的一種喔！如果你的波動拳是複合型的，那麼這樣的拆解並給予語意，就是很好的投資了。
另外，這樣把條件拆出來並給予語意，增加可讀性其實不是最大好處喔！增加擴充性才是最大的好處。試想，萬一今天我不是只有一個妹妹，我有很多親戚朋友都來找我介紹對象，並且大家的條件都不一樣時怎麼辦？難道你要用『co過去改一改』大法，創作出一個又一個的波動拳？別鬧了，好嗎？
抽了邏輯後，你可以使用『pattern』設計模式，搭配靜態工廠與抽象介面，他們才是立馬將你從無限copy-paste地獄中解救出來的救世主！不喜歡的話，『decorator』設計模式也是不錯的選擇。方法有很多，你可以自由搭配，但是可以確定的是，不先把邏輯抽象化，要套用好的設計模式難度會很高。
『珍惜生命，遠離波動拳』不是一句口號。要寫出能跑不會錯的程式，對職業的工程師來說太簡單了。然而，產品中長期下來最大的成本不是開發，而是維護與修改。因此，寫出好維護、好懂的程式，才是平庸工程師進階到優秀工程師的最重要轉捩點。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191965,Security,0,從接電話解任務開始到進入資安領域邊邊系列,2,接電話解任務(2/30):瀏覽器Chrome變更為親切的繁體中文介面,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513541502000000000,443,"More Actions (更多選項) ▶ Settings(設定)

▼ 展開選單

選擇Add Languages

勾選 Chinese (Traditional)-中文(繁體)，ADD(新增)。

More Actions (更多選項)

勾選 Dispaly Google Chrome in this language (將Google Chrome的介面文字設為這種語言)

點選 RELAUNCH (重啟網頁)，套用以上設置~~~

重啟後，網頁介面就變成親切的繁體中文囉~~~
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191964,ModernWeb,0,挑戰CSS30天系列,14,day14_list-style-type,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1513540133000000000,384,"list-style-type 屬性是用來設定在清單中，每一條之前的記號要用什麼。其設定值為：
none (沒有)
disc (全黑圓圈)
circle (空心圓圈)
square (正方形)
One may also wish to use ordered character sets. Common ones are:
upper-latin (大寫拉丁文)
lower-latin (小寫拉丁文)
upper-roman (大寫羅馬文)
lower-roman (小寫羅馬文)
upper-alpha (大寫希臘文 )
lower-alpha (小寫希臘文 )
如以下範例：
成果如下圖：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191963,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,14,14.應用：自用定時提供每日資訊Skype機器人,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513539997000000000,476,"在這一篇，我們將透過機器人回覆方式取得對話相關資訊、設定新 WebAPI 取得天氣資訊後回傳、透過 Azure 排程器測試是否成功。話不多說，趕緊來實作。
當需要傳遞訊息給某位使用者時，必定需要一些辨識資訊，才能正確地指定使用者收到資訊。在撰寫程式之前，我們需要更多的資訊……。 透過 Bot Template 新增的專案，我們 Ctrl + 滑鼠左鍵點開 Activity 這個類別：

似乎有 ChannelId, From, Conversation 與 Recipient…這些識別資訊可以使用。

我們將 RootDialog.cs 內的 MessageReceivedAsync 方法更改如下，並將程式放上 Azure Web Application，進行測試，檢視會得到什麼資訊：
我們可得到對話許多資訊，我們需要記下Recipient.Id 、From.Id 與 Conversation.Id

大致上彙整需要的參數：
ChannelAccount  物件內容如下：
ConversationAccount 物件內容如下：
Step 1. 在MessageController.cs 內我們新增一個 API，名稱為 GetWeatherInformation (與上一篇Azure 排程器呼叫位置相同)
Step 2. 我們需要一個 ConnectorClient 連線到 skype 服務的 endpoint。除了位置外，您還需要機器人程式的 App Id 與 App Password
註：請透過 MicrosoftAppCredentials.TrustServiceUrl 加上欲使用服務的URL
Step 3. 接下來，我們需要建立一個message activity，並將從先前取得的 Recipient.Id 、From.Id 與 Conversation.Id 放入相對的位置。
Step 4. 將我們之前天氣服務機器人的程式碼放入並做些修整
Step 4.1 專案內加入Messages新資料夾 → Messages 資料夾內加入 Responses 資料夾 → 建立一個 WeatherResponse.cs 程式，將相關 DTO 放入。

你的 WeatherResponse.cs 內容應該如下：
Step 4.2 取得氣象資訊服務程式 放入 GetWeatherInformation 內：
註：記得安裝 RestSharp 套件
Step 5. 將氣象資料放入回傳資料 newMessage.Text 內，透過 await connector.Conversations.SendToConversationAsync((Activity)newMessage); 將資訊發出。
您的整個 GetWeatherInformation 如下
Step 6.啟動程式，輸入測試網址 http://localhost:3979/api/GetWeatherInformation
註：你的測試網址可能有所不同，請依據啟動專案後開啟的網址進行調整

Step 7. 上傳 Azure Web Application，我們透過 Azure 排程器立即執行進行測試，也非常順利。
","['前言', '取得相關資訊', '程式']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191954,DevOps,1,Ops的轉職之路-Puppet從入門就放棄系列,7,Day7-MASTER和AGENT的認證關係,shazi7804,https://ithelp.ithome.com.tw/users/20089211/ironman,1513538740000000000,412,"本系列文資料可參考以下：
Day 7 ... 連假日都要被折磨 Orz ..
前面兩天把 Master 和 Agent 都安裝好之後，來講一下 Master 和 Agent 之間的認證，像 Puppet 這類型的工具管理著整個 infrastructure 這麼重責大任的事情就交付給一個工具你不擔心嗎？
先別太擔心，Puppet Master 和 Agent 是使用 CA 憑證來產生 SSL Cert 進行溝通，除此之外你還可以自定義認證的規則，來做到自動 or 非自動甚至更複雜的規則來簽署憑證，那麼就來認識一下 Puppet 的 Trust 機制。
CA 憑證可以是由外部頒發，或是自簽 CA，但通常會直接讓 Puppet 自簽 Internal CA，如果你用的是 Internet CA 則必須停用 Internal CA。
整個認證的交易就和我們一般 HTTP 的 SSL 申請狀況相同，Agent 就像是一般企業客戶端，而 Master 就是 CA 憑證中心。

然而 Agent 交付給 Master 需要經過 Master 的同意，簽署的方式分為：
在自動簽署中是最不安全的簽署方式，當使用 Naive Autosigning 的話，所有的 Agent CSR 要求皆會自動同意簽署，這並不適合用在正式環境，但相對的用於測試環境是非常方便。
設定自動簽署你只需要在 puppet.conf 的 [master] 中加入 autosign = true
Basic Autosigning 是繼承 Naive Autosigning 的概念在加上白名單限制，你可以針對 Agent 所申請的 domain 進行白名單限制，例如 *.example.com，你可以用 autosign.conf 將這些清單寫入
在 Policy-based autosigning 中你可以定義 Policy 簽署的條件，在 Agent 發出的 csr 請求中動手腳，加入一些可以提供驗證的資訊 (embedding additional data)，如 Password, token … etc，再由 Master 觸發 autosign 所執行的 script 進行驗證，這個 scirpt 不限語言，只要 return 給 Puppet 0 or 1 就行。
Puppet 官方極力推薦使用 Policy-based autosigning 這種方式進行驗證，是目前最安全且彈性的作法，甚至可以把 Policy-based autosigning 當成一個 trigger 去做許多事件。
延伸 Policy-based autosigning 概念的作法，你也可以透過 API 進行簽署認證，這個可以應用到更多的地方，但目前小弟還沒有實際應用。",['Day 7 - MASTER 和 AGENT 的認證關係'],"['自動簽署 (Naive Autosigning)', '白名單簽署 (Basic Autosigning)', '依照政策的簽署 (Policy-based autosigning)', '透過 API 簽署  (Policy executable API)']",['Reference'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191961,ModernWeb,0,每日文章推薦系列,14,Day14Ansible,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1513538318000000000,437,"被控端不用裝agent
被控端只要環境有python跟ssh就能做大部分的工作
像我習慣用ubuntu基本上裝好就有了
設定檔是YAML格式
有ansible galaxy可以參考
ansible 本身是個用python寫的Configuration management Tool
可以讓工程師去寫yml檔案去設定主機的設定
想看ansible跟shell script語法差異
可以看這邊 https://hvops.com/articles/ansible-vs-shell-scripts/
基礎設施即代碼
這個概念在管理很多主機的時候會很方便
因為把所有操作都寫成文件
有的時候會太麻煩
如果忘記寫文件 就會消失在茫茫大海之中
所以何不讓你的文件就能執行工作呢?
像ansible就是把所有操作都寫到YAML檔案裡面
當你把動作做完 你的文件也寫完了
另外是既然操作過程是code
那自然也可以放到版本管理裡面
再搭配CI/CD就能確定每次跑的工作都有記錄到
https://en.wikipedia.org/wiki/Infrastructure_as_Code
https://www.youtube.com/watch?v=_g002UIZlS4
現代 IT 人一定要知道的 Ansible 自動化組態技巧 
我也是先看這個入門的XD
感謝凍仁翔
Node 8：迎接 async await 新时代 - 早起搬砖 morning.work
有測試過程可以看
Linux Load Average那些事儿
了解工具備後的發展
程序员如何提高工作效率 | Tiny熊谈技术
我覺得重點就是抓重點的能力XD
一起用 Google Calendar 與 D3.js 進行年終回顧吧！ | TechBridge 技術共筆部落格
有趣的利用工具
Laravel 中自定义日志目录 | Laravel China 社区 - 高品质的 Laravel 开发者社区 - Powered by PHPHub
備用
The 2018 Guide to Building Secure PHP Software - Paragon Initiative Enterprises Blog
看一遍應該能學到很多東西
https://github.com/fripig/article_log/issues/422",,"['特點', 'infrastructure as code', '參考內容', '今天分享文章', '今天看的文章']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191898,DataTechnology,0,GraphQL+ApolloData入門系列,11,ApolloData&Querymethod(二),polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513537558000000000,403,"介紹
承接上篇來介紹 ApolloData 使用 graphql hoc Query ，除了會撈到資料外 Apollo 會在 props 中多幾個 method ,接下來介紹 data.subscribeToMore(option):
透過 subscribeToMore 將啟動訂閱。Server上也設置訂閱才能正常工作。每當 Server 發送訂閱發佈時觸發更新
使用 subscribeToMore 函數會返回一個 unsubscribe 函數處理函數，可以有取消訂閱的功能。
通常的做法是在查詢完成後對在 componentWillReceiveProps 執行訂閱 subscribeToMore。 為了確保訂閱不是多次創建的，可以將其附加到組件實例。
option介紹 這邊跟一般 graphql 差不多 主要多了subscriptionData
document：文件是接受與創建 GraphQL 訂閱所需屬性graphql-tag的gql模板字符串標籤。它應該包含一個GraphQL訂閱操作，並返回將要返回的數據。
variables：變數改變就會到發fetch，變量要根據document的 gql 定義。
updateQuery：每次服務器發送更新時，都會運行的功能。這會修改HOC查詢的結果。第一個參數previousResult將是你在graphql()函數中定義的查詢所返回的之前的數據。第二個參數是一個有兩個屬性的對象。
subscriptionData： 訂閱的結果。
variables： 是與訂閱查詢一起使用的變量對象。使用這些參數，返回一個與graphql()函數中定義的GraphQL查詢形狀相同的新數據對象。這與fetchMore回調相似。或者，您可以使用reducer作為函數選項的一部分來更新查詢graphql()。
[onError]：一個可選的錯誤回調。
訂閱的結果更新查詢的 store (cache)，必須在 subscribeToMore 中指定 updateQuery 選項，或者在 graphql 函數中指定 reducer 選項。
總結
ApolloData 也做了訂閱這機制，就像 Firebase 只要 Server 端有異動就可以直接讓客戶端接收到通知，接收通知在 componentWillReceiveProps 生命週期去做異動",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191957,自我挑戰組,0,,14,繼續統計一下各主題組的情況吧,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513537014000000000,417,"全部：281 主題
各主題比例 + 加上各組：
AI & Machine Learning：15 組 占 5.33%
Data Technology：14 組 占 4.98%
DevOps：13 組 占 4.62%
Modern Web：82 組 占 29.18%
Security：10 組 占 3.55%
Software Development：61 組 占 21.70%
自我挑戰：86 組 占 30.60%
其他統計資料歡迎參考昨天另一篇文章
周末特別節目-iThome鐵人文章分析
文章推薦晚點補上",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191956,自我挑戰組,0,30天的切版日記系列,14,Day14:d3學習筆記-資料,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1513535820000000000,407,"d3
d3 可以處理不同種類的資料，支援使用任何包含數字、字串或物件在內的陣列。也可以有效率的處理JSON，甚至有內建函式，可以載入CSV資料。
如果要建立新的、和資料綁定在一起的元素，要用enter()函式，這個函式會檢視目前的DOM選擇器，以及傳遞到這個函式的資料。如果接收到的資料比相對應的DOM多，enter()函式就會建立一個新的暫存元素。
使用d3的時候會寫很多匿名函式。這些函式使用來存取個別資料值和計算動態屬性的主要工具。",,"['建立自己的選擇器', '加上style']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191955,SoftwareDevelopment,0,看到code寫成這樣我也是醉了，不如試試重構？系列,7,SOLID之單一職責原則（Singleresponsibilityprinciple）,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513535034000000000,467,"雖然軟體量測很方便，也能找到很多可能有問題的程式碼，但最終還是需要人工檢查程式的設計。這時就需要原則（principle），讓檢視過程能有正確的方向。
SOLID 是 Robert C. Martin 提出的物件導向設計五個原則：
剛好字首五個字母合在一起就成為了 SOLID ，這五個原則目的都是為了在面對改變時，能有一套策略來應付。
今天先來講講單一職責原則：
首先必須先考古一下，單一職責原則（Single responsibility principle）的原文定義如下：
A class should have only one reason to change.
大部分朋友看到「單一職責」就會聯想到，這個原則的目的是不是把 class 功能單一化？其實原文是把職責（responsibility）定義成 one reason to change 。
這好像有點抽象，書中就有舉個例子：我們有個 Modem ，它的介面如下：
從介面上可以了解，它有一個職責是屬於連線（connection），另一個則是數據溝通（data communication）。 dial 、 hangup 是連線； send 、 recv
是數據溝通。
這樣會有什麼潛在風險呢？今天 ADSL 要升級成 100M ，我們會需要修改 Modem 實作，這會導致與它連線無關的 send 與 recv 也會跟著重新編譯與佈署，風險範圍也隨之擴增。重構的方法之一，是把這個介面抽離出兩個單一職責的介面：
而原本其他依賴 Modem 介面的 class ，都依職責不同，改依賴對應的介面。
遵守 SRP 的好處如下：
單一類別的複雜度降低，因為要實現的職責都很清晰明確的定義，這將大幅提升可讀性與可維護性。
如果有做好 SRP ，那修改只會對同一個介面或類別有影響，這對擴展性和維護性都有很大的幫助。
SRP 是個充滿爭議的原則。爭議的點是，那個「變化原因」會是什麼？或者說，職責該如何劃分？
因為變化原因和職責都是無法量化的，而且會因為專案需求或環境變化而改變，所以事實上 SRP 很難在專案上完美地實現。如果硬要達成 SRP 的條件，最直接的方法就是一個方法一個介面，結果會變成介面數量劇增，反而帶來更多麻煩。",,"['優點', '潛在問題', '參考資料']","['可讀性與可維護性提升', '強健性提升']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191747,自我挑戰組,0,迷失在挨踢叢林的獎金獵人系列,4,「獎金獵人小分享」-VRHackFest,獎金獵人,https://ithelp.ithome.com.tw/users/20107677/ironman,1513528627000000000,460,"嗨，我是獎金獵人，現在正迷失在挨踢叢林當中，唯有提供各種資訊養分給願意帶我走出叢林的當地居民，我才能成功離開。
今天要介紹的是由經濟部工業局、財團法人資訊工業策進會、經濟部數位內容產業推動辦公室以及社團法人台灣虛擬及擴增實境產業協會等多方協力共同舉行的VR Hack Fest。
VR為Virtual Reality的縮寫，中文稱為虛擬實境，是模擬產生一個三維空間的虛擬世界，讓使用者彷彿身歷其境，可以即時觀察三維空間內的事務。當使用者進行移動，電腦可以立即進行運算，將三維世界影像傳回產生臨場感。VR技術結合了電腦圖形、電腦仿真、人工智慧、顯示及網路並列處理等技術。由於近年越來越熱門的關係，許多廠商也開始投入研發VR的行列。
VR Hack Fest（VR開發者黑客松大賽）是一場為期三天的比賽，這項活動集合了軟體工程師、遊戲企劃、美術設計等各領域的專業好手。在有限的時間內，透過團隊的專案管理能力，創意及組織合作，針對VR裝置（mobile VR）應用為主題，創作出符合主題的作品。
另外今年獲文化部指導增加「台灣原創IP跨域應用獎」，開發隊可以自由選擇，讓內容創意結合台灣漫畫家原創作品內容，創作出跨界應用之優秀作品。其中新創團隊「如牧創新」全員出動，以「李白俠客行」作品同時拿下「其它Mobile VR組」與「台灣原創IP跨域應用獎」兩個獎項的第一名。

(圖片轉自PCDIY!)
想參加黑客松卻不知道哪裡有嗎？歡迎鎖定獎金獵人網站唷！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191948,ModernWeb,2,用範例理解Vue.js系列,7,用範例理解Vue.js#7：FiltersvsComputed,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1513527984000000000,451,"
Vue.js 允許自定義過濾器，過濾器分為本地和全域。
使用方法分為兩種：
你可以在 Vue Instance 中定義本地過濾器：
附上 fiddle (https://jsfiddle.net/hunterliu/1q4g5bmu/1/)
改寫上面的範例為全局過濾器，寫法如下：
附上 fiddle (https://jsfiddle.net/hunterliu/zzm4b7cj/2/)
差異：
HTML 中的使用方法沒有改變，都是{{ price | filterDollarSign }}，但差別在於 Local filters 範圍僅在該 Vue Instance 中。
再利用上一個Local filters的範例做修改，新增一個 filterComma。
附上 fiddle (https://jsfiddle.net/hunterliu/oyrvj961/1/)
注意：
filter 是會受順序影響的，此處的兩個 filter (filterDollarSign, filterComma) 回傳的值皆是 String，但此處的 filterComma 無法將$199999轉成$199,999，必須先將數值199999轉成199,999再加上$，所以 filterComma 需在 filterDollarSign 之前。
附上 fiddle (https://jsfiddle.net/hunterliu/820aett3/)
這裡在 filterDollarSign 傳入了 priceStr 這個 data 作為參數 arg1，結果為在 price 前增加了一段文字敘述為The price is。
個人的理解是：
讓我們在改寫上面的範例。
下面這個範例在 filters 中加入了console.log來確認 filter 在點擊 button 執行changePrice這個 method 後有被觸發。
附上 fiddle (https://jsfiddle.net/hunterliu/820aett3/1/)",,"['Filters', '參考資料']","['Local filters', 'Global filters', 'Filters 可以串聯：', 'Filters 可以接受參數：', '比較 Filters 和 Computed']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191894,自我挑戰組,1,蚵蚵攻城記系列,7,[Day07]垂直置中(1/4),azer19890427,https://ithelp.ithome.com.tw/users/20107340/ironman,1513526785000000000,433,"昨天兩天做了水平置中，
今天來試試看垂直置中。

將行高設定跟div的高度一樣。

這個方法垂直置中只能使用一行字，
如果加上另外一行，
會因為行距的關係使得字飛出框框之外。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191588,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,12,Pandas(Python中的Excel)Day2-DataFrame的資料描述與屬性,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1513526661000000000,471,"接下來為了讓大家有實際操作的機會，我將以kaggle中Titanic練習資料集作為示範，詳細的內容請自行詳閱比賽中的資料介紹頁面。另外，由於後續的文章應該多少也會使用到這個資料集，所以非常建議大家可以參與到這個比賽之中，然後把資料集下載下來練習，對大家學習也會有幫助。
這篇文章會用到的code都放在這個檔案中了，請大家斟酌觀看下載。
在此之前，請大家先把相關套件安裝並import。
並從將從kaggle下載下來的資料檔(train.csv)讀進去，以利接下來跟著操作。


你會發現，有一些欄位的non-null值不是891，這事後就要想辦處理null值，至於處理方式在後面「資料前處理」的章節，會做詳細介紹。順帶一題重要觀念，載python中內建的null值稱為None，但是在numpy集pandas中的預設null值稱為NaN，兩個最大的差別在於...
總之，你會發現

總之，請大家記熟這個錯誤訊息哈。以下示範如何暫時解決這個問題。不過你總是要面對Null值的，這只是一個暫時逃避方式，如果大家想簡單一點處理，也可以先使用fillna()這個方法。


由於這些資料不太能接受有NaN，所以我暫時先只放沒有NaN的欄位進去。


可以將某一欄位的所有資料plt.hist()方法中，便可以畫出直方圖。不過在上面的pairplot已經可以找到這樣的圖，只是pairplot繪畫得比較久，如果你只關心某一變數的分布狀況，則可以使用這個方法。


明天將繼續講解Pandas的索引功能，也是這個套件中最迷人的地方，請大家拭目以待....","['前言', 'DataFrame的資料描述', 'DataFrame的屬性']","['1. 查看頭N行(N預設為5)', '2. 檢查看那些欄位有NaN值要處理', '3. 資料的分布狀況: max, min, mean and median', '4. 解釋變數之間的關係', '5. 簡單繪圖(查看某一變數的分布)']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191947,DevOps,1,用30天來介紹和使用Docker系列,14,Day14：使用thirdparty的Jar呼叫DockerRestfulAPI,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1513526416000000000,461,"昨天有介紹如何使用 Docker Restful API 來操作 Docker，像是 Pull Image、Create Container、Start Container、Delete Container……等等，使用比較不方便的地方是 URL 或是要傳遞的參數太長記不太起來，所以每次透過 Restful API 操作 Docker 時都需要查看官方的文件才知道要使用哪些 URL 或是要傳遞哪些的參數。
在 GitHub 上有找到，有人把呼叫 Docker 的 Restful API，把它包在 Java 程式的 Class Method 裡，這樣我們就不用去找 Docker Restful API 的 URL 或需要傳遞的參數，只要把 third party 的 jar 檔 import 到 Project，然後就可以像是在撰寫一般 Java 程式的方式去操作 Docker 的 Restful API。
今天要介紹的專案名稱叫 docker-client，它的 GitHub 網址如下，有興趣的話可以去研究它的 Source Code：
https://github.com/spotify/docker-client
一. 使用 docker-client 的 third party 前準備
最主要的部份是要把 docker-client:8.9.2 的 Jar檔下載和import 到 project，另外此專案需要使用 JDK8
簡單的列出使用步驟：
(1)	$ git clone https://github.com/jackyoh/docker-client-example.git
(2)	在 command line 輸入 $ gradle eclipse (第一次使用 gradle 會花費一些時間下載相依的 Jar 檔)
(3)	到 eclipse 上按 File -> Import -> General -> Existing Project into workspace -> 選擇 docker-client-example 的資料夾路徑 -> OK
二. 程式說明
這一個程式的目的是要把 nginx:latest 的 Docker Image Pull 下來，然後建立 Container 之後，就把 Container 執行起來，主要分為三個部份說明如下：
Part1：把 nginx:latest 的 Docker Image 從 Docker Hub pull 到 client
Part2：建立Container 並把Container 內部的 80 port Mapping到 host的8080 port
Part3：啟動執行 Docker Container
三. 執行結果
可直接打開 Browser 輸入Host 的 IP，URL 為http://192.168.182.130:8080/，就可以看到以下的畫面：

使用了 docker-client 的 third party 之後對於我們在撰寫 Java 的 Unit Test測試程式有很大的幫助，可以在 BeforeClass 時建立 Docker Container 的環境(例如：mysql Data Base 的環境)，然後在 AfterClass 執行完成之後把 Docker Container 刪除。
這樣在操作 Docker 時更加的直覺，不用去記憶很多的 URL 或者是傳遞的參數。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191946,SoftwareDevelopment,0,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,11,Day11-如何客製Admin的通知(使用Line),Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1513525887000000000,481,"上一篇設定好監控後, 透過 Chrome 通知其實不太夠, 因為我們不可能一直開著電腦, 所以還是需要一些其它手段來通知我們
SpringBoot Admin 原本就整合好了一些常見的通知機制
Reminder notifications
Mail notifications
Hipchat notifications
Slack notifications
Let’s Chat notifications
都是在 Server 端設定一下就完成了, 非常方便.
舉例來說 email 這樣就可以
或是團隊比較愛用 slack 也可以
But 這兩個 在台灣不一定大家都會裝 & 即時看到, but 台灣幾乎每個人都會裝 Line 啦
那我們來改一下符合台灣人的習慣吧
首先你需要有個開發者帳號

記得要申請開發者喔
不然你沒有 PUSH_MESSAGE 的權限就無法主動推訊息出去
再來組態檔部分 application.yml
channelSecret 是 Line 官方提供
channelToken 是 Line 官方提供
to 這個就是你要推送的個人或群組的代碼, 要怎麼查到呢? 官網上登入後會在同一頁最下面提供給你 Your user ID
如果是群組呢? 加入群組的時候你會收到 line 的官方訊息, 你要去收下來讀出裡面的 Group ID.
再來是我們程式
首先要讀取配置檔
LineProperties.java
再來是我們的推播程式 LineNotifier.java
繼承 admin 的 AbstractEventNotifier 就可以接收到事件通知了
再來我只針對 ClientApplicationStatusChangedEvent , 也就是上線或下線這種變化作通知
推送出去的效果

是不是比沒人在用的 Slack 或 Email 更即時呢?",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191940,ModernWeb,0,初探前端之路-React-由生到死的踩地雷系列,8,React-Redux-框架練習（2）,Luis-Chen,https://ithelp.ithome.com.tw/users/20103556/ironman,1513525720000000000,423,"續昨天的文章:
Getting started with create-react-app, Redux, React Router & Redux Thunk
We need to tell react-dom to render our application with the correct store and browser history data. We do this by using the ConnectedRouter export given to us by React Router v4. ConnectedRouter has access to the store given to Provider so you don’t need to worry about passing data through any additional props.
這邊大意是說，用ConnectedRouter 去存取瀏覽器的history ，如果只用react-router-dom 通常是用他們的<BrowserRouter>去運作，但他現在交給redux 所以他們會存到redux的store 然後交給Provider
這邊很像是redux 的action ，而這段程式碼在做一些加減的行為，可能是在做redux thunk的非同步範例，``
incrementAsync and decrementAsync 是做三秒後自動加減數字，
為了完成上面那段程式碼，他將這個範例加上home的component 裡面，這時候就有即時的加減動作，
實例程式碼
在local測試能跑 但sandbox 卻不能 但程式碼是可以運作的 之後再debug","['前言', '4. Rendering our app', '5.Adding Redux Thunk']",['/src/indexs'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191900,ModernWeb,2,Go！從無到打造最佳行動網站系列,7,Day7全員耍廢中(下)Mobile設計,網襪工程師,https://ithelp.ithome.com.tw/users/20107302/ironman,1513523397000000000,465,"續 Day6 全員耍廢中(中) Mobile設計
設計UX體驗時，你，不算使用者之一。
當大家開始在熱烈討論UX設計的時候，大家會用最主觀的想法，也就是「我」的角度來判斷這樣的設計是不是使用者所喜歡的，但注意大多數你的看法不一定是最佳的設計。因為你不能代表多數人！
最近看了一本書叫做精實UX設計(LEAN UX)，裡面提到了蠻多的方法，包含整個團隊的規劃、設計、思維、整合...等等的議題，如果你想要帶領你的團隊打造出一個出色的產品，非常建議你去看這本書。
回到我們正題UX，使用者體驗，當我開始想要怎麼來表達了時候，我們就先用最膚淺的方式來說好了，當然UX不是我們想的那麼簡單，不是你畫畫一個好看的Button，好看的圖片就可以解決的事情，中間包含了使用者心理、目標族群、操作習慣...等等，如果我們用最膚淺的方式來看UX的話先從動線規劃跟視覺來討論好了。
我最喜歡用註冊會員當做例子，這應該也是最廣泛大家都知道的範例
你的網站，希望可以增加會員量，你也想要得到使用者完整的資料，包含他的姓名、電話、地址、Email，甚至他可以再備註他家有幾個兄弟姊妹，平常上網的習慣，想要得到使用者更多的資料，但你必須知道你的使用者一點都不想告訴你，他希望給你的資料越少越好！！！
許多人看到註冊會員就會卻步，如果你的網站上有統計使用者的流量，不彷在註冊頁加入統計，有許多人在註冊頁時就會離開你的網站。可能是他不想告訴你那麼多的訊息，有可能是你的動線規劃太差！

一打開Facebook，我們很清楚的知道想要使用他們的平台需要註冊會員，不需要看一大串的同一條款，結果你連一個字都沒看就按了「我同意」，Facebook選擇了連結的方式，真的有需要的人就會去看。

還記得以前在註冊Yahoo會員的時候，都會逼著使用者按下「同意授權書」，現在Yahoo巧妙的也將服務條款放在右上角的連結，這也是提升UX的新選擇。
這個部分就先提到這，要慢慢去感受使用者才能更做出更好的體驗。
Floating Action Button為例，你期待按下這個Button會有什麼樣的反應，跳轉？彈出Alert？還是依照頁面類型來去做最適合的動作？
什麼是Floating Action Button
大家都應該用過GoogleMap吧！以下圖為例，我們想要回到現在的我所在位置，不需要有太多的預期跟不確定，直接點選右下方第一個的Floating Button，就可以動作。

我們想想，如果今天Google在你按下Button的時後跳出一個alert來提醒你或警告你按下去後會造成某些動作，這樣的行為是不是會造成使用者的困擾呢？Button的大小是不是會造成使用者很難去點擊到？這可能跟UI設計也有點關係，UX是一項人因工程，我們也必須考慮這些狀況。
講到Button，我就想到惹人厭的廣告，下面為範例

我敢說這是最爛的UX體驗，我的手機比較小一點點常常會點不到 X ，就會讓人不小心點到廣告，希望設計廣告的人看到這篇文章可以做調整，有的時候還會遇到關閉的按鈕不見的情況，這樣的廣告行為有點冒犯到使用者，在設計時必須更加的謹慎，避免網站的流量跑掉。
下面的設計相較於明顯、易按，但這樣子的設計，button的顏色與樣式必須要在多花一點時間去設計，必免讓人家誤會只是一段文字而已。

每天最喜歡寫的就是減肥專欄，單純在記錄我這三十天的運動狀況，為了要寫鐵人賽的減肥專欄，我更有動力去運動了，昨天寫完鐵人賽後就到健身房報到，看到假日的健身房沒有人，實在有說不出來的開心(老闆心裡一定不開心)，想用什麼器材都不用等，也不用聞到空氣中有肥宅味(難道是自己的味道嗎)
為什麼常常會看到健身的人在喝乳清
主要的用途在於修復肌肉受損組織、增加肌肉質量或延緩肌肉衰退，我們之前提到重訓可能會造成肌肉受損，所以在運動後飲用適量的乳清蛋白有助於肌肉的發展喔！
如果你可以接受自己的打扮
不必在意別人的眼光，其實穿網襪也很好看
By 網襪工程師

(From https://www.pinterest.com/pin/387872586642344273/ )",,['UX 體驗'],"['動線規劃', '視覺感受', '減肥專欄', '每日一句']",['小知識'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191837,ModernWeb,0,Next.js+各種套件組合系列,14,Next.js&Webpack-Bundle-Analyzer,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513522826000000000,419,"介紹
Next.js 基本就幫忙包好一些常用的 Webpack，這次使用 Webpack-Bundle-Analyzer ，這個可以看出程式 package 大小方便抓誰是胖胖的一個套件 ，來說明Next.js 如何對 webpack客製化
安裝套件
cross-env 是用來設定環境變數使用 ，這個套件 cross的意思是跨平台以下就是要給next一個環境
變數 ANALYZE，安裝好套件後在package.json中 scrtip 加上 ""analyze"": ""cross-env ANALYZE=1 next build""
這樣就可以開始使用這個套件了
以上為基本設定
接下來就要在根目錄下 設定一個 next.config.js 檔案內容如下
以上寫在 next.config.js  就是對 webpack做擴充 ，因為有設定環境變數 ANALYZE=1 所以以上就會建立一個  server 在 8888  port work的分析表。

這套的功能圖片，長這個樣子還不錯可以幫助知道哪些套件是肥貓。
總結
在next.js如果要給他一些環境變數可以使用 cross-env ，如果要對webpack做擴充只需要在 next.config.js 上直接用 範例上的webpack語法擴充就可以了
官方網站範例
https://github.com/zeit/next.js/tree/canary/examples/with-webpack-bundle-analyzer",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191137,自我挑戰組,0,用IT看世界系列,13,研究所-進修之路(2),allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1513516705000000000,458,"這週除了陸陸續續完成一些研究所的報名書審之外，也思考了一下自己將來要走的路在哪裡?

我喜歡旅遊、烹飪、語文，喜歡IT技術，因為技術可以讓我建立些專業，我想明年要找個時間出國散散心，今年沒安排假期出國走走，一方面課程卡太緊，另一方面捉襟見肘
如果可以，明年出國想規劃做IT志工，想用IT去看世界，順便把自己整理整理，充滿電在出發
我除了報名資管相關類的之外，還報了一個很特別的系所「客家語文」
對你沒有聽錯!!!客語所，因為筆者是客兄....
在今年9月的時候我去參加了客語中高級認證，明年1月會公布榜單，沒意外的話應該可以上中級，至於中高級
可能來年再戰吧，因為畢竟考了聽、說、讀、寫，這沒準備的話，恐怕是沒機會",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191937,Security,0,資安的學習心得及分享系列,14,DAY14病毒,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1513512365000000000,439,"繼上一篇說的，《梅麗莎病毒》，在1998年由美國人寫出來的一個程式，他主要的傳輸管道就是透過郵件來傳播。
《梅麗莎病毒》執行方式是以郵件為媒介傳播，收件人打開郵件，病毒就會自動向用戶通訊錄的前50位好友複製發送同樣的郵件。
《梅麗莎病毒》
其實這篇的重點是病毒，為什麼要用《梅麗莎病毒》來開頭，是因為病毒散播的管都通常是藉由網路、信件、匿名散播為主。
其實病毒就像我們人類感冒一樣，如果你沒去看醫生，身體就會很虛弱，因為病毒在你身體裡作怪，甚至還會傳染給周圍的朋友和自己家人，就像電腦病毒的蔓延一樣。

所以電腦感染到病毒他的原理和人是一樣，不斷複製，不斷破壞，只是電腦病毒需要一個媒介才會傳染，例如：網路(Internet)。不過病毒可怕的在於他會去破壞我們的程式、軟體，所以電腦執行速度就會越來越慢。
電腦遭病毒入侵可能會：
1.	無法順利格式化或很容易被格式化
2.	電腦降速
3.	開機緩慢等
4.	占用記憶體
5.	出現莫名廣告
那該如何防範呢?其實會中毒的主要原因都出在使用者上，擁有正確的防毒概念是很重要的，像是基本的，不要亂點不知名連結，不要進入惡意網站，經常更新防毒軟體及定期對電腦進行安全掃描，不過在現金到處都充滿病毒的網路世界，要不中毒其實除了好習慣之外，還要擁有歐洲人般的神運，所以請學會備份的好習慣，將風險分散掉，而且要是真的中毒了，也只要使用還原系統就能回到正常狀態。
切記並不是電腦沒重要資料就不用防毒，並不只是單純的偷東西，對於電腦本身，也是非常不好的存在。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191884,ModernWeb,0,ngrx/store4學習筆記系列,1,[1]有關前端的狀態管理,jerryhsieh01,https://ithelp.ithome.com.tw/users/20103574/ironman,1513511029000000000,438,"前端工程師經常需要面對所謂的狀態管理，至於什麼是狀態 (State) 呢？舉幾個例子：
使用者登入狀態：使用者註冊完剛進入網站時，這時的狀態為“未登入”，使用帳號登入完，這時候狀態為“登入”，如果網站提供“記住我”的功能時，當使用者關掉瀏覽器，下次打開瀏覽器進入這個網站時，這時候的狀態為“登入”，如果“記住我”的期限是三天，當第四天使用者進入網站時，這時的狀態為“未登入”...
購物車狀態：使用者在不同的產品頁面可以隨時加入或拿掉購物車裡的產品跟數量，甚至要記住使用者購物車的狀態即使在不同時間（今天放，明天結帳），不同瀏覽器上（手機，電腦上）
訊息狀態：一些社群軟體提供已讀，未讀的訊息狀態，使用者在不同的頁面會期待統一的未讀狀態
一般而言，前端工程師會使用像是 Cookie, local storage... 等等瀏覽器端的儲存藉由跟後端的連結來統一處理狀態問題，因為涉及不同的頁面都會使用到這些狀態，譬如使用者登入狀態會影響可以允許進入的網頁，前端必須要統一處理這些狀態，以免造成狀態不及時造成的問題。
一個有名的問題是臉書的已讀訊息不一致的臭蟲，為此臉書發展出一套稱為 Flux 的方法來處理狀態問題，其中最主要的觀念是單一流向的狀態鍊，也就是不將狀態視為一個類似公域變數般，而是一連串的狀態流，而這個狀態流的流向是單一方向，也就是不能直接回到其中一個狀態，每次的事件都會產生一個新的狀態，這樣做法的好處是可追蹤，也就是運用一些工具，像是 Chrome Redux Devtool，可以清楚了解狀態發生的過程，進而處理程式流程的相關問題.

React 是臉書背書的框架，當然也是最早運用 Flux，也就是 Redux, 隨後 Angular, Vue 也都發展出類似的工具, Vue 的工具是 Vuex, 而 Angular 自己本身跟 RX 合作，發展出 ngrx/store，這是運用 Flux 的想法，運用 Reactive Extention 的 Observable 實作的工具。 Observable 本身就是資料流的概念，確實非常適合於 Flux 的實作，接下來的文章會繞著這個主題提供一些自己查到的資料，來跟大家分享，有關的主題大概如下",['何謂狀態管理 (State Management)'],"['狀態 (State)', '如何管理狀態', '管理狀態的工具']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191934,自我挑戰組,0,Verilog從放棄到有趣系列,6,[Day6]forloop,Sheng,https://ithelp.ithome.com.tw/users/20107543/ironman,1513510395000000000,457,"今天要來跟大家分享的是for loop這個語法，大家一定都知道這語法，但在verilog的使用上會跟一般在C的使用方式會有大大的不同，所以使用前一定要瞭解他的規則並小心使用．
舉例來說：
Verilog:
reg[31:0]matrix[8:0];
always@(posedge clk)begin
if(reset)
for(idx=0; idx <9; idx = idx +1)begin
matrix[idx] <= 0;
end
end
C code:
int matrix[9];
for(idx=0;idx<9;idx++){
matrix[idx] = 0;
}
兩者看起來好像都是對matrix做歸零的動作，但是以行為上來說是不相同的，以C code來說，它是一個一個對matrix裡的元素做歸零，時間上來說，以上面這例子要花9個單位時間做完這個歸零的動作，而verilog是說，每當你的時脈(clock)正緣觸發時，會更新完always block裡面所要求的動作，以上面例子來說呢，就是當時脈正緣觸發時，就會把matrix裡面的所有元素做歸零的動作
等同於:
always@(posedge clk)begin
matrix[0] <= 0;
matrix[1] <= 0;
matrix[2] <= 0;
matrix[3] <= 0;
matrix[4] <= 0;
matrix[5] <= 0;
matrix[6] <= 0;
matrix[7] <= 0;
matrix[8] <= 0;
matrix[9] <= 0;
end
用一個波形圖給大家看看，當reset訊號等於1且clock正緣觸發時，matrix裡面的每一個元素都會做歸零。

這樣看起來的話，當你在verilog使用for loop時，他會把你的for做展開的動作，並每次時脈正緣觸發時去做always block所要求的動作，所以如果要做像是迭代的運算的話在verilog就不能用for loop實現，舉例來說：假設你要累加一個值十次好了，如果你寫成：
reg [7:0]temp;
always@(posedge clk)begin
for(idx=0;idx<10;idx=idx+1)begin
temp <= temp+idx;
end
end
把這種想法寫成電路的話，照剛剛的說法把for展開並在時脈正緣觸發時做動作，意思就會像下面這樣．
always@(posedge clk)begin
temp <= temp+0;
temp <= temp+1;
temp <= temp+2;
temp <= temp+3;
.
.
.
temp <= temp+9;
end
這樣應該跟我們當初想要的行為不一樣，所以在verilog來說，如果你要做像是累加這種運算，或者是重複的動作要做數次，可以利用counter來計數，像是剛剛累加10次的例子，我們利用counter來重寫一次看看：
reg[3:0]counter;
always@(posedge clk)begin
if(reset)	
counter <= 0;
else
counter <= (counter == 10) ? counter : counter  + 1;
end
always@(posedge clk)begin
if(reset)	
temp <= 0;
else if(counter<10)
temp <= temp + counter;
end
下面用一個波形示意圖給大家看，

上圖顯示reset完開始做累加，達到原先我們要的要求。
所以如果需要在verilog 使用for loop的話，請先思考一下是否你寫出來的for是符合你的要求，試著把for展開看看，看一下展開後的行為是不是你要的，如果只是想要用for去迭代做運算或者是其他迭代的行為，那在verilog這邊推薦大家使用counter的方式去代替，最後面的應用電路主題當中如果有用到的話，會再提醒大家，那今天就先到這裡囉．",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191933,自我挑戰組,0,網頁學習日誌系列,14,jquery：小說閱讀,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1513509942000000000,449,"想法：
閱讀小說或文章時如果可以切換背景顏色、文字大小可讓眼睛不會吃力。
css():
1.返回被選元素的樣式屬性
2.設置被選元素的樣式屬性
3.設置多個被選元素的樣式屬性
詳細介紹可看w3c的介紹：
http://www.w3school.com.cn/jquery/jquery_css.asp
這邊重點就是如何讓功能列固定向上，在position設定fixed就可以固定在某處，配合top:0則固定在上，必要的話可以再加上z-index:99 數字越大，越在上面。
下方有個程式碼
當'.green’這個按鈕，當他按下時，就不會有預設動作(如提交表單之類的)
詳細可看w3c的介紹：
http://www.w3school.com.cn/jquery/event_preventdefault.asp
上面兩個功能都是套用 css()，跟addClass()都是更改原來的css 類別屬性
下面套用css()兩種改屬性的方法(單個&多個)，依據情況而選擇使用：
codepen網址：https://codepen.io/yuski/pen/BJyEgV
","['程式需求：', '重點語法：']",['結果如下：'],"['html：', 'CSS：', 'jquery：', 'css()跟addClass() 差異：']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191923,自我挑戰組,0,專案學習的30天系列,1,Day1-案況(第一件案子),馬達,https://ithelp.ithome.com.tw/users/20107754/ironman,1513509299000000000,457,"上班大概半個月，主管請我到辦公室，請我全權負責做一件案子。
我：「這次案子主要有哪些功能？」
主管：「大概就是新聞系統比較難，其他就像是前台顯示頁面用後台控制。」
我：「那有甚麼資料嗎？」
主管：「有他們想要的網站風格，就大概照這個做吧！」

https://millfieldschool.com/about-millfield
我：「那我就照他的網站，做主版頁面給客戶看囉」
主管：「他們還有一份網站地圖，你可以做出來看看」

老闆：「這次案子覺得大概甚麼時候可以做完？」
我：「假如是新聞系統功能，可能一個月多」
老闆：「你可以直接拿公司之前的網站去改就好了」
我：「公司語法都是VB，個人寫C#有點不太一樣，假如要求快可以找寫VB的人，請我離職吧」
老闆：「你覺得C#值得投資嗎？」
我：「C#可以寫Web也可以利用Xamarin做App，應該是不錯的投資」
老闆：「那就寫吧」
1.主版頁面
2.各個子頁面(尚未有內容)
3.各個系統功能的列表(列出其中一項)
4.開始實作班級相簿系統
我會找寫VB的人，接網頁的案子，除非我想轉接App，才可能找其他語言人才
我會把合約和客戶資料給負責人
-盡可能拿到合約
-拿不到合約，請給我簽約合約系統內容
-估時的部分，強調並非是保證、承諾",['給第一次接網頁案件的人'],"['第一次接收案況', '第一次估時', '第一次產出內容', '回到過去，我是老闆', '回到過去，我是主管', '回到過去，我是我', '菜逼八第一次專案心得，若不盡不詳之處還請包涵，若有其他想法也請大神們不吝指教']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191932,ModernWeb,0,ZerotoherowithReact.js系列,11,【Day11React】EventsandDataChangesinReact,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1513507741000000000,436,"
今天要介紹如何即時得到使用者輸入的色碼，並即時 render 到氣球上。
DEMO
首先，建立一個 Balloon component
每一個 component 的大架構都是如此，在 render 這個渲染方法中，撰寫 return 要回傳並渲染回 DOM 的內容。
上面是 ES2015 的寫法，還有另一種 functional 的寫法：
建立變數，透過 createClass 來建立類別
建立完 component 之後，現在最後寫上
這個最後渲染回 DOM 的語法需要放兩個參數
我所建立的 Component
綁定要渲染的 HTML 區塊
向前面幾篇文章有提到的，我們可以透過 {this.props.<props-name>} 去取得某個 parent component 裡的 property
在 JSX 語法裡面，它並不允許你有回傳多個 tags，因此只要有兩個以上 tags ，我們都必須再用一個 tag 把所有標籤包起來，我這邊用 <section></section> 包裝這些標籤。
我放了一個 ask props 在 <Balloon /> component 裡，而在 Balloon component 便可透過 {this.props.ask}  來取得內容。
此外，我們也可以在 JSX 語法中撰寫 HTML 的 CSS 樣式，不過不能像一般在 HTML tag 裡面寫。
我們要用物件的方是呈現
這邊有兩個大括弧，最外面的是 物件，裡面就像是在撰寫 CSS
我們在 CSS 定義背景顏色會用到的
background-color 在 JSX 語法中要寫 backgroundColor。
要定義字體大小用 fontSize，在 CSS 我們會在數字後面加上 px，不過 JSX 語法中只需要定義數字即可。
把所有的語法都寫在 tag 裡實在是難以閱讀，現在我只寫兩行樣式，若是需要更多樣式甚至可能會要用到許多互動或動畫效果，那麼程式碼會很難維護。因此，我在這邊創建一個 styleObj 的變數，把所有樣式都存放在這個變數裡，再用呼叫變數的方式放回 tag 中。
state 是 React 的核心特色之一，每一次狀態(state)變更，就會觸發一次 Virtual DOM 去對照實際 DOM 的差別，用非常敏捷的方式渲染實際 DOM。
我先建立一個 state 物件，在每一個 JavaScript 的 class 底下都有一個 constructor，我們要把 props 參數傳進 constructor 裡，我們為了讓子類別使用 this.props，必須先調用 super 才能引用 this
在這邊我設定了預設的 state 是 #F07C65 這個色碼的顏色
在 render 裡先加上讓使用者輸入色碼的 input，並在 input 裡面綁 onChange 去觸發換色的 function
換色 function 使用 changeColor()
event.target.value 會去抓 input 裡面的 value，然後在 changeColor() 裡更新 state。
好的，完成了今日任務～
可以去連結裡玩玩看 DEMO",,,"['建立 Component', '加入 Properties', 'style variable', 'State', '呈現氣球顏色']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191930,自我挑戰組,0,資訊技術解戈迪安繩結系列,10,IT｜作業系統｜Linux｜使用screen指令操控unix/linux終端機,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1513507147000000000,461,"通常一個終端機（terminal 或 console）只能開啓一個互動式（interactive）的 shell 來使用，而藉著 screen 的幫助，使用者可以在一個終端機下，同時開啓多個互動式的 shell，除了自己使用之外，還可以讓 session 分享給不同的使用者，或是讓執行中的 session 暫時卸離（detach），隨後再重新連接（attach）即可繼續操作。
screen 指令是一般 UNIX/Linux 使用者或管理者常會使用的終端機管理程式，可以讓一個終端機當成好幾個來使用。
[安裝 screen]
安裝：適合的作業系統（Debian/Ubuntu）
sudo apt-get install screen
安裝：適合的作業系統（Red Hat/Fedora）
yum install screen
[開始使用]
執行指令，這時候會出現一些訊息，按下空白鍵跳過之後，就可以看到一個新的 shell。進入 screen 所建立的新 shell 之後，看起來跟原本的畫面一模一樣，但是它其實是一個新開啟的 shell，而在離開 screen 環境之後，就會回到原本的 shell 中。
screen
離開終端機 session
exit
screen 控制指令可以使用 Ctrl + ? 來查詢線上的操作說明。
Ctrl + ?
[將 screen 卸離（Detach）與重新連接（Re-attach）]
使用 screen 最大的好處之一就是可以將其卸離，而在重新連接之後完全不會影響正在執行中的任何工作。
以 ping指令來示範如何將執行中的工作卸離，然後再重新連接。一開始先執行
screen
使用 ping 來示範的原因是因為它在執行之後就會不斷的送出 ICMP 封包，直到使用者按下 Ctrl + c 為止，所以它可以一直執行下去不會中斷，方便我們測試 screen 的卸離功能。

接著使用者就可以按下 Ctrl + a 後，再按下 d 鍵（detach），這時候整個 screen 就會被卸離

若要重新連接上 ping 這個 screen，可以執行，這樣就會回到之前的 screen 環境中，這時候你也可以看到 ping 指令還在執行，並沒有受到影響。
screen -r
[同時使用多個 screen 工作環境]
如果只有一個 screen 工作環境不夠用，也可以將現有的 screen 工作環境卸離後，在原來的 shell 中再執行一次 screen 指令，建立另外一個新的 screen 環境來使用
如果在同一時間有好多個 screen 工作環境都處於卸離狀態，則在重新連接時可以使用
screen -ls
初初結果
若要連接第一個 1394.pts-0.MyPi2 這個 screen 工作環境，則在 -r 參數之後加上這個名稱即可：
screen -r 1383.pts-0.MyPi2
若嫌指令太長，可將指令改為
screen -r 1383
[使用多個 screen 視窗]
若要同時使用多個互動式 shell，最方便的方式是在一個 screen 工作環境中建立多個「視窗」，而每一個視窗都可以提供一個獨立的 shell 給使用者進行互動式的操作，這樣的作法會比使用多個 screen 工作環境方便，尤其是在切換不同的 shell 時不用卸離再重新連接。
建立一個新的視窗，並出現一個獨立的互動式 shell
Ctrl + a 後，再按下 c 鍵（create）
在不同的視窗之間切換，可以按下 Ctrl + a 後，再按下 n 鍵（next），這樣就會切換至下一個視窗
切換前一個視窗
Ctrl + a 後，再按下 n 鍵（next)
切換下一個視窗
Ctrl + a 後，再按下 p 鍵（previous）
[紀錄所有動作]
screen 除了提供獨立的工作環境之外，它還可以把使用者所有的動作記錄下來。
按下 Ctrl + a 後 (放開)，再按下 H 鍵（請注意這裡是大寫的 H，也就是要按著 Shift 鍵再按 h 鍵）
畫面下方會出現以下資訊：
Creating logfile “screenlog.0“
結束記錄功能
再按一次 Ctrl + a 與 H 鍵即可
[鎖定 screen 螢幕]
如果在使用 screen 管理伺服器時，要暫時離開電腦，也可以使用 screen 的螢幕鎖定功能，當要鎖定螢幕時可按下 Ctrl+ a 後，再按下 x 鍵，這樣螢幕就會被鎖住

[離開 screen 工作環境]
若要離開 screen 工作環境有幾種不同的方式：
如果工作還沒做完，想要暫時離開，
卸離功能（Ctrl+ a 與 d）
如果是工作都已經做完了，當 screen 工作環境中所有的 shell 都結束後，screen 會自動結束。
exit 指令離開整個 shell 環境
直接關閉整個 screen 工作環境
Ctrl + a 與 k（kill）
[screen 參數與操作指令速查表]
screen 參數表：
screen 參數",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191693,AI&MachineLearning,0,深度學習環境安裝筆記系列,6,[Day06]深度學習環境安裝筆記—安裝CUDA與cudnn,a7552005,https://ithelp.ithome.com.tw/users/20091307/ironman,1513505403000000000,427,"編輯 ~/.bashrc ，加入 cuda 的環境變數


開啟新的終端機視窗，並複製 cuda 的 sample code ，在用以下指令測試cuda是否安裝成功

編譯完成後執行以下指令，如果最後出現Pass，代表安裝成功

下載cudnn，進入網站後點選 Download

再來會要你登入帳號，如果沒有帳號就去註冊一個吧。





到此基本的環境已經安裝完成","['1.安裝 CUDA ：', '2.安裝 cudnn']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191828,ModernWeb,1,邁向JavaScript勇者之路系列,14,JavaScript的原型繼承(圖文介紹版),卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1513505301000000000,1255,"許多人在寫 JavaScript 應該多少都會聽過原型鍊、原型繼承...，這個觀念在寫 JavaScript 是否重要呢？實作中會不會常使用到這樣的技巧？這裡可以先回答 ""會""，而且我們很常使用到原型，而且了解原型會有助於我們加速理解 JavaScript 的概念。
以下有一個物件，物件裡面只有一個 name 及一個 function run()，所以我們了解以下物件只能執行 run()，因為他沒有其他的函式可以使用。
但除此以外還有一些額外的方法可以使用，像是 hasOwnProperty()，但奇怪的事情是 hasOwnProperty() 這個方法，沒有在 person 這個物件下，為何還可以使用此 hasOwnProperty() 的方法，原因在於 ""原型繼承""。

上圖中 person 這個是我們剛剛宣告的物件，它的上層是則是他的原型物件(它是半透明的喔，所以我們平常會沒注意到)，當他在使用 hasOwnProperty() 時，就是在使用它原型物件的方法。
錯誤範例：這裡提供一個觀念上的錯誤範例，實際執行時我們不會用此方法來增加原型方法。JavaScript 中所有的物件、函式都有 __proto__ 的原型屬性，這一個原形屬性會不斷的向上尋找他的上層原型。

我們在 ming 下的 __proto__ 直接掛上 run 的方法，使其產生在 __proto__ 下 注意：請不要這樣做，只是為了方便理解。

雖然直接 console.log(ming) 並不會看到 run() 這個方法，但執行時他會不斷的向上尋找到原型內的 run() 方法來執行它。
其中原型還有個特性，我們如果在物件原型下直接建立新的方法，就會造成以下的問題，兩個看似沒有關係的物件將會共用相同的原型方法 (因為兩者的原型都是物件)，這種情況會出現管理上的問題。
這個範例中，我們強制將函式寫到了 物件 這個原型上，所以新增的物件都會 共用 此屬性。

在後面的章節我們會介紹如何正確地使用原型繼承。
JavaScript 只有一個建構物：""物件""，如果上述程式碼以下我們繼續往下增加：
這個範例中，我們新增一段陣列，並在陣列中使用先前的物件原型方法，雖然會出錯，但是是可以執行的。
在此段，我們對任一陣列原型加入新的函式，此時兩個陣列都可以套用此函式，但對於物件來說卻不能執行此方法，因為在原型鍊上物件屬於陣列的頂端。

由於原型有不斷向上查找的特性，如果在上一層找不到可用的方法，他就會繼續往上找，這個也就稱為原型鍊，所以在 mingFamily 這個陣列才會取用到剛剛物件原型所增加的方法，本篇只是簡單介紹原型的概念，接下來幾篇則會開始讓大家了解這有什麼樣的用處。
圖文版同步發表於：https://wcc723.github.io/javascript/2017/12/17/javascript-prototype/",,"['共用原型', '原型鍊的的頂端是物件']",,['透過錯誤範例了解原型'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191924,AI&MachineLearning,1,以100張圖理解NeuralNetwork--觀念與實踐系列,7,Day07：撰寫第一支CNN程式--比較『阿拉伯數字』辨識力,IcodesoIam.,https://ithelp.ithome.com.tw/users/20001976/ironman,1513503339000000000,455,"我們仍然作『阿拉伯數字的辨識』，比較 CNN 的作法與簡單的 Neural Network 有何不同。程式來自https://github.com/fchollet/keras/blob/master/examples/mnist_cnn.py ，我在程式中加了註解，請參考這裡 ，檔案名稱為cnn.py。
整個訓練過程執行有點久，真想買一片好一點的GPU顯示卡，裝個GPU版的TensorFlow，以縮短泡茶/喝咖啡的時間，執行完趕快用下列程式碼存檔，避免下次還要重跑。
訓練結果準確率達 99.11%，比單純使用簡單的 Neural Network 高多了，但執行時間也相對較長，但只要將模型結果儲存，我們就只要訓練這次就夠了，之後直接載入模型及參數，就可以直接進行預測了。讀者如果不耐久等，也可以自這裡取得 cnn.config 及 cnn.weight，直接載入模型及參數。
另外，各位可以再執行 cnn_1.py，測試第三篇用 draw.exe 撰寫的數字看看預測結果。

這裡再提供個小技巧，可以計算『混淆矩陣』(Confusion Matrix)，顯示測試集分類的正確及錯認總和數，左上至右下的對角線為正確數，其他格為錯認數，可以看出某一數字被錯認為哪一數字的機率最高，可以再加強訓練資料，以改善錯誤分類。

圖. 『混淆矩陣』(Confusion Matrix)
整個程式結構與第二篇的程式大致相同，主要的差異在層(layer)的設計(第42~59行)，注意，當我們使用ConvxD卷積層時，第一個參數濾波器(filters)數目並不是 output 的大小，它是output 的深度(Depth)，而 output 的寬與高會隨著參數設定有所不同，計算公式為 ((W-F+2P)/S)+1，各變數定義如下：
透過以上公式，我們就會算出output 的寬或高，例如第42行 output 的寬與高 = ((28-3+0)/1)+1 = 26，可以執行指令 model.summary() 驗證，output的維度大小為 (None, 26, 26, 32)。

圖. CNN範例程式的結構
利用CNN來作『阿拉伯數字的辨識』，有點像大材小用，因為，阿拉伯數字的圖形單純，只有線條，而CNN的長處是自動萃取特徵，辨識由線、面、角，構成複雜的形狀，所以，我們會多舉一些應用實例，來彰顯它的威力。但在那之前，我會先在下一篇整理一下這支範例程式的相關函數及參數說明。",,"['範例程式', '程式說明', '結語']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191927,DevOps,0,Nightwatch101：使用Nightwatch實現End-to-EndTesting系列,7,Nightwatch101#7：指令Part1,cythilya,https://ithelp.ithome.com.tw/users/20092232/ironman,1513502531000000000,2316,"
指令分為兩種－Nightwatch 提供的指令與開發者撰寫的客製化指令，以下介紹 Nightwatch 所提供的指令。程式碼可以打在 test/e2e/testDemo.js 並執行 nightwatch ./test/e2e/testDemo.js 來跑跑看喔！
這篇 Part 1 先來看一些 UI 操作相關的指令，例如元素定位、設值、點擊和檢視是否存在或可見等。
本系列文章皆使用這個專案，可以拉下來玩玩；有什麼問題都可以提出 issue。
callback 不是指令，它是參數。Nightwatch 的指令可傳入 callback 參數，讓開發者在事件完成後對回傳的 response 物件做些事情。範例如下，在 click 登入按鈕後，console 字串「click btn login」。

打開指定網址。
在 launch_url 上加上 hash，可為 #hashvalue 或 hashvalue。
回顧launch_url。launch_url 是預設要瀏覽的網址，在設定檔 nightwatch.config.js 可依據不同環境來個別設定。
切換定位網頁元素的方式，選擇使用 CSS Selector 或 Xpath 來選取網頁元素。
範例程式碼如下。在這邊會看到混用 CSS Selector 和 Xpath Selector 來選取頁面元素。預設是使用 CSS Selector，如果要切換成 Xpath 要用 .useXpath()，再切回 CSS Selector 就要用 .useCss()。
完整範例。
關於使用 CSS Selector 或 Xpath 定位網頁元素的說明和詳細範例可參考這篇和那篇文章。
模擬點擊 DOM element 的動作，第一個參數是使用 CSS 或 Xpath Selector 選定的元素，第二個參數是 callback（optional）。這裡使用 webdriver 的 elementIdClick 協定指令。
範例如下，點擊 .button-submit。
用於清除 text input 或 textarea 的輸入値，第一個參數是使用 CSS 或 Xpath Selector 選定的元素，第二個參數是 callback（optional）。這裡使用 webdriver 的 elementIdValue 協定指令。
範例如下。
對某個元件鍵入字串，一般用來對 input text 設値或模擬連續打字，字串格式為 utf-8。第一個參數是使用 CSS 或 Xpath Selector 選定的元素，第二個參數是要鍵入字串，可為字串或陣列，第三個參數是 callback（optional）。
對 id 為 userid 和 userpassword 的 input text 分別鍵入字串 my_id 和 my_password，並按 enter 鍵送出。
取得表單元件目前的値。第一個參數使用 CSS 或 Xpath Selector 選定的元素，第二個參數是 callback（optional）。回傳物件，型別是字串。這裡使用 webdriver 的 elementIdValue 協定指令。
範例如下。
執行結果。

對指定的 DOM element 取得屬性値。這裡使用 webdriver 的 elementIdAttribute 協定指令。第一個參數使用 CSS 或 Xpath Selector 選定的元素，第二個參數是屬性名稱，第三個參數是 callback（optional），回傳屬性値。
範例如下，對 #userid 檢視其 class 是否為 rt-user-info-input valid。

取得特定 DOM element 的 tag name。這裡使用 webdriver 的 elementIdName 協定指令。第一個參數使用 CSS 或 Xpath Selector 選定的元素
，第二個參數是 callback（optional），回傳 tag name，型別是字串。
範例如下，對 #userid 檢視其 tag name 是否為 abc，而實際得到的卻是 input。

取得特定 DOM element 的可見文字。這裡使用 webdriver 的 elementIdText 協定指令。第一個參數是使用 CSS 或 Xpath Selector 選定的元素
，第二個參數是 callback（optional），回傳文字，型別是字串。
範例如下，對元素 .rt-button-fb-login 取得文字，並檢視是否等於 abc，而實際得到的卻是「Facebook 登入」。

取得頁面 <title> 的文字。這裡使用 webdriver 的 title 協定指令。沒有輸入參數，回傳字串。
範例如下，取得標題，並比對資料型別是否為字串、標題文字是否為「Nightwatch.js」。
對特定 DOM element 取得 CSS 屬性的值。這裡使用 webdriver 的 elementIdCssProperty 協定指令。第一個參數是使用 CSS 或 Xpath Selector 選定的元素，第二個參數是 CSS 屬性名稱，第三個參數是 callback（optional），回傳屬性値。
取得元素 #search_input 的 CSS line-height 的值，並比對其值是否為「27px」。

取得 DOM element 的大小。這裡使用 webdriver 的 elementIdSize 協定指令。第一個參數是使用 CSS 或 Xpath Selector 選定的元素
，第二個參數是 callback（optional），回傳一個物件 { width: number, height: number }，包含寬和高，單位是 pixel。
如下，打開網頁找到「Facebook 登入」這顆按鈕，來看看它的寬高是多少。

預期寬度是 500px，得到 124px。
預期高度是 20px，得到 31px。

確認指定的 DOM element 在畫面上是否是可見的。這裡使用 webdriver 的 elementIdDisplayed 協定指令。第一個參數是使用 CSS 或 Xpath Selector 選定的元素，第二個參數是 callback（optional），回傳一個布林值，表示是否可見。
打開露天首頁，檢視 .rt-header-not-loaded 這個 DOM element 是否可見。由於在尚未登入的狀態，因此是可見的。可見的定義是 display: block、display: inline-block 或 opacity 不為 0 等。

確認 DOM Element 載入完成。等待一段時間，來檢視元素是否存在，使用者不一定會肉眼能看到，但可在 HTML 裡面找到。假設在等待指定時間後，檢視該元素但不存在，測試就會失敗。但如果不希望測試失敗，可設定 abortOnFailure 為 false，這樣測試就會繼續下去。

可使用 nightwatch.config.js 的 waitForConditionTimeout 屬性來改變預設的 polling interval，單位是 ms。

與上面的 waitForElementPresent 相反。
在執行相關動作前，等待指定的一段時間，來檢視元素是否可見。與 waitForElementPresent 類似。
兩者差異在於waitForElementPresent 是指元素存在於 HTML，但 waitForElementVisible 是使用者肉眼可見。可參考說明。
與上面的 waitForElementVisible 相反。
移動滑鼠到指定的 DOM element。這裡使用 webdriver 的 moveTo 協定指令。第一個參數是選項與偏好設定
使用 CSS 或 Xpath Selector 選定的元素，第二個參數是 xoffset，第三個參數是 yoffset，第四個參數是 callback（optional）。
範例如下，移動到元素 .category-menu 右上方皆距離 10px 的位置。
這裡為以上介紹的指令準備了一個綜合範例，來實際跑跑看。
執行結果。

完整範例程式碼。
測試報告。

今天看完 UI 操作相關的指令，明天來看 Cookie、Window 和 Log 相關的指令吧。
網誌版。",,"['callback', 'url', 'urlHash', 'useCss / useXpath', 'click', 'clearValue', 'setValue', 'getValue', 'getAttribute', 'getTagName', 'getText', 'getTitle', 'getCssProperty', 'getElementSize', 'isVisible', 'waitForElementPresent', 'waitForElementNotPresent', 'waitForElementVisible', 'waitForElementNotVisible', 'moveToElement', '範例']","['參數', 'waitForConditionTimeout', 'waitForElementPresent vs waitForElementVisible']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191926,ModernWeb,0,ASP.NETMVC網頁程式介紹系列,8,[Day08]ASP.NETMVC後端傳資料到前端介紹(四),小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1513502447000000000,437,"今天來分享使用Model的方式傳資料到前端，在此先說明，我這一篇所提到的Model，跟MVC的M(Model)的定義可能會有一些出入，畢竟MVC的M範圍太廣了，只是我習慣這樣子稱呼它了，不過MVC有一個預設的資料夾名稱叫Models，我所謂的Model通常是建在這個資料夾底下的class，或是ViewModel(用來傳遞給View或接收View資料的Model)，其實在我的想法Model和ViewModel基本上差別不大，只是有些人會習慣如此稱呼它。
一般來說，如果要傳的資料是很簡單的，可以用ViewBag來傳遞，如果是比較複雜的，當然也可以用很多ViewBag，其實ViewBag也可以傳遞一個Model，甚至一個Model的List也是可以的，基本上ViewBag幾乎可以傳遞任何東西，目前我在寫MVC還沒有遇過ViewBag不能傳遞的東西，但是在某些情況下，尤其是跟資料庫有關的部分，其實用Model來傳遞是很方便的，而且接收網頁的資料也可以用Model的方式接收，這一點就很方便，說實在用過C#的Model來寫MVC之後，現在很多東西都會用Model來處理，覺得還蠻方便的，當然ViewBag也是很常用到，而且用途比Model更廣。
不囉嗦，下面就直接寫一個程式，當然還是用到我們之前的Student，不過這邊改用表單編輯的方式來呈現，從後端帶資料到前端。至於從前端讀資料到後端的部分，則會跟Get和Post的方法一起講。
cs檔案
cshtml檔案
畫面呈現

後端的地方幫Model帶入
前端的地方接收Model，這邊要將專案路徑都列出來
這裡有用到BootStrap的框架，在cshtml檔案中的Styles.Render跟Scripts.Render是ASP.NET MVC用來載入CSS檔案跟JavaScript的方式，不過我很少在用，一方面全部載入會讓網頁速度變慢，只載入需要的就好了，另外一方面這種方式也無法自動更新，感覺實用性不大。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191925,ModernWeb,0,從無到有，打造一個漂亮乾淨俐落的RESTfulAPI系列,7,[Day-7]RESTfulAPI與MVC名詞介紹,10程式中,https://ithelp.ithome.com.tw/users/20107247/ironman,1513502291000000000,428,"Representational State Transfer，簡稱 REST，它是一種網路架構風格，近幾年來 REST 的概念已經被實作在大型網路系統中，而在 Web Service 中使用 REST 概念被實作出來的 API 就簡稱為 RESTful API 他是使用 HTTP 的協定完整定義 Web Service 在 HTTP Request 的各種流程。

圖片來源
HTTP 本身就是 REST 的實作，所謂的 HTTP Request 定義了八種請求方法分別為：
經由 wiki 定義 REST 風格最重要的架構約束有六個:
我們設計 API 時，要保證 RESTful API 的安全性，原因是 PUT 或 DELETE 其實並不安全在沒有權限認證下任何人都可以存取此方法，總不能輕易地隨意讓一位陌生人來更動你的資料對吧？因此若安全性沒有做足容易就成為駭客攻擊的對象。
基本流程如下：
會員機制(帳號密碼) -> 服務端驗證成功並取得一組 API token -> 使用此組 token 訪問 API 資源
BAD
GOOD
MVC 一種軟體架構模式，把系統分成三個種核心，分別為:Model, View, Controller，這三個套用在 Web 分別為前端 HTML+CSS (View)，後端 API 資料庫(Model)，控制後端資料庫的接口 JavaScript (Controller)
優點如下:
本篇文章解釋了 RESTful API 定義與規範，可以讓開發者了解其功能性，此外建立良好的 MVC 架構有助於日後程式開發的茁壯，直覺、簡單、快速才是一個良好的 API 設計。
文章同時發表於：https://andy6804tw.github.io/2017/12/17/restful-mvc-intro/",,"['什麼是 REST/RESTful ?', '何謂 MVC ?', '結論']","['HTTP Request 方法', 'REST 傳輸的要求', 'RESTful API 的安全性', 'RESTful API 的 URI 命名', 'MVC 架構優點']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191921,SoftwareDevelopment,0,Kotlin30天，通過每天一個小demo學習Android開發系列,14,Kotlin開發第14天Ball（Animator）,Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1513501325000000000,408,"
通過實現各種動畫效果來學習 Android 動畫開發。

Android 提供了幾種動畫類型：
通過 ValueAnimator 做動畫的過程，其實不是直接對控件做動畫，而是將對數字做動畫的過程監聽，
將變動的數值拿來修改控件的 property 從而實現動畫的過程。
1、實例化 ValueAnimator，設定一個數值間的動畫。
我們建立一個時間為 2 秒，從 0 到 -200 的動畫，還沒有與任何控件關聯。
2、針對 ValueAnimator 加入監聽，將變化的數值拿來對控件做操控。
通過對 animator 的監聽，我們將變化的值拿來對 view 的 Y 座標進行變化。
也可以簡化成 lambda 形式：
ValueAnimator 有支持 ofFloat ofInt 等不同參數的方法，並且支持連續參數。
比如下面的例子，就是先從 100f 到 -800f 然後再到 -400f 的動畫過程。
ValueAnimator 的第二個監聽方法，可以監聽動畫的狀態：
為了不通過對 ValueAnimator 進行監聽來實現動畫，後來增加了一個繼承自 ValueAnimator 的 ObjectAnimator 類。
只需要幾行代碼就能實現 donImageView 針對 Y 軸的旋轉。
其中第二個參數 rotationY 就是我們想要做動畫的 property 名稱，
ObjectAnimator 會去尋找一個 setRotationY 的方法來進行賦值，從而實現動畫。
通過 AnimatorSet 我們可以同時或接連著做幾個動畫，常用的幾個方法有 .with / .before / .after / .playTogether
Interpolator 用來修飾動畫的執行效果。
這裡有一系列繼承自 BaseInterpolator 的加速器。
https://developer.android.com/reference/android/view/animation/Interpolator.html
只需要給 animator 指定 Interpolator 的實例就可以了。",['Animator'],"['ValueAnimator', 'ObjectAnimator', 'AnimatorSet', 'Interpolators', '參考']",['AnimatorListener'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191889,自我挑戰組,0,hexo-從初學到入門-again系列,2,測試hexo環境-day2,josephwu,https://ithelp.ithome.com.tw/users/20107307/ironman,1513500290000000000,399,"首先我們來看看hexo的常見指令:
$ hexo new [layout] <title>  產生一篇新的文章
[layout]如果沒輸入會使用預設的版面 <title>為你自訂的文章名
$ hexo generate 等於 $hexo g 產生靜態的檔案
$ hexo server 等於 $ hexo s 啟動伺服器  預設網址為: http://localhost:4000/
$ hexo deploy 等於$ hexo d 將檔案部屬到存放空間
接下來依序輸入以下指令:
並在瀏覽器輸入: http://localhost:4000/
就可以看到你剛剛建立的文章article，並出現預設的版面
",,,['在上一篇談到如何建立hexo環境後，接下來就開始要測試我們安裝的hexo是否能成功執行，並更進一步部屬到github上'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191920,ModernWeb,0,前端新手村系列,7,前端新手村垂直排列與BoxModel,chris,https://ithelp.ithome.com.tw/users/20107637/ironman,1513496331000000000,521,"「當你迷惘的時候，就回到原點想一想」-中華一番 蘭飛鴻
網頁前端新手村系列文章，宗旨並不在技術本身的教導，重點放在技術與技術之間的脈胳關係。讓零碎的網頁前端技術的關鍵字，成為比較有系統性的視野。
讓一開始接觸網頁前端的新手們，有一個比較友善的系統來架構你的學習，至於技術本身的深入探討，就留給其它的高手們吧。
在網頁中，每個元素都可以用 Box Model 理解，不過inline元素，有些屬性不見得有反應，block 元素都可以正常演示。
Box Model 在垂直排列時，會遇到一些特殊的問題，這裡也會說明它的觀念。
從 Chrome 的開發者模式，就可以馬上看見每一個參數目前的設定。

圖中，橘色、黃色、綠色、藍色分別如下
在此，的定義描述，我喜歡使用 w3school 的英文描述，下面會引用其原文，並且再用中文解釋一次。
語法
上下左右，可以一行設定
上下左右，也可以指定設定
值
Box Model 的三種屬性可以使用的值，各有不同。
要注意的有幾個重點
要注意: 並不是每個選項都有預設選項。
一般稱為外距。
CSS Margins
The CSS margin properties are used to create pace around elements, outside of any defined borders.[2]
位置: elemnts 週邊的留白空間，圍繞在 borders。
語法
問題描述
讓我們準備一段可以重現問題的 code
這渲染結果，為什麼讓 This is 2 和 This is 3 中間出現空白？
渲染結果

問題定義
這個問題稱為「margin collapse」[4]
如果用開發者模式，並且選看看 This is 3 。

可以發現， This is 3 的 margin 與  This is 4 的重疊。
如果自己有練習的朋友，可以再看一下  This is 1 和  This is 4 的 margin 超過 div 容器了。
Margin Collapse
這問題，只會發生在垂直方向
簡單的處理方式，在容器的 CSS 加上overflow: auto;。
真正的原因，是要觸發 block formatting context 讓容器與週邊的元素以 block 排版的方式呈現。
以下是我猜的
block 元素本身預設 overflow: visible; 而它沒有觸發 block formatting context [5]
如此猜測的原因，只是結果回推，將 overflow: visible; 設定上去，並無任何改變。但是並無任何更有力的根據。
一般稱為邊框。
border 最常寫的，是縮寫語法，但是縮寫縮了哪些東西呢？border有三樣。
縮寫語法
順序可以換，可缺 color 、 width，瀏覽器會補上預設值。
例如
顯示border(很隱性!!)
border 若不設定 style ，就等於沒有設定 border!!
也就是說，若不顯示 border 並不是 border-width: 0; 這只是恰巧沒有顯示，並不是 border 不存在
border: 0px solid #000; 有邊框，大小等於0，瀏覽器要渲染。
border: 1px none #000; 無邊框，不用渲染。
切版時習慣將元素加上框線
切版時，初學都會想知道元素目前的大小與位置。直覺上會加入 border ，但有時拿掉 border 時畫面卻跑版了。不知道為什麼。
這有兩個常見的原因:
好的 debug 框線的做法有兩種:
先來 w3school 的演示，看看 border-style 的值 有幾種預設選項[7]

若 border-width: 0; 瀏覽器還是會渲染。
值有兩種設定方式
顏色值有三種表示方式
介紹下去有點離題，所以先看這篇頂著先。不同的表示法並不會產生新的顏色，只是表示法不同，控制的維度不同。每個表示法的每個顏色，都是可以互相轉換的(應該啦)。
一般稱為內距。
CSS Padding
The CSS padding properties are used to generate space around an element's content, inside of any defined borders.
位置: 圍繞在 element 內容週圍的留白區域。
語法
用 padding-top 或 padding-bottom 創造正方形。
寬度等同於容器寬，又不確定其高，可以直接給 padding-top: 100%; 就會是正方形了。
由內容撐開的高寬。
一開始以為 inline 元素就是 content 結果我錯了。並不是這樣的。
明天會來細說水平排列
content 和 border 有顯示形式， margin 和 padding 是一種圍繞在它們週圍的留白空間。
[1]: 定義域 - wiki
[2]: CSS Margins
[3]: 實數 - wiki
[4]: 8 Box model - w3.org
[5]: 9 Visual formatting model - w3.org
[6]: 4. Borders - w3.org
[7]: CSS Border Properties","['垂直排列 與 Box Model', 'margin', '參考資料']","['前言', '共同的特性', 'border[6]', 'padding', 'content', '總結']","['值', '常踩的雷: margin collapse', '常踩的雷', 'border-style', 'border-width', 'border-color', '值', '不常想到的妙招']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191919,ModernWeb,0,認識Chrome開發者工具系列,14,行動裝置工具欄,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1513493143000000000,417,"因著現在行動裝置的流行，還有響應式網頁設計 (Responsive Web Design, RWD) 在這幾年成為設計網站流程中重要的一環，Chrome 開發者工具也加入了一個很方便的工具，讓開發者可以很方便的來測試行動裝置，而這工具就是行動裝置工具欄 (Device toolbar)。今天我們就一起來看看如何用這工具來測試響應式網頁吧！
我們在簡介行動裝置工具欄的時候就有提到，這個工具不能取代使用真實的行動裝置來測試你的網站，因為它仍然有許多限制 (在官網文件的 Limitations 有提到)。
你可以透過開發者工具左上方的小圖示來打開它。或是使用快捷鍵 (Mac 用 Cmd+Shift+M 或是 Windows 用 Ctrl+Shift+M)
在打開後，首先你會發現你的畫面變小，因為它已經進入預設的行動裝置裡的模式。然後你的滑鼠鼠標 (Cursor) 會變成一個圓點，這是它模擬觸控的方式。

圖 1: 行動裝置工具欄
這邊值得一提的是，這個模擬模式也包含模擬 User Agent String (UA string)，而這個 UA strting 可以讓網站知道你是用什麼裝置來瀏覽它的頁面，所以像是一些有網站它有另外設計並提供行動裝置使用的子網域，當我們用這個模擬器來查看它們的網頁時，它就會把我們導到行動裝置的子網域去。我們可以用 Yahoo! 的頁面來測試，當你打開行動裝置工具欄後，在你的網址列輸入 https://tw.yahoo.com/ ，它就會把你的頁面導到 https://tw.mobi.yahoo.com/ 而不是一般當我們用桌上型電腦瀏覽器去瀏覽他們的網頁時，直接連到 https://tw.yahoo.com/
切換裝置：當行動裝置工具欄打開後，它會有預設的模擬裝置，你可在左上方的下拉選單中切換。當你切換時，模擬裝置的尺寸、解析度(DPI)還有 User Agent string 等屬性也會跟著一起做切換。這些你也可以自訂某個特定尺寸或是新增其他裝置。除了可以模擬不同的行動裝置外，它也提供了一個 Response mode，這個模式基本上就是讓你的頁面像行動裝置一樣，但是寬度是可以自由調整的(這個選項打開後，畫面的右邊、下面都會多了一個可以左右拖拉的 Bar ，你可以透過它來改變螢幕尺寸)，不用跟任何裝置綁在一起。

圖 2: 切換裝置下拉選單，我正在模擬的裝置是 Galaxy S5

圖 3: 在Responsive 模式下可以自由的調整裝置尺寸，方便做 RWD 測試
裝置寬高：在裝置下拉選單的右邊有目前選用裝置的寬及高度，如果你是使用 Responsive mode, 它的寬及高可以自由輸入做調整
放大及縮小百分比：百分比下拉選單可以用來放大及縮小目前的螢幕，我通常都使用預設值，不會做調整。

圖 4: 調整螢幕縮放百分比
旋轉螢幕：使用右上角的旋轉選項小圖示，你可以切換螢幕成是直立 (Portrait mode) 的瀏覽或是橫式 (Landscape mode) 的，在測試的時候很方便。
如果你使用 Responsive 模式， Rotate 這個選項就不可以使用了
網路速度：這裡面有幾個選項
在 Responsive 模式， 才可以使用這些功能
我自己在測試時其實比較常用的是 Resposive mode 這個模式
在行動裝置工具欄右方有一個三個小點的更多選項，裡面有一些選項是我們可以使用的，我簡單的介紹一下：

圖 5: 更多選項
今天我們一起討論了行動裝置工具欄，這個工具讓我們在做響應式網頁設計測試的時候更為方便，我常常在開發時，就使用這個工具來測試基本的 Media queries 的功能，確定頁面都不會有破圖或是跑掉的問題，然後再使用真的裝置來做測試。因為有時要找到真的裝置來測很困難 (到處借別人手機XD) 所以這不失為一個方便的測試工具，但是我建議幾個重點裝置可以測的話還是用真實的裝置來測，像是 iPhone 及 iPad (都很好借XXXD) ，然後再借個幾支當下比較多人用的 Andriod 手機來測應該就可以了，再進一步的話，可以試試看第三方的服務，像是 BrowserStack 來做測試。今天的介紹就到這裡了，希望大家都有收獲，明天我們要一起來看應用面版 (Application panel)",,"['使用行動裝置工具欄', '模擬不同裝置', '更多選項', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191916,SoftwareDevelopment,0,認識scala系列,14,Scaladay14(traits),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1513476794000000000,429,"在 scala 裡類別是單一繼承，但是可以有多個特徵(trait)． 類別可以 extends 特徵(trait)或 extends 並且 with 特徵(trait)．
定義一個特徵 Fly :
trait 不可被 new :
鳥類會飛所以 extends Fly :
再來定義一個類別 Machine， 飛機是 Machine 並且會 Fly，所以類別 Airplane extends Machine with Fly :
在定義一個類別 Animal 及特徵 Eat 並且定義了一個未實作的 method eat :
當特徵有定義未實作的 method 時，不管是 extends 或 with 它的類別都必須實作它的方法 :
這邊重新定義類別 Birds 由於鳥是 Animal 而且會飛又會吃，所以 Birds extends Animal with Fly with Eat，實作方法時前面可以加上 override 也可以不用加，但繼承的類別已經實作過的在 scala 裡就要加 override :
如果不實作，不然就需宣告成抽象類別(abstract class) :",,,"['traits', '總結']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191915,SoftwareDevelopment,1,30天快樂學習FunctionalProgramming系列,4,最詳細ImmutableData入門，看完秒懂,阿志,https://ithelp.ithome.com.tw/users/20103386/ironman,1513476374000000000,647,"上章說明了使用 Immutable Data 是如何，讓我們更容易的去處理緩存、Undo、簡化開發複雜度。
建議在開始之前可以先讀 上一篇：這個 Object 怪怪的 。
禁止改寫變數，這也意味著不能使用 Array.push 與 Array.splice ，我們得使用其他方法複製 Array ，在 JS 可以使用 Array.concat 複製 Array ，在 ES6 可以 Spread Operator （希望你還記得JavaScript Syntax 大集合）。
Spread Operator 也可以輕鬆達到 push 、 unshift 、 remove 。
Object 則是使用 Object.assign，但 ES6 還是可以用 Spread Operator 。
如此複製不會造成效能上的問題嗎？
當然這些操作是有成本的，但這些操作並非 deep copy ，而是 shallow copy ，效能影響跟帶來的好處相比是小菜一碟，來看看這段程式碼。
複製的情況就如同這張圖：

其中 （綠色） 5 、 8 、 9 是新節點，而 （藍色） 4 、 6 則是舊節點，並沒有被複製，只是被新的節點連起來。
shallow copy 是淺拷貝，它並不像 deep copy 是複製所有節點，而是共享沒有變動的部分，如此可以有較好的效能與記憶體利用。
而深拷貝的做法，各位可以參考 Jqery 的 extends 或是 Lodash 的 cloneDeep ，因為比較少用，這裡就不再介紹了。
為了達到 Immutable ，我們不能破壞已經賦值的變數，很自然的在 JS 中讓人想到 const ，本系列之前的 function 宣告也都是用 const，那讓我們親手試試看以下的程式碼。
const 並不是沒有起作用 ， 我們依然無法重新賦值 array ， 但卻可以藉由 push 改變它，因為 Object 在 JS 中預設是 Mutalbe （ Array 也是一種 Object ）。
如此與理想中的 Immutable 不同，為了達到這個目的，必須使用 Object.freeze。
那我們來試試兩層的 Reference。
可是 Object.freeze 只會針對當前的 Reference，並不會 recursively freeze，為了解決這些麻煩，可以使用 deep-freeze ，或是我推薦使用有 Immutable Data api 的 Immutable.js ，如果想從根本上解決，那就改成使用 Elm 或 PureScript 吧。
Immutable.js 為 FB 的開源專案，它提供了 7 種常用的資料結構 (List, Stack, Map, OrderedMap, Set, OrderedSet, Record) ，而且 api 是 FP style 再加上類似 mutable，讓它相當好上手。
你可以在 這裡 嘗試看看，這是個有加入 Immutable.js 的 JS bin。
另外在效能方面， Immutable.js 大大優於 ES6 ，如果想知道詳情可以參考 Immutable.js, persistent data structures and structural sharing ，這篇非常詳細，也推薦各位可以看 React.js Conf 2015 - Immutable Data and React，很明確的解說 Immutable.js 是如何實作的.
關於是否一定要使用 Immutable.js ，我的結論與上述的文章相同，如果相當需要優化效能，用 Immutable.js 準沒錯，譬如說我曾經要處理約 70 萬筆的空氣資料，那時我就選擇用 Immutable.js ，如果資料不大，這就是個人選擇了。
今天是 Immutable Data 實作，之後的程式碼將會大量看到 Spread Operator ， Immutable.js 如果真要說有什麼缺點，那大概就是要記得 toJS() 吧，我很常忘記 XD ，另外印象中我有個朋友說要用 python 把這個系列的程式全都改寫一遍，我們期待他。
明天來介紹 Pure Function ，如果懂得 Immutable Data 應該是輕輕鬆鬆。
另外誠徵幽默小寫手，截圖取自我的省文小幫手
",,"['本章重點', '在開始之前', '禁止改寫變數，只能複製它', 'Const 不夠安全', 'Immutable.js', '後記', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191104,自我挑戰組,0,經濟學角度思考敏捷系列,2,Day2馬糞案,eviler,https://ithelp.ithome.com.tw/users/20107403/ironman,1513474881000000000,450,"我們先來看看經濟學怎麼思考問題的
在19世紀的美國,A請了兩個工人把路上的18堆馬糞堆在一起,當時馬糞可是寶貝,堆起來後,由於沒有車搬不動,所以他們決定回去拿車明天再來搬走.沒多久B出現了,看到堆在一起的馬糞,於是問了一下巡邏的人說""這些馬糞有人的嗎?"",巡邏的人說""不知道是誰的"",B聽了後覺得馬糞沒有主人,也沒有標誌,就把馬糞搬回家了.隔天中午A找不到馬糞,一問才知是B搬走了,雙方意見不合,最後鬧上法院.

本例子跟薛老師專欄裡的馬糞案例子相同,只不過加上了一些我個人的見解",,"['馬糞案', '馬糞是誰的', '馬糞該給誰', '思考一下']","['如果你是法官,你會把馬糞判給誰?', '第一個村子-付出勞動力', '第二個村子 – 保護財富', '第一個村子 - 創造財富', '鼓勵創造財富 VS 鼓勵對財富做標誌']",['接下來我們將會探討敏捷中有哪一些選擇'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191912,DevOps,0,30天入門Ansible及Jenkins[2018]系列,6,[Day06]撰寫第一個AnsiblePlaybook,tsoliangwu0130,https://ithelp.ithome.com.tw/users/20103346/ironman,1513474730000000000,440,"當確認 Ansible 已經正確地安裝在 control machine 上之後，我們現在就可以準備透過 Ansible 對 managed node 進行部署了。然而，我們要如何告訴 Ansible 我們想要對 managed node 做些什麼呢？在 Ansible 的世界裡，我們是透過編寫劇本 (playbook) 來告訴 Ansible 接下來需要做的事項。由於 Ansible 的 playbook 是使用 YAML (YAML Ain't Markup Language) 這種標記語言來撰寫，而這個語言最大的特色就是具有高度可讀性，因此無論有沒有程式語言的基礎，理論上任何人在看到一份好的 Ansible playbook 的時候應該都是非常容易理解及著手修改維護的。
以下先用一個非常簡單的範例來介紹 playbook 的運作方式。我們先創建一個 playbook 檔案，將其命名為 playbook.yml 並置於工作目錄下 (e.g. workspace/playbook.yml)。接著，開啟檔案並輸入以下內容：
相信大家就算從來沒有寫過 Ansible 的 playbook，應該還是不難猜出這份 playbook 在做些什麼。簡單來說，我們在這份 playbook 中定義了任務清單 tasks 以及部署對象 hosts: server。這也是為什麼在之前的章節中我們提到了最好把每一個虛擬主機都做命名。主機命名後，我們可以直接透過主機的名稱直接進行操作（我們會在接下來的章節中提到若不透過 Vagrant 要如何命名主機）。除此之外，我們可以透過 name 這個標籤替任務清單中的每個 task 分別命名。在接下來運行 playbook 的過程中若發生錯誤，我們也會比較清楚是在哪一個環節上出了問題。
在這個 playbook 中，我們定義了兩個 task：
test connection
我們在這個 task 中，呼叫了 Ansible 的內建測試模組 (module) - ping。這個模組的目的非常類似在學習每個語言一開始練習的 ""Hello World"" 程式。其主要是用來測試 control machine 是否可以正確地與 managed node 進行溝通，如果連線正常，遙控節點就會回傳一個 ""pong"" 的訊息給控制主機。接著，我們透過另一個 Ansible 內建模組 - register 把 managed node 回傳的訊息儲存在 message 這個變數 (variable) 中。
注意：此處的 ping 並非建立在 ICMP 協定下的 ping 指令，只是純 Ansible 開發的一個簡單測試模組。
print debug message
在上一個 task 中，我們已經把 ping 後的結果存在 message 這個變數中了。我們可以利用 debug 這個模組把儲存的訊息輸出到我們的終端機上。在 Ansible 中，若要調用儲存變數，我們必須在變數名稱外加上兩個大括弧 - {{ }} 來告訴 Ansible 大括弧內的是一個變數 （如果變數在描述句 (statement) 的開頭，還必須要額外加上一個雙引號 - """"）。
在定義好了我們的第一個 playbook 後，接下來就是如何運行我們寫好的 playbook 啦！
上一個章節中，筆者有提到 Ansible-lint 這個語法提示工具，如果沒有安裝的讀者可以自行跳過這個部分。使用 Ansible-lint 的方法相當簡單，只要在終端機中利用 ansible-lint 輸入需要檢查的檔案 (e.g. playbook.yml) 即可：
如果沒有看到任何輸出就表示你的 playbook 完全沒有問題！不過為了展示 Ansible-lint 的提示效果，我在 playbook 的第五行句尾加上一個空白：
接著，重新輸入剛剛的指令：
我們可以清楚地看到 Ansible-lint 告訴我們在 playbook.yml:5 第五行的地方有個後綴空白 (trailing whitespace)，為了保持程式碼的簡潔，我們可以將其刪除。
如果讀者使用的編輯器是 Sublime Text，在這裡推薦一個不錯的語法高亮器 (Syntax Highlighting) 給大家。因為在 Sublime 中，語法高亮並沒有原生支援 Ansible 的語法，所以我們只能預設使用 YAML 來加亮語法。Syntax highlighting for Ansible files 這套插件補強了 Ansible 在 Sublime 上的顯示效果，非常推薦使用 Sublime 的讀者安裝這套插件。

與上述 Sublime 插件相當類似，若讀者使用 Atom 作為開發編輯器，也可以考慮安裝 language-ansible 與 linter-ansible-linting 來作為語法高亮以及即時 linter 作為輔助。除此之外，Atom 上還提供了相當多強大的插件例如 autocomplete-ansible 等等，讀者可以根據需求自行安裝。",['撰寫第一個 Ansible Playbook'],,,"['什麼是 Ansible Playbook？', '我的第一個 playbook', '[Optional] 利用 Ansible-lint 來檢查 playbook', '[Optional] Sublime 插件 - Syntax highlighting for Ansible files', '[Optional] Atom 插件 - language-ansible + linter-ansible-linting']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191804,ModernWeb,1,三十哩路，我的前端學習路程系列,14,Day14::我所知道的CSS重構第三章之三,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1513474390000000000,445,"盒框模型(box model)是瀏覽器決定如何渲染(render)一個方型區域的方法，因此瞭解盒框模型的運作對我們而言是很重要的，而HTML的所有元素基本上都可以視為一個盒框。
每個盒框都有自己的寬(width)、高(height)、内距(padding)、邊寬(margin)與邊框(border)
這個盒框的尺寸(dimensions)有兩種計算方法，取決於指定給元素box-sizing屬性的值
比較特殊的是邊寬(margin)會影響到盒框周圍的空間但不計入盒框大小的計算。
當box-sizing屬性的值被設為content-box時
盒框尺寸等於padding與border的尺寸加上height與width屬性的尺寸。
假設 width:150px; height:150px; padding:10px; margin:5px; border:5px;
高度的計算方式為
150px(height) + 10px(padding-top) + 10px(padding-bottom) + 5px(border-top) + 5px(border-bottom) = 180px
寬度的計算方式為
150px(width) + 10px(padding-right) + 10px(padding-left) + 5px(border-right) + 5px(border-left) = 180px
當box-sizing屬性被設為border-box時
盒框尺寸就由該盒框的width與height屬性來決定，盒框中的padding與border屬性不計入尺寸的計算
但是瀏覽器會考慮padding與border並適當調整width與height讓整體尺寸等於idth與height屬性的設定值
高度的計算方式為
150px(height) - 10px(padding-top) - 10px(padding-bottom) - 5px(border-top) - 5px(border-bottom) = 120px 隱性的高
寬度的計算方式為
150px(width) - 10px(padding-right) - 10px(padding-left) - 5px(border-right) - 5px(border-left) = 120px 隱性的寬
其實這兩種方式並沒有哪一種比較好的問題。
許多人覺得border-bpx比較直覺，因為他代表了元素從這一邊框到另一邊框的總高度與寬度
box-sizing可以在任何元素上設定，border-box與content-box是可以混用與匹配的
但是為了一致性，通常只會選一種來使用。
第三章的篇幅蠻長的主要在介紹想要編寫更好的CSS應該要怎麼做會比較好
書中提到的內容都是我以前想過但是沒有答案也不知道該怎麼下手找答案的問題
個人覺得最受用的還是特定度的計算還有最後面的box-madel與box-sizing
解決了我不少在實作上想破頭卻不知道如何是好的問題XD",,,['建造較佳的盒框'],"['box-sizing: content-box', 'box-sizing: border-box', 'content-box 或 border-box ?', '心得']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191908,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,14,[PixiJS-Day-14]PIXI與使用者互動,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1513474306000000000,440,"如果要說我在學習 PixiJS 裡最吃驚的事情
我想應該是 互動物件在沒有設定 interactive = true 時不會被感應
因為太習慣 HTML 裡上層物件會蓋住下面物件
但 canvas / WebGL 是畫在 canvas 上的圖像，
想想不會被感應到其實比較合理才對
前幾篇介紹的物件，都可以互動(感應、點擊、滑入滑出等)
PIXI.Container
PIXI.Sprite
PIXI.extras.AnimatedSprite
PIXI.Graphics
PIXI.Text
互動事件基本的寫法是：
如果對前文有印象，
PIXI.Application 建立實體時產生的 stage 也是一個 PIXI.Container
[前文連結]
所以也可以對 stage 下互動事件：
所以是整個舞台都可以點嗎?
不，加進舞台上的所有物件都可以點
但空白的部分不能點
以下三個實例是對 app.stage 下監聽時的情形
實例1:  app.stage 無法點，滑鼠指標是一般指標

實例2:  兔子1，本身沒有設定 interactive 與 buttonMode，
滑鼠指標改變是受到 app.stage 監聽的影響

實例3:  兔子2，本身也沒有設定 interactive 與 buttonMode，
滑鼠指標改變是受到 app.stage 監聽的影響

讀入的圖片有半透明的部分：
半透明部分 可以感應

使用 PIXI.Graphics 類別的填色：
可以感應

填的顏色透明度是 0 時：
會感應

物件透明度是 0 時：
會感應

下一個比較有趣，設定不可顯示時：
無法感應

使用 PIXI.Graphics 的 lineStyle 畫線：
紅色為填色方塊，外部則畫了一條 50px 的半透明黑線
凸出的線條無法感應

官方範例裡關於互動的範例有兩個：
BASICS - Click：
http://pixijs.io/examples/#/basics/click.js

DEMOS - Dragging：
http://pixijs.io/examples/#/demos/dragging.js

特別處：
可以單獨設定PC版互動事件、手機版互動事件
或是同時設定手機版與PC版互動事件
多點觸控：
在實作手機版網頁蓋印章時在思考
如何在手機上處理多點觸控

主要的問題是：
在多點觸控的時候，要怎麼知道滑入滑出的是哪隻手指?
苦惱了一陣子，
後來在 Phaser 的範例裡看到多點觸控的範例：
http://phaser.io/examples/v2/input/multi-touch

想說 Phaser 可以做，那 PixiJS 應該也可以做吧?
以PixiJS來說，關鍵部分是：
事件裡 data.identifier，
如果是滑鼠事件時，data.identifier 會是 MOUSE
如果是手指事件時，data.identifier 會是 0、1、2 累加
這對於 判斷幾隻手指 與 哪隻手指做了什麼事 很好用",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191911,自我挑戰組,1,GAME30天系列,7,Firebaseintro.(1/3,我是一支小小小小鳥,https://ithelp.ithome.com.tw/users/20107379/ironman,1513474059000000000,469,"前端一秒變全端？
Firebase 的出現, 打破了我們以往在ＷＥＢ端存取資料庫的常規方法, 以往前端會送出表單到後端, 後端再將資料寫進ＤＢ, 而ajax的出現, 讓前端處理資料的方式更加靈活, 透過ajax 到 api, api再透過透端邏輯, 從資料庫取得資料回傳, 可以讓畫面不用一直跳轉, 加強使用者體驗, 而 Firebase 卻打著 “後端既服務”(backend as a service) 的名號, 不用建立server, 也不用透過遠端登入, 就可以藉由純前端建立出 Json 為格式的即時資料庫, 還有可以連接社交網路Oauth的會員帳號管理, 讓ＡＰＰ實現 server-less 的架構, 可以說是前端工程師變身全端的超簡易方案, 甚至許多start up 都開始用 Firebase 實作產品
server-less 讓我們可以不用準備後端, 這是個優點也是個缺點, 缺點是沒有準備API , 邏輯只能全部寫在前端, client端資源吃重, 且商業邏輯和 firebase api key 也非常公開透明, 如果是ＡＰＰ的話, 若使用者不更新, 將很難進行版本升級(除非是web view app), 因為資料在 firebase 手上的關係, 資料轉移 ＆ 要匯出使用者帳號和email也很困難, 當然這種 noSQL 類型的資料庫中, 不存在關聯或 Table的各種優點, 但相對的他也有nosql才有的優點, 低延遲的讀寫速度：快速的讀寫, 代表在查詢上反應非常快, 也比較能夠支撐海量的數據和流量","['what is Firebase?', '感覺很厲害, 都沒有缺點嗎？']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191910,自我挑戰組,0,從0開始的菜鳥工程師挑戰賽系列,5,第五天-新手向CSS懶人包,lf2exe,https://ithelp.ithome.com.tw/users/20107727/ironman,1513473164000000000,514,"上次介紹完html的基本用法，這次來介紹css!!
css簡單來說就是html的形容詞+動詞，用來把每個區塊給予一個形容((外觀))或是動作((超級廢話))。
((無責任先猜測js))
js目前聽友人們談話感覺就像特異功能，讓你的html長得很浮誇或是很聰明或是會特技表演((????))。
這邊我先介紹我知道的新手向css用法:
background:這個是設定背景的，其中在後面可以再加上各種屬性，例如background-color(背景顏色)background-image(背景圖片設定)。
color:裸下color就是文字顏色
font:設置所有字體的屬性，其中有font-size(字體大小)font-weight(字體粗細)

結論:
大概介紹一些新手常用的css，至少我是常用啦!!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191858,ModernWeb,0,從零開始的網頁設計系列,3,Day03:開始點擊技能樹_常用標籤(一),樂樂,https://ithelp.ithome.com.tw/users/20104423/ironman,1513472082000000000,498,"段落標簽 : <p></p>
換行標籤 : <br>
什麼是段落標籤呢？就跟他的名稱一樣其實就是用來分段的
那換行標籤呢？就是換行
那為什麼需要這兩位仁兄呢？
以往我們寫文章在換行的時候都是按Enter就好
但是你自己實際去寫會發現這在網頁裡根本沒用！

你會發現，我在程式裡面的確是將這兩行文字換行了，但是在網頁裡他根本沒用
所以需要使用 <p></p> 以及 <br>

我們會發現在第一個段落以及第二個段落中間有一段空行
也就是因為我們使用段落標籤的關係所以他被換了兩行
那我們看我被換行了只被換了一行
Emmet技巧分享：打上標籤的名稱後直接按 tab 就可以出現完整的開始與結束標籤囉
h1 h2 h3 h3 h5 h6
那何謂標題標籤呢？
其實他們最大的差別就在於字體大小XD
h1最大，h6最小，但其實字體大小都是可是可以利用CSS3去做修改的
那通常我們會怎麼使用呢？
我們在網頁裡一定會有最重要次要的標題對吧？
所以我們會利用重要性來選用
那我們就來實際運用吧
一樣是寫在<body> </body> 裡

是不是很簡單呢？那讓我們結合今天講的東西來做一個簡單的例子
",,['段落、換行、標題'],"['段落標籤以及換行標籤', '標題標籤']","['實例', '結果', '實例', '結果', '實例']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191864,Security,0,IT安全稽核系列,14,4.3是否指定專人或專責單位，分別辦理資安政策、計畫、措施之研議，資料、資訊系統之使用管理及保護，資安認知教育、訓練及資安稽核等資安工作事項？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1513471977000000000,482,"說到教育，
『教育代表一個國家未來的國力強弱。』
所以教育的好壞影響到未來國家的走勢。
這是我個人的認知，我都鼓勵後輩多多念書，學習養成一種習慣，多多閱讀。透過閱讀以及經驗累積，讓自己成長。
我曾在網路上看到林肯講過一句名言，
閱讀包含在教育裡面，透過大量閱讀，逐日累積，避免書到用時方恨少之苦。
共勉之吧!
我們繼續根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，探討4.3的分析。
(4.2 是否成立跨部門之資訊安全推行組織負責推動、協調監督及審查資訊全管理事項？二選一的答案，這是必然要做的事情，4.1已討論過了。所以跳過4.2)
四、資訊安全組織（資訊安全組織、人事及資訊單位）
4.3是否指定專人或專責單位，分別辦理資安政策、計畫、措施之研議，資料、資訊系統之使用管理及保護，資安認知教育、訓練及資安稽核等資安工作事項？
說明：此項說明兩個重點：1.指定專責單位。2.教育。
連結是教育部的全民資安素養網：https://isafe.moe.edu.tw/
組織內部，這類資安教育大部分都是放在資訊部或者人資部門，組織在作教育訓練時，上完課之後，這類上課的講義都會束之高閣，也沒人會再去看。
我是比較惡劣的人，要求公司的資訊單位，定期要做資料，雖不要求傳給大家，但至少在共享資料夾裡，定期放上資訊，我心裡也清楚，一定沒有人會去看，但為何還要放？還要多此一舉？
本人這樣解釋，公司裡面有人連基礎office操作都不懂，把office當打字機用，連文書處理的技巧都沒有(否則為何word出問題，都要資訊部去解決？甚麼時候資訊部是幫人修打字機的？)，資訊部定期宣導病毒、資安，最好不要是太制式的理論，最好是用案例來恐嚇這些人，一點點問題都要說成是大問題，甚至被罰款(只差沒抓去判無期徒刑)都要強調出來，當然這還是沒人看，我最近看公司的公告，思考一件事情，希望資訊教育人員，或許該上教育部的這個網頁，用教育部國中小那個選項裡面的漫畫，去教育這些人，盡量在公告稿上，弄些漫畫上去，用最low的圖案表象教育這些沒有資安概念的員工，或許會有點效果吧？
或許這是個方法吧？",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191839,Security,0,資訊系統安全與CISSP的簡單應用系列,3,[Day03]安全與風險管理(PersonnelSecurity&RiskManagement),wisdomryanlin,https://ithelp.ithome.com.tw/users/20107753/ironman,1513471172000000000,480,"今天要正式來談風險管理，分為人和事兩部分；人在事之前，因為人永遠是你的事。安總一直認為，一件事要成功的最關鍵因素是人：一個對的人，能把一件事做對；一個錯的人，會讓一件對的事銷聲匿跡。(嚴肅了，以下來點輕鬆的吧..

當時的奇異總裁 Jack Welch 正準備離開辦公室去度個週末長假，這時 Mike 打來了電話，是那種你一輩子都不想接到的電話。
“我們遇到麻煩了，Jack。”他說，“一個交易者的帳戶裡出現了我們無法確認的 3.5 億美元的窟窿，而他已經失蹤了。”
我 (Jack) 當時還不知道誰是約瑟夫•傑特 (Joseph Jett)，但後來幾天瞭解到的情況是我不情願知道的。卡彭特告訴我，傑特負責公司的政府債券業務，已經多次虛報業務量以提高自己的獎金收入。偽造的業績表面上使吉德公司的報表收入大大上升。我們將不得不用第一季度的收入來沖抵看起來是 3.5 億美元的虧空。
邁克給我的消息叫我痛心疾首：3.5 億美元！我簡直無法相信。這一打擊太沉重了。我沖向浴室，吐得天昏地暗。
我用了好幾個小時的時間，試圖弄清楚數億美元的錢究竟是如何在一夜之間消失的。這看起來是不可能的，但我們顯然對於這種業務的瞭解太不夠了。後來我們才發現，傑特利用吉德公司電腦系統中的一個紕漏鑽了空子。
在此之前的那一年，也就是 1993 年，傑特的虛構業績達到了吉德公司固定收入部門的近 1/4 ，還因此獲得了當年吉德公司“最佳員工”的稱號。我們也批准了邁克關於給傑特發放 900 萬美元現金獎金的請示，即使在吉德公司，這也算得上是巨額獎勵了。一般情況下，我一定會全面過問此事，我會深入調查一個人怎麼會取得這麼大的成就，並且堅持要會見他。但是，我沒有那麼做。 這全是我的錯，因為我沒有提出我通常會問的“為什麼”之類的問題。事實證明，吉德公司文化與我們的差異，絕不亞於吉德公司員工眼中的 GE。
併購和聘僱其實本質上是同一件事，其重點在於文化是否相合：一個聰明、有活力的人，但是不誠實，他的聰明和活力會害死你。我們聘僱的原則是誠信正直，如果我們的直覺告訴我們這個人「可能」有問題 (那是一種說不上來的感覺)，我們是不會聘用的。
安總講這個的目的是，比起後面風險控制的手段，「選對人」才是事情成功的關鍵。(好的，容我跳過這些對於人的風險控制手段好嗎，我是相信人性本善的；就算別國的人跟我要線路圖，我是會給的，因為在分享這件事上，是 Give and Take 嘛)




對不起，我剛剛誤導了讀者，上面計算的只有「會計成本」，並沒有納入循環經濟的「環境成本」，如果這個資產不斷承受地震侵襲而報廢，那這世界上就會多出很多廢棄物，形成一個「從搖籃到墳墓 (from Cradle to Grave)」的直線；與之相比，我們是否能夠考慮「從搖籃到搖籃」的設計概念，從一開始就不妥協地、承諾零廢棄物，就算必須報廢該項資產，能不能要求這項資產的供應商，進行升級回收 (Up-Cycle) 或降級回收？讓它在工業界裡面繼續循環，降低環境成本，達到循環經濟呢？

圖片來源
http://www.homeappliancesworld.com/files/2017/10/fotolia-petovarga-circular-economy1.jpg
一個純量化的風險評估是不可能的，因為不是所有的元素都能被量化，例如：品質的、主觀的、無形的事物。詠詩嘆曰：
那些無形的事物啊，您何等美麗而可愛
那些視而不見、無動於衷的人，是多麼地可恨
不做循環經濟與綠色科技，人類有何未來可言
這難道不是，該被考慮進來的風險嗎
我再說，那些無動於衷的人罪孽是何等深重，又何等地令人悲哀、哭泣
不得不，有時我們沒有勇氣於在大庭廣眾下直接說出心裡話，所以為了引出誠實和沒有被顯現的回應，我們可以在一間會議室中採取德爾菲法 (Delphi Technique)。

去年想參加一個「綠領建築師培訓工作坊」，教我們怎麼打造綠房子，但是課程總價要 NT$11,500，打完折 NT$6,900 我還是付不起，只好買書代替 (一本 NT$495，便宜很多)

《綠領建築師教你設計好房子》&《職業駭客的修練：機械碼與底層的把玩藝術》","['1994 年 4 月 14 日星期四的晚上', '文化差異 (Culture Difference)', '量化的風險管理 (Quantitative Risk Management)', '社會企業家 (Circular Economy)', '平衡的風險評估 (Balanced Risk Assessment)', '德爾菲法 (Delphi Technique)']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191907,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,14,[Round14]番外篇-DIY「禮物」之雛型,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1513470916000000000,456,"趁假日買了小物自製卡片,以為超簡單的也花了一小時製作...
想不到金x發真是一站式購物的最佳選擇，
雖然小物的種類沒有很多，但是製作基本雛型非常夠了。

製作上由於都是現成的材料，所以沒有太大的難度，
只有在撲克牌、號碼紙、卡套以上三者的 size 可以相符即可，
剩下的就是花時間慢慢切割分裝了。
以後需解決、值得注意的地方
一般撲克牌尺寸
http://jacksonkuo.blogspot.tw/2009/05/blog-post.html
禮物 DIY 號碼
https://boardgamegeek.com/thread/1388236/extra-cards-single-suit-card-game-using-numbers-1",,"['「禮物」的道具', '參考:']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191906,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,9,[IX]用CodeIgniter的30天-快還完了,qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1513470531000000000,478,還完就要來弄新的東西了天啊 !!!,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191901,ModernWeb,0,JavaScript基礎二三事系列,14,Day14　JSON與物件實體,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1513470086000000000,508,"今天來看看JSON
前端工程師在串接資料，常常是接後端發出的JSON檔案(API)，再將其內容渲染到網頁上，那什麼是JSON呢？
JSON，全名JavaScript Object Notation
是受到JavaScript物件實體語法啟發的傳輸格式，比起使用XML傳輸資料，JSON格式在檔案大小上更為輕量，也是現在主流的傳輸格式。
一個JavaScript物件可以長這樣
而JSON會是這樣
看起來好像差不多？
物件的屬性名name，在JSON中被引號包起來變成'name'，也就是說原本的屬性名到了JSON變成字串，JavaScript利用物件實體語法時，物件屬性名稱也可以是字串(對物件實體語法，屬性的引號'或""可加可不加)
這樣的JavaScript物件實體語法是OK的，但不是說物件的屬性名稱'name'和'isF2E'真的變成字串了，我們用console印出來看看。

可以看到當用物件實體語法創造物件時，屬性名稱可以加上引號'，實際創造出來時，物件屬性的引號'不見了！
相較之下，JSON格式的屬性名與值一定要加引號'成為字串，這裡要有個認知，雖然JSON是受到JavaScript啟發，但JSON和JavaScript是不一樣的東西。
關於JSON，有興趣可以參考W3C與MDN的介紹
　
另外JSON格式再傳輸時(前端到後端、後端到前端)，有時也會以字串的形式處理。
來看看以下程式碼，假設前端從後端接到一個JSON字串
前端AJAX接到後，現在要取值Simon來用
結果是

因為JSON被引號包著，現在是字串，這時JSON.parse()就派上用場

　
關於物件與JSON字串的轉換，有兩個重要函式：
JSON.stringify()
將JS物件轉為JSON字串　
JSON.parse();
將JSON字串轉為JS物件
而這裡用JSON.parse();函式來處理，讓JSON格式字串轉為JavaScript物件，如此一來前端接收到JSON資料就可以繼續用JavaScript處理其內容。
　
　
　
　
小結
今天我們認識了JSON格式，與JavaScript物件的差異。
題外話，前端開發者在串接JSON時，如果直接用瀏覽器點開，就會變成這樣：

JSON來源：政府開放資料戲劇表演資訊
這個時候可以使用Chrome的擴充套件JSONView，就會變成這樣

我個人比較習慣JSONView，不過JSON Editor Online這個網頁也可以達成類似的效果

視覺上是不是易讀多了呢?
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分4-33",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191903,ModernWeb,1,前端工程師養成手冊系列,14,如何培養自信成為前端工程師？,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1513469624000000000,668,"到底要磨練到什麼程度，才可以自稱自己是名前端工程師呢？在以前的年代會有師徒制，例如要成為一位壽司師傅時會先進壽司店當學徒，在前幾年你只能在台下準備壽司材料，直到師傅覺得你可以，才有辦法站上料理台，再過幾年後你才能稱得上是一名壽司師傅並自立門戶。
但以前端工程師來說沒有具體的指標，你只能自己摸索業界需求，藉由實務開發累積足夠的經驗，我曾經輔導過一些自信心嚴重不足的學生，儘管我認為他們的能力都已經非常不錯，但還是覺得自己離專業有非常遠的距離，就如同我前面的文章提到有些人會對工程師有無限的憧憬與幻想，以致於會讓他們認為自己一輩子都沒辦法成為前端工程師。
還是菜鳥的我也是這樣子過來的，那時候我在工作前幾年也不知道前端，有一天發現有「前端工程師」職稱後，花了一陣子時間去摸索，最後才決定自己要成為前端工程師，雖然那時工作已經四五年，但認真說我是 2012 年初的時候才決定自己要往這方向投入，而是在 2013 年 3 月時才認為自己已經有達前端工程師的門檻。
這個門檻我是做了很多事情，信心才一點一滴的建立起來的，這點非常重要，不是別人說你 ok，而是你發自內心地認為自己終於跨過了這道艱困的障礙，那麼我究竟做了哪些事情呢，就讓我娓娓道來。
在我決定自己要投入這方向後，我很清楚要讓自己隨時沈浸在前端領域，我才有辦法成功，在那時候剛好我讀在職碩士，於是我就毅然決然地和我的指導教授說，我的研究題目要跟前端有關，於是我挑了「響應式網頁」當做主題來研究，響應式網頁是在 2010年時被國外開發者提出這概念，說真的在 2012 年並沒有太多文獻可以參考，而且並不是那麼多人知道響應式網頁。
但我很清楚這將會是未來前端的風潮，於是說服了我的教授讓我做這題目，在那兩年求學過程中，我花費了相當大量的時間去研究響應式網頁與前端技術。我甚至向公司說明這項技術，讓他們有信心拉案源進來開發，晚上在學校時也不時跟教授 meeting，週末寫論文時，又能順便提昇技術能力，實在一舉兩得，最終我也寫完全台第一份 RWD 論文並順利畢業。
在實務、學術與畢業時程壓力之下，我彷彿進入精神時光屋般大幅提昇自身能力，也在那時奠定了我的前端基礎。
教導別人也有助於自己觀念的提升，我們在業界有個說法，如果你沒辦法將原理講得直白易懂，那代表你仍然不熟原理，在那時雖然念得是國立大學，但學費對我來說是個不小的負擔，於是我動了腦筋在一對一教導網頁設計上面，透過 teamviewer + skype 來教台灣各地的學生，在教學的過程中我也開始擁有「原來我已經有所小成，並可以教人的程度」而產生些許自信。
所以也會推薦你寫 BLOG，你可能會覺得自己寫得東西沒什麼價值，放上去怕丟臉，這種觀念就錯了，寫技術文章的好處是在你寫的過程中，也在幫助你重新複習觀念，當你寫有小成時，也無形塑造個人品牌形象。不要以為你寫部落格沒有人會看，一定會有跟你相同程度的人想要從 Google 上探索答案，那這樣你的文章就剛好幫助到他了，我們在業界也常會說取之於 Google、用之於 Google，你 Google 到前端資訊幫助你學習，在感恩之情上你也可以寫技術文章幫助到大家。
那時我還是覺得自己跟業界離得很遠，我不希望自己是閉門造車，想看看其他開發者跟自己到底差得有多遠。在 2012 年時前端社群非常得少，唯一比較具有知名度的是台北的 RGBA，所以我一直很期待是否有誰能夠跳出來，也在高雄舉辦開發者社群。但一直沒有消息。後來同事問我為什麼不自己在高雄辦一個？雖然當下覺得自己不夠格，但那時還是硬著頭皮去試試看。
因為擔心沒有人參與，於是我拋磚引玉地運用自己會的技術開了響應式議程，因為那時我很擔心該不會高雄根本不知道前端開發吧，這樣怎麼可能創立社群？就連企劃部的同事也譏笑我說你辦付費講座最好有人來，就連免費講座都不會有人了，但我的想法很單純，如果真的沒有同行那就代表自己一廂情願，頂多以後跑台北參加前端活動。
但活動開放售票後不到三天就完售了，那時也給我非常大的信心，也促使我順勢創辦了高雄前端社群，終於我也能在在地找到同行交流，並更加接近業界。

在那之後我舉辦第一次的高雄前端聚會活動，我印象非常深刻，當下我的開場白是：「大家好，我是洧杰，我在公司擔任前端工程師」，說完後雖然表面不動聲色，但心裡澎湃不已，眼淚甚至差點流下來，因為花了好多歲月，我終於可以發自內心肯定自己是一位前端工程師，直到現在我的奇幻之旅仍還在持續當中，但和以往不同的是周遭已有許多在地夥伴和我一塊並肩作戰。
從我的故事中你可以看得出來，若要投入一門技術，並達到「師」的等級，自然要找許多挑戰讓自己克服並累積信心，這樣在未來的有一天，你也能夠肯定自己。
最後我列出常見的成就里程碑，你可以從中去投入一道道關卡來提昇自己的自信心。",,"['不給自己回頭路', '透過寫BLOG、遠端教學提升自信心', '不停地挖坑讓自己跳']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191899,自我挑戰組,0,2017挨踢人生大事紀系列,14,ERP改來改去何時了~顧問沒教過怎麼辦？[後續],牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513469418000000000,574,"昨天的發文，沒能有個好收尾！
沒交代到底遇到顧問當初沒指導過的作業流程，挨踢該怎麼辦？
一天又過去了，來補充一下好了。
導入ERP後，一定要簽維護合約！
就像車子的保險，險種有分甲式、乙式、丙式⋯⋯
而ERP的維護合約，其實就像買車子的保險，出事了要有人擔保能收拾善後。
想想小時候數學解題，遇到不會解的題目，你都怎麼辦？
當然是去問會解題的高手，或是去找老師啊！
ERP的問題也一樣，當你遇到不會解的狀況時，
這時就到透過維護合約由顧問來幫忙善後。
雖然當初顧問沒教，但可能只是當初安排導入時沒考量到。
不代表顧問留了一手，因而沒交接到預期狀況外的處理做法。
不過，萬一連顧問也無法解決呢？
坦白講，無解的狀況通常是現實的作業邏輯，太悖離ERP系統的設計精神了。
這時只能透過溝通，讓使用者調整作法來配合系統作業。
一味的要求系統要牽就使用者的需求，只是徒然寵壞了使用者，卻累壞了挨踢！
其實很多時候，在ERP被運用的過程中，
一直都存在使用者需求和系統操作邏輯的不適感！
到底系統要牽就著使用者去調整設計？
還是使用者該牽就系統的設計去克服操作上的不適應？
挨踢在維護ERP的工作任務裡，擔當著兩者之間的協調仲介人。
要嘛改系統！不然就說服使用者改作法！
但兩者之間的拉鋸戰，是永無止境的～
ERP～改來改去何時了？
我的答案是：『此題無解！』
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191764,自我挑戰組,0,花式PHP系列,10,Array：過濾、取交集、取差集,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1513469183000000000,464,"陣列函式系列的最後一天！
當只傳第一個參數的時候，
這個函式會濾掉你的陣列中等於 FALSE 的值！
MudaMudaMuda
array_filter 會把每一個陣列的值傳進 callback，
如果 callback 回傳的結果等於 TRUE，便保留其 key 與 value；
如果 callback 回傳的結果等於 FALSE，便把這筆資料丟掉。
在沒特別指定第三個參數的時候，callback 都是得到 value（並拿來過濾）。
但當你傳入下列其中一個值的時候，callback 獲得的資料也會相應改變：
底下舉例使用 ARRAY_FILTER_USE_BOTH：
function array_intersect ( array $array1 , array $array2 [, array $... ] ): array
array_intersect 會傳回所有傳入陣列的交集！
精確一點的說，
它是透過檢查 $array1 中的每一個值是否有在 $array2 ... 等等所有參數中出現，
有則保留︰沒有則剔除。
假如，
作為一個交友網站的工程師，比對兩個人之間的個性相似度有多少只是這種網站基本的功能需求。
但，該怎麼做呢？
這個函式可以幫你比較在傳入的第一個陣列之中，
它的哪些值是第二、第三、第四...個陣列都不曾出現過的～
範例就請你們直接修改上一篇範例的最後一行，(偷懶 XD)
就能得到有哪些 $man 的特質是 $woman 身上沒有的了～","['array_filter', 'array_intersect', 'array_diff']","['第一個參數：要被過濾的陣列', '第二個可選參數：自訂過濾邏輯(callback)', '第三個可選參數：改變 callback 得到的資料', '值得一看得其他相關函式']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191817,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,14,3-3.監控工具之三:elastalert告警,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1513468996000000000,507,"elastalert這並不是官方的插件，官方是Alerting，是在x-pack底下的功能，詳細如以下連結
https://www.elastic.co/subscriptions
用以下指令安裝

完成後產生config.yaml，如果沒有cp config.yaml.example config.yaml
config.yaml要修改讀取目錄(輪巡資料夾內的rule)
example_rules內都是範例
建立一個新rule，在收到level是警告訊息發送email

假設剛建立的檔名為abc.yaml，指定執行該rule
不指定會輪巡rules_folder內的rule執行
範例流程圖
啟動elastalert使用config.yaml設定檔=>輪巡資料夾內rule=> filter搜尋elasticsearch，match後觸發rule的alert，發送email or command(bash => SNS)
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191611,SoftwareDevelopment,0,爬蟲始終來自於墮性系列,17,高鐵、台鐵轉乘查詢,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1513468802000000000,693,"與昨天的主題連貫，很多社群朋友是從台北、台中過來的，很常時候接駁台鐵搭高鐵，那我們可以來寫一個常用的高鐵時刻查詢。雖然我們能夠單純寫一個高鐵的查詢，再去串接我們昨天寫的台鐵時刻，不過在看台鐵的網站時，發現有一個還不錯用的服務叫做轉乘資訊，能夠做到我們剛剛提到的需求，那麼今天的目標就設定來查詢這頁的資訊。

這個頁面其實跟昨天的介面很像，都是先選擇區域再選擇車站，然後再選擇到達站和時間，接著按送出查詢。第一眼直覺應該是跟昨天一樣，我送了相關資訊，網站就會將相關資訊塞在 html 裡面給我。

但經過探訪後發現實際上並不是如昨天一樣，感覺這個服務應該是後來做的，網頁實作的方法正確許多，那對於我們抓取資料的爬蟲應該會輕鬆很多。發現按下查詢後，是發了三個 post resuests，而每一個 request 的 searchtype 都不同。

第一個 request 的 searchtype 是 tratothsr，直覺就是火車接駁高鐵的相關項目，而果然他的 response 也就是一個車站代號。

第二個 request 的 searchtype 是 traschedule，直覺看起來就是查詢火車時刻，而果然在第一個所查詢到的車站代號就會用在這邊，而這個 request 的 response 就是火車時刻表，而且還是 json format，就不用向昨天一樣還需要用 jsdon 來模擬執行。

第三個 request 的 searchtype 是 thsrschedule，直覺看起來就是查詢高鐵時刻，也不負其然的回傳高鐵時刻表，回傳也是 json format。
我們會將這隻爬蟲分解成三個動作：

我們一樣先來觀察一下查詢的 request 會送出什麼。參數看起比昨天更簡單，只有 searchtype、fromstation、tostation、searchdate、fromtime，這看起來非常的直覺。

然後我們模擬這三個 request，看起來是能夠得到相同的內容，那麼肯定就沒問題了。
雖然流程是送出三個 requsest，但實際上真正拿到時刻表的只有後面兩個 request，所以其實我們只需要製作後面兩個 request 就可以了。
查詢台鐵時刻表 function。
查詢高鐵時刻表 function。
這次實在太簡單了，所以我們來試著用一個前系列沒出現過的 async.parallel，他的用意是同時執行所有的 async tasks，然後全部完成後再做動作。
這次的主題異常輕鬆，但其實並不是所有爬蟲都需要很費勁，主要還是看網站的製作邏輯到底好不好，若非常的「正常」，其實抓起來都是很輕鬆的，但只可惜台灣大部分的資料網站都不是很「正常」，但這又是另外一個有趣的議題了。
這邊觀察到另外一個有趣的事情，在探訪時兩個 request 查詢到的台鐵時刻和高鐵時刻是分開的，也就是說在畫面上他的呈現方式會將台鐵到達時間算好能接駁到高鐵的班次，這個肯定就是前端 render 的時候組裝畫面，若有興趣的話也能去觀察那部份的邏輯。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍伸應用']",,"['準備預設資訊', '模擬 request', 'getTras function', 'getThsrc function', '積木組合', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191879,SoftwareDevelopment,0,[行銷也要自動化]用PythonSelenium+NodeJS+AmazonEC2打造簡易關鍵字搜尋報表應用！系列,1,Day0：KeywordSearch1.0教學文概覽+核心功能(Selenium)前情提要,jiunyiyang,https://ithelp.ithome.com.tw/users/20107784/ironman,1513468773000000000,503,"嗨大家好！我是阿寶，大概半年前開始碰前後端和Python，同時間相對擅長數位行銷、網站分析、社群經營等。
最近因為被重要的老師啟蒙，而有了把行銷領域重複性的工作，用技術整合成一個簡易應用的想法；
於是經過大概3周的嘗試，KeywordSearch 1.0就誕生了！
初版的她其實很簡單，一個搜尋框一個按鍵，在10秒內告訴你特定關鍵字過去一年的搜尋趨勢以及所有相似關鍵詞組推薦（適合行銷人員做關鍵字規劃使用）。
接下來30天我將把這個小專案開發的過程、碰到的坑等等，一步步紀錄下來，也一方面幫自己做個筆記。
雖然為了讓讀者好理解，內容會盡量詳述；但實際上，對自學最有幫助的還是自己動手查stackoverflow、論壇、看懂官方文件，是不建議一直都仰賴完整中文教學的喔！
開始吧！
整合型的工具，越能解決使用者越大範圍的痛點，則越能提供價值。所以原本的專案絕對不會只停在1.0的版本，而未來要擴充她的功能就跟我們主要介紹的這個套件很有關係：selenium。目前關鍵字詞組推薦的來源也是透過selenium來爬到。
以我對selenium的了解，簡單來說她是用來模擬用戶在瀏覽器的行為，因此最常被用來做軟體測試。不過如果當我們爬蟲的目標網站是動態產生資料的，我們不僅無法從原本的頁面獲取資料，也沒辦法在開發者工具的network panel看到固定的json檔案，這個時候使用selenium就是其中一個解決辦法(註1)。
註1：如果網頁是用ajax來載入json資料，那可能可以在network那邊看到當你觸發資料載入時，呼叫的json檔，通常點開就會直接是純資料（這時候只要用json方法來處理就好，不用解析頁面其實也是個優點）。但我遇過網站是動態產生json檔，每次請求url都不一樣XD，這時候就需要selenium大神了，缺點是速度會慢比較多。也可以用phantomJS、CasperJS，在後面文章我會補充到。
直接用terminal跑一個簡單的爬蟲吧，就決定來把ithome首頁的所有問答標題抓出來好了：
進入python script模式後，一次輸入一行（也可以多行，我在後面的文章會一併提到小技巧）
沒意外的話你就把ithome首頁的問答標題（第一頁）都給抓下來了，這是個簡單的小測試
下一篇我們安裝nodeJS，並同時淺談connect，為下下篇的Express做準備。",,"['概覽', 'selenium 前導介紹']","['Week1：架設運作環境', 'Week2、3：資料抓取與整理', 'Week3：軟體構成', 'Week4：部署與其他問題', '簡介', '簡單實作示範']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191608,自我挑戰組,3,使用PHP串接金流相關API系列,6,Day05-使用curl,royal801991,https://ithelp.ithome.com.tw/users/20107301/ironman,1513468063000000000,505,"這次範例中使用的是 cURL (Client URL Library) ，透過 GET/POST 協定和 LINE Pay 伺服器溝通。使用的方法只需要「初始化、設定、執行、關閉 」這四個步驟。
初始化
curl_init($url);初始化 一個新的 session，回傳 cURL handle。
$url 也可以在下一個步驟設定參數時給予， curl_setopt($ch, CURLOPT_URL, $url);
設定
curl_setopt();  設定 cURL 發送請求時的參數，詳細可使用參數設定可以參考官方文件的說明，這邊會列舉一些之後範例會使用到的設定。
                            
執行
$result = json_decode(curl_exec($ch), true);
執行設定好參數的 cURL session，成功 return TRUE， 失敗 return FALSE ，若有設定 CURLOPT_RETURNTRANSFER=TRUE ，成功則會 return 執行的結果。
關閉
curl_close($ch); 關閉指定的 cURL session，並釋放所有資源。",,,['cURL 函式'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191897,SoftwareDevelopment,0,簡潔高效的PHP&Laravel工作術：從ElementaryOS下手的聰明改造提案系列,6,第6天：微調elementaryOS的系統設定,shengyou,https://ithelp.ithome.com.tw/users/20107229/ironman,1513468041000000000,467,"本文同步刊載於作者部落格：https://medium.com/@shengyou/2018ironman-eos-for-php-developer-day6-d716014ce20

如同各作業系統的慣例，elementary OS 出廠時也預載了系統設定這個應用程式，將作業系統層級的所有設定都整合在這個應用程式內。為了讓使用 elementary OS 時更符合自己的操作習慣，在這邊先介紹幾個常見會需要調整的一些系統設定，順便熟悉一下如何微調 elementary OS。請先點擊 Dock 上的系統設計圖示：

首先，先進入使用者設定。在這邊除了可以設定目前使用的帳號外，也可以看到 elementary OS 有支援訪客帳號的設定。不過，由於是個人用的開發工作機，沒有打算開放這個功能，我們可以透過開關按鈕把這個功能關閉。在關閉前，需要先點擊右上角的解鎖 (Unlock) 並輸入密碼才可以調整。關閉後，需要先登出再重新登入，這個功能才會正式出效。

elementary OS 支援多國語系，在我們安裝作業系統的時候，就已經選擇過使用的語系了。不過若您反悔了，還是可以進到語系設定裡面來做調整，或是改變作業系統內各種文字顯示的語言格式。調整後，elementary OS 就會依照您的設定去下載對應的語系檔。這項變更也是需要重新登出再登入才會生效，甚至部份顯示要重新開機才會正式的套用。

每個人習慣的滑鼠和觸控板設定、靈敏度都不同，尤其是滑鼠滾輪、觸控板的捲動方式到底是同方向還是自然，也是每個人各有偏好，在這邊一併調整。

現在愈來愈多開發者是用筆記型電腦做為工作機，好處是移動方便、行動力高，不過往往受限於電池續電力而影響可在外工作的時間。在電源設定裡，可以設定螢幕亮度、休眠選項及電源鍵的反應動作。部份選項可以依據插著電源與使用電池兩種情境做不同的設定。

假如您是藍芽裝置的愛好者，可以在這裡設定您要配對/連接的藍芽裝置。

不過提醒您，若是您要關閉藍芽的話，要透過右上角狀態指標來開關。當然，別忘了在前面的章節有提到，只要用滑鼠中鍵去點選狀態指標的藍芽圖示的話，就可以直接開/關它。

相信透過以上的設定提示，會讓您操作 elementary OS 更加順手。還有哪些設定是您在使用作業系統時一定會調整的呢？歡迎留言分享！",,"['關閉訪客 (Guest) 帳號', '語系設定', '滑鼠與觸控板設定', '電源設定', '藍芽設定', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191896,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,12,【Day12】解除依賴之三：Mock模擬對象說明,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1513467409000000000,452,"前面講完stub，本篇則說明mock，也就是「模擬對象」。這篇會說明模擬對象的意義和使用時間，並且區分mock和stub的差異
前面的stub範例，都是有回傳值或是狀態改變，但是萬一測試的對象是沒有任何回傳值，或是保有任何狀態？又有可能當對象其中一些複雜的邏輯，無法輕易的使用stub的方式去測試，這時候就需要mock上場了。
在書本的中定義：是一個系統中的偽對象，可以驗證被測試的對象是否有按照預期的方式調用自己，進而測試「通過」還是「失敗」。通常每個測試最多只有一個mock。
看起來意思很接近stub。作者對於stub，認為其是輔助測試，讓「被測試對象」可以取得自己的偽對象，用這個假的資料進行測試。而mock，則是記錄所有的通訊資訊，也就是做出用來測試的「被測試對象」，用這個做出來的「被測試對象」進行測試。
其中最大的區別是：
就以LogAnalyzer為說明。假設整個流程是從網頁中上傳檔案，然後經由LogAnalyzer來檢查log檔名，當檔名不正確的時候，網頁顯示錯誤。
然而這個程式仍在開發中，我們只做好了LogAnalyzer，但是網頁那邊的功能還沒有完成。就算完成了整個流程太長，會增加很多測試時間。就好像會需要開啟網頁，按下選擇檔案按鈕，選擇檔案，按下上傳按鈕，上傳檔案，取得檔名（是不是很麻煩XD）。這個時候就是需要mock囉！
重新設計一個interface（接口)，把這個interface導向我們的mock，這個mock就是我們模擬的網站上傳功能囉！
所以我們需要一個簡單的interface來代替原本流程中「從網頁上傳檔案」。
因此流程從：網頁上傳 -->...--> 檢查檔名是否為log檔 --> yes / no，變成：「製作出網頁上傳的檔案名稱」--> 檢查檔名是否為log檔 --> yes / no，前面的諸多動作都被取代掉，而且assert不是功能本身，而是mock自己。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191878,ModernWeb,0,Expo---跨平台App開發從零到上架系列,12,ExpoDAY12---DeviceMotion,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1513466877000000000,426,,['Expo DAY12 --- Device Motion'],"['前言', '現在就做看看', 'Refs']","['Expo', 'React Native']",,,['tags: day12 iThome鐵人賽2018 ReactNative Expo ScreenOrientation'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10191834,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,12,12.談談單元測試(待補完),依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1513466698000000000,441,"我們己經聊過SOLID、依賴反轉、低耦合、高內聚，這些觀念，是在決定是否有能夠執行單元測試的重要前提。
筆者之前在工作環境，跟其他同仁分享單元測試的概念時，同仁的反應大概就是……
有些公司專門的測試部門來進行測試。對測試的同仁而言，他們的測試方向比較偏向黑箱測試、整合測試，只能知道程式最後輸出的結果為何。就算最後的結果出現錯誤。完全無法得知是那個環結出錯。
單元測試主要目的，是確保程式碼內，商業邏輯的正確。
在筆者的認知中，單元測試主要的目的，應該是要測試程式碼內，商業邏輯是否正確與否。也就是，開發某一個功能的當下，我們應該是非常明確的知道，當輸入什麼資料，預期會得到什麼結果。
而單元測試，就是為了快速測試、驗證，我們所開發的功能，是否能達到預期的結果。對於通過測試的功能，就可以保證它的商業邏輯，在特定的測試的條件是正確無誤的。
假若，程式真的在整合測試中，出現異常。因為程式功能經過單元測試，就可以排除己通過測試的部份，有效的縮小問題的範圍。
如果說，寫了單元測試，程式就一定沒問題。絕對是天方夜談。或許，寫時間寫單元測試，只是為了當下測試功能是否正確，感覺小題大作了點。
單元測試，真正發揮它的 POWER 的時間點，在於軟體後續長期維護、需求變動、重構時，就是有效避免錯誤的再次發生。
但是……
單元測試，真正發揮它的 POWER 的時間點，在於軟體後續長期維護、需求變動、重構時，才能真正的明白為什麼需要單元測試。
看倌一定有經驗，當軟體規模大到一個程度後，後面的需求變動，往往有很大的機率出現改 A 壞 B的情況。在單元測試保護的情況下，程式改壞了，測試就會直接亮紅燈，以確保程式功能的正確性。
關於單元測試，網路上有很多優秀的文章，例如 91 大的「30 天快速上手 TDD」或是本次鐵人賽的其他作者的文章，各位看倌都可以去好好的研讀。每位作者切入的點，都會有所差異，也許當中的某一篇文章，就讓看倌收獲良多了。
持續補寫中",,"['1. 為何要寫單元測試？', '2. 應該要注意的要點', '3. 盡可能避免', '4. 後言', '5. 推薦']","['1.1 單元測試應該給誰寫', '1.2 你一定寫過測試程式', '1.3 發揮 POWER 的時間點', '1.4 為什麼無法寫單元測試？', '3.1 過度測試']",['5.1 文章'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191893,ModernWeb,0,Nest.jsframework30天初探系列,13,Nestjsframework30天初探:Day13WebSocket-Socket.IO聊天室(part2),Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1513465932000000000,454,"Guard在day08，有初步介紹過，Guard機制不只可以用在Route上，也可以用在WebSocket Gateway上。
我們先實現Route Guard複習一下，在本篇會使用session存放user object，裏頭key有account、roles，讓route guard機制去驗證，然後也新增一個頁面作為加入聊天室使用，要訪問聊天室網頁必須先通過route guard機制。
src/view/Chat/chatRoom.ejs
script部分
符合我們的預期，要直接看到聊天室必須先到加入聊天室的網頁，加入後才能看到。
Route Guard有發揮功用。
9.來玩玩WebSocket Gateway上的Guard機制，新增websocket.roles.guard.ts。
src/modules/Shared/Guards/websocket.roles.guard.ts
推播訊息原本是string改成object，讓Gateway Guard方便抓角色屬性的值。
12.1 測試一下Gateway Guard，在http://localhost:3000/chatRoom ，輸入訊息，有正常顯示訊息。

12.2 接著將chatRoom.ejs網頁的data.roles=['general'];改成data.roles=['wrong role'];，在http://localhost:3000/chatRoom ，網頁重新整理後，再一次輸入訊息就無法顯示訊息了。

Gateway Guard有正常發揮功用，對整體網站的保護又多一層防範。Nestjs的Exception Filters、Pipes、Guards、Interceptors、Adapter都能套用在WebSocket的Gateway上，不過我沒太多時間一一去實現demo，這點抱歉了，日後可以繼續關注我的github，我會主攻nestjs，將Nestjs所有API都玩遍。
程式碼都在github",,['Socket.IO+Guard'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191891,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,13,[Day13]EasyFlowGP--Web表單元件-Button資料選取器,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1513465636000000000,459,"昨天提到開視窗的方式，是透過寫語法。
而EFGP提供另一個好用的元件，就是資料選取器。
這幫助工程師在開發過程中，免去寫程式語法，只要單純設定就可以完成開窗資料。

設定的步驟
Step1.設定開窗資訊。
Step2.設定查詢資訊。
若順序有調整，滑鼠按住欄位即可以進行拖移。

Step3.設定資料列的標題。
Step4.設定回傳欄位。
-回傳欄位: 這樣設定表單的元件代號。請注意這裡的回傳欄位要和前一步驟Grid的標籤
序號一致。這樣才能對應視窗資料值要對應那一個表單元件。

依照以上1~4步驟完成後，就可以看到成果和前一天分享，使用語法寫視窗的效果是一樣的喔。
這樣單純設定是不是很簡單。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191890,SoftwareDevelopment,0,每天Racket3分鐘系列,13,"(structiron-man(daytitle))(definetoday(iron-man'day-12""Racket的資料抽象—Struct""))",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1513464690000000000,437,"雖然標題這麼下，但 Racket 的確有物件導向！今明兩天，我們要介紹 Racket 的抽象機制，包含它的資料抽象機制：Struct 與物件導向。
想像一下，我們為什麼需要資料抽象？我們已經有 HashTable 了，或簡單點，也有 List、Vector 了，為什麼需要更高層次地對資料進行抽象處理呢？
我們來看範例程式：
我們在此定義了一個簡單的 struct — student，並且宣告了 racket、julia 為 student struct，並且宣告兩個不太合群的 ada 與 haskell （寫這兩個語言的人別生氣唷），一個為 list，一個為 hash。
我們定義完了之後，在下方看到使用 student? 直接進行比較，有別於 list? 或 hash?，後者是使用通用型資料結構進行資料的組織，而前者卻是具有 語義 的資料型態。這就是我們所說，資料抽象化之後的作用。
因此，當你把你的資料轉成 struct，它可以擁有自己的語義與存取方式，如第三段程式碼一般。
Racket 可是很具有現代感的語言呢！struct 可以有繼承關係，例如以下範例：
第一段程式可以看到，我們先定義了 position，再定義了另一個 3d-position，名稱的後頭接著要繼承的 position，3d-position 就能繼承 position 的內容。
但是，能否透過 3d-position 來存取 position 的內容呢？在 Racket 的原則裡，是不行的！要存取 position 的內容（x 與 y）還是要透過 position 才可以！
那麼，資料之間怎麼比較呢？在 Racket 裡頭，有 eaual?、eq?、eqv? 等不同的比較方式，我們現在討論最常見的 equal?，可以參考以下範例：
我們在這裡定義了兩個很類似的 struct，一個有宣告 #:transparent，一個沒有。然而各位可以看到，第一個 equal? 理所當然地拿到了個 #f，但第二個為什麼是 #f 呢？而第二個 #f 但在第三個 equal? 比較時，卻又是 #t？
在這裡閉上眼思考思考，程式語言給予的這個資料抽象機制，它不只讓你可以定義具有語義與結構的資料型態，更具有保護資料內部狀態的封裝性。因此，每個 struct 都是預設為 不透明的 狀態（opaque），外部的 equal? 無法直接取得它的內容以進行比較，操作這個資料的人，只能透過這個資料提供的方式來存取它。反之，就是 透明的 （transparent）狀態，equal? 在外部，可以對 struct 的內容進行比較。
既然這資料，具自己的語義與函式群，也具有封裝性，若它能加上行為，那就更有趣了。我們下回要談到的，就是物件導向了！",,"['1. 有時候你不一定需要物件導向', '2. 資料與資料也有繼承關係', '3. 微妙的 equal']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191793,自我挑戰組,0,rails學習紀錄系列,4,[Day4]關於index:true跟foreign_key:true（下）,thehappyend,https://ithelp.ithome.com.tw/users/20107708/ironman,1513463839000000000,449,"db/schema.rb 的結果如下：
可以看得出來：
references 的寫法最後也是產生 integer 欄位，但會自動補上 _id 名稱
（看t.integer的部分）
在純用 integer 的寫法中，需要主動告知 index: true 才會幫忙加索引，用 forign_key 的方式不會。
(看t.index的部分，只有user_int_index_id有，另外兩個都沒有）
用 references 的寫法，不管有沒有 index: true，都會自動幫你加上索引。
（看t.index的部分 user_ref /user_ref_index /user_ref_key)
資料來源：
龍哥解答",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191888,ModernWeb,1,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,14,"package-lock.json有什麼用，淺談Yarn,NPM5與npmshrinkwrap","AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1513463421000000000,462,"Hello 大家好
昨天我們基本上將 npm install, package.json, node_modules 內部的機制討論了一番
不過其實有一個小問題大家可能沒注意到
我們來打開看看 package.json
就我們昨天的經驗
npm install 會自動幫我們把 3.6.0 版以上的 selenium-webdriver 安裝到 node_modules 裡面
並且遞迴式的把所有被引入的 dependency 都裝完
這邊的問題是⋯⋯
「我們並沒有紀錄其他 dependency 的版本啊」
要記錄版本的原因很簡單
我們在寫程式的時候，通常很重要的是要注重「向後相容」
有點像是你寫了一個 module
要注意不管你每次改了什麼
其他使用這個 module 的人，你要盡可能讓他更新的時候不會壞
(要馬就寫成另一個新 function，保留原本的行為)
寫程式的時候其實很難盡善盡美
所以你才會看到不少函式庫，在主要版本號更新時 (像是從 1.0 跳到 2.0)
都會寫一長串的 changelog(功能改變)
用來告訴大家有哪些 breaking change，不要讓這些改動壞的太誇張
如果你每次執行程式時，使用的函式庫版本都不一樣
這樣就對你的程式很危險了
不過你其實可以看到，疑
package.json 好像沒有幫我們紀錄很詳細的版本號耶？
他的 dependencies 只有大於 xxx 的紀錄
而遞迴加入的 dependency，則沒有任何版本紀錄
基本上要是你沒有做些應對的話，你的程式很有可能 npm install 後，一下爆這個一下爆那個
這個問題已經存在很久了，並且有 3 種主要的解法
npm shrinkwrap 這個解法是比較舊版的作法
他產生的檔案有點類似這樣

他會詳細的紀錄
在 npm 5 新增的 package-lock.json 其實跟 之前的 shrinkwrap 檔案很像
唯一的差別只有在
詳細內容可以參考
https://stackoverflow.com/questions/44258235/what-is-the-difference-between-npm-shrinkwrap-json-and-package-lock-json
基本上不太會去考慮兩個檔案格式是否相容的問題
因為通常你只會在 npm shrinkwrap 和 package-lock.json 間擇一
在介紹 yarn.lock 前，我們會先解釋一下 Yarn 這個專案

其實 npm 本身有許多點被人詬病，像是就算你電腦裡的其他專案有用到同個 dependency
他不會直接複製來用，而會是在上網抓一次(所以很慢)
Yarn 是原本 Facebook 內部為了解決 npm 問題而開發出的另一套套件管理員
後來開源放出來(有很多工具原本就是大公司內部的)
他本身使用的資料庫還是 npm ，但是他對下載套件、lock 檔、終端介面做了一些優化
下載 package
而 Yarn 本身會在你的系統裡面做一些紀錄
如果你有安裝過類似的 package 就會複製來用
並且支援平行下載，使得 yarn 在下載 package 時速度較 npm 快很多

Yarn 是使用他自己的 lock 檔，叫做 yarn.lock
他本身並沒有比 npm shrinkwrap 或 package-lock.json 存更多內容
但是他的格式有特別設計成比較易讀
會讓團隊 code review 比較方便(不過那也要你們 code review 真的會 review 到 lock file )

終端的介面

Yarn 另一個會拿出來提的是 - 「它的介面比 NPM 漂亮」
不但色彩比較多，而且還會有 emoji  ? ?
(不過這到底重不重要就因人而異了)
在 GitHub 上甚至有一篇討論 「Yarn 可不可以把 emoji 關掉」的 issue
https://github.com/yarnpkg/yarn/issues/960
現在我們有三個選擇
這邊個人覺得像 npm shrinkwrap 的話
由於現在許多人都有升級到 npm 5 了，有在維護的套件比較不會去使用 npm shrinkwrap
而且 npm shrinkwrap 本身有不少 bug，開發團隊為了 package-lock.json 比較不會去修

這邊建議是除非你現有的系統是使用 npm 5 以下創建的
並且升級的成本很高，不然建議是可以使用 npm shrinkwrap 以外的選項

我認為這邊就偏向個人選擇了
Yarn 的確效能比較好
但是並沒有提供額外的功能使得跟 npm 差距變大
並且引入一個額外的工具使用
對團隊有時候會增加複雜度(如果是在帶人，你也會希望一開始環境越簡單越好)
npm 的開發活躍度比較高，不過使用 Yarn 的話應該會跟 Facebook 的一些工具比較好串接
我的建議是都了解如何用，再根據 Project 決定要用哪個(因為功能沒差很多，上手很快)
今天的主題就到這裡了！
就這幾天的衝刺後，算是補完了 JavaScript 生態系的基本功
接下來我會考慮就 Webpack 或是 Babel, ESLint 做更深入的介紹
我們明天見！
(這是上週我在 SFJS 聽的演講，也可以參考 https://docs.google.com/presentation/d/1Xvs-f4E4owbwXVIB8Q1eat___RePBTzPTCYsaKtRj3I/edit#slide=id.g2a70d767ff_4_141)","['package.json 的問題', '為什麼其他 dependency 也要記錄版本', '但是', '所以知道現在使用的函式庫版本很重要', '哇靠，那該怎麼辦', 'npm shrinkwrap', 'npm5 package-lock.json', 'Yarn', '該選哪個？', 'Yarn or NPM 5', '明天']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191849,ModernWeb,0,每日文章推薦系列,13,Day13Laravel的學習,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1513463371000000000,492,"所以最好是把我之前介紹的
以上兩個內容都先看完
我覺得才能理解Laravel為何要這麼設計
可以的話我覺得用官方給的homestead先起手
要學的東西只有vagrant  學習曲線會比較緩
因為他提供的就是最適合laravel的環境
可以玩一些他推薦的功能而不用特別再去對環境做處理
如果有玩過docker也可以用laradock啦
我個人是用的很開心
前提是對docker有點經驗
雖然想直接玩docker我也是蠻推薦的
如果你用windows 又不想學上面兩樣東西
那我推薦用Laravel dojo提供的wagon
免安裝可攜的 LARAVEL 開發環境為了安裝 Laravel 的開發環境而傷腦筋嗎？wagon 整合了 cmder、git、UwAmp、composer 成一個免安裝且可攜的 Laravel 開發環境，您可以把它想像成 Winodws 版的小型 Homestead！降低您學習 Laravel 的入門門檻，若測試完不滿意，您還可以隨時刪除(不用解除安裝)，完全沒付擔，現在就來體驗！
可以免安裝直接用
還內建cmder 會省下不少麻煩
Laravel 提供了Eloquent這個orm工具
它內建了需多功能 還能對資料model做相關性的連結
基本上我覺得不理解Eloquent就可以乾脆不要用Laravel了XD
當你能熟練使用他以後 就能省下很多Sql的時間
但是還是要注意他轉換出來的Sql語法
有時候不小心還是會效率很差
現在為了避免資料一直重新抓取 最常用的技術就是做cache
laravel把Cache做了不錯的封裝
尤其Cache::remember真的是很好用XD
用以上語法就能確定抓到的資料可以cache幾分鐘
如果最近有用過javascript的lodash或者underscore
應該會對裡面對於array的操作有印象
而collections可以讓你在php裡面用類似的語法去對陣列做處理
也許你會想到php明明就有內建的處理函式 像是array_map之類的
但collections的好處是讓你可以把工作串聯處理
在你要組合各種函式處理的時候就會很方便
所以在處理資料之前可以先看一下collections裡面有沒有用的到的函式
說不定可以省下很多的麻煩
個人最常用的是pluck
migration是拿來管理資料庫結構的
可以記錄目前執行了那些工作
跟執行未執行的工作
讓資料庫的修改可以做為程式碼
留在流程裡面 也能做版本管理
強烈推薦使用migration來管理資料庫結構
到時候遇到要在本地端建立測試站
也能省下不少麻煩
用一套工具要先了解他提供的那些東西
而提供那些東西的用意是為何
所以我覺得看完文件再來使用可以省下不少麻煩
這樣讓你遇到問題的時候才知道可以用那些工具下去嘗試
[如何高效地学习 Laravel 框架？
](https://laravel-china.org/articles/6928/how-to-learn-the-laravel-framework-efficiently)
自学编程需要注意什么？
看看吧
其實就算老手學新東西也是適用這幾招
前端 ajax 请求的优雅方案 - 个人文章 - SegmentFault
回應是主體
多寫文章就會有人在下面提供你更好的做法XD
【万字箴言】技术焦虑的减法与解法
焦慮不是壞事啦
有時候會變成動力
但是就要看怎麼去管理就是了
在 Google Chrome 上關閉 AMP (Accelerated Mobile Pages) – Gea-Suan Lin's BLOG
備用
微軟在考慮讓 Excel 支援 Python… – Gea-Suan Lin's BLOG
雖然我不用office很久了
聽到這個消息還是覺得很棒
https://github.com/fripig/article_log/issues/421",,"['前置技能', '環境', '重點功能', '總結', '推薦內容', '今日分享文章', '今天看的文章']","['vagrant', 'docker', 'wagon', 'Eloquent', 'Cache', 'collections', 'migrations']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191885,自我挑戰組,0,ArasPLM開發練功30天系列,13,[Day13]SystemEvent-系統事件,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1513463289000000000,436,"系統事件分為以下3種-
1.登入成功後
2.登出前
3.登入失敗
通常用於紀錄系統Log資訊，或是另外的身分驗證而使用，來測試看看功能吧
先在系統事件新增SuccessfulLogin

新增一支空白Method到System Event Handlers

Method方法
重新登入後的畫面

接著
再來改寫登入訊息
把登入Log記錄到System Event Log
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191880,ModernWeb,0,初探前端之路-React-由生到死的踩地雷系列,7,React-Redux-框架練習（1）,Luis-Chen,https://ithelp.ithome.com.tw/users/20103556/ironman,1513463152000000000,453,"我找到一篇 Redux 的初學教學，是一個外國人寫的，我順便翻寫他所做的文章，也方便我釐清觀念。
Getting started with create-react-app, Redux, React Router & Redux Thunk
首先用create-react-app 建立環境
安裝套件
redux,react-redux,react-router-dom 不多解釋，react-router-redux,主要是讓react-router-dom的components 也納入redux 的方式管理， redux-thunk是處理非同步問題(如串api)
react-router-redux 介紹
redux-thunk
#/src 一切檔案都建立在/src裡面
這邊是設定react-router與redux-thunk的store，引入redux的core去創造一個custom的全域store
react-router-redux跟redux-thunk是redux的中介層(middleware)，一個概念，全都交給redux
// 稍後會再加進reducer，
You’ll notice we’re importing a file we haven’t yet created called rootReducer. This is essential to Redux. We’ll come back to Reducers later but for now, create a file called ./src/modules/index.js so we can satisfy our Store.
createStore、compose、applyMiddleware
1.createStrore 建立一個 Redux store，它掌控應用程式的完整 state tree。 在你的應用程式中應該只有單一一個 store。
2.compose:把 function 從右到左組合起來。
3.applyMiddleware:建立一個Middleware
Store觀念
1.routerMiddleware(history):你可以用到你的Redux Store中来取得action creator創建的acion。它會將這些操作重定向到提供的history實例。
thunk
HTML5的history API
1.combineReducers : 把reducing funcion 的物件轉換成一個可以傳給createStore的單一reducin funtion
這邊說明,components 會放到container coponents App裡面。
Our router history is managed inside our Redux store which we created in the first section and is passed down via something called ConnectedRouter which we will implement later.
容器Containers，redux觀念裡,需要控制資料流的components 都會叫容器,也可以說是一個版，整個頁面都是包在App內執行，
刻出/home的分頁
1.bindActionCreators:
1.connect:使用 connect() function 來產生 container component，它提供了許多有用的最佳化來避免不必要的重新 render。
1.bindActionCretors：把一個每個值都是 action creator 的物件轉換成另一個有同樣的 keys 的物件，不過每個 action creator 都被包進一個 dispatch 呼叫裡面，所以它們可以直接被呼叫。
bindActionCreators 唯一的使用情境是，當你希望傳遞一些 action creator 下去一個不知道 Redux 存在的 component，而你不希望把 dispatch 或是 Redux 的 store 傳遞給它。
1.push:看他作用應該跟history.push（）是一樣觀念
明天待續","['前言', '1.create-react-app', '程式']","['1. Store', './src/modules/index.js', 'Routes', 'Containers App', 'Home.js', 'about.js', 'Rendering our app']","['redux', 'react-router-redux', 'react-thunk', 'history', 'redux', 'react-router-redux', 'redux', 'react-redux', 'redux', 'reacr-router-redux']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191887,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,13,Webpack,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1513462899000000000,452,"官網教學簡單清楚，可以實做如何打包CSS，圖片，字型，data。
Asset Management
首先電腦要有最新版的 Node 和 Yarn.
$ yarn add webpack --dev
新增 webpack.config.js
install style-loader and css-loader
$ yarn add style-loader css-loader --dev
install file-loader to load images and fonts
$ yarn add file-loader --dev
install csv-loader and xml-loader to load data
$ yarn add csv-loader xml-loader --dev
如果要讓 Webpack 的提示訊息以 macOS 的原生訊息功能顯示的話，要裝webpack-notifier這個套件。
$ yarn add react react-dom
$ yarn add babel-core babel-loader babel-preset-env babel-preset-react --dev
Babel is a compiler.
To compile ES6 codes into ES5 syntax.
雖然新的瀏覽器支援 ES6, 但是不完全，像 import, export 就不能用，所以還是需要 Babel.
尤其是專案需要支援 IE 的話，Babel 是一定要裝。
建.babelrc設定檔，或是在 package.json 裡設定 babel 值。
.babelrc · Babel
另外，Babel configuration 也可以在 Webpack babel-loder 裡設定，但是記得要設 babelrc: false 否則會發生衝突。
要用 “env” 的 preset 要先安裝 env package，這個 preset 是取代舊有的 “es2015, es2016, es2017, latest” presets.
$ yarn add babel-preset-env --dev
Babel option 同樣有叫 env 的設定參數，可以自訂不同的開發環境，不要和 “env” preset 搞錯了。",,,"['Install webpack as dependency', 'Install React', 'Install Babel']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191886,自我挑戰組,0,"Let's""Go""系列",11,Day11　DataTypes,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1513462872000000000,445,"這節要談的是Slice，相較於Array，Slice在使用上較為彈性
它包含了三個部分，指標、長度、容量
與Array一樣，其內部的元素我們可以透過a[n]的方式取得",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191860,SoftwareDevelopment,0,初探Kotlin系列,11,[Day11]ClassesandInheritance-3,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1513462817000000000,435,"class繼承或實作有相同的類別成員時(有相同的方法)
需要明顯的指定是時做哪個父類的方法
跟Java一樣 帶有關鍵字abstract的類為抽象類別不可被實例","['Overriding Rules', 'Abstract Classes']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191848,AI&MachineLearning,6,玩轉資料與機器學習-以自然語言處理為例系列,11,周末特別節目-iThome鐵人文章分析,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1513462684000000000,595,"提醒: 本篇文章的code在這裡: iThome鐵人文章分析
在寫這堆文章前，自己對於這個自己文章的期許，大約是用有架構跟條理的方式呈現給大家。這有它的好處，大家要集中精神學習一門知識時絕對是利器；不過當然也有壞處，因為不直接解決問題，所以沒什麼人要理我。所以我今天要反其道而行，來玩一個好玩點的遊戲，而且這個遊戲會在未來的周末持續出現，然後越來越精彩，敬請期待。
我的目標是預測文章的瀏覽人次。
由於這個工程非常浩大，所以不太可能一次做完，小弟我會氣力耗盡。因此，今天會教大家怎麼把文章爬下來，並且作揖些簡單有趣的分析。也剛好順應著寫文章的節奏，盡可能使用到前面文章已經使用到的工具。
那麼，咱們上工吧!
如果對於以下語法不熟悉，可以參考之前的文章...
網路爬蟲Day1 - 概述
網路爬蟲Day2 - html檔的取得及常見問題
網路爬蟲Day3 - html檔的取得及常見問題(續)
網路爬蟲Day4 - html檔的解析


這邊之所以會說是簡單，是因為後面還有更精采的，會在比賽期間在周末持續推出，敬請期待。




因為後面就是很精彩但很長很長的表格，所以這邊做個總結，系列文章會在下個周末繼續推出，預祝各位比賽順利拉~~~
個參賽者的比較(先後順序不代表排名，表格可以左右拉動)","['MurMur', '總體目標', '今日目標', '爬蟲部分', '簡單分析', '結語']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191883,ModernWeb,0,從無到有，使用Go開發應用程式系列,8,SliceType,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513460983000000000,466,"Slice 跟陣列使用起來很像，而最大的不同是，陣列是值， Slice 是參考到一個陣列。
要建立一個全新的 Slice 有兩種方法，一個是使用 make 函式：
另一個方法則是指定初值，雖然用法跟陣列很像，但形態不一樣就不能拿來一起比較。
Slice 是參考到一個陣列，可以看下面這個範列了解：
我們可以對 Slice 做一些操作，如 len 函式可以查長度， cap 可以查參考的陣列有多少容量：
append 函式可以追加新元素在 Slice 最後面，下面是一個小範例：
上面可以觀察到 slice1 加入新元素產生出 slice2 有發生長度與容量的變化（長度 + 1 ，容量 * 2），並且最後面 slice1 與 slice2 的值並沒有參考到同個陣列。
另外 slice2 加入新元素產生出 slice3 只有長度 + 1 而已，最後面的值也有參考到同個陣列。
由此可知，當 Slice 新增元素超過了容量的時候，它會產生新的陣列，且容量有兩倍，給新的 Slice 參考；而容量夠用的時候，則不會產生新陣列。
copy 函式可以複製內容到另一個 Slice 裡，如下：
複製時，即使長度不一還是會執行成功，只是會沒有複製完全。
除了從頭建一個新的 Slice 外，也可以從陣列或 Slice 上產生新的 Slice ，以下是簡單的範例
[1:4] 代表的意思是，從「第 1 個元素開始，到第 4 個元素，不含第 4 個元素」，因此會取得 [2 3 4] 三個元素。而容量會從第 1 個元素開始，一直到結尾，以上例來說就是 4 。
下一個 [1:3] 相信就不難懂了，不過它會從 [2 3 4] 這個 Slice 取元素，所以會取到的是 [3 4] ，容量是 3。
最後，因為沒有使用 append 函式，所以它們都參考到第一個陣列。
另外也可以使用 [:] 來取得全部陣列的內容。",,"['建立', '操作', '從陣列或 Slice 產生 Slice', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191882,SoftwareDevelopment,0,看到code寫成這樣我也是醉了，不如試試重構？系列,6,軟體量測（SoftwareMetric）,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513460935000000000,486,"寫出好維護的程式要靠經驗累積的，初學程式經驗少，因此容易寫出有壞味道的程式。而有經驗的開發者，看到壞味道一定很敏感。但是檢查原始碼的狀況，也是得看人品。運氣不好，一個 commit 上千行，味道千奇百怪，依賴錯縱複雜，想提修改建議也不知從何講起。
除此之外還會有另一個問題：如果公司有一個超級開發者，不管是怎樣的程式交給他檢查，都能提出中肯的建議，那很有可能他就會成為公司的瓶頸。因為高手只有一個，檢查的程式碼也有限，勢必會演變成排隊檢查，最後就容易變成瓶頸。
難道就完全沒有辦法了嗎？有的，正所謂「成功的經驗很難複製，失敗的經驗要複製反而很簡單」，原始碼也是。換句話說，難維護的原始碼通常都有一些模式，只要是有固定規則的任務，正是電腦擅長處理的。我們可以透過工具來搜尋有固定模式的壞味道，讓每個團隊成員，都有辦法了解程式碼目前現狀，甚至有的工具還會提出修改建議，非常方便。
這些工具通常會先解析原始碼，取得一些基本數據，如原始碼行數（loc），再透過這些數據來組合成各式各樣的資訊，如 Class 行數太多等等或是 Class 之間的耦合等等（Coupling）。這類檢查不需要執行程式，只要有原始碼即可處理，因此我們也稱之為靜態程式分析(static program analysis)；相反地，有些工具必須執行程式才能取得數據，如單元測試取得程式碼覆蓋率（Code coverage。這類檢查則稱之為動態程式分析（dynamic program analysis）。
這類工具都會對原始碼做分析（source code analyzer），我們也稱之為軟體量測（Software Metric）。網路上應該能找到蠻多類似的工具，如 PMD 有實作多種語言， PHP 則可以用 PhpMetrics 。
以下介紹軟體量測能得知的訊息，以及我們接下來該做什麼樣的處理。
這類檢查非常學術，因此筆者也只知道部分數據所代表的意義。
這應該是最好懂的指標，它會把註解去除後，計算所有程式碼的行數。也有其他衍生的指標如 LLOC （Logical lines of code） 、 CLOC （Comment lines of code） 、 Volume 等等。
程式碼行數越多，閱讀理論上會花比較多時間，但不是絕對，比方說下面這段程式碼 LOC 是 2：
下面這段程式碼 LOC 是 6：
相信大家應該會覺得下面的比較好懂，它用了較多的行數來表示它的結構，會比上面的好理解。
簡單地說，它代表著原始碼有多複雜。
如果一個 method 裡，如果沒有使用 if 或 for 等，需要條件判斷的區塊，那這個 method 的循環複雜度 會是 1 。但開始使用 if 時，循環複雜度就會開始增加，反應在閱讀程式碼上就是：看到 if 時，都會需要停一下，了解程式什麼時候會進入 if 區塊，什麼時候不會。循環複雜度越高，理解就會比較困難，修改難度也會提高，修改程式碼的時間自然就會更長，因此它會是重構的好目標。
另外，循環複雜度也跟 coverage 有關係。如果想達到 100% ，理論上就必須寫出循環複雜度 + 1 個 test case 。
它代表著單元測試曾經走過哪些路或走過哪幾個路徑。通常會用 C1 與 C2 來表示， C1 是行數的覆蓋率， C2 則是路徑的覆蓋率。
程式碼覆蓋率能提供的資訊很有限，但搭配其他資訊會得知一些訊息。比方說複雜度高的程式， bug 發生機率會比較高，如果覆蓋率又不高的話，程式的潛在風險就會非常高。
軟體量測的目的，是了解程式碼的現況，並不是設定一個標準數字讓大家完全遵守。
比方說：複雜度太高的程式確實是有風險的，但如果商業邏輯本身複雜的話，複雜度高是正常的。又或是用盡各種方法把程式碼覆蓋率提高到 100% ，但卻沒有測邊界值，這樣的程式依然是有風險的。
但量測所得到的現況，剛好可以拿來做重構方向的參考，或是重構前後的比較，因此了解這些指標，也會對重構有幫助的。",,"['原始碼行數（Line of Code）', '循環複雜度（Cyclomatic complexity）', '程式碼覆蓋率 （Code Coverage）', '今日回顧', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191572,自我挑戰組,0,iflen(learning.python)==30:系列,13,Day13-Dictionary-常用方式,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1513460734000000000,447,利用sorted(dict.keys()),,"['以有序的方式走訪dict', '利用key或value作過濾', '參考']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191571,自我挑戰組,0,iflen(learning.python)==30:系列,12,Day12-Dictionary-特性,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1513460663000000000,443,"Dictionary是一種無序性(unordered)的key-value pair。
以下分別就key和value來自問自答
key是否能重複呢?
在python官方的說明文件中提到key有唯一性
an unordered set of key: value pairs, with the requirement that the keys are unique (within one dictionary)
key可以是什麼呢?
因為需要當作取得value的索引，若key會被外部因素變來變去，造成上一秒指定的key下一秒就被改掉，似乎也不太合理，所以必須為immutable type。舉例來說: strings, numbers or tuple都可以。
嚴格上來看，若要使用tuple作為key，則tuple內的元素也必須要immutable。
value可以是什麼呢?
理論上甚麼都可以
和list相同，dictionary也是mutable",,"['Key', 'Value', 'Mutable', 'Recap', '參考']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191881,自我挑戰組,0,,13,[空白中]其實還沒想到要寫什麼,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513459481000000000,470,"有點想寫文章分享，但是今天還沒有空看文章
昨天的FB社群也還沒寫完
文章分享的情況也還不打算寫
昨天有人幫我寫了簡單的BOT也還沒看
所以等我周日有點時間再來補文吧",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191734,自我挑戰組,0,自我挑戰日記系列,11,CSS：background圓錐形漸變,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1513457630000000000,508,"圓錐形漸變 就是可以做到下圖的漸層

https://css-tricks.com/snippets/css/css-conic-gradient/
從上面資料知道
會是從 [某點] 開始順時針漸層
預設是從12點鐘開始
就像下面這個例子
https://codepen.io/thebabydino/pen/LVzWEj
而滿奇怪的是昨天的確看到過也可以用複製貼上做出一樣的
後來不知道是錯了還是看不到
就連複製貼上也做不出來
今天還是找不出問題在哪 抱歉了 
https://www.sitepoint.com/create-css-conic-gradients-pie-charts/
另外再一個有實作的參考資料
但也是看不到
大約是我的瀏覽器還不支援吧
天氣變冷了
大家注意保暖喔!
--- 明日待續。",,,['大家好  '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191823,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,13,[Day13]Redux是什麼？,dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1513457537000000000,510,"Redux 是個全域的狀態管理物件。 它的idea 是來自於flux的架構。 我們需要Redux 因為當我們的react app 越來越大的時候， 狀態會變得很難管理。 尤其是當爸爸組件要分給兩個兒子爸爸的state。 然後state，又要傳來傳去得很麻煩。 為了解決這個問題，我們需要一個全域的狀態管理器。

現在有Redux 我們要把我們有共同有的狀態放進Redux裡面。 那當redux裡面的state有更新，其他的元件都也會自動更新。
那以下的教學我會用我的 Recipe App 來demo， 這個 app就跟一般的CRUD很類似。使用者可以增加自己喜歡的食譜。
我們要先識別Action Type
然後我可以呼叫我們action，還有帶需要的參數(payload)
以下的圖顯示Redux的流程， 然後我也會在下面貼上我用redux的兩個專案。


接下來我會來介紹如何把react 跟 redux 結合。",,"['背景', '教學', '連結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191863,SoftwareDevelopment,0,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,10,Day10-上線前增加SpringBootAdmin來做監控,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1513457343000000000,511,"因為很多時候,你根本不會知道你服務在哪台實體機上執行,也不知道現在用到哪一版
所以在微服務系統架構中...監控管理是非常重要的一環
其實在 SpringBoot中有內建 提供非常多的資訊跟一些簡單的服務管理功能
後來有一個團隊做了不錯看的 UI 出來, 就是 SpringBoot Admin 也跟 Spring Cloud 做了不錯的整合, 就算不用 SpringCloud 單獨使用也非常好用.
首先我再建立個新專案叫 admin
專案的 build.gradle 如下
我們加上了 spring-boot-admin-server 這是監控端, spring-boot-admin-server-ui 就是 UI 啦
然後我們啟動程式加上
加上了 EnableAdminServer 就可以了
啟動之後 打開 http://localhost:8080

然後當你用 Chrome 打開頁面的時候, 會跳出下面通知接收的詢問

這邊我們先按允許
客戶端更簡單, 只需要引入 spring-boot-admin-starter-client 套件
application.yml 我們改一下 port 然後加上 client 的配置讓他知道 server 在哪
還有我們給應用程式一個名稱 bookservice 之後比較好辨識
接下來只要啟動程式就可以了, 你可以看到我們
畫面中我們的 bookservice 是啟動狀態, 同時狀態變動的時候 springboot admin 也會透過 chrome 的機制來通知我們

是不是感覺安心很多了呢? 至少不會發生服務掛掉一天一夜沒人發現這種鳥事 XD
但是 Client 端的 port 跟 api 是一樣的, 所以外面的人也可以透過這個 port 來監控你的應用
所以我們再做一點手腳來保護
簡單一點的呢....就直接加上
預設呢....就是所有 API 全部都需要授權(包含監控資訊)
所以稍微加上自己的配置 WebSecurityConfig.java, 作用在我們自己寫的 api 開頭 url 開放(之後會再用我們自訂的管理方式), 其他都需要授權
然後配置檔 application.yml 就改成 這樣
management.security.enabled 一定要開啟, 不開啟等於沒有生效喔
security 這邊就是 basicAuth
admin.client 這邊就是讓 server 端可以透過 basicAuth 正常存取 Client 的資訊",,"['Server 端', 'Client 端', 'Client 端 安全機制']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191876,DataTechnology,0,Python自習手札系列,1,Python自習手札(1/30):來個HelloWorld先~,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513456806000000000,517,"好吧...老實說，是自已懶惰，能用原生的，就不想花時間自已另外安裝就是了。
另外，追求穩定的人，也會使用非最新的版本。
開啟終端機輸入python，進入python shell (command line)，顯示linux已內建v2.7版本。
來個Hello World先~~~

<<<更換主題原文重發>>>
原文https://ithelp.ithome.com.tw/articles/10190951",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191875,Security,0,從接電話解任務開始到進入資安領域邊邊系列,1,接電話解任務(1/30):方便看一下問題和操作流程嗎?,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513456554000000000,512,"說的和聽的人來自不同領域、不同的環境，對於同一個東西可能會有不同的見解與解讀，此時如果可以直接看到使用者的桌面，請使用者操作或重現問題，可以快速的幫助雙方釐清問題。
遠端桌面的工具很多，可以選用系統或應用程式內建的、亦或是第三方工具。如果可以，個人偏好選擇使用者已安裝的系統、應用程式內建的遠端連線功能，把改變使用者電腦環境的機率降到最低。
<<<更換主題原文重發>>>
原文https://ithelp.ithome.com.tw/articles/10190639",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191869,Security,0,CEH之越挫越勇系列,12,[Day11]列舉攻擊-實作篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1513456366000000000,575,"如果我們取得了主機位置(172.19.19.3)，但卻苦於不知道帳號密碼…

網路掃瞄，有什麼服務可以利用？

取得使用者列表後，可以更進一步取得使用者密碼




自動開啟關聯資料夾
",['Nump'],"['NetBIOS Enumeration Tools：Hyena', 'NetBIOS Enumeration Tools：NetBIOS Enumerator', 'NetBIOS Enumeration Tools：SuperScan', 'SNMP Enumeration Tools：SoftPerfect Network Scanner']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191873,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,8,[VIII]用CodeIgniter的30天-新聞模組原理(一),qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1513455396000000000,507,"上次的一開始我們建立了 application/models/News_model.php
這個 model 繼承了 CI_Model 意思就是我們可以使用他的所有函示和變數
並載入了資料庫程式庫，於是我們得到了 $this->db 這個物件，用來存取資料庫
來研究這個 model function 在做什麼吧
這個 function 接收一個參數 id 預設值訂為 FALSE
若是沒有接收到值，就為FALSE
如此會觸發第一個 if 判斷式，顯示所有文章的查詢
會去取得 news 資料表中的所有資料
get() 這個函數定義在
\system\database\DB_query_builder.php
可以看到他把輸入的表整張給撈出來 return
而若是有輸入 id 則使用同一隻檔案中的 get_where 方法
第一個參數同樣是表單名稱，然後是 where 條件
這邊可以注意到我們用的是 array 傳入
看到這個寫法，我trace 了一下 code，看起來是可以輸入多筆條件的
之後再來做實驗
最後是 row_array 和上面的 result_array 一樣放在
\system\database\DB_result.php
row_array 只回傳單一列資料
而 result_array 會把所有的資料給回傳
這就是我們查詢文章的 model 概覽",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191872,DataTechnology,0,Python學習筆記系列,13,[Day13]ComparisonOperators比較運算子,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1513455036000000000,488,"
以下範例為不同數值的比較


資料來源: Go from zero to hero in Python",,,['以下這些運算子可以讓我們比較不同數值和輸出布林值 (True or False)'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191868,ModernWeb,0,Confluence線上協同作業之平台系列,12,表單的使用,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1513454839000000000,489,"在confluence中要建立表單，並不是一件難事，比較困難的是要如何把USER輸入在表單上的資訊給儲存後，可以透過SQL語法來抓出後以清單的方式來呈現，如果可以搭配查詢欄位當條件來給USER使用的話，那應該是更棒的結果，目前我有找到一個form的免費plugin可以使用，可在網址https://marketplace.atlassian.com/plugins/net.kentcom.live-input-macros/server/overview 查看其相關資訊，除了USER之前有提到要如何在confluence中使用產生類似下拉選單(可同時搭配另外的plugin https://marketplace.atlassian.com/plugins/eps.focuspro.EasyDropdownMenu/server/overview )、核取方塊checkbox多選功能的使用及option box單選功能的使用，表單的呈現大致上已經不是問題。
checkbox 表單呈現方式如下:

如果透過iframe的方式，使用html macro來將表單給崁入到page頁面內容下的方式是否可行呢？我曾經想過使用我較擅長的aspx建立表單後，透過嵌入語法iframe的應用方式來使用，它也的確是可行的，但可惜的是它無法記錄儲存到使用者的填寫帳號。
比較大的問題是這兩個plugin，只能記錄USER單一紀錄，如果當下個使用者來填寫後，將會看到上個使用者的填寫紀錄，但經過與plugin開發公司聯繫後，目前得到的資訊是它們將會列入下個版本功能改善的一項，而這應該會解決之前提到的問卷表單建立功能的部分。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191866,ModernWeb,0,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,13,Django起步走：基礎QuerySets,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1513453065000000000,515,"接續之前的Django內容
今天來聊聊QuerySets的操作
先看一下官方的解釋：
一個 QuerySet，大體上來說，是一個充滿了 Model 物件的清單。QuerySet 允許你從資料庫中讀取資料，也可以對資料做篩選或排序。
基本上就是實作ORM的模組，例如Rails的ActiveRecord
方便我們與資料互動
今天我們會透過shell操作
首先打開shell
就會進到python的shell環境
與Rails的console不同，shell並不會自動引入所有model或lib
所以當你取用之前，記得要自己引入
這點我覺得相當的不方便（扣一分）
比方說我想要看看所有的Post
他會告訴我Post尚未定義
必須要手動引入
這個時候才會順利回傳
順便比較一下Rails的console
我個人是覺得簡單且直觀很多
假如我們想要新增一個post
首先必須要得到一個user，因為post必須屬於一個user
所以我們要先得到一個user
在那之前，我們還要先引入user（有夠麻煩）
實務上我們很少會需要所有的物件
都會有一些條件
這時我們可以利用filter來過濾條件
這樣就會回傳由user所創造的post
除了條件，如果id已知，我們也可以透過id的方式
來取得id為一的的post
除了條件篩選外，我們很常也需要依照不同欄位排序
例如依照時間排序
如果想要反排序
就可以得到你想要的內容
記得這邊後面的條件篩選、排序是可以疊加的
所以你可以寫出例如像下面的查詢：
除了get方法以外，因為那是取得物件本身
而物件自身是不能夠再排序的
會得到這樣的錯誤
今天就先到這邊吧！
參考資料","['檢視所有物件', '新增物件', '條件選取', '排序']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191867,ModernWeb,0,重新認識JavaScript系列,13,重新認識JavaScript:Day13DOMNode的建立、刪除與修改,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1513451488000000000,595,"
阿基米德：「給我一個支點，我就能移動地球。」(Give me a place to stand on, and I will move the Earth.)
在先前的介紹中，我們已經理解了 DOM Node 的類型、以及節點之間的查找與關係。
那麼在今天的介紹裡我們將繼續來說明，如何透過 DOM API 來建立新的節點、修改以及刪除節點。
透過 document.createElement() 可以建立一個新的元素：
在建立新的 div 元素 newDiv 後，這時候我們在瀏覽器上還看不到它，直到透過 appendChild()、insertBefore() 或 replaceChild() 等方法將新元素加入至指定的位置之後才會顯示。
新建立的 newDiv 我們也可以同時對它指定屬性，如：
之前曾介紹過，除了 HTML 元素節點外，還有「文字節點」，那麼 document.createTextNode() 就是用來建立文字節點的方法。
用法很簡單，直接在 document.createTextNode() 加入字串即可。
跟 createElement 一樣的是，新增的 TextNode 在被加入至某個節點前，我們是看不到它的。
在 DOM 規範的所有節點之中，DocumentFragment 算是最特殊的一種，它是一種沒有父層節點的「最小化文件物件」。 可以把它看作是一個輕量化的 Document，用如同標準文件一般的方式來保存「片段的文件結構」。
例如，一開始我們有一個 HTML 的容器元素：
接著我們透過 document.createDocumentFragment() 來建立 DocumentFragment：
透過操作 DocumentFragment 與直接操作 DOM 最關鍵的區別在於 DocumentFragment 不是真實的 DOM 結構，所以說 DocumentFragment 的變動並不會影響目前的網頁文件，也不會導致回流（reflow）或引起任何影響效能的情況發生。
換言之，當需要進行大量的 DOM 操作時，用 DocumentFragment 的效能會比直接操作 DOM 好很多。
如果你跟我一樣在多年前 誤入歧途 開始寫 JavaScript 的話，那你應該對 document.write() 這個方法不陌生。
document 物件要將某內容寫入網頁可以用 write() 方法，當瀏覽器讀取頁面，解析到 document.write() 的時候就會停下來，並且將內容輸出，且不只是單純的字串，也可以是 HTML 的標籤。
我們只要將對應的 HTML 字串傳入：
甚至，如果要新增一個 <script> 標籤，並指定外部 js 資源也是可以的，但要注意的是：
另外，需要特別注意的是，當網頁已經讀取完成後才執行 document.write()，則裡面的內容會完全覆蓋掉目前的網頁：
上面範例的 window.onload 表示網頁已載入完成，此時無論網頁原本有什麼內容，都會被 ""Hello world!"" 所覆蓋。
關於 window.onload 我們後續介紹「事件」的時候會再回來說明。
上面介紹了很多建立 DOM 節點的方法，除了最後的 document.write 之外，其他都只是單純建立節點，並未輸出至網頁上。
那麼，接下來要介紹的幾個方法，則說明要如何將剛剛建立好的 DOM 節點，置入到我們所指定的位置。

透過 appendChild() 方法，可以將指定的 childNode 節點，加入到 Node 父容器節點的末端：

insertBefore() 方法，則是將新節點 newNode 插入至指定的 refNode 節點的前面：

replaceChild() 方法，則是將原本的 oldChildNode 替換成指定的 newChildNode。

removeChild 方法，則是將指定的 childNode 子節點移除。
相信看完今天的分享，已經有能力可以透過 DOM 提供的 API 來進行節點的新增、修改以及刪除了。
大家也許會發現，無論要對網頁元素做出什麼樣的操作，我們都會基於某個節點出發對吧？
剛好呼應一開始阿基米德的名言：
「給我一個支點，我就能移動地球。」
那麼有了 DOM API 的支援後， JavaScript 也可以說：
「給我一個節點，我就能建立整個網頁世界。」",,"['DOM 節點的新增：', 'DOM 節點的修改與刪除']","['document.createElement(tagName)', 'document.createTextNode()', 'document.createDocumentFragment()', 'document.write()', 'NODE.appendChild(childNode)', 'NODE.insertBefore(newNode, refNode);', 'NODE.replaceChild(newChildNode, oldChildNode)', 'NODE.removeChild(childNode)']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191754,DataTechnology,0,MicrosoftBotFramework30天上手系列,10,Manageconversationflowwithdialogs,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1513450305000000000,503,"https://docs.microsoft.com/en-us/bot-framework/nodejs/bot-builder-nodejs-dialog-manage-conversation-flow
用dialogs 及 waterfalls等觀念，
定義好整套conversation腳本。
舉例 訂餐bot",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191835,ModernWeb,2,Go！從無到打造最佳行動網站系列,6,Day6全員耍廢中(中)Mobile設計,網襪工程師,https://ithelp.ithome.com.tw/users/20107302/ironman,1513449691000000000,525,"延續昨天行動版要素，其實不僅僅適用於行動版網頁的設計，比方說測試這件事情對在開發來說是非常重要的，如果你的網站中沒有那麼多的臭蟲，相對於臭蟲多的地方，你的網站更安全，更能獲得使用者的青睞！
Google在Progressive Web Apps的文件中提到
53% of users will abandon a site if it takes longer than 3 seconds to load! And once loaded, users expect them to be fast—no janky scrolling or slow-to-respond interfaces.
這邊提到了有幾個比較重要的概念，等等會提到的速度、效能，以及UX體驗，今天的主題大概會圍繞在這幾點下面。
Google也提到，如果你的網頁載入超過三秒你將會失去53%的使用者，意味著你必須讓你的網頁快！快！還是快！
你可以透過很多的方式，例如去壓縮你的CSS、JS、圖片甚至是HTML，但是這個壓縮畢竟有限，你必須要有更好的Solution，於是提出了Cache來解決，你不必每次都在等伺服器回應你檔案，比較不常在變更的CSS或是JS檔直接Cache在本機上，以露天網站為例
只要是第一次進入網站，會將所有的資源從伺服器中下載下來

(第一次進入網站)
在第二次進入網站的時候可以看到除了網頁是從伺服器中下載回來的以外，前面的jquery 及 vue、vuex是從記憶體快取讀出，css則是由硬碟快取取出來，不僅僅降低使用者對伺服器請求的減少在速度上面我們也可以看到有明顯的不同

(第二次進入網站)
接下來要知道你所有的等待時間是花在哪裡！
這一次用的是某知名拍賣網站的連線範例，從這張圖可以了解你花了多少時間在做什麼樣的事情

先來解釋一下每一個名稱所代表的意義
Connection Start
在不同的狀況會有許多的時間狀態，可能還有Proxy 之類的，但我們可以透過Timing Tab來了解是不是在哪個環節上出現了點問題，進而去提升網站的效能，手機不像桌上型電腦有著相對穩定的連線品質，我們更應該去計較，這些Performance的問題。
明天再來寫UX體驗吧！
今天實在是越來越冷，也越來越懶得動，可是每次去運動前好像都會有一種想發懶的感覺，不知道是不是因為冬天要冬眠的原因，老實說不運動都是在找藉口，每天都要飲料的我，今天買了一杯無糖綠茶，這樣罪惡感好想才不會那麼重，今天晚上去跑跑步好了，老實說我覺得沒有人帶著我做重訓都不會想要動，跑跑步是蠻紓壓的！
為什麼要培養運動習慣
開始培養運動習慣後，曾經實驗觀察，將休息時間量化與工作量量化後，在相等時間的休息與相等工作量的請況下，有做運動的那一週，相較沒有運動的那週，精神狀態更好、工作效率也有明顯的提升、在思緒上面更清楚，這只是跟大家分享我自己的狀況，每次去健身房幾乎都待個一個小時至兩個小時之間，給自己一個放鬆的時間
女生說，絲襪夏天不會熱，冬天不會冷
我會說，網襪春天很時尚，秋天很潮流
By 覺得黑絲也不錯的工程師",,,"['速度及效能', '減肥專欄', '每日一句']",['小知識'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191865,DevOps,1,Ops的轉職之路-Puppet從入門就放棄系列,6,Day6-Master-Agent架構-Agent安裝,shazi7804,https://ithelp.ithome.com.tw/users/20089211/ironman,1513446983000000000,502,"本系列文資料可參考以下：
繼 Day-5 寫完 Puppet Master / Server 之後，這篇要來跑 Agent 向 Server 更新。
目前主流大概是 RedHat / Debian 家族居多，所以這篇就來寫 Open Source 的 Ubuntu / CentOS OS 環境的安裝方式
在一開始先定義好 Puppet Master 和 Agent 運行的環境：
Master
Agent
Node.1 (Ubuntu)
Node.2 (CentOS)
Puppet agent 一樣要定義 Domain，測試可以先寫在 hosts
Puppet agent 必須準確校時。
安裝 Puppet agent
從官方 apt repository 取得 Puppet package。
修改 Puppet 的主要設定檔 puppet.conf
這邊和 master 不同之處在於：
Puppet agent 產生 certificate
這個動作會嘗試將 certificate 和 Master 進行 signin。
在 Puppet master signin ubuntu.puppet.com 這個 node，否則會無法取得 catalog。
回到 Agent 再跑一次 puppet agent -t 來測試和 master 的溝通
出現 Applying configuration version 代表能成功要到 catalog。
啟動 puppet agent daemon 常駐。
步驟和 Ubuntu 安裝大致上相同，但是有幾個設定必須修改
step.1 中 hosts 修改為
step.3 改為 yum repository 取得 Puppet package。
step.4 設定的 certname 改為自己的 Domain centos.puppet.com。
step.6 在這邊 Puppet Master 則要 sign in centos.puppet.com。
從這篇我們安裝了兩台 Node Agent，這兩台 Node 每 2h 會向 Puppet Master 更新設定，但這邊有個小小的陷阱 ... 嘿嘿 !!
之後再回來談這個 陷阱 該怎麼處理。",,"['LAB 環境', '安裝 (Ubuntu)', '安裝 (CentOS)', '回顧']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191719,ModernWeb,0,從零開始的網頁設計系列,2,Day02:新手村，遇到村長了_基本html架構,樂樂,https://ithelp.ithome.com.tw/users/20104423/ironman,1513446218000000000,540,"每一天都會配合一個實例去做簡單的教學
好，那html到底是什麼？ 我想要是我開始落落長的說明他大家就會想把網頁關掉了吧
簡單地講，我們要讓預覽器看得懂我們在做什麼就需要他（太含糊了吧
讓我們還看看維基百科好了
那我們知道通常在寫網站不外乎基本的就是  HTML5 CSS3 JavaScript 這三位大大了對吧
這時就頭痛了，我的媽啊，我寫個網站居然要一次學三個東西？！
既然都說是從零了，當然我們會一步步去搭一個網站啦！從最簡單只有html搭配css三的網站開始慢慢到增加js
那我簡單做的說明這三者的關係
如果我們用房子還形容的話
那我們今天就先來建一個擁有基本html架構的網站吧！
1.建立index.html
檔案 > 新增檔案
這邊的資料夾是我事先建立好的

檔案 > 儲存
將檔案命名為 index.html

那也可以直接從上圖中我框起來的部分去做新增檔案或是新增資料夾的動作
2.開始撰寫html
這邊的話我有裝一個html的套件方便我寫標籤
而大家可以去搜尋看看關於Emmet的用法，必裝好用的套件
如果你是使用Sublime Text或者是Atom的話 要使用Emmet的話則需要另外去安裝Emmet的套件
HTML Snippets
那這邊我們就先下基本的html標籤
先打html後下方會出現很多的補字
我這邊是選html:5  這是內建的Emmet套件

按下Enter後會出現
我們先略過這一段
<!DOCTYPE html>
一定會在html檔案的的第一行，在<html>標籤前面，但他不是html標籤，他是瀏覽器要使用哪個版本的html進行編寫的指令
<html> </html>
包裹我們整個網頁的重要標籤，有始起標籤也有結束的標籤
<head> </head>
包在 html標籤裡，因為他都放在最上方所以叫head 標籤之間就可以用來放很多網頁資訊，比如給瀏覽器看得或者是導入檔案，最常見的不外乎就是<link> <style> <script> <meta>
<title></title>是我們網站的名字，也就是你在標籤頁上看到的網站名稱
<body> </body>
都直接叫身體了，就是我們網站想要顯示的內容都會放在body裡
3.不免俗的來一下 Hello World!
在<body></body> 直接打上 Hello World!

好，今天就先到這邊，明天就會開始分享其他的常用標籤！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191859,自我挑戰組,0,再戰軟體工程系列,2,『DoD』--論定義完成的重要性,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1513445578000000000,506,"終於，我們開始跑scrum了。
在跑scrum的過程中，免不了要把需求寫成user story，再在每個story中定義什麼叫做『完成』。PO每個sprint都會明確告訴我們說：『這個需求，我的驗收條件就是要看到以下三件事情被做到。』一旦明確定義了，那麼等到sprint結束，上面三點只要有任何一點沒做到，就叫做未完成故事，這個sprint也就變成未完成sprint了。記得嗎？敏捷世界裡有這麼一句話：
Done is better than perfect.

因為我們想要用很短的時間『完成』一些事，而不是花很多時間做一件很完美的事，所以，明白告訴團隊成員什麼叫做『完成』就變得異常重要。否則，你說你的，我做我的，那不就跟我現在的工作一樣了嗎？反正做不完大不了延期交貨嚕...。萬萬不可。我們不就是為了不想再走老路才開始跑敏捷流程的嗎？
我們來看看大師的看法先。在Essential Scrum一書中，作者Kenneth S. Rubin就舉了一個好例子。他說，當他問兒子是否做完全部作業，兒子總是很有自信地回答：『是的。』然而等他參加家長會親自老師時，老師卻說：『不完全是。』這就怪了，同樣一份作業，為什麼老書的回答跟兒子不同，莫非兒子說謊騙老爸？
幸好作者沒有像某些父母一樣，不由分說地認為孩子說謊而痛打一頓。他向兒子詳細詢問後才發現事實是：兒子做完了『他打算做的部分』，換言之，其他部分他不認為是他應該做的。因此，他跟兒子就此約定：『以後我們說把功課做完時，意思是做到老師要求我們做的部分。』為什麼？原因很簡單。在這場作業的交易中，老師是客戶，是需求提出者。兒子是執行者，是scrum團隊中的member。這份作業到底做完了沒，怎樣也該是客戶說了算吧？
簡單說，沒有做到客戶（或是PO）要求的事，就不算完成。
有讀過我一些文章的朋友，也許已經猜到我會把風向帶到這裡來了。沒錯，我就是這麼好猜！試想，今天這個使用者需求，標題是：『身為停車場系統使用者，我希望客戶用100元紙鈔或是任何台幣的硬幣都可以繳費。』這時，假設PO把DoD定義成：
今天RD拿到這份工作，按照以前的習慣，就是直接動手開始敲程式碼，編譯，上傳，下班。然後說自己『做完了』，就像剛剛那個作者的兒子一樣。身為PO，你認為他的工作做完了嗎？完全還沒。為什麼？因為敲完的程式碼不是我要的產品，正確的功能才是。寫作業的人要保證作業內容是正確的，或是至少在他能力能檢查出來的範圍內已經找不出錯誤了，才叫做完成作業，因為這是老師（PO）要求的，工程師工作時也是啊！
保證產品功能正常是製造此功能的人的責任，你必須在能力所及範圍內再也驗測不出錯誤了，這才能回頭跟你的PO説：『我做完了。』
Well, an easy guess，當然不是。我們說過啦！做到再也檢查不出任何錯誤是RD的責任，如果今天老闆跑來問你進度，你回答：『我都做完了，現在在測試環境等QA測試。』你覺得老闆會滿意你的工作效率然後跑去問QA，還是對你的信用打折扣，認為你把份內工作推給別人了還敢講話這麼大聲。
這很難講，這樣看你老闆有沒有一顆敏捷的心。
也許這時候你會疑惑，『我把驗冊都測完了，QA測什麼？』嗯...這是一個又很難回答又很好回答的問題。這樣吧，你看看Scrum怎麼定義Scrum團隊：PO、SM、Member。沒有看到QA吧？對了。真要講下去也許要講很久，也超出本篇範圍，我們再找時間專門聊這個話題吧。你可以先去拜讀邰曉梅老師的大作：『海盜派測試分析』。
Done is better than perfect。你仔細回想，其實會發現，scrum流程裡面的很多活動與原則，都圍繞在這一句話上，這就是我們為什麼要把流程切成一個一個sprint，為什麼時間到就要Demo與回顧，為什麼每天都要站立會議...。其實都是為了先把時間切割，然後在固定的時間內，『完成』預計要做的事。
Definition of Done，多麼重要，不是嗎？",,,"['大師怎麼看', '驗測是QA的事，還是RD的事？', '『在等測試』，算是完成任務嗎？']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191862,ModernWeb,0,挑戰CSS30天系列,13,day13_template參考,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1513445400000000000,473,"今天比較忙
就先簡單分享在網路上找的一些模板給大家參考
這對往後在開發網站前端很有幫助
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191861,自我挑戰組,0,30天的切版日記系列,13,Day13:Git&Github學習筆記（三）,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1513444081000000000,498,"如果在 master 跟 branch 同時被更新同行資料的情況下，merge會跳出提醒說需要處理衝突的部分，無法自動合併成功。
這時候去查看有衝突的資料，確認資料的保留或刪減後儲存，再重新增加到工作目錄中(git add .)，接著再 commit 就會合併成功了。
在多個commit中可以紀錄自己現在commit 的是什麼版本， git tag 用標籤來瀏覽想看的版本
git tag 標籤名 增加標籤
git tag 可查詢標籤
git tag -n 可查詢詳細標籤
git checkout 標籤名稱切換到標籤的commit
如果想寫標註內容可以寫git tag -am '標註內容'
刪除標籤 git tag -d
在工作做到一半的時候儲存工作目錄
git stash list 瀏覽 git stash列表
可以看到 commit 紀錄
git stash pop 還原暫存
也可以把暫存紀錄帶到其他的branch
git stash drop 清除最新暫存
git stash clear 清除全部暫存
git push origin 分支名稱 push分支
origin 是預設的遠端主機名稱也可以改名字
git remote rename 原來的名稱 要修改的名稱
以上是看著六角學院-掌握 Git & Github 程式時光機 這個課程學的。",,"['git merge 解決衝突', 'git tag 標籤', 'git stash 暫時儲存當前目錄', '分支推送到遠端repository']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191803,ModernWeb,0,重新學習網頁設計系列,13,DAY13.JavaScriptURLAPI,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1513442941000000000,503,"URL物件是個看起來很簡單、冷門的物件
但事實上它的用途很廣，例如解析、建構、編碼URL等工作都由它一手包辦
首先我們先來看看幾個基本用途
靜態方法createObjectURL
本範例資料引用至MDN
用於建立一個帶有URL的DOMString以代表參數中所傳入的物件. 該URL的生命週期與創造它的window中的 document一致. 這個新的物件URL 代表了所指定的File物件或是Blob物件
建構式
objectURL = URL.createObjectURL(blob)
注意事項
每次呼叫 createObjectURL() 都會產生一個新的URL, 不論是否曾以同一物件產生過. 當你不再需要它們的時候必須對每一個都呼叫 URL.revokeObjectURL() 來釋放它們. 瀏覽器會在document被unload時自動釋放它們; 然而, 為了最佳化效能與記憶體用量, 當有安全的時機請務必手動釋放它們.",['DAY 13. JavaScript URL API'],"['範例一', '範例二(searchParams)', '範例三']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191852,ModernWeb,0,認識Chrome開發者工具系列,13,控制台面版2-結合元素面版,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1513440741000000000,492,"昨天我們簡單的介紹了控制台面版的讀取-求值-輸出循環功能，今天我們要一起要來看它提供的一些方便的 API，以及如何透過這些 API 與元素面版一起使用。
因為我們今天的介紹的功能大部份跟元素面版有關，所以請直接打開面版，如果你的控制台抽屜沒有打開的話，可以用 ESC 鍵打開。
而我們使用的範例網站是 iT幫邦忙的首頁
這個指令讓你可以再一次執行上一次執行過的指令。假設剛剛執行過一個指令
使用 $_ 後，我們就會再一次得到 12 這個結果，如下圖：

圖 1: $_ 可以再執行一次上一次的指令**
這個指令讓你可以得到你曾經在元素面版中拜訪過的元素的 DOM，什麼意思呢？就是當你使用滑鼠或是鍵盤在元素面版的 DOM 樹中移動時，開發者工具會記住最接近你的五次操作的元素，而這些 DOM 元素可以透過 $0 - $4 來在控制台中存取，我們來看個例子
在 iT幫邦忙首頁的元素面版 DOM 樹中，我們可以先移動到 body 然後移到有一個 class 名稱叫做 header 的 div，最後再移動到一個 footer 元素。
這時候如果我們用 $0, $1, $3 控制台中，就會得到這幾個 DOM 元素及它下們的子孫元素。如果你用滑鼠移動到這元素上，開發者工具會顯示它在頁面的位置，如果你用滑鼠右鍵打開更多動作選單，並選擇 Reveal in Elements panel 它就會帶你回到元素面版裡 DOM 樹中這個被選擇元素的位置。

圖 2: $0, $1 $2 顯示拜訪過的元素**
如果有用過 jQuery 的朋友，應該對種選擇方式不漠生，但這個 API 跟 jQuery 的 $() 是有點差異的。在這裡它背後其實是呼叫 document.querySelector() 這個 DOM API ，所以如果我們用 $('div') 來選擇頁面上的 div 元素，如果這個頁面上有多個 div 元素，它就只會回傳第一個。但因為iT幫邦忙的頁面有用到 jQuery ，所以 $ 這個符號已經被註冊過了，所以我們在開始使用前要重新把它指回去
在指定完後，我們就可以用 $ 來做元素的查找：
上面查詢的結果如下圖

圖 3: 使用 $(選取器)**
這個與我們剛剛介紹的 $() API 很像，只是它背後是呼叫 document.querySelectorAll() ，所以它是可以一次選取多個元素的。以剛剛的 $(div) 例子，改成 $$(div) 我們就會得到所有的 div 元素。我再一起來看一個例子：

圖 4: 印出所有頁面上連結元素的 href**
有時候當你選取了某個元素後，你想要拷貝它就可以用這個指令，並且可以用快捷鍵 (Mac Cmd+V 或 Windows Ctrl+V) 來貼到像是文字編輯器等工具裡面。
清除所有在控制台中的資訊
在結束之前還要再提到一個功能，我偶爾會用到。這個功能叫做保存頁面 log 資訊 Preserve log 。它藏在控制台面版的設定裡，你可以透過面版右上角的來打開它。打開下拉選單後，請選擇勾選 Preserve log 選項，之後當你在不同頁面做瀏覽時，它會幫你保存所有的 log 檔案。

圖 5: 使用 Preserve log 功能
我們今天介紹了幾個常見及常用的 API，而且這些 API 大部份是可以與元素面版做結合使用的。透過這些 API 你可以更快速的找到你想要操作的 DOM 元素，然後直接在控制台面版中編輯及改變它，要記得你得到的這些元素的操作會直接反應在頁面上。配合我們前幾天介紹的元素面版，你現在已經有完整的元素及樣式操作的工具，在不離開瀏覽器的情況下，你也可以操作及改變頁面上許多介面的畫面及結構。有覺得很強大嗎XD，好，不說廢話了。今天所介紹的這些控制台面版 API 是我自己本身比較常用的，如果你想要了解更多，你可以到官網的文件上去看。接下來我們要一起討論的是行動裝置工具欄，那就明天見啦 :)",,"['常見 API', '小結']",,"['$_', '$0 - $4', '$(選取器)', '$$(選取器)', 'copy', 'clear']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191851,ModernWeb,0,ZerotoherowithReact.js系列,10,【Day10React】透過番茄計時器實作理解ReactStateandLifecycle,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1513440464000000000,527,"之前我修了一堂 University of California, San Diego 開的線上課程 Learning How to Learn: Powerful mental tools to help you master tough subjects。這門課程有講解到 番茄鐘工作法，分析大腦的運作以及講解人類專注力的概念，教導我們如何正確地運用時間，達到最佳的工作效率。
「番茄鐘工作法」意指 25 分鐘內，只專注在目前正在進行的事項，並用 5 分鐘時間專心休息，並再次以 25 分鐘為單位，專注於一件事情的方法。
前言很長ＸＤＤ
所以！！！！今天我要用 React 實作番茄計時器 (Pomodoro Timer)。以後我就可以用自己做的番茄鐘來規劃自己的時間運用（？）
今日文章內容：
透過撰寫 Pomodoro Timer App 我們可以學到以下幾項 ReactJS 的概念：
好～馬上進入今天的主題拉！
在建置新的專案之後，一樣要依循 【Day8 React】從拆解電子名片學習 React Components #Part2裡的步驟
install 完，我們就安裝好 babel 的運作環境，現在可以告訴 babel，請它監看我們的行為：
應該可以看到
表示 babel 有在監看我們應用程式的一舉一動。
在 Pomodoro 計時器裡，有一個 input 和一個 output
我在 app/index.js 裡先建立 PomodoroTimer component
我可以在 <PomodoroTimer /> 設定兩個 props 分別為 workingTime 以及 restingTime
接著在 PomodoroTimer child component 裡面，透過 this.props 取得我們要的內容
透過 props 我們可以很彈性地更改內容，假設我今天想縮短每個工作區間，改成工作 20 分鐘，休息 10 分鐘，我可以直接在最後渲染 DOM 的 <PomodoroTimer /> 改值。
在取得工作時間與休息時間後，我想要把這兩個數字相加，放在 total time 裡面。
最簡單的做法是直接把兩個 props 相加，在 JSX 語法中的大括號({})中可以進行運算
但為求更模組化的 coding style，我將另外寫一個總計時間的 totalTime function，所以我們可以利用
從 totalTime() 裡面取得時間的加總，那麼在這個 function 我們就要進行兩個數字的運算
目前頁面長這樣，前三個數字都是 render 出來的數值

認識 State and Lifecycle 的原理是我們學習 React 的重點之一。
props 是我們傳進 component 的資訊，它是不會改變的；而 state 則是來自 componet，是隨著時間不段變動的
我們可以 props 想成是出生地點，在彰化 : )
這個出生地點一旦定下來之後就不會改變
而 state 就像是我的年齡，它是隨著時間而變動的。
我們先建立一個 constructor()，constructor 會透過 super(props) 呼叫父類別的 constructor，我們要把初始化的 state 定義在這個 constructor 裡。像我要設定時間說 0 秒開始計算可以把 {timeElapsed = 0} 指定到 this.state 上。
而在要渲染的部分寫上
現在我們可以看到 time elapsed 變成我們設定的 0

計時器就是在頁面上所有東西都載入完畢的那一刻，開始計算時間，我們該如何製作這個功能？我們的程式如何知道所有資訊都載入完成了呢？
當程式一開始先進到 constructor，接著去 totalTime() 裡面計算時間總數，最後進到 render() 裡面，把要呈現的內容渲染到 DOM 裡面。這個過程超級爆炸快速，當你重新載入頁面，是不是也差不多直接看到 DOM 的結果。
我們現在將這整個程式經過的流程放慢一萬倍，監看程式渲染 DOM 的過程，我們可以看到其實是有一套 lifecycle 在運行的
官方文件：
Mounting
These methods are called when an instance of a component is being created and inserted into the DOM:
我們現在就是要用 componentDidMount( ) 確認東西都準備齊全了，那程式就會開始計時。
Updating
An update can be caused by changes to props or state. These methods are called when a component is being re-rendered:
Unmounting
This method is called when a component is being removed from the DOM:
unmounting 表示再次確認，需要 render 的素材都準備齊全，所以在我們應用程式的最後需要用到這個 function
大致看過文件之後，我還是不太懂某些 function 的用法，不如就直接用範例來了解吧！
我們先新增兩個 function
透過 this.elapseTime.bind(this)  去呼叫並執行 elapseTime() 這個 function
現在我先用 console.log 看一下我得到的開始時間與現在時間，可以看到 DOM 每秒就更新一次，因為我剛剛 setInterval(1000)，一千毫秒就是一秒。currentTime 隨著秒數而更新；開始時間則是頁面載入的時間，現在我們取得這兩個數值之後，將它們相減就可以得到已經經過的秒數了。

接著來計算 elapseTime
我們來看看 console.log 的結果，發現會有幾毫秒的 lag，這些延遲可能會在呼叫 API 或是計算屬性等等之間發生，如果要真的計算到很精細，需要再做很複雜的計算。這邊我就簡化使用 Math.floor 來取得最大的整數，畢竟我需要的只有秒數，基本上這已經趨近 99.99% 的精確度了ＸＤ（就讓我們忽略那幾毫秒的誤差吧⋯）

OK，現在我取得到秒數了！
接下來，我們要把剛剛在 constructor 裡面寫死的 this.state = {timeElapsed: 0} 讓它隨著時間更新
在 elapseTime() 裡面更新 state
用 if 去判斷 timeElapsed 是否超過 25 分鐘，而 timeElapsed 的單位是秒數，所以要記得把 25  分鐘 * 60，轉換成秒數。
在判斷式裡面，也要加上
讓每一次頁面刷新，原先的記錄也要清除。
完成了一個很陽春的番茄計時器！！
今天做的專案可以看這邊： Github",,[''],"['props 的計算', 'State and Lifecycle ', 'Lifecycle', '時間到的 alert situation']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191850,DevOps,0,用30天來介紹和使用Docker系列,13,Day13：如何使用DockerRestfulAPI,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1513440406000000000,544,"前幾天在介紹如何使用 Docker 的 command line 在操作 Docker Container。Docker 另外也有提供 Restful API 的功能方便我們去使用，這樣的好處是不管我們是寫任何的程式語言就可以方便的透過 Restful API 去執行 Docker Container。
像是如果要在我們的測試程式中建立一個 Data Base 測試環境，就可以透過呼叫 Docker 的 Restful API，建立 Data Base 的 Container，等到測試執行完成之後就呼叫 Restful API 把 Data Base 的 Container 刪除掉。這也就是使用 Docker 在執行建構測試環境的方便性，也就不用另外的去架設和管理 Data Base 的 Service 測試環境，這樣也就可以提高工作的效率。
今天就介紹如何的來使用 Docker Restful API 的功能
一.使用 Docker Restful API 之前需要設定 Docker 步驟如下：
設定如下
主要是要把 tcp 的連線 port 打開，這樣外面的 host 才能連到此 Host 的 docker service，但開了 2375 的 port 之後要注意安全性的問題。
二. 操作 Docker 提供的Restful API 功能
以下操作 Restful API 的方式是透過 Linux 的 curl 指令以及透過 Web Browser。另外也可以使用 postman。
這裡是要使用Restful API pull nginx 的 Docker Image
執行畫面如下

執行畫面如下

這個 Restful API 這主要的設定是要把 Container 的 80 port mapping 到實體 host的8080 port，另外 container 的 name 為 nginx_container
執行畫面如下

nginx_container 為 Container Name
執行畫面如下

執行畫面如下

6.	刪除 Docker Container 的 Restful API 如下：
Docker 提供的 Restful API 還有很多沒有被介紹到，如果有興趣的話可以參考 Docker 官方網站所提供的說明文件，網址如下：
https://docs.docker.com/engine/api/v1.24/#31-containers",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191842,SoftwareDevelopment,2,來做個網路瀏覽器吧！Let'sbuildawebbrowser!系列,6,瀏覽器引擎處理CSS的簡易版（一）,微中子,https://ithelp.ithome.com.tw/users/20103745/ironman,1513439522000000000,635,"
今天繼續使用 robinson 這個「玩具」來進行講解，第二篇文章講到解析，目前我們已經會處理 DOM 和 HTML 了，接下來就是處理 CSS 的部分。在開始之前，不知道你對 CSS 了解多少，平常有在開發網頁的話應該還算是懂吧，不過我想並沒有真正完全去理解它，因為其實只是開發網頁的話，也不需要懂。
但是既然我們現在要處理 CSS 的部分，有完整的了解當然最好，可以參考 Mozilla 文件 或是 W3C 文件。
處理 CSS 又分兩個步驟，有 Parser 和 style，前者是解析原始 CSS，後者則是讓 DOM 有 style。
robinson 這個專案中，CSS 拆成兩個模組，在 robinson/src/css.rs 和 robinson/src/style.rs。有一點點小長了，因為 CSS 本來就蠻複雜的。對照一下，Servo 的 CSS 部分在 servo/components/style，點進去就會發現它很複雜。CSS 部分已經被拿去在 Firefox 上使用，算是滿完整的，正式的名稱叫做 Stylo，現在只是稍微提一下，之後會再細講。
今天先針對 parser 來解說， 也就是 css.rs 的部分。（解說都是在程式碼區塊的上方）
定義 css 的規則，所以是規則的向量
一條一條的規則，包含選擇子和宣告
這邊的 SimpleSelector 只支援單一邏輯，事實上應該還有組合子邏輯，只是在這邊的範例碼中並沒有實現。
舉例來說多重選擇就是像 div > p 或 div + p 這樣。
tag 就是 div 、 p 、 h1 之類的， id 則是 # 開頭，而 class 就是 . 開頭
選擇器選到東西之後，會看裡面的內容，也就是宣告了。
例如 padding: 10px，padding 是名稱，10px 則是他的值。
而宣告的值，單位項目都不一樣，必須要有東西來讀他們。例如長度就有可能是 px 、 em，顏色可以用 white 或是 #000 來表示。這邊就是定義他們。
簡單的 CSS 選擇器，從左到右讀進去，然後存進 SimpleSelector，這邊並不嚴謹，很多錯誤的輸入會被當成正確的，就像是 *ABC*，但事實上 * 當然不會接在尾巴。一般正式的瀏覽器在解析碰到錯誤的時候，會直接忽視那個錯誤的 CSS，一些奇怪的輸入也會被忽視。所以像是輸入 padding: red 這種完全錯誤的，瀏覽器就不會把他列入 CSS tree 中。
Parser 的細節部分跟昨天的 HTML 都非常接近，像是 parse_declarations 就是抓兩個大括弧中的內容，然後再針對內容有更近一步的拆解，這部分看原始碼就非常好理解了，就不在一一說明。
最後比較重要的部分是，權重分配。同一個 DOM 可能同時有很多 CSS 定義它，那究竟要選擇哪個當作最後呈現的，這時候就看他們的重要程度啦。一般而言 id > class > tag，所以就可以定義，比方說 id 加權 3，tag 只有加權 1 之類的，最後哪個 CSS 針對這個 DOM 數值最高，就使用它。
希望對大家有幫助，大家明天見！
關於作者
劉安齊，軟體工程師，熱愛寫程式，更喜歡推廣程式讓更多人學會",,['Parser'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191844,DevOps,0,Openstack學習與介紹系列,1,DAY1介紹為何要使用Openstack,帥哥,https://ithelp.ithome.com.tw/users/20103615/ironman,1513437442000000000,513,"原本去年就想參加看看這類型的活動，但是一不小心就錯過了活動報名時間。所以今年捲土重來。
另外
我回多加求證我所說的東西，但不保證100%的正確。我所說的、我所打的全部是建立在我的認知上。
所以如果有錯誤，還請各外大神糾正，幫助我更加了解Openstack。
謝謝 !!!","['為甚麼要使用Openstack呢?', '進行的方式']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191845,自我挑戰組,0,Verilog從放棄到有趣系列,5,[Day5]if．．else&case,Sheng,https://ithelp.ithome.com.tw/users/20107543/ironman,1513437378000000000,511,"今天開始的幾天要來跟大家分享語法，那今天要講的是比較偏向於判斷式的使用，首先先來介紹:
if… else…
，使用方式跟C語言很像，舉個例子：
always@(posedge clk)begin
if(reset)begin
end
else if(判斷條件 1)begin
敘述1
end
else if(判斷條件 2)begin
敘述2
end
.
.
.
.
.
.
else begin
敘述n
end
end
if else的特性就是使用時會根據判斷式的先後順序有優先權的不同，以上面的例子就是reset >判斷條件1>判斷條件2>．．．．>判斷條件n，利用圖解的方式讓大家知道這種判斷式會合成出怎麼樣的電路，

如上圖所示，如果寫if else判斷式的話，合成出來的電路大概長這樣，會產生有優先權關係的數個二對一的多工器去產生你要的電路，也因為這樣，所以當判斷式越多的時候，所造成的路徑也會越長，這樣可能造成合成出來的電路因為路徑在長造成timing可能就會violation，這便大約提一下，timing，假設說妳的clock rate是100MHz，代表一個cycle是10ns，意味著暫存器跟暫存器之間的邏輯運算要在10ns內完成動作，不然就會因為時間內做不完邏輯運算而導致合成錯誤．
再來要介紹的是：
case
來看一下例子：
always@(posedge clk)begin
if(reset)begin
counter <= 0;
end
else begin
case(狀態選擇)
選擇一:
敘述一
選擇二:
敘述二
選擇三:
敘述三
.
.
.
.
選擇n:
敘述n
default:
敘述x
endcase
end
end
用case去寫判斷式時就會產生多對一的多工器，如下圖．

如果當你的選擇條件是有辦法用case去寫的話，通常就會用case去寫，讓path越短越好，path，timing最後幾個章節如果有空的話會再多介紹．
今天這樣搭配電路圖來了解verilog的語法是不是比較易懂呢，今天就先介紹到這裡，往後的教學大多也會畫圖來跟大家分享喔．",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191843,自我挑戰組,0,網頁學習日誌系列,13,jquery：票價顯示,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1513433242000000000,508,"想法：
年底要到台北跟三五好友去跨年，想要搭火車去台北，車票多少錢?
不用按鈕，直接輸入「數量」可立即看到總金額 (數量*票價)
$(this)  : 觸發事件的當前元素
closest() ： 往上查找 只要找到符合條件的 就停止尋找
val()：獲取數值
find() ： 搜索元素
其他：data 為html5新增的屬性，可以暫存數值或是程式來存取資料
W3C data屬性：https://www.w3schools.com/tags/att_global_data.asp
因為不要按鈕，所以要想輸入就得到結果，就是監聽「鍵盤事件」：
「keypress」、「keydown」、「keyup」
這次案例因為輸入鍵盤要即時顯示價錢，所以適用「keyup」輸入即顯示。
在這監聽事件要做到下列事情：
獲取車票單價(data-price)：取得數值
得到input項目中輸入的數量
根據單價乘以數量得到總價，並顯示

但是滑鼠去點擊增加則沒反應，所以要再增加滑鼠事件。

新增click監控事件，內容與keyup相同
codepen網址：https://codepen.io/yuski/pen/eymYRM
","['程式需求：', '重點語法：']","['結果如圖：', '結果如下：']","['html：', 'jquery：']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191841,ModernWeb,0,JavaScript基礎二三事系列,13,Day13　物件與物件實體,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1513431471000000000,520,"今天我們來看物件實體語法object literals
JS可以透過new Object()來建立物件，但開發時相對少見這種寫法。
這是因為JS還有另一種更快建立物件的方法，就是物件實體語法object literals。
什麼是物件實體語法呢?
來看看以下程式碼：
用一對大括號{}快速建立物件，大家最常用的就是這種寫法(我也是)。
這種寫法的好處在於可以同時建立屬性和方法：
使用物件實體語法和這種寫法
兩者其實是一樣的
物件實體語法的好處在於可以快速、直觀的建立物件、屬性和方法，早期沒有物件實體語法，使用[]計算取用成員運算子來建立物件很常見，而現在最常見的方式則是使用物件實體語法{}。
另外變數[屬性]這種寫法並非被淘汰掉，有些地方還是看的到，例如我上次見到是在學node.js的時候，這種方式的優點是可以使用變數的方式來替換操作，還是挺有妙用的。
當有函式需要傳參數進去時，也是可以使用物件實體語法：

除了today(dinner)這種呼叫，函式傳值也可以這樣：

結果是一樣的，這種傳物件的方式其實也很常常見到。
　
　
　
　
小結
今天複習了建立物件最快速的物件實體語法object literals，也知悉函式傳值可以直接用用物件實體語法。
至於筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分4-31",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191840,自我挑戰組,2,GAME30天系列,6,QuasarFrameworkintro.(3/3,我是一支小小小小鳥,https://ithelp.ithome.com.tw/users/20107379/ironman,1513430097000000000,690,"前端開發組件化時代, 我們要學會快速使用組件
不論是什麼樣的程式，模組化在開發上都是很重要的一個概念，前端工程也不例外，我們都會希望能夠將 Web 開發過程中的 JS, CSS, HTML 封裝起來，以便後續重複使用，而過程中就會出現一些缺點：
js, css, html 三者的資源在最一般的網頁開發上基本上是分開管理，你如果想用別人的 library，可能還需要先載入對方需要的 JQuery，include 該套件需要的 css，最後才能在你的 HTML 內加入。
Scope 問題：因為別人設定的 CSS class name 衝突而導致 Style 變動的情況。
相容性：各個 Framework 間的 components 基本上無法共用
關於前兩點，透過 Webpack 與 CSS Modules 都可以找到相對應的解法，而第三點相信透過許多 hack 也是可以解決。
參考資料 TechBridge 技術共筆部落格
這次範例使用 Quasar cli 中 PWA 的模板
檔案的結構目錄是這樣

直接修改Hello.vue, 使用一個button componet
看看結果

若想直接一次import全部的componets可以在main.js裡這麼做, 但是非常不建議這樣做, 因為會使你的檔案肥大, 充滿用不到的廢code
Quasar 內建幾個自定義的 Vue Directives 直接對dom底層做操作, 用法很簡單和componets差不多
此時點擊div就會出現ripple特效, 為什麼是 v- 開頭的前綴, 而不是 q- 呢？ 這是因為 Vue Directives 有規定只接受 v-開頭的 propoety, Quasar 的基本使用就介紹到這, 其實用法都很簡單, 而且大部份文件都寫得很清楚, 之後如果有遇到比較特別需要注意的 , 會再特別寫出來
附上 Quasar Doc 連結","['為什麼我們需要componets?', 'Quasar componets', 'Quasar Directives']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191838,自我挑戰組,1,蚵蚵攻城記系列,6,[Day06]水平置中(2/2)+inlineblock,azer19890427,https://ithelp.ithome.com.tw/users/20107340/ironman,1513428621000000000,513,"昨天用了margin: auto 0;
來達到水平置中，
今天來試試看用text-align: center;
來水平置中。
今天不找按鈕了。
text-align: center;主要用於inline elements，

只要再父元素加上 text-align: center;就可以達到置中的效果了。

而在父元素下的 inline element都會有水平置中的效果。

display: inline block
同時具有inline elements及block elements的特性。
不會佔據一整行，也可以設定width和height。
用昨天的例子來試試看吧！

都加上
width: 100px;
height: 50px;
看看結果：

很明顯可以看到inline block同時具有inline elements及block elements的特性。
夯不啷噹也寫了六天
如果有甚麼認知錯誤寫錯的地方
還是很希望前輩能夠指點迷津",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191836,Security,0,資安的學習心得及分享系列,13,DAY13蠕蟲（Worm）,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1513428381000000000,501,"什麼是蠕蟲 (Worm) ?	蠕蟲就像電腦病毒一樣，具有自我複製的程式，但也不完全相同，因為蠕蟲他不會附著在程式上。

(蠕蟲會在電腦程式中進行複製)
舉例來說，「蠕蟲 (Worm)」就是我們指的『蚯蚓』，他的名詞是有意義的，蚯蚓的習性就是在土地較軟的地方來鑽洞，雖然泥土平時晴天看不出問題，但在下雨的時候就會出現災情。
換句話來說蠕蟲也是同樣的道理，蠕蟲平時就是一直尋找使用者的作業系統和一些程式上漏洞來鑽取，所以久而久之你的電腦就會出現問題。
電腦蠕蟲也會對網路造成傷害，他與我們前面提到的DDos攻擊《分散式阻斷服務攻擊》有點類似，但它並不是DDos攻擊 。 因為DDos只是執行垃圾程式碼來發動DDos攻擊。目的是要造成使用者不能正常的使用，讓使用者不能正常上網，執行效率下降而以。相較之下，電腦如果被蠕蟲入侵，可能就會損壞一些電腦檔案，如果上網就可能會出現降頻寬的問題。
 
(蠕蟲也會藉由垃圾郵件、漏洞等管道來傳播)
網路蠕蟲分成兩大類(引用百科全書)
•	一種是面對大規模電腦使用網路發動拒絕服務的電腦蠕蟲，雖說會綁架電腦，但使用者可能還可以正常使用，只是會被占用一部份運算、連網能力。
•	另一種是針對個人用戶的以執行大量垃圾程式碼的電腦蠕蟲。電腦蠕蟲多不具有跨平台性，但是在其他平台下，可能會出現其平台特有的非跨平台性的平台版本。第一個被廣泛注意的電腦蠕蟲名為：「莫里斯蠕蟲」，由羅伯特·泰潘·莫里斯編寫，於1988年11月2日釋出第一個版本。這個電腦蠕蟲間接和直接地造成了近1億美元的損失。這個電腦蠕蟲釋出之後，引起了各界對電腦蠕蟲的廣泛關注。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191825,Security,0,資訊系統安全與CISSP的簡單應用系列,2,[Day02]安全與風險管理(SecurityGovernance),wisdomryanlin,https://ithelp.ithome.com.tw/users/20107753/ironman,1513427687000000000,504,"下面會講到很多需求 (Requirements)，記下來的目的是提醒自己應用到系統中喔。關於流程圖，安總我比較喜歡瀑布式的流程，也就是第一步、第二步、第三步、...，一步一步要做什麼，原因是，人的頭腦是單線式執行的動物；再來就是一步一步比較好執行，這是心理層面。好，底下的流程圖，雖然有「循環 (Cycle)」的性質，但我一律畫成線型方便執行。(謝謝，不要鞭我，或是鞭小力一點.. QAQ)
通常我們在軟體需求規格中，會加入一個 Security Requirements 的區塊，藉此在設計階段，就將安全性的需求給考慮進來。我想 CIA 三人幫是很基本的元素，分別是：機密性 (Confidentiality)、整全性 (Integrity)、可用性 (Availability)。(後面文章再詳談，請稍等)
另外一個安全性需求叫作可認證需求 (Accountability Requirements)，我畫了一個流程圖如下：

對不起，其實我剛剛就很想講了，看到上面那個流程圖，是不是讓您想到了「組態管理 (Configuration Management)」呀？哈哈哈，果然接下來我們就要講解變更管理 (Change Control Management) 的應用性好處了。
值得注意的是，組態管理的範圍不只有 Prodcut 本身，還包括專案過程中所有的 Work Products，如此才能帶出完整的安全性好處喔：
其實我覺得一般企業的資料落失保護 (Data Loss Protection) 機制做得還不錯，所以這部分我就快速帶過：

集團在 2015 年給所有高階經理人閱讀過的一本書

《未來的犯罪 Future Crimes》","['安全性需求 (Security Requirements)', '組態管理之安全性應用 (Configuration Management)', '資料分類保護機制 (Data Classification)']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191829,DataTechnology,0,GraphQL+ApolloData入門系列,10,ApolloData&Querymethod(一),polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513424045000000000,488,"介紹
來介紹ApolloData 基本的查詢，使用ApolloData Client 的話直接都用原生GraphQL的查詢語法即可不需要學其他的語法，前幾篇也有提到 graphql Hoc 查詢回來的資料會放到 props.data，但除了資料外 ApolloData 會多幾個 method ,接下來介紹 Query後會在props的 method
在上方可以看到 user like 這些都是發出fetch後得到的資料，但像其他的loading，error，variables...等等 就是ApolloData提供的 query method了，以下來介紹幾個常用的
1.loading
再發request的時候ApolloData會把loading這個狀態改成 true，所以通常都會拿這裡的props.data.loading來做載入動畫，另外當true的時候表示資料尚未得到
2.error
這邊如果有錯誤返回通常也會把元件狀態改成錯誤時候會呈現的樣貌
3.variables
如果使用varibales 就可以改變發payload的查詢所以如果 variables 有改寫資料有改變物件也是會重新render
4.refetch
強制組件重新讀取您在graphql函數中定義的查詢。重新加載組件中的數據，或在發生錯誤後重試抓取時，此方法很有用。
總結
在ApolloData 真正好用的就是前端Query的這些API，可以在前端撰寫上更輕鬆愉快，下一篇再繼續介紹Query Method 其他好用的API",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191827,ModernWeb,0,ASP.NETMVC網頁程式介紹系列,7,[Day07]ASP.NETMVC後端傳資料到前端介紹(三),小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1513423608000000000,509,"今天繼續前兩天的話題，我們用ViewBag總共傳了三個物件，第一個是C#預設的DateTime物件，
cs檔案
cshtml檔案
在MVC中要呼叫後端的物件，就要使用@這個標記，在最前面的@ { }跟呼叫物件時的@date都是如此，MVC前端是使用Razor的語法，不過基本上可以將C#的語法完全搬到前端來使用，只是要記得加上@
第二個傳的物件是一個自訂的物件
cs檔案
cshtml檔案
因為我們在宣告的時候沒帶任何參數進去，所以出來的結果就會是預設值：空字串跟0
第三個傳的物件是自訂物件的List，List是C#預設的一個陣列，可以放任何物件
cs檔案
cshtml檔案
這裡是通過迴圈來將
到今天是使用ViewBag傳遞資料到前端，明天開始會介紹通過Model傳遞資料到前端，Model不但可以傳遞資料到前端，也能夠從前端取資料到後端，不過前端到後端的部分會在稍後講到Get跟Post的地方介紹。
--
小弟不才，
如果有謬誤或是要補充的，
都歡迎一起來討論！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191831,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,13,13.Azure排程器,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513422704000000000,515,"從前面幾篇文章到現在，我們介紹了許多可以介接的 WebAPI 讓你的機器人可以查詢個人備忘資訊、氣象、空氣品質與講講笑話。雖然功能眾多，卻每次都需要輸入指令：好比早晨想要得到氣象與空氣品質資訊，卻每天一早輸入指令詢問，非常不方便。在這一篇，我們將透過 Azure 排程器，讓你的機器人固定時間提醒你重要資訊。
在第一篇，我們曾經計畫讓機器人自動推送訊息，但尚未決定使用何種排程/觸發器。無意間發現 Azure 也有排程器服務，設定上也不會過於困難，所以就決定使用 Azure 排程器。

前幾篇的程式說明您應該有發現透過 Bot template 新增的專案，本身是一個 ASP.NET MVC C# WebAPI，這表示我們可以新增並呼叫 WebAPI 來進行一些工作。理所當然，發送資訊給特定用戶需要一些資訊，這些資訊我們在下一篇撰寫程式的過程中會詳細說明。

Step 1. 我們登入Azure Portal，點選新增 → 輸入Scheduler 找到我們的


Step 2. 輸入名稱

Step 3. 設定工作集合 → 新增 → 輸入名稱與選擇定價層 (若已經建立過可以跳過這個步驟)

Step 4. 輸入相關資訊：

註：若您忘記機器人 endpoint，可以在Web Application 內找到服務，會有URL資訊

Step 5. 接下來設定排程，我們設定週期性每天早上8點準時提供資訊

Step 6. 點選建立，完成我們的設定工作


Step 7. 若您需要測試，可以進入排程器工作集合 → 點選下方排程工作後 → 點選立即執行
","['前言', '介紹', '建立Azure 排程器']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191822,自我挑戰組,0,用laravel尻出自己形狀的linebot，還要撐三十天！系列,11,【第十一天】早安！Slack！,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1513421645000000000,525,"大家早安假日好～原本的LineBot我們先放一旁，來串接看看Slack吧！
當然不是啦～我們現在是在多方嘗試，實際串接及使用起來看哪一個平台比較好用好玩，
絕對沒有覺得題目做不下去覺得沒興趣想換的意思
既然這樣就回到今天主題，Slack！
那我們來簡短說明一下如何創立自己的小機器人吧！
彈無虛發！

克里克！


剩下應該不用特別教了，應該都沒問題！
創立好之後再回來建立你的APP


這時候！你就可以拿到這樣一組的東西！
直接拿去打這curl！你應該就可以拿到像這樣的圖了！

這樣子最簡單的Hello,World!就完成啦！
今天就先這樣～明天見囉！",['【第十一天】早安！Slack！'],['所以題目說的LineBot就不玩了嗎？'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191772,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,12,(Day12)jiebaR的分詞引擎設定,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1513420569000000000,500,"來研究一下分詞的作業相關設定
預設為混合模型 ( MixSegment )

其他的說明
Default Method -> 指分詞引擎 (可調)
Detect Encoding :  TRUE -> 確認 Encoding
Default Encoding:  UTF-8 -> Encoding 可用 UTF-8
Keep Symbols    :  FALSE -> 要不要保留標點符號
Output Path -> 輸出路徑 (路徑若有錯，會整個關掉)
Write File (可否寫入) : TRUE
By Lines (按行輸出) : FALSE
Max Word Length (最大字串長度):  20
Max Read Lines (最大行數) :  1e+05
實作一下，可調整的部分，調整方式:

再來，可以調整停用字集
要注意執行時檔案的編碼處理
還有檢查一下更改的結果

看一下結果比較吧！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191763,Security,0,IT安全稽核系列,13,4.1是否指派適當權責之高階主管負責資訊安全管理系統之協調、推動及督導等事項？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1513420073000000000,511,"這星期為了法律事項而頭痛不已，我個人覺得，大家不在乎法令，出事的時候，拿了些不該用的法令出來，結果找麻煩給公司，最後還要有人出面協調，我真的覺得，很多部門根本都在自己解釋自己的一套，出了事情還一直隱瞞，最後事情一發生，連反應的時間都沒有，真的很糟糕!
以下就探討第四部分資訊安權組織的相關議題，這是與資訊安全組織、人事及資訊單位有關的部分，終於多了人事單位的參數進來了，所以我們繼續根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，探討4.1的分析。
四、資訊安全組織（資訊安全組織、人事及資訊單位）
4.1是否指派適當權責之高階主管負責資訊安全管理系統之協調、推動及督導等事項？
說明：此項說明兩個重點：1.適當權責的主管，還要高階的。2.協調、推動及督導。
呼應我開頭所寫的，適當的權責高階主管很重要，組織裡面有水平的橫向溝通，也有垂直的的上下溝通，然而，資安就更特別了，用個說法更貼切，是拓墣式的溝通，一個server對應很多client，又可以連接到一個server在對應到很多client，然後兩個server又可以連接在一起，細想，在這樣的交錯的環境裡面，資安人員都有辦法面對了，組織單純的垂直跟水平溝通，那應該不算太複雜才對。
似乎是這樣吧？ 疑惑....
本人說似乎的原因是在於，資訊安權雖然複雜，但一樣敗給人性，技術上的漏洞可以用技術把他解決掉，但是人性一加入，單個因子會變得更加複雜，因為人隨時在變，你無法有效控制。
因此，本人很少提到技術層面的東西，因為，一個簡單的技術，都會被人搞得亂七八糟的，光是收拾殘局就讓人跳腳，說實話「協調、推動及督導」，有時候不見得拿著制度跟技術就能解決，我只呼應上面我說的一件事，很多單位都會掩蓋問題，不肯說，總以為自己可以解決所有問題，最後變成一個超級大問題，全公司的人全部一起下水，這就是管理上令人頭痛的一個重點。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191826,ModernWeb,0,邁向JavaScript勇者之路系列,13,JavaScriptFunction與Hoisting,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1513419943000000000,542,"Hoisting 在 JavaScript 僅是一個觀念，主要是在說明變數、函式在宣告期間就會先建立一個記憶體空間，等到實際運行時再將值放入到該記憶體空間內。不過為了確保程式的穩定性，我們不會在實作中使用這個方法，僅了解觀念即可。
故事說明：小明的筆記本寫了每天要做的事情，但其實他並不是要做事情時，才會翻筆記本。在一早的醒來的時候小明會將全部的內容先看一次，讓腦中先有個印象。
這個概念與 JavaScript Hoiting 的概念接近，先在記憶體中準備一個空間，等到執行時再將值、函式置入。

先在腦中了解有多少事情，到時執行時才比較不會忘記的小明。
如果我們對沒有宣告的變數執行 console.log()，會跳出一個錯誤表示它 ""尚未"" 被定義過。
如果在 var 的變數前加入 console.log()，這個時候並不會出錯，則是會跳出 undefined，這表示這個變數在記憶體中已經有一個位置，只不過目前並沒有值。
但如果是直接賦予在全域物件上的屬性，因為並不是使用 ""宣告""，這已經屬於定義階段，所以在記憶體中他還沒有值。會在 phone = 'myphone' 這段直接將值寫在全域物件上。
在函式概念中也是一樣的，如果在函式之前使用 console.log() 則會出現 undefined，當然這個函式也無法被使用。
這種函式宣告方法稱為：function expression 函式表達式(function 會由 var 定義)。
比較不同的是在 function declaration 函式陳述式中(function 放在最前方的寫法)，整個函式都會被提升到最前方，所以在函式前方直接調用方法也可以運行。
Hoisting 這個觀念主要是要了解 JavaScript 記憶體運作的觀念，實作上也會避免在 function 前方直接呼叫函式，這樣會降低對於程式碼的可維護性。",,"['在變數上', '函式的 Hoisting']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191807,自我挑戰組,0,2017挨踢人生大事紀系列,13,ERP改來改去何時了~顧問沒教過怎麼辦？,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513419654000000000,548,"有時在iT邦會看到很有意思的提問，
有邦友發願想要為公司開發系統，想問問有沒有好建議？
哇！自行開發耶～多麼的雄心壯志！
可能是牛哥我涉世太深，看過不少自己寫系統的鳥事！
也可能牛哥我不是資訊科班出身，不懂資訊科班高材生出身的程式人思維？
所以我都會勸說，最好找個懂MRP、ERP、會計系統的顧問師來評估看看，企業到㡳需要什麼樣的系統？
再進一步思考怎麼開發，或是怎麼導入一套現成的系統。
企業的營運類型是歸屬那一個產業別？製造業？買賣業？服務業？
企業擁有那些資訊的資源可用？或是能有多少預算可爭取？
硬體架構？軟體使用狀況？使用者的資訊素養如何？
需要用那些表單？收集什麼資料？產出什麼報表？
我相信單憑一兩位資訊人員，上述的問題收集和分析，一定是很艱巨的任務！
(如果是一個團隊，就有可能進行自行開發的任務。)
我有一個開公司的學長，他向我提出一個『同軸論』的觀點！
所謂『同軸論』就是指運用一套系統軟體為中心，
在這套系統的架構下，其幅軸能把企業所有的部門串接起來，
讓企業像輪子一樣運動起來；
各部門反饋資料給系統，系統再把資料整合好，產出有意義的資訊推動各部門。
其實，用挨踢人的說法，簡單說，就是使用一套ERP啦～
「ERP」的定義，在此就不再贅述。
今日企業對ERP的要求，已經不是單純的企業資源整合和規畫而已，
它是企業主追求營運利潤的工具之一。
學院派的邏輯推演出的作業流程，在真實世界也不是那麼單純可行。
所以單憑程式設計人員自行推導流程，然後撰寫出來的程式軟體，
當然會被很多現實世界裡，雖然不合邏輯但卻真實存在的作業流程給挑戰！
更何況撰寫程式的人員，一定會有某程度跨界的困難門檻存在，
存在要如何貼近使用者的角色去了解：
業務接單、製造生產、倉庫存貨、請採購、品管驗收⋯⋯以上述及的作業流程。
企業是許多作業流程的集合體，每項作業流程都自有其特殊的專業知識，
要如何以程式邏輯去涵括，其難度非一般人可認知。
「導入ERP，是一項企業文化的再造工程。」
不知道這人個觀點，邦友們認不認同？
顧問師規畫的作業流程，坦白講也未必就能百分之百符合企業的需求！
現行的ERP，萬一出現了和當初導入的規劃流程相異的作業模式。要怎麼辦？
ERP改得動嗎？挨踢有把握改得了嗎？
現在我就面臨到類似的狀況，而且不只一件、兩件⋯⋯
啊～頭好痛啊～",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191136,自我挑戰組,1,用IT看世界系列,12,CCNA-vlan切割(2),allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1513419289000000000,509,"子網路切割神器，操作方式相當簡單
輸入ip跟mask就可以算出了
繼續回去上CCNA課
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191673,AI&MachineLearning,0,深度學習環境安裝筆記系列,5,[Day05]深度學習環境安裝筆記—安裝Nvidia驅動程式,a7552005,https://ithelp.ithome.com.tw/users/20091307/ironman,1513418200000000000,507,"一般裝 Nvidia 顯卡驅動有兩種方法，一種是到 Nvidia 官網下載 .run file 回來裝，不過這個方法用到的指令比較多也比較麻煩就不推薦剛入門 Linux 的朋友用了，下面來介紹如何直接用系統內建的功能裝顯卡驅動。





一開始還沒開啟超頻選項的 nvidia x server setting

透過以下指令開啟超頻選項

重新啟動後就會看到新的調整選項

把80替換成你要的轉速，輸入指令後透過 nvidia-smi 即可看到效果



以前在 Ubuntu 上裝 Nvidia 的驅動是一種煎熬，但近年來已經改善非常多，現在基本上都不用作什麼設定就能無痛裝好。",,,"['開啟 Additional Drivers', '勾選 Nvidia 顯卡私有驅動並按下 Apply Changes 就會開始安裝驅動', '安裝完成並重新啟動後，透過 nvidia-smi 就監控顯示卡', '另外在 windows 底下很多廠商都有提供工具讓使用者對顯卡進行超頻，現在在 Linux 也可以這樣做']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191821,ModernWeb,0,PHPlaravel的邂逅系列,13,DAY13-Database介紹PART2,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1513417157000000000,494,"要新增資料庫資料前，必須先知道一個重要的功能叫做 migration ，他就像是資料庫的版本控制，你不用再辛苦的在資料庫中建立各種欄位，當你主機換還需要重新設定，這是多麽的麻煩，有了 migration ，只要在檔案內建立一次資料，後續只要下指令就可以幫你完成資料庫欄位建置，這樣是不是節省很多時間啊，那我們快來看看囉
新增migration指令，來建立一個最新消息的資料庫的 migration ，在 table 後面還加有--create的參數，他會而外建立好要開的資料表的名稱和一些相關的程式碼。

建立成功會像上圖一樣，接著看看檔案在哪裡，database/migrations資料夾的最下面會看到剛剛新增的news檔案，看看上面的程式碼來做說明。
Schema::create 會建立一個新的資料表，後面接著第一個參數是string的資料表名稱，第二個是閉包，接收 Blueprint 物件用來定義新的資料表。
要修改資料表名稱，可使用 rename 方法
指定特定連線來操作，可使用 Schema::connection 方法：
移除資料表，可使用 Schema::drop 方法，在上面會看到兩個 Function ，up 和 down ， up 就是建立 migrateion 的時候會執行 up 裡面的東西，當 rollback 的時候就會執行 down 的 Function
在create的閉包裡面來看看需要怎麼寫程式碼，看到$table的變數，第一行把id設為increments為累加的數字，通常都會把id當作主鍵來使用，因為是唯一值具有索引和一定有值的特性，就可以透過主鍵來查到需要的資料。
在看到第二行timestamps，這行會在資料表裡面建立created_at欄位和updated_at，簡單來講建立資料就會有created_at的時間，更新資料就會有updated_at的時間",['DAY12-Database介紹 PART 2'],,['今天來說說migration吧'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191820,AI&MachineLearning,1,以100張圖理解NeuralNetwork--觀念與實踐系列,6,Day06：處理影像的利器--卷積神經網路(ConvolutionalNeuralNetwork),IcodesoIam.,https://ithelp.ithome.com.tw/users/20001976/ironman,1513416728000000000,527,"這一波的人工智慧在自然使用者介面(Natural User Interface, NUI)有突破性的進展，包括影像(Image、Video)、語音(Voice)與文字(Text)的辨識、生成與分析，機器透過這種人類與生俱來的溝通能力，與使用者互動不僅更具親和力，也能對週遭的環境作出更合理、更有智慧的判斷與反應，尤其是，將這種能力附加到產品上，使產品應用發展產生無限的發展潛力，包括無人駕駛車、無人機、智慧家庭(Smart Home)、製造機器人(Robot)、聊天機器人(ChatBot) ...等。
從這一篇開始，我們就逐一來探討影像(Image、Video)、語音(Voice)、文字(Text)的相關演算法，之前我們只用10幾行程式辨識阿拉伯數字，就令筆者興奮不已，接下來，介紹另一個演算法『卷積神經網路』(Convolutional Neural Network, CNN)，它可以自動進行『特徵萃取』(Feature Extraction)，從而應用在影像辨識及自然語言處理(NLP)上，也因『卷積層』(Convolution Layer)概念的導入，可以非常有效減輕 Neural Network 訓練的負載。
CNN 也是模仿人類大腦的認知方式，譬如我們辨識一個圖像，會先注意到顏色鮮明的點、線、面，之後將它們構成一個個不同的形狀(眼睛、鼻子、嘴巴...)，這種抽象化的過程就是CNN演算法建立模型的方式。卷積層(Convolution Layer) 就是由點的比對轉成局部的比對，透過一塊塊的特徵研判，逐步堆疊綜合比對結果，就可以得到比較好的辨識結果，過程如下圖。

圖. CNN概念，圖片來源：An Intuitive Explanation of Convolutional Neural Networks
那我們如何從點轉成面呢? 很簡單，就是以圖像的每一點為中心，取周遭 N x N 格的點構成一個面(N 稱為 Kernal Size，N x N 的矩陣權重稱為『卷積核』)，每一格給予不同的權重，計算加權總和，當作這一點的 output，再移動至下一點以相同方式處理，至圖像的最後一點為止，這就是 CNN 的卷積層(Convolution Layer)，請參考下圖，CS231n: Convolutional Neural Networks for Visual Recognition 一文的Convolution Demo段落，它以動畫的方式說明取樣的方式。卷積層處理方式與影像處理方法類似，採用滑動視窗(Sliding Window)運算，藉由給予『卷積核』不同的權重組合，就可以偵測形狀的邊、角，也有去除噪音(Noise)及銳化(Sharpen)的效果，萃取這些特徵當作辨識的依據，這也克服了迴歸(Regression)會受『異常點』(Outliers)嚴重影響推測結果的缺點，好比說一個人的鼻子長了一顆痣，我們也應該能依據形狀辨識出那是鼻子。

圖. 卷積層(Convolution Layer) 運算方式，圖片來源：CS231n: Convolutional Neural Networks for Visual Recognition
若不引入卷積層，使用單純的隱藏層(Dense)，即第二篇的作法，不僅需要很大的記憶體，計算也會耗費很長的時間，我們看一個真實的案例，ImageNet 2012 挑戰賽的題目，辨識 227 x 227 點的全彩圖案，每一點R/G/B各佔24 bits，故輸入層單一張圖的資料量就有 227 x 227 x 96，假設有60,000個樣本，隱藏層輸出1000個變數，那矩陣運算就是(60000, 227 x 227 x 96) 與 (227 x 227 x 96, 1000)的內積，那是一個多麼龐大的迴圈運算。而卷積層的概念是假設我們在看一張圖時，每個神經元只會接收一小塊區域的反射光線，稱為『感受野』(receptive field)，也就是說，隱藏層的神經元只會連接上一層『感受野』內的Input(11x11)，而不會連接『所有』的Input(227x227)，稱之為『局部連接』(Locally Connected)，而非『完全連接』所有 Input。

圖. 『完全連接』(Fully Connected) vs.『局部連接』(Local Connected)，圖片來源：CS231n Convolutional Neural Networks for Visual Recognition
每個隱藏層的神經元就只跟Input矩陣(11, 11)作運算，運算負擔就明顯減輕了，另外，還有一個假設，稱為『共享權值』(Shared weights)，就是每一個『感受野』對下一隱藏層均使用相同的一組權重(Weight Matrix)，請參閱下圖，這樣要推估的權重數量減少，又可以減輕運算的負擔，所以，運用卷積層的目的就是針對圖像或語言的特性，簡化計算的過程，進而縮短運算的時間。

圖. 『權值共享』(Shared weights)，圖片來源：What exactly is meant by shared weights in convolutional neural network?
在使用卷積層函數(Conv1D、Conv2D、Conv3D...)時，我們可以設定濾波器(Filter)的數目，系統在訓練的過程中，就會根據Input圖形，幫我們找出圖中出現的各種形狀濾波器(Filter)，例如(+、X、O...)，再往下加幾層卷積層，我們就可能找出圖像會包含的各種特徵，例如，眼睛、嘴巴、鼻子等，我們來看卷積四次的濾波器(Filter)，圖片來源為 https://cs.nyu.edu/~fergus/drafts/utexas2.pdf ，第一層只偵測到線，到了第四層，就幾乎得到整個輪廓了。

圖. 第一層濾波器(Filter)。

圖. 第二層濾波器(Filter)。

圖. 第三層濾波器(Filter)。

圖. 第四層濾波器(Filter)。
卷積層之間通常會加一個池化層(Pooling Layer)，它是一個壓縮圖片並保留重要資訊的方法，取樣的方法一樣是採滑動視窗，但是通常取最大值(Max-Pooling)，而非加權總和，若滑動視窗大小設為2，『滑動步長』(Stride) 也為 2，則資料量就降為原本的四分之一，但因為取最大值，它還是保留局部範圍比對的最大可能性。也就是說，池化後的資訊更專注於圖片中是否存在相符的特徵，而非圖片中『哪裡』存在這些特徵，幫助 CNN 判斷圖片中是否包含某項特徵，而不必關心特徵所在的位置，這樣圖像偏移，一樣可以辨識出來(部分文字引用自卷積神經網路的運作原理 一文)。

圖. Max-Pooling, 視窗大小為2，『步長』(Stride)也為 2的取樣方法，圖片來源：A Beginner's Guide To Understanding Convolutional Neural Networks
透過多層卷積/池化，萃取特徵當作 Input，再接至一到多個完全連接層，進行分類，這就是CNN的典型作法，下一篇我們就用 CNN 來作阿拉伯數字的辨識，看看有甚麼不同，緊接著，我們再介紹兩個 CNN 應用，說明 Neural Network 不是只能作分類而已。
弄懂這些概念，對後續實作有很大的幫助，請耐心看完，之後的應用都跟本篇有密切的關聯。
明天見了 !!",,"['『自然使用者介面』(Natural User Interface, NUI)', '卷積神經網路(Convolutional Neural Network, CNN)', '卷積層(Convolution Layer)', '池化層(Pooling Layer)', '結語']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191819,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",13,Day13-HBaseHelloWorldAPI教學,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1513415674000000000,490,"在這篇文章內容，將會學到如何使用HBase Client API對HBase的CRUD操作。本篇的範例程式碼所使用的HBase版本是 HBase 0.98.x ，相容於 HBase 1.x.x 。
首先先來看一下SQL、API與HBase Shell的CRUD對照：
與所有RDB相同，連線到HBase也需要設定connection：
現在我們來查剛剛Put進去的資料。
看完了Hello World版本的API後，接下來要介紹如何使用HBase Bolk-Load。",['最後'],"['HBase Connection', '使用Put新增一筆(row)資料', '使用Get查詢一筆(row)資料', '使用Scan來查詢table所有資料', '使用Delete刪除一筆資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191818,自我挑戰組,0,從0開始的菜鳥工程師挑戰賽系列,4,第四天-好用的div,lf2exe,https://ithelp.ithome.com.tw/users/20107727/ironman,1513414732000000000,578,"上次介紹完基本的架構了，這次說說塞在body裡面的東西((小聲:不知道塞在其他地方行不行就是了))。
現在好像大家寫網頁的方式都是用包起來寫你要呈現在網頁上的東西，如下圖。

然後在標籤裡面可以下各種參數或是指令，如下圖。

這樣看起來有沒有超級亂的阿!!正所謂的科技來自於人(ㄊㄡ)性(ㄌㄢˇ)，所以我們可以在標籤裡面給他命名，如下圖。

class的意義大概就像班級或種類一樣的存在，它可以同時擁有好幾個東西用相同class，例如你跟我都是三年四班的學生。
id的意義比較像一個人的名字，通常((大概是99%))不能好幾個不同的東西用相同的id，容易出錯或是被較新的取代，例如你是風兒我是沙，這是獨一無二的存在。
一切都命名完後，你需要建一個新的文件，名稱隨意但是副檔名必須是.css，然後再head((你的大腦))那邊做引入，,如下圖。

引入完後，用atom開啟你的css，在裡面寫被你命各個東西的""外觀""、""動作""之類的，如上面示範的用框框標起來或是上色等等，如下圖。

這樣子下來你的程式碼看起來就會乾淨許多，再新增或是除錯的時候就會很輕鬆....吧??
最後面我來講一下為什麼用div，我們想像一個網頁是一顆地球，div就是國家名稱，你要先國名才有主權界定疆土範圍，然後在範圍內發展國家，所以你要先用div命名一個區塊，然後再給這個區塊它的大小，給完大小後再給他內容，這樣才不容易跟其他區塊干擾到。
結論:
好div不用嗎?",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191816,ModernWeb,0,從無到有，打造一個漂亮乾淨俐落的RESTfulAPI系列,6,[Day-6]使用Express快速建立環境,10程式中,https://ithelp.ithome.com.tw/users/20107247/ironman,1513414512000000000,550,"Express 可以說是 Node.js 底下的一個前端 + 後端的框架，也是被官方所認同推薦入門的套件之一，其中包含 MVC Framework( Model–View–Controller)，簡單來說 View 就是前端畫面呈現 HTML + CSS，Model、Controller 為後端 API 搭建資料庫與控制流程，稍後幾篇文章會再深入的名詞解釋這裡就不多贅述。

首先此篇文章會先使用 Express-Generator 來自動產生環境，之後再從實作中回頭來一一檢視裡面的運作方式。
這個指令是 Express 的命令工具，他可以很方便的一鍵初始化整個專案，首先 npm install -g express-generator 安裝全域中。
安裝完成後可以查看版本是否有安裝成功
安裝完成後就在桌面來初始化建立專案囉，前端的部分有許多模板引擎，模板引擎（Template Engine）是一個將頁面模板和數據結合起來生成 HTML 的工具，有下列幾個:
建立與初始化資料夾，後面的專案名稱可自行命名，若你未指定模板引擎會自動預設 jade 模板，更多的資訊你可以使用 express -h 下去查詢，初始化完成後在左側資料夾內文件按右鍵開啟終端機。

初始化完成後必須使用 npm install 或 yarn install 來安裝 package.json 內所指定的套件，要安裝什麼套件 express-generator 都自動幫你寫好了，由於這些模組都非常的大所以要透過指令去把他安裝回來，之後會產出一個叫 node_modules 的資料夾，總之你可以把 package.json 檔案想成是一個軟體清單，所有會用到的套件都會列在裡面。

bin/www 是整個程式的進入點，點進去你可以發現他的 port 設為 3000 代表 web server 監聽埠號 3000 port，其他相關的 middleware 例如：body-parser、morgan 以及 router 都寫在 app.js 中被 www 啟動時所 import 進去，至於前端畫面是 public 與 views 這兩個資料夾管理，今天我們著重在 router 這部分。

我們在這支檔案下加入 /test 路徑並傳送文字 router.get 是代表建立一個路由並使用 HTTP request methods 中的 get 形式，HTTP request methods 定義非常多個請求方式，下篇文章中就會來詳細介紹，此外 router.get中有兩個參數，第一個是子路徑名稱用單引號字串包起來，第二個是一個方法裡面面有三個參數分別為 req(request)接收資料、res(respond)回傳資料以及next。
修改檔案後就可以使用 node ./bin/www 或 npm start 來啟動專案了，至於後者指令為什麼可以啟動，你可以查看 package.json 的檔案裡面的 scripts 有設定好指令相對路徑，所以在 package.json 中你可以依據你的習慣設定你自己專屬的快捷鍵。

最後你可以到瀏覽器輸入 localhost:3000 與 localhost:3000/test 來查看內容。


文章同時發表於：https://andy6804tw.github.io/2017/12/16/express-tutorial/",,"['何謂 Express', 'Express-Generator 快速建置環境', 'install package', '解析資料夾內容', '執行']","['安裝 Express-Generator', '初始化專案']","['- Tree', '- 解析 routes/index.js']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191552,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,13,3-2.監控工具之三:Elastic-winlogbeat事件稽核,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1513413957000000000,556,"收集Windows Event Viewer事件檢視器，很多人都會回到AD上的事件紀錄查，或是設定特定規則發送出來，可是通常不夠完整又不夠及時，很難配合其他工具做自動化控管，winlogbeat可以很好的處理這塊，而且是free的...
下載winlogbeat
https://www.elastic.co/downloads/beats/winlogbeat
winlogbeat.yml
看圖說故事，收集Application 72小時內的訊息，收集所有Security及System訊息

到powershell輸入以下指令可以看到全部名稱
因此如果要收特定Microsoft資料夾內的event就是Microsoft-後面在接event名
忽略168小時以前的event
收集特定事件，下面的意思是收4624,4625,4700到4800，排除4735
告警等級
其他可以參考官網，其實量不是太大全收會比較好，避免需要時漏掉。
Out選擇ES或logstash
到winlogbeat的資料夾執行安裝

確認啟動後，到ServerIP:9200/_cat/indices?v 查看資料是否進入，然後到kibana建立index:winlogbeat-*

匯入dashboards(官網居然沒寫清楚怎麼匯到特定IP...)
預設的dashboards

發告警可用elastalert
微信报警可以參考以下這篇
http://www.opscaff.com/2017/03/03/winlogbeat%E4%B9%8Bwindows%E6%97%A5%E5%BF%97%E5%BE%AE%E4%BF%A1%E6%8A%A5%E8%AD%A6/",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191815,自我挑戰組,0,資訊技術解戈迪安繩結系列,9,IT｜作業系統｜Mac｜Homebrew安裝套件管理工具,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1513410688000000000,528,"簡介
OSX 套件管理軟體，常常在安裝不同版本的軟體時，可能會造成不同軟體上的衝突，而 Homebrew 可以幫助你管理這些不同軟體之間的相依性問題。
Homebrew 能在 Mac 方便中的安裝軟件或卸載軟件，相當於 Linux 下的 apg-get,yum ，是 Mac 系統上大家常很常用到的一個套件管理工具，可以藉由 Homebrew 去安裝各種軟體，像是 ImageMagick、git 也都可以輕鬆的藉由 Homebrew 安裝！
Homebrew 安裝
[安裝]
Homebrew 會將工具安裝到 /usr/local/Cellar 目錄中，並在 /usr/local/bin 中創建符號鏈結。
安裝需求：
在安裝完Xcode後，開啟Xcode同意授權，等Xcode授權完畢且開啟完成後，開啟 terminal 之後，執行:
ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""
[相關指令]
搜尋套件
$ brew search 套件名稱
安裝套件
$ brew install 套件名稱
查詢目前已安裝的套件
$ brew list
更新 homebrew 套件管理程式
brew update
參考
Homebrew — OS X 缺少的套件管理工具",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191814,SoftwareDevelopment,0,Kotlin30天，通過每天一個小demo學習Android開發系列,13,Kotlin開發第13天LocalStorage（SharedPreferences）,Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1513409761000000000,527,"
在 iOS 開發中，我們可以通過 UserDefaults 將一些簡單的內容存在沙盒之中，而 Android 是通過一個叫做 SharedPreferences 來實現的。
默認會存到這個路徑
也可以自定義名稱來存內容：","['SharedPreferences', '筆記', '參考']",['Context.MODE'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191740,ModernWeb,0,前端新手村系列,6,前端新手村Block和Inline排版,chris,https://ithelp.ithome.com.tw/users/20107637/ironman,1513408655000000000,609,"「當你迷惘的時候，就回到原點想一想」-中華一番 蘭飛鴻
網頁前端新手村系列文章，宗旨並不在技術本身的教導，重點放在技術與技術之間的脈胳關係。讓零碎的網頁前端技術的關鍵字，成為比較有系統性的視野。
讓一開始接觸網頁前端的新手們，有一個比較友善的系統來架構你的學習，至於技術本身的深入探討，就留給其它的高手們吧。
初學 HTML 開始切版時，先學 div 和 span 這兩個標籤，就可以練習排所有的東西了!!!
在網頁排版裡，可以粗略的分成兩大系統。
這兩種元素，就只是設定「內容的排列環境(formatting context)」。[1]
在網頁的排列上
在 w3c 的文件中，有明確的定義這兩種排列方式，在此節錄一部份相關的內文來看
9.4.1 Block formatting contexts
In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block.[2]
9.4.2 Inline formatting contexts
In an inline formatting context, boxes are laid out horizontally, one after the other, beginning at the top of a containing block.
這兩段內文，我們會在下面的程式碼中，有更多的體會。
div 和 span 這兩個元素，就是支援這兩種元素觀念的 HTML 表現形式。
寫程式來試看看
建議
申請一個 code pen 讓你可以隨時做實驗。
上面兩種程式碼，可以看出
使用上大多都用在區塊之間的切割，在初次看見設計稿時，腦海的分割畫面行為，大多都可以算是用 div 切割的行為。
網頁排版大多也是使用 block 區塊，來描述元素之間的關係。
使用上，最常搞混的是<img>，其實是一種 inline 元素。
display屬性中，有兩個值 inline 和 block 。
發現了嗎？就算你只會 div 也可以透過設定 display: inline 將 div 變成 inline 元素。(但請不要....不要這麼做。)
寫程式來試看看
承上面的程式，加上 CSS
若你是寫成 HTML 檔，會變這樣
上面兩種程式碼，可以看出
為什麼不要讓他們屬性交換，原因有兩個
[1]: KB010: 常規流( Normal flow ) - w3help
[2]: 9 Visual formatting model - w3c","['Block 和 Inline 排版', '參考資料']","['前言', 'HTML 表現形式', 'CSS 表現形式']","['<div> 的預設行為', '<span>', '排版特性交換 (要小心!!!)']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191811,DevOps,1,Nightwatch101：使用Nightwatch實現End-to-EndTesting系列,6,Nightwatch101#6：使用Xpath定位網頁元素,cythilya,https://ithelp.ithome.com.tw/users/20092232/ironman,1513405959000000000,2705,"
做 End-to-End Testing 的第一步就是抓到網頁的元素，而定位網頁元素有兩種方法「CSS Selector」和「Xpath」，在本篇使用 Xpath。（參考使用 CSS Selector 定位網頁元素）
本系列文章皆使用這個專案，可以拉下來玩玩；有什麼問題都可以提出 issue。
Xpath（XML Path Language，XML 路徑語言），是用於確定 XML 文檔中某節點位置的語言。
相信很多人其實不知道怎麼取得 Xpath，甚至聽都沒聽過 XD
方法很簡單，打開 Chrome Dev Tool 的 Elements 頁籤，選到這個 DOM Element，選擇「Copy > Copy XPath」即可。

這個範例在做登入露天網站的動作，其中使用 Xpath 來抓取網頁元素。動作列舉如下

範例程式碼如下。
完整程式碼。
在這邊會看到混用 CSS Selector 和 Xpath Selector 來選取頁面元素。預設是使用 CSS Selector，如果要切換成 Xpath 要用 .useXpath()，再切回 CSS Selector 就要用 .useCss()。
執行測試程式。
顯示測試報告-通過所有的項目並產生測試報告。

測試報告。

CSS Selector 和 Xpath 的比較可參考這裡，相較起來，CSS Selector 效能較佳，請多使用。
網誌版。",,"['如何取得 Xpath？', '範例', '跑測試', '總結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191724,DevOps,0,30天入門Ansible及Jenkins[2018]系列,5,[Day05]Ansible安裝,tsoliangwu0130,https://ithelp.ithome.com.tw/users/20103346/ironman,1513392089000000000,583,"在 Ansible 裡，我們會把所有機器的角色做以下兩種區分：
對於這兩種不同的對象，在安裝 / 使用 Ansible 的時候也有不同的需求。
由於 Ansible 是一套開源的軟體，所以在目前大部分的主流作業系統上都已經可以透過對應的套件管理 (package manager) 進行安裝了。以下列出幾個我主要比較常用作業系統的安裝方法：
Pip Installs Packages / Pip Installs Python (pip - 官方推薦)
Homebrew (brew)
Yellowdog Updater, Modified (yum)
Advanced Packaging Tool (apt)
Advanced Packaging Tool (apt)
在 /etc/apt/sources.list 中加入下面這行：
在終端機中執行：
安裝好以後，確認 Ansible 已經安裝完成：
不需要！透過 Ansible 管理的 managed node 完全不需要安裝 Ansible。如上個章節所述，我們只需要確保這個節點可以透過 SSH 與 control machine 溝通，並已安裝 Python 2.6 以上的版本就可以透過 control machine 來進行部署及管理了。
在編寫程式的時候，我都會習慣去找對應語言的 linter 來習慣該語言的風格。雖然 Ansbile 並不是一種程式語言，但它也有一個對應的 linter - Ansible-lint。我會建議讀者可以安裝這個小工具，它可以幫助你確保寫出來的腳本品質是有一定水準的。
檢查版本：",['Ansible 安裝'],,,"['什麼是控制主機 (Control Machine) 及被控節點 (Managed Node)？', '如何安裝 Ansible 在 control machine 上？', '如何安裝 Ansible 在 managed node 上？', '[Optional] 安裝 Ansible-lint']","['macOS', 'CentOS', 'Ubuntu', 'Debian']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191810,自我挑戰組,0,hexo-從初學到入門-again系列,1,建立一個hexo環境-day1,josephwu,https://ithelp.ithome.com.tw/users/20107307/ironman,1513391510000000000,578,"緣由: 在最近受到六角學院志誠老師和洧杰老師的激勵,同時為了增加自己對於學習前端新技能的掌握度和學習效率,所以挑選hexo這個相較其他前端技能比較好上手,且能夠幫助自己撰寫blog上有幫助的套件來學習,並挑戰自己養成持之以恆學習新技術的習慣。
ps:因為之前的挑戰有中斷收到了中斷通知，但是還是想在報名截止再挑戰看看，所以同樣的主題重新再報名參加!
筆者利用windows8.1和vscode編輯器來開發
此過程可以搭配hexo官網文件使用
https://hexo.io/zh-tw/docs/
安裝node https://nodejs.org/en/
安裝git https://git-scm.com/
安裝完後可以在命令提示字元輸入以下命令,檢查是否安裝成功
node -v 檢查node版本
npm -v  檢查npm版本

確認node和git安裝成功,接下來就可以開始hexo專案了
因為習慣關係,這邊之後筆者都會改用vscode的終端機來建置
以下的程式碼皆須在終端機中輸入
使用npm指令安裝hexo
npm install -g hexo-cli
-g為全域安裝的意思

建立一個hexo專案
$ hexo init <folder>

移到hexo專案
$ cd <folder>

安裝npm套件
$npm install
套件會安裝到node_modules資料夾


參考資料:
GitHub+Hexo 搭建個人網站詳細教程
hexo官網
使用 Hexo + github 建立Blog",,['開發環境'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191808,ModernWeb,2,用範例理解Vue.js系列,6,用範例理解Vue.js#6：ComputedvsMethods,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1513388577000000000,610,"
接下來的幾天會分別介紹四個屬性，並互相比較倆倆之間差異和使用時機。
如果在模版內加入太多的邏輯運算，不但顯得雜亂也難以維護。
例如：在顯示預設的字串「Hello Vue!」之下，再顯示反轉後的字串。
附上 fiddle (https://jsfiddle.net/hunterliu/4jbwwur7/1/)
若改用 computed 則較容易閱讀，也把運算邏輯從 HTML 拆出來了。
附上 fiddle (https://jsfiddle.net/hunterliu/y7ztd5dg/)
若使用 method 改寫上例，也能得到相同的效果。
附上 fiddle (https://jsfiddle.net/hunterliu/xoywrh40/)
差異：
當定義 computed 之後，其相依的 data 或是 component 中的 props(之後會提到) 改變，computed 也會隨之更新；methods 則是不管資料是否相依都會計算。
下例的 computed 中沒有相依的 data，因此在 message 被修改時，now 沒有被更新，但 methods 會重新計算更新 getNow 的值。
附上 fiddle (https://jsfiddle.net/hunterliu/hw23hrn2/2/)",,"['Computed', '參考資料']","['模版範例', 'Computed 基礎範例', '比較 Computed 和 Methods']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191806,SoftwareDevelopment,0,認識scala系列,13,Scaladay13(caseclasses&compare),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1513387570000000000,560,"case classe 其實跟一般的 class 差不多，只是在建立物件時不用使用 new，然後建構子的參數都是val，不可修改但可以直接存取．所以當有很多資訊要存時可以用 case classe 封裝．還有一個優點就是比較方便．定義 case classe 只要在 class 前面加上 case 關鍵字即可 :
可以 copy 一份新的物件出來 :
copy 時還可以更新指定的值(更新id)，其他的值會自動複製 :
對 copy 的物件與原來的物件作比較 :
eq
是用來比對 reference，由於兩個物件不一樣所以會是 false :
equals
用來比對物件的值，要比對物件的值是否相等要實作 equals 和 hashCode 兩個方法，
但如果使用 case classe 預設已經實作好了，所以可以直接比較，這邊內容一樣所以為 true :
==
一般是用 equals 但如果是比對 null 的話是用 eq :
比對值 :
比對型態 :",,,"['case classes', '總結']","['case classe 的 copy :', 'scala 的 eq , equals , ==', 'case classe 搭配 match expression']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191090,自我挑戰組,0,經濟學角度思考敏捷系列,1,Day1經濟學和敏捷有什麼關係,eviler,https://ithelp.ithome.com.tw/users/20107403/ironman,1513386468000000000,601,"在這裡想跟大家分享,本人半年多來利用碎片化時間學習得到APP上面的訂閱專欄 ""薛兆丰的北大經濟學課"".
這是一門很有趣的課,引起了我對經濟學的興趣,也在思考如何用經濟學的角度來思考敏捷所遇到的一些問題.
在我還沒開始學習經濟學之前,我覺得一點關係都沒有
但是在學習的過程中我發現有越來越多的經濟學基本知識其實拿來思考敏捷其實是很有趣的,
在接下來的 30 天裡我們將介紹一些簡單的經濟學知識如稀缺,歧視,沈沒成本和邊際效應等,舉一些有趣的例子,然後來探討和敏捷有什麼相關連的地方.
當然這些東西沒有所謂的對錯和正確答案,我最喜歡薛老師說的蘇格拉底式的討論法,答案是什麼不重要,重要的是討論的過程及思考的過程,所以這些都是我個人的淺見,歡迎你留言一起討論.
如果覺得經濟學有趣,那麼請和我以及其他20萬人一起在得到APP上學習吧!
",,"['前言', '經濟學和敏捷有關係嗎?', '讓我們一起學習吧!']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191637,ModernWeb,1,三十哩路，我的前端學習路程系列,13,Day13::我所知道的CSS重構第三章之二,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1513384780000000000,572,"簡單選擇器的效能會比複雜選擇器的效能要好，簡單的選擇器應該優先被使用
這是因為他比較容易被重複使用與理解而不是因為他們比較有效率。
瀏覽器會從右至左比對選擇器，所以可以很快速的排除前頭不符合的元素，不會浪費時間在檢查可能符合的元素
範例3-8 簡單的HTML層次結構
錨點標籤透過div > nav > ul > li > a選擇器被選取
如果瀏覽器試著由左至右比對元素的話，他需要：
同樣的，選擇器要從右至左比對的話，瀏覽器需要：
個人理解是...
由左至右大概就像是在翻資料夾找檔案的時候是一個個點進資料夾裡面看一樣
由右至左就是直接用搜尋找到要的那個檔案後在看上一層的資料夾確定是不是這個檔案
選擇器最右邊的部分稱為關鍵選擇器(key selecot)
上面的程式碼能選取上源(ancestor)為標籤的元素。
而＊號的全域選擇器就是關鍵選擇器。
當全域選擇器用來將樣式套用到所有元素上，瀏覽器套用起來相當快，因為只要將樣式套用到頁面中所有元素上即可
不過，使用全域選擇器的話瀏覽器就必須要做更多工作來比對適合的元素。(因為選擇的範圍太大了，篩選需要時間)
只用全域選擇器不與組合器與其他選擇器併用才能避免這種狀況。
JavaScript與CSS可以交替使用
但是JavaScript也能改變HTML元素的樣式這讓兩者之間容易混淆。
為了讓CSS與JavaScript能分開處理，JavaScript中用來選擇元素的類別與ID不應該用來替元素指定樣式。
元素的樣式需要透過JavaScript來調整時，應該透過增刪類別的方式來做。
(就是要把CSS跟JavaScript使用的class分開啦)
在JavaScript中的類別與ID名稱之前加上js-就可以解決這個問題
使用加上js-的類別或ID作為JavaScript選擇器，任何可能存在於JavaScript與CSS間的相依性就可被排除。
JavaScript可以透過style為元素加上行內樣式也可以更改特定的CSS樣式，但這似乎已經超出他的責任區域。
與其透過JavaScript將樣式加到style中來調整HTML的樣式，我們應該透過增刪元素類別的方式來進行調整。
不只適當的樣式會被套用，所使用的CSS規則集也可持續且適當地被整理在網站的CSS中。
類別可以在網頁上無限制的視需求而重複使用，他們的特定度相當低、複寫起來也非常容易。
但是ID卻是完全相反，他們的特定度很高也不易複寫，每個頁面最多只能使用一次。
如果在編寫內容會持續變動的網頁CSS時，應該用類別來指定元素的樣式。
對於這樣的寫法看法還是有些分歧。
ID是JavaScript中選擇元素最快的方法，與在類別名稱前加上js-一樣，不用他指定元素的樣式是另一種將CSS與JavsScript分離的好方法。
為類別取個有意義的名稱，可以讓他有足夠的細節而不會在使用時造成混淆，也不會因太多細節而影響到程式碼的複用。
但是過於簡化的類別名稱也容易造成混淆⋯
能清楚表達意義很重要，但也要注意千萬別做過頭了！
範例3-10
範例用類別來選取一個元素，但是那個a是代表什麼呢？用直接可以明確表達元素用途的詞會更加理想。
過度模組化(over-modularization) 我們應該要避免使用過度模組化的類別，因為他們跟行內樣式相比也好不到哪裡去。
(像Bootstrap就是個很棒的過度模組化例子...!!class名稱都落落長...)",,,"['高效選擇器', '由右向左比對選擇器', '關鍵選擇器', '切斷CSS與JavaScript的耦合', '為JavaScript中的類別與ID加上前綴', '以類別修改元素樣式', '使用類別', '為類別取有意義的名稱', '避免類別過度模組化']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191799,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,13,[PixiJS-Day-13]PIXI.loaders.Loader,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1513384317000000000,558,"回顧 PixiJS 在建立後會產生的幾個成員：
本篇會提到的是 loader，也是最後一個介紹的成員
上篇提到了 AnimatedSprite，接著來提 PIXI.loaders.Loader
本篇也使用與上篇相同的範例來介紹：
DEMOS: AnimatedSprite
http://pixijs.io/examples/#/demos/animatedsprite-demo.js

這個範例讀取了使用 JSON 檔讀取 sprite 圖，程式碼的部分是：
這段程式碼分作兩個部分：
1. 讀取JSON 檔並命名為 spritesheet
使用 loader.add() 方式把檔案讀取進來使用
讀取後會先存在 PIXI.TextureCache 快取裡
註：讀取 Sprite 圖、AnimatedSprite 圖的 JSON 檔、Bitmap 字體都使用 loader.add() 方法
2. 使用時將材質取出來
有趣的是， 'Explosion_Sequence_A ' + (i+1) + '.png' 字串，不是實體的檔名，而是 JSON 定義的影格名稱
PIXI.Texture.fromFrame 的方法是查找 PIXI.TextureCache裡是否有該 id 的素材：
PIXI.Texture 的 原始碼：
若在在這個範例裡查找 PIXI.TextureCache 時，會列出如截圖的物件：

最下方的 spritesheet_image 是整張 sprite 材質
mc.png 是 sprite 圖片
Explosion_Sequence_A 1.png 等是從大張 sprite 分出來的小材質
不論是讀進 PIXI 裡當作底圖、動態文字的材質，都能在 PIXI.TextureCache 找到
講到材質有點複雜，回到 loader 的部分：
loader 官方文件：
https://github.com/pixijs/pixi.js/blob/dev/src/loaders/loader.js
主要會用到的方法：
loader.onProgress.add()
當讀取完成與讀取錯誤時呼叫
loader.onLoad.add()
當讀取完成時呼叫
loader.onError.add()
當讀取錯誤時呼叫
loader.onComplete.add()
當讀取佇列全部讀取完成時呼叫
loader 類別原始檔：
https://github.com/pixijs/pixi.js/blob/dev/src/loaders/loader.js
若是順著系列文章讀到這，
不難發現 PixiJS 關心的是畫面與動態的呈現，
API 不會很複雜，可以專心在做出想做的畫面、動態、互動
越挖越深時，會發現 PixiJS 省去了很大部分整理素材的方法
確實是 PixiJS 特色 提到的 EASY API",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191781,ModernWeb,0,Next.js+各種套件組合系列,13,Next.js&Redux-Saga,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513384016000000000,575,"介紹
Redux 是一個 Global State Management ,提供了一個 Store 的使用所有的State(reducer)都會在這裡 ,而當有些時候需要發Request,前面的Redux篇有介紹使用最基礎的 Thunk 來發Fetch 請求(通常都會稱為 Side Effect)， 而Redux-Saga 提供各種 effect 的method 在管理這些 Side Effect的工作
Redux-Saga 的Store設定
以下設定跟 Redux 差不多，這邊的rootSaga 要給設定一個起始路徑，再使用 createSagaMiddleware 建立一個 sagaMiddleware instance 除了在 Reudx 中applyMiddleware ，要再額外指定 saga 的工作路徑 store.sagaTask = sagaMiddleware.run(rootSaga)
在Redux-Saga中 提供了許多effects， 這些effect take類的是監聽， put是發dispatch，call是發 request 以下方的程式碼來介紹
import {all, call, put, take, takeLatest} from 'redux-saga/effects'
每一個 effect都有各自的功能，這邊介紹一些簡單的，還有其他更多effect可以參考 Redux-Saga 官方
all : 可以想像 while迴圈 包住裡面的各種 effect 邏輯，通常根部會有fork支線比較清楚，但也可以沒有
call : 就是 發一個 dispatch  payload， 所以在原本的寫在 actions.js 的dispatch就會移到這邊的call來發送 paylad  然後 這邊的takeLatest則監聽發送 actionTypes 這邊保持原本的 actions.js 發 actiontype 但處理的地方以下方為例則改到 loadDataSaga處理
take : 監聽如果有對應的 action.type 就看要執行哪個 method
takeLatest : 如果多發很多筆 action.type  只取最後一個
在下面可以看到 put ，這裡的 put 就會發dispatch ，而可以在Saga之中常看見大量使用 yield 而且 function 都會加上＊這裡是使用 Es6 generator ，一般可以理解成迴圈中執行某些 Event 完就到外層看看有沒有要在做什麼，如果沒有的話就回到原來的迴圈 繼續做下一步 ，也因此有這個特性所以可以在 Redux-Saga 中做到取消發 fetch 這件事情
Next.js中要注意的是 import 'isomorphic-unfetch' 這邊使用了後端也可以發fetch功能的套件，還有一個es6promise的polyfill 補丁 ，其他部分跟SPA使用一樣
總結
Redux-Saga 使用了許多  effect 來的做 side effect 的管理，比起thunk 因為有 es6 generator 的特性，增加許多彈性，設定上一般會把原來的 action.js 中發 dispatch的部分換到 Redex-Saga 中的 put去發 ,在 Next.js 設定部分也是要注意到SSR補丁的部分
github
https://github.com/zeit/next.js/tree/canary/examples/with-redux-saga",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191802,SoftwareDevelopment,1,30天快樂學習FunctionalProgramming系列,3,這個Object好像怪怪的,阿志,https://ithelp.ithome.com.tw/users/20103386/ironman,1513383135000000000,651,"昨天大致介紹過會用到的 JS 語法，那我們今天可以正式開始來寫點 code 了！

不管什麼程式寫完 Hello World 之後，大概就是寫 Todo List 吧！
很好！現在把這段 code 貼到 Console （如果你是用 Google Chrome ，按下 ctrl + shift + J 或是 Command + Option + J），開始創造一個 Todo List 吧！
Output：
我做了點小技巧，在 TodoList.add 最後 return this ，這樣就可以把所有操作串起來，就不用一直寫 list 。
看來我們的 TodoList 運作得很正常，是時候來 finished 一些事情了！
TodoList.toggleFinish 相當簡單，就是把傳入 index 的 finished 反轉過來而已，今天就先完成前三項吧，明天早上起來再去遛狗吧。
Output：
不不不，身為程式設計師怎麼能做這麼笨的事呢，為什麼不用迴圈呢？
Output：
太完美了，不過又把它們反轉回來了，既然都完成了，那乾脆把它們從 list 上移除掉吧，這麼一來乾淨一點。
TodoList.remove 是我剛剛從 Stack Overflow 上抄的，從陣列中移除元素可以呼叫 array.splice(要移除的index, 1)
Output：

不不不不不不不！結果不是應該是 去遛狗 嗎？
怎麼可能，這 Bug 一定不是我寫的！你檢查一下 commit 吧，是不是有誰改到了我的 code 了！
好啦，我承認是我，但這沒道理呀，問題會發生在哪？
如果你沒有馬上猜出問題在哪，先去喝杯咖啡 ☕ 吧，我們等等再聊。
猜到了嗎？如果沒猜到，我們來把迴圈親手執行一次。
把迴圈展開後，可以得到等價的程式碼。
當你執行完 list.remove(0) ， list._list 被改變了。
Output arter list.remove(0) ：
此時如果你執行 list.remove(1) ， ""幫狗狗洗澡"" 就會被移除掉，繼續執行 list.remove(2) 則會移除不到任何東西。
現在知道問題所在了，那該如何解決呢？ Hmm...輪到我去泡杯咖啡 ☕ 了。
解法當然不只一種，但我想先聽看看你的。
全部改成 list.remove(0) 怎麼樣？
目前的問題解決了，但如果目標是要移除 0, 1, 5, 6, 8 怎麼辦？
就得改成移除 0, 0, 3, 3, 4 ， 註解都快比程式碼多了。
那不要使用 index ？
賦予每個 todo 一個不重複的 id ，搭配一個 TodoList._autoIncrement，
為了加快搜尋，再配上一個 Binary Search Tree 。
當然可行，這個解法相當完美，您是 SQL 系的嗎？
那換一個比較簡單的構想，在跑迴圈的時候不要改變 list 如何？
這個點子是不是輕鬆簡單呢？
而且還能將舊的 list 存進 undoStack，這樣當我們需要 undo 時，就可以隨時都可以做回朔。
TodoList.remove 會改變 TodoList._list，但 TodoList._list 並不好追蹤，所以沒能在第一時間察覺錯誤。
在現實案例中，更不可能像 TodoList 如此單純， bug 可能產生在更難發現的地方‵，只要變數不能改寫，就能保證沒有副作用，這樣的概念稱之為 Immutable Data ，這在是 FP 中是很重要的觀念，超級無敵重要。
如果變數不能改寫 能帶來什麼優點：
另外，在 JS 為了保護資料，會使用 const 宣告變數，但 const 卻不能保證一定 Immutable，至於為什麼，還有什麼是 Pure Function ，這個我們留到明天再說吧。
這篇好長我頭好痛，你不是答應我寫短一點嗎？
今天總算是進入正題了，其實這並不是 Immutable Data 的經典範例，通常範例是 Concurrency Programming ，不過應該有把 Immutable 的觀念解釋清楚吧，不知道大家是不是也有類似的經驗，是不是開始有點共鳴了呢？在最上頭有一句 Shared mutable state is the root of all evil. ，現在應該也懂什麼是萬惡之源了。
如果你喜歡這個系列的話，別忘了幫我按個讚，加上訂閱系列文章，然後把這篇文章分享給你所～～有的朋友。
明天繼續聊聊 Immutable Data 在 JS 中的實作，並且介紹 Immutable.js。",,"['本章重點', '來寫個 Todo List 吧！', ""What's wrong?"", '有東西被改變了', '不要改變它，這點子怎麼樣？', 'Immutable Data', '後記', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191800,ModernWeb,2,前端工程師養成手冊系列,13,挑選前端職缺時，要知道每間公司都是凹凸不平的個體,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1513383076000000000,746,"相信你還未就業時，一定對「業界」充滿想像，希望自己能夠進入一間公司發揮長才，然而事實並非童話故事般美好，我希望藉由這篇文章讓你瞭解初級前端工程師在台灣面試時或就業的各種生態，讓你在投入產業時能夠有個基礎的認知。
找工作除了前端能力外，一間公司評估是否要拉你成為員工會有很多細節要考量，如果公司發你感謝函，常見的原因也有可能是：
看到最後一個理由有沒有覺得很扯？但真實世界上就是有很多光怪陸離的事情，只要有人就會有糾紛，人性會影響的事情多到你無法想像。
像是一開始投入前端的新人在找工作時，因為每個技術環節都在平均成長，導致沒有特別突出的技能。不像是資深開發者有實務專案去特別磨練一項技術，例如 WebGL、AMP 等等，以致於企業需要評估你是否能在預期時間培養到足夠的程度，在考慮的細節也會比較多些。
但是能力好的學生就會比較好找工作嗎？也不盡然，在我輔導前端生涯中，有各種案例：
有可能是大公司想組一個大前端 team，所以想自己拉新人來培訓，而那位花了半年才找到工作的學生，其實都陸續有拿到 offer，但對產品項目都很沒有 fu，不想刻意找公司濫竽充數，那我也覺得很好，從面試的過程中知道自己不足的地方，邊找工作邊把技能補起來，最後他也找到自己心儀的公司。
至於那個找了五十幾間的學生呢？就真的是比較衰而已，他提的薪水和能力都在平均值，也不好高騖遠，但偏偏就是沒收到錄取信件。有可能剛好是搭在畢業潮，導致企業有很多人可以選擇。而且這些學生也不在少數，也曾內心透露很想在公司門口喊說為什麼不用我，只能說除了技術外，也相當看時機與緣分。
但我仍會鼓勵學生說：「突破的鐵則是就是不停地精進自身不足的技術，才有辦法獲得更多機會。衝破這道牆，未來就是你來選公司，而不是公司在選你。」
不是你不夠好，只是時機未到。人生雖然不如意十之八九，但至少你的技術永遠不會離開你，背叛你。
得到複數 offer 的學生常會遇到難以抉擇的選擇題，大部分不外乎有兩種狀況，一種是福利不錯，穩定的大公司，但並非研發而是維護固有產品。另一種是新創公司，技術更新快，較容易經手研發產品核心。
在雙方薪水差不多的情況下，諮詢我該選哪間公司？
通常替學生分析完後，我就會接著說：「你不覺得這兩個優缺點剛好是互補？跑過一輪面試你也清楚目前就只值這個 薪水區間，與其如此不如思考哪間公司能夠給你未來有更好的發展」
我都會建議學生在面試時，要好好詢問會投入的「產品項目」有哪些，然後再去評估是否有興趣，這樣做起來才能享受工作的過程。
再者，不要以為你錄取後就如步青雲，因為你還需要面對試用期三個月的關卡，考驗其實才剛開始，公司在衡量你是否適合它們的組織，你自己也在觀察公司。
很多人心裡早已有答案，但為了怕自己選錯選擇，常常會問周遭前輩的意見。有些甚至會直接問我說：「老師，那你是不是也會建議我到這間公司？」、「老師如果是你你會選擇哪一間？」
靠北我怎麼可能決定你的人生呢，如果我選出一間，好的當然沒問題，壞了你豈不就會怨恨我一輩子？
不論是工程師還是其它行業，你都必須培養出「獨自解決問題的能力」，而這部分另外種講法就是你就業後，就要開始嘗試承擔「選擇的風險」，為自己的風險負起責任。
所以以過來人的經驗，頂多是陪你聊聊，或是用很多問句問你說：「那你自己覺得怎樣？」、「你自己現在比較想走前端還是後端？」、「薪水會是你考量的重點嗎？」之類的幫助你瞭解自己內心的選擇。
所以我都會跟學生說不管你是為了「金錢」、「個人發展」、「離家近」、「同事好相處」等等的任一理由而做了選擇，我一定都舉雙手贊同。因為你用了自己的力量做出了「選擇」，這就是向前跨出了很大一步了。
當學生拿到複數 offer，都跟我說每個都超喜歡條件超好時就會在那裡天人交戰。我都會建議不要考慮太久，你真的都超喜歡就寫個小程式亂數選一間吧XD
因為我遇到很多學生遇到以下事情：
1.考慮很久最後因為主管太機掰，做沒幾天就閃人。
2.也遇過進到一間感覺氣氛很嚴肅的公司，但實際進去後才發現和同事處得很來
3.面試講得很好聽，但進去後天天瘋狂加班救火
所以才會有所謂的「試用期」，這段期間公司在觀察你，你實際上也在觀察公司，如何真的不合就別再浪費彼此時間，也不用擔心什麼「第一間公司很重要」，說真的你技術與能力有沒有提升，能夠展現出來才是最重要的。
為了避免所謂的十年經驗其實只是一年的經驗重複十年，你必須在每個時期都問問自己，這一季你在各方面有成長嗎？沒進步的原因是出在你自己還是在公司？如果某天公司撐不住了，你在外面是否仍有高度競爭力？
不論是前端還是各個領域，都逐漸被 AI 取代的時代，不要再以為單獨學一個技能就能混個十幾二十年，有個短短幾年就很偷笑了。
最後總結兩句話給正在尋找職缺/選擇職缺的新鮮人士：
1.持續提昇競爭力才是王道
2.自己當自己的權威人士，不要養出別人幫你做決定的壞習慣",,"['為什麼我都找不到職缺，是不是我能力不夠？', '大公司好還是新創公司好？', '不要盡信權威人士的建議', '不要太相信當下面試時對公司的第一印象', '拋開工作能做一輩子的刻板印象']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191801,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,13,[Round13]題材,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1513383047000000000,554,"題材在桌遊的組成中是最好嘴的了。
即使如此，還是需要時間取材、記錄，以便日後提煉出來點綴遊戲。.
除了因為本身的喜好，正好看到專業鄉民討論殭屍的話題
https://www.ptt.cc/bbs/movie/M.1511870944.A.EA9.html，
覺得好看之餘，也該是時候當個專業粉，
所以本次的主題就決定是中國(香港?)殭屍。
雖然很難再回想以前怎麼會那麼喜歡暫時停止呼吸系列，
不過緊張刺激中，又帶有絕對安全的""停止呼吸""一招，恐怕就是最大的魅力了吧。
嗯，倩女幽魂2中的定身咒也很棒，一起亂入吧 :D
之後的文章將不時的穿插這些作品的心得跟整理。
[電影] 鬼打鬼
http://suling213.blogspot.tw/2011/12/blog-post.html
Re: [討論] 林正英電影
https://www.ptt.cc/bbs/movie/M.1511870944.A.EA9.html",,"['題材的決定', '預計清單', '參考文章']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191602,SoftwareDevelopment,0,爬蟲始終來自於墮性系列,16,台鐵時刻表,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1513382780000000000,723,"好想工作室每天都有很多學員或社群夥伴到這邊來，也因為他在大橋火車站旁邊，所以很多人都是直接搭電車過來。常常聊得太開心，一不小心就錯過了末班車，所以每天都會時常查詢台鐵時刻表，今天就來做一隻爬蟲，讓我們能夠知道最近幾班的台鐵電車時刻。
ps. 不過台鐵時刻這個議題其實已經有很多人實做過，甚至有 open data 或 open api，不過我們會以最原始的網頁爬蟲來實作最基礎的做法。

台鐵的網站是 http://twtraffic.tra.gov.tw/twrail/TW_Quicksearch.aspx ，打開後真的是滿滿的大平台。先選擇啟程站，先點選台南區域再點選大橋車站，再選擇到達車站，選擇沙崙支線的沙崙站，然後再點選時間部分，其他項目我們就先留預設就好。(老實說，這個步驟真的很麻煩)
查詢完後，我們就會得到列車的資訊，這部分看起來就是 select dom 爾已，感覺應該沒什麼問題，我們就開始研究吧。
我們會將這隻爬蟲分解成三個動作：

我們先來觀察一下查詢的 request 會送出什麼。參數看起來基本上都還蠻直覺的，比較值得注意的，大概就是 FromStation、ToStation、TrainClass、searchdate、FromTimeSelect、ToTimeSelect、Timetype 這幾個。若不知道他是什麼意思，我們也能直接從網頁物件來做檢查，這樣就能 match 參數的意義。根據我們的需求來看，我們可以很容易的將參數組合出來，比較需要注意的大概就只有日期和時間，因為我們要送的是當下查詢的時間。

接下來我們用 postman 來測試看看，咦？乍看之下以為沒有得到列車班表，但凡事不能看表面，其實是有資料吐回來的。再仔細觀察一下，發現他把查詢結果寫在 html 裡面的 javascript，也就是說，我們必須模擬這個畫面的 js 才能取得這個變數。

既然他給我們的 data 是 json format，那也就不用解析了，只需要了解各個 key 所代表的現實意義就可以了。而知道他其實是用前端 render 的方式來組合 result table，那我們也可以根據一些 keyword 來查詢看看 render 的程式碼在哪邊，進而更切確的知道欄位對應的狀況。
我們先準備好我們要做查詢的資料，包含站名、車種、方向等等，同時我們使用 moment 來抓取現在的時間，時間區間為一個小時。(若你在半夜看到這篇爬蟲並且跟著做，那你將拿不到查詢資料...因為這個時間沒有火車啊啊啊!)
接下來我們 post request，拿到查詢的回傳頁面。
就我們剛剛研究的結果，發現 data 是在回傳頁面的內容裡面，因此需要模擬 js 的執行才會有 data，所以我們會使用 jsdom 這個 library 來模擬，並且要加上 {runScripts: ""dangerously""} 這個參數，這樣他才會執行裡面的 js。
台鐵的網站其實有很多優化的方向，但因為我們不是台鐵的 IT 人員，所以我們並沒有辦法直接修改他們的網頁，可是我們可以透過很多方式來讓整個服務提升，像是我們製作出 api 出來供其他服務應用，或是我們製作 browser extension 來改善使用體驗也行。
若你在生活上覺得有什麼不方便的，作為一個自幹型工程師，那你該做的不是去習慣它，而是應該動手解決它。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍伸應用']",,"['準備預設資訊', '查詢 request', '查詢結果解析', 'default data', '執行 request', '解析資料', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191762,自我挑戰組,1,花式PHP系列,9,Array：累加、累乘、花式操作,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1513382719000000000,572,"
今天有點懶的想梗了...
諸君，讓我們來程式碼直球對決吧！
把陣列裡的每一個值加總並傳回。
這個函式可以把陣列的每一組 key 與 value 對調！
這個函式很特別！
它讓你可以用一組陣列提供 keys、另一組陣列提供 values，
並把它們用一組 key 對上一組 value 的方式合起來！
比如說下面的例子，
我製造一組從數字 1~26 的序列；再製造一組從字母 a~z 的序列，
並把它們像拉鍊一樣的合起來～","['array_sum', 'array_product', 'array_flip', 'array_combine']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191796,自我挑戰組,0,蚵蚵攻城記系列,5,[Day05]水平置中(1/2)+blockandinline,azer19890427,https://ithelp.ithome.com.tw/users/20107340/ironman,1513382209000000000,553,"今天來練習一下水平置中
在這裡

我們就在這裡結束吧!!
要是可以按一個鈕這麼簡單就好了!!

再來要置中，置中的按鈕呢？
我們用margin的方式來讓他置中吧！
在CSS 中加入
就可以達成置中的效果囉！！

magin的value可以寫到四個！
value的數量不一樣代表了不一樣的意思。
這個方式是用於block element
像是<div>、<p>、<h1> 等
今天嘗試了水平置中的第一個方法，
在搜尋網路上前輩們的介紹看到了
block element和inline element的觀念，
想要先筆記一下。
block element : 就是一個區塊，有自己的高度 (height)也有寬度 (width)，佔據了一整行，除非用float。
inline element : Height and width 不能設定，elements 都會在同一行呈現。
有點攏統，
就還是實做一遍。

這裡可以看出 block佔據一整行的意思及 inline可以在同一行呈現 elements。
如果都加上

就可以了解到 width and height 可不可以設定了。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191761,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,11,11.斷開鎖鏈!低耦合、高內聚,依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1513382025000000000,541,"前兩天，在物件導向設計原則—SOLID、從被動變主動—依賴反轉這兩篇文章中，我們聊完 SOLID，接下來幾天的主題，原本預計來談談單元測試，在準備寫文章時，突然發現筆者忘記提到低耦合、高內聚這個很重要的觀念。囧
所以，今天我們來聊聊為什麼開發程式時，符合低耦合、高內聚的原則有什好處？
簡單來說，就是兩個模組間的關連性或相依性。
當兩模組間的相依性越高，那它們的耦合性越高，稱之為高耦合。反之，則謂之為耦合。
在高耦合的情況下，很容易發生一種情況。明明只是一個很小的需求異動，但是連帶影響到跟它有相依關係的部份。造成修改一小塊程式碼，導至很多地方都出錯，要花額外時間去修正被影響的程式碼。
最常見的情況就是資料與商業邏輯的高耦合，或是UI與商業邏輯的高耦合。
簡單來說，就是模組本身不需依賴其他模組，就能完成工作。
當模組的內聚力越高，表示模組包含的物件或功能就越多。雖然提高了模組本身的獨立性，減少跟其他模組的耦合性，但也可能造成重覆程式碼，或違背單一職責原則的情況發生。
高內聚、低耦合的目的，就是為了提升各模組功能的重用性、擴展性、維護性。
講白一點，就是為了達到盡可能不影響現有功能的前提下，完成需求異動的修改的目標。
內聚力與耦合性就像天平的兩端，一邊增加，另一邊就必定減少。要如何取得兩者之間的水平，就非常考驗工程師本身的系統規劃與設計能力。
持續優化程式碼的要點之一，就是在每一次的開發中，程式都要盡可能的符合高內聚、低耦合。這可以有效減少，發生的需求變動時，所需變動修改的工作量。
如果軟體工程師沒有特別自我要求，又為了快速開發的目標，極有可能造成高耦合、低內聚這種，充滿壞味道的程式碼。如果軟體交付出去，就不需要維護跟修改，那當然沒有什麼影響。
但是……
在軟體業，這樣的情況不能說沒有，但少至又少。大部份的情況，可能會要求變動部份功能，來應付另一個客戶的需求。
看倌們想像一下，有一支軟體當初為了快，造成程式碼中，UI、資料與商業邏輯的程式充滿了高耦合、低內聚的壞味道。而這支軟體，又因為客戶需求些微不同，分成了四、五個版本。
我們先假設，這支軟體原本的資料來源是 txt, 但好死不死，一年後，老闆指示這支軟體，所有出貨的版本，要求能同時支援 csv 的資料來源。
保證負責維護修改該軟體的工程師，會改到想吐血。這是因為高耦合、低內聚的程式，往往修改程式是牽一髮而動全身。而且無法直接替換模組，變成改完一個版本後，相同的事情可能要再重覆做。
搞笑談軟體, 亂談軟體設計（1）：Cohesion and Coupling
IT閱讀, java多聚合，少繼承，低耦合，高內聚
關於文章中，模塊粒度的說明，筆者覺得非常值得看看。
iT邦幫忙, 中鳥階段-高內聚，低耦合。",,"['耦合(Coupling)', '內聚(Cohesion)', '小結', '推薦文章']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191798,自我挑戰組,0,"Let's""Go""系列",10,Day10　DataTypes,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1513381933000000000,514,"接續前面，今天要來提 Array
Array是由特定長度的元素所組成，如下我們宣告一個有3個元素的Array
Array內的元素我們可以透過a[n]的方式取得",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191797,SoftwareDevelopment,0,簡潔高效的PHP&Laravel工作術：從ElementaryOS下手的聰明改造提案系列,5,第5天：elementaryOS的軟體安裝與更新,shengyou,https://ithelp.ithome.com.tw/users/20107229/ironman,1513381801000000000,566,"本文同步刊載於作者部落格：https://medium.com/@shengyou/2018ironman-eos-for-php-developer-day5-6542e7f91740
如同前面介紹所提的，elementary OS 出廠預裝的應用程式非常少，僅有一些常備應用程式，如瀏覽器、電子郵件、行事曆、音樂、照片、影片、文字編輯器，相信這樣的應用程式數量一定不能滿足於我們的日常工作。針對這點，elementary OS 的策略是提供一個海量、官方審核認證的應用程式商店，讓軟體安裝與更新這事變得非常輕鬆簡單。
elementary OS 內建應用程式商店，只要透過應用程式 (Applications) 選單叫出應用程式商店，就可以在上面瀏覽由全世界開發者所上架的軟體。除了應用程式商店首頁挑出來的精選應用程式外，也可以透過分類瀏覽、搜尋等方式，供使用者尋找適合自己的應用程式。

應用程式商店除了可以拿來安裝軟體外，也可以用來更新。只要將視窗上面的頁籤切換到更新頁，應用程式商店就會根據本機端安裝的軟體清單開始檢查是否有對應的更新？有的話就會在清單列出，使用者一樣只要簡單的透過點擊更新按鈕就可以將應用程式更新完畢，整個操作體驗非常流暢。

elementary OS 的開發團隊希望提供最好的操作經驗給使用者，所以希望開發者可以開發原生 (Native)、高度融合作業系統、良好效能的應用程式給 elementary OS。因此官方除了提供設計指南、開發手冊等資源給開發者外，也鼓勵開發者透過應用程式商店的機制將自己的應用程式上架，並在官方的部落格上面定期介紹優質軟體，非常用心。而這些上架的應用程式，也可以從使用者付費的循環裡獲得持續開發的動力。相信這樣的正向循環機制可以讓整個生態更加的健康與完整。
應用程式商店的設計真的非常美妙，假如您是終端使用者 (End user)的話，一定會愛上這個設計。不過，假如您跟筆者一樣是開發人員 (Developer)，甚至也不是第一次使用 Linux 作業系統的話，您的心裡想的一定是：「怎麼可能只靠應用程式商店裝？這哪夠啊~」或是「用 Linux 就是要用終端機啊！」。
是的，假如您要裝的應用程式不是圖形介面的話，是沒有辦法在應用程式商店裡找到的，這時候就要靠指令啦！在上一篇操作世界觀裡，其實有先埋好了一個哏，就是您可以在elementary OS 裡，使用全域快速鍵 Meta+T 立馬開啟一個終端機視窗，隨即就可以開始輸入指令啦！

好消息，如何在第一篇的介紹裡提到的，elementary OS 是以 Ubuntu 為基底，這意味著它是使用 Debian 流派的 apt 套件管理庫 (眼尖的讀者應該已經在上一張圖裡發現它根本就是直接抓 Ubuntu 套件庫的網址啊啊啊)。換言之，所有你在 Debian 流派習慣的 apt 指令可以完全無痛的在 elementary OS 使用。
相信這時候的您就像前鬼一樣解開封印啦！可以在終端機裡試試這些指令：
假如上面的 apt/deb 指令對您來說很陌生，yum/rpm 您也沒聽過，對您來說，在指令列裝套件應該是用 brew 的話。那我想您一定是從 macOS 轉過來的使用者吧？
沒問題，在 Linux 也有您的菜，請出門右轉使用 Linuxbrew！安裝方式非常的無腦，根據官方文件只需要先輸入以下指令：
然後再把以下 script 貼進您的 dotfile 裡：
接著重開終端機應用程式，就可以使用以下指令啦！
不論您是終端使用者 (End user) 還是終端機愛用者 (Terminal lover)，也不管您是從哪個平台轉過來的，相信您一定都能在 elementary OS 找到讓自己最舒服的位置。
想了解更多終端機祕訣嗎？歡迎繼續關注這個系列文章喔！",,"['應用程式商店', '唔？這樣真的夠嗎？', '咦？沒聽過 apt/deb、yum/rpm 這些指令？', '終端 V.S 終端機', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191795,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,11,【Day11】去除依賴之二－Stub2（作者取材中）,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1513381433000000000,521,"由於最近進度緩慢，部分資料先行發佈
本篇會說明：模擬異常，和使用get、set注入虛擬對象
----持續看書中----",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191794,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,12,React,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1513380801000000000,495,"今天終於進入重頭戲，我們來講講已經紅了一陣子的 React。
我自己是第一次接觸到 React，在這之前和大家一樣，都是使用 jQuery, Sass 在做網頁，一但網站的規模大起來，除了CSS命名的問題外，另外一個困擾就是 DOM 的操作，為了這二個大問題我也曾經研究過 BEM 的命名方式，以及 JavaScript 的優化方式。等到這回用過 React 之後，至少 CSS 命名的問題可以不用再煩惱了！
網頁由 DOM 所組成，React 網頁則是由 React elements 所組成，這是一個 React Element：
是的，你沒看錯，直接把 HTML 寫成變數的值，在 React 中叫做 JSX。
React element 只是靜態的元素，頁面中互動的基本元件叫做 React component，component 是由 elements 所組成，一個 component 是一個可接受輸入值的 function 或是 Class，然後回傳一個 React element。
除了 React 這個 library 之外，我們還需要另一個 React DOM library，這個庫的作用在將 React element 加到 DOM。
除了用 JSX 建立 React element 之外，也可以用 React.createElement()。
有沒有覺得這樣寫起來比較麻煩？所以一般還是用JSX的方式寫。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191788,DataTechnology,0,Python學習筆記系列,12,[Day12]SetandBooleans集合和布林值,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1513380641000000000,489,"大括號或set()函式都可以用來創建set，如果想創建一個空的set，必須使用set()而不是{}，空的大括號會創建一個新的dictionary 物件


我們可以將一個list強制轉換成set，不過set裡不會出現list裡的重覆值


資料來源: Go from zero to hero in Python",,,"['Set集合是一組無序且沒有重複的元素，Set物件支援聯集、交集、差集和互斥等數學操作', '在Python裡有布林值，布林值為真假值，在Python中我們用True代表真，用False代表假(以數字1代表True，0代表False)，真和假的運算也只會有真假值，此為邏輯運算']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191792,SoftwareDevelopment,0,每天Racket3分鐘系列,12,"(hash'day-11""為你的資料命名—Racket的Hash"")",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1513380250000000000,487,"曾經有人統計過，一個 Programmer 工作中，佔比最重的事情是什麼，為變數取名字佔了 50%！取名字真的是一見開發過程中最難的事情。而如果一次要取大量的資料名稱呢？
Racket 當然也支援主流語言常見的 HashTable 型態，如果各位有寫過像 Scala 或一些具有 FP 特性的語言，在碰到這類的資料結構時，大概會有一個直覺反應：這是可變的（mutable），還是不可變的（immutable）？
不管是 List、Pair、Vector、HashTable，在 FP 語言裡，大多是建議你用不可變的機制來操作，因此我們先介紹不可變的 HashTable：
在 Racket 語言裡，對資料結構進行存取，都會預設有一個 -ref 函式，不管是在 List、Vector，當然 Pair 這類簡單的結構例外。因此 hash-ref 是存取 HashTable 的，vector-ref 是存取 Vector 的。而 hash 函式，如同 vector 與 list 一樣，透過它可以建立一個不可變的資料結構。因為 HashTable 是一種 Key-Value pair 的結構，hash 後頭的參數必須是偶數個，以 key1 value1 key2 value2 ... 這樣的規則排列。
而若是要建立可變的 HashTable，還記得 Vector 有個 make-vector 嗎？HashTable 也有個 make-hash：
然而，進一步的資料操作可以參考 Racket Guide [1]",,['1. 世界上最難的事'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191791,SoftwareDevelopment,0,看到code寫成這樣我也是醉了，不如試試重構？系列,5,敏捷與重構,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513379627000000000,544,"敏捷軟體開發宣言是現正流行的開發精神。敏捷宣言雖然看起來有點抽象，其實背後有十二個原則：
我們最優先的任務，
是透過及早並持續地交付有價值的軟體
來滿足客戶需求。
竭誠歡迎改變需求，甚至已處開發後期亦然。
敏捷流程掌控變更，以維護客戶的競爭優勢。
經常交付可用的軟體，
頻率可以從數週到數個月，
以較短時間間隔為佳。
前三點原則，相信老闆聽到都會非常開心。相信這些不只是老闆想要的，團隊也非常想要。
開發者也希望寫好的程式能馬上被使用，並也能常常推出讓使用者滿意的新功能，設計人員、企劃人員亦是如此。
只要先有共識，我們就可以繼續看下去：
業務人員與開發者
必須在專案全程中天天一起工作。
以積極的個人來建構專案，
給予他們所需的環境與支援，
並信任他們可以完成工作。
面對面的溝通
是傳遞資訊給開發團隊及團隊成員之間
效率最高且效果最佳的方法。
大家都希望能做到持續交付（Continuous Delivery），但我們要做什麼事才能達成這個目標呢？
這三個原則告訴我們要持續溝通。為什麼會強調持續溝通呢？這裡來聊個小故事：

圖片來源：壹讀
有本很有名的漫畫叫火影忍者，裡面有個崇高的角色叫火影，而主角漩渦鳴人一開始則是個忍者學校裡的吊車尾學生。但鳴人在故事的中後期，成功的練成火影無法練成的忍術。這個吊車尾鳴人練習的方法是：影分身之術。它能創造另一個鳴人，並且擁有自己的意識，當解除忍術時，會將當時的記憶和知識傳回本體。反覆操作就能短時間得到更多練習經驗，因此最終學成了高難度的忍術。
我們來換成開發情境思考一下：團隊有十個人，如果是九個影分身加自己組成的，工作一天後解除影分身，就可以知道當下所有需求、邏輯、技術、知識、進度等等，而且也會知道目前狀況該做什麼樣的決策，比方說進度超前，可以多花時間在優化程式；或是進度落後，該思考如何用品質換時間等等。
畢竟這是漫畫，現實團隊十個成員都會是不同個體，而各自放在腦袋的東西，只要不溝通是不會有人知道的，如果決策者不注意警訊的話，很容易會因為資訊不足而下錯決定；而有持續溝通的團隊則會像鳴人一樣，將成為一個強大的自我組織團隊，持續為公司產生價值！
因此，持續溝通是非常重要的敏捷精神！
可用的軟體是最主要的進度量測方法。
敏捷程序提倡可持續的開發。
贊助者、開發者及使用者應當能不斷地維持穩定的步調。
持續追求優越的技術與優良的設計，
以強化敏捷性。
能快速交付當然很好，但持續交付才是敏捷精神所提倡的。
為了要擁抱改變，在需求調整的過程中，技術債有可能會不斷產生，要如何做到持續？當然，除了團隊要追求技術之外，還要持續改善品質，才有辦法做到持續交付。
是的，為了改善品質，這時候我們就會需要重構！
精簡──或最大化未完成工作量之技藝──是不可或缺的。
最佳的架構、需求與設計皆來自於
能自我組織的團隊。
團隊定期自省如何更有效率，
並據之適當地調整與修正自己的行為。
最後，團隊要有自信但不能自滿，隨時面對環境變化做調整，並持續精進個人技術，才是一個好的敏捷團隊。
許多敏捷開發方法的概念與重構在做的事很雷同，因此敏捷開發很適合使用重構，甚至會要求流程也要使用重構！
以下是幾個跟重構有相關的敏捷開發方法：
TDD（Test-driven development）與 BDD（Behavior-driven development）要求先要有規格，再開始寫程式，而最後再進行重構。換個角度來看，它們都是先處理簡單的目標，快速達成後，再開始改善架構。
雖然軟體是軟的，改善架構的難度理論上是簡單的，但只要範圍一大，難度就會指數性上升。 TDD / BDD 建議每做一個功能，就重構一次，只要有做到頻繁重構，每次重構的難度就不會太高－－因為每完成一個功能就立刻清理當下的技術債，就比較不容易被循環利息懲罰。
Scrum 支持先交付不完美、但可以操作的成品，接著得到使用者回饋，進而持續改善產品。
同樣地，重構也支持先設計不完美、但可以跑的程式，後續再做設計的改善。",,"['重構與敏捷開發方法', '今日回顧', '參考資料']","['TDD / BDD', 'Scrum']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191790,ModernWeb,0,從無到有，使用Go開發應用程式系列,7,ArrayType,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513379611000000000,509,"Go 語言的世界裡，陣列為固定長度，元素型態與長度都是陣列型態的一部分。
使用 [n]type 來宣告一個陣例，其中 n 是數字， type 則為型態，下面簡單的範例：
這裡宣告 arr 的型態是 [5]int ，因「元素型態與長度都是陣列型態的一部分」，所以 [10]int 與 [5]int 會是不同的型態。
另外因為後面三個元素並沒有指定新值，但可以看到它的初值是 0 ，也就是 zero value 。
宣告給值的話要使用 := 指定，也可以使用不固定長度 [...] 來宣告，它會依後面給值的數量來決定陣列長度：
如果存取陣列超過範圍時，會出現 out of bounds 的編譯錯誤
陣列的內容是值，所以也可以複製給另一個變數，如：
最後一行是型態不一致的錯，型態與長度相同，才有辦法複製值。
陣列可以用 == 與 != 來比較內容，一樣型態與長度相同才能比較。
當宣告陣列時， int 是一種型態，所以我們在前面加上 [n] 即成為 int 的陣列型態。
同樣地， [n]int 也是一種型態，在前面加上 [m] 就會成為 [n]int 的陣列型態。
下面是一個巢狀陣列的例子：
上面可以觀察到，這是一個有 3 個 [n]int 元素的陣列。
巢狀陣列也可以宣告同時指定初值：
其中 arr3 不能這樣宣告的原因是：因為長度也是型態的一部分，宣告陣列時元素的型態必須是確定的，所以 [2]int 才能拿來做最外層陣列的元素型態， 而 [...]int 不行。
陣列除了可以用 for + len() 來走訪外，也可以使用 for range ：
今天學習了陣列宣告的基本，也多了解了兩個關鍵字 for range 和一個 function len() 。",,"['宣告', '複製', '比較', '巢狀陣列', '走訪', '今日回顧', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191789,自我挑戰組,0,花式PHP系列,8,Array：用語統一,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1513379421000000000,514,"剛剛突然注意到在這系列文中有一些用詞，我常常會不小心抽換成其他詞面 Orz
大致上對這幾篇文章的用語修正之後，
另外打這邊解釋一下我的用語～",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191773,自我挑戰組,0,用laravel尻出自己形狀的linebot，還要撐三十天！系列,10,【第十天】支線任務：單數錯了嗎？,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1513378339000000000,558,"各位晚安啦！星期五到了就來聽歌佐文章吧！

昨天實作漫畫推送時發現到，LINE不吃http開頭的圖片網址來做縮圖推送！
在這放鬆沒事做的周五晚上，就讓我們來好好瞭解到底這http和https的差別是在哪裡！

以下是不負責任的認知概述：
大家應該都有用過Chrome，所以應該都曾注意到網址前面的小icon！
他們之間的差別就在於有沒有使用SSL憑證。
如果懶的瞭解或一知半解的話就把它當作那是核可的安全認證標章，
所以只要有https就是申明自己是安全網站的方法！
就像我們吃的食物上面會有的食品標章一樣！
高進他媽：他好像永遠對著你笑，笑得你心裡發寒

沒錯！多年前的Ｘ牌食用油也是這樣對著台灣人笑的～
這個SSL憑證貌似很安全，但賣憑證的人也會是安全的嗎？
恩～看來黑心的賣家到處都有！
至於是什麼樣的手法會讓這https的機制變的不安全咧！
上頭文章裡有提到中間人攻擊
恩～大概懂發生什麼事，可是一堆更深入的專有名詞還真的是好大一個坑可以跳下去啊！
應該是博人說：看的懂企劃文件需要觀落陰，那要把這些全部搞懂我可能都已經會通靈之術了！
我想應該是......啊！時間超過兩小了！
大家週末愉快啦～！明天開始我們來摸摸看slack吧！",['【第十天】支線任務：單數錯了嗎？'],"['還是只是單複數的差別咧？', '那麼這些跟我們寫的小程式有很大關係嗎？']","['http', 'https']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191787,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,12,假日一要卡文的啊,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1513377901000000000,532,卡卡獸 卡嗤卡嗤,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191775,SoftwareDevelopment,1,來做個網路瀏覽器吧！Let'sbuildawebbrowser!系列,5,瀏覽器引擎處理HTML的簡易版,微中子,https://ithelp.ithome.com.tw/users/20103745/ironman,1513377783000000000,605,"這篇一樣使用 robinson 這個「玩具」來進行講解，還記得我們第二篇文章中提到解析的部分嗎？分為 HTML 和 CSS 解析。忘記的話、或是之前偷懶沒看的話，可以回去看一下，那篇解釋瀏覽器如何進行解析，「How browser work」一篇文章更是對原理講得非常仔細，讀懂原理才能知道這篇在做什麼。
我們知道如何處理一個 DOM 了，接下來我們要來解析 HTML 本身了！解析好的 HTML 便可以使用我們昨天寫好的 DOM 模組來組裝。這樣一來就完成 DOM Tree 的部分了！
robinson 關於 html 的部分在 robinson/src/html.rs。程式碼也不算太長，比昨天稍微朝一點點而已。
玩具當然無法滿足我們，我們最終的目標是要去挑戰 Servo 專案，這邊先告訴大家，Servo 的 html parser 是 html5ever，其實做原理也是照著 SPEC 來完成的，被獨立出來作為一個模組。意思是他不是包含在 Servo 裡面，假設你也用 Rust 語言寫一個「玩具瀏覽器」，你可以完全使用這個套件來完成 html 的解析。把時間花在更想實作練習的項目上！
以下為我直接複製 html.rs 過來，並拆解成片段來解釋在做什麼。
建議先去看原始碼，大概意會一下原始程式碼的想法。再來看我的解說。
程式的作者也有寫文章解釋，但我的絕對比他的更詳細，當然還是中文的 X)
原始程式碼的註解和一些我覺得不用特別解說的部分這邊有拿掉。這邊只挑出關鍵的邏輯部分。
這段程式碼有一些使用 Rust 語言的特性，不影響邏輯理解，但是如果想完全瞭解程式碼的運作過程，最好還是去了解一下 Rust 的使用方式。
好啦！我們上路！
用我們寫好的 Parser 來進行解析，其中 dom::elem() 是我們昨天定義的函示，解析完 HTML 就可以建立一個新的 DOM。Parser 的實作在下面。
建立一個 Class 叫做 Parser，你可以完全不要這樣寫，這邊只是一種可行的方式
Parser 的 method
以下是 Parser 的 Methods
這邊把所有子節點都解析進來
判斷解析的節點是元素還是文字節點。如果是文字節點就會者的像是，<h1>Tiltle</h1>，可以看到裡面只有文字，所以這邊用<來判斷是什麼節點。當然因為這邊假設只有兩種節點型態才能這樣做。
解析一個元素，這邊把檢查一起寫進來了，正式的產品不建議這樣做，最好是能夠把測試分離。
一個元素大概長這樣:
然後你再看一下這邊解析元素作的部分，就能明白為啥要有三個步驟。
這邊認定 tag 的名稱只會有英文和數字
Attibutes 就像是 class=""btn red box""，會用空白隔開，所以這邊解析屬性時，將屬性內容用空白切開，跑回圈來記錄。
只處理元素的 name，像是 <input name=""upload""> 這種。
解析文字節點，上面有提過，節點內不該有<存在
一般瀏覽器對於多餘的空白都會直接忽視，所以這邊有特別處理一下，其實不是很重要啦
這邊實現的解析器，是從左到右，一個字元一個字元向右判斷，然後把輸入的字串跑完來做解析
以上就是簡單的 HTML 解析器，基本功能都有了，當然很多缺陷，不僅一堆特殊狀況無法處理，很多的標準 HTML 寫法也不支援。不過我們也大概了解 Parser 的作用和做法了，可以以此改進，或是有興趣的話就去貢獻一下到 html5ever 吧！
明天討論 CSS，大家再見！
關於作者
劉安齊，軟體工程師，熱愛寫程式，更喜歡推廣程式讓更多人學會",,['實作'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191767,SoftwareDevelopment,0,初探Kotlin系列,10,[Day10]ClassesandInheritance-2,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1513377761000000000,499,"Kotlin所有的類別最上層都繼承Any 就如同Java最上層都是繼承Object一樣
但Any跟Java的Object不一樣 Any除了equals(), hashCode(),toString()沒有其他的成員
上述類別默許就繼承Any
Kotlin繼承方式如下
如果子類別有primary constructor 則必須使用子類的primary constructor的參數完成父類的初始化
如果子類沒有primary constructor則必須在secondary constructor中使用super關鍵字完成父類初始化
Kotlin中所有類別預設都是final的,也就是不可被繼承
想要被繼承的類別需要使用open關鍵字
想要overridinBase.v()的話 就必須要有open的關鍵字
反之 不想被繼承的話則可宣告final**
Overriding Properties跟Overriding Methods方式差不多
val的屬性可以overrid為var,反之則不行","['Inheritance', 'Overriding Methods', 'Overriding Properties']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191784,ModernWeb,0,ASP.NETMVC網頁程式介紹系列,6,[Day06]ASP.NETMVC後端傳資料到前端介紹(二),小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1513377588000000000,533,"銜接昨天的例子，首先看Student就是一個Model，當然它不是MVC所謂的Model的全貌，應該說只是Model的一種，關於名詞在此就不深究
通常應該是在Models資料夾另外建立一個cs檔案來放這個Model，不過在此就先偷懶一下直接跟Controller放在一起。
先看public string id { get; set; }這一行，這是C#提供的基本的Get(取資料)跟Set(設定資料)的方法，也有人會先定義一個private物件，再用public物件對這個private物件做Get跟Set，其實Get跟Set的方法可以有很多，不過沒時間去找這方面的資料，在此先不深究。
然後一般來說我們定義了一個class，比較好的習慣是要先給它預設值，所以我定義了兩個建構子
這個建構子是預設的建構子，如果完全不定義任何建構子，C#好像也會給它預設值，而且印象中跟我的預設值是一樣的，C#比較不會像C++會給一個奇怪的預設值，接下來又定義了一個建構子
這個建構子讓我可以直接在宣告物件的時候就帶入我要的值，可以把好幾行的程式縮在一行呼叫即可，如果沒有宣告這個建構子，原本應該是要這樣
有了這個建構子只要一行就可以了
那後面又宣告了一個ToString()方法
在C#當中所有的物件都可以使用ToString()方法，但是一般預設的ToString出來的一定不是我想要的，所以在這裡可以將原本定義的ToString()覆蓋過去，就可以按自己要的方式來顯示內容，如果沒有定義ToString方法，原本出來的畫面會變成這樣

連專案的路徑都寫進去了，如果定義了以上的ToString方法，就會顯示出昨天那個圖

今天大概分享到這邊吧，明天再繼續分析同樣的程式",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191786,ModernWeb,0,初探前端之路-React-由生到死的踩地雷系列,6,Redux與React結合,Luis-Chen,https://ithelp.ithome.com.tw/users/20103556/ironman,1513377503000000000,506,週末研究課題,['前言'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191695,ModernWeb,0,Confluence線上協同作業之平台系列,11,問卷功能,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1513376801000000000,493,"在confluence中如果有使用問卷功能的話，可以透過http://www.wufoo.com/ 與html macro的結合，來做出類似問卷的功能，但在進行之前，你必須要在該網站註冊一個帳號，才能進行後續問卷表單設定，但我曾經遇過有USER有提到，是否可以在進入某個Space之中，同時彈出一份問卷的填寫內容，要來讓使用者來填寫，這如果在aspx，我或許知道如果來做此效果的呈現，但在confluence要怎麼來做呢？首先要考慮幾個問題，其一要如何針對某個space來控制，而我們第一個想到的方式，應該會類似下列的概念應用
但問題來了，要怎麼抓spacekey這些參數來使用呢？因為它不像我在aspx/php網頁中，可以指定session/querysting/cookie的方式，且目前也不知道原廠如何定義與傳遞這部分的資訊，且彈出視窗的語法要怎麼在confluence來寫？且要如何在page中來加入問卷表單？及要如何來控制填寫過問卷的人，不用再彈出問卷畫面了。也因此遇到這些問題，感覺此問題處處卡關不知道如何來繼續。
也的確此問題在剛開始的半年內，只能用下列的方式，做出簡易的問卷畫面，網路上有頁面載入後彈出視窗的javascript語法，而confluence管理者功能中，有個custom html的功能，透過此設定來將javascript的語法加入在其中。那問卷的表單呢？我目前是使用google form的應用，來將問卷表單設計在其中。

而半年前的解決方式是透過上述方式，在前幾個星期，有逛到一個Announcement Banner for Confluence plugin  (https://marketplace.atlassian.com/plugins/com.nolddor.announcement-banner/server/overview)，而讓我眼睛為之一亮的是在他介紹網頁中，有提到一個彈出視窗的畫面，而那時候心想應該是可以利用此部分的應用來做出類似上述問題的效果，而經過與原廠的聯繫確認，有拿到下列的sample code來使用，他感覺像是jquery及script的使用，雖然我看得懂他的用意，但要我來構思這樣的語法，我可能想很久也不一樣想得出來
也期待表單的問題可以再精進，雖然此部分我目前想不到甚麼解決方式，有一個比較接近的plugin，將會在下一篇來介紹。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191577,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,7,[VII]用CodeIgniter的30天-新聞模組實作(下),qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1513376635000000000,495,"上次我們成功的撈出資料庫中的資料
資料庫操作有 新增、修改、刪除、查詢
現在我們只做了查詢，如此稱不上一個完整的頁面
所以現在我們來實作對資料庫的操作
當然要先建立一個表單，才能塞東西進資料庫
application/views/news/create.php
再來回到 我的 news 的 controller 中
加入
Model 也要做修改，這樣才知道怎麼把內容塞進資料庫中
還有完成新增的時候顯示的顯示頁面，這邊隨便打個「新增成功」也可以
application/view/news/success.php
最後和往常一樣，只要 controller 有更動，都要設定路由
config/routes.php
現在打開
根目錄/index.php/news/create 就可以開始新增文章啦",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191716,自我挑戰組,0,再戰軟體工程系列,1,『量化工程師的忙碌度』--你是哪一個,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1513375753000000000,615,"『好忙啊，好忙啊！』身為工程師，時不時地就有這種心情吧？在產品發展的過程中，隨著功能越來越多，客戶需求變更，或是緊急修正線上bug，每天每天的工作忙碌度都不太一樣。忙碌這種事當然是無可厚非，在這個競爭的時代，有的忙碌代表公司有生意做，是值得高興的。只是，人畢竟不是機器，會累，會低落，也會生病。人比較不像CPU，買來就是隨時操到100%才划算。今天我們要挑戰的是，史上第一遭：把工程師的忙碌度量化與分類，快來看看你是哪一種。
新進公司或新人初出茅廬，一開始就像塊海綿，花很多心思成長與學習，也相當努力，這時候忙碌度隨著所學而越來越多，這是很合理的，畢竟能力越大，被交派的任務也越多嘛。一段時間過去了，一樣的事一直重複做，雖然做的事沒有變少，但是因為熟練了，加上出錯比例下降了，自然忙碌度也就一直維持在一定的地方了。
然而，如果妳的忙碌度像一條log曲線，你要小心了，這代表你的公司或團隊並沒有在成長，他也許還是賺錢賺得不錯，但是在業務拓展方面，沒有什麼起伏。亦或者是，雖然公司有在成長，但是工作都被指派給比你更適任的人手上去，那你就更要小心了。

這種忙碌模式有兩種情形，一是你一直很忙，沒有停下來休息的一天，也沒有喘口氣的時間，工作一直來一直來，你就一直做一直做。雖然充實，但累啊！另一種則是妳就一直處在不太忙，但是也有點事做的狀態，這代表公司沒有非得要你不可，但是你也沒犯什麼大錯非把你踢走不可。
不管是哪一種，其實都是不太適合長久維持的狀態。

這就是最典型的工程師日常了。專案初期，游刃有餘，每天吹著口哨哼著歌，等到deadline快到了，開始沒日沒夜的瘋狂加班測試修改，最後壓秒送出，又過一關。

不做短期專案，只做長期產品。定期規劃執行，並在適當時機停下來審視狀況，一但發現不對勁，馬上調整方向，並搜集客戶反饋，再度規劃執行，停下來審視...。於是，再忙也有限，因為你的短期目標很明確；再閒也有限，因為審視完馬上又要訂定下一期的短期目標，又要開始規劃執行了。

工程師，上面哪一個更貼近你的生活？妳覺得滿意嗎？
如果有機會改變，你想變成上面哪一種？
如果你想變成那一種，你覺得你第一步應該做什麼？
你的生活怎麼過，我無法評論，但是，如果你想要轉變成什麼樣子，可以確定的是，你就一定要想點辦法做點什麼才有可能。愛因斯坦不是說了嗎：『一直重複做一樣的事，卻期待不一樣的結果，那肯定是個瘋子。』",,,"['log (x)', 'a', '2^x', 'sin(x)']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191783,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,13,NPMInstall到底做了些什麼？node_modules檔案結構+特性入門,"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1513375393000000000,506,"Hi 大家好，我們昨天介紹了在你的專案中使用 NPM 幾個最基本的步驟
npm init 和 npm install
我們可以注意到，npm init 執行的動作很簡單
那就只是幫我們創建 package.json 的 boilerplate
而像是有廣大生態系的 npm，其實 package.json 裡面的內容也是包山包海的
最後的進度是到，我們發現了 npm install 後有三樣東西改變了
node_modules 裡面除了剛剛安裝的 selenium-webdriver，還安裝了許多其他的套件

以及莫名其妙出現的 package-lock.json
(備註: 我這裡使用的是 npm 第 5.6.0 版，如果你發現 npm install 的結果不同，建議至少升級至 npm 5.0.0 以上)
記得我最早在寫 Python 時
許多小的 Project，會在 README 裡面寫
這個 Project 需要使用哪個 Dependency
有寫還好，我頂多使用 pip 一個一個安裝
但是遇到什麼資訊都沒有的 Project，你就只得等執行後
看執行錯誤，把相對應的套件裝起來
這邊 npm 為了方便
他會在你每次 npm install 時
都將有安裝的套件寫入 package.json
這樣以後別人要使用你的 code
會可以很輕易的知道該使用哪些 dependency
而且還可以確定使用的版本
(Python 後來有使用了 venv 這樣的 Dependency 管理機制，後面會提到)
這邊有個有意思的地方
那就是，跟 python 使用 pip 不太一樣
在 python 裡，使用 pip 安裝過 selenium 的話
你會發現，你之後再同台電腦上
不管寫什麼程式，都可以直接 import selenium
這個原因是，pip 預設會將這個函式庫裝在類似 usr/local/lib 這樣的地方
讓你所有寫的 Python 檔，預設都去一個地方讀這些函式庫
這樣最大的問題是
當你 Project 有一個以上時
有時候不同的需求
可能會使用到同個函式庫的第 2 版 或 第 3 版
這時候，因為你的 usr/local/lib 只能存在一個版本的 selenium
你每次都可能得把它覆蓋掉
並且
當你想把你的 code 放到 server 端去跑時
你很難一眼看出這一堆 usr/local/lib 的函式庫
有哪些是被你專案所需要的，其他是其他用途的
這邊 npm 解決這個問題的做法
是每個專案要使用的函式庫
都直接安裝在他的資料夾底下
保持每個環境(資料夾)，永遠都不會有相衝突的機會
而這個資料夾就是 node_modules
(你可能會覺得這樣有重複的函式庫，豈不是會浪費很多空間。
沒錯！ npm 這樣本地儲存的方式的確比較耗費空間
但是他同時也避免了上述的全部問題
所以後來像是 Python 社群，也自己開發了一套工具 venv
他可以把 pip 預設的安裝路徑變成這個專案資料夾底下
並且創建一份 requirements.txt 來記錄所有依賴
而在 Ruby 裡，比較接近的東西會是 bundle)
這邊其實就非常簡單了
有了 package.json 紀錄我們所有的函式庫
我們之後想把 Project 放到另一個環境時
我們只需要複製我們的原始碼，和 package.json
之後執行 npm install，如果後面不加套件名稱的話
npm 會當作是你想把 package.json 上現在缺的 Dependency 都裝回來

這邊是一個範例
首先我先使用了 tree node_modules -L 1 這個指令
來展示 node_modules 下面有的所有 dependency
接著，我使用 rm -rf node_modules 來把 node_modules 整個砍掉
但是我們會發現在再執行 npm install 之後
我們之前所需要的函式庫都回來了
這可以幫助 npm 跟 git 相容
因為你不需要把整個龐大的 node_modules 都丟進版本控制裡
只要把 package.json 儲存起來就好了！
如果你有注意到的話，package.json 雖然只有紀錄 selenium-webdriver 一個套件
可是我們卻安裝了 30 個函式庫
(還只有一個是 selenium)
原因是，(這裡的)selenium-webdriver 本身也是使用 node.js 開發的專案
他本身八九不離十也是使用 package.json 來管理他的依賴
我們這邊可以實際進入 node_modules/selenium-webdriver 來看看
可以發現，selenium-webdriver 因為也使用 npm 當作 package manager
他的檔案結構跟我們的專案很像

而他的 package.json 也同樣地寫著 selenium-webdriver 所有會用到的 dependency
(這邊要注意的欄位有 devdependencies 和 dependencies，詳細差別後續篇章會介紹)
selenium 這個專案也有用到像是 jszip, express 這樣的套件
可是在他的資料夾底下，卻沒有 node_modules 來給 selenium 使用
原因是我們是把 selenium 當作依賴加入我們的資料夾
npm 聰明的地方是，他在安裝 selenium 時
會順便把 package.json 讀過一遍
如果看到有其他 dependency，就會在遞迴(重複)性的去安裝這些 dependency
像是假設 jszip 又需要其他 dependency，將會一直安裝直到全部都有為止
這也是 npm install 為什麼會花比較久時間的原因
希望今天的介紹可以讓你對 npm 有一個基本，但是扎實的理解
明天我們會介紹 package-lock.json 這個檔案，與 npm 的競爭對手，yarn
有任何問題都歡迎提問","['為什麼 npm 要紀錄我們裝過哪些套件？', '為什麼會有 node_modules 這個資料夾', '裝在 usr/local/lib 哪裡不好？', 'npm 的做法', '如何解決函式庫龐大的問題', 'npm 怎麼會安裝一大堆其他的 dependency ?', '原因', '明天']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191782,ModernWeb,0,PHPlaravel的邂逅系列,12,DAY12-Database介紹PART1,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1513375228000000000,515,"在專案的目錄底下會有一個.env裡面可以設定mail、session、還有專案的相關設定都在裡面，資料庫的連接也在這邊設定，這裡有很多帳號密碼，所以不要把這個檔案傳到網路上去，可以看到目錄底下還有一個.env.example的檔案，這是個預設檔，git上傳會忽略.env檔，而上傳.env.example的檔案，所以不要覺得奇怪怎麼沒有幫你上傳，而去把.gitignore裡面的.env拿掉。
說到.gitignore這個檔案，你把檔案名稱或是資料夾名稱放到檔案裡，上傳的時候會忽略這些檔案，例如node_modules就不用跟著上傳，只需要在下載到你電腦時，跑個npm install就會自動產出node_modules的資料夾，所以記得你不想上傳的檔案或是資料夾丟進來就對了。
database的詳細設定檔案在config/database.php裡面，一般預設是mysql，如果你是用其他資料庫的只需在.env設定以下這幾個就可以了。如果你不知道資料庫的簡寫可以到database裡面看到在打.env檔上面就可以了
可能你的資料庫讀跟寫是放在不同的地方，這時候也可以個別設定讀跟寫的位置，只需config/database.php裡面來做設定就可以了。
下面可以看到讀跟寫的位置是不一樣的，但是資料庫必須是一樣的，要注意這點。
明天將會介紹database的相關語法使用",['DAY12-Database介紹 PART 1'],,,['資料庫讀寫分離'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191779,自我挑戰組,0,ArasPLM開發練功30天系列,12,[Day12]PolyItem物件-DCO變更流程,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1513375184000000000,498,"如何讀取變更流程的受影響物件

poly item就像是一個箱子，可以讓我把蘋果物件或香蕉物件放進去。也就一個容器可以存入不同物件類型(itemtype)的物件。
Affected Item受影響物件中，舊物件欄位、新物件欄位的屬性定義為Change Controlled Item也就屬於poly item。

程式碼如下",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191778,ModernWeb,0,每日文章推薦系列,12,Day12前置編譯器,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1513373511000000000,539,"我提到的主要都是覺得原本的語言提供的特性不夠用
所以會做出一套工具 來提供想要的功能
最後再編譯成原始的語言來讓環境可以直接套用
coffeescript
寫過ruby python的人應該會蠻喜歡coffeescript的語法的
https://zh.wikipedia.org/wiki/CoffeeScript
livescript
https://en.wikipedia.org/wiki/LiveScript
typescript
這個我一定要提這個人
安德斯·海爾斯伯格 （Anders Hejlsberg，1960年12月－），丹麥人，Borland Turbo Pascal編譯器的主要作者。進入微軟公司後，先後主持了Visual J++、.Net， C# 和 TypeScript。
設計的幾個語言都算是改變了工程師的環境
非常的厲害
https://zh.wikipedia.org/wiki/%E5%AE%89%E5%BE%B7%E6%96%AF%C2%B7%E6%B5%B7%E5%B0%94%E6%96%AF%E4%BC%AF%E6%A0%BC
​
https://zh.wikipedia.org/wiki/TypeScript
dart
Google推廣的語言
不過目前用的人感覺還不多XD
個人玩過coffeescript跟livescript
因為之前有學python 加上遇到javascript的callback hell的摧殘
所以當時是覺得這兩個語言都還蠻有打到痛點的
不過自從es6跟babel開始流行
就越來越多人跳回去直接寫es6了
babel也算是前置編譯器
可以把新版的語法轉成瀏覽器可以支援的語法
但是因為沒有改變語法所以我另外提
CSS的部分就算是大亂鬥了
比較特別的是我覺得以上沒有特別的優劣
目前也是都還有人用
基本上還是去研究看看哪個比較符合你自己的需求
像我就比較喜歡SASS
介紹完前面的工具
就知道目前前端環境檔案非常的繁雜
但是最後還是要產生出js css jpg png html等靜態檔案
所以就出現了打包工具
主要有
目前主流應該算是webpack 吧
不過設定有點繁雜
另外還有rollup值得介紹一下
還有最近推出號稱免設定的Parcel
如果覺得太困難是可以用套裝的工具
​
順便緬懷一下http://fireapp.kkbox.com/
因為手動編譯js,css之類的東西太麻煩了
所以就有人做出來一些工具讓人可以把工作整合處理
早期大家用grunt
後來覺得grunt設定檔很難寫
所以又跑出來gulp 因為是直接寫javascript去控制
因此更符合工程師的喜好
還有一派喜歡更傳統的make
基本上目前寫個比較複雜的前端可能都避免不了以上的工具
所以有人說以前前端只要引入jquery
但是現在都要從npm install開始
每次都裝一大包

個人建議新手都從簡單的工具上手啦
不用特別避開用現成的工具
像是我上面提到的prepros等工具
可以先用 等察覺到哪裡不合用了再來替換工具
我當初就是從prepros跳到grunt 再一路自己玩上來的
基于node.js的脚手架工具开发经历 - 掘金
感覺難得看到這麼詳細的教學
加減看看XD
浏览器里的黑天鹅：不可预知的前端变革点 - 掘金
算是前端重要的改變點吧
vue大好
关于PostCSS的一点小科普
介紹的工具都算蠻常用的
尤其Autoprefixer
CSS常用Mixin封装
就備用吧XD
看看做法
Introducing Octohint – Frontend Weekly – Medium
備用工具
11 Vue.js Component Libraries You Should Know In 2018
紀錄而已
5.6 新功能播报：增加一个 HTTP 头设置缓存中间件 | Laravel China 社区 - 高品质的 Laravel 开发者社区 - Powered by PHPHub
很好用啊！！！！
就不用特別寫到middleware裡面了
越來越難掰分享以外的內容了XD",,"['基本用途', '有哪些', 'BUNDLER', 'Task Runner', '總結', '今日文章分享', '今天看的文章']","['javascript', 'CSS', 'prepros', 'koala', 'codekit']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191729,ModernWeb,0,Expo---跨平台App開發從零到上架系列,11,ExpoDAY11---ScreenOrientation,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1513372863000000000,508,,['Expo DAY11 --- ScreenOrientation'],"['前言', '現在就做看看', 'Refs']","['Expo', 'React Native']",,,['tags: day11 iThome鐵人賽2018 ReactNative Expo ScreenOrientation'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10191777,ModernWeb,1,ZerotoherowithReact.js系列,9,【Day9React】從拆解電子名片學習ReactProps#Part3,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1513372768000000000,542,"皮卡丘就這麼跑進我的文章裡。。。
目前我的專案長這樣~

我一樣用電子名片這個專案來學習 React props 的運作原理，今天也會將我預先儲存在 json 裡的資料（假裝它是從 API 或是後端抓來的資料）更新到我的電子名片上。
props 讓我們可以從 parent component 傳內容到 child component 中，props 讓 component 之間可以互相溝通，靈活地傳遞資訊。當一個 component 有所更動，它的狀態(States)也會有所改變，而 child component 會自動更新透過 props 去接受 parent component 裡面被更新的值。
我們現在的 parent component 裡面的內容
還記得，我們是在這個最主要的 Card 類別組件裡面，把整個我們之前拆解的 sub components 重新整合回來放在這邊。
我們可以透過 props 在這個 components 裡面，給予新的內容。

舉個例子，假設現在我要做出一隻皮卡丘，於是我們有定義顏色的 Color component，告訴機器我要黃色的皮卡丘；也有定義表情的 Expressive component與設定它的動作的 Action component，不過這個階段還不確定我要讓皮卡丘有什麼表情跟動作，我可不可以在最後製作前再告訴機器我要什麼樣的皮卡丘，答案是可以的。
Pikachu component 作為 parent component ，它就像是製作的機器，裡面接收了所有 sub components 所定義的資訊，目前的資訊是：
做出一隻 黃色皮卡丘
可能長這樣：（最普通皮卡丘xD）

但在按下機器，製作皮卡丘之前，我想要讓他看起來受到驚嚇然後雙手很僵硬。我們可以在 Pikachu component 裡面直接賦予 <Expressive /> 和 <Action /> 你想要設定的值，而 child components 會自動抓取這個在 parent component 裡新增的值。我們只需要在<Expressive /> 裡面設定「驚訝的表情」；動作的部分在  <Action /> 裡設定「僵硬」。
最後，機器就會幫我們做出 受到驚嚇，雙手僵硬的黃色皮卡丘
like this

回到我們現有的專案，我們可以在 Card component 裡面，設定在 Bio component 裡面已經定義好的 name 和 location。
作法如下
並且在 Bio 的類別屬性裡，呼叫我們在 parent component 裡面設定的值。
呼叫的方式：
所以我們在 className=""name"" 和 className=""location"" 裡面，加上呼叫 props 的程式。
現在我們重新整理頁面，得到的結果會是：

大致了解 props 的運作之後，我現在要透過呼叫 json 裡的資料，render 到 DOM 上。
我有一個 person 變數，裡面存放著 json 格式的資料
我們可以透過 {variable name + name} 來取得這個物件裡的某個值，例如我要取得我的名字，可以透過
要取得 location 則是
現在，我們就把剛剛在 Card component 裡面寫死的值，轉換成呼叫 person 裡面儲存的值。
在更新頁面之後，我遇到一個 bug

這是一個 decoder 的 bug
我點擊它顯示錯誤的網址，它告訴我 bug 詳細資訊
這是因為在 occupation 物件裡面有兩個 keys，分別為 title 和 employer，我在取出 occupation 的值的時候，我寫了 {person.occupation}，它並不知道我到底是要 title 還是 employer 裡面的值，因此出現了 not valid 的錯誤訊息。
只要把 {person.occupation} 清楚定義，bug 就解決囉～
現在可以看到  名字、地點、職業 都是從變數 person 裡面取出來的值

可是老師我有問題！！！！（舉手）
如果想要呼叫 occupation 裡面的title 跟 employer 該怎麼做？
在 Card component 裡面，維持 occupation={person.occupation}
接著到 Bio component 這個 child component 裡面，設定取出更細瑣的值：
椰～～～現在同時看到 occupation 裡面的title 跟 employer 的資料了！！

最後一個階段，我們要來 render updates 裡的資料了！！那兩行 Updates 一直在那邊真的很礙眼。
同樣的，我們可以先在 Card component 裡面，通知它我要取出變數裡 updates 的值了
因為在 updates 裡面有 4 個 instance，所以我們要用 map 方法，寫一個迴圈去幫我們取值。
到 Updates component 裡面，新增一個 updates()，我們要把 mapping 的邏輯寫在這個方法裡面，再把結果 return 回去。把每一個 this.props.updates.map 的結果，塞進 <li></li>，還記得剛剛提到有 4 個 instance，所以我們應該會回收 4 次的 <li></li>，裡面放的是 status 的內容。
我們順利取得 status 的內容～

在 React 官方文件裡提及，當我們使用 map() 這個方法時，它希望我們可以在迴圈的產出項目裡面，設定專屬於每個項目的 key，以便在之後資料集有所更動時，它可以追蹤資料的狀態，是被修改過或者是被刪除等等。
可以想成是寶寶剛出生我們都要幫他們取名字，想像醫院裡的媽媽們是資料集，他們生出來的都是寶寶（就像是我們這邊 loop 出來的 <li></li>），而護士就像是 React，他們必須知道寶寶的名字，才能更方便照顧他們。因此我們要分別給每個寶寶專屬的 key。
在 <li> 裡面加上 key index
記得 function 裡面要多傳一個 index 參數進來
最最後一個步驟，我們的 platform 還沒引入進來，會加這個 platform 只是模仿它是從不同來源的資訊，我們可以把它加到 className 裡
我們可以看到 platform 的資料被我加到 className 裡了～

來張完整的電子名片 <3


椰～花了三篇文章介紹拆解 components 還有 props 的運作原理，很有成就感！
完整專案：Github",,,"['Props 的功能', '透過 map function 取出 updates 裡的資料', 'React lists and keys']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191776,自我挑戰組,1,,12,[持續撰寫中...]今天來談談協力技術社群,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513372444000000000,512,"不知道大家有沒有發現，
首頁最下方，有一塊
【2018 iT 邦幫忙鐵人賽協力技術社群】
這邊有24個社群",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191499,自我挑戰組,2,使用PHP串接金流相關API系列,5,Day04-Linepay(3)提供哪些API?,royal801991,https://ithelp.ithome.com.tw/users/20107301/ironman,1513371486000000000,528,"                               
(*FAILED : 在 LINE Pay API 處理中途遭遇失敗的狀態，呼叫 confirm, capture, void API 時會發生)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191770,Security,0,資訊系統安全與CISSP的簡單應用系列,1,[Day01]資訊系統安全與CISSP的簡單應用,wisdomryanlin,https://ithelp.ithome.com.tw/users/20107753/ironman,1513369606000000000,563,"Hi! 大家好，我叫安總裁，因為每個人都是自己生命中的總裁。我是一名 .NET 工程師，平時的工作是研發及維護一套能源回收管理系統，因為最近要導入連網的功能，所以開始接觸資訊安全的議題。在網際網路充滿威脅的時代裡，希望在未來 30 天的 iT 邦幫忙鐵人賽中，從 .NET 工程師的角度切入系統的開發與測試，應用 CISSP 介紹到的方法來保證我們的系統安全。

圖片來源
https://upload.wikimedia.org/wikipedia/commons/3/3e/Certified_Information_Systems_Security_Professional_logo.png
CISSP 架構最貼近實務，涵蓋的領域也夠廣，適用於企業集團，也能給予相關軟體系統啟發。從 2015 開始，CISSP 將 Security 分成八大領域。
看吧看吧，是不是很實用 (吼吼吼
太爽啦，網路上寫文章就像自己的地盤，能夠盡情地做自己，不像在公司，常有人說我臉臭得跟大便一樣，其實安總我也是很幽默的呢~~只是外表比較嚴肅而已啦，內心很輕鬆的 (QDQD

圖片來源
https://cccure.training/m/photos/get_image/file/d2381d1b89e6cbca5e46ff5ea340a093.jpg
所以囉，30 天的主題原則上就會依照上述的八大領域來涵蓋，一天來一點 CISSP，希望秉持著實用主義，即使概念很簡單，也能應用到我們的系統上。
安總裁也不是這方面的專家，所以各位先進如果有更好的建議作法或是內容有誤的地方，非常歡迎大家提供建議或指正喔。
文末會附上彩蛋，一直在想要用什麼呈現給邦友好呢？想要呈現最真的自己，我的興趣是閱讀，那就每天介紹一兩本我書架上的書和故事跟各位分享吧，這也是我比較擅長的部分，謝謝啦！期待未來 30 天和您見面喔！(啾咪^.<
這兩本書漂洋過海來見我，整整一個月海運才到，運費跟書一樣貴

《CISSP Official Study Guide》 & 《CISSP All-in-One Exam Guide 7E》","['八大領域', '30 天的主題']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191771,自我挑戰組,0,Kaggle的解題挑戰系列,5,[Day05]Kaggle的解題挑戰-Kafka簡介,BillLin1983,https://ithelp.ithome.com.tw/users/20103074/ironman,1513366915000000000,523,"Kafka可以說是目前大數據架構中的標準技術之一了，比如SMACK這個目前主流的大數據即時處理架構中的5個技術，Spark, Mesos, akka, Cassendra, Kafka，就包含在其中。這篇就簡單的帶大家了解一下Kafka是什麼。
Kafka是由LinkedIn開發的一個分布式的Message System, 由Scala實作，它具備有水平擴充和高吞吐量的能力，而隨著新版Stream功能的加入，將自已定位為一個分散式串流平台(distributed streaming platform)，來提供實時資料串接(real-time pipeline)。
1 以Time Complexity O(1)的方式提供消息持久化能力，對TB級的資料持久化，也能保持高效
2 在一般商用機器上，也能達到每秒100k以上的訊息處理量
3 保證partition上的訊息順序
4 支援實時和離線資料處理
5 支援水平擴展，但只能加大，不能縮小
6 不支援JMS和事務

Broker
可以簡單的視為Kafka cluster中的機器設備，另外會使用ZooKeeper來進行資源的管理
Topic
簡單的說訊息的發收和接收時需要指定的類別，可以視為是Queue的概念
Partition
會將Topic上的訊息切割成多個Partition，為一個實際使用的空間
Producer
負責發布訊息到Kafka
Consumer
訊息消費者，將訊息由Kafka讀出，要注意的是一個Partition只能被一個Consumer讀取，所以比較好的設計是將Partition的數量設得比Consumer多
Consumer Group
每個Consumer屬於一個特別的Consumer Group
Leader and Follower
Leader是該Partition的資料讀寫最優先者
而Follower會同步Leader的資料，當作是備援，來達到高可用性
Official Website
Kafka剖析（一）：Kafka背景及架构介绍
Apache Kafka Tutorial",,"['前言', 'What is Kafka?', 'Kafka的特色', 'Kafka架構', 'Reference']",['名詞解釋'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191721,ModernWeb,0,Nest.jsframework30天初探系列,12,Nestjsframework30天初探:Day12WebSocket-Socket.IO聊天室,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1513366822000000000,555,"Nestjs在WebSocket部分雖然有封裝了Socket.IO，但我們在寫的時候仍可以直接使用Socket.IO的API，後續實作會直接使用Socket.IO的API，Socket.IO作為最火紅的模組，當然要實際玩一下囉。
成功!!
抱歉，正逢妹妹結婚，有點忙碌，所以沒深入去實作，但現在已經作出一個簡單的聊天室，還沒有帳號機制，明天有時間再來實作。
程式碼在github",,['Socket.IO聊天室'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191769,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,12,2017年TIOBE程式語言排行結果雜談,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1513365554000000000,554,"今天原本要寫Laravel的CRUD，因為5.2的範例無法跑在5.5而卡關
一怒之下寫點別的
工程師是很喜歡「論戰」的一種職業
戰語言、戰框架
甚至連分號與大括號的位置都可以各分為兩派
我認為這是很好的文化
因為論戰的初衷，是對於進步價值的不肯妥協
不管是「可讀性」「易用性」「執行效能」
我們立下各種指標，然後一個版本一個版本逐步進化
始終在追求那個心中的價值
並且為自己的信仰辯護
這十二天安裝了三種環境
接觸了三種新語言，覺得跨語言比較真的是一件很有意思的事
但要繼續深入到核心，確實需要更多時間寫過更多專案才行
三十天的速成很可能只能擦到皮毛
上個月看到朋友臉書分享他的韓裔妻子學中文的疑惑：
為什麼「開心」與「關心」不是相反的意思？
明明開與關互為反義詞，但後面同樣加上「心」字
卻是截然不同的意思
當我們母語為華語的人碰到這樣的問題
才會去細細思索：為什麼「開心」的意思是開心，而「關心」又代表著關心呢？
開與關到底有幾種意思，分別在哪些使用情境出現
這反而是母語者很難以回答的一個問題
必須透過比較才能反思
本來這樣的文字是預備到三十天的尾聲才發表
搭配框架的終極比較
但因為今天的主題是語言的排名，所以順勢有感而發一下
TIOBE Index for December 2017
與去年相比，前四名都沒有變動
分別是：Java、C、C++、Python
當然，Pythone排名很高，並不代表Django就是最佳的框架
畢竟除了網路，還有各種情境會用到程式語言
如果純粹考慮網路
或許整份排名會大不相同
第六名是Javascript，因為所有前端都會用到它
第九名PHP，幾乎是純網路用途，依然佔有龐大的市佔率
但我個人真的不喜歡
第十五名Ruby，十年前因為Rails爆紅，每一年都有被取代的危機傳出
但我個人還是相當偏愛
雖然Elixir還太新沒有上榜，但Erlang排名第25
也算是長壽語言當中表現算是比較亮眼的
工程師似乎很難單靠一個語言走遍天下
如果要做外來展望
以功能性而言Phoenix搭配Elixir真的很強
未來應該會有一席之地
但我也覺得不會真正取代Rails、Django、Laravel的地位
或許未來會出現一種語言（或是利用javascript or xml）
可以把網路專案編譯為Rails、Django、Laravel、Phoenix
就像現在可以把web app包裝為Android或apple app一樣
希望到時候的語言可以簡單好學一些
（或是已經透過AI寫程式，只要跟AI聊天就可以完成）",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191653,自我挑戰組,0,自我挑戰日記系列,10,CSS：background放射,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1513362023000000000,511,"今天來用 linear-gradient 做放射的效果
找到2種方式
第一種

資料參考
https://codepen.io/thebabydino/pen/hkxGp
第二種

資料參考
https://codepen.io/agriboz/pen/izLak
https://wcc723.github.io/css/2013/09/24/css-background/
試著切 15 等份時發現
用第一種方式可以算很久!!
若是切四的倍數時才比較好作
因為先作出一半
另一半用複製、貼上的就行了
最後正好看到有個很有趣範例
就像是機關一樣可以開合
https://codepen.io/long-lazuli/pen/AHwEC
--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191766,自我挑戰組,0,打雜人生-腦容量不夠用就筆記筆記唄系列,9,[Day9]Python自習手札:beautifulsoup應用,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513359069000000000,588,"說到那個湯啊
呃…是那個beautifulsoup應用啊，就必需把操作手冊搬出來研究+自已動手跑跑看玩玩看了~~~
http://beautifulsoup.readthedocs.io/zh_CN/latest/
===研究中…未玩待補Q_Q===
自已需要加強補充的資料:
Python Standard Library
https://translate.googleusercontent.com/translate_c?depth=1&hl=zh-TW&prev=search&rurl=translate.google.com.tw&sl=zh-CN&sp=nmt4&u=https://docs.python.org/2.7/library/index.html&usg=ALkJrhgZCYAIkO9l0TWAVAhDLw1-NCqLtA
beautifulsoup操作手冊
http://beautifulsoup.readthedocs.io/zh_CN/latest/
正規表達式
https://zh.wikipedia.org/zh-tw/正则表达式",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191765,ModernWeb,0,重新認識JavaScript系列,12,重新認識JavaScript:Day12透過DOMAPI查找節點,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1513357849000000000,885,"在上一篇的分享當中，我們簡單介紹了 BOM 與 DOM，也了解到 JavaScript 是怎麼透過它們提供的方法來與瀏覽器溝通。
當一個網頁被載入到瀏覽器時，瀏覽器會先分析這個 HTML 檔案，然後會依照這份 HTML 的內容解析成「DOM」 (Document Object Model，文件物件模型)。
DOM 是 W3C 制定的一個規範，它是獨立於平台與語言的標準。 換言之，只要遵守這樣的規範實作，不管是什麼平台或者是什麼語言開發，都可以透過 DOM 提供的 API 來操作 DOM 的內容、結構與樣式。
所以說，DOM 是網頁的根本，懂得 控制籃板球的人就能控制整場比賽 控制 DOM 就可以控制整個網頁，做出良好的互動體驗。
那麼在今天的分享中，我們就繼續來介紹 DOM API 查找節點的方法吧。
這個題目其實沒有標準答案，認真要講的話之後或許可以用一整篇來說明這個。
常常聽到初學者朋友問說，為什麼放在 <head> ... </head> 裡面的 JavaScript 沒有作用？ 這裡我們簡單來講一下問題所在。
針對 <script> 標籤放哪裡，一般你會聽到有兩種版本：
確實，這兩個地方都可以放置 <script> 標籤。
那麼我們來試試昨天介紹過的，先以 document.querySelector 取得 id=""hello"" 的節點，然後透過 textContent 來修改內容。
先來試試把 <script> 標籤放在 </body> 之前。
馬上執行看看，看起來似乎很 ok 呢，太好了！

接著，我們試著把 <script> 標籤移到 <head> ... </head> 之間：

咦咦咦？ 怎麼什麼都沒有？
也沒有錯誤訊息，可惡 JavaScript 你果然跟大家說的一樣，真是太雷了！ (淚奔)

翻桌之前，先聽我解釋。
前面說過，當一個網頁被載入到瀏覽器時，瀏覽器會先分析這個 HTML 檔案，「由上而下」依序來讀取解析：

圖片來源: How browsers work
此時，當瀏覽器在 <head> ... </head> 之間遇到 <script> 標籤時，就會暫停解析網頁，並且「立即」執行 <script> 裡的內容，直到 script 執行完畢後再繼續解析網頁。
發現問題所在了嗎？
在 <head> ... </head> 裡的 <script> 想要嘗試去尋找 <div id=""hello""> 這個標籤，但因為還沒解析到網頁本體，所以也無從取得。
不是瀏覽器壞掉，也不是 JavaScript 太雷，而是因為我們不理解瀏覽器執行的原理所造成的誤會。
那麼，當我們把 <script> 標籤放在 </body> 結束之前，由於 DOM 已經解析完成，所以 document.querySelector 就可以順利取得 id=""hello"" 的節點，並且把 'HELLO' 的字串放在網頁裡囉！
這樣說起來， <script> 標籤是不是就不適合放在 <head> ... </head> 之間呢？
也不能這麼說，這點就留待後續介紹過「事件」以及網頁效能優化的時候，再回頭來詳細解說吧！

上一篇文章說過，document 物件是 「DOM tree」 的根節點，所以當我們要存取 HTML 時，都從 document 物件開始。 而 DOM 的節點類型除了 「HTML 元素節點」 (element nodes) 外，還有「文字節點」 (text nodes)、「註解節點」 (comment nodes) 等。
而常見的 DOM 選取方法有下列這些：
document.querySelector 與 document.querySelectorAll 可以用 「CSS 選擇器」 (CSS Selectors) 來取得「第一個」或「所有」符合條件的元素集合 (NodeList)。
DOM 節點的類型常見的有下面幾種：
可以透過節點類型「常數」或是「對應數值」來判斷：
其他不常使用或是已經廢棄的部分可以參考：MDN Node.nodeType 一節。
由於 DOM 節點有分層的概念，於是節點與節點之間的關係，我們大致上可以分成兩種：
父子關係：
除了 document 之外，每一個節點都會有個上層的節點，我們通常稱之為「父節點」 (Parent node)，而相對地，從屬於自己下層的節點，就會稱為「子節點」(Child node)。
兄弟關係：有同一個「父節點」的節點，那麼他們彼此之間就是「兄弟節點」(Siblings node)。
當然沒有爺孫節點、也沒有表兄弟或是堂兄弟節點這種東西，隔層的節點基本上沒有直接關係。

所有的 DOM 節點物件都有 childNodes 屬性，且此種屬性無法修改。
我們可以透過 Node.hasChildNodes() 來檢查某個 DOM 節點是否有子節點。
Node.childNodes 回傳的可能會有這幾種：
Node.firstChild 可以取得 Node 節點的第一個子節點，如果沒有子節點則回傳 null。
要注意的是，子節點包括「空白」節點，所以像下面範例：
因為拿到的是 <p> 與第一個 <span> 中間的「換行字元」，所以 p.firstChild.tagName 會得到 undefined。
改成這樣：
把中間的換行與空白移除，就會得到預期中的 ""SPAN"" 了。
Node.lastChild 可以取得 Node 節點的最後一個子節點，如果沒有子節點則回傳 null。
與 Node.firstChild 一樣的是，子節點包括「空白」節點，所以像這樣：
得到的會是一個換行字元的空字串。
移除節點之間多餘的空白後：
就會是正確的 ""span 3"" 了。
那麼相較於「Child 系列」，parentNode 就單純一些。
透過 Node.parentNode 可以用來取得父元素，回傳值可能會是一個元素節點 (Element node)、根節點 (Document node) 或 DocumentFragment 節點。
看完了 DOM「父與子」之後，接著來看看兄弟節點。
透過 Node.previousSibling 可以取得同層之間的「前一個」節點，如果 node 已經是第一個節點，則回傳 null。
與 Node.previousSibling 類似，透過 Node.previousSibling 可以取得同層之間的「下一個」節點，如果 node 已經是最後一個節點，則回傳 null。
今天分享了很多關於 DOM 的選取以及查找遍歷的方式，其中，像是 document.getElementById 以及 document.querySelector 因爲取得的一定只會有一個元素/節點，所以不會有 index 與 length 屬性。
而 document.getElementsBy** (注意，有個 s) 以及 document.querySelectorAll 則分別回傳 「HTMLCollection」 與 「NodeList」。
這兩者其實是類似的規格實作，「HTMLCollection」只收集 HTML element 節點，而「NodeList」除了 HTML element 節點，也包含文字節點、屬性節點等。 雖然不能使用陣列型別的 method，但這兩種都可以用「陣列索引」的方式來存取內容。
另一個需要注意的地方是，HTMLCollection / NodeList 在大部分情況下是即時更新的，但透過 document.querySelector / document.querySelectorAll 取得的 NodeList 是靜態的。
什麼意思呢？ 舉個例子：
如果改成 document.querySelector 的寫法：
那麼以上就是今天介紹的內容。
在後續的文章會再繼續說明 DOM API 新增/刪除/修改 節點的部分，歡迎持續關注。",,"['前言：<script> 標籤放哪裡有差別？', 'DOM 節點的選取', 'DOM 節點的類型', 'DOM 節點間的查找遍歷 (Traversing)', 'document.getElementsBy** 與 document.querySelector / document.querySelectorAll 的差異']","['Node.childNodes', 'Node.firstChild', 'Node.lastChild', 'Node.parentNode', 'Node.previousSibling', 'Node.nextSibling']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191759,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,11,(Day11)用jiebaR做文字探勘吧!,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1513357490000000000,575,"針對文字這類非結構化資料，文字探勘是很常見的作業，實作前了解一下先。
根據非結構化資料-MBA智庫百科結構化信息是可以數字化的數據信息，可以方便地通過電腦和資料庫技術進行管理。無法完全數字化的信息稱為非結構化信息，如文檔文件、圖片、圖紙資料 、縮微膠片等。這些資源中擁有大量的有價值的信息。現在這類非結構化信息正以成倍的速度增長。
先取回第一層議題清單資料
但如果程式前幾篇實作的程式碼，寫在同一份程式碼，本段無須執行喔!
(Day10) 用jiebaR做文字探勘吧!
安裝jiebaR(結巴)套件 and 叫用
看起來還有點意思!!

明天繼續!
jiebaR:",,"['非結構資料', '斷詞', '文字探勘處理套件', 'jiebaR ', '實作', '參考文件']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191745,ModernWeb,0,從無到有，打造一個漂亮乾淨俐落的RESTfulAPI系列,5,[Day-5]用Yarn取代npm加速開發,10程式中,https://ithelp.ithome.com.tw/users/20107247/ironman,1513355259000000000,597,"Yarn 是一個新的 package 管理器，它替代了 npm 客戶機或其他包管理器的現有工作流，同時保持與 npm 註冊表的兼容性。它具有與現有工作流程相同的功能集，同時運行速度更快，更安全，更可靠，簡單來說用 Yarn 來安裝套件比起 npm 更來得快速！

Yarn 是 Facebook 自家團隊與 Exponent、 Google、Tilde 所合作開發的套件管理工具，由於程式套件隨著團隊的規模茁壯，他們在安全性和效能面臨一大考驗，所以他們團隊自己打造全新的解決方案，以一種更加可靠的方式來管理依賴，Yarn 因此就誕生了，它作為 npm 客戶端的替代器，更加快速、可靠、安全。
從官方的說明文件當中可得知分為三步驟：
除了安裝變得更加快速和可靠以外，Yarn 還提了如下特性，進一步簡化了依賴管理的工作流程：
macOS 的用戶要透過 brew 來安裝 yarn，Homebrew 是一款自由及開放原始碼的軟體套件管理系統，用以簡化 Mac OS X系統上的軟體安裝過程。
apt-get 是 Linux 上的一個重要的工具，很多軟件的安裝、卸載、更新都會用到它。Homebrew 就是 Mac 上的 apt-get。 但是，目前 Mac 上默認是沒有這個工具的。
這是 Homebrew 的官網，想知道詳細內容可以去瞧瞧這裡就不多闡述
開啟終端機輸入以下指令 Install Homebrew
若已經安裝過了檢查更新一下，保持最新狀態
ps. 安裝 Homebrew 前先確認是否有安裝 Xcode 若有請先去更新它，因為 Homebrew 是用 Ruby 攥寫並且需要在有 Ruby 環境下使用，然而安裝 Xcode 時會自帶 Ruby 所以 Xcode 也要保持最新狀態
若你的電腦本身安裝 Node.js 了可執行下面指令
若安裝後日後有更新 Yarn 會在命令端提醒警示，這時你可以使用 Homebrew 來完成更新
安裝結束後來測試是否安裝成功！
這邊列出最常見以及我最常用的指令，若要看更多請看這裡
Yarn GitHub
文章同時發表於：https://andy6804tw.github.io/2017/12/15/Yarn-tutorial/",,"['何謂 Yarn', 'Yarn 的運做模式', '其他功能', '如何上手', 'npm 與 Yarn 指令比較']",,,"['1. 安裝 Homebrew', '2. 安裝 Yarn']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191635,自我挑戰組,0,迷失在挨踢叢林的獎金獵人系列,3,「獎金獵人小分享」-黑客松,獎金獵人,https://ithelp.ithome.com.tw/users/20107677/ironman,1513354604000000000,613,"嗨，我是獎金獵人，現在正迷失在挨踢叢林當中，唯有提供各種資訊養分給願意帶我走出叢林的當地居民，我才能成功離開。
說到資訊相關的活動或比賽，最容易想到的就是黑客松了，黑客松這個名詞來自於黑客＋馬拉松（Hack+Marathon）。黑客通常是指對電腦科學、編程和程式方面具有高度理解的人，主要是指技術高超的程式設計師，黑客也常被稱為駭客，但在當今媒體的影響下，大部分的大眾都覺得黑客是專門進行違法破壞系統的一群人，並視為電腦罪犯，其實真正惡意破解程式、系統或網路，進而竊盜、毀損甚至是將其癱瘓的人，被稱為潰客（Cracker）或是黑帽駭客（Black Hat）。
黑客松大致上就是一群人進行馬拉松式的團隊活動，激發出創新的構思及專案，並在密集的時間內完成重要的功能，一個團隊中並不需要每個人都具備完整的開發者資歷，可以來自各方的專家，包含前後端工程師、設計師、專案管理人員等等。
由於黑客松這個活動逐漸興起，不論是政府單會或是公司行號，甚至是民間組織都大量的舉辦黑客松，參加黑客松不只可以激發想像力，還可以訓練自己的溝通、組織能力。
因為實在太多了！我就只列舉一些今年曾經舉辦的黑客松，如果有興趣可以鎖定明年唷～
想參加黑客松卻不知道哪裡有嗎？歡迎鎖定獎金獵人網站唷！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191758,自我挑戰組,0,服務桌從開始到進入資安領域系列,11,[Day11]服務桌的日常:linux網路不通問題排除,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513354149000000000,618,"網路不通是使用者所感受到的症狀，造成網路無法連上網路的真因，往往需要更多資訊判斷。
基本的網路檢測，windows和linux大同小異，就…介面長的不太一樣，不常用的苦手。
硬體問題:
接頭接觸不良、線材損壞或過長過短、設備插座污損氧化、網卡品質不好或不相容、使用方法不當、線材或設備彼此干擾影響訊號穩定性、server to server網路不通、server room to seat網路不通、seat to device網路不通……
軟體問題:
網卡設置錯誤、Geteway設置錯誤、通訊協定問題、網路負載量、已安裝軟體衝突、錯誤的驅動來源或版本、權限不足、網路服務未啟用……
===未完待補===",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191705,自我挑戰組,0,花式PHP系列,7,Array：取得資料,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1513353185000000000,627,"今天要介紹的方法都是我最喜歡的！
這個方法可以讓你從陣列中隨機挑一個值！
但要注意的是，它回傳的是那個值的 key！
所以如果你要取得它挑出的值，你需要回頭再把 key 塞進陣列才行～
上面的範例是在不給定第二個變數時，array_rand 只會隨機挑出一個，並直接以 int 回傳。
但如果你在第二個變數給定一個大於 1 的數字，
array_rand 就會回傳一個 array，裡面都是它挑出來的值的 index。
array_column 可以幫你從一個二維陣列中，僅取出每個第二層陣列中的指定欄位。
PHP7 之後這個方法也接受傳入一個裡面都是 Object 的陣列！
具體的效果你可以把 WheelPieFactory::get(5, FALSE); 中的 FALSE 改成 TRUE，
再把程式碼丟進 PHP7 的環境測試～
但只能取出 Object 中是 public 的資料。
如果你需要取出 private 的資料，
你需要實作他們的 __get() 及 __isset 兩個方法！

例子時間～
某個你還是國小生時的禮拜三下午，成長中的你精力無限、餓的也特別快。
來的好不如來的巧，此時此刻你的媽媽也帶著五個車輪餅回家了！
但，可惜的是媽媽請老闆隨便夾了五個紅豆餅。
只喜歡其中幾種的你，要如何分辨每一個都長的一模一樣的車輪餅的口味呢？
還好 PHP 沒有辦不到的事情！
試著用 array_column 把五個紅豆餅的口味資訊抓出來吧！
顧名思義，array_keys 可以把陣列的 keys 單獨抽出來（_並以陣列的方式回傳_）；
array_values 可以把陣列的 values 單獨抽出來（_而且不保留原本的 key_）
注意！
它們兩個都不會對傳入的陣列本身操作，而是直接把結果傳回來。
比如說，你現在站在一個水果攤前面，
價目表上羅列著各種水果的單價...
但如果你也是在開水果行的，而你只想要知道這間店有賣哪些水果，
你就可以使用 array_keys 把它們列出來：
但如果你是一個記者，你只想要知道每種水果的售價，並用它們作為報導的材料：
顧名思義！這個方法可以幫你把陣列裡面重複的值去掉，並把處理乾淨的陣列回傳給你～
那它是如何比較各個元素是否一樣呢？
其實，它會把兩個需要被比較的值當成 String，並用全等運算符（===）比較它們。
注意！這個方法只會回傳每個重複值的第一個！
另外，array_unique 的第二個可選參數可以告訴它：
應該把陣列中的值視為怎樣的資料型態（預設是 String），並比較它們。
我就不寫僅包含基本資料型態的陣列被執行 array_unique 之後的效果了。
底下我展示的是，當一個陣列裡都是物件的狀況。
先講結論，
裡面這些物件都必須實作 __toString 方法才能被比較哦～","['array_rand', 'array_column', 'array_keys & array_values', 'array_unique']",['第二個可選變數：要挑幾個'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191690,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,12,12.應用：自用Googlecalendar查詢機器人TL;DR,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513352099000000000,592,"在這一篇，我們將嘗試擷取個人 Google Calendar 行事曆。 Google 相關 API 介接有許多方式，自己在撰寫這篇的時候最先透過 Oauth 2.0 的方式介接，卻因為機器人程式是透過 Server to Server 的方式取得資料，故無法使用教學文件範本中的方式盡情使用者授權 → 取得 Authorization Code，當然也取不到Token，也拿不到資料。

資料來源：https://developers.google.com/identity/protocols/OAuth2
撰寫這篇文章前閱讀了許多的文件、論壇與進行大量的測試、最後採取了使用 Service Account (服務帳戶)的方式 + 處理憑證在 Azure Web Application 的問題後得以解決，獲益良多。本篇文章若有錯誤或更好的建議，歡迎各位先進不吝指導與討論，謝謝。
Step 1. 開啟啟用網站 (https://console.developers.google.com/flows/enableapi?apiid=calendar&hl=zh-TW)，選擇應用程式要註冊的專案，如果你沒有建立過 Google console 專案，可以在此建立新的。

Step 2. 點選前往憑證

Step 3. 填寫內容，會推薦你適合的方式取用資料

Step 4. 選擇你的服務帳戶，若沒有服務帳戶則建立新的服務帳戶
註：請記住電子郵件與金鑰 ID


Step 5. 建立金鑰

Step 6. 建立並下載金鑰，這個金鑰等等我們要放入專案內，請謹慎保存

Step 7. 開啟你要讀取的 Google 日曆 → 設定。到這邊，我們完成撰寫程式前的準備工作。

Step 8.  與特定使用者共用日曆 → 新增邀請對象 →傳送

Step 9. 往下拉，找到整合日曆，複製日曆ID，程式會需要這個參數。

Step 1. 在開始撰寫程式之前，我們先安裝 RestSharp。 工具 → NuGet 封裝管理員 → 管理方案的 NuGet 套件..

Step 2. 輸入Google.Apis.Calendar → 進行安裝
註：個人測試的時候安裝1.31.1.1074版本，最新版本似乎有相依性問題

Step 2. 對專案點選右鍵 → 建立Resources 資料夾

Step 3. 我們建
Resources 資料夾 → 右鍵 → 加入 → 新增項目 → Resources Files (未來有機會可以延伸作為多國語系)
註：因為我在我的2017找不到 Resources Files。若您與我相同，嘗試建立文字檔案並更改附檔名為res，並確定性質自訂工具為 ResXFileCodeGenerator 與建置動作為內嵌資源。


Step 4. 點開資源檔案 → 加入現有檔案

Step 5.選擇我們剛剛前置作業下載的憑證檔案 → xxxx.p12

Step 6. 首先我們得先組裝驗證資料，包含：
程式碼如下：
Step 7. 接下來你可以選擇你要的日曆與先關參數測定，若使用 primary ，表示這個登入人員主要的日曆。執行後 request.Execute() 會回傳行事曆內容 ，你可以在events.Items 找到近10比行事曆資料(若有資料)。
註：參數 xxxxxxxxx@group.calendar.google.com 為日曆ID，我們在日曆設定時可以取得。
Step 8. RootDialog.cs 程式碼應該如下
Step 6. 開啟機器人模擬器進行測試

Step 7. 右鍵點選專案 → 發行，上傳 Azure Web Application，透過Skype 嘗試，成功！


Using OAuth 2.0 to Access Google APIs - https://developers.google.com/identity/protocols/OAuth2","['前言', 'Google Calendar API 啟用與註冊', '程式', '參考資料']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191756,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,12,[Day12]EasyFlowGP--Web表單元件-Button,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1513350546000000000,532,"今天之後會和大家分享我在開發表單時，使用JavaScript的心得。
也當作學習的整理。
在基礎的Web表單元件中，首先要分享的是Button 按鈕。
Button可以當作觸發某個事件，ex: [傳送]，[加入]，[刪除]...
也可以是資料的開窗鈕 ex:[人員清單]，[部門資料]...
觸發事件的寫法，是寫在onclick()的Event事件中。
資料開窗鈕，有分直接寫語法，和資料選取器設定兩種方式。
在這篇說明直接寫語法開窗，明天說資料選取器設定的開窗。

滑鼠點到左上角的查詢，系統會展出查詢畫面。

明天講資料選取器設定。 ^^",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191751,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,12,如何用react-router來做singlepagewebapplication，SPA,dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1513349775000000000,520,"在教react-router之前, 我們要先討論 , what is single-page application.
""單頁Web應用（single page web application，SPA），就是只有一張Web頁面的應用。單頁應用程序(SPA)是加載單個HTML頁面並在用戶與應用程序交互時動態更新該頁面的Web應用程序。 瀏覽器一開始會加載必需的HTML、CSS和JavaScript，所有的操作都在這張頁面上完成，都由JavaScript來控制。因此，對單頁應用來說模塊化的開發和設計顯得相當重要。"" - Baidu
所以像trello, gmail, evernote, 都是用SPA.(這裡我不討論SPA 跟傳統Web 的優缺點, 有興趣可以看這裡) 那我順便教大家一個小技巧來判斷一個網站是不是SPA.

你要注意如果點連結的話chrome的重新整理按鈕有沒有變 叉叉(X), 變X 的時候代表網頁有重新loading.
大家可以去angular網站試看看, 你會發現你點連結的時候整理按鈕會沒有反應.
如果你決定要做SPA那我們就要用react-router.
我那時候學react-router V4 不好學. React-router 每一次改版都把API大改. 而且那時候V4剛出, 資源也沒有很多.
我會用我的netflix-clone專案來做講解.demo: 
App.js
*如果重來我會改名用router.js 不會用App.js
我們可以用來把s組在一起. 如果有很多routes, 那你需要用  把它們組起來.
好啦, 那react-router就講到這裡, See you tomorrow!",,"['背景', '教學']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191753,SoftwareDevelopment,0,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,9,Day09-yaml配置規劃,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1513348906000000000,509,"寫到第九天了, 你可能寫了一些 Rest API 給前端在用, 也透過 Swagger 提供前端同事方便測試跟看規格, 也加上了 Cache 或是 Retry 來加強體驗, 也開始準備發佈到正式環境上....
but....千萬不要把你正式環境的帳號密碼 commit 到 git 裡啊, 也不要就這麼打包到 jar 裡面啊....XD
你會想說啊這樣不就每次上版都要去改設定檔...
但其實 spring boot 有一套抓取變數的規則, 以及切換的功能 來提供我們使用, 詳細可以看下面兩個說明
Externalized Configuration
Set the active Spring profiles
如果不想看那麼多字....
其實間單說就兩個重點
在啟動命令列可以切換不同的配置組態
組態檔位置可以透過命令列提供給SpringBoot
提供我目前的用法給大家參考
首先先從配置檔的檔名開始
我的 application.yml 都會只放些通用的 像下面這樣
例如一些 time-zone(時域), date-format(時間格式), resources.chain.cache(資源的快取)...等等
這邊要注意的是 spring.profiles.active 這邊指定 SpringBoot 啟動時要載入不同的設定檔
像我這邊是 active=dev , 所以他就會去找 application-dev.yml 這個檔案吃裡面的參數設定
你也可以不只一種....可以用 application-test.yml, application-docker.yml 等等來方便的切換
然後在我的 application-dev.yml 裡面你就可以看到不同環境的不同組態 像下面
application-dev.yml
部署的時候我會在正式機上面放一份 application-prod.yml
然後我的 shell 會這樣下
這樣就可以了",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191752,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",12,Day12-HBaseRowKeyDesing,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1513348586000000000,507,"如果想要享受HBase飛快的查詢速度，與避免read/write的hotspot，好的RowKey Design是很重要的。
HBase的資料是儲存於Region Server並且以RowKey當作各Region分區的界線。由於RowKey是使用字典排序，當RowKey為連續字串時會導致資料傾斜，資料過度集中於某個region server。當這狀況發生時，如果有多個使用者同時對這個table發出請求(讀/寫)，這個region server會無法接受過多的請求數量而過於忙碌，這時候(讀/寫)的效能就會下降，嚴重的會導致該region server被認定已經crash，觸發HBase容錯機制而讓整個HBase叢集更為忙碌...
假設有個RowKey的結構長成這樣：
前面有介紹過HBase在使用RoeKey當作filter時，使用Scan查詢速度最快可以到毫秒等級。一般使用者會搭配已模糊查詢的方式來查資料，而HBase的RowKey在模糊查詢上就會有個限制，就是只支援後面字串的模糊查詢。以上面的RowKey結構為例，在查詢時就只能使用這四種方式：
接下來會介紹下列四種RowKey設計方法：
如果使用Sequential/Time-serial key當作RowKey，資料會被寫入同一個region，此設計不適用於頻繁寫入的使用情境。
俗稱的灑鹽巴。使用演算法對RowKey加工，讓資料平均散佈到各個Region Server。
以員工編號為例
使用String rowkey = id.reverse()方法灑完鹽巴後就會成這樣：
假設RowKey的格式是這樣<date>-<userId>，Swap方式就是把這兩個欄位位置交換：
而Promotion意指將某個cf:qualifier的值提升至RowKey的位置，與原來的RowKey形成一個新的複合RowKey：


Random Key，顧名思義就是隨機分布的RowKey，這種設計可以降低在寫入的情境發生hotspot的狀況。
例如可以使用MD5對timestamp加密後產生一組隨機的RowKey:
由下面的圖可以了解這幾種RowKey適用的情境與效能：

From HBase: The Definitive Guide
任何一種的RowKey設計沒有絕對好或是不好的分別，要看使用情境再決定要挑選哪種設定方式。
介紹完了RowKey設計後，接下來要來介紹HBase hello world api。",,"['RowKey Scan', 'Key Design Type', '效能', '最後']","['Sequential/Time-serial key', 'Salted key', 'Field swap/promotion key', 'Random key']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191641,自我挑戰組,0,Verilog從放棄到有趣系列,4,[Day4]alwaysblock運作,Sheng,https://ithelp.ithome.com.tw/users/20107543/ironman,1513347116000000000,554,"今天要來跟大家分享的是always block的行為，首先先跟大家說一下一些注意的事項，寫在always裡面的變數必須是宣告成reg的形式，這昨天有提醒過，接下來就是同一個變數只能在同一個always block出現，
例如：
reg[7:0]counter;
always@(posedge clk)begin
if(reset) counter <= 0;
end
always@(posedge clk)begin
if(c1 == 1) counter <= counter + 1;
end
像上面的例子就會有問題，原因就是假設reset 跟 c1 同時成立，那counter該歸零還是做累加的動作呢，因為他們並沒有優先權的順序，所以會有問題，所以應該把它改為：
always@(posedge clk)begin
if(reset) counter <= 0;
else if(c1 == 1) counter <= counter + 1;
end
如果你這樣寫也會有相似的問題：
always@(posedge clk)begin
if(reset) counter <= 0;
if(c1 == 1) counter <= counter + 1;
end
以上這些寫法大家可要注意一下，把自己想像成電路合成器，如果這樣寫的話我要的電路產生的出來嘛，電路跟我想的功能會是一樣的嗎．
再來是always觸發條件，大家可以來看一下兩種行為模式
always@(posedge clk) 跟 always@(a or b)
兩個的差異是前者是會依據時脈訊號(clock)做變化，意思是當clock上升的瞬間去做always block內的動作，稱為循序邏輯電路(Sequential Logic) ，而後者是當a或者是b有變化時，才會去做always block裡的變化，跟clock無關，稱為組合邏輯電路(Combinational Logic)以下舉一個簡單的例子及對照波形給大家看：
module always_behavior(
input clk,
input [7:0]a,
input [7:0]b,
output reg[7:0]c,
output reg[7:0]d
);
always@(posedge clk)begin
c <= a + b;
end
always@(a or b)begin
d = a + b;
end
endmodule
上面的程式跑模擬之後產生的波形圖如下，在黃線順間我給兩個input值分別為4跟7，我們來觀察一下輸出的變化．

由波形圖可知道，在黃線部分output d的結果會根據a b的值改變而馬上改變，這就是組合邏輯電路，假設敘述從always@(a or b)begin 改成 always@(a)begin，
那這樣的話，即使b改變，結果d的值就不改變，順便提一下：
always@(a or b) 寫法等同於 always@(a , b)，如果不想寫這麼多的話，也可以直接寫always@(＊)，意思就是當裡面有任何訊號線改變是就會執行always block的行為．
再來看output c的值，他並沒有像d一樣馬上改變，而是等到時脈上升的瞬間做改變，這就是循序邏輯電路，那大家有個概念之後，等語法分享完會再回來討論兩者之間的應用．",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191750,自我挑戰組,0,網頁學習日誌系列,12,jquery：尋找餐廳,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1513345551000000000,535,"想法：
利用尋找附近餐廳，除了列出價錢外，還有特殊需求，例如點擊「含素食」、「可外帶」按鈕就可即時顯示符合的餐廳…
1.網頁顯示各家餐廳欄位。
2.餐廳欄位都含「平均價位」按鈕，按下去觸發顯示和隱藏價錢。
3.上方列出「素食」和「外帶」，當選其中一項，下方符合條件的餐廳欄位會高亮顯示。
$(this)  : 觸發事件的當前元素(在此指的是「.more」按鈕)
filter()：篩選出條件符合項目
addClass()：添加css屬性
remove() ：移除元素
closest() ： 往上查找 只要找到符合條件的 就停止尋找
find() ： 搜索元素
html() ： 設置被選元素的內容 ，同 「innerhtml」
slideToggle() ：滑動(高度變化)來切換元素顯示/隱藏狀態
*其他：data-為html5新增的屬性，可以暫存數值或是程式來存取資料
**W3C  data-*屬性：https://www.w3schools.com/tags/att_global_data.asp**

定義參數
插入內容並動態顯示
簡化程式碼
因為$(this).closest('.store')很多地方都套用，直接設一個變數 store給他

codepen網址：https://codepen.io/yuski/pen/VywjRa
","['程式需求：', '重點語法：']","['jquery：', '結果如下：']","['html：', 'css：', '1.條件切換', '2.按鈕顯示價錢']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191749,ModernWeb,0,認識Chrome開發者工具系列,12,控制台面版1-讀取-求值-輸出循環,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1513344346000000000,515,"今天我們要一起來討論的 Chrome 開發者工具的控制台面版 (Console panel)，這個面版我們在前面有很簡單的介紹過，其實它就像是一個讀取-求值-輸出循環 (Read-Eval-Print Loop, REPL)，你可以在控制台裡面輸入 JavaScript 的指令，它就會執行並把內容印出來到控制台中。因為這一次的鐵人賽，我開始讀了一些官方的文件，發現控制台面版其實是很複雜的 (真的！相信我XD)，但是我用過的功能只有一小部份，所以我會針對我比較有了解的部份做介紹，剩下的，如果有興趣的朋友，可以到官方文件去讀，我相信是可以挖到很多寶的。
控制台使用的方法有兩種，第一種是在打開開發者工具 (參考之前提到的快捷鍵) 後，直接切換到控制台面版。另一種方法則是在任何面版中打開成為一個抽屜 (Drawer)，這種作法是我比較常使用的，並且我會搭配元素 (Elements panel) 跟原始碼(Sources panel) 面版一起使用。跟元素面版一起使用的方法我晚點會說明，與原始碼面版搭配則是要拿來除錯，這一部份我們就留到等介紹原始碼面版時再一併討論。

圖 1: 控制台面版
  
圖 2: 在元素面版打開的控制台抽屜
這裡簡單的介紹如何使用這個面版來做讀取-求值-輸出循環。在打開面版之後如果你的面版裡有其它的 Log，你可以用左上角的小圖示 (或是使用快捷鍵Ctrl+L)先把它先清除，清除後我們就可以開始來寫一點簡單的 JavaScript。
你可以用這個面版來做數值的運算，就像是在 JavaScript 裡一樣：在面版中輸入 5+5 再按下 enter 鍵你應該會得到 10 ，結果應該會出現在輸入的程式正下方。題外話一下，我常常用控制台來做我的小算盤XD

圖 3: 5+5 在控制台輸出的結果
你可以宣告變數，重新指定值 (assign)：
當你執行上面這一段程式後，除了會得到 Hello world from console! 在控制台面版中，應該還會得到一個 undefined，這是因為當呼叫一個方法時，控制台面版也會把這個方法的傳回值 (return) 回傳回來。而因為我們定義的方法 x 並沒傳回任何值，所以回傳的預設值就是 undefined

圖 4: x() 執行後的結果
進行到這邊我想你會發現，其實我們可以用這個讀取-求值-輸出循環來做很多事。沒錯，常常我會用它來寫一些 JavaScript，來快速的知道某些程式是不是按照我所想的邏輯運作。
你也可以寫像是迴圈這種比較複雜的程式
如果印出的訊息是重覆的，控制台面版會幫你整理成一個集合。

圖 5: for 迴圈執行後的結果
當然你也可以使用原生的 JavaScript 方法，像是：

圖 6: new Date() 執行後的結果
或甚至直接存取現在頁面的 DOM 元素

圖 7: document.body 執行後的結果
我們明天會再介紹如果透過控制台面版提供的一些 API 來快速的選取 DOM 元素
我們今天很簡單的介紹了控制台面版的讀取-求值-輸出循環功能，就像你所看到的，你可以在控制台面版裡執行大部份的 JavaScript 程式 (當然是前提 Chrome 要有支援，一些太新的 ES 規範就不保證有支援) 並且馬上就可以看到執行的結果。常常我會用這個面版來執行一些程式片段，比如說在 stackoverflow 上看到別人的解法，想要驗證一下程式執行的結果，如果不是太複雜的程式，我們就不用再打開文字編輯器或是像 codepen 或 jsbin 的工具來執行。而是直接貼到控制台面版就可以啦。是不是很方便呢？明天我們會接著介紹一些這個面版所提供的 API 還有它如何跟元素面版一起結合使用。",['小結'],"['使用控制台', '讀取-求值-輸出循環']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191744,自我挑戰組,0,資訊技術解戈迪安繩結系列,8,IT｜軟體｜應用｜Wordpress全站備份、虛擬主機設定,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1513338325000000000,546,"Wordpress 全站備份、虛擬主機設定
要備份什麼（設定、文章、媒體庫、插件...）
網站資料那麼多，我到底要備份什麼？其實只要把握兩個原則，就可以保證你的網站資料的完整性：
[WordPress 檔案目錄結構]

其中最重要的當然就是 wp-content 這個資料夾，因為它包含了所有使用者建立的內容，當遺失時是無法回復的，因此在備份時可以單獨備份此目錄即可，其他的資料夾或是檔案都是可以重新下載或是建立的。若你使用插件來進行備份，你可以選擇只備份 wp-content 這個目錄，或是備份全站的檔案。-->這裡選擇備份全站檔案
[備份資料庫]
這裏以 phpMyAdmin 為例：

當透過 phpMyAdmin 連上 wordpress 資料庫後，從匯出選單（所有參數採預設值）, 並同時匯出結構與資料，如此日後才能使用此檔案來匯入至 wordpress 資料庫，以還原網站資料。

以上就是 WordPress 備份的基本功，其實並不難。只要掌握兩大原則：檔案與資料庫資料，備份其實不是那麼困難的事。
虛擬主機設定
如何將自己的網址指到 nas 的 wordpress系統中？而不會顯示子資料夾網址。
簡單的說，我使用一個免費的 DSN 服務「agile.myds.me」的網域，而在 nas 中也架設了wordpress 網址在「wordpress」資料夾下。
如果要使用「agile.myds.me」這個子網域指到我在nas的wordpress之中，而非 agile.myds.me/wordpress 該怎麼做？
登入wordpress後台，點選「設定」、「一般」，把 WordPress 位址及網站位址皆修正為你的網址即可。

到 Synology NAS 設定虛擬主機進行設定：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191743,自我挑戰組,1,30天的切版日記系列,12,Day12:Git&Github學習筆記（二）,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1513338077000000000,564,"把提交的檔案拿回來自己的工作目錄中
git checkout 檔案名稱
將單一檔案還原到最新一版commit的狀態
git reset --hard
把索引資料或任何編輯資料清空，讓工作區回到最後一次commit的狀況
HEAD知道自己在哪個commit紀錄
新增第一個commit之後才會有master , master是最新的版本
以上是看著六角學院-掌握 Git & Github 程式時光機 這個課程學的。",,"['取消索引', '還原檔案', 'Github 遠端repository', 'branch 分支', 'master 跟 branch 合併']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191739,ModernWeb,1,Go！從無到打造最佳行動網站系列,5,Day5全員耍廢中(上)Mobile設計,網襪工程師,https://ithelp.ithome.com.tw/users/20107302/ironman,1513337931000000000,605,"這幾天想來分享幾個設計行動版網頁要素，想必也有許多人開發過行動版網頁，也有許多的手機APP是透過嵌入一個Webview將網頁放到其中，大多數的使用者是感受不出來的，還是有一部分的人可以感受到，畫面不是操作的那麼流暢，這之中各有利弊，今天不是針對webview來做討論，提到一些我開發手機版的網頁會去注意的事項，也歡迎大家再下面留言，給予更好的建議。
簡單帶過吧！網路上有許多的文章可以參考，打「RWD、響應式」都可以找的到，簡單來說你可以不用寫不同版本的網頁，同一個網頁透過CSS @media 的屬性來調整使用者看到的內容，下面有一個CSS的範例，當你縮小視窗的時候文字的顏色也會跟著改變
有許多的網站是用響應式的設計，像是中華民國總統府(這個應該夠有份量了吧xDD)，透過手機已及電腦看到的畫面，有不一樣的呈現方式，因為總統府的網頁沒有商業模式，沒有利益上的問題，但在許多的購物網站可以看到，分別設計桌上版及行動版的網站，因為他想要賣廣告，在手機看到的廣告會與電腦上看到的廣告不一樣，因為這樣所以這些網站在設計為護這些頁面上的成本相對來說較高，不同的模式會有不同的設計，我想講到這邊應該可以了解自己想要的是什麼樣的模式吧！
簡單說響應式有幾個優點
對於行動版的Layout尤其重要，如果在小小的螢幕下面塞了滿滿的東西，使用者看起來應該不會覺得很開心吧。
在手機的設計中超過五個的按鈕或是擺放，會造成使用者的操作不順。

(露天拍賣 行動版)

(Android手機 Google搜尋)
POPUP的廣告最最最討厭的就是按鈕小小的，還讓你按到連結的廣告，在設計
曾經在一個機會下，幫朋友寫了一個行動版的網站，在開發的時候一直沒有出現問題，直到網站正式上線後卻發現很多的內容怎麼都跑版了，而且js怎麼也掛了，這時候才發現在每個手機看到的狀況並不會一樣，或許是手機版本過新，或手機版本過舊...等等，有許多的問題，所以在開發完成後，最好在每個裝置上都測試一遍，不斷的去修正這些問題，當你下次在開發新專案時，你將更注意這些細節。
當然你要怎麼測試，有許多的方法，我的好友在這次鐵人賽有寫了篇關於測試的文章系列Nighwatch，測試就是我們開發的流程，盡量去做到面面俱到的功夫摟。
今天的減肥計畫，應該在晚上執行，今天主管們準備豐富的下午茶來替我們補補腦，減肥最辛苦的就是看到食物的時候，要先再三想一想「這熱量高嗎？我還要運動多久才補的回來？」到後面開始自我放棄「算了啦！胖就胖沒有什麼不好的，肥宅我也教了個可愛的女朋友」，最折磨人的其實是心理因素吧。來想想看，今天練練腿好了！
有沒有必要上健身房？？
許多人會有這樣子的疑惑，我也曾經問過自己到底有沒有必要上健身房？常常聽到朋友、同事下班或是假日的時候都往建身房裡面跑，說為了健康、為了體態...有許多的原因，但最重要的是「你」有沒有必要上健身房，沒有一定的答案，但如果你想要達到下面幾點，我建議你可以考慮
上健身房也是要一筆花費，或許你只是想減肥，那我建議你可以到公立的運動中心或是操場跑跑，先建立起運動的好習慣，再加入健身的行列也不遲喔！
有人說，男工程師穿網襪很奇怪
不是很奇怪，是因為你不常看到男生穿網襪
By 從網襪轉型黑絲的工程師",,,"['Responsive Web Design(RWD) 響應式設計', 'Layout設計 & Button的大小', '各個瀏覽器的支援度', '減肥專欄', '每日一句']",['小知識'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191725,AI&MachineLearning,1,以100張圖理解NeuralNetwork--觀念與實踐系列,5,Day05：Keras模型、函數及參數使用說明,IcodesoIam.,https://ithelp.ithome.com.tw/users/20001976/ironman,1513336623000000000,571,"之後我們會討論到各種演算法及應用，使用到的函數及其參數會更多，因此，有必要先打好基礎，將 Keras 架構及習慣用法(Convention)弄清楚，以免迷失在網海中，同時，我們也為第二篇的程式做個總結。
我們再回顧一下， Neural Network 處理流程，步驟如下：

圖. Neural Network 處理流程
以下我們就針對以上流程所使用到的函數，作比較詳盡的說明，但僅限於第二篇使用到的函數，如果要全方面研讀，還是要到官方網站閱讀，筆者採取的方式是『每次討論一個演算法，才說明該主題使用到的函數』。
依據官方文件 說明，Keras 提供兩種模型:

圖. Functional API 範例之流程圖

圖. Functional API 範例程式碼
後面章節 RNN/LSTM 會使用到 Functional API ，屆時再來作深入探討。
選擇模型類別後，我們就要針對要解決的問題，決定要最小化甚麼目標函數，即損失函數(loss function)，常用的損失函數如下：
均方誤差(mean_squared_error)：就是我們之前講的最小平方法(Least Square) 的目標函數 -- 預測值與實際值的差距之平均值。還有其他變形的函數, 如 mean_absolute_error、mean_absolute_percentage_error、mean_squared_logarithmic_error。

Hinge Error (hinge)：是一種單邊誤差，不考慮負值，適用於『支援向量機』(SVM)的最大間隔分類法(maximum-margin classification)，詳細請參考 https://en.wikipedia.org/wiki/Hinge_loss。同樣也有多種變形，squared_hinge、categorical_hinge 。

Cross Entropy (categorical_crossentropy)：當預測值與實際值愈相近，損失函數就愈小，反之差距很大，就會更影響損失函數的值，這篇文章 主張要用 Cross Entropy 取代 MSE，因為，在梯度下時，Cross Entropy 計算速度較快，其他變形包括 sparse_categorical_crossentropy、binary_crossentropy。

其他還有 logcosh、kullback_leibler_divergence、poisson、cosine_proximity 等。
注意! 損失函數、Activation Function 不限使用現成的函數，也可以自訂函數，尤其是損失函數，我們常需要自訂，例如目標函數為庫存成本，我們通常要最小化，但是，如果我們應用在銷售系統上，要極大化銷貨利益，假設庫存短缺造成無法接單，所減少的收益(L1)是兩倍於庫存的儲藏成本(L2)，損失函數就應該訂為 L1 * 2 + L2。另外，我們的目標可能是『最大化』收益，而非最小化損失，我們就必須對變數作一些轉換，使函數變為『最小化""負""收益』，因為，Keras優化都是『最小化』(Minimize)求解，沒有最大化(Maximize)。後續介紹『風格轉換』(Style Transfer)，將照片轉成不同畫風的程式，就是一個典型的例子，它為畫風(Style)定義了一個特殊的函數。
Activation Function 除了提供非線性函數的轉換外，也是一種門檻(Threshold)的過濾，例如，sigmoid，將預測值(W * X) 轉為 [0,1] 之間，只有預測值大於0，才會傳導至下一層的神經元。Keras 還提供非常多種的 Activation Function，以下只列出常用的函數，其他請參考官方文件：
softmax：值介於 [0,1] 之間，且機率總和等於 1，適合多分類使用。

sigmoid：值介於 [0,1] 之間，且分布兩極化，大部分不是 0，就是 1，適合二分法。


Relu (Rectified Linear Units)：忽略負值，介於 [0,∞] 之間。

tanh：與sigmoid類似，但值介於[-1,1]之間，即傳導有負值。


隨機梯度下降法(Stochastic Gradient Descent, SGD)：就是利用偏微分，逐步按著下降的方向，尋找最佳解。它含以下參數：
Adam：一般而言，比SGD模型訓練成本較低，請參考『Adam - A Method for Stochastic Optimization』，包含相關參數建議值，含以下參數：
其他優化函數請參考官方文件。

圖. 優化函數(Optimizer)訓練成本比, 圖片來源：Adam - A Method for Stochastic Optimization
優化的程序是逐步逼近最佳解，一開始我們會選擇一個點開始，此點即稱為『權重的初始值』(kernel_initializer)，初始值的選擇可能會影響優化的結果，Keras 提供下列幾種，我們可以依問題的類型則依使用：
以上函數為訂定問題目標，之後我們就可以在模型上加上處理方法，可包含多個不同形式的『隱藏層』(Hidden Layer)，Keras稱為『核心層』(Core Layer)，構成完整的模型。
Keras 提供的Layer包括：全連階層(Dense)、Activation layer、Dropout、Flatten、Reshape、Permute、RepeatVector、Lambda、ActivityRegularization、Masking。我們目前只使用到全連階層(Dense)，它的運算就是 output = activation(dot(input, kernel) + bias)，即前面提到的 y = g(x * W + b)。輸入的參數包括：
- units: 輸出矩陣的維數，愈大表示分類更細，擬合度愈高，雖然準確率提高，但也要防止過度擬合(Overfit)。
- activation: 使用的 Activation function，若未設定，即簡化為 y = x * W + b。
- use_bias: 是否使用偏差項(Bias)，若未設定或為 False，即簡化為 y = g(x * W)。
- kernel_initializer: 權重(W)的初始值，參見前面說明。
- bias_initializer: 偏差項(Bias)的初始值，參見前面說明。
- kernel_regularizer:  權重(W)正規化(或稱 正則項)函數，作用是對權重矩陣加上懲罰性函數(Penalty)，以防止過度擬合(overfit)，參見 regularizer。
- bias_regularizer: 偏差項(Bias)的正規化函數。
- activity_regularizer: 輸出(y)的正規化函數。
- kernel_constraint: 針對權重(W)加上限制條件，參見 constraints。
- bias_constraint: 針對偏差項(Bias)加上限制條件，參見 constraints。

圖. 當Units變大時，分類的界線越細緻，擬合的程度越大。圖片來源：Implementing a Neural Network from Scratch in Python – An Introduction
所謂『過度擬合(overfit)』，是指使用訓練集比測試集的準確率高很多，也就是說訓練模型無法適用於預測新(未知的)資料，例如，我們在分析貸款人是否會違約，若以身分證號為X變數時，則訓練準確率將可達100%，因為一個人只有一個身分證號，但在預測新資料時，訓練資料內並無此客戶的貸款違約資料，所以，就無從判斷。碰者種狀況到，要如何解決呢? 如下圖，假設加了θ3跟θ4變數之後出現過度擬合的問題，我們就可以對θ3跟θ4乘上一個很大的數目，即懲罰性函數(Panalty)，這樣我們在最小化損失函數時，就會想辦法讓θ3跟θ4變得很小，亦即影響力趨近於0，這就是正規化(正則項, regularizer)的作法，詳細說明請參見 Machine Learning學習日記。

圖. 右邊加了θ3跟θ4之後出現過度擬合的問題，圖片來源：Machine Learning學習日記
看完這些函數介紹，對Neural Network的運作有一個比較清楚的輪廓，如果讀者還想更徹底的了解運算法，不想使用 Keras 現成的函數，可以參考『Implementing a Neural Network from Scratch in Python – An Introduction』，它單純使用 Python 實現 Neural Network，沒有使用任何框架。
下一篇開始，我們就要開始介紹其他的演算法了，CNN登場，進行更複雜的圖形辨識及應用。",,"['前言', 'Keras 模型類別', 'Keras 損失函數', 'Activation Functions', '優化函數(Optimizer)', '權重的初始值(kernel_initializer)', '核心層(Core Layer)', '結論']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191738,自我挑戰組,0,Linux的學習歷程系列,1,開賽!!挑戰30天不間斷，本人為新手，請大家鞭小力一點,小chi,https://ithelp.ithome.com.tw/users/20107723/ironman,1513335642000000000,576,"認真說...我應該會把鐵人賽當成我的筆記本來撰寫
來介紹一下上課時所提到的檔案權限，
suid : 如加入suid之權限即是該檔案得到特權，
可任意存取該檔案擁有者能使用的全部系統資源。
sgid : 如加入suid之權限即是該檔案得到特權，
可任意存取該檔案群組擁有者能使用的全部系統資源。
sticky bit : 這是比較常用到之事件，在Linux系統中，
有/tmp和/var/tmp兩個目錄，是開放給所有user暫時存放檔案之處，
也就是所有user在該目錄下皆有權力任意刪除別人之檔案；
所以如果對該目錄下達sticky bit指令，即可防止user刪除別個user之檔案！
由此可知，如果用samba系統之網管人員，當學生在繳交作業到共用資料夾時，
即可下達1770給該共用目錄，防止學生刪掉他人檔案。
//後續會再補充",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191735,ModernWeb,0,挑戰CSS30天系列,12,day12_font,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1513335577000000000,514,"今天介紹有關字體的CSS，包含：
font-family 屬性是用來設定字體的類別。
font-size 屬性是用來設定字體的大小。大小可以是以數字顯現 (絕對的或是相較的均可)，或是以下其中之一的值：""xx-large""、 ""x-large""、 ""large""、 ""medium""、 ""small""、 ""x-small""、和 ""xx-small""。
font-weight 屬性是用來設定字體的厚度。厚度的設定值可以從 100 到 900 (900 是最厚的)。另外，我們也可以將厚度設定為 bold (厚)、bolder (更厚)、及 normal (正常)。
font-style 屬性是用來設定字體是否為斜體字 (italic 或 oblique)。
font-variant 屬性是用來設定文字是不是要以小型大寫 (small caps) 字體顯現。在小型大寫字體中，所有的字母都是大寫，可是字體是比一般大寫來得小。可能的值為 ""small-caps"" 和 ""normal""。
如以下範例：
結果如下圖：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191736,ModernWeb,2,邁向JavaScript勇者之路系列,12,"JavaScript的嚴格模式""usestrict""",卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1513335244000000000,746,"JavaScript 不斷的演進下，許多不嚴謹的寫法都應該逐漸被修正，但哪些是需要修正的字詞呢!? 'use strict' 則是新加入的標準，目的是為了讓編寫「具穩定性的 JavaScript 更容易」，在不穩定的語法或妨礙最佳化的語意都會跳出警告，讓開發者避開這些寫法。
而在傳統的瀏覽器下 'use strict' 僅會被視為沒有用處的字串，所以不會對舊有的瀏覽器產生影響。
'use strict' 直接加入在程式碼的前方就可以開始運作，特別值得注意的是它也可以單獨使用在 function 下，如果要靠 'use strict' 來修正目前語法上的問題，可以先針對部分的 function 來做調整。
簡單示範一個錯誤 (未定義的變數不能直接賦予值)：
嚴謹模式也能僅用在函式內，這樣將只有此函式套用。
如果使用在函式的開頭，那將只會在此函式套用 ""嚴謹模式""，函式的外部將不受影響。
只有將 'use strict' 放在函式開頭才會有作用。
基本錯誤如下：
如果嘗試修改 getter 則不會默默地沒改，而是直接地跳出錯誤：
不可以嘗試刪除一個不可刪除的屬性(此為原型，在後面的章節會介紹到)：
在先前介紹 this 的時有介紹到不同的呼叫方法，在 'use strict' 的環境下的 純粹的調用 (Simple call) 的 this 不在是全域變數。
但 this 依然可作為 window 的方式傳入。
現在會建議寫 JavaScript 的時候加入 'use strict'，這可以改正一些編寫時的不良習慣，但也有可以因此導致專案無法運作，此時可以考慮將 'use strict' 加在函式內，避免影響過去的程式碼及相關套件。
文章同時發表於：https://wcc723.github.io/javascript/2017/12/15/javascript-use-strict/",,"['使用方法', '常見錯誤', ""'use strict' 及 this""]",,['注意'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191730,Security,0,資安的學習心得及分享系列,12,DAY12垃圾郵件,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1513333657000000000,561,"今天來談一下垃圾郵件，如果你是一位常用E-mail的人通常會知道一件事情，就是我們的電子信箱會有兩個收信匣。

何謂垃圾信件?那為什麼信件會被歸類在垃圾信匣呢?
其實所謂的垃圾郵件，就是系統把用戶的信件判斷成有危脅性的，所以他會把它放在垃圾匣中。
簡單來說，如果今天有一個人一昧地發廣告給你，系統就可能把他歸類在垃圾郵件中，當然現實生活中還是會有其他可能性，例如:匿名者發來的信件、被使用者封鎖的用戶、亂碼信件等等。
但是垃圾郵件並非如此，但攻擊者的角度來看，E-mail是一個很方便的攻擊管道，他是一個可以大量發散郵件的地方，只需要少許的資金就可以發送大筆的資料。像我們前面幾篇有提到的木馬、勒索軟體以及之後會提到的網路蠕蟲攻擊等。像這類的攻擊都可以透過郵件夾檔散播出去。

有名的《梅麗莎病毒》，在1998年由美國人寫出來的一個程式，他主要的傳輸管道就是透過郵件來傳播。
郵件的標題通常為『這是給你的資料，不要讓任何人看見』 一旦收件人打開郵件，病毒就會自動向用戶通訊錄的前50位好友複製發送同樣的郵件。

《梅麗莎病毒》的意思就是透過郵件的便利性，不斷地進行傳送，達到他的侵略效果。所以垃圾郵件至今在網路上也具有很大的威脅性。(待續..)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191728,DevOps,0,Nightwatch101：使用Nightwatch實現End-to-EndTesting系列,5,Nightwatch101#5：使用CSSSelector定位網頁元素,cythilya,https://ithelp.ithome.com.tw/users/20092232/ironman,1513332665000000000,3693,"
撰寫 End-to-End Testing 測試程式的第一步就是抓到網頁的元素，而定位網頁元素有兩種方法「CSS Selector」和「Xpath」，以下使用 CSS Selector。
本系列文章皆使用這個專案，可以拉下來玩玩；有什麼問題都可以提出 issue。
本專案檔案結構如下所示。
待之後的篇章會詳述專案中的各個功能設定，在這裡我們先關注 testSubCategory.js 這隻檔案，它用來檢測露天拍賣的子分類頁，來看看下面這個範例吧。
這個範例在展示露天拍賣的子分類頁使用 CSS Selector 定位網頁元素，然後斷言，動作列舉如下

範例程式碼如下。
完整測試程式碼請見這裡。
執行測試程式。
左上角會看到瀏覽器被 webdriver 控制的提示訊息。

顯示測試報告-通過所有的項目。

網誌版。",,"['範例', '跑測試']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191731,SoftwareDevelopment,0,認識scala系列,12,Scaladay12(PatternMatching),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1513332560000000000,519,"Match 可以幫我們省略寫很多 if else，而且可以比對不同型態．
scala 的 match 不用寫 break 只會執行符合的那一段，然後 default 是用 _ :
要判斷符合多個條件時使用 | :
將 match 的結果指定給變數 :
match 還可以比對不同的型態非常強大 :
再來看更多例子，可以將 Any 對應到的型態，並取得裡面的值 :",,,"['Match Expression', '總結']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191727,DevOps,0,用30天來介紹和使用Docker系列,12,Day12：介紹執行DockerContainer常用到的指令(二),yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1513332270000000000,575,"昨天已經有介紹執行 Docker Container 所常用到的指令，還有一些指令還沒有介紹到，今天就來繼續來使用到還沒有被介紹到的指令。
在開始之前先來回顧一下，昨天有使用到的指令：
docker run：用來執行 container
docker logs：用來查看 container 的 log 訊息
docker ps：用來顯示有哪些container 在執行，如果下-a參數把沒有執行的列出來
docker rm：刪除 container
docker rmi：刪除 Docker Image
今天就來繼續介紹其它還沒有被使用到的指令：
Example 1：
如果要進入 container 看有哪些資料夾、檔案或是要修改檔案可以使用以下的指令：
nginx 為 Container Name，也可以使用 Container ID
進入 container 操作資料的方式有很多，但是 Docker 不建議直接使用 ssh 連到 Container 裡面去操作資料，主要是考量到安全性和每一個 container 都是一個process，所以不希望使用 ssh 直接進入 Container 裡面，應該要使用 Docker 提供的 docker exec 指令。
執行畫面如下

Example 2：
Docker Container 被 stop 停止時，可以使用 docker start 指令把 Container重新啟動起來，指令如下
nginx 是	Container Name，也可以吏用 Container ID
執行畫面如下

Example3：
前面有說到如果把 Docker 的 Container 刪除掉，之前寫入的資料就會不見，可以使用 docker export 指令，把 Docker Container 包含可讀可寫那一層也匯出成一個檔案，如下：
(1) 先進入 Container 裡，新增一個檔案
畫面如下：

(2) 使用以下的指令把 Container Export 成檔案
畫面如下：

Example4：
把上個 sample 匯出的檔案，可以使用 import 匯入進 Docker，這時它就會是一個 Docker Image，如下：
nginx.tar 是上個 sample 匯出的檔案，nginxbak 是 Import 進 Docker 取得 Image Name。
執行的畫面如下圖

執行 container 並確認 hello.txt 的文字檔是存在的，畫面如下

Example5：
停止 Container 的執行可以使用以下的指令：
nginx 為 Container Name，也可以直接使用 Container ID
昨天和今天已經介紹了在 Docker Container 常用到的指令，如果能熟練的使用這些指令對在使用 Docker 上會有幫助，也能對 Docker 的運作更加的了解。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191578,DataTechnology,0,GraphQL+ApolloData入門系列,9,ApolloData&Query與Mutation,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513331932000000000,525,"介紹
前面兩篇ApolloData相關基本設定介紹後，接下來是 graphql 的HOC綁定 gql時候的語法，以及如何使用 Query 與 Mutation
以最下方的github範例 components/PostList.js 這隻的  Query來介紹，先觀察一下 PostList 裡面的 data 有 loading， error， allPosts， _allPostsMeta 這些 props 屬性，另外還有一個 loadMorePosts 的 method ，而這些資料其實是 graphql HOC 綁定 gql 後產生出來的
可以看到graphql 第一個 allPosts 是 gql的 查詢 json payload， 而 options中 第一個 data 就是返回的資料，如果沒有特別命就會返回資料在 props.data， 第二個 props 中寫上一個loadMorePosts method 被綁定的元件 即有這個 props  method ，至於 元件綁定後 loading 與 error 是原本 ApolloData 提供的 ， allPosts ，_allPostsMeta則是返回資料
而loading 當 ApolloData 再發 request 的時候這邊會自動變成 true 所以加載資料可以透過 loading 來切換畫面， 以下是全部 Code 的樣貌 github在下面
loadMorePosts 的 method 主要是使用 apolloData 提供的 data.fetchMore 這個 method 這邊的 data 就是grpahql 綁定的 gql 語法 ，這邊只是給他不同的 variables skip 抓目前已經有載入多少比數，在使用 updataQuery 把新抓回來的資料在透過新舊疊加，產生出一的一筆 allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts] 如果失敗就
返回之前的結果
接下來看 components/PostUpvoter.js 這隻的  Mutation 的部分
這邊可以看 props 中有兩個 ownProps 與 mutate (ApolloData提供) ， ownProps是搭配 optimisticResponse
(樂觀UI，點擊後先反應給使用，之後再執行request) 中看到 updatePost 使用             id: ownProps.id  這個的 ownProps 就是綁定的物件的有重新 render 的效果，mutate 要使用它 ApolloData提供的 mutate 包起來 預設是query不需要
總結
ApolloData 最常見的Client 使用方式就是 這兩個Query與Mutaion ，而常常搞混的是哪些是 props的對應 也應該要去理解 ApolloData 還有提供哪些 props 可以使用，這個範例中學到的有loading ， error， mutate，ownProps
本範例Github連結檔
https://github.com/zeit/next.js/tree/canary/examples/with-apollo",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191530,ModernWeb,2,三十哩路，我的前端學習路程系列,12,Day12::我所知道的CSS重構第三章之一,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1513331804000000000,563,"註解可以幫助自己檢視自己之前所寫的程式碼或是段落說明
應該加上註解的部分包括：
CSS只有區塊行註解(多行註解)，以/* 開頭，以*/結尾
如果要註解單行的話也是用一樣的方法。
以一致的方式來編寫規則集可以讓你的CSS更容易預期，也更容易被理解。
寫法還是受到個人喜好的影響。
規則集我把它理解成寫扣的排列方式
每個人都有自己的一套方法
書上提出了三種規則集的範例
供應商前綴(vendor prefix) 是瀏覽器開發商在新的實驗性CSS屬性尚未標準化前在屬性名稱前加上的標示用字串。
Chrome、Safari：-webkit-
Firefox：-moz-
IE、Edge：-ms-
當該屬性標準化後就不用再加上前綴。
這些屬性的排列順序很重要，瀏覽器會以宣告區塊中，由上而下的順序來套用屬性
沒辦法辨識的就會略過，只套用它能辨別的屬性。
若將沒有前綴的CSS屬性標準版放在有廠商前綴版的前面，在支援第二個版本的瀏覽器中，標準版就會被覆寫過去。
要讓特定瀏覽器的使用者升級他們的瀏覽器需要一些時間，有前綴與沒有前綴的屬性應該都要保留，直到你的網站不支援該瀏覽器為止。
不斷地將選擇器與組合器(combinators)串在一起可能會讓選擇器變得非常複雜。
要維持選擇器的特定度並不定非得要讓他變得很複雜不可
範例3-4 能精準選擇某個元素的CSS
3-4的範例用了幾個子組合器為一個非常明確的錨點標籤指定樣式。
但這並不是錨點標籤製作樣式的好方法⋯
因為這一系列的選擇器與HTML結構的相依性太高，HTML結構只要一有變動所需的樣式就不會被套用。
範例3-5 加進類別後的HTML結構
在3-5的範例中，類別選擇器被用來選擇帶有nav-link類別的元素。
不過a.nav-link這個選擇器應該還可以再調整，不需要這麼明確，像這樣的選擇器只能用在一個錨點標籤上，因此被稱為超格選擇器(overqualified selector)
範例3-6 簡化的選擇器
盡可能地簡化選擇器是有益的，樣式不再依附於所使用的HTML結構上且CSS檔也會稍微再縮小一些。
有時候使用限定選擇器(qualifying selectors) 是比較恰當的
範例3-7 可用的合格選擇器
在範例3-7中
因為input.error明確地指定輸入元素的文字與邊框色，他被視為合格選擇器而不是超格選擇器。
這邊看到了以前沒看過的名詞，試著去查了一下他們的意思... 不知道我的理解對不對
超格選擇器：當一個元素和類名一起使用時（即範例3-5中的a.nav-link）。
限定選擇器：套用到該元素上的類別套用到其他元素時會有不同的結果時，該類別就被稱為限定選擇器。
合格選擇器：拿掉任一類別或元素都還能獨立運行且能隨意套用在其他地方的就被稱為合格選擇器。",,['第三章 編寫較佳的CSS'],"['善用註解', '一致的結構規則集', '以供應商前綴整理性質', '維持選取器(選擇器)的單純', '心得']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191661,ModernWeb,0,Next.js+各種套件組合系列,12,Next.js&ApolloData(三)Query&Mutation,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513331794000000000,512,"介紹
前面兩篇ApolloData相關基本設定介紹後，接下來是 graphql 的HOC綁定 gql時候的語法，以及如何使用 Query 與 Mutation
以最下方的github範例 components/PostList.js 這隻的  Query來介紹，先觀察一下 PostList 裡面的 data 有 loading， error， allPosts， _allPostsMeta 這些 props 屬性，另外還有一個 loadMorePosts 的 method ，而這些資料其實是 graphql HOC 綁定 gql 後產生出來的
可以看到graphql 第一個 allPosts 是 gql的 查詢 json payload， 而 options中 第一個 data 就是返回的資料，如果沒有特別命就會返回資料在 props.data， 第二個 props 中寫上一個loadMorePosts method 被綁定的元件 即有這個 props  method ，至於 元件綁定後 loading 與 error 是原本 ApolloData 提供的 ， allPosts ，_allPostsMeta則是返回資料
而loading 當 ApolloData 再發 request 的時候這邊會自動變成 true 所以加載資料可以透過 loading 來切換畫面， 以下是全部 Code 的樣貌 github在下面
loadMorePosts 的 method 主要是使用 apolloData 提供的 data.fetchMore 這個 method 這邊的 data 就是grpahql 綁定的 gql 語法 ，這邊只是給他不同的 variables skip 抓目前已經有載入多少比數，在使用 updataQuery 把新抓回來的資料在透過新舊疊加，產生出一的一筆 allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts] 如果失敗就
返回之前的結果
接下來看 components/PostUpvoter.js 這隻的  Mutation 的部分
這邊可以看 props 中有兩個 ownProps 與 mutate (ApolloData提供) ， ownProps是搭配 optimisticResponse
(樂觀UI，點擊後先反應給使用，之後再執行request) 中看到 updatePost 使用             id: ownProps.id  這個的 ownProps 就是綁定的物件的有重新 render 的效果，mutate 要使用它 ApolloData提供的 mutate 包起來 預設是query不需要",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191726,Security,0,IT安全稽核系列,12,3.2組織之資訊安全管理系統政策文件是否由管理階層核准並正式發布且轉知所有員工與相關外部人員？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1513331580000000000,536,"或許是早期的工作培養出來的習慣，工作上都會查詢一下當前的法令，以避免對外發布訊息之時，出現違法的情況。
再深入點，這些法令都需要再三的確認，不管是跟法務諮詢，或是懂得法令的顧問討論，總之，不會花太多時間，同時也至少保障到公司及自己的工作業務。
但是，會不會出錯，或者引用到錯誤的法條，答案是會的，只要是人，就算你覺得一個簡單的動作，你重複做了一千次，在怎麼熟練，在怎麼厲害，都會有失算的時候，此時，個人是否有危機處理的能力，就要靠平日累積的經驗來處理了。
或許很多人說，你一直講經驗，我們沒經驗的人怎麼辦？
剛出來工作，總有些老鳥，會故意嚇唬新人，其實，就是直接給下馬威，但，我給新人的建議是，不要慌張，被念是一定會的，要修正錯誤也一定要的….很多你自己都知道是一定得做的事情，腦袋裡面有了心裡準備，就開始著手找出解決方法的順序，不要怕手忙腳亂，這種手忙腳亂就是種學習，記住，職場上沒有甚麼叫做做不來的事情，除非你在研發單位，例行的每一件工作，只要重複三年，你至少會有一定概念，也一定可以解決很多問題，這個就是經驗累積。重點在於，不要害怕挑戰。
以下就探討第三部分安全政策的相關議題，這是與資訊安全組織及資訊單位有關的部分，我們繼續根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，探討3.2的分析。
三、安全政策（資訊安全組織及資訊單位）
3.2組織之資訊安全管理系統政策文件是否由管理階層核准並正式發布且轉知所有員工與相關外部人員？
說明：此項說明只有一個重點：1.管理階層核准。
資安政策，很重要的是組織高層重視，有時候外部氛圍是極為重要的一環，組織的高層如果對於資安這塊沒有很強烈的意識，嘴上即使講著重要，也是沒用的。如何讓管理階層願意執行？依個人依照經驗分享，就是不斷的提出負面案例，其中包含裁罰，或者判例給組織高層了解，跟管理階層不停的宣達，甚至將裁罰的新聞公布在極為顯眼之處，讓不了解資安的管理階層，感覺到危機，如此，才能得到管理階層的重視，核准並公告給全部員工，進而做到要求外部人員。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191723,ModernWeb,0,JavaScript基礎二三事系列,12,Day12　物件與點,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1513330977000000000,539,"今天開始進入第四章節，物件與函式的部分囉。
第二天的筆記有提到，物件是一群名稱/值的組合
例如：
而其值可以是另一個名稱/值的組合，也可以是數值、字串、布林、物件、函式....等等。
例如：
關於物件還有幾件事：
接下來看看以下程式碼：
Batman['firstname']的[]是運算子「計算取用成員運算子」。
它是由左至右相依的，會把物件當成一個參數，把字串當成另一個參數，以此字串去尋找物件的屬性並回傳值。
可以這樣想：
Batman['firstname']='Bruce'就是對物件Batman取用firstname屬性，因為firstname不存在，所以這邊存取建立它並賦值字串Bruce
Batman['lastname'] = 'Wayne';就是對物件Batman取用lastname屬性，因為lastname不存在，所以這邊存取建立它並賦值字串Wayne
這時Batman會是：
console.log印出來看看

這個運算子還可以這樣的用，宣告個變數Who並賦值字串firstname
結果會怎麼樣？
其實Batman[Who]就視同Batman['firstname']，所以當然是印出

這個用法好處在於可帶入變數來存取物件屬性，在開發上會有妙用，除了使用[]計算取用成員運算子來查找、取用屬性外，使用物件最簡單、最常用的運算子就是.了，.運算子也可以用來存取物件的屬性。
使用點這個運算子，會印出什麼?

.運算子也是個函式，它叫做成員取用運算子，可以取用物件中的屬性與方法，使用上很直觀，是前端開發者最常用的運算子，且也不用像[]還要替後面的屬性名稱加上引號。
當我們看到Batman.firstname，通常會這樣想：「阿不就是Batman物件裡的firstname屬性」，這個口語上OO物件裡的XX屬性，在電腦上其實是透過.運算子去作用的，不管是[]運算子還是.運算子，基本上都是透過查找左邊物件(記憶體)，去參照尋找右邊屬性(記憶體)位置。
　
　
　
　
小結
今天瞭解了物件與其存取屬性的[]運算子和.運算子，明天來看看物件實體語法。
至於筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分4-30",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191722,ModernWeb,1,用範例理解Vue.js系列,5,用範例理解Vue.js#5：TemplateSyntax,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1513330912000000000,567,"
連續寫了 Vue Instance, Lifecycle Hook, Virtual DOM 有點快要腦中風，今天就先回到寫幾個基礎範例喘息一下。至於執行結果的部分就麻煩大家點fiddle範例觀看(懶的截圖XD)。
Vue.js 使用基於 HTML 的模板語法，允許開發者將 DOM 綁定到 Vue 實例的數據(data)，且所有 Vue.js 的模板都是合法的 HTML。
在底層的實現上，Vue 將模板編譯成 Virtual DOM render function，當狀態改變時，Vue 能計算出重新渲染的最小代價並應用到DOM的操作上。
插入值：
通過使用 v-once 指令，我們可以執行一次性的差值。
由於 v-once 是一次性的，所以當我們修改 msg 時，即不會在改變。
附上 fiddle https://jsfiddle.net/hunterliu/qfh2o4z9/
插入 HTML：
附上 fiddle https://jsfiddle.net/hunterliu/jc0ugtxz/
Mustache 語法不能作用在 HTML 特性上，遇到這種情況應該使用 v-bind 指令：
附上 fiddle https://jsfiddle.net/hunterliu/gdayc7os/1/
對於所有的數據綁定 Vue.js 都支援完整的 javascript 表達式，例如：
無效：
指令 (Directives) 是带有 v- 前缀的特殊属性。
有些指令可以接受一個參數，在指令名稱之後以冒號表示。
例如：
在此 href 是參數，告知 v-bind 指令將 href 與表達式 url 的值绑定。
另一個範例是v-on，用於監聽 DOM 事件。
修飾符是以.指定特殊的後綴。例如，.prevent修飾符為告訴v-on指令對於觸發的事件調用event.preventDefault()：
因為v-bind和v-on這兩個指令太常用到，之後的範例也都會直接使用縮寫的方式。",,"['模板語法', 'Interpolations(插值)', 'Directives(指令)', 'Shorthands(縮寫)', '參考資料']","['Text', 'Raw HTML', 'Attributes', 'Using javascript Expressions', 'Arguments(參數)', 'Modifilers(修飾符)', 'v-bind Shorthand', 'v-on Shorthand']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191291,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,10,Pandas(Python中的Excel)Day1-資料類型與讀寫檔案,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1513330046000000000,576,"Pandas作為Python最強大的表格處理工具，其操作上非常簡單、方便，也很彈性。所謂簡單，指初學寫程式的人也容易快速上手。所謂方便，指程式碼很短、很簡單，卻可以做非常繁複的工作。所謂彈性，指他在許多較高階的資料整理技術上都有支援，也與Python中常用套件配合的天衣無縫。因此，如果你對資料處理有興趣，而且希望透過Python進行實踐，那麼Pandas則是你的首要學習技術。
以下，今天的文章將講述各類型資料的格式與讀寫檔的方式，明天將細緻的介紹Pandas在資料呈現與整理方面的功能。
terminal
pandas裡面總共兩個內建型別: DataFrame以及Seires。DataFrame是一張table，而其中Series就是一個column或是row的所有資料。以下將從檔案讀寫、DataFrame、Series的屬性以及方法已進行介紹。
以下會順便介紹一下各種檔案的格式，不過沒有打算介紹xml的檔案(比較早期的檔案格式)。將以這張表格為範例，呈現各種資料儲存格式下的樣子。
2.其檔案格式如下:","['前言', 'Pandas的安裝', 'pandas型別介紹', '讀檔', '寫檔']","['csv 檔', 'json 檔', 'html table', 'dist']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191406,自我挑戰組,1,用IT看世界系列,11,Nas雲硬碟的被駭....,allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1513326537000000000,652,"家醜到底可不可以外揚???
其實我很掙扎，但最後我選擇誠實面對
並且記錄下這一切

當初以為這台NAS的admin密碼被改，只要把他重置即可，結果發現案情並不單純
其中把硬碟寄回去給原廠威聯通之外，前前後後搞掉我快半個多月
當然最後事情還是順利落幕。
####故事是這樣的####
某部門提出一個issue，希望公司能提供像Dropbox這種雲硬碟，好讓我們的業主方便下載一些大型文件檔案
當然Nas裡面有提供share link的這種功能，設定的觀念大概也是跟join AD差不多，QNAP客服
一切設定完畢後，Qnap有內建smart share讓對外分享的連結不暴露自己主機的ip，結果這時候一個自作聰明的資深同仁，自己建了一條帶ip的分享rule，為了表示尊重我也問了他一下說之後sop要寫哪個?他說寫他建立的
我說喔,好
不到一週
有位技術部門的同仁跟我反映他分享的連結怪怪的
當我要用root進去查看設定時
.......
admin怎不能登
因為還在測試階段，我就維持預設密碼
結果密碼好像被換了，然後在處理的過程中，發現一件更好笑的事情
後面的rest紐，在web介面功能被「某人」拿掉
在一次的聊天中自作聰明的同仁透露，好像是他幹的，因為怕人會去動
結果本來按一個重置就可以還原密碼的動作，現在搞到我要送SSD卡回原廠，花了半個多月
他自己建的連結呢??
他自己說因為有帶IP可能因為這樣這次admin密碼就被別人猜進去，所以還是用預設的好了
當時我有看了預設所產生的連結，沒啥不妥，但他所建立的rule就有帶出IP
我的「IT」直覺告訴我，好像某個地方怪怪的不太妥...
果然
密碼被換掉......
所以下次我可能考慮相信我自己的「直覺」
待續下",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191631,ModernWeb,0,前端新手村系列,5,前端新手村CSS的作用,chris,https://ithelp.ithome.com.tw/users/20107637/ironman,1513324930000000000,641,"「當你迷惘的時候，就回到原點想一想」-中華一番 蘭飛鴻
網頁前端新手村系列文章，宗旨並不在技術本身的教導，重點放在技術與技術之間的脈胳關係。讓零碎的網頁前端技術的關鍵字，成為比較有系統性的視野。
讓一開始接觸網頁前端的新手們，有一個比較友善的系統來架構你的學習，至於技術本身的深入探討，就留給其它的高手們吧。
CSS，是「 Cascading Style Sheets 」的縮寫。
在1996年左右，CSS剛開始被提出來，我自己是在大約1999年才接觸到CSS1，對於一個高中生來說，是很新的東西。在這之前，CSS的功能是做在 HTML attribute上。
目的在於，資料歸資料，畫面歸畫面[1]
當你覺得，這一段程式碼是為了畫面生時，就是使用CSS的時候了。
也就是說，要讓CSS控制「呈現的形式」。
語法多到你沒想到，他都幫你想好了!!!!
新手要知道的是術語，方便和資深的工程師進行溝通(才不會漏學了什麼厲害的技術)

CSS3 帶來的真是一則以喜，一則以憂呀，對新手來說，隱藏著些許的不友善，但是卻帶來強大的功能。
當你看見 CSS 有加一些特定的前綴
看個例子
為什麼瀏覽器總是會刪掉幾個？不寫就好了呀!!!
(寫到這，總算有一點 for 新手的感覺了)
這種寫法，是一種歷史共業!!!
當年很新潮的寫法，各家瀏覽器業者先實作，不管標準，之後標準推出，這些若拿掉對不起的是對自家瀏覽器的狂熱開發者(應該啦)。所以各家依然留著這樣的實作內容。
那要怎麼做呢？
建議用這樣的原則這麼寫
用意在於，若瀏覽器不支援標準，會自動選一個自己有支援的前綴。
若有實作標準，還可以吃最後一行標準的 declaration 來覆蓋已支援但有前綴的設定。
瀏覽器為了提高效能，比對選取器的方式，是由右至左。
看個例子
以保持瀏覽器高效能。
也就是說，短一點，瀏覽器可以跑快一點。
w3school會在每個語法教學頁，附上語法在各瀏覽器支援程度的訊息。
若遇到想查詢的時候，也可以直接上 Can I Use 查詢。
查詢到的資訊，我覺得還是謹供參考，自己實驗之後才確實是如此。
[1]: 階層式樣式表 - wiki
[2]: Vendor Prefix - MDN","['CSS 的作用', '參考資料']","['前言', '語法', 'CSS3 的特色', '瀏覽器比對的方式', 'CSS的 瀏覽器支援度']","['術語', 'Vendor Prefix[2]']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190843,ModernWeb,1,從零開始的網頁設計系列,1,Day01:遇見小精靈，領取新手道具_網頁開發編輯器,樂樂,https://ithelp.ithome.com.tw/users/20104423/ironman,1513303741000000000,666,"要寫網頁當然也要先有工具對吧？
那其實入門真的不難，開記事本然後就能開始寫網頁了
但是，既然都是要講工具了
哪可能會真的是在說要怎麼用記事本寫網頁呢 ?
算是最老牌的編輯器了吧，不過當由github開發的Atom出現以後
我就又換使用Atom了，Sublime Text 大概只用了短短兩個月不到
由github開發的一套開源的編輯器，我裝了非常多的套件
結果最後把Atom搞得肥肥的，大概用了半年我又跳巢了
目前正在使用的編輯器，也是本篇會簡單介紹的工具
跟前兩個工具比起來，我覺得VS Code 真的好用很多
以往要套件才能使用的功能通通都已經內建好了
另一個點大概是因為他有中文吧 XDD
有中文贏一半(誤
拉回正題，這邊介紹的是我自己在開發的時候比較常使用的功能

這是剛打開的時候會顯示的畫面
最左邊由上至下分別是
1.檔案總管
查看開啟的檔案，在這邊我覺得做的真的非常簡單明瞭且清楚
會幫我們把打開過的檔案放在最上面，如果是已經變更過的檔案也會幫你標示
2.原始檔控制
如果有加入git的話這邊會幫把有更改過的檔案跟詳細都列出來
也可以直接在這邊做git的操作，個人是覺得非常方便
在後面的文章會簡單的提到git的運用
3.偵錯
這一個說實話我比較少用到
4.套件安裝
這個部分其實我真的沒有裝太多，大多都是裝語言類的，讓我在寫的時候可以自動補字或者是幫我把語法區分顏色
因為常用的功能都已經內建，尤其必裝的Emmet已經內建了
5.搜尋
當在寫大型專案的時候會很常利用它來幫我搜尋關鍵字
這邊再提另一個很常使用的搜尋
快捷鍵 command + P

主要用來搜尋檔案
整合是終端機
在下指令的時候非常方便不需要另外開啟終端
檢視 > 整合是終端機


以往我大概都會在設定花非常多時間，因為我想要把介面弄好看，想要檔案有圖示，可是在atom上都是需要裝套件
但是vscode都已經內建好，所以我可以說沒有特別去做任何設定
基本上所有常見的主題都有

我個人的話是使用 Material icon Theme


喜好設定 > 鍵盤快速鍵
更改自己慣用得快捷
我大概只改了一個，就是註解
除了複製貼上以外最常用的莫過於就是自動縮排
自動縮排 shift + option + F
這邊記得要切換回英文才能使用
**搜尋 command + F **
搜尋範圍：目前開啟的檔案
**取代  option + command + F **
檔案搜尋 command + P
選取欲搜尋的檔案後點擊即可開啟
搜尋開啟的資料夾內的內容 shift + command + F
分割視窗


最多可以開啟三個
那以上大概是我比較會使用且是剛入門會比較使用到的功能
在後續文章後會提到關於VS Code的使用小帖步 (> _ O)",,,"['1.Sublime Text', '2.Atom', '3.Visual Studio Code', '詳細的其他設定', '快捷鍵']","['色彩佈景主題', '檔案圖示佈景主題']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191718,DevOps,1,Ops的轉職之路-Puppet從入門就放棄系列,5,Day5-Master-Agent架構-Master安裝,shazi7804,https://ithelp.ithome.com.tw/users/20089211/ironman,1513303672000000000,602,"本系列文資料可參考以下：
來到 Day-5 了阿 ～～～～～～ (無病呻吟)，感覺好辛苦。
今天要講 Puppet 中的 Master / Agent 這個架構了，然後直接就要帶大家來安裝一下 Puppet Server !!
要安裝之前首先先介紹一下：
Puppet Master 是由 Ruby 開發的 Application，Puppet Master 主要是用來跑整個 Puppet Code 編譯的核心，單單 Puppet Master 是無法運行的，還必須搭配 Server 當平台。
目前 Puppet Master 可以在兩種平台上運行：
Puppet Server 是由 Java 開發，運行在 JVM 的 Application 並且提供和 Puppet Master 相同功能的服務，採用 JRuby 可以直接運行 Puppet Code，所以在 Puppet Server 本身就已經內建 Puppet Master。
Rack Server 是由 Ruby 開發的 Web Service，將 HTTPS 請求重新格式化後轉發給後端的 Puppet Master 再進行處理，簡單說 Rack Server 就是一個中繼 Service。
在 Puppet 3 之前都是採用 Rack + Puppet Master 的架構運行，可想而知中間的傳遞耗損了多少效能，所以在 Puppet 4 之後開始預設將 Server 這塊改用 Puppet Server 在整體效能上提昇了不少 (雖然跑在 Java 還是挺耗資源的)，兩者都還是能用，但是 Puppet 已經停止在 Rack 的支援，目前的開發重心都是以 Puppet Server 為主。
因為 Rack 是準備淘汰的東西，所以今天就會以 Puppet Server 為主軸介紹：
目前 Puppet Server 支援在任何 POSIX 平台下安裝，以下平台可以直接用套件管理工具安裝 (i.e. yum, apt)
除此之外最低必須使用 JDK 1.7 以上才跑的動。
在一開始先定義好 Puppet Master 和 Agent 運行的環境：
Master
Agent
Puppet 針對所有的主機皆須定義為 Domain。
在 Puppet 官方有提到：
Name resolution: Every node must have a unique hostname. Forward and reverse DNS must both be configured correctly. (Instructions for configuring DNS are beyond the scope of this guide. If your site lacks DNS, you must write an /etc/hosts file on each node.)
Note: The default Puppet master hostname is puppet. Your agent nodes can be ready sooner if this hostname resolves to your Puppet master.
如果你還沒有定義好 Puppet Master / Agent 的 Domain，可以先設定在 hosts。
Puppet Server 必須準確校時，Master 和 Agent 誤差超過 5 分鐘則 Puppet 交握失敗。
安裝 Puppet Server
從官方 repository 取得 Puppet package。
Puppet Server Memory 調整，預設為 2G。
修改 Puppet 的主要設定檔 puppet.conf。
certname 是用來生成這台 node 憑證使用，Puppet 之間的溝通是使用 SSL 交握。
嘗試啟動 Puppet Server
應該要 listen 8140 port，可以看到是由 Java 啟動，因為 Puppet Server 是用 Java 開發。
初始化 Puppet Server 的 ca 憑證，如果沒有執行 Agent 會無法透過 CA 來產生 Agent 的 certificate。
如果你有開啟 Firewall 記得 allow 8140。
到這邊算是完成了 Puppet Server 的安裝，下一篇將會帶領大家在 Node 上安裝 Agent 和 Server 進行溝通。",,"['Puppet Master', 'Puppet Server', 'Rack Server', 'Supported Platforms', 'LAB 環境', '安裝 Puppet Server']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191717,ModernWeb,3,前端工程師養成手冊系列,12,前端面試法則二三事,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1513301046000000000,996,"當你的履歷被公司挑選出來邀請面試時，你該給自己一個掌聲，代表你的能力水平有達到他們的基本門檻，才會邀請你到公司深入聊聊。面試是個照妖鏡，它能夠讓你更加瞭解自己，你技術水平還差多少、你未來希望自己可以成為什麼樣的前端、你憧憬的企業文化與產品項目也會逐漸被挖掘出來。
大家難免都會有第一次，有時候力求表現但又因不熟練面試過程，常會錯失許多機會，所以這裡分享一些面試時你需要注意的細節。
大一點的公司會請你寫性向、程式測驗，進入口頭面試後起手式通常會是：
有些面試官會習慣把你問到倒，目的是為了想瞭解你對技術的掌握度，所以要有心理準備會被問到自己不會的東西。我模擬面試過很多人，絕大部分會直言：「這個我不會」、「不太清楚」，接著就沒下文了，其實這是很要不得的。原因是工程師的其中一個必備技能是必須探索自己不懂的問題，儘管你不會起碼也要回應：「這部分我沒有涉獵，如果公司需要的話可以再研究它的 API 文件」，如果你很喜歡特定公司，可以把問題記下來，回到家研究完後，再發個感謝信給面試官，順道將解法回傳給對方，自然會對你印象加分。
再來還有重要的一點，在討論的過程中，請不要提到類似「我不會，但我願意學習」、「自己做的東西都是很簡單的東西」。換位思考下，如果你是面試官聽到這樣的話，不會覺得你還停留在學生時代，沒自覺自己已是社會人士，會下意識覺得請到你進公司會花很多時間教你，或是你只能做簡單的東西嗎？初進職場會擔心自己能力未達到就業門檻而感到退卻，但還是會建議不要刻意示弱，會多少東西就講多少話，也不要過於誇大，面試官才能理性客觀地瞭解你的程度。
想找些前端常見題目的話也推薦這兩個連結：
在面試的時候，絕對不要面試官說一句，你才應一句。你應該在交談的過程中，營造出讓對方覺得彷彿你就是他同事般討論工作的氛圍。例如說：
面試官：「你會寫響應式設計的話，那 Bootstrap 也 ok 嗎？」
學生A：「BS 也可以，請問你們有屬意的框架嗎？」
面試官：「我們後台都是用 BS，但我們公司前台產品之前用 BS 很不順所以都手刻，但也有在找適合的框架。」
學生A：「我也有辦法自己手寫 RWD，最近也有在摸 XX 框架，他跟 BS 比起來有哪些優缺點..族繁不及備載」
面試官其實也只是一般人，只是因為立場的關係必須很假掰的和你對談，如果你能夠與對方產生雙向交流，將更有助於面試媒合。
每當要結束時，面試官都會詢問「你有什麼問題想問嗎？」，請一定要準備些問題來問，你要瞭解今天公司在面試你，而你也在面試公司，也有選擇要不要進入公司的權力，假使真的錄取了，但對公司狀態一無所知，進去後才發現跟自己的認知有出入豈不就得不償失？
會推薦的問題有：
「請問公司的部門架構怎麼樣？技術部門協作流程是？」
「前端主要會負責哪些項目？」
「你們如何考量個人績效，是否會影響到福利與年終？」
「有在做版本控制嗎？」
「技術部門都用哪些技術、工具、服務？」
光這些就可以瞭解許多公司的眉角，我常遇到很多朋友說他同時錄取三四份工作，但在猶豫要去哪間。詢問他每間公司的差異竟然答不上來，那就只能怪自己沒有溝通清楚。我會建議至少也要問到「前端主要會負責哪些項目」，這樣你才會瞭解自己做的項目是一個新產品開發，還是主要時間都是維護舊專案，或者一半一半。以及預期所用到的技術是不是剛好想要學的東西，那不就剛好讓你賺到？
除了有辦法讓自己技術成長外，你可以自己設計一個量表，在薪資福利、離家裡遠近、企業文化、個人技術成長、部門組成等五大項目，整理出個比較表格來考量，這樣當你獲得複數工作時，才較好評估。
這裡也分享一個提問問題的文章，裡頭甚至有針對軟體工程師、管理階層、公司領導階層進行提問的方向。
在商言商，公司請你進來是要你解決問題，讓這個體系因為你這個齒輪加速運轉。在對談的過程中，你就必須以公司的求才內容與面試官的對談中推敲出他們想要哪一種前端。如果你很喜歡某公司，就能主動回應所提的工作細節與合作項目都曾經經手過，讓面試官信任你可以勝任這份工作才是最重要的。
接下來就是談薪資的部分，我都會跟要面試的朋友說：「我不會跟你說你值多少薪資，你必須為自己的能力來下籌碼」，所以我都會習慣請他們為自己設計一個期望薪資，模擬面試時也會刻意問期望薪資，讓他們對當下的情境有充分的心理準備來應對。
分享兩部我協助學生模擬面試的影片給各位(影片一、影片二)，假使你正準備前端面試時，你可以打開此影片來自行練習面試，當我說一個問題時，你就按暫停自己試著說看看，等到最後總結時，可以再觀察自己是否有些盲點沒留意到，再加以改進。
最後再補充一些資源給有意成為前端工程師的你/妳：",,"['面試前，預期會被問到什麼問題', '要試著雙向溝通，勿讓面試官唱獨角戲', '要主動提問，瞭解公司特性', '讓面試官看到您的價值', '結尾']","['前端求職常見平台', '面試前、面試後需要注意的細節']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191630,自我挑戰組,0,2017挨踢人生大事紀系列,12,挨踢鳥事滿天飛-電腦不見去？,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513300667000000000,666,"喂～喂～喂～
不是講到「ERP改來改去何時了～」這一段嗎？
怎麼巴庫跳回前一段去？
SORRY！
因為接近年終盤點，資產盤點的內容只要又是和電腦、資訊設備有相關的東東，
照慣例又是扯上挨踢！於是就順勢拉回來再聊聊一些鳥事吧～
通常十年以上的中小企業，又是有在使用伺服器服務，如ERP、MAIL、FTP⋯⋯
再加上內部辦公室人員的電腦等⋯⋯
資訊類的資產數量，應該有某程度的量值，然後伴隨著某程度的複雜度吧？
伺服器主機、網路交換器、無線網路分享器、桌上型電腦、筆記型電腦、印表機⋯⋯
再加上軟體類的OS、OFFICE授權，以及特殊用途的專業軟體版權⋯⋯
以上述及的哩哩叩叩等東東！
親愛的的挨踢朋友們，真的你們都一清二楚的管理好了！
坦白講，幹了那麼久的挨踢。
每回要把資訊類的資產盤點清楚，我還真是每盤一回，頭大一回！
真的是有難度～尤其針對是機房以外的那些老舊電腦？
按電腦的使用壽命和購置預算規劃，每五年換上一整批是最理想的狀況。
但在真實世界裡，電腦用上五年、八年以上⋯⋯見怪不怪也～
只要他還能撐起現有的資訊作業運作，那就是無限期延長服役年限。
出了狀況，挨踢得接手修修補補，辛苦地延長老舊電腦的壽命，不輕言報廢、汰換。
就算壞了，留著也能做為其他同機型電腦的維修零組件代用品。
這樣的情況，造就了電腦資產盤點的複雜度和困難度！
A使用者的PC1，因為故障換成了PC2。
PC1因為有零件壞了，拿了閒置的PC3的零件代換。
PC1修好後，被新進的B使用者調去使用。
但因為PC1實在是太老舊了，於是又找了狀況好一點的PC4，
把PC1和PC5的零組件移植過去，讓PC4能起死回生，將就著用。
現在A使用者的電腦是PC2！B使用者的電腦是PC4！
可憐的PC1、PC3、PC5，已經殘缺不全，死無全屍了～
叫挨踢怎麼盤？
也難怪，老是有電腦不見去～
[補充說明：]
其實我有使用OCS資訊資產管理軟體來協助維護啦～
不過實際狀況和複雜度，還是超出了軟體能掌控的範圍！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191712,SoftwareDevelopment,1,30天快樂學習FunctionalProgramming系列,2,JavaScript(ES6)Syntax大集合,阿志,https://ithelp.ithome.com.tw/users/20103386/ironman,1513300271000000000,704,"本篇將介紹大量 ES6 語法，
在目前版本 Chrome 與 Node 都是可以執行的，但在舊版瀏覽器可能無法執行，
但在文章中不會詳細敘述他們的差異，
只要的目的是希望大家在之後的文章，不會看不懂文法。
如果以下這段都看得懂，那可以輕鬆看過。
本章的程式碼都是可以在 Console 執行的，為了不要讓變數宣告互相干擾，建議你用 立即函數 (IIFE) ，或在 JS Bin 上執行。
究竟 一等公民 (first class) 是什麼意思？
Function 能夠被當作參數傳遞，你可以像對待任何型別一樣對待他，而在 JS 中 Function 被視為一種物件。
這些操作在 JS 中是相當常見也相當基本的，稱之為 λ (lambda) ，在 FP 中這個特性是必要的，用以表示一個運算的過程，有著 input 與 output。
如何區分是把 Function 當參數傳遞，還是執行他呢？
你只需要注意 Function 後面是否有加上括號，如果有括號，那就是在執行它，當然你也可以藉由其他方式執行 Function ，像是 apply 與 call。
在 JS 的 Syntax 中，用上述的語法宣告一個 function，
function 沒什麼不好，一個小缺點就是它太過攏長了，
為了讓 code 更整潔，我多半會選擇使用 Arrow function
另外為了讓宣告的 function 不會意外被改寫掉，我會選擇用 const 做宣告。
Arrow Function 與 Function 不同的點是 Arrow Function 會自動綁定 this ，而且無法 rebind，如果沒有使用到 this ，那種用法則沒有不同。
對於 JavaScript 中 this 究竟是什麼？
我推薦各位參考這篇 What's THIS in JavaScript ? ，非常非常詳細。
欸這篇文章的作者也是 Kuro 耶！ Kuro 太神啦！
你可以為參數設定初值，這在 ES5 中也是可以辦到的，但 ES6 的語法明顯好看很多。
有時候，Function 接受的參數數量不固定， Rest Operator 會把多的參數併成一個 Array。
Spread Operator 用作解構 Array 或 Object，長的跟 Rest Operator 長的很像。
在 ES5 中從 Object 或是 Array 取出值的寫法。
在 ES6 中你可以使用 解構賦值(Destructuring Assignment)
剛剛的 Default Parameters 與 Rest Operator 也是可以使用的。
在 Function 中也是可以使用的。
Enhanced Object Properties 是用來縮短創造 Object 的寫法。
Template Literals 在串接字串時特別好用，而且可以換行。
其實各位只要對語法有一點印象就好，需要用的時候，在 ECMAScript 6 — New Features: Overview & Comparison 或是 MDN 都可以找到，並請搭配 Google ，今年鐵人賽也有很多針對 ES6 語法的文章。
在參賽之前，我多次請室友先聽看看，但很常他的心得都是：「你打這些是什麼鬼， JS 可以這樣寫喔？！」
Hmm...，當然可以呀，這是 ES6 的某個 Feature ，但對很多 JavaScript 新手對 ES6 是相當陌生的（或許是因為 w3school 完全沒有提到），其實我對為什麼會有這樣的斷層有很大的疑問。
如果你成功看完整篇文章 (Hooray!) ，你可以捲回本日重點，試試看能不能看懂。
今天很任性的把所有 Syntax 全寫在同一篇，畢竟主題又不是要做 JS 教學，明天來講講一些有 bug 的程式，來從錯誤中學習吧。",,"['本篇重點', '在開始之前', 'Function 是一種物件', 'Function 的 Function', 'Arrow Function', 'Default Parameters', 'Rest Operator', 'Spread Operator', 'Destructuring Assignment', 'Enhanced Object Properties', 'Template Literals', '看過就忘怎麼辦？', '後記', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191239,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,12,3-1.監控工具之三:elasticsearch,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1513299835000000000,618,"許多服務都會將事件紀錄寫成log檔做事後稽核，也有用syslog發送至syslogserver，很多時候內容都是文字檔，用zabbix這類型工具效果不佳，因此使用其他工具。
一樣同我在首章所講的選工具的方式，去看該類商用工具，再查相同類型是否有opensoft工具。
這裡我選擇使用elasticsearch
https://www.elastic.co/products/elasticsearch

elasticsearch是一個相當強大的收集平台，AWS上甚至不需要架Service直接提供服務
日誌分析,全文檢索搜尋,分散式文件存放,即時應用程式監控
https://aws.amazon.com/tw/elasticsearch-service/

去年鐵人賽也有介紹，利用docker架設
https://ithelp.ithome.com.tw/articles/10186153
以下在作業系統CentOS7依照Documentation架設
https://www.elastic.co/downloads/elasticsearch
安裝JAVA
yum -y install java-1.8.0-openjdk.x86_64
export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk
設定repo(之後就能直接yum一路到底)
這是安裝6.0新版，接其他plung可能會有問題，先不要用這方式
vi /etc/yum.repos.d/elasticsearch.repo
安裝Elasticsearch，設定網址，防火牆開9200
6.X
5.6
設定檔改成外部IP方便界接
安裝Kibana，設定網址，到elasticsearch撈資料顯示儀錶板(之後再介紹用Grafana作),防火牆開5601
6.X
5.6
設定
安裝Filebeat(收集器)，往elasticsearch送資料，其他beat安裝方式一樣，看需求安裝
https://www.elastic.co/downloads/beats/filebeat
先設定收集本機log文件
hosts指到elasticsearch Server IP
重啟
開啟網頁連
Server的IP:9200/_cat/indices?v

開啟Server的IP:5601，到management連結ES的Index，輸入

回到Discover可以看到資料進來了
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191710,ModernWeb,1,PixiJS，方便好用的WebGL內容產生工具系列,12,[PixiJS-Day-12]PIXI.extras.AnimatedSprite,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1513299263000000000,588,"本篇介紹的是 PIXI.extras.AnimatedSprite 類別
PIXI.extras.AnimatedSprite 是個會動的 Sprite 類別，
可想像成逐格動畫，產生逐格影像的方式：
讀取不同的圖片後組合成連續圖片使用，使用的方法是： PIXI.Texture.fromImage()
讀取一張 sprite 圖片，搭配定義 sprite 圖片影格資訊的 JSON 檔，使用的方法是： PIXI.Texture.fromFrame()
(類似 CSS Sprite 裡 CSS background-size 與 background-position 的關係)
其他，產生方式參考 PIXI.Texture 說明
PIXI.extras.AnimatedSprite 官方文件：
http://pixijs.download/dev/docs/PIXI.extras.AnimatedSprite.html
文件裡的範例：
文件上的範例使用不同的圖片檔
一些屬性或方法裡有趣的部分：
預設不會自動 play：
要跑的話要下 play()
playing()：
回傳是否正在播放
animationSpeed：
可控制播放速度，預設是 1，可以是小於 1 的小數或負數
gotoAndPlay() 與 gotoAndStop()：
從某個影格開始播 / 停在某個影格
註：第一個影格是 0
totalFrames：
回傳共有幾個影格
loop：
預設為 true，執行 play() 後會一直重複播放
onLoop：
重複放時呼叫
onComplete：
當 loop 設定為 false 且跑到最後一個影格時會呼叫
官方範例有兩個：
BASICS: AnimatedSprite
http://pixijs.io/examples/#/basics/spritesheet.js

DEMOS: AnimatedSprite
http://pixijs.io/examples/#/demos/animatedsprite-demo.js

兩個 Demo 實際上差異不多，需要注意的是：
Sprite 圖的部分：

比較兩個 Demo 使用的圖片：
手刻也可做出這張圖片與 JSON檔，
範例裡的圖是由 TexturePacker 軟體產生
TexturePacker：

官網 http://www.texturepacker.com ：
有分為 Pro 與 Free 版本可使用
實際使用上覺得相當方便",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191715,SoftwareDevelopment,0,Kotlin30天，通過每天一個小demo學習Android開發系列,12,Kotlin開發第12天GithubStars(OkHttp+RecyclerView),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1513299178000000000,563,"
GithubStars 是一個通過 Github API 請求數據，並通過 RecycleView 顯示的小應用。
因為會用到網路所以要在 AndroidManifest 裡面加入許可。
我們在 「Kotlin 開發第 6 天 ImageList (RecyclerView)」已經有嘗試使用 data class 來建立 model了。
但因為 Android 開發過程會通過 intent 來進行 Activity 之間的傳值，
而其中一個將 Object 作為參數傳值的方法是讓 Object 實現 Parcelable 協定所定義的方法。
可以直接在 class name 上面點 option + enter，IDE 會幫我們直接將方法加入到 code 當中。

這是 Android 世界裡很有名的網路框架，來一個簡單的例子：
通過 http request 之後也一樣需要做 JSON 解析，這裡我們用 JSONObject / JSONArray
把 JSON 解析成 ArrayList 之後，我們要通過 Intent 將參數傳給 ProjectListActivity
在 ProjectListActivity 端接受的方法：
問題：MutableList 和 ArrayList 的區別在哪裏？
問題：var/val MutableList ，前綴是 var 或 val 和後面是 MutableList 或 List 的影響？
問題：有沒有類似 SwiftyJSON 的 JSON 解析工具？可以方便的設定初始值，如 empty String
問題：本來想要通過 searchButton.isEnable 來防止重複發送，但發現如果不在 UI 線程操作，會引起 crash。
不像是 iOS 開發，即使改變 UI 不是在主線程中，系統也會在主線程有空的時候來更新 UI，而不是直接 crash。","['筆記', '參考']","['Permissions', 'ProjectModel', 'OkHttp', 'JSONObject/JSONArray', 'Intent & Parcelable']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191680,自我挑戰組,0,rails學習紀錄系列,3,[Day3]關於index:true和foreign_key:true,thehappyend,https://ithelp.ithome.com.tw/users/20107708/ironman,1513298605000000000,575,"當我們直接用 references 建立關係，他會自己幫我們加入 index 索引。
上課的例子中他還會幫我們加入 foreign_key: true

跟圖二不一樣的是多了  foreign_key: true
我在查index索引的時候有看到另外兩種寫法
如果今天是圖三的話
educations表格裡的 profile_id 會 ＝ profiles的foreign key 。如果今天想要寫入資料到educations的話，他會去檢查educations裡的 profile_id 是不是 ＝profiles的foreign key。可以確保關聯式資料表的資料的完整性。而如果是圖二的寫法的話， 則不會去檢查。
foreign_key: true 的用途，便是會在建立 table 的時候再加上這樣的限制，注意，這個限制是直接建立在 table 裡的喔，不是建立在抽象層的 Model。
而像 has_many 或是 belongs_to 之類的方法就是建立在抽象層 Model 之間的關係，有這樣的設定僅表示這兩個 Model 之間有多了一些方法可以互相查詢，但不表示他們在資料庫上就有直接的關連。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191713,ModernWeb,0,重新學習網頁設計系列,12,DAY12.JavaScript物件特性設置,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1513298473000000000,588,"es6的getter與setter使我們能夠更優雅的存取物件特性
參考以下範例:
這樣的方式雖然也相當不錯，但如果能夠寫成以下這種方式，那就更好了 !
其實相當簡單，我們只需要使用es6的setter與getter
現在我們有兩個函示來處理單一特性
並且js能夠很智能的在特性賦值使調用setter
或在特性別調用時使用getter
另外我們也可以只設定getter而不設定setter
在一般情況下我們正常的存取物件特性並不大礙
但其實特性本身也還有一起值得我們去了解的地方
那就是特性的屬性
控制特性屬性必須使用Object.defineProperty來操作
我們可以用它來建立新的物件特性，或是修改既有的特性
例如我們想讓物件obj的foo特性唯獨，可以這樣子做
當我們有一個既有的物件，我們也可以使用屬性設定的方式新增getter、setter特性
有時候我們會設定非基值特性給物件，通常它們不該能夠被枚舉出來
為了達到此目的我們可以使用特性屬性enumerable
個人疑問
在書中讀到這個部分後實際操作
發現就算不使用Object.defineProperty
total與avg一樣不會被納入計算，希望有前輩能夠給予指點。
最後綜合以上所學, 我們可以這樣把玩範例
或許我們很少使用Object.defineProperty
但使用特性屬性來保護物件特性能使程式更加健壯
尤其是我們在開發一些很可能被他人使用的物件時
我們無法保證使用者能夠很安全的枚舉或修改必要物件特性
此時Object.defineProperty才真正地發揮了它的特長",['DAY 12. JavaScript 物件特性設置'],"['Getter and Setter', '物件特性屬性']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191609,DevOps,0,30天入門Ansible及Jenkins[2018]系列,4,[Day04]Ansible介紹,tsoliangwu0130,https://ithelp.ithome.com.tw/users/20103346/ironman,1513298120000000000,571,"在我們成功利用 Vagrant 模擬出所需的環境後，接下來就可以開始使用 Ansible 這套自動化工具來進行部署了。
相信大家應該都有過重灌電腦的經驗。每一次在電腦重新安裝後，我們都需要花大量的時間把平常常用的軟體一一重新裝上，有些軟體可能還要進行個別的微調，而這樣繁瑣的步驟同樣也會發生在軟體部署的伺服器上。為了正確運行開發出來的軟體，開發人員們往往需要要花費大量的時間在伺服器上安裝所有所需的套件 (packages)、服務依賴 (dependency)以及進行組態 (configuration) 配置，而在安裝的過程中若有疏忽，還很有可能造成部署程式發生無預期的錯誤。因此，自動化就是因為這樣的需求產生的一種概念。若我們可以將每一次部署的步驟寫成一個自動化的標準作業程序，除了可以有效縮短每次的部署時間及降低出錯率外，在未來需要升級部署環境，也會相對容易許多。而 Ansible 就是目前業界最常使用的自動化工具之一。
目前業界中主流的自動化部署工具除了 Ansible 之外還有 Chef、Otter、Puppet、SaltStack 等等。每一個陣營都有大量的擁護者以及各自的優缺點，其實在這個問題上並沒有誰絕對優於誰的答案。我之所以會選擇 Ansible 作為自動化的工具，主要是因為 Ansible 對我而言相較於其他工具來得容易學習許多。在一開始接觸自動化的過程中，其實我最先學習的是 Chef 這套工具。雖然 Chef 的確也是一個功能相當完善且強大的工具，但說實話這套軟體的學習曲線相較於 Ansible 真的是陡峭蠻多的。在選擇工具的過程中，我相信最重要的考量應該在於我們能不能夠在最短的時間內掌握這個工具並有效地解決我們所遇到的問題。在這樣的前提下，Ansible 就成為了我們開發團隊的首選了。除了容易學習之外，Ansible 本身在 GitHub 上也是一個開源的專案。有了大量開發人員的幫助及回饋，Ansible 這套軟體的成長速度其實是真的相當驚人的。
由於 Ansible 是使用 Python 開發的一套開源軟體，要透過 Ansible 在被控節點 (managed node) 上配置環境，唯二的條件只有：
而在現在大部分的 Linux 主機上，基本上 Python 已經都是預裝的基本配備了，所以這樣的要求等於沒有要求。我們只需要在安裝好 Ansible 的控制主機 (control machine) 上透過 SSH 與被控節點進行溝通，就可以輕鬆做到一鍵部署啦！","['使用 Ansible 部署環境', 'Ansible 介紹']",,,"['Ansible 是什麼？', '為什麼要選擇 Ansible？', 'Ansible 的需求']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191711,自我挑戰組,2,GAME30天系列,5,QuasarFrameworkintro.(2/3,我是一支小小小小鳥,https://ithelp.ithome.com.tw/users/20107379/ironman,1513297367000000000,598,"快速建置ＡＰＰ起手式
讓我們先檢查一下你擁有的技能
ES6 Javascript
Vue JS and NPM ecosystems
Vue Router
Writing .vue files
[非必要] Vuex if building large scale Apps.
[非必要] Webpack for tweaking the build system to your specific needs
[非必要] Cordova
全部技能都點滿了？ 恭喜你！你可以使用quasar用的非常如魚得水
現在打開終端機
起手懶人包有幾種選擇  透過以下指令觀看
會出現這幾種選擇
安裝全部模組
開啟有 hot reload 的 dev server
若有需要自己建立新的組件,type 可以是 layout, page, component.
開啟一個有 hot reload 的 mobile dev app, 到market 下載 Quasar Play App, 使用以下的指令, 會產生一個 QR CODE 用ＡＰＰ掃過後, 就會開起dev server
現在準備動作都已經完成了！",['start !'],,['Quasar Play App'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191642,AI&MachineLearning,0,深度學習環境安裝筆記系列,4,[Day04]深度學習環境安裝筆記—Ubuntu系統安裝與設定03.系統設定與疑難排解,a7552005,https://ithelp.ithome.com.tw/users/20091307/ironman,1513296869000000000,593,"雖然都是照著步驟作但有時候安裝作業系統就會出現奇怪的問題，本篇就是來分享如何解決這些問題，然後分享一些個人認為一定要裝的好用工具。
在我實驗室有兩台配有 1080Ti 的伺服器在 Live USB 開機時會出現錯誤，不知道是什麼問題，不過只要在 grub 的開機指令裡加入 nomodeset 就正常了。

目前我們遇到的問題還沒有很多，未來會慢慢再補上。







重開機後就能輸入中文了。




實驗室通常會配兩台電腦，一台灌 Windows 做日常工作使用，另一台灌 Linux 做開發，但是兩台電腦如果放兩組鍵盤滑鼠在桌上真的很佔空間，這時後就該請神器 Synergy 出場啦，他支援各種作業系統，只要以一台為 Server ，另一台設定為 Client 就可以使用，雖然這個專案是 Opensource 的，但是如果不自己編譯的話就要去官網付費下載編譯好的安裝檔，不過有好新人釋出已經編譯好的安裝檔。
專案位置：symless/synergy-core
下載：brahma-dev/synergy-stable-builds



今天就寫這，安裝完系統之後，明天我們將開始準備深度學的習環境，如果大家在系統安裝上還有遇到什麼奇怪的問題，歡迎留言給我。","['疑難排解', '系統設定']","['1. 隨身碟開機，無法進入 Live 系統', '1. 輸入法安裝', '2. 美化 Ternimal', '3. Synergy 共用鍵盤滑鼠神器']","['在 Ternimal 輸入以下指令來安裝輸入法框架以及輸入法', '開啟 Language support 設定輸入法框架', '開啟 ibus preferences 設定中文輸入法', '輸入以下指令安裝 powerline', '編輯 .bashrc 加入以下內容', '更新環境變數', '選擇字形', '設定 Synergy 開機啟動']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191660,自我挑戰組,0,從0開始的菜鳥工程師挑戰賽系列,3,第三天-介紹html基本架構((感覺有點亂七八糟)),lf2exe,https://ithelp.ithome.com.tw/users/20107727/ironman,1513296760000000000,594,"今天終於進入到主菜啦!!
首先，先介紹一個最基本的網頁架構需要這些東西，請看下圖。

開頭要用< html >跟結尾用< /html >給包起來，""/""這個倒斜線就是結束的意思。
用人來比喻，html包起來的部分就像人的皮膚一樣，要整個包起來才是人類。
head就像大腦，可以引入其他人寫好的套件，然後使用他們寫好成套的指令做出其他動作，就像我們學日語美語一樣，你要先能聽懂它們說甚麼，才能做出動作一樣。
title標題，目前還沒發現特殊用途。
body就是我們的身體，一個人所有的行為舉止都會在這邊做動。

至於你問我說，上圖head裡面包的是甚麼，我也不知道!!
反正好像不會影響的樣子，我們就先跳過吧~
對了，很多工程師說的渲染渲染，其實用我們白話說法就是展現出來，例如:用這個程式碼可以渲染出動態直線((這是甚麼我也不知道，隨便掰一個名詞))，用白話說法→用這個程式碼可以直接在網頁上展現出動態直線。
至於為什麼叫渲染，根據友人回答，因為這樣聽起來很專業!!哥，你沒聽過裝逼會遭雷劈嗎((笑))
結尾:
小弟以一個完全外行人來寫介紹文，寫的應該很不專業，請大家多多包涵，如果有錯誤望請指正!!!
希望能分享給其他跟我一樣，完全0基礎的人也能看得懂((應該看得懂吧))，因為平時聽我大喬同學教學的時候，有時候會跟不上他們節奏((專有名詞一次太多))，所以這邊都是我自己用奇怪方式消化完才寫出來的，可能有點畸形XDDD",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191625,DataTechnology,0,MicrosoftBotFramework30天上手系列,9,"Dialog,Prompt",Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1513296752000000000,553,"botframework有一個很好的地方，
就是你可以設定，
這串Dialog 預期收到的資料格式,
使用 Prompt來幫你做過瀘錯誤語的資料。
目前有支援六種資料格式
這樣就可以獲得你需要的資料格式了.",,,"['Prompts.text 除了 檔案以外，什麼都成立了', 'Prompts.confirm', 'Prompts.number', 'Prompts.time', 'Prompts.choice:', 'Prompts.attachment:']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191701,Security,0,CEH之越挫越勇系列,11,[Day10]列舉攻擊-概念篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1513296534000000000,640,"在我們掃瞄完該網段線上的主機資源，並且找到它開放的服務之後，我們總是要想法辦取得進一步的資訊的吧？
列舉攻擊就是這樣的概念 => 用技術的方式取得帳號或群組權限 //心電感應不算！社交工程不算！
所以列舉攻擊包含什麼呢？
//教材放公司忘記帶回家了… ((汗","['Enumeration', '列舉技術', '常用 Ports']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191506,SoftwareDevelopment,1,爬蟲始終來自於墮性系列,15,591出租網爬蟲,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1513296002000000000,707,"我曾經接到一個案主的 case，他需要我寫隻爬蟲去爬租屋網站上的物件，其實這類的需求在平台或電子商務常常出現，那我們就以 591 來嘗試抓取所有物件挑戰看看。

一進入 591 網站就出現一個選擇縣市的 popup，預設為所在地點，當我們選了以後重新整理網頁，然後看到網址多帶了一個 region，應該是代表城市的意思，看起來瀏覽器會記錄我們所選擇的地點。

接著可以看到這個城市的所有物件列表，畫面的最下方有分頁物件。點擊分頁，發現他並沒有轉頁，那肯定是用前端 render，肯定是有 ajax api。

打開 dev tool 確認一下，確定是只有 XHR tab 有多新東西。這個 request 的 response 看起來就是這整頁的物件。

這個 response 其實有很多資訊，包含這個篩選的城市物件總筆數，還有每個物件的詳細資料。

再往下觀察，點選分頁後網址多了 firstRow 這個參數，直覺這個就是控制分頁起始的因素，因為第一頁是 0~29，所以第二頁起始就會是 30 開始。
進入研究之前我們先想一下，每次只能 request 30 筆，也就是說若總筆數是 9,535 那總共要發出 317 個 request 才能抓完這個城市所有物件，很顯然是個挑戰。

我們很直覺得打開 postman 用 get request 試試看，可以很順利地得到結果。

然後我們嘗試改變 firstRow 抓取分頁試試看，一樣可以很順利的拿到結果。

最後我們試試看改變 region，但結果並沒有改變，可見這個 region 應該是個幌子，真正影響城市選擇的並不是他。

既然這樣，那就需要來交叉比對兩個不同城市的 request，兩者看起來基本上除了 region 外的參數沒有什麼不同，那肯定問題就在 header。

header 看起來最可疑的當然就是 cookie，而且剛剛一進網站就記住我的地點，可見 cookie 裡面絕對有城市資訊。

這時候我們可以嘗試用刪去法，一個一個來測試是否會有影響，最後發現 urlJumpIp 這個 cookie key 就是關鍵。
搞定研究之後我們來想想程式流程，我們的步驟計畫分成下面幾步：
不過因為整個抓取會太多，所以我們取花蓮當範例就好。
因為 591 選擇程式是用 cookie 來做設定，所以我們需要先來設定 request 的 cookie。
接下來我們來取分頁數量，因為他的 api response 都有給總量，所以只需要將總量除以 30 就可以了。我們可以把 page 數量丟給 callback 就好了，但之後要做 async.map，所以我這邊會把分頁數量變成陣列。
接下來我們來呼叫每個分頁的 api，取得 data 並將物件資料回傳。
所有元件都準備完了，那我們就可以用 async.map 來組裝邏輯了。
抓取這類型的資料是很常見的行為，抓取一次也不是特別困難的事，但是在商業應用上，肯定都會是想要做到同步、即時更新，如此一來，有很多行為問題會需要考慮，例如 server request limit，每次抓取的時間過長，這些都會是另外研究的課題。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍伸應用']",,"['設定 cookie', 'getPagesCount function', 'getPage function', '組合積木', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191706,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,10,【Day10】解除依賴：Stub之一,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1513295924000000000,562,"Unit test的名稱，就是單元測試，什麼是單元呢？一個一個小個體就可以視為單位。這樣的小個體有什麼好處？除了可以鎖定問題的所在（最主要的功能，debug最怕的是不知道bug在哪邊 QQ），也可以讓測試可以更容易的使用我們可以控制的「變數」。
為什麼呢？因為個體小，我們很容易把它包起來，就好像小時候堆的沙堡，沙堡小小的，做個護城河很容易，但是現實的城堡，光是用挖土機挖就要幾天幾夜...
Stub（樁）是一個減少外部依賴的一個方法，藉由interface（接口）的轉移，使原本依賴於外在參數變成某個虛擬的參數。就好像我們的範例，原本是要從外部取得檔案，並擷取它的名稱，這樣一來一往，花費極大的時間，更別說還要實作出這些功能。所以就需要把所有東西進行模擬化。這樣有點像是訓練飛行員的方式，不可能一下子就要他上飛機坐在駕駛艙內。會先去在模擬機器上，模擬各種飛行情況，如晴天、雨天，再根據給予的情況進行飛行操作。所以這種模擬的情況可以視為一個stub的運用。
在程式裡面，我們要做一個「模擬的駕駛艙」，裡面包圍著模擬的場景，而我們在裡面操作；所以我們要把程式碼改寫成被各種「interface」包圍著，而這些interface可以輕易的被轉換成各種狀況。我們不必管要如何接外面的資料，甚至駕駛艙外面的天氣怎樣，我們都不用知道，只要interface給我們天氣情境，我們根據這樣的情境反應。
至於怎麼做呢？
首先改寫LogAnalyer（新的範例寫在LearningUT的「Day10_LogAnalyer」）
先製作一個interface，也就是名為IEtensionManager的interface，並且幫這個interface實體化一個參數。這個參數manager帶著原本interface的功能，也就是測試「是否為log」檔的功能。
接著我們測試的對象（arrange）就是Day10_LogAnalyzer，增加建構子，讓一開始就建立manager。然後撰寫功能IsValidLogFileName（），讓它檢測帶入的檔名是否符合規則！
主要功能寫完了，接著是測試功能。
而測試的寫在「Day10_LogAnalyerTest」。
首先從上一段的interface在這邊被實現，名稱為 FakeExtensionManager，裡面包含了一個新參數WillBevalid，這邊可以管理我們要傳的值是true還是false。這就是我們控管的駕駛艙天氣（Stub）。
在測試的執行方法中IsValidFileName_NameSupportedExtension_ReturnsTrue()，呼叫了我們接口，並且設定回傳值為true。這就是我們準備回傳的stub。
接著在初始化Day10_LogAnalyzer，也把stub帶入，帶入後執行測試、檢查檔案名稱、判斷是否為true。
這樣簡單的接口應用就產生了，我們只要動到FakeExtensionManager，就可以簡單的修改資料，決定回傳值為何。
接著就是比對（assert）看是否正常。
後記：
鬧了烏龍，以為自己的程式莫名的消失了，害我很緊張，想說這篇打到一半要重打了。
把虛擬機打開，赫然發現...原來我的git只有commit，沒有push到Github上，一直以為丟上去了（暈倒）",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191603,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,10,10.從被動變主動—依賴反轉,依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1513295764000000000,578,"在前文物件導向設計原則—SOLID，我們簡單的回顧 Robert.C.Martin 提出的 SOLID 原則，單一職責、開放封閉、里氏替換、接口隔離以及依賴反轉。
其中，依賴反轉(Dependency inversion principle, DIP)是筆者認為相當重要的原則，實務上使用的機率相當的高，不管是單元測試的實作，功能模組的替換。
A. High-level modules should not depend on low-level modules. Both should depend on abstractions.
高階模組不應該依賴於低階模組，兩者都該依賴抽象。
B. Abstractions should not depend on details. Details should depend on abstractions.
抽象不應該依賴於具體實作方式。具體實作方式則應該依賴抽象。
這兩條定義，說白一點，類別中，不應該直接使用另一個具有實作類別，而是使用抽象的介面，去承接繼承該介面的實作類別。它的目標就是解除物件與物件間，兩者的直接相依關係。
光看文字說明，就跟天書一樣，所以下面用一些例子來說明。
從上面的程式碼可以看到，ReportStatistic (高階模組)緊緊依賴與 SQLAccess (低階模組)，筆者習慣稱這種情況為高耦合。
當我們依據 DIP 的原則，將兩個物件均改為依賴抽象，那麼程式碼會變成……
雖然，我們使用抽象介面 IAccess 來承接低階模組 SQLAccess，達到使用依賴反轉，解決高階模組直接依賴低階模組的情況。但是，假若有一天，我們要替換低階模組，只好去變動原本程式碼，去達到替換的目標。
在上面的程式碼，可以猜到資料來源是使用 SQLAccess 這個類別，但是，如果今天有需求要求要從 csv 存取資料，我們也依據 DIP 原則，繼承 IAccess 實作了一個 CsvAccess。那程式碼應該會變成……
這就很明顯的違背開放封閉原則了，那麼……要在不變動原本程式碼的前提下，去達到替換低階模組的目標，要怎麼做呢？
於是乎，就有人想到，那麼就不要讓高階模組，自行控制低階模組的建立。而是將低階模組建立的控制權移到高階模組外部。再將建立好的低階模組放到高階模組中，讓高階模組使用。
這種方式，就是我們常說的控制反轉(Inversion of Control ,IoC) 與依賴注入(Dependency Injection, DI) 這兩個名詞。
針對依賴反轉、控制反轉、依賴注入這個主題，筆者盡可能將自己所知的寫出來，但深深覺得還有許多的不足。
不過，己經許多前輩，針對這個主題撰寫許多很優良的文章，分享給大家。筆者將自己知道的文章連結分享於下方，讓各位看倌可以更深入的了解依賴反轉。",,"['1. 定義', '2. 將依賴的物件，交給外部指定', '3. 小結', '4. 推薦']",,"['1.1 高階模組依賴低階模組', '1.2 解除物件與物件間，兩者的直接相依關係', '4.1 文章']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191709,自我挑戰組,1,蚵蚵攻城記系列,4,[Day04]我所認識的CSS,azer19890427,https://ithelp.ithome.com.tw/users/20107340/ironman,1513295711000000000,564,"昨天學了HTML
已經可以出現有文字的頁面了!!
但是白底黑字非常單調...
HTML tags 可以加上attribute 產生不同樣式，
但是tag 會變得亂七八糟的。

或是可以用CSS的方式
也可以得到相同的效果

但是不是每個<h1>我都想用相同的效果，
這時候可以使用 id 或是 class 來分類。

這樣就可以輕易的分類了。
至於id 與class 的差異，感覺可以寫出一篇。
再來是一個覺得 hen重要的一個觀念
真的hen 重要
就跟central dogma一樣重要
這些東西影響了畫面的輸出，
Box Model

content : 中間藍色的部分，文字或圖片顯示的部分。
padding :  圍繞在 content周圍看不見的部份，有點像留白的部分。
border : 圍繞著content 和padding。
margin : 在border 之外留白的地方。
學到這個地方 我真的很懷念當年口試做PPT時，
用滑鼠就可以把這些東西拉好的美好時光，
老闆叫我要對齊我都不理他。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191708,自我挑戰組,0,"Let's""Go""系列",9,Day09　DataTypes,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1513295422000000000,549,"前一節我們提到了型別這個概念，
Go 的資料型別可以分為basic、aggregate、reference以及interface這四個類型
這節將介紹 Go 的 basic 型別，如下
numbers
Integers
Floating-Point Numbers
Complex Numbers
booleans
strings",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191696,SoftwareDevelopment,2,來做個網路瀏覽器吧！Let'sbuildawebbrowser!系列,4,瀏覽器引擎處理DOM的簡易版,微中子,https://ithelp.ithome.com.tw/users/20103745/ironman,1513295267000000000,577,"接下來開始會實戰解說瀏覽器引擎，由於我沒有接觸過 Gecko 或是 WebKit，所以會由 Servo 來切入，這幾個都是瀏覽器引擎，之前文章有提到過。Gecko 那些已經是龐然大物，但 Servo 也已經不小了，直接切入有點太困難，所以我們先從「玩具」瀏覽器開始解說，之後再進階成真正的。所謂玩具的意思是，功能非常簡陋，存粹煉功用的，就像是大學修資料庫、編譯程式這類的課程，也都會實做一個玩具當作專題。玩具本身當然不能跟真正的產品相比，但概念是一致的，可以藉由玩具來了解產品。
以下這幾個都是比較小型的引擎專案：
因為是小型的，所以很適合拿來初步學習，看看怎樣制定架構、實作功能等等。大家可以每個專案點進去看看他們的架構、邏輯、寫法，稍微有個概念，也可以順便比較看看大家的差異。同樣一件事本來就有很多種做法 ＸＤ
本文採用 @mbrubeck 的作品 robinson 來解說，原因是這個人也是 Servo 的開發團隊者之一，寫法算是簡易型的 Servo，對我們之後探討 Servo 會有幫助。此外這個專案是用 Rust 語言寫的。
先來看看簡易版的的 DOM 長怎樣吧！
實作 DOM 的程式碼在 robinson/src/dom.rs，可以點進去看一下，其實非常短。這邊可以對照一下 Servo 的部分，是在 servo/components/script/dom/ 點進去你就會嚇到了！
來解釋一下 robinson 的 dom 在做什麼。
HTML 是由一堆的節點組成的。也就是我們平常看到的 <body> 、 <div> 、 <p> 之類的標籤，而這些標籤彼此有上下關係，也就形成了節點。
所以這邊先定義什麼是節點，節點包含他的「子」節點，另外節點也有分種類，例如元素、圖片、文字，因為這邊是最陽春的那種，所以只有定義兩種。
這邊實作元素的屬性，也就是平常看到的 class 、 name 、 id，當然這邊也是簡單地呈現而已。
所謂建構子就是初始化建立一個物件，這邊也是一樣的概念，讓我們可以輕鬆建立一個元素物件。
由於作者只寫了兩種節點，所以建構子也就只有兩種，仔細看的話應該不難理解，像是 elem 就是建立元素，他連子元素和屬性一起建立起來。
元素歸元素，屬性歸屬性，要讓元素有屬性，當然還要做點事，這邊就是把屬性綁定元素的實現，這邊只是簡單的取得這個元素的 id 和 class。事實上實際情況複查得多，例如還要檢查屬性的正確性，還要跟 JS 做連結，有些屬性還會有邏輯，例如 <input> 的 type 就好幾種，如 month 、 date 、 color，每種邏輯都有各自的演算法。
今天看了簡單的 DOM 實作方式，真實的瀏覽器絕對更複雜，萬事起頭難，千萬別灰心！我們先從簡單的學起，之後再繼續挑戰更複雜的真實版本。這幾天都會是簡單版的講解，大家明天見！
關於作者
劉安齊，軟體工程師，熱愛寫程式，更喜歡推廣程式讓更多人學會",,"['玩具？', 'DOM']","['定義節點', '屬性', '建構子', '屬性綁定']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191692,自我挑戰組,0,ArasPLM開發練功30天系列,11,[Day11]前端物件top.aras,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1513295151000000000,506,"Aras提供的API中，IOM的大部分都可以在VB,C#,Javascript中使用，那麼在前端技術上Aras也提供了On-Line JavaScript API Guide支援更多的視覺操作方式，但追根究柢除了基本的IOM可以使用外，還有哪些常會用到呢?
這裡就要引用到top.aras物件，它包含了大部分的Aras前端API，同時也有其他操作功能。

尋找相關的API可以利用除錯器尋找 include.aspx，這邊會載入各種的Script~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191707,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,11,ES6(4),yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1513294770000000000,517,"最後來介紹 spread，以往我們要列出陣列或者物件裡的值，需要使用 map() 或 loop 一個一個挑出來然後印出來，實在是很麻煩。
在ES6裡多了 Spread,  Spread 就是 ...，用來代表陣列或物件裡面的值。",,['Spread'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191704,Security,0,CEH之越挫越勇系列,10,[Day09]網路掃瞄-弱點篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1513293550000000000,599,"所以承接上篇，我們知道了作業系統及版本之後，我們就可以針對該作業系統或版本的弱點做出攻擊。
這個如果要人工做的話呢，光是比較版本差異就會需要花費很多的工時及成本，
所以這裡就會出現弱點掃瞄的章節啦 =3=+
明天確認一下筆記嘿 =3=""","['弱點掃瞄', '原廠工具']",,"['網路弱點掃瞄(VA)', '檢查項目', '網頁應用程式弱點掃瞄(WebVA)', '檢查項目']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191703,自我挑戰組,1,30天的切版日記系列,11,Day11:Git&Github學習筆記（一）,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1513293540000000000,563,"環境建置
設定自己的email和名字
輸入
有看到下列兩行就ok了
user.email=輸入的email
user.name=輸入的名字
cd到專案資料夾輸入 git init ，開一個新的repository，也會監控檔案是否變更、增減。
把做好的檔案加入索引。
add . 是加入全部的檔案，
要單獨檔案加入的話 git add  檔名
檢查狀態，如果有加入索引成功會是綠色的，還沒加入索引的會是紅色。
在已加入索引的檔案修改，git status 會有提示說有這個檔案，有修改過的檔案在工作目錄。
紀錄自己寫code的歷史，看一下當時的自己或別人做了些什麼。
commit 之後在輸入git status的話就會通知工作目錄是乾淨的沒有更新紀錄。
不想讓一些檔案進入到版控的話可以用這個來忽略這些檔案。
新增 .gitignore 把要忽略的檔案寫到這個 .gitignore檔案內，.gitignore不能忽略掉自己。
對我來說 gitignore是新知，

之前雖然用了github ，不過就是按照github提供的流程來做init add commit 這類的事，可以開始忽略像是node_modules 、sass之類的資料夾了。
以上是看著六角學院-掌握 Git & Github 程式時光機 這個課程的學習筆記（才剛開始）。
*每天都趕在最後發文...",,"['git init', 'git add .', 'git status', ""git commit -m '在這裡描述自己做了什麼'"", 'git log', '查詢紀錄，確認commit', '.gitignore']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191702,ModernWeb,1,ZerotoherowithReact.js系列,8,【Day8React】從拆解電子名片學習ReactComponents#Part2,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1513293463000000000,560,"今天講解把如何模組化程式碼
前提：
我們目前所有的程式碼都放在 index.html 裡面，分別嵌入了 React, React-dom, babel 的 CDN，CSS 和 JSX 的部分也都在這個檔案裡面。
首先，先建立一個專屬這個專案的資料夾，資料夾結構如下：
建立 app 和 build 資料夾，並在這兩個料夾底下各建立一個 index.js 檔案。
為什麼要在兩個資料夾底下建立 index.js 檔案，這和 Babel 很有關係。
在 app 資料夾裡的 index.js 放的是我們寫的 JSX，而 build 資料夾裡的則是經過 Babel 轉譯過後的 JavaScript 語法。

建立完資料夾之後，我們就可以把 JSX 語法遷移到 app 資料夾底下的 index.js 檔案裡，而之後經過 Babel 轉譯過後的 JavaScript 會放在？？？
build 資料夾裡的 index.js
非常的不錯很棒給自己拍拍手。。。。
自嗨完之後，我們現在要棄 Babel CDN 而去，我想要直接在我們的專案裡安裝 Babel。使用 npm 來安裝，開啟終端機進到你的專案資料夾裡你懂的。
可以先確認你是否已經有 npm：
可以下這個指令，-v 代表查看版本（version）。我的 npm 版本是 4.2.0

確認完畢之後，我們要透過 4 個步驟來安裝 Babel
輸入指令後，就一直略過一些預設的資訊，run 完你會在專案當中發現一個新的檔案 package.json

這個  .json 的檔案中，你可以看到自己剛剛設定的細項，不過我剛剛完全沒做任何更動，因此這些都是預設的屬性與值。
不過這邊的指令還是來了解一下，這邊安裝了 babel-cli 和 babel-preset-env。

但在這邊我們要把 babel-preset-env 最後面的-env 的部分改成 React 可以運作的環境，因此我們下的指令是這一行：
載完之後，到我們的專案發現多了一個 node_modules 資料夾，這個資料夾底下存放我們未來可能會用到的函式庫們

另外，我們可以在 package.json 發現新增了 devDependencies 的紀錄，定義了你的本地端開發環境

第三步驟，剛剛照著官網示範做了安裝的步驟，接著我們要 Create 一個 .babelrc 這個資料夾
那為什麼這個資料夾會是 . 開頭呢？因為它是一個隱藏的資料夾，就像 .gitignore 一樣。
新增完之後把官網上的那一段程式碼複製貼上

進到 package.json 檔案，修改預設的 script 內容：
預設是這樣
我們要將它改成：
告訴 babel 去 app 資料夾讀取我們寫的 JSX 檔案，接著把他們轉譯到 build 資料夾裡
修改完畢之後，在終端機下指令，監看它的動作。當我們 run babel 之後，它會去做我們剛剛放在 script 裡面要它執行的動作，也就是 babel app -d build
其實整個它會執行的指令就是
ERR的到來。。。。
我在 npm run babel 之後出現了 error，因為我的 npm 並不是最新的版本！！還記得一開始我確認自己的版本是 4.2.0. 我以為是最新的，但不是～～～～～～現在最新版本是 5.6.0 喔！如果不是最新版本，請下這行：
得到最新版本的 npm 之後，它又說找不到 preset ""env"" 指令⋯⋯

於是我們還是照官網上說的下這個指令
OK, 載完 env 有 babel 可以執行的環境了，但此時又遇到另一個 error，它顯示在很奇怪的行數，而且我一直找不到錯誤。後來我決定用最實用（？）的方式，就是直接複製錯誤訊息丟給谷歌大神，結果發現  StackOverflow 上也有遇過一樣的問題。
在 .babelrc 的 preset 是用來定義 字段設定轉碼規則。
看起來這個 error 的出現是因為我們在 .babelrc 的 preset 裡面只有告訴它 env 的轉碼規則，我們還需要加上 react。

好的真是命運乖舛的 npm run babel，終於是四個步驟完整跑完了！！！
run 成功的狀態會是以下:

我們可以看到 app/index.js -> build/index.js，表示在app/index.js 的 JSX 檔被轉譯並放在 build/index.js
安裝部份到此結束，另外還有一個小技巧可以實作，因為我不想要每次一更動 app/index.js 就要手動跑一次 npm run babel 指令，有時候可能只是文字上新增一個驚嘆號或修改標點符號，這樣也要下一次指令真的太麻煩了。
我們可以到 package.json 裡面，我們前面設定的 script
現在我們把它加上 --watch
如此一來，我們只要下一次 npm run babel 指令，它就會持續幫我們監看 (watch) 每一次檔案的更動，當我們修改 app/index.js，在儲存檔案的那個剎那，可以看到終端自動跳出這一行
表示它讀取到檔案有所更動，進而觸發 babel app --watch -d build。
最後再回到 index.html 檔案裡面，把原本的
改成
呼叫轉譯完成的 js 檔案就可以了！
目前整個專案我放在 github 上歡迎大家參閱～
https://github.com/anniesnoopymd/react_social_media_card
呼！一口氣介紹完 babel 安裝，路程顛跛命運乖舛，bug 修了一小段時間才解決ＸＤＤ
我只想說，寫文章很需要腦力，不要嘗試沒吃完餐就來寫ㄋ",,,['4 步驟安裝 Babel'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191563,DataTechnology,0,Python學習筆記系列,11,[D11]Files(讀取和寫入檔案),Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1513293429000000000,526,"Python使用檔案(file)這個物件與你電腦的外部檔案互動。
這種檔案物件可為你電腦上的任意檔案，無論是影音檔、文字檔、或是emails、excel檔等。不過值得注意的是，當你想要在python上使用某些檔案類型，你必須先安裝相關的libraries或是模組。
以下先開起一個Notepad，並做編輯，然後存放在與jupyter notebook相同的目錄裡



資料來源: Go from zero to hero in Python",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191669,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,10,(Day10)資料清理與整理(下),Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1513293065000000000,567,"資料清整相關處理
檢視data.frme結構
新增欄位
刪除欄位
更名欄位
欄位排序
條件式取資料
變更factor level 順序8
R Graphics Cookbook-Chapter15 Quickly Exploring Data",,['參考資料'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191590,Security,0,CEH之越挫越勇系列,9,[DayX]番外篇-隨身碟兩三事,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1513292894000000000,611,"因為漏掉章節順序的關係，所以只好用一篇可恥的番外篇來結果這回合 =3=+
不知道各位有沒有遺失或撿過隨身碟的經驗？
想必應該怕的不是金額上的損失… 而是…隨身碟裡面的資料比隨身碟更有價值吧？
所以要先講的是要怎麼預防隨身碟裡面的資料被偷走…
可以自行設定密碼及加密方式存取。
TrueCrypt 教學
VeraCrypt 教學
但其實想聊的東西不是加密 XD
而是想偷聊一下HITCON GIRLS 社群活動-Birds of a Feather
有神祕嘉賓分享到，該單位實際上是真的有做「隨身碟拾取」這項實驗的 XDDDD
該單位採購了 100 隻高級隨身碟，並且準備了公司的地圖，計劃在每個區域「有意」遺落藏有小程式的隨身碟，做社交工程演練 XDDDD
結果有趣的是在洗手台、廁所、吸菸區的隨身碟的中獎率是 100 %
而在飲料販賣機被發現的機率很低很低
但這項社交工程的重點是隨身碟的回饋率是 5 % 以下  XDDDD
所以如果要做項這社交工程的話，可能會先需要考慮經費問題 (咦？)
另外，如果你在「台灣大車隊」叫車的話，遺失隨身碟的話，是真的有機會拾回的… =3=+
#人間處處有溫情
#活生生血淋淋的見證",,,"['VeraCrypt / TrueCrypt', '社交工程演練準備']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191699,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,11,[Round11]能用C4能解決嗎,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1513292743000000000,538,"如果設計也能用C4解決就好了...
此篇是緒論中的最後小節-界定問題與解決之後半段。
在寫前一篇的問題與限制時，範圍的部份其實解答了大部份的問題...",,"['資源限制', '依遊戲經驗碰到的問題']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191675,ModernWeb,0,每日文章推薦系列,11,Day11npm,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1513291985000000000,572,"反正網路上一大堆
大部分的時候也只要用到下面那幾個
npm install
npm install xxx --save
npm install xxx --save-dev
npm run dev
yarn
剩下的自己查
如果你寫nodejs可以不用npm 那還蠻厲害的
但是通常都會用npm去抓套件來用
不論大小 基本上就是抱持著不要重新造輪子的作法
雖然之前發生過left-pad事件
但是大部分的人還是會利用npm內現有的套件
應該還有人對bower這個工具有印象吧
在以前要在前端做相依管理可能第一個會想到的就是它
2015 年一度傳出停止維護的消息 https://ruby-china.org/topics/28060
在browserify,grunt,gulp,webpack等工具的流行以後也慢慢的減少使用
都直接從npm下載並且做打包壓縮瘦身拆分的動作了
可以省下不少的麻煩 所以自然越來越少人用bower
寫前端是否一定要用npm呢
其實也不一定啦
不需要為了用而用
如果簡單的引入就能解決問題
就還是那樣就好了吧xd
雖然fb推出yarn來試圖取代npm
但是到現在也還沒有完全取代掉npm
大概也跟npm之後還有改版有關系吧
有興趣就自己兩邊都用看看xd

bower搜尋出來的都不是你想的那個 bower

npm 裡面還能自訂script
方便整合操作指令
當專案一大 需要下一堆指令的時候就會覺得很方便
npm從後端進展到前端以後就省下開發者很多的麻煩了
一個檔案就能管理前後端的版本
CSS 终极之战：Grid VS Flexbox
標題講的是戰
但是講的是兩者的不同
不要等客户来通知问题
看標題猜不出來要說啥的代表
內容還蠻值得參考的
如何编写一个 HTTP 反向代理服务器 - 早起搬砖 morning.work
用不到
就看看xd
Steward -- 一款 Chrome 上的类 Alfred / Wox 启动器，键盘党的效率神器 - 掘金
感覺很有趣 所以分享
那些年遇到的后台返回的奇葩json数据 - 掘金
就之前處理資料的經驗
其實csv問題更多orz
前端代码异常监控实战
方法很多
備用
图像与滤波 - 阮一峰的网络日志
因為以前修過相關的課
所以看到圖就想轉xd
LaravelORM 中的 withSum ， withAvg, withMax,withMin 的实现 | Laravel China 社区 - 高品质的 Laravel 开发者社区 - Powered by PHPHub
第一次知道能這麼用
今天看的文章",,"['不講教學', '後端', '前端', 'yarn', 'RUN', '結語', '今日分享文章']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191583,ModernWeb,0,初探前端之路-React-由生到死的踩地雷系列,5,撰寫邏輯-Youcalllibrary.Frameworkcallsyou.,Luis-Chen,https://ithelp.ithome.com.tw/users/20103556/ironman,1513291829000000000,518,"我偶而間看到了，一個提問，『react is library or framework?』，這句提問似乎，沒什麼特別，但仔細想想，其實也算是一個大問題。今天你把react當 框架寫 還是他只是像Jquery 一樣是library呢?
這是庫(libaray)與框架(Framework)，比較俗語話的區別，雖然大家在說前端框架時，都會把React 算進去，
但實際上他比較像是庫(libaray)，下篇參考有比較Angular與react，因為單只安裝React相關套件是不能運作一個完整的前端該有的流程，至少我可能還要安裝，react-router-dom 或 flux/redux 等等 才能正常運作，他僅僅只是個「Ｖ」(views) ，而已當然他真正強大的地方是在於他有一整套相依的生態系，只是可以自行選擇，與其他框架的差別，就像(angular)套裝機與(React)組裝機一樣概念。
React vs Angular 2
「單向資料流」,是整個設計React的重點,會什麼要用Flux/Redux，其實用原生寫法就可以了，只是用用Flux/Redux能更好管理,state,props ,當我們要模組化我們程式時,我們會將更能拆成component 分出去,component之間的傳遞的變數，就會變得混亂與重值,這時候有Flux/Redux的觀念就很好管理程式碼
參考資料
深入淺出 Flux
補","['前言', 'You call library. Framework calls you.', 'one-way data flow']",[''],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191698,SoftwareDevelopment,0,每天Racket3分鐘系列,11,"(lambda(day-10?)(if(day-10?)""媽！我的程式跑不停！—遞迴與尾遞迴(tail-recursion)""(void)))",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1513291531000000000,513,"還記得前幾天，我們介紹 lambda 時，講到費氏數列嗎？我們所使用的解，算是較為直接的解法，這樣的解法好處是程式邏輯很清楚，數學定義如何，程式就如何。然而問題是，這樣的解法非常沒有效率，因為這樣的遞迴呼叫，會導致同樣的值被呼叫多次，例如 (fib 5) 的呼叫結構，可以參考這張圖：

整個遞迴呼叫階層拆開來後，會發現 (fib 2)、(fib 3) 被呼叫了許多次，而每次呼叫，都要重新計算。因此，我們在實際測試時，費氏數列大概到 50 就已經到了人類耐性的上限了。不信你試試看囉！
對於這點，我們有什麼辦法呢？嘿！有人一定會想說，用迴圈解就好了！好極了。通常遞迴可以做的事，稍微動腦筋一下，的確可以用迴圈來改寫。費氏數列這個例子，我們可以這麼想，它其實是一個從 0 開始，兩兩相加的一個數列，因此，我們可以這樣改變問題：
給定初始 a = 0, b = 1，step = n
每回變化為：a = a + b, b = a, n = n - 1
當 n 遞減至 0 時，最終值為 a
我們試著把它轉成一種特殊的寫法：
還記得我們前面說過，for 是一種語法糖，在程式語言的核心邏輯中，是沒有 for 這種概念的。那要做迴圈時要怎麼辦？我們可以看到上述程式碼的關鍵是 fib-iter 這個函式，它定義了我們剛剛所說的那個概念，而在 if 的反論處，遞迴呼叫了自己。這個遞迴相當的特殊，在程式語言裡面有個專有名詞，叫尾遞迴。尾遞迴不是單指在函式的尾端呼叫自己而已，而是包含了當它呼叫自己時，它的參數已經是個已知值。
遞迴之所以會慢，乃在於函式呼叫時，若是其參數本身也是另一個 expression（表示式），程式語言會先對這個 expression 求值，才傳進去給這個函式，這是一個很合理的邏輯，也是一個在寫遞迴時容易遇到的坑。因此許多語言便發展出對這種不用深入去求值的尾遞迴結構的最佳化處理機制。在執行時期，程式語言會把它轉化成為一種迴圈結構，類似這樣：
因此，這時候，你真的可以下個 1000 的參數試試，Racket 會很快地算到 1000 然後回傳一個嚇死人的天文數字。
我們在先前有說到，Scheme、Racket 是屬於 lexical scope，又稱 static scope，相對於 Lisp 的 dynamic scope，有些什麼不一樣呢？我們借用一個例子 [1]
這個時候，(f 3) 會是什麼結果呢？12？6？
如果這個程式，在 Emacs Lisp 裡寫，結果會是 12，但在 Racket 裡頭，結果卻是 6。這是為什麼？
早期 Lisp 在發展時，程式語言專家們對於 x 這個自由變數的定義，認為應當是由 lambda 被呼叫的當下，在那個範圍裡去尋找。因此，在執行上述程式時，會找到第三層 let 的 x，所以算出 12。然而，這個機制惹出了相當大的麻煩，使用 Lisp 的程式員在函式呼叫時，會出現意想不到的狀況。於是後來，Common Lisp 拿掉了這個機制，取而代之的是 lexical scope，同樣的，Scheme 一出來時，就選擇了 lexical scope 的做法。因此，你用 Racket 或其他的 Scheme 的實作，都可以得到 6 這個結果。
已經寫到第 11 天，好像有什麼沒講的是吧！我們好像還沒講到命名。在其他語言裡，命名原則通常會很早就說明，可是在 Racket 裡頭，因為所有的操作都是一種 lambda expression，因此我們必須講完 lambda，才能回頭看命名原則。
雖然我在 Racket Reference 沒發現，但在 Scheme 的規格書裡 [2]，倒是找到了一段簡單的說明，Racket 與 Scheme 的 id 可以使用英文字母、數字、Unicode 字元，以及各種擴充符號：
（幾乎 1 ~ 0 這排全用上了！）
可以使用 Unicode 字元是比較特別的，因為在 Racket 裡頭，可以用 λ 來代替 lambda，鍵盤快速鍵為 ctrl+\，因此要使用中文也是可以的。
其實按照規格書的意思，就是說只要 id 不是一個數字，則基本上都是合法的。換句話說，你可以試試看這樣的宣告：
而 Racket 的命名慣例，還是依照 Scheme 的命名慣例：",,"['1. 跑不完、跑不完、就是跑不完', '2. 媽！我的費氏數列可以算到 1000 耶！', '3. 動靜之分', '4. 命名大學問']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191697,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,11,[Day11]EasyFlowGP--BPM文件,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1513291513000000000,511,"這30天主要想和大家分享系統表單的開發，管理的部分有機會再和大家分享。
所以系統管理工具目前就先分享一篇(SQL註冊器)
今天要談的是EFGP開發中很重要的""工具""，就是BPM文件。
這是鼎新提供給開發工程師參考的範例和說明。
很感謝有BPM說明和範例，幫助我在表單開發上更快進入狀況。

BPM文件又分
基礎篇:表單元件介紹及範例
進階篇:Ajax Service介紹及範例

開接觸EFGP的工程師，一定是先從基礎篇(表單元件學習)，再進一步到Ajax的引用。
這部分的細節應用，在後續的幾天將會和大家分享。
而我自己在挖EFGP的寶貝時，意外發現，有BPM文件以外的AJAX 和 WSDL列表。
AJAX:http://X.X.X.X:8086/NaNaWeb/dwrDefault/index.html
WSDL:http://X.X.X.X:8086/NaNaWeb/webservice/servlet/AxisServlet
但可惜都是函式，沒有像BPM文件一樣詳細的介紹。
這需要自己摸索，嘗試傳入參數值，再看回傳的資料是否為所預期。
((我想等有需要用上時，再來試試函式吧，相信這對聰明的你來說，不是難事))
例如下圖的AJAX 是應用在Sap的整合上。

點進AJAX函式後，可嘗試傳入參數值，執行[Execute]會得到回傳值。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191676,自我挑戰組,0,用laravel尻出自己形狀的linebot，還要撐三十天！系列,9,【第九天】第一次爬漫畫就上手,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1513291290000000000,538,"嗨～各位晚安！昨天已經完成了推送巴哈當天最新動話的實作，趁現在手還熱的，我們接著來試試看漫畫吧！
就從99770下手！
進去之後隨便看個海賊王好了，會發現有個170很常出現在他的內容裡面，也是網址的部分之一，就大膽猜測這就是他的某種ｉｄ！


再去搜尋個東京湌種:RE，來驗證看看25010！

好！那我們就開始寫code吧！大家６０分鐘後見～！
CrawlerService.php
原本說好六十分鐘，結果花了快兩小時！殘念！！
順便分享一下中途採的雷！
後來發現原因是在於LINE的縮圖只吃https，不吃http！
恩～雖然是很久的考古題了！但我們明天就稍為輕鬆一下認識這兩者之間的差異吧！
所以今天的成果大概是這樣～明天見啦！
",['【第九天】第一次爬漫畫就上手'],"['BINGO!', 'DONE!']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191685,自我挑戰組,1,軟體工程漫談系列,10,『我覺得自己來比較保險，我超有經驗』--自動化部署的謬誤,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1513290867000000000,599,"自從這幾年DevOps不知怎地流行起來後，關於自動化部署這件事情，討論度一下子變得很高。贊成跟反對的聲音都有，不過，有些反對的聲音，聽起來很合理，好像沒什麼能反駁的，但是事實上都有其問題存在。我認為，世界上的經驗有千千百百種，但是邏輯只有一種。抓住邏輯，就能做出萬種應變。以下我們只簡單列出幾項常見的論述，並推敲一下其邏輯上的謬誤：
有人認為，自己寫的自動化部署腳本，無法達成所有我們在部署過程中需要執行的步驟。譬如，我自動化地上傳了binary，如jar檔，但是用戶狀態我還是得手動更新；或是我自動化地關閉與開啟了服務，但是簡訊通知客戶，我還是得電話或line通知客服等。
事實上，這樣的想法，等於是把自動化部署，侷限在了單一工具的使用，或是單一任務的執行。其實，技術上，只要是人能靠打指令做到的事，機器都可以幫忙做。譬如，上述的例子，就可以透過maven、ssh、SQLPlus、Line Robot API的協動來完成，並且利用ansible來控制這些工具在本地及遠端伺服器的動作。
所以不是自動化部署做不了整套，而是你的腳本還沒做到整套。
如果我把部署動作拆解成： 1) 停止服務， 2) 上傳jar檔， 3) 更新設定檔與靜態資源， 與 4) 重啟服務。
很多人會擔心，設計一套固定腳本，萬一上傳jar檔卡住了，或是靜態資源沒更新完就終止，接著服務就傻傻地被開啟，那用戶不就會使用到錯誤的參數，得到錯誤的結果了嗎？那我還不如手動一步一步做，雖然慢了一點，但是我可以每做一步就停下來檢查，不是更安全？
非也，非也。
我同意『每做一步就停下來檢查』這件事，這件事在確保正確性方面，實屬有益無害。然而，人能做的檢查，機器就不能做嗎？真的不能嗎？我們舉個例子：我今天要修改服務設定檔，要把某個服務的port從3333改成7777，於是我必須要在開啟服務之前，檢查每台伺服器的該檔案的該值是否已被更新成7777，一但有任何一台有誤，我就馬上停下來修正，直到所有檢查都完成了才開啟服務。
如果你只有2台server，那妳可以一台一台ssh進去看，萬一你的伺服器有5台，或是10台，甚至20台呢？首先，ssh去檢查這件事，都不用靠任何先進工具，光靠一個shell script就能做到，更何況現在已經有諸多工具，能夠平行地上傳並檢查md5或是檔案內容，一旦有錯還能自動回朔到上一版本，而這版本也是自動記錄的，不用另外手抄。你說，到底是手動安全還是自動安全？邏輯搞通了沒？還沒？我們再看看這個：
環境變化快時，需求也變得快。腳本會比較不易維護，這倒是真的。但是這個『不易維護』的現象，在邏輯上，到底是相對於誰而言？是比需求變化慢時不易維護呢，還是比手動佈署還不易維護呢？
沒有正確的對比目標，這樣的立論是不科學的。
但是，修改腳本只要存檔後，第二次的執行步驟就不會錯，除非你再因應需求再更改。反觀改變習慣呢？人的習慣一旦養成了，就很難很快改過來。再有經驗的工程師，都難逃習慣的影響。也許，他出錯率比別人低一些，但是，在環境變化快速時，你認為長久以來的習慣會不會造成若干程度的影響？
腳本不易維護是沒錯，但是養成習慣的潛意識動作難道就比較容易維護？你認為呢？
我們這麼說吧：
你的同業檢查100台機器的30個設定檔只要30秒，你需要幾秒？
你的同業上傳100台機器的jar檔只要30秒，你需要幾秒？
你的同業買了新機器並做完基礎設定後，佈署成特定版本的特定服務只要3分鐘，你需要幾分鐘？
你的同業在線上發生重大缺失時，把100台server上的服務都退回前一版本只要5分鐘，你需要幾分鐘？
回應前面說的，世界上的經驗有千千百百種，但是邏輯只有一種。找出經驗中正確的邏輯，套用在未來的事件，變成更好的經驗；找出經驗中錯誤的邏輯，加以修正，避免未來類似事件中重複同樣的錯誤，才是我們學習科學的實用之處。",,,"['自動化部署不完全，做不了全套。', '臨時狀況時，機器會做錯事。', '環境變化快時，腳本不易維護']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191686,自我挑戰組,0,服務桌從開始到進入資安領域系列,10,[Day10]服務桌的日常:linux固定IP、網卡設定,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513290676000000000,520,"有時侯Malware在虛擬機中跑不起來…
除了可能被認證為邊緣人
也有可能是網路環境問題
需要設幾個IP吻合Malware執行要求…著樣
===確認使用中的網卡資訊===
使用中的網卡顯示已連線

===啟動/關閉網卡---
網路設定檔位置(以CentOS7為例)
停用網卡
啟用網卡
重啟網卡
===設定固定IP===
方法1.  編輯文檔

確認IP設置~
IP: 192.168.95.27
子網路遮罩: 255.255.255.0

方法2. 使用指令
重新啟動",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191684,ModernWeb,0,Confluence線上協同作業之平台系列,10,常用到的幾個功能,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1513290520000000000,489,"雖然目前的標題有些發散與籠統，也可能之後會改題目，但不外乎就是會介紹到大多數社群網站，像是facebook,line,google plus...等對於文章主題，我們可以在上面予以評論(comment)、like(按讚數)、follow(networks)、watch(notification by message or email)的介紹。
在confluence內您可以建立多個space (可以把它想成多個主題或類型)，而每個主題類型下可以建立很多篇的文章pages，當登入confluence的人員可以對這些主題給予feedback/comment/likes來與文章主題做互動，那麼如果是負責版本的人，就會比較希望知道每個主題下有多少個comment，及有多少人來按讚，如此來統計出那些文章是比較多人喜歡的，透過這樣的統計資訊來調整文章內容資訊，讓更多大家喜歡的主題可以輪替在上面。
在confluence knowledge上有提到，透過下列的指令可以抓出SPACE下有多少comment數，其中creationdate(建立日期)可依照您的喜好來調整，如果對postgresql函數有熟悉的話，就可以by 年/月/日來看出comment的成長數
select c.title,(
Select count(contentid)
from content
where contenttype= 'COMMENT' and creationdate between '2017/05/01' and '2017/06/01'
AND pageid = c.contentid
) as numComments
from content c
left join spaces s on c.spaceid=s.spaceid
where s.spacename = 'space name'
group by c.title,c.contentid
order by c.title asc
而同樣的like數的統計也可以在confluence knowledge中來看到，透過下列的指令來看出整個網站的文章按讚數統計
SELECT TAB2.pageid, TAB1.contentid,TAB1.TITLE
FROM content TAB1,
( SELECT pageid
FROM content
WHERE contentid IN (SELECT contentid
FROM likes
WHERE creationdate BETWEEN '2017/6/1'
AND '2017/7/1')) TAB2
WHERE TAB2.pageid =  TAB1.contentid
透過comment/likes數的統計資訊來整理統計出confluence內那些文章主題被較多人關注與喜好，再透過與其他plugin的結合應用，來對戰內的文章內容作調整，此為每個版主都會遇到的問題。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191694,ModernWeb,0,TypeScript-初學之路系列,8,Day08-JSX(上),TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1513290304000000000,483,"JSX 是一種類似 XML 的標記性語言
可以被轉換為合法的 Javascript 因為 React 的框架而開始流行
但是也可以，但是也可以使用在其他程式中
在 TypeScript 使用 JSX 必須先做兩件事情
TypeScript 有三種 JSX 的模式， preserve, react, react-native
會保留 JSX 提供後續轉換使用
會生成 React.createElement 在使用前不需要再轉換
相當於 preserve 但是輸出的檔案副檔名為 .js
可以在命令列中使用 --jsx 或是在 tsconfig.json 中指定模式
寫一個 class
因為 JSX 語法解析困難
所以在 TypeScript 禁止使用 <> 來宣告
所以在 tsx 中改為
as 在 .ts 或是 .tsx 中都可以使用
為了理解 JSX 如何檢查類型必須要先了解原生的元件根基於值得元件有什麼不同
假如有一個元件 <expr /> 可能會引用 div 或是 span 這類的標籤
TypeScript 使用和 React 相同的規範來做區別
Intrinsic elements 預設是 JSX.IntrinsicElements 做類型檢查，預設是 any
上面範例中 foo 可以執行，但是 bar 會報錯誤訊息，因為 bar 並沒有在 JSX.IntrinsicElements 內指定
也可以指定為所有
一般使用 Component 如範例
範例
因為 SFC 是簡單的 Function 所以可以盡量的使用","['JSX', 'as Oprator', 'Type Check']",['基本使用方式'],"['preserve', 'react', 'react-native', 'Intrinsic elements']",['Stateless Component (SFC)'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191682,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,12,史上最強套件管理-NPM，npminit與npminstall(Day11),"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1513290264000000000,502,"Hi 大家好，今天我們將會回到原本 Vue-Cli 的主題 - NPM
如果今天上網去搜尋 What is NPM
你通常會找到一個答案
NPM is a package manager - 「NPM 是一個套件管理工具」
什麼叫做套件管理呢？
簡單來說，在沒有套件管理的世界
我們今天如果想安裝一個函式庫來用(我們用 Selenium 來舉例好了)
(Selenium 簡單來說像是一個可程式版的 Chrome ，你可以寫一些程式來讓瀏覽器跑自動化的行為，像是爬蟲 or bot)
今天沒有「套件管理工具」的話，你想要在你的專案裡新增 Selenium
你得要做的事情是，先找到 Selenium 的原始碼
https://github.com/SeleniumHQ/selenium
然後想辦法複製原始碼，然後將它加進你的資料夾裡
比起描述 NPM 做了什麼行為，我們直接做 demo 比較快
假設今天我們要用 Node.js 寫一個 Project，會用到 Selenium

接著想辦法複製下來，手動加進你的 Project
並且要閱讀相關文件，看這個要使用哪隻檔案當作進入點
如果想要在一個 Project 裡面使用 NPM ，我們這邊會先學到一個指令 NPM init

在打入 NPM init 後，會被要求輸入幾個欄位
package name: 你這個 Project 要叫什麼名字
version: 你決定這個 Project 現在該是第幾版
description: Project 基本介紹
entry point: 進入點，如果要跑你的 Project 應該要執行哪個檔案
author: 作者(自己)
license: 你這個 Project 是採用什麼授權的
test command: 這個不太重要，待會會說明
基本上結束後，你可以看到這個資料夾底下，新增了一個 Package.json
如果你實際點開 package.json 來看
基本上使用 NPM 來創建的 Project，他會連一些專案的資訊都幫你做管理
一開始使用可能會覺得欄位很多
但是有趣的是
就因為 NPM 可以設定的東西很多，package.json 常常會跟其他服務共用呢！(後續說明)
基本上產生完 package.json 就可以開始安裝了
如果你覺得上面要一直輸入很冗，可以使用 npm init -y
他跟 npm init 幾乎一樣，只是它會幫你把預設選項全部跳過，產生一個空白的 package.json (懶人專用)
要新增 selenium 的方法很簡單
先搜尋 npm selenium
基本上就可以找到已經被發佈在 NPM 上的 selenium

而指令也很簡單，npm install selenium-webdriver

接下來會要等一段時間(NPM 會從他官方的資料庫去撈函式庫的資料)
最後安裝完之後，我們可以看到現有的資料夾裡面新增了兩個檔案
node_modules 和 package-lock.json
我們先來看 node_modules 裡面

我們可以看到，剛剛的 npm install selenium-webdriver 這個指令
不但創建了 node_modules，新增了整個 selenium-webdriver 的原始碼
還附加了許多資料夾
之所以會新增這麼多不同的資料夾，不是因為 NPM 壞了
如果有使用過 bootstrap 好了，我們都知道要引入 jQuery
這邊同理，Selenium 本身會需要引入其他函式庫才能使用
所以他會自動幫你都裝好
基本上，NPM 本身不但是一個套件管理工具
他同時有一個龐大的線上資料庫
每次你使用 npm install，他都會幫你去線上搜尋這個函式庫有沒有被別人在 npm 上上傳過
如果你把這些檔案全都去 NPM 搜尋一次，每個都找得到線上的安裝頁面哦！
如果我們打開 package.json，其實可以發現他已經被 npm 自動更新過了

他這邊會記錄著，你這個 Project 安裝過 3.6 以上版本的 selenium-webdriver
NPM 這個主題實在是非常大
我們將會在明天把剩餘的特性介紹完畢！
我們明天見","['什麼是 NPM', '但是 NPM ?', '實際新增一個函式庫', '問題1: 這些檔案從哪來', '問題2: NPM 如何知道該安裝哪些相關的函式庫', '明天']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191688,SoftwareDevelopment,1,看到code寫成這樣我也是醉了，不如試試重構？系列,4,開發者能察覺的壞味道（BadSmell）,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513290262000000000,550,"昨天提到，開發者都是在第一線直接被技術債凌虐，是最有感覺的苦主。
在談技術債的時候曾說過：「事後被別人發現的才叫 bug ，自己開發當下發現的不算」，技術債也是，設計不良的做法，當下覺得不對勁就可以立即重構改善設計；如果不重構，在未來被其他人抱怨時，就會成為技術債。
這不對勁的感覺，在重構這本書裡稱之為「壞味道」。壞味道也是一種隱喻，大概就像是：第一眼看到程式碼時，先皺個眉頭，接著歪著頭，一手托著下巴，另一手操作程式碼畫面上下移動，最後語重心長地「嗯」了一聲。相信旁邊的同事放屁也會有一樣很不舒服的感覺。
壞味道也很像另一種類似的概念：反模式（Anti-patterns）
以下會使用 PHP 語言，列幾個經典的壞味道，同時也會解釋為何會很不舒服，與比較好的解決方法。
第一次跟爛 code 相見歡的時候，看到大括號有時在上有時在下：
空白 tab 傻傻分不清楚：
運算子與運算元有時有間隔，有時黏在一起：
函式或變數的命名有時小駝峰，有時候又底線分隔，還有全小寫擠在一起的是來亂的嗎？
在閱讀程式碼的過程中，這些不一致的程式碼，會不定時讓開發者的思緒中斷，非常不舒服。
這是因為風格不一致所造成的。這就像三十天鐵人賽交給三十個寫作高手寫，會因為每個人寫作風格不同造成閱讀上的困難，反而會不如一個人寫三十天來的好。
排版是有工具可以自動化解決的，如常見的 IDE 或 Composer 上都能找得到對應的工具，但命名規則工具就只能做到檢查，修改只能靠手動。
最近在翻舊程式看到這段程式碼：
仔細看程式碼並思考一下，其實不難理解，這是在組超連結的 query 。於是，在需要組超連結的時候，就會看到這段 foreach 的程式碼。
事實上，程式碼不難懂，但每次閱讀程式碼的時候，都需要停下來花點時間思考這段程式碼的用途；而且程式碼的內容並不算少，如果裡面有一點點差異，是很難發現的。如下面這段程式碼乍看之下跟上面的程式碼是一樣的，但事實上是有 bug 的。
如果有踩過這種雷，那停下來思考的時間就會更久，思緒中斷的會非常強烈，感覺也更不舒服。
上述問題的標準解是使用 PHP 內建函式 http_build_query()：
是不是簡單許多了？
如果是有點像又不太像的重複程式碼，未來有機會的話，將會示範如何重構。
Method 太肥的狀況是這樣的：
這樣的 method 最大的問題在 $result 最一開頭就定義，中間 100 行程式碼中，可能都有操作這個變數。所以當遇到需要了解這個 method ，比方說 return 結果不對時，很有可能需要把這 100 行可能操作回傳值的程式碼全部看完，才會找到問題所在。
另一個問題是， method 越大做的事越多，代表依賴也越多；依賴多就有可能會發生：依賴 A 了解完後，要了解依賴 B 時，會有 context 切換，因此會有思緒中斷，這種的感覺也是很不舒服。
Class 過肥的情況也是類似的。
Scrum 通常會先有 story ，然後開始切 task 再開始工作。 Story 可能很大，跟一個 100 行的 method 一樣大，所以我們 method 應該是有辦法切成小 method 來組合出主 method 要的功能。",,"['不一致的排版與命名規則', '四處可見重複的程式碼或結構', '過肥的 method 或 class', '今日回顧']","['解法', '解法', '解法']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191691,ModernWeb,0,TypeScript初學之路系列,11,Day11-從Javascript搬移你的程式到TypeScript(一),TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1513290129000000000,490,"這個部分需要整理的蠻多的
TypeScript 不會憑空存在
他還是依存於 Javascript 的生態圈內
有很多舊的 Javascript 要轉譯為 TypeScript 過程中很無趣的
如果你是要轉譯 React project 我們會推薦你先閱讀這份文件
基本的檔案架構會如下
如果你有想要用測試的話，在 src 再加上 tests 並且在 tsconfig.json 除了 src 之外再加上 tests
TypeScript 使用 tsconfig.json 來做專案的設定
我們利用這個設定檔案 對 TypeScript 做一些設定
如果你是使用 tsc 轉譯你的專案，你應該會在 built 資料夾裡面看到編譯成功的檔案
如果你使用的是VS code 或是 Visual Studio 你可以使用相當多的工具，例如自動完成。也可以增加一些設定方便你 debug
TypeScript 依舊會對無法訪問的標籤的錯誤顯示，你可以利用 allowUnreachableCode 和 allowUnusedLabels 來取消
相關的 gulp 使用可以參考另外一篇文章
Webpack 是一個相當簡單的工具！
你可以使用 awesome-typescript-loader 這是一個 TypeScript Loader
另外也可以使用 source-map-loader 讓你更易於 debug
將上述兩個套件加入你的 webpack.config.js
awesome-typescript-load 必須在所有的 loader 的前面 ts-loader 也是一樣的道理
你可以在這邊獲得更多資訊
我們可以開始對檔案做一些動作開始轉換
第一個步驟就是將所有的 .js 換成 .ts
若是你的檔案有使用 JSX 則需要將檔案名稱換成 .tsx
當然你會覺得怪怪的，這樣就結束了麻？
當然不是！
接著你可以打開你的編輯器或是使用 command line
你可以看到一些 紅色 的波浪底線
這些就像是 微軟的軟體提醒你這些並不符合 TypeScript 的規範
如果這些對你說太寬鬆
你希望可以更加嚴謹的話你也可以使用 noEmitOnError 這一個選項來讓檢查更加嚴謹
如果你希望使用嚴謹模式可以參考這篇文章
例如你不希望變數型態使用不明確的 any 你可以在編輯檔案之前使用 noImplicitAny。
就像剛剛提到的，你會修改 .js 為 .ts 或是 .tsx 的時候會有相當多的錯誤訊息
你會發現這些錯誤雖然是屬於合法的錯誤，但是透過這些錯誤可以發現 TypeScript 對你開發程式碼的好處。
你可能會得到錯誤訊息是 Cannot find name 'require' 或是 Cannot find name 'deffined'
在這些狀況在這些狀況應該是 TypeScript 找不到這些模組
你需要預先選擇使用引入模組的方式，可以使用 commonjs, amd, system 和 umd
如果你有使用 Nod/CommonJS
或是 RequireJS/AMD
你可以修改為
如果你編譯檔案的時候有安裝 foo module
但是依然看到 Cannot find module 'foo'
這個錯誤訊息，很有可能是你並未有宣告的檔案來宣告你的 library，
要處理這個問題也很簡單
如果你有使用 module 選項是 commonjs 你另外需要設定 moduleResolution 為 node
然後你才可以正常的引用 lodash",,"['設定你的資料結構', '寫一個設定檔案']","['優勢', '整合你的編譯工具', '將 .js 轉換成為 .ts']","['Gulp', 'Webpack', '解決錯誤相關問題']","['import 模組', 'TypeScript 的宣告']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191659,ModernWeb,0,Nest.jsframework30天初探系列,11,Nestjsframework30天初探:Day11WebSocket-Gateways,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1513290011000000000,543,"
Gateway是一個帶有@WebSocketGateway()裝飾器的class，在day01提到的Socket.IO，Nestjs將其做了些封裝，我們只需要使用@WebSocketGateway()的API，就能操作Socket.IO與Client端做互動，整體操作上也蠻簡單明瞭。後續關於Nestjs的WebSocket介紹，其實核心都環繞在Nestjs的主要幾個API，所以後面的介紹會比較像在複習，為了增加點樂趣，我們先讓Nestjs有畫面。
1.安裝ejs模組，然後請在src資料夾底下創建views、assets資料夾(仿expressjs專案)。
cmd指令:
src/modules/Chat/chat.module.ts
<%= title %>會接受來自ChatController裏頭chat()render過來的title值。
網頁畫面如下

Nestjs不愧是base on Expressjs的框架，工程師可以用過往最熟悉的express render方式開發一個網站，不過我還是比較喜歡前後端分離的開發方式拉XDDD。
server 接收到來自client端傳的訊息後，回傳訊息給client端，明天來土炮一個真正的聊天室，今天到這。
程式碼都在github",,['Gateways'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191689,SoftwareDevelopment,0,簡潔高效的PHP&Laravel工作術：從ElementaryOS下手的聰明改造提案系列,4,第4天：elementaryOS 的操作世界觀,shengyou,https://ithelp.ithome.com.tw/users/20107229/ironman,1513289136000000000,551,"本文同步刊載於作者部落格：https://medium.com/@shengyou/2018ironman-eos-for-php-developer-day4-5786a7756679
圖形化操作介面 (Graphical Interface) 是透過大量的視覺與操作隱喻，設計出讓人易於理解與使用的互動介面。經過這麼多年的演變，各作業系統上的圖形化操作介面已經衍生出許多慣例，大多的操作習慣都可無痛轉換。不過，畢竟每一個圖形介面都有其風格及設計哲學；因此，在接觸新的作業系統時，先花一些時間理解其操作世界觀，有助於自己更快適應這個作業系統。
由於 elementary OS 的圖形介面是全新打造的，部份設計跟其他發行版略有不同。現在，就讓筆者為您導覽一下這個作業系統的基本操作吧！
elementary OS 的桌面環境僅分兩部份，一是面板 (Panel)、一是 Dock。以下逐一介紹：
在畫面頂端的深棕色橫條就是面板。由左至右共有三個區塊，分別為：應用程式 (Applications)、時鐘 (Clock)、狀態指標 (Indicator)。

應用程式 (Applications)
點擊 Applications 字樣，就會出現所有安裝的應用程式，在這個啟動器頁面裡，會詳細列出這台電腦安裝的所有應用程式。您可以用滑鼠滾輪，或按底下的頁碼來切換分頁、左上角的圖示可以用來切換兩種顯示模式：格狀或目錄。除此之外，您還可以在上方的搜尋框裡用打字的方式搜尋 elementary OS 的功能。

類似 macOS 上的 Spotlight 或 Windows 上的 Cortana 搜尋，在 elementary OS 裡，您不止可以搜尋應用程式的名稱，也能呼叫其他功能如：
時鐘 (Clock)
在面板的中間會顯示目前的系統時間，用滑鼠點擊的話會日曆面板出現。日期時間的格式及語系可以根據習慣在系統設定裡修改。
狀態指標 (Indicator)
在右上角有一排狀態指標，它會反映出目前的系統狀態，包括：聲音控制、網路連線、電池狀態、訊息中心及開關機選項。依據目前系統的不同狀態及設定，狀態指標的數量會略有不同。
當使用滑鼠點擊各狀態指標後，會彈出對應的面板做進一步的設定。若使用滑鼠中鍵或三指觸控的話，則可以觸發快速設定：

在桌面的底部的一列圖示稱為 Dock，這邊可以設定您常用的應用程式，並會顯示您正在使用的應用程式。Dock 上的應用程式圖示是可以隨您心意來調整的，假如您想要新增一個應用程式在 Dock 上，可以從應用程式選單裡拖曳圖示過來放置、或是在正在開啟的應用程式上按一下右鍵，選「Keep in Dock」；假如想要移除，只要將應用程式圖示從 Dock 上拖曳到其他非 Dock 的桌面空白處即可、或是在應用程式圖示上按一下右鍵，取消勾選「Keep in Dock」。想要調整應用程式圖示的順序，只要用滑鼠拖曳即可完成。
當應用程式的視窗最大化時，Dock 預設就會隱藏。只要將滑鼠移回 Dock 原本的位置，Dock 就會再彈出顯現。假如對這個預設動作不滿意，可以至系統設定裡更改。
當您打開一個應用程式，這個應用程式就會有自己的視窗，且每一個應用程式可以支援多個視窗。在視窗的最左邊及最右邊各有一個按鈕，動作分別是關閉及最大化。當點擊最左邊的關閉按鈕時，會關閉應用程式、當點擊最大化時，會讓應用程式視窗最大化。當然，您可以拖曳應用程式上面的標頭列 (Header Bar) 來移動視窗的位置，視窗的四周可以調整視窗的大小。

elementary OS 也有多重桌面的功能，可依自己的工作習慣開啟多個桌面來群組應用程式的視窗。每個桌面是彼此獨立的，各應用程式的各個視窗可以在不同的桌面間移動。
當然，elementary OS 支援多螢幕。不過要注意的是，除了主螢幕外，其他延伸螢幕都被當作獨立的桌面來使用。而且，只有主螢幕上會顯示面板和 Dock。
看完以上的介紹應該會發現，其實 elementary OS 的介面操作跟目前市面上的作業系統並沒有很大的差異，所以應該不需要花費太多時間即可適應。不過，眼尖或已經跟著安裝的讀者可能已經發現有幾個跟其他作業系統不太一樣的地方，在這邊特別提出來：
沒有最小化視窗按鈕
一般來說，視窗都會有三大按鈕：最小化、最大化、關閉。在 Microsoft Windows 上是在右邊、在 macOS 則是在左邊。而 macOS 則是在某一版把最大化變成全螢幕。不過 elementary OS 視窗沒有最小化的設計。
Dock 上沒有常駐的 Finder 及垃圾筒
有用過 macOS 的讀者應該對 Dock 很熟悉。在 macOS 上，Dock 的左邊常駐 Finder、右邊是垃圾筒。elementary OS 上沒有這樣的設計。
桌面上不能放東西
elementary OS 的桌面不能放檔案、磁碟機、捷徑…等。剛開始還蠻不習慣的，不過後來想想覺得這根本就是強迫人把東西整理好的 Feature！
圖形化介面這種東西當然是很賞心悅目，不過相信對工程師來說，如何提高生產力才是真正關注的重點！以下就來介紹一下在 elementary OS 環境底下的常用快速鍵：
注意！由於 elementary OS 也可以裝在 Mac 機器上，換言之也會支援 Mac 鍵盤配置。所以以下的快速鍵裡，紀錄為 Meta 的，在 PC 機器上是 Windows 鍵、在 Mac 機器上則是 Command (⌘) 鍵。
切換應用程式：Alt+Tab
在單一桌面內的不同應用程式間切換。
顯示所有開啟的應用程式：Meta+W
類似 macOS 上的 Dashboard/Exposé/Mission Control，把目前開啟的所有應用程式視窗以群組呈現。
熱角 (Hot Corners)
可以在系統設定裡設定當滑鼠移到螢幕的四個角落時要做什麼動作。
切換桌面：Meta+Tab
除了在桌面間循序切換外，還可以用Meta+←及Meta+→來往左/右切換；或是搭配數字鍵1~9來切換到指定的桌面，若是用0則是建立一個新桌面。
移動視窗到左/右桌面：Meta+Alt+←或Meta+Alt+→
把目前開啟的視窗移動到左邊或右邊的桌面。
顯示所有桌面：Meta+S
顯示所有桌面的現況。
跨桌面顯示視窗：Meta+A
不只是顯示單一桌面的所有視窗，而是跨桌面顯示所有視窗。
搜尋應用程式：Meta+Space
類似 Spotlight 或 Alfred，可快速尋找應用程式後開啟。
開啟終端機 (Terminal)：Meta+T
立馬開一個終端機視窗，這在 Linux 應該比什麼都重要！
相信看完了以上的介紹，應該會 elementary OS 的整體操作環境有一個基本的認識了。不過看千遍不如做一遍，還沒跟著安裝的讀者別猶豫了，跟著體驗看看吧！",,"['桌面環境', '視窗/桌面切換與多螢幕支援', '適應指南', '生產力祕訣', '參考資料']","['面板 (Panel)', 'Dock']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191687,ModernWeb,0,從無到有，使用Go開發應用程式系列,6,PredeclaredType,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513288947000000000,508,"中華小當家的劉昴星曾說過：「鍋子是火燄的化身」，使用鍋子也是中華廚師的必學基礎之一；而在一個程式語言裡，資料型別是資料的化身，同樣也是重要的基礎功。廚師練好基礎功，能煮出佳餚；開發者練好基礎功，才有辦法寫出千變萬化的應用程式。
Go 的資料型別有 11 種，今天先介紹 Predeclared Type　，它們也是「有名稱的型態（Named Type）」。
最簡單的型別－－ bool ，它只有兩個預定義的常數 true 和 false 。
numeric 型態包含了 integer （整數）、 float（浮點數）、 complex（複數）三種。
整數又分帶號 int 與不帶號 uint 兩類，也可以直接指定大小 int8 、 int16 、 int32 、 int64 或是不帶號的 uint8 、 uint16 、 uint32 、 uint64 ，這些相信一看就知道佔了多少容量（bit）。至於 int 和 uint 會使用哪一個要看平台實作決定，有可能是 32 bit 也有可能是 64 bit。
而另外還有兩個整數型態： rune 是 int32 的別名， byte 是 int8 的別名。
float 有 float32 與 float64 兩種，但沒有 float 。
complex 則表示複數，以 RE + IMi 的方法表示，如：
大小則有分 complex64 與 complex128 兩種。
Go 內建的 math 套件提供常數取得各型態的最大值和最小值，除了解整數範圍外，也有助於實作上的判斷。
如：
需要注意的是，不同的數字型態，是不能直接摻在一起操作的。如 int8 不能跟 uint8 相加。另外， int 有可能是 32 位元，但 int 也不能跟 int32 相加。
Go 語言字串都是 UTF-8 字元集編碼，它可以正常的處理多國語言。字串可以使用雙引號 "" 或反引號 ` 定義，也可以相加，如：
今天是蹲馬步的基本功，後面其他型態將會使用這些基本型態炒出各式各樣的菜色。",,"['Boolean types', 'Numeric types', 'String types', '今日回顧', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191655,SoftwareDevelopment,0,初探Kotlin系列,9,[Day9]ClassesandInheritance-1,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1513288734000000000,493,"kotlin宣告class方式與java一樣
kotlin的class會有一個primary constructor
以及一個或多個的secondary constructors
primary constructor主要寫在class name後方
如果primary constructor沒有任何的annotations
constructor關鍵字可省略
primary constructor內不可包含任何code
想要初始化的話可以寫在 init{...} 內
primary constructor的參數初始化可在init{}
或者有更簡潔的寫法
如果沒宣告成變數 在class內部會編譯錯誤
使用constructor 宣告secondary constructors
如果class有primary constructor
則secondary constructors需要透過this直接或間接的呼叫primary constructor","['Class', 'Constructors']",['Secondary Constructors'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191664,自我挑戰組,0,花式PHP系列,6,Array：操作、查詢,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1513288172000000000,497,"今天要講什麼呢？先講結論：
注意！這兩個函式都會直接對傳入的陣列修改！
一般在陣列最後面新增 element 我們都是用 array_push() 或 $array[] = 'value'; 做的。
但如果我們打算在陣列最前面新增 element 呢？
我們什麼時候可能會需要這麼做？
想像一下，現在你正在日本的一間肯德基排隊。
因為今天是聖誕節，所以人特別的多，此時有位不速之客自顧自的插隊進來了...
不曉得大家有沒有注意到，代表排隊隊伍的 $line 其實就是一個 queue 呢？
因為是要做成先進先出 (FIFO) 的 queue，
所以正常顧客都是透過 array_push 把自己放在隊伍最後面，
店家則是一直要透過 array_shift 得到隊伍中排在最前面的客人。
但沒禮貌的客人卻是用 array_unshift 把自己排進隊伍的第一位的～
大家應該看得懂這個範例吧～

注意！這個函式不會直接對傳入的陣列修改，它會把填充過的陣列回傳
array_pad，顧名思義就是 Pad array with values，
這個 function 可以幫你把陣列填充到指定的長度。
比較值得一提的是它的第二個參數，大家可以搭配底下的範例看：
第二個參數告訴 array_pad 應該要填充 array 到有多長之後停止。
自然的，當你給定的數字比 array 本身的長度還大的時候，它什麼都不會做。
但要如何理解一個負整數對 array_pad 的行為有什麼影響呢？
是這樣的，
array_pad 會從給定的數字中解讀出兩件事情：
重點就這樣，搭配這兩條規則應該能充分解釋底下輸出的結果了~

延伸閱讀：
如果你想要在陣列中的某一點開始填充，看看 array_fill吧
這個 function 會用來尋找陣列中有沒有指定的值，
有的話則回傳他的 index；
沒有的話則回傳 FALSE;
注意！因為回傳的 index 可能是 0，在模糊比較的時候 0 與 false 是一樣的！
在對回傳的值做判斷時請特別注意這點！
參數：

大家以前在國高中小上課的時候應該都有睡著的經驗吧？
但大家有被目光銳利的老師用粉筆丟過嗎？
底下的範例使用一個有 5x5 的座位表，
每一行的座位裡會有隨機一位同學_(也有可能沒有)_睡著了。
老師會對每一行不斷地使用 array_search 找出睡著(student == 'slept')的同學，並對他丟粉筆，
直到那一行沒有睡著的同學為止！","['array_shift & array_unshift', 'array_pad', 'array_search']","['看完範例之後', '範例']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191679,自我挑戰組,0,打雜人生-腦容量不夠用就筆記筆記唄系列,8,[Day8]Python自習手札:BeautifulSoup安裝,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513287868000000000,503,"著個湯不是用來喝的唷XDDDD

是用來解構、擷取網頁資訊的拍森函式庫來著Www
開啟終端機輸入下面著4行指令，安裝先~~~
ps: 安裝需要管理權限，要記得酥肚(sudo)一下，弄到管理權限喔!
網頁爬爬規則:",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191479,自我挑戰組,0,iflen(learning.python)==30:系列,11,Day11-Dictionary-操作,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1513287641000000000,495,"操作層面分為取出資料、如何走訪和如何異動資料
利用key的值取出相對應的value，可以使用中括號(square brackets)或是dict.get(key)存取。
這兩種方式主要差異在於當key不存在於dict時所引發的行為，中括號會拋出KeyError而dict.get(key)則會回傳None。若想傳回預設值，可以使用get(key, default)
而要判斷key是否存在於該dict中的話可以使用in
用for加上in搭配以下其中一個",,"['取出資料', '走訪', '異動資料', '參考']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191681,ModernWeb,0,ASP.NETMVC網頁程式介紹系列,5,[Day05]ASP.NETMVC後端傳資料到前端介紹(一),小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1513287372000000000,546,"之前我們建了一個專案，但是完全沒有從後端帶任何資料到前端的頁面，那到底要如何將資料帶到前端呢？在MVC 中主要有兩種方式，一種是用ViewBag或ViewData等物件傳遞，另外一種方式是使用Model，那我們今天先看一下第一種方式。
首先這類的方式有三種物件
之前有看過一篇文章，有提到ViewData的一些問題，還是建議使用ViewBag就好了，雖然我忘記是什麼問題，不過基本上我幾乎沒有使用過ViewData，所以這部分就跳過，我這次參考的文章也沒有提到ViewData的實作，在最後會附上這次的參考網頁，雖然大部分參考的內容都寫在上面了，下面的大多是自己的想法跟經驗，不過這一篇有提到一個很重要的觀念，記在下面：
網站上也有簡單的範例說明，有興趣的話可以去看。
我幾乎只會用到ViewBag來傳遞物件，不會用到ViewData及TempData，所以今天的例子也只用到ViewBag而已，ViewBag可以傳遞的物件很多，包括單一變數，一個Model，甚至Model的List，或者DataTable之類的物件都可以，我還沒有遇過ViewBag無法傳遞的物件。
在這個例子我們將之前的專案清空，以最原始的風貌來呈現，由於這30天主要在講後端跟JavaScript的部分，加上時間有限，因此沒有太多CSS的修飾，以功能為主的探討。
首先，Controller先將HomeController之外的Controller殺掉，再將HomeController除了index之外的都刪掉；Views的部分將Home跟Shared之外的資料夾刪掉，Home只留下index.cshtml一個檔案就好，其他資料夾不要亂動，刪錯了就準備重新新增一個專案了，index.cshtml的內容也清空，只留下上面@的區塊，並且加上 Layout = null; 表示不載入主版頁面，這樣執行出來就只會是一個空白的網頁，目前的程式碼如下。
ViewBag.Title目前是用不到了，一般是用來顯示標題用的，不過我也不特別拿掉它。
以下簡單用ViewBag來傳遞三種物件，Model的部分明天會提到，今天雖然有用到但不特別說明了，將程式碼跟網頁顯示出來的結果Show出來供大家參考。
以下是實作的部分：
Controllers/HomeController.cs的內容
Views/Home/index.cshtml的內容
網頁顯示的畫面

今天先寫到這邊，
明天主要講解今天的程式內容。
附上今天的參考資料：
[ASP.NET MVC] ASP.NET MVC 傳遞資料容器(一) - ViewData vs ViewBag
--
小弟不才，
如果有謬誤或是要補充的，
都歡迎一起來討論！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191683,ModernWeb,0,PHPlaravel的邂逅系列,11,DAY11-blade介紹,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1513287363000000000,486,"DAY11-blade介紹
使用Blade模板的兩個主要優點為模板繼承與區塊。Blade 視圖檔案使用 .blade.php 做為副檔名，且通常儲存於 resources/views 資料夾。
很多檔案某些部分一樣，像是header、footer、或側邊欄都可以只透過一個檔案來做修改，而不用每一隻都放進去一樣的程式碼，後續維護也不方便，也有可能有些地方忘了修改，或是一次修改就要改很多地方，這樣非常浪費時間阿
上面可以看到@section和@yield這兩個是什麼東西哩，以前都沒看過阿!
@section 定義一個內容區塊
@yield 用來顯示給定區塊的內容
下面簡單介紹在blade中要怎麼去使用控制結構，跟php原生的相似，但有一點差別，這部分多寫就會記得了。",,,"['模板繼承', '繼承頁面佈局', '控制結構']",,"['If 陳述式', '迴圈']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191677,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,6,[VI]用CodeIgniter的30天-新聞模組實作(中),qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1513284598000000000,516,"來建資料庫喔 ~
打開 資料庫連線軟體，連上本機端資料庫
直接進入 SQL 輸入頁面
建立資料庫
設定資料庫結構
加入預設資料
如此就完成資料庫的建立
接下來要修改資料庫的設定檔
這邊修改我們的
application/config/database.php
成自己設定的帳號密碼和資料庫名稱，如果照著做
資料庫名稱就是 news
最後連上根目錄網址後面加上 index.php/news
看看是不是成功瀏覽新聞顯示頁面了呢？",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191668,ModernWeb,0,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,11,Laravel起步走：環境建置與安裝,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1513284404000000000,514,"先講結論，我覺得Laravel安裝是最麻煩的
但這個麻煩都是出在虛擬環境
根據官網說明：
Laravel Homestead 是一個官方預載的 Vagrant box，提供你一個美好的開發環境，你不需要在你的本機電腦安裝 PHP、HHVM、網頁伺服器或任何伺服器軟體。不用擔心搞亂你的系統！Vagrant box 可以搞定一切。如果有什麼地方爛掉了，你可以在幾分鐘內快速的砍掉並重建虛擬機器！
在此下載
你也可以選擇virtualbox或是vmware
根據我實際的經驗，後面還是需要用到VirtualBox
所以就先下載安裝起來吧！
他會要你選一個提供者，可以按照個人喜好選擇，我選virtualbox
取決於網路速度，安裝可能需要花一些時間
我大約花了半小時左右（害我很擔心錯過今天的鐵人賽）
在根目錄把Homestead clone下來
我看漏了這個步驟，害我一直找不到Homestead這個資料夾...
安裝之後，需要編輯設定檔
假設我們專案本機網址為first_app.dev，專案路徑在~/projects/laravel/first_app
那我們設定檔需要編輯如下：
最主要是這兩個部分，其他都可以先按照預設值
如果未來有新的laravel專案
還需要手動新增
需要輸入密碼
接著在最下面新增一行
如果你之前已經設定過SSH金鑰，可以跳過產生的過程
順利登入後，按照之前設定，我們進入專案資料夾
其中Laravel為專案名稱
這會花掉一些時間，大約十分鐘
這時候如果由瀏覽器訪問剛剛設定的網址 http://first_app.dev
理論上你可以看見Laravel歡迎畫面

看見了就恭喜妳囉！
Homestead跑的就是Ubuntu，如果沒有理他
他會非常耗電的一直在背景執行
用exit離開ssh以後
使用vagrant halt將虛擬機器關機
如果未來都不會再使用，可以用vagrant destroy --force 徹底刪除
假如下次要開啟，先回到Homestead的資料夾
使用vagrant up將機器開起來就可以了
如果有修改設定檔Homestead.yaml（例如新增網站）
記得用vagrant provision更新環境
參考資料
https://laravel.com/docs/5.5/homestead
https://laravel.tw/docs/5.2/homestead
https://blog.wu-boy.com/2014/09/get-homestead-vagrant-vm-running/
https://laravel-china.org/topics/2/laravel-deployment-of-homestead-development-environment
http://oomusou.io/laravel/homestead/homestead-osx/","['1. 安裝vagrant', '2. 安裝Homestead Vagrant box', '3. 安裝Homestead', '4. 設定本地網址', '5. 開啟虛擬機器', '5. ssh連線登入', '6. 安裝laravel']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191656,自我挑戰組,0,Kaggle的解題挑戰系列,4,[Day04]Kaggle的解題挑戰-SMACK簡介,BillLin1983,https://ithelp.ithome.com.tw/users/20103074/ironman,1513282504000000000,515,"SMACK是一個由Spark, Mesos, akka, Cassandra, Kafka這五種技術來處理大數據的技術，各個技術有各自的角色和優點，最重要的技術我想就是Spark了，Spark比Hadoop可以更即時的處理各項資料，比如串流或是互動式，比Hadoop的批次方式更快速的分析和處理資料。
先簡單介紹一下各個技術
Spark
快速且通用的運算引擎在分散式、大量規模的資料處理上
Mesos
叢集資源管理系統提供資源的隔離和分享給各個分散式應用上
akka
一個工具集來建立高並發、分散式和可靠的訊息驅動的應用在JVM上
Cassandra
分散式、高可用的資料庫，設計來處理大量資料在不同資料中心上
Kafka
高吞吐量、低延遲、分散式的訊息系統，設計來處理實時資料處理
其實，其中幾個技術，Spark, Mesos, Kafka都有人寫成一個鐵人30天的文章了，有興趣可以自已去看查看細節，我目前主要是先簡單講一下架構，先有個關念這樣。

這張圖是從參考資料[1]取得的，用圖來解說，會更容易理解，首先akka是比較像是資料收集的角色，讓我們可以大量從前端接受資料，Kafka是有點拿來當暫存的角色，當Spark的運算核心掛了，或是來不及處理的時候，能暫時存放資料，而Spark就是資料處理的角色，但，其實Spark會分成批次和是即時處理的部分，而Spark的資料來源可能是Kafka或是Cassendra，Cassandra可以當成是資料庫角色，比較特別的是Mesos的角色，會負責Cassandra和Spark的資源分配，會盡量需要讓需要讀取的的Cassendra Node和Spark運算Node在同一個Node上(Node可以當作是一台機器)。其實各個技術有其優點和特色，如果有獨立研究，再作介紹。再來我會試著先簡單實作看看。
參考資料
Data processing platforms architectures with SMACK: Spark, Mesos, Akka, Cassandra and Kafka
Data processing platforms architectures with Spark, Mesos, Akka, Cassandra and Kafka
What is SMACK(Spark, Mesos, Akka, and Kafka)?",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191672,ModernWeb,0,挑戰CSS30天系列,11,day11_text-indent&text-transform&word-spacing,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1513280065000000000,507,"text-indent 屬性是用來設定每一段的第一行前面要留多少空間。
text-transform 屬性是用來控制大小寫是如何展現的。可能的值包括：
capitalize： 每一個字的第一個字母都以大寫顯現，其他的字母則不改變。
uppercase： 所有的字母都以大寫顯現。
lowercase： 所有的字母都以小寫顯現。
none： 大小寫不做任何改變。
word-spacing 屬性是用來設定每個字與每個字之間的距離。
範例如下：
成果如下圖：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191670,ModernWeb,0,從無到有，打造一個漂亮乾淨俐落的RESTfulAPI系列,4,[Day-4]npm套件管理工具,10程式中,https://ithelp.ithome.com.tw/users/20107247/ironman,1513279412000000000,538,"npm 全名為 Node Package Manager，是 Node.js 的套件（package）管理工具，npm 可以讓 Node.js 的開發者，直接利用、擴充線上的第三方套件庫（packages registry），加速軟體專案的開發。

這邊舉個例子假如我想使用 Google 的 Firebase 第三方函式庫鍵入 npm install firebase 他就會幫你直接安裝起來了
安裝 Node.js 會自動內建 npm，所以第一步驟先去安裝 Node.js ，這裡有兩個版本分別為穩定版和最新版，這可以具你的喜好安裝，作者是安裝最新的版本。
若要檢查 Node.js 是否正確安裝，可以使用以下的指令：
若要檢查 npm 是否正確安裝，可以使用以下的指令：
首先在你本機目錄下新增一個空的資料夾，再用 Visual Studio Code 打開資料夾與內建終端機

再來就是初始化你的專案囉 npm init -y ， -y 的意思就是省略一些提問快速初始化，若還是不了解可以用 npm init 試試就知道了！

初始完成後你會發現資料夾多了一個叫 package.json 的檔案，它是一種 CommonJS 規定用來描述包的文件，是一個包含 json 格式的說明文件，裡面可以定義相依的相關套件以及應用程式的資訊，簡單來說這隻檔案裡面會存你安裝什麼套件以及一些相關程式設定，你把這檔案分享給別人他再 npm install 就會把你原本所安裝的套件安裝回來了，下篇文章再介紹各位另一個取代 npm 的好工具，也是我現在所使用的他叫 yarn，今天就分享到這囉！
文章同時發表於：https://andy6804tw.github.io/2017/12/14/npm-tutorial/",,['何謂 npm'],,"['1. 安裝 npm', '2. 初始化專案']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191671,自我挑戰組,0,,11,10天過後，有263個主題參加比賽呢,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513279367000000000,524,"各主題比例 + 加上各組：
AI & Machine Learning：16 組 占 6.08%
Data Technology：11 組 占 4.18%
DevOps：11 組 占 4.18%
Modern Web：81 組 占 30.79%
Security：8 組 占 3.04%
Software Development：55 組 占 20.91%
自我挑戰：81 組 占 30.79%
今天暫時沒想到要寫些什麼，
就各主題各推薦一個系列文吧
AI & Machine Learning：
玩轉資料與機器學習-以自然語言處理為例
因為自己比較喜歡處理複雜的問題，所以選了這系列文
而且也跟爬蟲BOT滿有關係的
Data Technology：
Hadoop ecosystem 工具簡介, 安裝教學與各種情境使用
不熟悉的大數據處理工具，可以來學習看看，至少了解概念
DevOps：
用30天來介紹和使用 Docker
這工具應該是現在最流行的容器工具了
Modern Web：
PixiJS，方便好用的 WebGL 內容產生工具
圖形處理也一直是我有興趣也想專研的部分
Security：
IT安全稽核
這系列看起來很實務也很貼近現實情況
Software Development：
爬蟲始終來自於墮性
一樣是跟爬蟲相關，至於主題小幫手的BOT，我會趕快寫的
自我挑戰：
成長型維運平台 - 單人新手到多人團隊都適用的工具
這篇講維運的部分，我滿有興趣的，我覺得這篇應該要放在DevOps呢",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191666,ModernWeb,2,重新認識JavaScript系列,11,重新認識JavaScript:Day11前端工程師的主戰場：瀏覽器裡的JavaScript,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1513277826000000000,724,"花了好幾天的時間，「重新認識 JavaScript: JS 基礎篇」終於告一段落了。
如果讀者跟著我一路看到這裡，相信各位對 JavaScript 這門程式語言已經有了基本的理解。
從今天開始，我們要進入「前端工程師的主戰場：瀏覽器裡的 JavaScript」的部分囉。
在許多的網頁前端教學或是文章書籍當中，你可能常常聽到這樣的說法：「HTML、CSS 與 JavaScript 是網頁前端三大要素」

這樣的說法基本上沒有錯。
那麼，如果你跟我當年學 JavaScript 也有一樣的疑問：變數、型別、物件、迴圈、流程控制、函式... 表面上看似基礎都學會了，但...
「我還是不知道怎麼透過 JavaScript 在網頁上輸出 ""Hello World!"" 啊！」

那麼相信看完今天的分享，我保證你一定可以透過 JavaScript 在網頁上輸出 ""Hello World!"" (咦)
嚴格來說，JavaScript (或者說 ECMAScript 標準) 並沒有提供網頁的操作方法。
事實上，前端開發者在網頁的操作方法都是由 JavaScript 的執行平台，也就是「瀏覽器」提供的。 這些操作方法基本上會分別由這兩種物件所擁有：「BOM」與「DOM」。
所以廣泛來說，在瀏覽器上的 JavaScript 實際上包含了：
以上這三個部分。
由於「BOM」與「DOM」是由瀏覽器執行環境所提供。
換句話說，在 node 環境下的 JavaScript 就不會有這兩個部分。
前端開發者就是透過 JavaScript 去呼叫 BOM 與 DOM 提供的 API，進一步透過它們去控制瀏覽器的行為與網頁的內容。
那麼接下來我們就來介紹「BOM」與「DOM」。
BOM (Browser Object Model，瀏覽器物件模型)，是瀏覽器所有功能的核心，與網頁的內容無關。
在早期沒有制定標準規範的時候，各家瀏覽器廠商幾乎各自在自家瀏覽器上實作功能，非常混亂。 直到最近幾年， W3C 把各家瀏覽器都有實作的部分，以及確定已經(或未來會) 加入的功能，統一集合起來納入了 HTML5 的標準中，這也就是我們現在看到的 BOM API 的實作。
BOM 也有人非正式地稱它為 「Level 0 DOM」。 因為它在 DOM level 1 標準前就已存在，而不是真的有文件去規範這些，所以「Level 0 DOM」與「BOM」兩者實際上指的是同一個東西。

BOM 的核心是 window 物件。
而 window 物件提供的屬性主要為 document、location、navigator、screen、history 以及 frames。
在瀏覽器裡的 window 物件扮演著兩種角色：
全域物件的部分我們之前已經談過，凡是在「全域作用範圍」內宣告的變數、物件、函式等，都會自動變成「全域物件」的屬性。 通常這樣的變數，我們會稱它們叫做「全域變數」，可以透過 window.xxx 的方式取得它們。
除此之外，在「全域作用範圍」宣告的全域變數還有一個特性，就是無法使用 delete 關鍵字來移除：
但若是直接透過指定 window 物件的屬性則可以：
現在我們已經知道了「全域物件」是怎麼回事了，那麼 window 物件扮演的另一個角色，「用來與瀏覽器溝通的窗口」又是什麼意思呢？
先來個最常見的例子： alert() 「警告對話框」：

(alert on Chrome)
我想不管是不是剛接觸 JavaScript 的朋友，對 alert 應該都不陌生，alert 的完整語法其實是這樣：
如同我們所熟知的全域變數一樣，window 物件下的成員，window 是可以省略不打的。
一行程式碼就可以生成一個對話框，很神奇吧？
而這就是瀏覽器環境的 BOM 提供給 JavaScript 控制的功能之一。
類似的對話框還有用來提供「確定/取消」的 window.confirm() window.confirm ，以及開放式問答的 window.prompt() window.prompt 對話框。
當然 BOM 提供的 API 很多，包含開啟/關閉視窗，改變視窗大小，計時器與取得網址等等。 這些在之後的文章當中還會再詳細解說。
DOM (Document Object Model，文件物件模型)，是一個將 HTML 文件以樹狀的結構來表示的模型，而組合起來的樹狀圖，我們稱之為「DOM Tree」。
簡單來說，我們把 HTML 每個節點的關係攤來看，就好像是一棵樹一樣。
假設我們有一個基本的 HTML 如下：

在最根部的地方，就是 document，就是 BOM 圖中 window 下面的那個。
往下可以延伸出一個個的 HTML 標籤，一個節點就是一個標籤，往下又可以再延伸出「文本節點」與「屬性的節點」。
而 DOM API 就是定義了讓 JavaScript 可以存取、改變 HTML 架構、樣式和內容的方法，甚至是對節點綁定的事件。
JavaScript 就是透過 DOM 提供的 API 來對 HTML 做存取與操作。
前面介紹 BOM 時，我們已經知道 DOM 的 document 其實也是 window 物件的子物件之一。
而「DOM」 與「BOM」最大的區別在於：
「BOM」完全依賴於瀏覽器廠商實作本身無標準規範，而「DOM」有著 W3C 所制定的標準來規範。
想要透過 DOM API 取得節點，透過 JavaScript 可以這樣寫：
而透過 DOM API 選取出來的節點，我們可以透過操作 textContent 屬性來變更它的文字。
假設有一個 HTML 節點：
再來我們就可以先透過 document.querySelector() 方法來取得節點，然後修改 textContent 屬性：
JS Bin on jsbin.com
看到這裡，恭喜你已經可以透過 JavaScript 在網頁上輸出 ""Hello World!"" 囉！
在後續的內容中，我們會繼續來介紹各種操作網頁的 DOM/BOM API。
畢竟對前端工程師來說，搞懂怎麼與瀏覽器打交道、怎麼操作網頁內容，就是做好 WebUI 最重要的基礎。",,"['我說那個網頁呢？ 談 JavaScript 與網頁前端的關係', '瀏覽器裡的 JavaScript', 'BOM 是什麼?', 'DOM 是什麼?']","['BOM 的核心 window 物件', '瀏覽器內建的對話框', '「DOM」 與「BOM」的區別']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191417,自我挑戰組,1,自我挑戰日記系列,9,CSS：background連續內凹圓弧,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1513276493000000000,518,"今天要繼續前一天的作法
用CSS畫鋸齒邊的圖
範例 郵票
作出 鋸齒狀圓弧邊

再用 position: absolute 加上一張圖蓋掉中間的不希望看到的點就行了

若是要畫齒輪的話

圓形好像只能用一個一個的小圓
用 position: absolute 的方式遮住
找不到也想不出來要怎麼用 radial-gradient 做到 
另外作內圓弧


覺得這運用在門票上也滿不錯的
--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191658,DataTechnology,1,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",11,Day11-HadoopEcosystem之HBaseShellUsage,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1513271126000000000,524,"HBase Shell是使用 (J)Ruby's IRB(Interactive Ruby Shell)撰寫而成的特殊指令，使用者可以透過它下指令來與HBase互動。
假設已經完成前一篇的HBase安裝，或者可以使用作者所撰寫的hbase on docekr，接著只要使用下面指令就可以使用HBase Shell與HBase互動。
是的！你沒看過，HBase Shell的進入指令就是hbase shell。接下來會透過一個使用情境來介紹基本的HBase shell指令。
一開始使用一個新的DataBase時，會需要先新增Table。成功建立好Table後，會需要新增資料。爾後會有編輯舊資料的需求。最後，查詢資料。
接下來我們就來建立一個firstTable的資料表，column family名稱為first_cf：
資料表建立成功後，可用下列指令來查看資料表清單：
就可以看到剛剛建立好的firstTable：
接下來要新增資料：
接下來可以使用下面語法來新增筆資料：
新增一筆資料後，接著就要查詢剛剛新增的資料是否正確：
接下來可以使用下面語法來查詢table資料：
由於前面有提到HBase是以key-value方式儲存資料，所以在這裡可以看到呈現方式也是以key-value方式呈現。
想像成table方式會變成這樣：
這就是前面所提到的稀疏矩陣（Sparse matrix），每個row有資料的欄位數並不一定會相等。使用scan會將該table內所有資料全部以key-value方式顯示在銀幕，使用時務必搭配LIMIT參數控制顯示的資料數量。
HBase沒有update的指令，要更新資料只能再對同一個欄位進行一次put：
使用filter取出剛剛put的資料:
看完了HBase Shell的入門指令後，接下來要來介紹HBase Rowkey Design。",,"['HBase Shell 入口點', 'HBase Shell 使用情境', '最後']","['建立資料表', '查詢資料表清單', '新增資料', '查詢資料', '更新資料']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191645,DevOps,1,Ops的轉職之路-Puppet從入門就放棄系列,4,Day4-你不能不知道的Puppet小常識,shazi7804,https://ithelp.ithome.com.tw/users/20089211/ironman,1513263083000000000,593,"本系列文資料可參考以下：
這篇要來帶大家認識在使用 Puppet 之前，你不可不知的小常識
第一件事情就是要講 Domain，Domain 在 Puppet 的世界非常重要，所有 Node 都必須擁有自己的 Domain，由於 Puppet 和 Node 之間的 trust 是使用 CA 憑證，所以跟 Node 之間會換發憑證，這個動作就需要 Domain 的存在，如果 Master / Node 更換 Domain 那麼你的憑證就會信任失敗，這時所有的 Deploy 都將失敗。
Puppet 會把 Node 所需要的設定封裝成 Catalogs，再由 Node 將 Catalogs 解析後 Deploy，Catalogs 又分為兩個階段來 Deploy catalogs：
在 Puppet Master 時會將程式碼編譯成 Compile catalog，由 Node 將 Catalogs apply 進行佈署，這樣可以保證在傳輸過程中即使被擷取也僅是被編譯過的資料。
Node 通稱為被佈署的節點，即是 catalog apply 的最終目標。
身為一個 Puppet 的 Developer 你不能不知道 Resource，Resource 是用來定義系統資源的基本元件，例如 file、service、package .. 等等這類的東西。
Hiera 是 Puppet 內建的數據查找系統，透過 Three layout 架構並且實現 defaults, with overrides 在不同的環境給予不同的參數，讓 Node 可以找到適合自己的值 (例如：在 Dev 時取到的參數和 Production 的不同)
如果你會寫 Resource 而不會 Hiera，那麼我大概會稱你是 會用 Puppet，但如果你也會 Hiera 的話那麼我會說 Puppet 用的不錯
Facter 是 Puppet 的小幫手，Facter 會隨著 Puppet agent 安裝在 Node 裡面，並且協助 Puppet 收集 Node 的系統資源。
Manifest 是 Puppet 的倉庫，所有的 Resource 都會在 manifest 裡面去定義，就好比 Ansible 的 playbook。
在目前 Internet 上能找到的資料大概就是 3-5 這幾個版本，但對於這些版本的差異也必須要有認知，否則你在參考網路上的資訊時就會浪費非常多寶貴的時間。
首先各版本最大的差異就是 Ruby 支援的版本。
在這幾個版本中主要的差異還是在於 3 和 4，在 Puppet 4 中針對整體架構大幅更新並且捨棄相當多 Puppet 3 的要素，也重構命名為 PC1 版本 (Puppet Collections)，而 Puppet 4 和 5 差異則不太大，Puppet 5 針對翻新後的 Puppet 4 提昇 Performance 以及過去的 Bug，並且在 Puppet 5 開始聆聽使用者的需求新增了許多 features。
簡單提了幾個在學習 Puppet 的過程中必須要知道的知識，希望藉由這 30 天把經驗分享出來，讓大家早早下班！！",,"['各種 Puppet 名詞', 'Puppet 的 3, 4, 5 版本']","['Domain', 'Catalogs', 'Node', 'Resource', 'Hiera', 'Facter', 'Manifest']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191636,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,11,"[Day11]ReactComponentLifeCycle,我是有生命的",dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1513259401000000000,555,"Component Life Cycle 也是React裡面的新概念. 其實是life cycle是在決定這個component在什麼時候要做什麼事情. 這時候你應該覺得, danny 你是在講三小? 沒關係, 我示範給你看, 然後之後我們在講解.
我要用我的netflix專案來來玩一下, 這個專案我去模仿netflix的一部分. 我的專案有搜尋,即將上映, 還有電影介紹的功能.

我在我的netflix 專案裡面, 在電影介紹頁(MovieShow.js)裡面有用componentWillMount, componentDidUpdate.
第一個componentWillMount代表在組件要被插入真實的 DOM 的時候會執行以下的動作.
我用componentDidUpdate 來判定說如果url有變動的話要重新抓資料. 如果不這樣的話, 網頁不會更新. 這個雷也卡了我好久.
那實際的流程程序請參考以下圖.

這張表看起來很恐怖但是不用擔心你不會用到大部分的function. 像我用到現在我也才碰過4個而已, 大部份我們只會用到 componentWillMount, componentDidMount, 還有 componentWillUpdate.",,"['背景', 'Live Demo', '參考連結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191643,ModernWeb,0,認識Chrome開發者工具系列,11,運算及其他的幾個控制台,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1513258068000000000,551,"過去的幾天，我們一起討論了如何動態編輯 DOM 元素及樣式，這就是元素面版最常用的兩個功能，而今天要跟大家一起來探討的是在元素面版中剩下的幾個控制台，而這當中除了運算控制台我比較常用到之外，其他的都不太常用到。但是還是想說讓大家知道一下會比較好。那就讓我們開始吧！
這個控制台的介面裡，最上方是一個我們過去兩天有提到的區塊模型 (Box model) 模擬圖，並且功能是完全一樣，你可以像我們昨天介紹的來編輯它的長、寬，它的 margin, padding 還有 border 等。

圖 1: 運算控制台介面
在控制台的下方列出來的是""運算""過後的元素樣式。是什麼意思呢？這是說我們現在所選取的這一個元素最終被套上去的所有樣式。如果你還記得我們前面有提到，當樣式發生衝突時，瀏覽器會透過權重 (specificity) 來計算哪一個樣式會勝出並最終被套用。所以在這裡列出來的樣式，就都是最後勝出套用上，稱為運算後的樣式。
而這也是為什麼這個控制台會很方便，因為常常當我們專案中的樣式很多時，用我們前面介紹的檢視樣式方式來找最後套上到元素上的樣式是很困難的。因為整個樣式的繼承太複雜了。這時候如果你使用這個控制台來查看，就可以很快的找到你想要找的樣式。
在每個樣式屬性中如果有一個可以打開的箭頭小圖示 ，它會列出所有的衝突列表並最後套用上去的是什麼，如果你點用滑鼠左鍵點選這個值，開發者工具就會帶你到樣式控制台的那個屬性宣告中，很方便吧，快速又精確。而在屬性值後面也會列出來源的樣式表，點選後就會直接轉跳到原始碼面版的樣式宣告中。

圖 2: 打開屬性箭頭後，可以看到所有衝突列表
除此之外你可以使用右上方的顯示全部 (Show all) 來打開所有的樣式屬性及值。這裡所列出來的就會包含所有預設可用的屬性及值 (這些屬性會用較淡的顏色來表示)。這個功能通常我會關掉不然屬性太多了，有時候很難找到我想要找並且是有使用到的屬性。

圖 3: 顯示全部的樣式屬性
如果你要找特定的屬性宣告，你也可以透過上方的過濾器功能 (Filter) 來快速搜尋。
剩下的幾個控制台，筆者我很少用到，所以我會很快的帶過，你如果想要更深入的了解，可以參考官方文件。
事件監聽器 (Event Listeners)：這裡會列出所有目前所選 DOM 元素被綁定的事件，在官方文件有詳細的說明。

圖 4: 事件監聽器
DOM 元素中斷點 (DOM Breakpoints)：你可以透過新增 DOM 元素的中斷點來檢查特定事件 (Subtree modified, Node removed, Attribute modified)，官方文件裡有蠻清楚的介紹。

圖 5: DOM 元素中斷點
屬性控制台 (Properties pane)：當你選擇了一個 DOM 元素後，在這裡就會顯示出它所有的屬性。最下面的屬性就是這個元素的祖先，也就是說，它會繼承到一些祖先物件的屬性。最後的那個物件就是元素本身。我通常要檢查一個元素的屬性時都會直接把它印出來到控制台面版 (Console panel) 或是在中斷點時檢查，所以這一個控制台我很少使用。

圖 6: 屬性控制台
今天就算是元素面版的總結啦，我們花了好幾天的時間一起討論了 DOM 元素的新增、編輯、修改及刪除還有移動。而這些編輯都是即時的 (Live)，可以馬上在瀏覽器裡就看到修改後的畫面。另一部份是樣式的編輯及檢視，樣式編輯跟 DOM 元素的很大的不同在於：樣式常常會有衝突，而且很多東西是繼承的，所以在修改時要先花點時間來找到你要修改的特定宣告。今天我們也花了點時間介紹幾個剩下的控制台，很多是我不太熟悉也很少用的，所以我都有補上連結，希望可以幫助到想要更深入了解的人。
經過這幾天的介紹希望大家對元素面版有一定的熟悉並且已經可以使用在現有的開發流程裡，我相信如果你知道如何善用元素面版，一定可以省下很多在原始碼編輯器裡還有瀏覽器畫面切換來切換去的時間。並且對 DOM 還有 CSS 如何在瀏覽器中運作也會有更深一點的認識。所以元素面版就介紹到這裡了，如果你有任何問題，歡迎留言，接來下我們要開始討論控制台面版了！",,"['運算控制台 (Computed panel)', '其他控制台', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191497,AI&MachineLearning,0,深度學習環境安裝筆記系列,3,[Day03]深度學習環境安裝筆記—Ubuntu系統安裝與設定02.安裝作業系統,a7552005,https://ithelp.ithome.com.tw/users/20091307/ironman,1513256657000000000,625,"在 Windows 上有很多種製作 Live Usb 的軟體，我個人推薦使用 Rufus ，介面簡單功能強大。

使用步驟如下：

把 ubuntu-16.04.3-desktop-amd64.iso 換成你下載的映象檔的檔名，然後 /dev/disk3 換成你的隨身碟。

把 ubuntu-16.04.3-desktop-amd64.iso 換成你下載的映象檔的檔名，然後 /dev/sdd 換成你的隨身碟。
通常開機的時候按 Delete 鍵就會進入 Bios 模式，進到 Bios 模式之後切換到啟動或是 Boot 的分頁來做設定。



設定完 Bios 後按 F10 儲存並重開機
開機的時候狂按 F8 就可以進入選擇開機磁碟的畫面，選擇你的開機隨身碟開機。














到這裡我們就把系統給安裝好了，明天再來講一些系統設定跟好用的工具。","['1.製作 Ubuntu 開機隨身碟', '2.設定 Bios usb 開機']","['在 Windows 製作：', '在 Mac 製作：', '在 Linux 製作：', '關閉 Secure Boot', '開啟 CSM', '選擇 USB 開機', '3.安裝作業系統']","['啟動 Live 系統', '啟動桌面上的安裝程式', '選擇語言', '這邊全部打勾', '如果你只有要灌 Ubuntu 單一個系統的話這邊直接下一步', '如果要灌 Windows + Ubuntu 雙系統的話請選擇 Something else', '配置你的根目錄、家目錄以及 swap ，最重要的是 boot loader 要裝在 windows 的 UEFI 磁區，這樣才能雙系統', '選擇時區，可直接下一步', '選擇鍵盤佈局，可直接下一步', '輸入使用者帳號、密碼，如果想要開機自動登錄的話可以把 Log in automatically 打勾', '到這裡就正式進入系統安裝，等他重新開機後就完成安裝了', '重新開機後會看到 GRUB 開機選單，以後就在這邊切換系統']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191542,自我挑戰組,0,Verilog從放棄到有趣系列,3,[Day3]verilog基本宣告,Sheng,https://ithelp.ithome.com.tw/users/20107543/ironman,1513256073000000000,594,"今天開始的幾天，要來跟大家分享verilog語法，分享語法的過程中會用一些圖解的方式呈現，也就是說用把一些語法轉換成邏輯電路，好讓大家在寫的同時能知道自己寫的程式會產生什麼樣電路，那就讓我們開始吧．
以下是做幾個邏輯運算的小電路：
module test(clk,reset,a,b,c);
input clk;   //時脈訊號
input reset; //訊號重置
input a;     //輸入訊號
input b;     //輸入訊號
output c;//輸出訊號
wire tamp1;  //宣告為wire訊號
wire tamp2;  //宣告為wire訊號
reg tamp3;  //宣告為reg訊號
assign tamp1 = a & b;  //兩個輸入訊號做and
assign tamp2 = a | b;  //兩個輸入訊號做or
assign c = tamp3;
always@(posedge clk)begin //clock正緣觸發
if(reset)
tamp3 <= 0; //reset等於1時做初始化
else
tamp3 <= ~(tamp1 ^ tamp2); //兩條訊號線做xnor
end
endmodule
依上圖可以看到一個簡單的電路需要具備哪些元素，那這邊就對這一個小電路做個別的解釋．
1.	module：verilog起始宣告的關鍵字，接著後面的括弧裡面放input,output的腳位，最後面要搭配一個endmodule，可以把數個module寫在同一個.v檔案裡面，但通常還是會拆開來寫在不同的.v檔裡面較方便管理．
2.	input output：輸入輸出腳位，可以和module裡面的訊號線合併，以上圖為例也可以寫成：
module test(
input clk,
input reset,
input a,
input b,
output c);
module的input宣告方式必須是wire的形式，以上面這樣寫的預設值就是wire，所以不用特別去修改，output的話可以是wire 或者是reg，所以說如果你的output想要宣告為reg的話，以上面的例子可以寫成:
output reg c
這邊提醒大家一下，output訊號線是不可缺的成員之一，一個電路如果沒有輸出訊號線，等於說是沒有用的電路，在模擬階段可能看不出來，但實際在跑合成時如果沒有輸出訊號的話，整個電路可能都會被優化掉．
3.	宣告自己會用到的訊號線，宣告wire形式的話為幫你做拉線的動作，宣告
成reg的話則會用暫存器幫你儲存起來，這邊說明一下宣告的方式
reg[7:0] A => 宣告一個名字為A的8bits的暫存器．
reg[7:0] A [7:0] =>宣告8個8 bits名字為A的暫存器，使用方法就像是軟體陣列的形式．
宣告成reg A[15:0]跟宣告成reg B[0:15]雖然都是16bits的暫存器，但儲存的方式就會不一樣了，使用上要小心，wire形式也能宣告像是array的形式，方法同reg．
4.	assign：要求指定的訊號線要做什麼運算，例如：
assign “tamp1 = a & b;”把a and b 的結果指定給 tamp1，這邊要注意的是指定的對象必須宣告為wire的形式．
5.	always：跟assign意思差不多，但他可以在always裡面做比較多指定的運算
那裡面宣告的形式必須為reg的形式，always的使用方式會在下次做更詳細的介紹．
下圖是這次教學所產生的電路圖，大家可以參考一下．

還蠻鼓勵大家一開始在寫的時候能想像一下，我這樣寫會產生什麼樣的電路，會用什麼樣的邏輯閘去產生，線又會怎麼接，這樣去培養寫電路感覺，自然而然就不會覺得寫verilog很乏味了，那今天就先到這裡喔．",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191640,ModernWeb,0,Expo---跨平台App開發從零到上架系列,10,ExpoDAY10---Gyroscope,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1513255112000000000,572,,['Expo DAY10 --- Gyroscope'],"['前言', '現在就做看看', 'Refs']","['Expo', 'React Native']",,,['tags: day10 iThome鐵人賽2018 ReactNative Expo AV Audio Video'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10191638,自我挑戰組,0,網頁學習日誌系列,11,jquery：本日占卜,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1513254902000000000,637,"想法：
樂透彩上看xx億，想知道現在去買彩卷的運勢如何 ? 點擊按鈕就可知道!!!!
程式需求：
1.點按鈕就知道結果
2.可重新占卜
這次用到的語法有jquery和javascript，下面列出語法在這小程式扮演的腳色：
javascript:
Math.floor(): 傳回整數
Math.random()：產生隨機亂數
location.reload()：刷新頁面
jquery:
append()：在該元素結尾插入內容
remove() ：移除元素
show()：顯示元素
首先在html網頁加入button、顯示文字等元素
html
css
接下來開始寫 javascript
先列出吉凶內容陣列
再來把陣列放在亂數程式中隨機產生占卜結果，設定index等於該結果
接著，寫jquery點擊按鈕事件
btn(占卜)按鈕按下時會觸發：插入結果、移除占卜按鈕、顯現重算按鈕
restart(重算)按鈕按下時會觸發：刷新網頁
1.先寫占卜結果陣列
2.陣列數值隨機產生
3.占卜按鈕按下時觸發顯示結果
4.重算按鈕按下時刷新網頁
codepen網址：https://codepen.io/yuski/pen/bYXPJj
",,"['上面重點如下：', '結果如下：']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191622,ModernWeb,0,Go！從無到打造最佳行動網站系列,4,Day4初次見面Vue！,網襪工程師,https://ithelp.ithome.com.tw/users/20107302/ironman,1513252883000000000,673,"今天還是一樣不太想開始寫Code，不想面對接下來的26天，三十天是很漫長的一個月...
在網路上可以找到許多的文章在介紹Vue，Vue的發音跟View一樣，簡單的來說就是負責MVC裡面很重要的一環 ─ View。作者是一名中國人，所以在官方網站上面的文件中有中文，對我們這種英文學的不是很好的人來說是一大福音阿！
Vuejs在進幾年中的表現不輸給React與Angular，在Vue官方文件中也有與其它Framework的比較資料(Comparison with Other Frameworks)，在Google搜尋幾個關鍵字就有許多的比較跟分析，還有統計資料，選擇Vue的開發人員，大多數的原因都會是「Easy To Pick Up」，容易上手、簡單等等的原因，對於開發中小型網站來說，它的確容易維護，當然您要用來架設大型網站也是可以的，它們也提供許多的應用套件，像是VueRouter、Nuxtjs...等等，來幫助您架設大型網站。
上網搜尋：react angular vue
因為網路上的教學以及範例實在太多了，我就挑了幾個我覺得很棒的特色來跟大家分享
用一個簡單的範例來做說明，我們在html中輸出一段文字，但這個文字希望可以不要寫死在html上面，當然你可以很值接透過DOM(Document Object Model 文件物件模型)，去append資料或其他方式，但如果你直接透過Vue的話，它會將一個Instance(實例)，透過html去綁定這個element，將我們的行為或是資料實現在上面。
輸出
我們在做更進一步的練習
透過TextBox來輸入我們要的文字
js保持一樣的語法
輸出

我自己下了一個結論，Vue的data Binding 應該是最直覺的操作，與最容易懂的語法
Components are one of the most powerful features of Vue.
在官方文件上面的第一句介紹Vue Component(元件)，Components 是Vue最強大的特色之一，能將HTML、JS、CSS打包成一個元件來使用，這可降低程式碼的重複性，舉一個例子，在我的網站下希望每個header 中都需要 Login跟Logout的按鈕，一般來說我們可能要在每一頁加上相同的程式碼，但這個動作會使我們的程式碼難以維護，假設未來需要一個search bar，那我們不就要在每一個頁面中加入呢？下面透過一個Vue Component來做示範。
HTML
Javascript
輸出

我們可以在頁面上看到登入跟登出的按鈕在上面，但實際打開source code(在頁面上點選右鍵->檢視原始碼或點選鍵盤F12)，會發現Vue Component並不是一個Web Component，而是將註冊過的Vue Component編譯成一般的HTML，有興趣研究Web Component跟Vue Component的可以上網找找喔！
你可以了解更多Vue component：(https://vuejs.org/v2/guide/components.html)
你可以了解更多Web component：(https://developer.mozilla.org/en-US/docs/Web/Web_Components)
昨天沒有喝飲料了，嘴巴很纏，喝了兩杯咖啡當做茶的替代品，聽說明天公司又有甜品的誘惑，下班後立馬健身房報到，分享一下減肥訓練的幾個項目
運動後了隔一天怎麼酸酸的？
有這種狀況我們稱之為「延遲性肌肉酸痛」，在運動時肌肉發生了一些擠壓或是損傷，造成肌肉受傷了，這時候身體會啟動修補機制來幫忙，來修復我們受傷的肌肉，讓你再下次做運動的時候有更好的表現喔！
如果你買不起網襪
那就買奇異筆自己畫吧！
By 網襪工程師",,,"['Data Binding', 'VueComponent', '減肥專欄', '每日一句']",['小知識'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191627,AI&MachineLearning,2,以100張圖理解NeuralNetwork--觀念與實踐系列,4,Day04：關於Keras的一些小技巧--組態、模型存檔與實驗,IcodesoIam.,https://ithelp.ithome.com.tw/users/20001976/ironman,1513251718000000000,615,"再往下探究之前，我們輕鬆一點，先作點實驗，驗證上上篇的程式辨識準確率是否真的那麼高? 可否在應用系統上使用? 譬如，阿拉伯數字辨識率如果那麼高，我們是否可以提供手寫板，讓用戶直接輸入，用於輸入密碼、開鎖、填寫問卷、考試答題...等等。
另外，在實驗之前，我們先討論一些 Keras 小技巧，讓我們在開發程式時更有效率，包括：
模型訓練完畢後，結果如可接受，可以將模型存檔，下次要再測試時，就可直接載入，不需重新訓練，模型的資訊包括結構及訓練出來的權重(W)。
之後，我們要使用時，可輸入下列程式碼，載入模型結構及權重(W)。
或者直接載入HDF5檔案
如果，直接從網路下載，可改為
Keras提供幾個事先訓練好的經典應用程式，不必重新訓練，可直接套用，請參考官方文件，使用方法如下：
官方文件找不到詳細用法，我花費好一番功夫才弄懂，後面談到 CNN 會詳細介紹，敬請期待。
Keras提供幾個現成的資料集，可作為訓練/測試資料，，請參考官方文件，包括手寫數字、分類圖片、影評、新聞、... 等。也可以自其他網站下載，例如，你覺得辨識0~9不過癮，也想辨識 A~Z, a~z，可至這裡下載。
我用C#寫了一個Draw.exe 小程式， Source Code 放在這裡，可以使用滑鼠，書寫數字，並將它存成與MNIST類似的格式(.csv)，再用Python程式載入，依照訓練出來的模型測試是否可以辨識，步驟如下:

圖. 手寫數字 9 的比較，左為 MNIST， 右為筆者以 Draw.exe 手寫的數字
筆者反覆測試多次，發覺測試結果並不如MNIST測試資料那麼準確，可能原因有二，正所謂『盡信書，不如無書』:
另外，訓練出來的準確率均達85%，甚至95%，乍看很高，但仔細想想，如果是應用在銀行存款數目的辨識，使用者輸入10位數，只要一個數字錯，銀行老董可能就要崩潰了，反之，用在遊戲中，使用者可能會讚聲連連，驚嘆不已，所以，Machine Learning 的應用還是必須考量使用的時機與應用場域，才能贏得掌聲。",,"['前言', '模型存檔(Persistence)', '模型載入', 'Keras 組態', 'Keras事先訓練好的應用程式(pre-trained Applications)', '資料集(Datasets)', '實驗', '結論']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191634,DevOps,0,用30天來介紹和使用Docker系列,11,Day11：介紹執行DockerContainer常用到的指令(一),yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1513250034000000000,629,"在介紹使用 Docker Container　指令之前，先讓我們再一次簡單的了解到 Dockerfile、Docker Image、Docker Container 三個 term 之間的關係，先看以下的圖：

在啟動 Docker Container 時主要會是三個部份組合而成的，最底層的是 Docker Image 這一層主要是透過撰寫 Dockerfile 之後 Build 出來的 Docker Image，它是一個唯讀的檔案， Docker Image 可以存放的地方就是前幾天所介紹的 Docker Hub 或是私有網路的 Docker Registry。 執行啟動了 Docker Container，會加上二層，就是需要先 Init Container的設定，例如是 host name、環境變數……等等的一些系統設定，之後最上層再加上使用者可以在此層去讀寫資料的部份。
從這個架構來看使用 Docker 其實相對比 VM 較省儲存空間，因為底層都是用相同的 Image，只有上層在啟動 Docker Container 會花掉一些空間。另外如果把　Docker Container 的資料刪除掉，之前儲存的資料也會跟著被刪除掉，因此需要使用 Docker 提供的 Volume，把資料存放在實體的硬碟上，這個在之後會介紹到。
Example1：
啟動了 nginx 的 Continer，使用以下的指令執行如下
參數說明：
-d：把 container 執行在背景裡
-p: 做 port 的mapping，container裡的port 80 mapping 到 host 的8080 port
--restart=always：如果 container 遇到例外的情況被 stop 掉，例如是重新開機，docker 會試著重新啟動此 container
--name=registry：設定 container 的 name 為 nginx
最後一個參數 nginx 是 docker image 的 Name
使用 docker run 指令的流程如下：
(1)會試著在 local 裡找有沒有 nginx Docker Image，如果沒有會自動的從 Docker Hub 上 pull 下來
(2)有了 Docker Image 之後從會mount Init設定 Container 系統和 mount 可讀可寫層
(3)Container 啟動完成
Example2：
在執行 Container 如何看到 log，指令如下
如下圖

Example3：
如何看到執行了哪些 Container，可以使用以下的指令
參數說明：
-a：如果沒有加上 -a 參數，只會顯示 running 的 container
如下圖

Example4：
如何把執行的 Container 刪除掉，使用以下的指令
參數說明：
-f：強制刪除 Container
nginx 為 Container Name
如下圖：

Example5：
如何把 Docker Image 刪除掉，使用以下的指令
參數說明：
docker.io/nginx 為在 pull Docker Image 的 name，其實可以把 docker.io 省略掉
如下圖：

今天介紹了Docker Container的一些概念以及在執行 Docker Container 會常使用到的指令，希望對大家會有幫助。如果忘記 Docker 的指令可以輸入 docker --help 或是 docker run --help 的指令去查看說明。
明天還會繼續再介紹其它常會使用到指令",,,,['今天就來介紹啟動 Docker Container 常用到的幾個指令：'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191629,ModernWeb,1,邁向JavaScript勇者之路系列,11,JavaScript函式與參數,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1513249892000000000,646,"函式可以將參數傳入，使得函式的可用性提高許多，不過其中也有許多小技巧及方法可以運用，以下我們用 悠遊卡的概念 來說明此段。
小明的悠遊卡裡面有 1000 元，他要儲值一些零用錢進悠遊卡內 (真是優秀青年，這麼多錢還繼續儲)，好讓他可以繼續搭乘捷運。
以下是一個簡單的函式，用來更新悠遊卡的金額。小明將錢 cash 投入機器內後，按下執行按鈕 updateEasyCard() 就會回傳更新後的悠遊卡金額。
但如果機器沒有設定好，小明還沒有投入任何金額就按下 updateEasyCard() 就會跳出 NaN (Not a Number) 的錯誤 。
所以有些函式會透過 || 來加入預設值，在沒有輸入任何值的情況下會使用預設值代替，這邊就先將預設值設為 100 (佛心機器，沒投錢也會給 100)。
這樣，至少不會出現錯誤了，但會出現另一個問題，假設函式中真的需要使用 0、false 這種值傳入時，他一樣會使用前者所套用的值。
0 會被強制轉型成 false，所以兩者都會被替代。
|| 本身就是一個判斷式，如果簡單的判斷式沒辦法滿足需求，那麼就使用更複雜的判斷式來寫，以下範例：如果 cash 是 false，且 cash 不等於 0 的情況， cash = 100。
當然，還有一種情況就是傳入的並非數值而是字串，這樣則會造成金額也自動轉換成字串。
那麼就需要先將文字轉成數值，避免原始的數值被轉換為字串。
在 ES6 中提供更簡潔的方式來解決此問題，可以直接在傳入的參數賦予預設值，此預設值也不需要額外的帶入判斷式就能達到以上效果(但文字問題依然要自己修正喔)。
假設小明零錢很多，他要一個一個投進去機器內儲值，這樣參數該如何設計？
除此之外，JavaScript 有預設的參數 arguments 可直接帶入，這種參數不須預先設定，所有函式都內建此參數，他會將呼叫函式所帶入的參數一並透過陣列的方式傳入。
不過 arguments 實際在使用時會有一些小問題，像是範例中為何是使用 for 迴圈，而不是使用 forEach (forEach 可以使用在陣列上)，主要原因是 arguments 並非真正的 陣列，它是 類陣列(Array-like) 的物件，因此無法使用許多陣列相關的方法。
相關文件可查閱：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
本篇同時發表於：https://wcc723.github.io/javascript/2017/12/14/javascript-arguments/",,"['傳入變數', 'arguments']","['複雜的判斷式', 'ES6 預設函式變數']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191633,Security,0,IT安全稽核系列,11,3.1組織是否訂有資訊安全管理系統政策？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1513249562000000000,610,"在公司裡面，我最頭痛的是，政令宣導該怎麼做？有些主管常說，公司政策早就訂好了，為甚麼大家都裝不知道，然後就來吵著說他是例外。
個人昨天就接到人資主管的抱怨，說已經發了很多次公告，但是等到期限都過了，又有人冒出來吵著要之前的事情。理由根本是胡謅一通，認為有吵就有糖可以吃，如果拒絕，馬上管理階層就變成黑單位，最後就是整個組織吵成一片。
這種管理階層與事業單位之間的衝突，基本上每天都在上演，截至目前我所看過的公司，沒有一家例外，從古至今，都是如此，我也是無解，但，最後還是得要靠最上層的決心了，古今中外，戰場上還是要靠主帥決定戰略，其他的將軍們就依照主帥的決定，執行作戰策略，打戰的時候，生死關頭，命如果沒了，吵也沒用。
所以才會有句老話 「主帥無能，累死三軍。」
以下就探討第三部分安全政策的相關議題，這是與資訊安全組織及資訊單位有關的部分，我們繼續根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，探討3.1的分析。
三、安全政策（資訊安全組織及資訊單位）
3.1組織是否訂有資訊安全管理系統政策？
說明：此項說明只有一個重點：1.訂政策。
我先引用教育部的資安政策第一、二、三及第十條，
全文參照網址：https://www.edu.tw/News_Content.aspx?state=F5D336F102ACBC68&s=C61BCCE44A809306&sms=15283ECA9D7F60AA
教育部資訊安全推動管理會設置及資訊安全管理實施要點
中華民國103年6月頒行
一、教育部（以下簡稱本部）為落實推動本部資訊安全管理，特設教育部資訊安全推動管理會(以下簡稱本會)，並訂定本要點。
二、本部資訊安全管理範圍如下：
(一)資訊資產。
(二)人員資訊資源使用權限。
(三)重要業務資訊系統建置、開發及維運。
(四)實體及環境安全。
(五)通訊及作業。
(六)資訊安全事件通報及應變。
(七)重要業務資訊系統持續營運。
三、本會之任務如下：
(一)本部資訊安全管理政策之研議。
(二)本部資訊安全管理制度之推展及分配適當資源。
(三)本部資訊安全風險評鑑及管理。
(四)本部資訊安全管理措施有效性檢視及審議。
(五)本部資訊安全管理稽核結果檢視及審議。
十、各單位資訊安全管理之作法如下：
(一)實施資訊資產之清點、分級及風險評鑑。
(二)評估重要業務運作之資訊系統(網站)應否納入本部資訊安全管理。
(三)辦理實施資訊安全管理教育訓練，向本部同仁宣導相關作法及措施。
(四)針對納管之資訊系統(網站)所面臨風險，制定適當資訊安全管控措施。
(五)針對資訊安全管制措施，規劃可行之管控程序，並予以文件化。
(六)各單位資訊安全管理專責人員應輔導同仁，落實實施各項資訊安全管控措施。
(七)就稽核小組定期執行稽核檢查發現之缺失，各單位應對該項缺失實施矯正及預防措施。
(八)得接受外部資安稽核認證機構及行政院資通安全會報之稽核，以獲取資訊安全管理認證，並持續改善。
政策的訂定，首先是定義清楚，例如第一、二條。到了第三條，就是任務為何，最後第十條就是該怎麼做。
這四個條文，就是定訂辦法的主要枝幹，其他的就是執行面與細部的討論，最後就是政策執行是否合乎政策規定。
**最後，政策不是訂著就不用的，如何教育員工遵守政策規定，相信這才是極大的難題之一。**",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191632,自我挑戰組,0,迷失在挨踢叢林的獎金獵人系列,2,「獎金獵人報馬仔」-比賽分享之二,獎金獵人,https://ithelp.ithome.com.tw/users/20107677/ironman,1513249371000000000,560,"嗨，我是獎金獵人，現在正迷失在挨踢叢林當中，唯有提供各種資訊養分給願意帶我走出叢林的當地居民，我才能成功離開。
昨天很簡單的介紹了育秀盃創意獎之後，今天要詳細的解說比賽的內容。
圍繞在主題『智惠明天』上，發揮每個人的創造力及想像力，以物聯網(IoT)、擴增實境(AR)、虛擬個人語音助理(VPA) 、人工智慧(AI)、感測技術與分析、擴增實境導航系統(Augmented Reality Navigation)、適地性服務(LBS for mobile vehicle)、即時影像辨識與移動物體識別(perform object recognition)、居家應用控制(Home Utility Control and Analytics)等技術研發。
應用包含軍事、公共安全、外勤服務(運輸/倉儲/維修/巡檢….等需外勤現場工作者)、公用事業、交通、汽車、健康照護、通訊八大領域，進行軟硬體產品/服務開發。
舉例來說好了，以擴增實境(AR，Augmented Reality)進行使用者情境user scenario介面設計之後，可以使用MAYA/Unity/Unreal …等等3D或2D軟體設計出原型進行一個完整概念Demo。
如果選擇的主題為虛擬個人語音助理(VPA，stand for Virtual Personal Assistants)，則可以建立新的虛擬語音助理系統(軟體或硬體設計皆可)，或是以現有語言助理(Amazon Alexa, Google Now, Siri, Cortana…)創新應用設計，也可以設計虛擬語音助理的人機介面創新開發等等相關的部分。
感覺起來範圍很廣也可以天馬行空的構思，但成品需要可以實機展示及實際操作測試，所以還是需要以當今可以完成的技術去做發想喔！
想參加比賽卻不知道哪裡有嗎？歡迎鎖定獎金獵人網站唷！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191467,ModernWeb,0,Next.js+各種套件組合系列,11,Next.js&ApolloData(二)基本設定,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513248222000000000,530,"介紹
ApolloClient & ApolloProvider 之中有提供幾個不錯的功能，來介紹一下有哪些參數可以使用
​
​
ApolloProvider組件提供一個 ApolloClient 實例來獲取數據， graphql 函數將能夠提供對GraphQL打payload，可以操作三種方法 Query，Mutation，Subscription 三種
​
再打這些操作時候有 config 可以使用，在 graphql第二個參數
​
config.options: 參數傳遞, 通常用在gql有參數的狀況使用,也可以給初始化預設值
config.props: 這邊與recomopse一樣操作方式 可以透過組裝傳遞參數或是函數到組件之中
以下面的例子就會把 props 加上 onLoadMore 的 method
​
​
config.skip: 如果為 true grpahql 就忽略 graphql method ，但不要直接設定 boolean值而是使用一個 可以有切換的function當作開關使用
​
​
config.name: 因為如果透過compose 去組裝很多 graphql ，因為都是透過對props加工，意味如果沒有定義名稱則會有props覆蓋的問題，定義好名稱後就可以透過 props 取到各自的資料
​
​
總結
​
ApolloClient 提供許多參數可以套用 ， ApolloProvder 底下的元件都可以透過 graphql 這個 method 來對 GraphQL Server 發Request， 只需要設定好 ApolloClient 其他元件的開發只需要專注在 gql 的Json PayLoad 語法 ， 在組裝元件中使用了 recompose 讓組裝更方便簡單
​",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191408,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,9,Python與MongoDB的互動,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1513248014000000000,585,"承接著爬蟲，大家或許對於爬下來的資料如何儲存還是會有一點疑惑，當然最簡單的方式其實就是存成txt檔，不過讀檔出來時就可能會遇到一些障礙。進階一點，你可以選擇json檔，不過如果檔案不小的話，資料尋找可能會有效率層面的問題。所以整體而言最好的選擇，其實還是資料庫。因此，以下介紹一款，我個人比較喜歡使用的資料庫MongoDB。
MongoDB作為一樣輕便、免費的選擇，其熱門不是沒有道理，以下就讓我們來一探究竟。要使用MongoDB主要有兩個方案，第一直接使用本機端的資料庫，第二使用雲端的資料庫，當然兩者各有利弊，而這篇文章中，都會介紹使用級操作方式。
我們來稍微比較一下，本機端MongoDB跟雲端MongoDB的差異。本機端的MongoDB讀寫速度較快，畢竟不需要經過跟遠端server互動的過程，雲端的話相對會慢一些；但是因為本機端只有你自己的電腦連線的到，如果要跟隊友共享資料，那就會比較麻煩，可能必須經過一些輩分復原的程序，把你的檔案複製到它的電腦上(如非你可以把自己的電腦架設成為server)，但是雲端的話，你只要開一個使用者權限給她，隊友只要有辦法上網，就可以存取裡面的資料。
註: 關聯式與非關聯式資料庫我在第二天的文章中就有介紹過，這邊就不再多嘴。
由於別人在這個部分已經寫得很完整了，可以參考這一篇文章。因此，這個部分我就跳過了。我覺得其中比較需要注意的是:
這東西算是mongodb的視覺化操作介面，安裝好之後，就會跳出如下頁面，請按create，然後把new connection改成local(看你本機端的聯想想要叫什麼明子都可以)。只要你的server有跑起來，應該就可以成功建立連線，這個前端app就會連接到你的mongodb server。

這個時候你可以用右鍵去點擊你的連線，選擇Create DataBase，然後自己命名，然後再創造好的Database上面雙擊，應該可以看到一個資料夾叫做collection，右鍵點擊後選擇Create collection。這個時候你已經把資料庫跟文章集創造完成。
這邊稍微說明一下，這分別是時麼意思，collection其實就是一張table，而之所以會稱為collection的原因是，NoSql資料庫本來是開發來支援文件檢索功能，所以一筆資料(json中的一個dict，也就是table中的row)就會被當作一篇文章及其metadata(描述文章的資料)，而很多個文章組成的及合稱為文章集，也就是collection。而很多個collection當然就組成一個database啦。最後，也可以想像一個server上面可以存放很多個database。總而言之，同整如下:
這個地方我的習慣是使用mlab的服務，畢竟它沒有超過0.5G就不用付錢，很多服務加上其實不會超過這個大小，所以也就選擇了它。由於申請帳號的過程太簡單，我就略過啦。不過要提醒大家一點的事情，當帳號申請好，也創建好資料庫，要千萬記得一件事情，就是進去user的地方創建一個user。

創建完user之後，你就可以透過Robo3T去連線啦，不過這邊的連線方式比較複雜，請一步步填入以下資訊:
python跟MongoDB的互動主要是透過pymongo來完成，接下來將會逐一說明連線(MongoClient)、尋找(find)、插入(insert)以及刪除(delete)在python中的實踐。另外，因為創建Database跟collection，Robo3T的GUI便可以輕而易舉的完成，其實不太需要硬是要透過程式碼來完成，所以這邊就不交代了。
如果大家對於更進階的檢索有興趣，例如說如何尋找Null值，或是如何模糊比對出某一字串，我個人比較少用到(還是有用過啦)，就請大家自行做功課摟。(補充: 如果大家的資料量沒有大到很誇張，其實可以都全部讀進Python中的暫存，再來處理)
原本明天想發的文章是MongoDB的備份，但是後來想想其實實用性不高，加上寫到後面的文章時不太順利，發現應該要先交代pandas才能讓大家比較好的理解我在幹什麼，所以接下來三天，應該會很細緻的介紹pandas。pandas可以說是python中的excel，功能非常強大，如果還沒機會接觸，非常建議可以跟著一起玩一下，一定會有所收穫。","['前言', '本機端MongoDB的安裝', 'Robo3T', '雲端的免費server', '用python與資料庫互動', '關於比賽...']","['連線', '尋找(find)', '刪除(delete)', '插入(Insert)']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191276,自我挑戰組,2,使用PHP串接金流相關API系列,4,Day03-Linepay(2)功能介紹,royal801991,https://ithelp.ithome.com.tw/users/20107301/ironman,1513247452000000000,617,"LINE Pay 的支付流程大致可以分為四個步驟：
                              
LINE Pay 提供兩種付款方式，讓商家在經營上可以更有彈性。
一般付款
LINE Pay 用戶直接存取 LINE Pay 服務，選擇一種付款方式(餘額扣除, 信用卡支付)後輸入密碼。
當買家通過付款密碼驗證後，賣家要經過 授權 和 請款 兩個步驟後，才能從買家收到款項。賣家可以自行設定要一次走完結帳流程，或是如果商家有提供鑑賞期服務，則可以把請款步驟延後，依據買家當時選擇的付款方式扣款。
其他功能",,,,"['支付流程', '付款方式']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191539,DataTechnology,0,GraphQL+ApolloData入門系列,8,ApolloData&ApolloClient設定檔介紹,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513247016000000000,536,"介紹
ApolloClient & ApolloProvider 之中有提供幾個不錯的功能，來介紹一下有哪些參數可以使用
link: Apollo Client提供一了一個網絡層,除了可以發request到 GraphQL Server EndPoint設定
cache: cahce層 ，預設值使用 apollo-cache-inmemory 只要引入 { InMemoryCache } 直接可以用，官方有更多cache的文件可以參考
ssrMode: 當打開ssrMode的時候 React Apollo’s getDataFromTree 前端的method就會提供給SSR當 promise去異步請求資料.
ssrForceFetchDelay: 強制延遲ApolloClient在SSR之後在發Request
connectToDevTools: Apollo 有提供介面可以連結到開發工具介面,可以參考網址
https://www.apollographql.com/docs/react/features/developer-tooling.html
queryDeduplication: 一般Apollo有Cache機制，如果重複查詢的話會找本機的資源，如果這邊使用 false 就會強制到 Server 要資源
defaultOptions: 設定每個行爲的網路模式如下
ApolloProvider組件提供一個 ApolloClient 實例來獲取數據， graphql 函數將能夠提供對GraphQL打payload，可以操作三種方法 Query，Mutation，Subscription 三種
再打這些操作時候有 config 可以使用，在 graphql第二個參數，以下展示已 React 為主
config.options: 參數傳遞, 通常用在gql有參數的狀況使用,也可以給初始化預設值
config.props: 這邊與recomopse一樣操作方式 可以透過組裝傳遞參數或是函數到組件之中
以下面的例子就會把 props 加上 onLoadMore 的 method
config.skip: 如果為 true grpahql 就忽略 graphql method ，但不要直接設定 boolean值而是使用一個 可以有切換的function當作開關使用
config.name: 因為如果透過compose 去組裝很多 graphql ，因為都是透過對props加工，意味如果沒有定義名稱則會有props覆蓋的問題，定義好名稱後就可以透過 props 取到各自的資料
總結
ApolloClient 提供許多參數可以套用 ， ApolloProvder 底下的元件都可以透過 graphql 這個 method 來對 GraphQL Server 發Request， 只需要設定好 ApolloClient 其他元件的開發只需要專注在 gql 的Json PayLoad 語法 ， 在組裝元件中使用了 compose 讓組裝更方便簡單",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191623,自我挑戰組,0,資訊技術解戈迪安繩結系列,7,IT｜軟體｜KafkaMQ高吞吐量分佈式訊息,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1513245970000000000,554,"介紹
Kafka MQ是一個高吞吐量分布式訊息系統。是由linkedin 開源的消息中間件。
Kafka MQ 的目的是提供一個發佈訂閱解決方案，它可以處理消費者規模的網站中的所有動作流數據。這種動作（網頁瀏覽，搜索和其他用戶的行動是在現代網絡上的許多社會功能的一個關鍵因素。這些數據通常是由於吞吐量的要求而通過處理日誌和日誌聚合來解決。對於像 Hadoop 的一樣的日誌數據和離線分析系統，但又要求實時處理的限制，這是一個可行的解決方案。Kafka MQ 的目的是通過Hadoop的並行加載機制來統一線上和離線的消息處理，也是為了通過集群機來提供實時的消費。　
傳統的離線分析方案是使用日誌文件記錄數據，然後集中批量處理分析。這種方式對於實時性要求很高的活動流數據不適合，而大部分的消息中間件能夠處理實時性要求高的消息/數據，但是對於隊列中大量未處理的消息/數據在持久性方面比較弱。
Kafka 是一種高吞吐量的分布式發佈訂閱消息系統，有如下特性：　　
1.通過磁盤數據結構提供消息的持久化，這種結構對於即使數以 TB 的消息存儲也能夠保持長時間的穩定性能。　　
2.高吞吐量：即使是非常普通的硬件kafka也可以支持每秒數十萬的消息。　　
3.支持通過kafka服務器和消費機集群來分區消息。　　
4.支持Hadoop並行數據加載。　　
[特點]
Kafka MQ 的開發者們認為不需要在內存里緩存什麼數據，操作系統的文件緩存已經足夠完善和強大，只要不搞隨機寫，順序讀寫的性能是非常高效的。Kafka MQ 數據只會順序 append，數據的刪除策略是累積到一定程度或者超過一定時間再刪除。
Kafka MQ 另一個獨特的地方是將消費者信息保存在客戶端而不是 MQ 服務器，這樣服務器就不用記錄消息的投遞過程，每個客戶端都自己知道自己下一次應該從什麼地方什麼位置讀取消息，消息的投遞過程也是採用客戶端主動pull的模型，這樣大大減輕了服務器的負擔。
Kafka MQ 還強調減少數據的序列化和拷貝開銷，它會將一些消息組織成 Message Set 做批量存儲和發送，並且客戶端在 pull 數據的時候，盡量以 zero-copy 的方式傳輸，利用 sendfile（對應 java 的FileChannel.transferTo/transferFrom）高級IO函數來減少拷貝開銷。
[應用]
設計上側重高吞吐量，用於好友動態，相關性統計，排行統計，訪問頻率控制，批處理等系統。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191618,DevOps,0,Nightwatch101：使用Nightwatch實現End-to-EndTesting系列,4,Nightwatch101#4：設定檔,cythilya,https://ithelp.ithome.com.tw/users/20092232/ironman,1513244701000000000,2642,"
Nightwatch 提供了 Command-line Test Runner，用來跑各種類型的測試，例如：指定測試環境、依群組或標籤或個別檔案、循序或平行執行等。其設定檔的預設名稱是 nightwatch.json 或 nightwatch.conf.js，如果兩者都出現，會優先選擇 nightwatch.conf.js，設定檔位置在這個專案的根目錄底下。
設定檔的範例可參考這裡。
本系列文章皆使用這個專案，可以拉下來玩玩；有什麼問題都可以提出 issue。
設定檔分為三個部分：基本設定、Selenium Server 相關設定和測試環境相關設定。
以下特別說明測試環境相關的設定。
Nightwatch Test Runner 可使用 --env 代入指定的測試環境。例如，在這裡有 default 和 staging 兩種環境，依照不同需求，我們可以分別測試任一環境或同時跑測試於這兩個環境。
沒有指定環境，就是預設環境 default。
等同於
指定環境 staging，將 --env 代入 staging 即可。
若不同環境需代入不同的 URL，則可使用 launch_url 分別設定。例如：由於在上例中執行 nightwatch --env staging，所以 browser.launchUrl 會得到 http://staging.host。注意，若沒有指定執行環境，例如執行 nightwatch，則會使用 default 値 http://localhost。
Test Globals 是存放一些名-值對（Name-Value Pairs）的地方，用於代入測試程式中使用。與上面的 launch_url 屬性一樣，可根據環境設定不同的 Test Globals。因此，若執行 nightwatch --env staging
則 console 所得到的 Test Globals 是
備註：每次執行測試程式（Test Suite）時，Test Globals 預設都會建立深拷貝（Deep Copy）的物件，也就是說不會更改初始設定値。所以，如果希望整個測試過程都使用同一個物件，那麼 persist_globals 就要設定為 true，來允許被改變。
在這個範例-Nightwatch101 中，設定檔是 nightwatch.conf.js，其中包含基本設定、Selenium Server 設定和環境設定。我們也將一些 test_settings 的設定提出來放在外部檔案 globals.js 中，例如：Hooks、環境變數、客製化測試報告所用的 plugin 等，好處是設定檔會比較乾淨整齊，這些複雜的判斷運算就包給外部檔案吧。
以上部份在後面談到 Nightwatch Test Runner 時會有更詳細的說明，現在只要先把基本的東西設定好，可以跑測試就好了。
網誌版。",,"['說明', '範例']","['指定測試環境', 'launch_url 屬性', 'Test Globals']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191617,ModernWeb,2,用範例理解Vue.js系列,4,用範例理解Vue.js#4：VirtualDOM,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1513244059000000000,618,"
DOM 是文檔對像模型(Document Object Model)的簡寫，在瀏覽器中我們可以使用 js 來操作 DOM，但是這樣的操作性能很差，於是 Virtual Dom 應運而生。Virtual Dom 是在 js 中模擬 DOM tree 優化 DOM 的操作。
一般來說，我們看到的 DOM 是長這樣的
附上 fiddle https://jsfiddle.net/hunterliu/wcvuuvjz/1/
我們可以用 JavaScript 物件表示上例的 DOM 結構
然後對這個物件操作，例如：新增一個子節點
最後更新回真實的 DOM 上。
在 Vue.js 中的 Virtual DOM 就是 VNODE。
概述中的範例僅僅是一個示意，實際的 VNODE 實例包含以下屬性：
以上 VNODE 對象 及 分類 截取自 https://segmentfault.com/a/1190000008291645#articleHeader4
我們也可以透過 render 操作 Virtual DOM 來建立一個 DOM element。
附上 fiddle https://jsfiddle.net/hunterliu/1jswbw2L/2/

資料來源：Next Vue.js 2.0
說明上圖過程：

資料來源：Next Vue.js 2.0
說明上圖過程：
已經 render 過後，若綁訂的 data 有異動，則會做更新，例如：比對、重新綁定資料、更新必要的 DOM element。
Vue.js 和 React.js 的 virtual DOM 基本上皆使用 snabbdom，並做客製化，這裡有簡易版的說明。",,"['概述', 'VNODE 對象', 'VNODE 分類', 'Render Function', 'Vue 2.0 Rendering Flow', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191270,DataTechnology,0,MicrosoftBotFramework30天上手系列,8,Dialogs,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1513243170000000000,515,"參考
https://docs.microsoft.com/en-us/bot-framework/nodejs/bot-builder-nodejs-dialog-overview
allow you to model conversations and manage conversation
也就是說 所有的 對話腳本邏輯 都是由此決定
註 在3.5以前，是寫成這樣
但目前還是可以這樣寫
dialog裡定義waterfalls
waterfalls的表現方式，
就是照排序的 array ，
然後照這
waterfalls
// Ask the user for their name and greet them by name.
順序做為對話順序的安排",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191615,Security,0,資安的學習心得及分享系列,11,DAY11勒索軟體,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1513242861000000000,588,"今天來講勒索軟體，相信大家對這個名詞都不陌生，還記得前陣子勒索軟體的出現，在網路上造成使用者很大的危害，每天用電腦都人心惶惶的。有許多使用者的電腦軟體也因為勒索軟體的關係，被強迫要付款才可以拿回資料。
!
勒索軟體的運作模式大概是這樣，透過一種惡意軟體(勒索軟體)，他藉由這個意義軟體，把使用者的電腦鎖住，可能鎖住你的一些重要軟件，例如文書軟體(Word檔、PDF檔、Excel檔)目的是要你花費一筆金錢跟他買鑰匙解鎖，在這裡稱為加密型勒索。

另一種我們稱為系統型勒索，它的原理和加密型勒索很像，就像字面上的意思一樣，主要的目的就是限制使用者去使用系統，假如使用者今天不能使用系統，那他除了重灌系統，不然就只能付一筆資金去解鎖。

當然要解鎖勒索系統不一定資金。或許有人已經想到重灌系統這個方法了。但假如今天一個人的電腦裡有重要的文件，他可能就會選擇付勒索金。所以我們換個角度來講，今天發送勒索軟體的人，他只要勒索到幾個願意付錢的人，他就可以靠著這個勒索軟體賺取龐大資金。
當然這並不是叫各位去勒索別人! 以上是個人淺解。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191614,自我挑戰組,0,從0開始的菜鳥工程師挑戰賽系列,2,第二天-Atom初體驗(新手向package),lf2exe,https://ithelp.ithome.com.tw/users/20107727/ironman,1513239972000000000,644,"今天來分享被Atom用英文荼毒的過程，覺得心已死。
這個是Atom打開的畫面((昨天下載完後根本沒有打開過))，當下第一眼我瞬間覺得我未來的30天是黑暗的，這黑底白字的英文刺瞎了我的狗眼阿阿阿。

據喬同學表示，一個優秀的菜雞必須要活用各種外掛插件(Package)，來減少入門的挫敗感，由於我的外語能力真的是廢到笑，光是安裝插件就花了我半個多小((WTF))。

再來是聽說很好用的""emmet""，可以讓你只要輸入關鍵字後按下TAB就能直接快速建立正確的單字或語法((聽說這東西叫做標籤))，讓新手可以更快速上(ㄊㄡ)手(ㄌㄢˇ)。

再來介紹這個我到現在還沒看出用處的插件""file-icons""，據說是用小圖示標記讓你快速辨別是js還是css，不過為什麼我弄到現在甚麼都沒看到，黑人問號????
最後，壓軸的插件是""language-vue""，聽起來好像很厲害，不過我也不知道這是甚麼東東，好像未來是很好用((遠目))，哥，你覺得我還有未來嗎~?
結語:
總之，今天我只玩了那個充滿爽感的插件就飽了，甚麼程式碼都是浮雲，我的進度是不是有點慢((小聲))。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191395,自我挑戰組,1,用IT看世界系列,10,資訊設備標準化,allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1513239308000000000,645,"今天我們來聊聊資訊設備標準化這東西
我想大部分從事過IT工作的人，都有過「修電腦」的經驗
大家最惱人的應該是一件事情，公司有太多的「組裝電腦」
這意味著我必須要做n個ghost，甚至要準備n種備品，不同user還要安裝不同的應用軟體
在談資訊設備標準化時，我跟各位分享一去年我在某汽車零件廠的小故事
事情是這樣的，我應聘了該公司的IT人員，工作內容相當簡單，無非就是一般公司的基礎架構維護
我在面談時候，大概就掌握了這間公司的資訊設備規模，連一櫃都不到的伺服器、網路設備，員工人數150編制2位
正當我開心地想著，這無疑是個輕鬆的缺，可以讓我有很多時間可以研究其他資訊技術
在我on board的第二天，惡夢發生了
天啊!!
公司所有的電腦都是組裝電腦，所有的網路設備都是用Hub做串接，包含現場
這代表，只要電腦一開機就會產生Broadcast Storm(廣播風暴)，我無意批評公司使用低階的產品或者設備
但，太多的hub串接會造成管理上的困難，也就是這個組織發展會很有限，我曾經待過50人以下的小公司，大家也是串來串去相安無事
實務上，網路設備是根據組織大小再去做品牌的決定
那「組裝電腦」呢?我問了應徵我的這職務的資深同仁有何看法?他告訴我每台電腦的處理模式
1周後我決定請辭了，原因有兩個
我必須承認，<1>我無法與他共事，<2>觀念上我們迥然不同
他在該公司或許是個良好的工匠，大小事情處理得到當，但遇到外來的刺激，他開啟防火牆模式
他不願面對身為資訊人員，應該把資訊設備標準化技術書面化，進而讓整個公司或者組織更有效率
這應該是中小型企業的悲哀，IT人員成長很有限
我慶幸自己年輕不懂事的時候，常常換工作，也因為這樣待過不同產業
大概在離開這間公司不久後，我加入了一間新的公司
該公司IT編制只有一人，4個廠區，員工人數600人，450台電腦
我在這邊協導了MES，還有負責SAP基礎端的設備約75台新電腦
我不是要說明自己能力過人，而是企業組織在IT策略上的成熟性
當我加入這間公司的時候，我問了主管，最基本日常維護的問題
他根據我過往的工作經驗去分析，基本上450U對你來說輕鬆，因為方法都一樣
他比較著重的是公司專案的導入是否順利?
事實也證明，有效的管理方式，是可以讓整個組織效率提升的",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191547,ModernWeb,0,前端新手村系列,4,前端新手村CSS的單位,chris,https://ithelp.ithome.com.tw/users/20107637/ironman,1513236788000000000,870,"「當你迷惘的時候，就回到原點想一想」-中華一番 蘭飛鴻
網頁前端新手村系列文章，宗旨並不在技術本身的教導，重點放在技術與技術之間的脈胳關係。讓零碎的網頁前端技術的關鍵字，成為比較有系統性的視野。
讓一開始接觸網頁前端的新手們，有一個比較友善的系統來架構你的學習，至於技術本身的深入探討，就留給其它的高手們吧。

出處: 參考資料[1]
大多是印刷相關的單位。也就是平面設計師熟悉的部份
在印刷這一種真實輸出的設備，絕對單位是很重要的。但是在螢幕這種數位輸出設備，有時就不一定了。尤其是低解析度的螢幕，也許就有長度上的誤差。(也許啦)
過去，CSS要求絕對單位的正確程度。錯誤的顯示大於正確的。所以從2011年開始 CSS 對於絕對單位的精準度不再這麼要求。目前，只在高解析螢幕與列印輸出會正確顯示長度
CSS 沒有定義所謂的「高解析度」，低階打印機在300dpi時開始，高階螢幕在200dpi時。[1]
使用絕對單位，可能在不同的設備的螢幕顯示出不同的大小，所以建議使用相對單位。
有兩個使用相對單位要注意的事
例如: 液晶顯示器的液晶層塗佈決定 pixel 大小，所以是相對單位。

在顯示器上最銳利的顯示設定方式，這算是在顯示器上精度最高的單位。
就算列印出來的相對大小也不會相差太多。
事實上 CSS 要求印表機印出 1px 要在 1/96 inch[1]，也就是有規定好的PPI[5]和DPI。
螢幕內容要列印的單位轉換過程
px 單位，對於圖片這種「以 pixel 控制」的資料，特別好用。

CSS 的 font-size ，是會依照 HTML 結構而繼承給子元素。只要其中一層不是使用 em ，而設定了 px 之類的單位， em 就不一樣了。
2013年之後，CSS 出現了 rem 的單位。使用 rem 直接吃瀏覽器預設字型為基準尺寸。
由於 em 和 ex 是基於瀏覽器設定值，以 Chrome 為例單位就是 px 。

若調整字型，內容容器也要調整寬高，可以考慮使用 em, ex。
定義
由算式的單位，可以知道 vh 和 vw 是用來計算 px 值的。
用javascript算一下。[8]
使用者只看見滿版的特定畫面，不要看見雜亂的其它東西。vh, vw 是你的好朋友
百分比 % ，是很特別的一個單位。
它的相對基準，是百變的，用在不同的 css property，就有不同的，100%。
舉一些好玩的例子
相對單位，都可以轉換成 px
px 可以因為 ppi 轉換成 inch
inch 已經是絕對單位，可以轉換成任何絕對單位。
CSS繼承了排版單位 pt, pc ，印刷單位 cm, inch ，你可以依你的喜好使用單位，即使不用絕對單位，只使用 em 和 px。
使用 px 可以保持美感上一定的精析度與銳利度。但是用在字型使用 em 可讀性會更好。
使用 @media(print) 設定「列印模式」的 CSS，在此，可以使用 pt 這種印刷單位。
字距用 em，行高用 ex !!
原因在於 em 是 「M」寬， ex 是「x」高(x-height)。
2ex ~ 3ex 大約是可以參考的行高設定值。
就像是不會在水平方向使用 vh 單位一樣。
[1]: Unit - w3c
[2]: Point - wiki
[3]: pica - wiki
[4]: DPI - wiki
[5]: PPI - wiki
[6]: X字高 - wiki
[7]: Em (字型排印學) - wiki
[8]: 淺談RWD單位 vh, vw","['CSS 的單位', '參考資料']","['前言', '絕對單位', '相對單位', '單位轉換', '對於字型單位的建議', '建議在什麼方向，用什麼單位']","['相對於顯示設備', '相對於字母', '相對於瀏覽器的可視區', '其它']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191550,SoftwareDevelopment,0,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,8,Day08-如何在SpringBoot中使用Retry&Cache,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1513223767000000000,588,"Retry & Cache 算是常用到的功能
首先 Retry 常會用在網路存取的錯誤重試, 因為網路最容易有不穩 瞬斷 等狀況
或是跑批次排程時, 有時檔案沒傳完或是沒準備好等等錯誤 都可以讓他自動重試,
有時候重新執行就正常了, 少一點處理善後的機會.
我們只需在 build.gradle 依賴增加宣告就可以, 目前 SpringBoot 1.5.9 搭配的 Retry 版本是 1.2.1.RELEASE
主程式要啟動 EnableRetry
準備一個假的 BookService.java 來實驗
說明:
Retryable 就是 Spring Retry 提供的註解
當捕捉到 NoResultException 的時候會自動進行重試
maxAttempts 表示最多執行三次
backoff 表示間隔，當捕捉到錯誤時，停多少秒後再重試
@Recover 則是定義該錯誤的處理,只能寫在同一個 Class 裡面喔,
當重試次數超過 maxAttempts 時候會跳到對應的 Recover 來處理,
如果原本的功能有 return 的話, 記得 Recover 也要有 return 喔
再來寫個啟動時候的處理程序來呼叫 BookService 方便測試用
ApplicationLoader.java
可以看一下測試結果, 確認 Retry 正確運作

build.gradle 依賴增加宣告
增加 caffeine 是因為 Spring 的 Cache 策略有點少, 加上他會有比較多的彈性控制
主程式記得要 @EnableCaching
接下來是我們測試用的程式, 負責回覆目前時間, 如果有被 cache 就不會拿到最新時間
TimeService.java
在我們配置檔 application.yml 內配置 cache 策略
spring.cache.cache-names 是對應到 cacheNames
spring.cache.caffeine.spec 就是 caffeine 提供給我們的策略了
有哪些策略可以配置請參考 javadoc Class CaffeineSpec
目前我是配置 存入後 cache 5 秒
再來我們測試用的啟動程式改一下 ApplicationLoader.java
啟動一下看結果

如果想針對每一個 cache 配置不同的時間可以參考 spring-boot中配置和使用Caffeine Cache
Retry & Cache 在 SpringBoot 中都相當方便使用跟配置
但卻可以大大幫忙我們提升效率跟避免偶發性異常失敗
是不是覺得一定要熟悉一下呢","['Retry', 'Cache']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191612,SoftwareDevelopment,2,30天快樂學習FunctionalProgramming系列,1,認識FunctionalProgramming,阿志,https://ithelp.ithome.com.tw/users/20103386/ironman,1513220964000000000,770,"我看了 去年鐵人賽 Modern Web 組冠軍：30 天精通 RxJS ，心中不禁充滿熱血、感動，在今年 JSDC ，聽了講者 CT 的 The Way to Fantasyland，下定決心今年來整理自己在 Functional Programming 的學習經歷，做個大合集跟大家分享。
現在不管你寫什麼語言，你都會聽到 Functional Programming 這一詞（以下簡稱為 FP）。
大約在三年前，我第一次接觸 FP，那時我的印象是這是一種讓迴圈變簡單的寫法，可讀性較高，也比較好維護。
就像第一次看到 foreach 迴圈，而且可以像 jquery 那樣玩串串樂，有種「這是某種 Syntax 嗎？」的感覺。
不久後我開始接觸 redux ， redux 以完美且優雅的方式管理 react 元件的 state （在 react 中 state 是非同步行為，而且有可能會互相影響，簡單來說，初學者很容易弄得一團糟），我開始探索「 redux 是怎麼辦到的，這是某種設計模式嗎？」，而它帶我來到 FP。
在今年 JSDC 後，我開始接觸 fantasy-land ，開始發現自己寫的程式屬於範疇學的某些規則，思緒開始變得比以往來的清楚。

學習 FP，就像學完 OOP 後，再學 Design Pattern，
感覺像是真正懂了某種抽象化的邏輯，
即使你不寫 FP，我也非常推薦你讀一讀，
就像微波爐，沒有它你可以過得很好，
但用過之後，就離不開它了。
在很久很久以前，
我們發現某些特定的概念：
但物件導向似乎有些不太對勁的地方，尤其我們開始撰寫非同步程式時，痛苦變得愈來愈明顯，因為物件導向隱藏了實作，而它剛好隱藏了某種錯誤的東西，使它們不能被組合。
它隱藏了兩件事：

而 函數式編程 (functional programming) 擷取 範疇論 (Category Theory) 的概念，以數學抽象思考、解決問題，這並不意味著 FP 會取代 OOP ，兩者是不衝突、可以並存的，當你從 FP 的概念獲得某些起發，你可以把它實作在任何地方，因為範疇論就是一種抽象概念。
既然要寫 FP ，那為什麼不是選擇 Haskell 這種專門的語言呢？
我的考量很單純，Haskell 並不是 c-like language，如此文章可能需要花費大部分的篇幅在介紹 Syntax ，這並不是我想寫的，當對 FP 有基本的了解之後，再研究 Syntax 也會比較順利。
若選用 JavaScript，你可以在瀏覽器的 Console 直接測試程式碼，按下 F12 快速簡單方便！
本次鐵人賽也有相當多組的 JavaScript 教學，推薦各位搭配著看，
我特別推薦 重新認識 JavaScript（我也是讀者喔）。
今天大多都是文字概述，沒有程式碼，可能比較難以感同身受。
Hmm...，我保證這會是本系列最多字的文章，明天來講點特別常用到的 JS 語法，然後來寫點程式吧，有什麼問題歡迎留言給我喔。",,"['本篇重點', '前言', '目標', '為什麼寫這個主題？', '編程回憶史', 'JavaScript?', '後記', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191610,自我挑戰組,3,GAME30天系列,4,QuasarFrameworkintro.(1/3,我是一支小小小小鳥,https://ithelp.ithome.com.tw/users/20107379/ironman,1513217213000000000,653,"a framework on the basis of Vuejs 2.x
筆者在接觸VueJs後, 偶有衝動想練習vueJs在實作上的應用, 以便將所得到的經驗用在工作上時, 總會找個新的UI組件庫來玩玩
有人說學framework是浪費時間, 因為前端變化太快, 學的廣不如學得深, 但我的看法是, 每天吃飯,怎麼會知道麵或水餃的好？ 就算是廚師, 也該略懂略懂吃, 才會知道一道好的菜要怎麼煮（一個好的componet要怎麼寫）這就是為什麼我會去接觸framework(Vuejs)中的framework(Quasar)的原因
首先可以參考這篇VueJS社區討論 Best GUI framework for VueJS? I guess that would be Quasar
來比較一下基於Vue 2.x各大家framework星星數
Quasar
/ stars : 4337
本次主角
vux
/ stars : 10438
mobile, 微信風格
SUI-mobile
/ stars : 5260
mobile, 阿里巴巴開發
iview
/ stars : 11464
中國開發
framework7
/ stars : 11339
ios風格
element
/ stars : 20801
UI for PC, 中國開發
Mint UI
/ stars : 8773
ios style, 和 element 同一間公司開發的
PS. mint UI 有雷慎用
bootstrapVue
/ stars : 3018
bootstrap 4
vue-material
/ stars : 4950
material風格
WEEX
/ stars : 6470
應該沒有人不知道這個吧？
實際用過Quasar之後, 筆者認為最大的優勢在於 功能組件非常非常豐富完善, 幾乎是你想要什麼就有什麼, 因為以前覺得越輕量, 倚賴性越低, 只想要純UI就好, 但後來發現組件豐富是好事, 舉個例子, 假如我少了一個chip(標籤)組件, 沒有就只能自己生, 那麼你就得自己畫,畫完研究父層組件是否有slot給你放, 放了之後研究父層,兄弟層組件排版如何相容, 完成之後發現根本和整體風格不符, 顯得很突兀...實在是非常累人的一件事！！
還有就是他擁有自己的一套quasar cli, 裡面相關依賴包都幫你裝好了, 並且裡面各檔案的註解寫到讓我覺得很溫暖的那種～
最後是維護團隊的維護熱度非常重要, 一款被維護團隊放生的框架, 肯定是絕對活不久的（望向T3.js ...
一套代碼完成 RWD website, PWA, App
隨時切換兩種風格, Material & ios
火力展示 Material theme , iOS theme
Quasar Apps 讓你在開發mobile時擁有熱更新, iOS？
爆量組件
(Drawer, Action Sheet, Dialog, Modal, Toast, Tabs, Toolbar, Card, Lists, Toggle, Chips Textbox, Datetime, Range, Rating, Knob, Collapsibles, Popovers, Pull to Refresh, Infinite Scroll, Parallax, Grid, Slider, Stepper, Tree, Chat, Timeline...)
Wide Platform Support
iOS, Android, Windows Phone, Blackberry, Google Chrome, Firefox, IE11/Edge, Safari, Opera.
quasar cli","['前言', 'why Quasar ?', '重點介紹']",,['筆者個人心得：'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191593,自我挑戰組,1,rails學習紀錄系列,2,[Day2]關於PORO（PlainOldRubyObject）,thehappyend,https://ithelp.ithome.com.tw/users/20107708/ironman,1513214979000000000,597,"文章參考來源
Rails 程式碼整理術（進階）
Rails 你好，我是 PORO
14条Rails最佳实践",,"['什麼是PORO ?', 'PORO要放在哪？']",['簡單的沒有任何繼承關係的純Ruby物件'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191535,DevOps,0,30天入門Ansible及Jenkins[2018]系列,3,[Day03]Vagrant基本設定,tsoliangwu0130,https://ithelp.ithome.com.tw/users/20103346/ironman,1513214855000000000,623,"如果在網路上找到了一個適合的 box (e.g. bento/debian-8.6) 想要下載並新增到本機，可以使用 vagrant box add <box_name> <box_url> 並選擇自己需要的版本，舉例來說：
下載完成後，檢查一下目前所有安裝在本機的 Vagrant boxes：
同理，如果要移除不再需要的 box，可以使用 vagrant box remove <box_name>：
透過 vagrant box list 確定一下 box 已經被成功移除：
還記得在上一個章節內我們在初始化 Vagrant 時系統自動產生的 Vagrantfile 嗎？現在把這個檔案打開，你應該會看到以下結果：
簡單來說，Vagrantfile 就是每一台的虛擬機的規格表。雖然乍看之下這個檔案長得有些驚悚，但仔細研究後會發現目前真正有用到的配置其實只有以下短短幾行而已：
而這段程式碼就是告訴 Vagrant 我們想要用 bento/ubuntu-14.04 當作我們這台虛擬機的 box。每次我們啟動或部署 Vagrant 虛擬機時就是依據這一份設置文件來進行配置。其他在註解內的文字是一般我們在開發時常常用到的配置選項，隨著開發需要的不同，我們可以在這個配置文件中客製化我們的開發環境，並分享給團隊其他成員。
首先，我們可以使用 vagrant status 來確認當前 Vagrant 主機的運作狀況：
我們可以清楚發現雖然虛擬機已經成功運行，但主機名稱顯示為 default。這種模糊的名稱在管理主機數量多起來後常常會造成開發者的困擾。為了避免混淆，我們可以先用 vagrant halt 將目前的虛擬機暫停或是使用 vagrant destroy 直接摧毀。接下來，在 Vagrantfile 中加入下列設置來替我們的虛擬機命名：
接著在重新啟動一個新的主機後檢查其狀況：
將虛擬器命名除了方便我們在開發時清楚了解每個虛擬主機的功用，在未來我們也可以直接透過每個主機的別名進行操作。",['Vagrant 基本設定'],,,"['如何管理 Vagrant boxes？', '透過 Vagrantfile 配置測試環境', '如何管理 Vagrant 虛擬機？']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191605,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,11,[PixiJS-Day-11]PIXI.Text與PIXI.TextStyle,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1513214063000000000,594,"官網裡關於文字的範例有兩個：
BASICS - Text
http://pixijs.io/examples/#/basics/text.js

DEMOS - Text
http://pixijs.io/examples/#/demos/text-demo.js

PIXI.Text 繼承自 PIXI.Sprite, 而 PIXI.Sprite 繼承自 PIXI.Container,
所以可以設定 x、y、alpha、也可以點與變形
也可以拿來當容器
在此不建議拿來當容器，
即使有文字內容，但 PIXI.Text 實體若沒放元件，
呼叫 PIXI.Text 實體的 children 時，仍會回傳 []
Demo 裡的 Text 範例看起來很豐富
我直接講幾個我覺得特別的部份：
上色：
可填漸層色，但目前漸層方向似乎只有水平垂直
PIXI.TextStyle 與 PIXI.TEXT_GRADIENT

陰影：
可設定陰影顏色與角度、距離等
遮罩：
與之前範例不同的是，這次使用文字當作遮罩，遮住紅色方塊

由於文字的邊框不是純黑，做為遮罩時可看到些微透明的邊框
文字的陰影用的是純黑，做為遮罩時不會顯示

將陰影改成白色時，做為遮罩時會顯示
遮罩的微妙行為可參考前文： 遮罩
Web Fonts、中文字：
官方範例：使用 Google Fonts Api 讀取字型使用

我在頁面上的 CSS 匯入思源黑體，在 PIXI.TextStyle 裡使用 'Noto Sans TC' 字體，並指定不同 font-weight

PIXI.Text 的使用時機
由於 PixiJS 不容易使用 HTML Dom 架構的方式處錯，控制文字也沒有 CSS 方便直覺．
如果考慮SEO優化、文字能讓使用者複製時，用HTML 的文字蓋在 PixiJS 上也許比較適合
使用 PixiJS 開發遊戲時，文字做在遊戲裡 (例如遊戲分數)
有儲存圖片功能 (例如遊戲內拍照)
就適合將文字做在 PixiJS 裡
我在做合成圖片上傳的功能時有使用 PIXI.Text 來做動態字
在後端測試時，送出的圖片包含了生成圖片的時間
除錯上很方便
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191606,SoftwareDevelopment,0,認識scala系列,11,Scaladay11(Loop&break&continue),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1513213116000000000,586,"while 和 do...while 用法和 java 差不多，條件都是放 boolean 值即可 :
scala 沒有提供 break 及 continue 這兩個關鍵字使用，所以需使用其他寫法來替代．
需要 import scala.util.control.Breaks 套件的 breakable 及 break :
使用 breakable 區塊替代 break，下面例子 i == 3 就會 break :
使用 breakable 區塊替代 continue，下面例子 i == 3 就會 continue 不 println :
所以利用 breakable 區塊的位置可以達到 break 及 continue 的效果．
下面例子是使用 scala.util.control.Breaks 物件，搭配混合使用，偶數的話 continue , i == 7 時就 break :",,,"['while & do...while', 'scala no break & no continue', '總結']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191607,ModernWeb,0,重新學習網頁設計系列,11,DAY11.JavaScriptMapandSet,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1513213044000000000,617,"Map與Set是es6提供兩種新的數據結構
這個單元將討論他們與Array, Object的差異
以及我們可以在什麼情況使用它們。
Map跟物件非常相近，當我們需要鍵值時常會用到物件
但物件有幾個缺點
new Map([iterable])
Iterable 是一個陣列或其他iterable物件，該物件的元素皆是鍵/值成對的(例如兩個元素的陣列)
成對的鍵/值會被新增到新的Map。null會被作為undefined
Set類似Array, 但其中元素的值都會是唯一不重複的
Set甚至可以搭配Array使用，例如將Array的值unique
new Set([iterable])
Set接受一個可迭代的參數或是null或是不給予
且建構式將回傳一個Set物件實例
前面我們提到，Set的值將會唯一，但給予的參數不會自轉型別
因此數字5與字串5將被視為不同的兩個值。
還有另外兩個類別稱為WeakMap與WeakSet
他們的用途沒那麼的廣泛，有興趣的朋友請自行查閱相關文件。
資料來源: JavaScript學習手冊, MDN",['DAY 11. JavaScript Map and Set'],"['Map', 'Set']","['Map 建構式', 'Set 建構式']",['操作範例'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191568,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,11,1-10.監控工具之一:ZabbixMaps自製儀錶板,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1513211650000000000,621,"Zabbix 的儀錶板其實不是很好看，大部分的人都用Grafana包裝起來，但有一個功能很實用，就是Maps，可以做樹狀圖，圖片還可以自行上傳修改，Grafana的Diagram做起來就不是這麼好看了。
Administration => General 右上角下拉選單 => Images 有Icon 跟 Background可選擇上傳

Monitoring => Maps => Create map
Background

點進剛建好的圖右上角有Edit map，進到修改模式，左上Icon選 ADD 可以增加host
點剛新增的host
Label 裡面可以填入巨集
Trigger可以依選定的狀態變換不同的圖案，例如出現問題變成紅色

update後回去看結果如下 (要離開edit模式)

將兩個host框起來點選link可以新增連線

新增加Links的選項，進去後一樣可在Label輸入巨集和設定這條線的Trigger

利用以上方式可以將power、網路孔的狀態trigger加上(Server硬體狀態用IPMI可以取到)，圖形化顯示，剩下的就是要找到好看的美工圖，可惜gif動圖失敗，不知道是哪邊不支援
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191601,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,11,11.應用：自用笑話機器人,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513211133000000000,637,"除了政府開發資料平台可以讓我們進行介接，強化機器人的功能，仔細在 Google 搜尋，也有一些免費 WebAPI 可以使用。這一篇我們將嘗試介接英文笑話，讓機器人多一點美式幽默(?)。
Step 1. 前往 https://icanhazdadjoke.com/api ，可以看見使用範例，似乎只需要在 header 加上 Accept: application/json、設定 Get 與設定 URL為　https://icanhazdadjoke.com/ 即可。

Step 2. 我們透過 postman 進行測試，相當順利

Step 1. 因為回傳的內容較簡單，只有三個參數，所以直接增加程式碼：
Step 2. 修改RootDialog.cs 程式如下：
Step 3. 啟動專案

Step 4.開啟機器人模擬器進行測試，完成！

https://github.com/matsurigoto/BotFrameworkExample04
咦? 這篇怎麼這麼短?   ","['前言', '使用 icanhazdadjoke 服務', '程式', '範例']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191600,ModernWeb,6,前端工程師養成手冊系列,11,如何設計吸引人的前端履歷,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1513210604000000000,1108,"履歷是你與職場接軌的重要門票，許多資深 HR (人資部門) 也曾經說過，他們看履歷只要不到十秒就決定你的履歷是否有參考的價值。就算你空有實力，但不了解該如何包裝自己，那也是枉然。那麼到底該如何寫一張好履歷呢？就讓我一一為你解說。
一個履歷上面自然要留下你的個人資訊，如果你擔心個資外流，也可以不要留手機，但至少要留 email 方便公司向你聯繫，我也曾經遇到學生啥都沒寫，導致公司完全不曉得該如何聯繫到對方。
雖然現在 104、518 的電子履歷已經有既定格式，但我還是建議你必須要有一個一頁式履歷，除非你的經歷很多，才會需要兩頁 A4。用意在於有些技術主管、前端 Leader 主動到各大技術社群找人，同時也會留下他們自己的 mail 或聯繫方式。當你主動投履歷到 mail 時，就可以用一頁式履歷來投，對方也不需要登入服務就能觀看你的履歷。
另外請注意一點，你的檔案格式絕對要是 PDF 格式，絕對不要用 office 格式例如 word、excel，有些技術開發者沒在碰那些東西的，他們也沒那個美國時間去用線上服務轉檔，而 PDF 能夠直接就網頁瀏覽器打開，同時也能跨許多作業系統 (Mac、Win、Linux)，相對來說友善多了。台灣也有 CakeResume 設計履歷服務，也提供給你參考。
這是很現實的問題，有些朋友都說他們前端技術都有達到初級門檻，我稍微問了下程度也都蠻 ok ，但因為沒有自己的上線作品，導致一直無法找到屬意的職缺，我只能說真的活該。我們換個立場來思考，如果你是老闆，你遇到一個面試者說自己能力 ok，但是都沒有任何作品，你會想冒險讓他進入到你公司嗎？你不會覺得對方是不是在騙人呢？要記住公司如果看不到你的價值，一切都是在做白工。
作品，是讓你有機會將你所會的東西淋漓盡致地展現出來，就算一開始做得成品都很差怎辦？那也沒關係啊，你至少知道自己的問題在哪裡，再繼續優化到你自己認可的程度，許多事情都是萬事起頭難，跨過去後才有辦法進到下一步。
不論你是任何時期在找職缺，你想要拿到你屬意的薪水與工作挑戰，先思考一下自己有沒有一個能為你技術背書的代表作品，如果有，自己也能自信地去投職缺，公司在看你履歷時也能初步瞭解你的程度，面試溝通上也能夠更加順暢。
所以在找工作前，先從作品開始準備起吧。
像是我在幫朋友看前端履歷時，他們就很空泛地寫自己會 HTML、CSS、JavaScript，但是前端工程師都會這些東西啊，但是你到底透過它們實作做了哪些項目，以及比較擅長部分是什麼當然也要寫清楚，這樣面試官才可以評估你跟其他面試者的差異在哪裡。
舉兩個例子：
相信從好的履歷就可看出來，你深入的程度到哪，假使是技術面較複雜的部分，我會強烈建議你要在技能旁邊加上個 連結，當 HR 認為你 ok，進一步轉給 技術主管看時，他也可以從作品連結知道你的技術程度是否有達到他預期。
如果你已經有工作經驗，不要單純只描述你的年資，而是要敘述你在前公司負責哪些項目，而且這也是顯示你的價值的好機會，讓潛在公司在還沒找你面試時，就已經能預期你能為他們公司帶來多少產能，當然寫得話也有一些技巧，同樣舉個例子。
XXX公司 (2016/3~2017/6)
如果是你的老闆，你會希望選哪個面試者呢？答案應該很明顯了，就算 HR 不懂技術，但至少看得懂能夠被量化的數字，以及專案應用到的技術面，你的價值才會被彰顯出來，並被公司能夠產生聯想，讓你加入公司後，能夠注入一股源源不絕的開發能量。
假使你是剛初入社會的新鮮人在寫第一份履歷也是一樣，你的作品也必須詳細敘述到你接了哪幾隻 API，投入到哪些技術，這樣才容易會有面試機會。
一般從上到下的排序權重如下：
自傳字不用多，能夠描述你投入前端的近況，以及自己期望的未來發展即可。除了 CakeResume 履歷外，我尤其推薦 Toptal 的前端人才庫，去觀察他們是如何寫出自己的個人品牌價值，上頭所列到的重點都有列到。你甚至可以觀察幾個頂尖人才，評估自己預期要花多少時間追上對方，當做一個好目標逐步投入技術。
如果你是正在找第一份工作的前端，也可參考我這連結的第九關，裡頭有一些履歷範例。
最後，分享一個檢核列表，在準備丟履歷前也請注意是否有犯以下錯誤",,"['留下個人資訊，尤其是聯繫方式', '設計專屬於自己的一頁式履歷', '這是一個講求實力的世界，沒作品 = 沒機會', '語言不是寫越多越好，重點在於讓面試官了解你的技術深度', '描述你在前幾份公司負責的項目', '履歷先後順序', '魔鬼藏在細節裡']","['不好的履歷', '好的履歷', '不好的描述方式', '好的描述方式']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191599,ModernWeb,0,JavaScript基礎二三事系列,11,Day11　函式的預設值,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1513210581000000000,609,"今天筆記是昨天內容的衍生
開發者用JS程式呼叫函式時，傳參數進去處理是很常見的方式，如果呼叫時沒有帶入參數，會發生什麼事呢?
來看看以下程式碼：
結果是：

發生了什麼事？
我們沒有帶值進去，JS在呼叫函式時也沒報錯，因為傳入的值在呼叫階段被設定進記憶體，但我們什麼都沒有傳，所以JS把這個空的東西，在記憶體被設定成undefined並傳入。
當undefined與字串相加時被轉型成字串'undefined'，自然印出'Hello undefined'囉！
但是這並不符合開發者預期的狀況，有沒有辦法讓我們呼叫函式，在未帶入值的時後，函式內有個預設值存在嗎？
這個時候可以使用昨天筆記的方法。
利用了先前提到，||運算子與型別轉換的特性，在JS自動型轉時，undefined會被轉成false，而有值的東西會被轉為true，||運算子可以想成中文「或」，當||運算子左邊的東西成立時(被轉型為true)，左相依性的||運算子就不會去處理右邊的東西(因為已經找到true了)，若||左邊是false，才去檢查右邊是不是true。
例如：

拉回greet這個函式，利用此一特性，若是呼叫函式沒帶值，此時帶入的是undefined
變成
當undefined與有值(且非null、''、false)的東西比就會是
||運算子會選擇true
結果就是：

若我們呼叫函式時有帶值
此時函式內的運作變成這樣
||運算子先看左邊的東西，左邊一判斷為true就回傳(不往右邊看)，因此會賦值的是'Tony'，而不是'<Your name here>'。

也就是說用這種方法，開發者可以在不影響結果的狀況，讓JS函式內有有預設值，不管有沒有帶值進去，都不會被undefined影響呼叫函式的結果。
　
　
　
　
小結
與昨天筆記內容相似，使用||與JS自動轉換型別的特性，可以做出預設值的效果，這種方式通常會在JS函式庫、別人寫好的Plugin看見，有時也挺有妙用。
鐵人賽一轉眼就進入第11天，剛好課程第三章節也在這邊告一段落，明天進入第四章節物件的部分，這部分也是影片最多、最重要的，加油加油。
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分3-28",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191598,SoftwareDevelopment,0,Kotlin30天，通過每天一個小demo學習Android開發系列,11,Kotlin開發第11天Alarm(DatePickerDialog+AlertDialog),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1513210576000000000,573,"
一個活動日期確認的應用。
涉及到的元素
我們通過一個 cal 變量來記錄使用者設定的時間，一開始會先取得當前時間。
當使用者點下輸入框的時候就跳出 TimePickerDialog，其中的時間取自我們的 cal 。
當使用者選好時間以後，會執行我們提供的 timeSetListener：
先改變我們的 cal 的時間（其中 .HOUR_OF_DAY 是 24小時制，而 .HOUR 是 12小時制度）。
然後改變 timeEditText 顯示的時間。
可以通過類似 iOS 的 DateFormatter 的 SimpleDateFormat 來指定時間格式。

通過 AlertDialog.Builder() 來建立 Dialog 的畫面。","['TimePickerDialog', '參考']","['SimpleDateFormat', 'AlertDialog']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191505,SoftwareDevelopment,2,爬蟲始終來自於墮性系列,14,PTT表特版API,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1513210539000000000,1167,"有匿名者指定說他也會逛 PTT，最但最常逛表特版，所以詢問看看是否能夠自幹表特版 api。我想這種需求看起來挺強烈的，這麼造福廣大男性朋友的 api 肯定是需要的，那我們這次的目標就來抓取 ptt 表特版最新的圖片並將他製作成 api 吧！
話說我平常真的不太逛表特版，所以對裡面的東西並不是太熟悉...但就觀察的結果，每篇文章基本上都會貼上圖片的網址，大概 99% 使用的 imgur 這個圖床，所以這次主題我們就專注在 imgur 的圖片上吧。

進入表特版網址 https://www.ptt.cc/bbs/Beauty/index.html，我們可以看到分頁，然後每個分頁最多是 20 篇文章。觀察一下上頁的連結是 /bbs/Beauty/index2339.html，猜測目前這一頁應該是 /bbs/Beauty/index2340.html，點擊上頁可以看到更多文章，同時也確認剛剛的首頁確實是 /bbs/Beauty/index2340.html，那也就是說我可以抓到 2340 個分頁。

若點擊文章網址，就會進入文章頁面，裡面大部分是一堆 imgur 網址的圖片，若我們能把每一篇文章的圖片位置都抓下來，那麼就能製作出我們的 api 了。
不過在進入研究之前，我們必須先考慮一個問題，若我們真的抓了 2340 個分頁，這麼一來肯定會抓很久，二來絕對會造成伺服器的負擔，這並不是我們的本意，我們的目標只是抓取最新的圖片，但最新如何定義呢？那我們姑且就先定義為最後三個分頁。
確認我們的目標是抓前三個分頁以後的所有文章內 imgur 的連結後，我們可以把步驟分成三個動作：

從 dom 的結構看上頁大概就能推算我們要抓取這三個分頁的 url，接著我們來試著 select 頁面上的文章列表。

接著來 request 一下看看是否能夠確定抓取分頁，然後再 request 測試一下文章頁面，看起來單純的 get request 應該就沒問題了。

最後我們來測試使用 regex 來抓取 imgur 的連結，在這個部分有注意到 imgur 的連結格式有兩種，但可以歸納只需抓取類似 imgur.com/APpvLiF 這種格式就可以了，後續手動補上完整網址就好。
首先我們先來抓前三個分頁，基本上就是 index.html，然後去看上頁的 url，然後上上頁就是將這個 url 的數字部分再減一，也就是說，我們只需要抓上頁的 url 就能清楚整個數列，最後再把這三個頁面的數字部分傳給 callback。
接著我們來抓取每個分頁的文章列表，基本上沒有什麼難度，單純 select，然後把我們抓到的 posts 丟給 callback。
最後我們來抓取每篇文章內的圖片連結，因為觀察到所有的 imgur 圖片的 ID 都是 7個字串，那麼我們使用 regex 來 match /imgur.com\/[0-9a-zA-Z]{7}/g 就行了。不過因為 ptt 網頁會自動加載圖片，所以抓取時會抓到重複的 image url，所以我們必須做 array uniq，可以使用 es6 的語法 [ ...new Set(images) ] 就能簡潔的處理掉重複的 array content。
我們先 call getTopPages function 抓取三個分頁，然後再使用 async.map 來跑 getPosts function，去抓取這三個分頁的所有文章列表。抓完文章列表後，我們再使用 async.map 來跑 getImages function，去抓取每篇文章內的 images url，最後再將 images url 補完前綴和後綴，這樣就能抓到最新的所有圖片列表了。

接下來我們用 express 來做 web service，先暫時聽 3000 port，未來 deploy 再改 80，經過測試沒問題就大功告成了。
在這個主題，我們其實有兩個假設性的設定，第一個是我們定義了最新圖片為前三個分頁，若更近一步的開發，其實是可以在 api  的參數收 page number，交由使用者來決定他要抓幾個分頁，但這個就必須考量到爬蟲的速度，和 ptt web server 的防堵機制，總不可能放任使用者去抓所有的分頁，不然可是有很大的機會會被直接鎖 IP 的。
另外一個是我們只抓 imgur 的圖片連結，但現實上是有可能出現其他種類的圖片網址的，關於這點，其實我們無法把所有狀況含括，可以有幾種想法，例如我們去判斷副檔名，但這也不見得是百分之百，或者我們去讀取 ptt web server 所附帶的圖片解析器，這或許比較靠譜，不過這就另外的課題了。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍伸應用']",,"['取得每個分頁文章列表', '抓取分頁及文章頁面', '測試文章內 imgur 連結', 'getTopPages function', 'getPosts function', 'getImages function', '組合流程', 'Express 做 api service', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191429,ModernWeb,1,三十哩路，我的前端學習路程系列,11,Day11::我所知道的CSS重構第二章,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1513210529000000000,624,"串接(cascade) 是瀏覽器用來決定樣式如何套用到元素上的方法。
有許多樣式可以套用到同一個元素上，當樣式沒有依照預期的方法被套用時，理解串接的運作方式就顯得格外重要
樣式的套用方法是依據選擇器的特徵與出現的順序來套用的。
特定度是所使用的CSS選擇器能精準地將元素識別出來的一種估測。
而特定度是可以被計算出來的
若將特定度帶入數字(a,b,c,d)
特定度要怎麼計算呢？
以下面這行CSS為例子
透過上述的演算法，我們可以算出這個選擇器的特定度是(0,1,1,3)
比較選擇器的特定度時，離左邊最遠的最大數字具有最高的特定度，若第二個數值相等則比較下一個數字。
比方說(1,0,0,0)比(0,1,1,3)有更高的特定度，同樣的(0,2,1,3)比(0,1,1,3)有更高的特定度。
規則集順序(ruleset order)代表一份CSS規則集在樣式表中的位置。
當內含具有相同特定度選取器的第二個宣告區塊都被用來指定一個元素的樣式時，在樣式表中較晚出現的宣告區塊會具有較高的優先權。
(後進先出的概念)
除非元素有透過style屬性套用行內樣式，否則樣式如何套用到元素上視特定度與規則集順序而定。
確保外部樣式的特定度比其他樣式(包括以style屬性套用的行內樣式)都還要來得高的唯一方法是在其宣告後加上!important。
若在同一個元素上有好幾個宣告區塊都帶有!important，則瀏覽器會使用最後一個出現的宣告區塊。
要注意的是!important不能用在帶有style屬性的樣式上(即<a href=""/"" style=""color: #1200FF !important"">Link</a>)
一開始認識權重的時候以為權重只有三種區分方式
是寫在裡面的、寫在標籤裡面的跟寫在CSS檔案裡面的
沒想到除了寫的位置不同，選擇器也會影響到權重",,,"['什麼是串接？', '規則集順序', '行內CSS與特定度', '以!important 宣告複寫串接', '心得']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191591,自我挑戰組,0,2017挨踢人生大事紀系列,11,參賽十日有感~,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513210006000000000,644,"牛哥我，在iT邦算不上高手。
iT邦幫忙的眾多文章裡，我總是特別關注［技術問答］這個欄目。
一週下來眾邦友一題又一題的發文集合裡，偶而有很糟糕的言不及義的問答，
但也偶而會出現難得一見的大師級好文，內容直指要義，
或是發人省思，令人不禁見賢而想思齊。
在問答的過程裡，太艱深的技術文，我發不了~
而淺顯易得的技術發文嘛？！(通常Google就找得到！)
有時想回答，又覺得有點多此一舉？！
平常大部份的工作時間，因為淹沒在一連串的挨踢事件裡。
根本也沒太多空檔上iT邦插科打諢~
只是偶而手癢，會寫寫貼貼點綴一下iT邦這個園地。
感謝有鐵人賽，衝著鐵人成就那塊奬牌！
激發出牛哥我骨子裡那牛一般的靭性，無論如何一定得走到終點。
加油~十天了耶。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191580,自我挑戰組,0,蚵蚵攻城記系列,3,[Day03]我所認識的HTMLtag,azer19890427,https://ithelp.ithome.com.tw/users/20107340/ironman,1513209497000000000,609,"HTML感覺既熟悉又對他陌生
印象中會出現在瀏覽器的網址欄的最後四個字
在我還沒開始學HTML之前
我對做一個網頁的方法的認知
跟做報告用的PPT一樣
放上想要的圖片
超連結連一連 就能放到網路上去使用啦!!!!
開始學之後才發現原來非常的深奧
而且需要些邏輯才能達成
這對邏輯差的我很痛苦
我先到W3School HTML5 Tutorial 的每一個章節每一個練習題練習
最早遇到會是長這樣的東西
用"" <> "" 刮起來的是 tag name，形成一個 tag。
每個 tag 通常都有一個和它長得很像的 tag長這樣 </tag name>  ，
叫做closing tag，*(總覺得它跟RNA的stop codon很像)*
這兩個 tag包起來的地方形成一個element。
<!DOCTYPE html> : 這是用來宣告這個文件是HTML
<html> : HTML的 root element
<head> : 一般使用者看不到這邊，它包含了一些關於這份文件的訊息，像是可以引用CSS或是JavaScript。
<title> : 文件的標題
會有這樣的結果

瀏覽器分頁的地方就出現我打的內容呢!!!
<body> : 從這裡開始就是一般使用者可以看到的內容了
<h1> : 標題的 tag，從<h1>一直到<h6> 並且逐漸變小。

<p> : 內文的 tag

HTML的 tag在W3School HTML tag list上可以查詢
上面介紹了一些較基本的 tags，接著我想記錄一下我常用到的一些 tags。
<a> : 超連結，通常都會伴隨著一個重要的 屬性(attribute) href，並且加上文字寫成這樣
<a href=""https://www.w3schools.com/tags/tag_a.asp"">HTML <a> Tag</a>
<ul> 和 <ol> : 無序列的 list和有序列的list，在tag 中用<li> 將項目列出來

<style> 可以在這之中寫 CSS，但是如果 CSS另外一個檔案寫的，
需要用 <link> 這個tag 。
<script> 可以把JavaScript寫在這個 element之中，如果 JavaScript是 external，
也可以直接用src的attribute將檔案引用進來。
<div> 這個 tag對我來說有點玄，它有點像一個包裝，可以把一個部份的 elements包起來，形成一個區塊。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191597,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,9,【Day9】解除依賴,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1513209372000000000,579,"前面有稍微練習一下如何進行Unit Test。我們用NUnit Test來進行簡單的測試，其中包含了檢查對象的返回值測試以及系統狀態測試。然而實際上往往會更為複雜，有時候測試的對象會依賴另一個我們無法控制的對象（可能是系統時間、別的程式給的值等等），這個時候測試會變得非常難以掌控。
當測試的時候越簡單越好，因這樣才能鎖定問題發生的位置與原因。試想如果把很多方法全部包在一起，或是把很多外部變數放在我們的測試方法內，當這個測試項目發生錯誤的時候，我們很難快速的的鎖定原因在哪裡。為了減少對外部的依賴性，所以產生出三個播除依賴的方法，也就是三種模擬對象的方式：stub、mock、fake。
Stub（存根）
當需要從外部取得資料，但是卻又不想直接從外部取得，因為這樣會依賴外面的功能時，我們可以製作一些「虛假的資料」，這種作法就是「stub」。其實根我們前幾天練習的就是屬於這個部分，我們並沒有真的取得一個檔案，而是「假裝」有這個檔名。
例如：我們想要從資料庫取得客戶資料，但由於是在測試，我們並不想要真的從資料庫取得，所以我們就製造了一些假資料來提供測試。讓我們可以專心在功能上，而不用費心連線至資料庫，還要檢查資料庫是否連線正常。
Mock（模擬對象）
這個作法很類似stub（網路上也有許多爭議以及分析文章），這邊就以本書為主。
Mock是指系統中的偽造對象。提供目標對象進行測試。也就是說stub是測試某個功能，但是mock卻是模擬對象，卻會被測試。換言之，stub只有true或是false，不會發生失敗，但是mock，卻會發生失敗。
斷言對象：
所以主要的對象通常是void，也就是沒有回傳值和改變系統狀態。例如要檢查「記錄log」、「寄信功能」，不但沒有回傳值，也沒有系統狀態的改變，只有void的功能。可以說mock時常常比stub還要更複雜。
Fake（假對象）
而fake則是把外在的環境，縮小模擬成一個object，等同於模擬出一個較為完整的測試環境，也就是模擬出外在環境以及各式功能，有時會掉用到外部資料
簡單來說，就是範圍不太一樣，stub主要是用在程式參數變化，mock則是當要測試非回傳值或系統狀態修改時使用。fake當要進行較大規模的時候進行測試，可以減少更多的相依性。
接下來幾天，將會討論這幾個假物件功能，用於隔離或是更容易的進行Unit Test",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191596,自我挑戰組,0,"Let's""Go""系列",8,Day08　Type,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1513209159000000000,566,"今天要談的是型別，透過以下我們可以宣告一個新的型別name，以及一樣的底層型別；
透過這個做法，可以將具有一樣底層型別的不同新型別加以區隔",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191553,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,9,09.物件導向設計原則—SOLID,依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1513208998000000000,647,"在前文物件導向的特性中，提到物件導向設計本身具有封裝、繼承、多型、抽象這些特性。
知道物件導向的特性，就可以寫出具備閱讀性、維謢性、擴充性的程式碼？答案是肯定的，但卻非常的困難。之所以困難，常見的因素列表如下。
當然還有許多因素，是筆者沒有想到或是沒有列出來的。
使用物件導向開發軟體的過程中，如果能配上Robert C. Martin提出的物件導向設計的五個原則(SOLID)：單一職責、開放封閉、里氏替換、接口隔離以及依賴反轉。這樣會更容易開發出易維護與擴展的系統。
每個物件，不管是類別、函數，負責的功能，都應該只做一件事。
對函數而言，一個函數內，同時做了兩件以上的事情。當發生錯誤時，很難快速定位錯誤的原因。另外，也容易間接導至程式碼的可閱讀性降低。
藉由增加新的程式碼來擴充系統的功能，而不是藉由修改原本已經存在的程式碼來擴充系統的功能。
當需求有異動時，要如何在不變動現在正常運行的程式碼，藉由繼承、相依性注入等方式，增加新的程式碼，以實作新的需求。
假若為了新需求，去修改了原本的程式中的某一個函數，可能會造成其他呼叫使用該函數的的功能，出現非預期的錯誤。
Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.
簡單來說，當實作繼承了 interface 或 base-class的 sub-class，那麼在程式中，只要出現該 interface 或 base-class 的部份，都可以用 sub-class 替換。
針對不同需求的用戶，開放其對應需求的介面，提拱使用。可避免不相關的需求介面異動，造成被強迫一同面對異動的情況。
A. High-level modules should not depend on low-level modules. Both should depend on abstractions.
B. Abstractions should not depend on details. Details should depend on abstractions.
當 A 模組在內部使用 B 模組的情況下，我們稱 A 為高階模組，B 為低階模組。高階模組不應該依賴於低階模組，兩者都該依賴抽象介面。
在後文從被動變主動—依賴反轉，針對這個主題，特別的提出來討論。
不知道各位看倌有沒有發現，SOLID 的設計原則，都是提供軟體更大的需求修改的空間。
要特別提醒的是，符合 SOLID 的開發方式，雖然較易維護與擴展。但就實務面而言，有時，必需考量使用 SOLID 額外帶來的開發時間，是否是開發期程所能承受的。",,"['1. 物件導向設計的五原則 SOLID', '2. 後言', '3. 推薦']","['1.1 單一職責原則(Single responsibility principle, SRP)', '1.2 開放封閉原則(Open-Close principle, OCP)', '1.3 里氏替換原則(Liskov substitution principle, LSP)', '1.4 接口隔離原則(Interface segregation principle, ISP)', '1.5 依賴反轉原則(Dependency inversion principle, DIP)']","['3.1 文章', '3.2 本屆鐵人賽的文章']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191592,自我挑戰組,0,迷路還是繼續往前走的菜鳥工程師日常系列,9,[Day09]試用期三個月的考核,overflow,https://ithelp.ithome.com.tw/users/20107577/ironman,1513208841000000000,576,"今天本來真的想放棄寫鐵人賽了 
想說教學也不怎麼認真跟實用，技術教學文章又需要很多時間準備，加上天分不好的我XD，會花超久時間，所以今天還是努力拚拚看寫一點文章，就來簡單分享一下我進入公司前三個月後的總考核
其實我是很內向跟被動的人，又會因為環境的關係碩造不同的我，環境給我什麼感覺，我就會反射出環境的氛圍，我待的第一家公司就很像「停屍間」，每個人上班都獨自面對自己的螢幕到下班，可以完全不跟其他人講到話或互動，甚至可以一整天都不透過嘴巴說話，完全在Skype交談，那時我就想，怎麼跟我理想中的辦公室生活不太一樣，再加上第一份工作壓力很大，怕自己不適應或是程度太差被炒魷魚，所以整個都在負能量的情況下度過這三個月。
而我在學習的情況吸收很慢，理解能力也很差，往往自己在做什麼都不知道，所以前三個月說真的我完全都不知道自己在幹嘛，當然主管對我的考核其實不太好，他也覺得我的進度非常緩慢，不到他理想中的對象，但又覺得我本質跟個性不至於太差，所以他沒有因為這樣就炒魷魚，而也是一直督促我要具備什麼特質，應該要做什麼事等等......，所以很早就被主管的上司約談了問說「為什麼？主管給你的評價不高，是遇到什麼困難或是狀況嗎？」其實我當下很受挫，覺得我已經糟糕到需要被約談的地步了，情況更直直下，但是主管的上司還是給我鼓勵要我多加油，所以依樣讓我繼續持續下去，其實我大概第二三個月就一直思考著「這裡是不是不適合我？」還是再給自己一點時間努力看看？所以就這樣撐著撐著也半年過去了。
有時候提離職對我這種個性的人來說，很像很困難一樣，說不出口！甚至還會想說如果自己被炒魷魚那該有多好，已經負面到這樣了XD，再加上面試的時候主管提到一句「訓練新人也是要成本的，也不知道他是不是能持久待在公司」也許大家都覺得何必管那麼多，但我這種個性總會想說吃果子拜樹頭，在我什麼都不會的時候是主管一步一步帶領我進入狀況，總會想說至少需要完成什麼目標與展望，在離職，不會很像學完該學的東西就走人了(利用完就丟掉的概念)，所以我和這個理由也僵持很久，我的朋友們也都被我煩到爆炸，我現在的領悟是「真的不喜歡，就不要強迫自己了！」
也因為做著做著，漸漸發現自己的目標與方向和現在職位不同，所以我便開始思考我想要的是什麼？那時候才漸漸分清楚前端後端是什麼，原來我想做的東西叫做前端，我比較喜歡看的到的東西，所以就開始努里補強前端所需要具備的條件，下班後我雖然很無力，但我還是強迫自己要趕快補足前端應具備的條件，並給自己一個目標與時間點，就要轉換跑道離開，不要強迫自己待在自己不喜歡的地方，說真的會很痛苦！所以當你不能把上班當為生活的一部分，每天就像是機器人一樣，上班下班上班下班就這樣過了自己的人生，我領悟到這不是我想要的生活！我要改變現況！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191579,SoftwareDevelopment,4,來做個網路瀏覽器吧！Let'sbuildawebbrowser!系列,3,深入探討瀏覽器引擎如何進行解析,微中子,https://ithelp.ithome.com.tw/users/20103745/ironman,1513206510000000000,643,"暖身完畢！本文開始進入本系列重點。
接下來要深入探討渲染引擎的運作原理以及實作方式。
最常聽到的莫過於 Mozilla 的 Gecko，最主要被用在 Firefox 上，也是第一款被設計為可作為單一模組存在的瀏覽器引擎。另外就是 WebKit，起初用在 Linux 平台，後來經由 Apple 公司進行修改後，Windows 和 macOS 也支援，主要用在 Chrome 和 Safari。這兩款都是開源專案。
關於兩者的工作流程，可以參考 how browser work 這篇文章的示意圖。
Webkit 長這樣：

Gecko 長這樣：

可以看到雖然兩者採用的術語不同，但概念其實是很像的。當然，更深入的實作方式就完全不同了，各種小細節造就一個引擎的厲害程度，也是各家比拼的重點！
在上面兩張圖中，我們都可以看到 HTML Parser，功用就是把 HTML 的原始碼解析成 DOM tree。HTML 在解析的時候不能用一般的解析方式，因為 HTML 本身可以容錯，例如說原本應該是 <div></div>，但如果我們不小心漏掉 </div>，依舊可以看到正確地顯示。雖然說容錯對於使用者來說很方便，但也就使得解析的方式比較特別了。事實上，W3C 有完整定義如何去做這個步驟，通常我們在開發引擎核心時，就是直接照著 SPEC 來做。
同理， CSS Parser，功用就是把 CSS 的原始碼解析成 CSS tree。而一樣 W3C 也定義好規範了。CSS 因為不像 HTML 有上下關係（有<div>就會有</div>），所以可以使用一般常見解析的解析方式。例如：
WebKit 使用了兩種非常有名的解析器生成器：用於創建詞法分析器的 Flex 以及用於創建解析器的 Bison（您也可能遇到 Lex和 Yacc這樣的別名）。Flex 的輸入是包含標記的正則表達式定義的檔案。Bison 的輸入是採用 BNF 格式的語言語法規則。
關於瀏覽器引擎的處理方式，how browser work 這篇經典文章講的太清楚了，我認為這篇已經非常精簡也很清楚，因此不打算重複闡述原理。如果大家在閱讀這篇上有遇到問題，歡迎和我討論！
當我們在設計一個瀏覽器的時候，寫處理 HTML 和 CSS 的部分是相對容易的（這邊不探討 JS，那又是另一個引擎了），因為 W3C 都有明確規範，例如我們常聽到的 HTML5、CSS3，因為要讓各家品牌做出來的東西可以呈現一樣，才不會發生同一份原始碼，在 Chrome 上跟在 Firefox 上差非常多，這樣開發者大概會瘋掉吧！所以 W3C 才都有完整的定義，甚至除了規則以外，連實作的細項步驟都寫得一清二楚。閒來無事的話可以點開看看 https://html.spec.whatwg.org 。
例如擷取 Servo 專案 components/script/dom/document.rs 的其中一段，可以看到這目前這個函式，就是根據註解起來的 SPEC 文件中的 current-document-readiness 來寫的。
關於作者
劉安齊，軟體工程師，熱愛寫程式，更喜歡推廣程式讓更多人學會",,"['目前普及的瀏覽器引擎', '解析', '開發']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191529,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,5,[V]用CodeIgniter的30天-新聞模組實作(上),qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1513206019000000000,589,"現在我們已經知道靜態頁面的作法，但是如果只用到靜態頁面
根本不需要用到 CodeIgniter
所以我們就來做一下會操作到資料庫的範例吧
建立
application/models/News_model.php
並加入
說明等之後好了，先做
下一篇再來建立資料庫
簡單來說我們剛剛建立了一個新的模型，繼承自 CI_Model
並載入了資料庫程式庫。
這使得我們可以使用 $this->db 這個物件來存取資料庫類別。
使用 CodeIgniter 內建的資料庫抽象層 — Query Builder — 來做這件事
並且這邊是一個取得資料庫內所有文章的方法
使用內建的 Query Builder 方法組裝 SQL 語句
這段程式碼讓你可以進行兩種不同的查詢
你可以取得所有的新聞資料，也可以根據新聞的 id 欄位來查詢
而且我們的 $id 變數在使用前沒有被消毒
因為內建的 Query Builder 會幫你做這件事
槌子 (model) 建好了，接下來是指定誰什麼時候去使用他
來產生我們的 controller 吧
application/controllers/News.php
現在有了 M 有了 C 當然不可以忘記 V 啦
application/views/news/index.php
另外再建立一個
application/views/news/view.php
這是作為內容詳細預覽畫面的 view
最後還要來調整路由的部分
因為之前在路由規則中使用了萬用字串
所以必須增加額外的路由規則才能檢視你剛剛建立的控制器，不然都會被導到原先的網頁
修改檔案成下面這樣
application/config/routes.php
確保請求可以到達 news 的 controller 而不是直接送給 pages
第一行的規則將含有 $id 的 URI 導向 news 控制器的 view 方法
下一篇來建立資料庫",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191589,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,10,[Round10]我想打10個...,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1513205768000000000,569,"人人都想1打10，現實上，當個1天打10個game的宅宅還比較實在。
好好做個小game就來開香檳
此篇是緒論中的最後小節-界定問題與解決之前半段。
通常是要解決一些問題才會有研究的想法...因此才需要界定要問題在哪，
再來是看資源本身的限制，如人、時間、金錢等。
接著定義做的事情大小，配合資源限制把範圍縮小
資源
範圍",,"['問題解決', '資源與範圍限制']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191582,自我挑戰組,0,ArasPLM開發練功30天系列,10,[Day10]FieldEvent-控制項事件,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1513205663000000000,552,"基本用法與Form Event一樣，但是觸發時機在button事件上，下面就來示範設置方式
在Form的下方新增button，點選button後在上方Field Event新增方法

方法1
當方法1 按下Click後，畫面上cost原本輸入為15，存檔後變為1000，原因在於我們是修改了暫存資料，因此前端的數值也要一併修改，這樣的執行結果才會正確。
方法2
先顯示Alert

變更cost值後存檔，測試cost值是否變更完成
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191519,自我挑戰組,0,軟體工程漫談系列,9,『敏捷不寫文件，我不要搞敏捷』--真相是？,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1513204991000000000,641,"敏捷宣言裡有一具：『可用的軟體重於詳盡的文件』。大家聽到都會背了。然而，我認為這句話是四條宣言裡最容易被誤會的一條。敏捷要不要執行、執行得好不好，跟你寫不寫文件一點關係都沒有。
一般人學習敏捷開發框架時，總是喜歡拿敏捷跟傳統Waterfall管理方式來做比較。其中總是會提到傳統瀑布式的專案管理，在一開始就把所有的細節都規定好，因此有常常做到一半才發現這設計超難實現，或是做出來的東西客戶根本不要的情況。然而，卻有很多人因此而誤會，以為『敏捷開發不寫文件』，這實在是讓這個框架蒙上不白之冤。
就像User Story一樣，我們有一定數量的庫存backlog，依照重要程度排序著，時間到才依序拉一些進sprint來動手做。文件又何嘗不是？文件為何不能比照辦理？其實可以的。寫程式需要時間，測試需要時間，寫文件也需要時間啊！憑什麼程式可以被排序、估算，與檢討，文件卻不行？
更有甚者，你知道文件也有測試嗎？試想，程式是人寫的，有正確與否與是否吻合客戶需求的問題，那麼，難道文件不是嗎？寫得不好的文件，無法教使用者用正確方式使用產品，也無法讓使用者簡單地了解功能。因此，文件當然也可以安排測試啊！
如果你的客戶需求與契約中，包含了文件，你就應該在產品成長過程中，大方地 『把文件當成產品的一部份』生成並檢驗品質。簡而言之，你應該像對待程式功能一樣對待文件。為什麼？因為那是妳產品的一部份啊！不然咧？
身為軟體工程師，我一直認為，對待測試與文件，要像對待功能一樣慎重。而在敏捷流程哩，你就要去評估這些需求比次間的優先順序。這個優先順序有賴PO、SM與各Stakeholder的溝通與討論。如果這個客戶這麼重視文件，那就寫吧！出一張User Story，排入Sprint，寫吧！
記得Code Review :)",,,"['敏捷不是不寫文件，敏捷是只寫『有需要的文件』。', '文件也能測試', '如果客戶重視，那就寫吧']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191584,ModernWeb,0,Confluence線上協同作業之平台系列,9,登入帳號的使用時間,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1513204932000000000,560,"這是想要統計每個帳號登入confluence的使用時間應用，也希望可以by 天/月來呈現，這個問題我分別有在原廠開ticket及討論區與plugin的store來尋找及發問，但目前問到的資訊是不可行，而比較正規的說法，應該是任何一個系統無法完全抓出USER實際使用系統的時間，而或許可以由LOG來看出USER做過哪些行為，及從這些行為軌跡推測他用系統的可能時間，而至於是不是他實際用的時間，可能就沒那麼一定了，因為如果USER開著系統然後跑去做其他的事情，系統並沒有辦法判斷出來。
或許您我都可能在某個系統看到類似的功能，例如moodle/facebook...etc，可以看出系統有列出使用者使用系統的統計時間元件，例如moodle可以使用timestat來算出學生上課的時間

而有些人可能會有同樣問題，confluence為什麼沒有類似的plugin或程式可以使用呢？是不是confluence在此部分的支援度沒有其他系統優，其實個人是認為不能由這樣來論定這個系統好與不好，如同之前提到的，如果這個需求很多人有提到，可以在confluence上開個issue，當很多人給予comment的時候，confluence將會把她列入之後版本更新功能的一項。
Confluence原廠在此部分給予的feedback是有提到可以透過log設定方式，來看出USER可能的使用時間，透過此方式的調整，在LOG端所看到的資訊會如下所示，當然這樣的設定方式可能會使用較多的系統資源，而可能會讓USER覺得登入的速度好像有變慢 (雖然只有可能不到2秒的感覺)
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191585,ModernWeb,0,從無到有，使用Go開發應用程式系列,5,Variables&Constantsdeclarations,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513204851000000000,578,"昨天學到了實字常數（literal constants）該如何表示，今天來了解如何宣告變數（Variables）與常數（Constants）。
宣告變數使用 var 關鍵字，下面宣告了 num 變數為 int 型態，並給初始值為 10：
使用 IDE 會提示說， int 可以省略，因為 Go 會自動推斷 10 的型態為 int ，因此也可以這樣宣告：
如果不給初始值的話，預定義變數都會有預設值， Go 語言稱之為零值（The zero value） ， int 的零值是 0 ，所以下面兩行宣告是等價的：
Go 可以一次宣告多個變數，下面的型態分別會推斷為 string 、 int 、 float64：
也可以分多行宣告
多行宣告並指定型態與指定初始值
多行宣告並指定型態不指定初始值
在 func 裡，如果要宣告變數同時指定初值，可以使用短變數宣告：
這裡就如同 PHP 的 $name = 'Miles' 一樣，宣告變數同時給值
一樣可以寫成一行
宣告變數使用 const 關鍵字，下面宣告了 num 變數為 int 型態，並給值為 10：
這時 num 會是不可變的常數，試圖指定新值會在編譯時期報錯。
除了常數一定要給值外，其他宣告的方法都跟變數一樣，如一次宣告多個常數
多行宣告
多行宣告並指定型態
變數宣告了就是要用，不然要幹嘛？如果宣告了一個 num 變數沒使用， Go 會在編譯時期出錯：
常數則可以宣告但不使用。",,"['變數宣告', '短變數宣告', '常數宣告', '宣告後沒使用會？', '今日回顧', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191575,自我挑戰組,0,打雜人生-腦容量不夠用就筆記筆記唄系列,7,[Day7]Python自習手札:Selenium腳本錄製與匯出,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513204647000000000,596,"使用Selenium錄製腳本與匯出
===測試環境===
Play Entire test suite:播放整個測試套件
Play Current test case:播放現在測試案件
Click to Record:點選錄製 (點選第二次關閉錄製)
Record Content:腳本內容

===已錄製腳本匯出===
檔案 ▶ Export Test Case As (E) ▶ Python 2 / unittest / WebDriver

===儲存腳本===
輸入檔案名稱 ▶ 儲存

===確認腳本===
已匯出的拍森腳本再著兒^^
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191565,自我挑戰組,0,用laravel尻出自己形狀的linebot，還要撐三十天！系列,8,【第八天】完成當季動畫通知推送！,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1513204485000000000,609,"大家晚上好～
今天不再拖了！就把這個趕快做完吧！
前幾天我們做完了推送通知和簡易爬蟲，今天就把他們參在一起做撒尿牛丸！

請服用！
所以我們就直接來囉！
我們可以很快速的稍微調整一下爬取的資訊，接著就直接推送訊息！
但要怎樣加入排程在Heroku呢？
很簡單，來看圖說故事囉～

按一按之後，會到下圖！

沒有錯！就直接加入排程進去即可！最短可以設定為每十分鐘呼叫一次！
原本以為會需要設定Scheduler，但看來都不用做這些了，透過Heroku的WEB介面就可以達成了！
現在大家可以在收到最新的動漫後去洗彈幕啦～

原本的排程資訊有些不夠使用，有興趣可以去看一下連結，在推送通知上有做些小調整！
今天沒什麼重點，就專心實作吧～",['【第八天】完成當季動畫通知推送！'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191555,ModernWeb,0,初探前端之路-React-由生到死的踩地雷系列,4,與APi失聯404notFound頁面跳轉製作,Luis-Chen,https://ithelp.ithome.com.tw/users/20103556/ironman,1513204229000000000,572,"最近測api時剛好斷線，想說這是一個好機會，就順手先加上api斷線時的頁面跳轉，下面講react-router-dom的 exact、strict的觀念
react-router-dom Route exact strict
參考資料
這算是邏輯問題，用什麼參數到就會有什麼效果，就照官網所寫


但今天我有問題，當我的路徑是樹狀階層時，該怎麼運用？
範例
邊有幾點要注意
這是我的根目錄，<Route strict path=""/board"" component={Board} />，後面一大串的樹狀目錄，所以要用strict限定,下面的/404 頁面還蠻有趣的，我一起使用兩個參數，這也是官方提供的功能，意思是我完全指定當path是/404時,才會跳到這路徑，不然照預設的話,/board跟/404是同路徑串的，但我用strict避開了/one這階層的路徑,所以我可以大膽的指定,/400,/500等錯誤頁面在這層路徑內
這邊也算單純，但也是有一個地雷要注意
在HOC component 裡面，的function 是不能直接return 其他Component的，只能在render()裡面return
例如
errorfunction寫法是錯的，
正確的做法是
操作上還是要用this.state來做控制
算是簡單但又充滿醍醐味的路徑配置","['前言', '總結']","['exact', 'strict', 'APi 為連線跳轉']",['實際使用例'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191576,SoftwareDevelopment,0,看到code寫成這樣我也是醉了，不如試試重構？系列,3,非技術人員所要了解的警訊,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513203758000000000,658,"Teddy 再談技術債一文有提到，軟體品質有分「外在品質」與「內在品質」。外在品質是使用者直接感受到的品質，而內在品質則是開發者才有辦法感受到的真相。
「魚與熊掌，不可兼得」，這兩種品質也是一樣，開發者在同一時間裡，提升其中一種品質，另一種品質很有可能會被犧牲。比方說：想提升外在品質需要「增加新功能開發」，但會犧牲內在品質「欠技術債」；如果提升內在品質要「重構還債」，但會犧牲外在品質「減少新功能開發」。
古人有云：「時勢造英雄」，英雄之所以是英雄，正是在對的時間，做對的事。公司的決策者，在決定如何提升這兩種品質的策略前，必須謹慎思考。常會聽到有人說：先求有，再求好，「先求有」指的是「提升外在品質並犧牲內在品質」，這通常是業務人員所想要的；「再求好」則是「提升內在品質並犧牲外在品質」，這是開發人員所想要的。「先求有，再求好」的過程打比方就像是：新創產品先求推出市場，等驗證使用者需求後，再開始改善程式內部設計。
這時有個很大的盲點：什麼時候該開始「求好」？大家可能會想到：「當產品穩定呀！」。可是瑞凡，真的要等產品穩定的話，內在品質就回不去了。因為對業務人員來說，產品的外在品質永遠都有改善空間啊！因此產品穩定並不是一個明確的指標。
或許可以換個角度：欠技術債有可怕的時間利息，但可以加速提升外在品質，在死亡交叉前，確實是能感受到加速的。但如果持續不還債，直到過了死亡交叉後，舊技術債的時間利息開始超過加速的時間，這時再欠技術債已經沒意義了，因為無法達到想要的效果。如果能在死亡交叉前，投入部分時間資源來還債的話，下次需要加速提升外在品質就比較不擔心倒債。
但是，令決策者困擾的是，內在品質不僅難以量化，而且只有第一線的開發者才會了解，身為非技術人員的決策者很難體會，可是這會影響後續的決策，不去了解會下錯決定，對公司的營運是不利的。
還好，在死亡交叉前通常會有警訊，注意下面這些狀況，並多關心開發者與他們才知道的真相。沒事的話當然很好，但如果已債台高築的話，得開始計畫「求好」，重構償還債務。「有借有還，再借不難」，下一次有緊急程式修改需求（如修復線上嚴重 bug），才不會被技術債勒索時間，錯過黃金救援時刻。
新功能開發團隊估算功能實作要五天時間，雖然實際時間不是很準確，但誤差也只是一兩天。但過了兩三個月，團隊實作時間越來越不準，誤差越來越大，團隊估時也不斷增長。即使非技術人員佛心說無法預期的時間可以盡量加，但實作的時間還是遠遠大於估算時間。
這時就得關心一下是否有技術債阻礙團隊開發。
當團隊第一天來的新人，與三個月後來的新人，在進入產品開發所需要的時間明顯變長。在這三個月中，產品本身商業邏輯的難度提升需要考慮進去，如果明顯沒有太困難，但時間變得不合理的長，有可能是這三個月中累積了太多技術債。
另一種情境是，如果老鳥要持續開發新功能，但新人剛進公司給三個月只看程式碼不開發，代表這份程式碼可能有很大的技術債，比方說：只有老鳥會清楚地雷在哪，新人則需要花三個月時間了解地雷，並還要想辦法跟地雷好好相處。
技術債多代表程式碼難改；難改的程式自然會很多 bug ； bug 多，可能沒發現的 bug 也很多；沒發現的 bug 又有機會成為新的技術債。如此循環， bug 率就會不斷上升。
因 bug 率高，可能後續就會開始安排測試人員協助測試。
這是增加了一個關卡，同時也代表開發時間拉長；也因為沒發現的 bug 變多，且有可能是測試人員發現，修復難度就會大幅提升，自然就需要花更多的時間修 bug 了。
因對自己不熟的業務掌握度不高，因此可能會寫出更多 bug 。於是乎，團隊會產生一種默契：職責完全切分，只改自己熟的部分。當在詢問自己不熟業務上的技術問題時，也同時會把責任推給熟悉領域的同事，比方說：「這可能要問某某某耶，因為這是他設計的。」
如果需求需要更動的程式範圍，橫跨整個團隊，而團隊要實現需求還必須每個成員找來交待需求內容，成員之間還得討論資料交換的方法，太複雜了！這明顯也是「技術上會難以修改的理由」，因此，知識在團隊內不流通也是一種技術債。",,"['估時變得不合理的長', '新人上手時間變長', 'Bug 率不斷上升', '修復 bug 過程冗長', '相同團隊的成員互不了解彼此工作', '今日回顧', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191551,SoftwareDevelopment,0,初探Kotlin系列,8,[Day8]ReturnsandJumps,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1513203692000000000,524,"在Kotlin中任何表達式都可以加上標籤
在識別的標籤後加上**@** 如abc@ fooBar@
可以使用標籤執行break和continue
如果if成立則break跳到loop@繼續執行
foo()會在 if(it == 0) 這行return
加上標籤後
程式執行至 if(it == 0) 時只會return到 ints.forEach lit@ 這行 接著繼續執行
也可以用一個匿名函數替代lambda表達式","['Break and Continue Labels', 'Return at Labels']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191581,SoftwareDevelopment,0,簡潔高效的PHP&Laravel工作術：從ElementaryOS下手的聰明改造提案系列,3,第3天：安裝elementaryOS作業系統,shengyou,https://ithelp.ithome.com.tw/users/20107229/ironman,1513202642000000000,679,"本文同步刊載於作者部落格：https://medium.com/@shengyou/2018ironman-eos-for-php-developer-day3-31e693a115ba
當我們依照安裝前準備工作指南完成製作 elementary OS 開機碟後，接下來就可以開始正式安裝作業系統了！接下來的示範環境，會以 PC 做為安裝測試平台。但其實 elementary OS 也是可以安裝在 Mac 機器上的，若您有興趣的話，可以參考文章未的參考資料。
首先，請先將您製作的 elementary OS 開機碟插在電腦的 USB 埠後開機。開機後，依據您電腦廠牌的不同，按下 F1/F2/F10/F12/Del 鍵進入 BIOS 設定 (若不清楚自己的電腦怎麼進入 BIOS，請參考文章未的參考連結)，調整支援 UEFI 模式開機，並設定開機順序以 USB 埠優先。若這個步驟設定完成，成功用 USB 開機碟開機後，應該會看到類似如下的畫面：

請選擇「Try elementary OS without installing」，接著畫面會跑一段時間後，正式進入 elementary OS 的 Live CD 模式，應該可以看到預設的桌面，如下圖：

在 Live CD 模式，其實您已經可以開始「試用」elementary OS 了。只是在這個模式底下，您的任何操作紀錄、檔案…等都不會被保留下來。若要正式安裝的話，請點選桌面右下角 elementary OS Logo 的圖示，啟動安裝程式。

接下來出現安裝程式的歡迎畫面，在這裡可以選擇安裝的語系，我因為歷史因素所以習慣使用英文語系，請依您的習慣自由選擇。語系的部份日後還可以額外安裝和修改，若反悔還有救，不用太糾結 XD。

下一步是設定網路，請選擇您連得上的網路。在這邊建議接上網路，因為若有接上網路的話，在下一步可以一併安裝 elementary OS 的更新檔。

在這邊安裝程式會詢問您要不要安裝更新檔，以及要不要安裝第三方的軟體。因為部份第三方來源會安裝一些非開放授權的軟體，而 Linux 社群通常很在意軟體授權是不是開放的，所以會特別詢問。若您沒有特別偏好的話，這兩個選項直接勾選即可。

接著要設定安裝的方式，因為很多人會拿 Linux 做多重開機模式，所以可以在這一步決定是做成多重開機還是全新安裝。不過，既然我們都下定決心要用 elementary OS 當工作機了，當然是選全新安裝「Erase disk and install elementary」啊！

然後安裝程式會詢問要把作業系統裝在哪一顆硬碟上，假如您有多顆才需要選擇，不然就用預設的即可。

下一步就是設定時區，假如前面有接上網路的話，應該會自動抓到正確的時區，按下一步即可。

緊接著是設定鍵盤配置，除非您有特殊需求，不然預設的英文鍵盤即可。

最後一步就是設定帳號，請依自己的喜好做設定。另外，我習慣每次開機輸入密碼，所以「Log in automatically」會取消勾選而「Require my password to log in」則會勾選。

以上都完成後，接下來安裝程式就會將整個作業系統依照設定安裝起來。依據您隨身碟、電腦及網路的速度，安裝時間略有差異，請耐心等它跑完…

當看到下面這個對話框時，恭喜您！您成功的完成安裝了，請選「Restart Now」後重開電腦，並把開機碟拔除即可，末來只要照著正常開機方式就會進入 elementary OS 桌面了。

就這樣在圖形化安裝程式的輔助下，有沒有覺得整個流程很簡單且親和呢？下一個單元就會帶著您熟悉一下 elementary OS 的基本操作世界觀。",,"['第一步、以隨身碟開機', '第二步、安裝作業系統', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191574,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,11,歡迎來到大分叉時代-AMD與CommonJS的發展,"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1513200716000000000,578,"大家好
昨天我們提到了 CommonJS 這個模組化標準的發展
他是一個同步 Loading (也就是 A Load 完才會 Load B) 的模組化規範
今天我們在寫一個後端 Server，讓所有的 Dependency 在一開始就 Loading 完並不是什麼大問題，頂多開啟 Server 的時間比較長而已
但是今天在瀏覽器的環境
我們載入模組的速度不像是直接讀硬碟那麼快
而是會牽涉到網路的速度！
這樣的限制，導致許多人對於 CommonJS 原生的同步式加載有意見
詳細內容可以參考這篇的內容
基本上內容是
早期 CommonJS 叫做 ServerJS，再推出他們自己的 1.0 版本規範後發展很好
後來他們想要進一步將 ServerJS 推廣到瀏覽器，就把社群名稱改叫做 CommonJS
但是瀏覽器跟伺服器端環境有很大的不同，這時候他們內部的人各有各的看法，這時候有兩個主要的流派
CommonJS 本身就夠用了，直接移植到瀏覽器上就好
要新開發非同步式的模組規範，比較能適應瀏覽器端的環境
而 AMD 就是另一種試著開發出瀏覽器專屬模組的「規範」
但是 AMD 規範本身使用的 define 語法
以及對 require() 實作行為的定義分歧
將會導致你會無法在前端 Project 中使用任何 CommonJS style 的 Node 函式庫
最後，AMD 就和他的一種前端 runtime RequireJS 在開發上比不上 CommonJS 派的前端模組(他們使用了哪種 runtime 後續會介紹)
後來出現了一項工具，叫做 Webpack
基本上 Webpack 的概念很有趣，他是這樣想的
「在我實作瀏覽器版本的 CommonJS 模組時，可不可以一起支援 npm 上的套件，這樣我就可以使用 npm 來整理我的函式庫了」
(我知道我們還沒介紹到 npm)
這一舉動簡直是驚為天人
因為以往我們在前端，管理套件的方式還是沒受後端的 npm 所感化
現在來了一個 Webpack，他既然把不相容的接口都補齊了！
在明天的時候
我們將會介紹幾個主題
今天的主題就到這裡了
明天見！","['歷史', '後來', 'CommonJS 現在與未來', '明天']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191573,自我挑戰組,0,Kaggle的解題挑戰系列,3,[Day03]Kaggle的解題挑戰-資料科學家和資料工程師,BillLin1983,https://ithelp.ithome.com.tw/users/20103074/ironman,1513200330000000000,581,"我想有人對於這二種角色並不了解，所以我今天先簡單介紹一下這二個角色的差別。
就我了解資料科學家的工作內容，和Kaggle解題的知識比較相關，需要具備有統計、Data Mining、Machine Learning相關的知識，需要學習Python和R這二個程式語言。也可能需要具備要分析Domain的知識和能力，而根據要分析的資料，要有能力處理Text Mining、語音、影像、語意分析相關的資料，也可能需要如何使用資料庫或是查詢Big Data框架上資料的能力，不過最重要的工作就是可能分析和建立分析模型的，根據需要的情況選擇和撰寫相關的演算法，可能是推薦、預測、或是分類等等，最近可能又要多學習Deep Learning相關的技術。
是這幾間隨著大數劇分析而起來的新職業，主要是使用Hadoop、Spark等相關技術，來處理PB等級以上資料的工作，有人也說算是一個資料黑手，主要的技術線是Java、Scala，SMACK、Hadoop等等，也可以需要了解雲端平台的操作，因為運算資料時需要使用大量的機器設備，最近技術線上還多了Docker這個技術選擇，在角色上比較像是利用資料科學家建立的演算法上，使這個演算法能實際放在線上運行的環境，和建立一個能實際處理大數據的環境。
因為，我目前的工作主要是使用Java，也開始在學習SMACK的技術，因此，先離題一陣子，先學習一下這相關的技術，二種職業其實在分界上也並不是那麼的分明，在某些場景上，或許是大量的數據，但或許用現成的Machine Learning演算法，就能達到不錯的效果了，而某些場景，反而是反過來，目前學習的方法主要是朝這個方向前進，但也是需要有基本的資料分析能力，總之，我會先學習和建立一個簡單的SMACK框架。",,"['資料科學家', '資料工程師', '後話']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191569,ModernWeb,0,PHPlaravel的邂逅系列,10,DAY10-View介紹,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1513200152000000000,587,"在傳統的php寫法中，html裡面混著各種php的邏輯語法，還有資料庫語法等等，這邊主要介紹的是laravel是怎麼切出view還有樣板引擎blade該怎麼使用，你就可以脫離各種語法混在一起的地獄了。
在前幾天介紹route的時候，回傳view的檔案都是放在route的閉包裡面，已經介紹過controller了，就可以把view移到controller裡面去了，route就讓他專門做route的事，邏輯部分就都移到controller裡面去做就可以了。
先來新增一個新的view檔案，view檔案的路徑resources/views，新增一個叫hello.blade.php的檔案，除了要加上php外，記得還要加上blade，這樣laravel才能辨識該檔案
在昨天的NewsController裡面加上一個hello Function還有回傳view檔案。
在route中新增一個router，這時候就可以到網頁上去測試看看有沒有跑出hello world來。
上面已經在controller裡面抓到view了，現在來試試看把query值傳進view裡面顯示出來。
下面兩種方法都可以把變數傳進去
變數要傳進view必須用兩組大括號包起來，這樣才能抓到變數的值
接著在網址打上：http://127.0.0.1:8000/new/2 ，試試看有沒有印出query的值，以上就是今天view介紹囉",['DAY10-View介紹'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191462,自我挑戰組,0,iflen(learning.python)==30:系列,10,Day10-Dictionary-宣告,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1513200132000000000,557,"是一種無序性(unordered)的key-value pair。主要由key和value的概念組成，在別的語言中通常稱為associative arrays。
以下從宣告、操作、特性、常用方式做個紀錄。
宣告dictionary有幾種手法",,"['概觀(Overview)', '宣告(Declaration)', '參考']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191570,SoftwareDevelopment,0,每天Racket3分鐘系列,10,"(let([day9])(display""Letitbe!—Racket的LocalBinding""))",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1513200069000000000,549,"在 Racket 裡頭，有種特殊的函式，可以讓你劃定一個區塊，執行完之後就煙消雲散。這是什麼呢？其實不只在 Racket，早在 Lisp，也有這樣的語法，這就是 let 的 local binding 函式：
它的參數結構與我們昨天在 for 函式上所見極為類似，而這個宣告它本質上，其實是類似這樣的一個 lambda 宣告：
換句話說，宣告一個 lambda 與它的參數及內容，並且馬上傳遞參數值進去。因此，你想想，在這個情況下，let 宣告的 a 與 b 彼此互相認識嗎？例如，可以這樣嗎？
如果不行，怎麼辦呢？
let 有許多變形，我們會試著介紹最重要的四種宣告，第二種，就是讓你的區域變數可以互相認識：
這裡所用的，是指後來宣告的變數可以知道前面的變數值。如果你倒過來寫，結果會不一樣：
這時 Racket 會爆出錯誤給你，告訴你 a 不認識 b，為何會這樣呢？其實整個 let，都是 lambda 的語法糖，這個拆開來後，會是一個 currying 的 lambda：
這個結構看起來很複雜，其實我們可以先從最內層來看：(lambda (b) (* a b))，給定一個 lambda，它只有一個變數 b，但是它的 body 裡頭有個 a，這稱為自由變數，因此它會往上找，往上找那層：(lambda (a) ...) 時，發現一個 a，並且這層傳參數給 b 的 lambda 時，是一個表示式，因此要再找 a 的值。最後在最外層裡頭，找到了 a 的值為 10，於是進來，求 (+ a 5) 的值，最後求 (* a b) 的值。
雖然看起來很囉唆，可這是非常有用的東西，而且我們要進入更複雜的宣告函式了！
在 FP 裡頭，常見用遞迴方式來求解，例如我們昨天說到的費氏數列的例子，然而 let 的區塊裡，能不能宣告遞迴函式來用呢？我們借用昨天的 fib：
這回使用的 letrec 可以讓你定義內部遞迴的函式，甚至可以像 let* 一樣，後面宣告的內容能夠連結到前面所宣告的：
let 的變形之多，各位可以看 Racket Reference [1]，而讓我覺得最奇妙的，就是 let 可以有如 lambda 或 for 一樣，進行 iteration 的操作：
這結果不意外，是 '(10 9 8 7 6 5 4 3 2 1)，至於為什麼呢？我們剛剛已經說到 let 其實可以藉由 lambda 的機制進行實作，因此可以想像，這個 iter 可以說是這一段 let expression 的別名，像是：
這樣的一個定義宣告，並且把 10 當作參數傳入求解一般。
let 仍有許多奇妙的用法，Racket 因其語法簡單，因而發展出各樣不同作用的函式，這是這個生態系最大的特色，同理也可用在 Lisp、CommonLisp、Scheme。若是 Racket Reference 內容太長，也可以參考 Racket Guide [2]，會有很簡單扼要的說明。",,"['1. 關起門來寫程式', '2. 左右互搏之術', '3. 纏纏繞繞纏纏繞', '4. 魔法般的語法之一']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191567,ModernWeb,0,TypeScript-初學之路系列,7,Day07-Classes,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1513199534000000000,561,"傳統的 Javascript 使用 function 加上 protyotype-based 來繼承建立元件
但是這樣的機制對程式開發者習慣 Object-oriented 的感覺很尷尬
ECMAScript 2015 與 ECMAScript6 中允許開發者使用 object-oriented class-based approach
最基本的 class-based 範例
這樣的程式對 C# 或是 Java 的開發者應該會比較親切
宣告了一個新的 class Greeter
這個 class 中有一個屬性是 greeting constructor 和 greet
看到有一個關鍵字 this. 之後可以呼叫這個 class 的屬性
在 TypeScript 中可以直接使用 object-oriented patterns
當然也可以建立一個 class 做繼承的動作，
範例
上述範例中以 extends 這個關鍵字來建立一個子類
Horse 和 Snake 是繼承在 class Animal 之下的子類
在子類中的 constructor 必須使用 super() 這將會執行父類的 constructor
這個範例也示範了如何覆寫父類的 Function 在 Snake 和 Horse 都有建立一個 move 的 Function 來覆寫過 Animal 的 move 執行結果後如下
在我們的範例中可以自由地宣告屬性
但在其他語言(C#) 需要使用 public 這個關鍵字來規範屬性是不是可以被瀏覽
但是在 TypeScript 中 public 是預設值
但是你也可以使用 public 來宣告屬性
當某個屬性使用 private 來宣告
他不能來宣告，他不能被直接呼叫
TypeScript 是一個結構型態系統
我們比較兩種不同的類別
不論他們是如何產生的
只要他們的所有屬性沒有衝突
我們就可以稱這兩個類別是相容的
然而當兩個類別在比較的時候如果擁有 private 和 protected 屬性
除非他們所這個 private 和 protected 繼承的是同一個父類別才會是兼容的
否則在形態上兩個都會是不同的
在這個範例中我們有 Animal 和 Rhino 兩個 class
Rhino 是 Animal 的子類別
另外也有一個 Employee 他看起來和 Animal 十分相似
都有一個 private name: string
因為 Rhino 是繼承 Animal 所以 Animal 實體化後可以 assign 給 Rhino 的實體並不衝突
代表他們是相容的，而 Employee 即使有一樣的 private name: string 但是卻無法相容，
因為他們並不是在同一個父類的類別
protected 和 private 很相似，只是當你宣告為 protected
我們沒辦法直接呼叫 name 但是可以透過 Employee instance method 來使用，因為 Employee 繼承自 Person
我們也可以將 constructor 宣告為 protected 這代表這個 class 只能用來繼承，而無法直接產生 instance
你可以宣告某些參數或變數是 readonly 使用 readonly 這個關鍵字來宣告\
但是必須在初始化或是在 constructor 的時候進行宣告
TypeScript 支援 getters/setters 去對 Object 中的屬性進行取值或是修改
我們希望使用者是有足夠的安全性，所以使用 private 宣告 fullName 然後允許使用 set 來對 fullName 來做修改
command line
有兩點需要注意
在這個部分我們討論的是實體的屬性
也是靜態屬性 實體的屬性 也是靜態屬性 這個屬性只能在 class 中取得
而無法被繼承
抽象類別就像之前的類別一樣 也許不需要實體化
使用 abstract 關鍵字來宣告抽象類別與抽象函式
abstract 中的函式並不會並不會包含在實體
也一定會使用 abstract 關鍵字來做宣告定義
抽象類別無法直接使用 new 產生物件
若是在抽象類別中並沒有宣告的類別與屬性 其子類別即使寫了也無法使用
在 TypeScript 中宣告一個 class 的時候，其實你已經同時執行了多個宣告
上述範例中當 let greeter: Greeter 我們將會使用 Greeter 類別的 instance 賦予 class Greeter
當我們使用 new 這個關鍵字來實體化的時候
便會執行 constructor 轉譯之後的結果如下
在 let Greeter 就會準備指定給 constructor
而看到接下來的 new 關鍵字並且開始執行 constructor 就會取得一個藉由 Gretter 這個函式實體化的一個結果
在修改一下上面的範例
在這個範例中我們在 Greeter 宣告了一個靜態的屬性 standardGreeting並且給予值 Hello, there
第一步驟跟之前的範例一樣，利用 Greeter 產生了一個物件是 greeter1 然後將他的類別 assign 給 greeterMaker
並且修改了他的 standardGreeting 為 Hey there! 之後再由 greeterMaker 產生一個 greeter2 當它的 greet()
執行的時候產生的字串卻是 Hey there! 而且此時我再次執行 greeter1.greet() 的時候得到的卻也是 Hey there!
也就是當我們 可以利用 這樣的方式統一管理一個靜態屬性也會互相繼承靜態屬性",['Classes'],"['Basic Classes', '繼承', 'Public, private 和 protected modifiers', 'Readonly modifier', 'Accessors', 'Static Properties', '抽象類別', 'Advanced Techniques']","['public by default', '了解 private', '了解 protected', 'constructor function']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191566,ModernWeb,0,TypeScript初學之路系列,10,Day10-ReactandWebpack,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1513199486000000000,560,"這一個篇章會帶你使用 TypeScript 使用 webpack 開發 React
如果你還不知道如何初始化一個新的 React 可以參考這篇文章
換句話說，我假設你已經會使用 nodejs 和 npm
開始建立一個新的資料夾 proj
然後我們建立一個新的資料結構
TypeScript 放置於 src 的資料夾中，經過 TypeScript compiler 後再經由 Webpack 最後在 dist 產生一個 bundle.js 的檔案，每一個 components 都會放在　src/components 的資料夾內
types/ 這類的套件代表我們需要他取得 TypeScript 的宣告，通常當你 import 一個套件路徑 react，才找得到 react 的套件，然而並不是所有套件都需要這種宣告套件
，然而並不是所有套件都需要這種宣告套件
安裝開發用套件
這兩個套件一起幫你編譯你的程式碼， awesome-typescript-loader 會依據 tsconfig.json 這個檔案所描述的 TypeScript 標準來做編譯。
而 source-map-loader 可以在你開發的時候可以做編譯前與編譯後的 mapping 方便追蹤錯誤的程式碼
若你希望你的 TypeScript 整合在一起，你需要一個 tsconfig.json
若是你希望學習更多的 tsconfig.json 可以參考這篇文章
在 src/components 建立一個新的 Hello.tsx
然後在 src 中新增一個 index.tsx
在 index.tsx 中只是引入了 Hello.tsx 然後將 Hello component 顯示在頁面上
為了顯示這個 component 我們需要建立一個 index.html
你可能會好奇 externals 這個欄位在做什麼的？
我們希望在打包的時候希望可以共用一些 package 就好像 global variable 就像 jQuery 或是 _ 一樣
這叫做 namespace pattern， webpack 允許我們使用這個方式來引用套件。",['React & Webpack'],"['Lay out the project', '初始化專案', '增加 TypeScript 設定檔案', '範例程式', '建立一個 webpack 設定檔案']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191564,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,9,(Day9)資料清理與整理(上),Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1513199352000000000,573,"首先先來看一下爬蟲結果產生的兩個資料表
先是議題列表主表．

再來是各議題討論的內容區：

再來觀察一下資料的概觀：
第一層的紀錄，純粹是單純資料性質，沒啥連續型數值資料可觀察。(id欄位沒啥意思)
第二層紀錄，資料就多元了一點
可以大概看見city的分佈新北市/台北市等六都所回應的人口數較多．

未來有進階的ML需求時，常使用函數summary()，來進行初步的資料觀察。
如遇有一些空值null或是NA時，如函數complete.cases()，用來剔除NA值。
這部分留待後續再行補充實作。
這裡小試一下資料的清理。
例:將欄位aid的顯示，直接去掉""NO.""，多餘顯示的部分。
亦或是將createdaye欄位去掉時分秒。(處理前後型別仍是文字)
說到型別，看一下R處理日期的型別，這部分要套用Format參數，請詳見strptime
這部分實作時，請注意大小寫，都有不同的結果。
補充說明的部分是，處理前型別是Character，處理後型別是Date，Date 是可以進行運算的。這部分的單位是秒。

實做一下這部分，了解一下如何在處理資料之前辨識型別。

或是用下列函數處理前確認
這部分回應值是 TRUE/FALSE
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191562,自我挑戰組,1,,10,連續寫30天真的不是一件簡單的事情,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513194326000000000,647,"去年第一次完成鐵人賽的時候，真的是非常地興奮又感動啊
今天再次挑戰，也見證許多人的挑戰
來看看現在文章進度最快速的一群人吧
已經完成10篇文章應該是進度最快的一群了
這是用選手列表去抓出來的資料
https://ithelp.ithome.com.tw/ironman/signup/list
不過現在順序有亂了，大家想知道詳細的排序，自己去查查吧
有補上最新文章就會出現在清單裡
今天就先更新到這邊
改天寫好BOT應該可以跑出更有趣的資料
這35篇文章中
Modern Web 占 17 篇
自我挑戰組 占 8 篇
Software Development 占 4 篇
Security 占 2 篇
Data Technology 占 2 篇
DevOps 占 1 篇
AI & Machine Learning 占 1 篇",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191561,DataTechnology,0,Python學習筆記系列,10,[Day10]Tuples元組,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1513194311000000000,567,"Tuples跟Lists很像，不過與lists不同的是，一旦創建了一個Tuple，就不能以任何方式去改變它。

基本Tuple函數
Tuples有很多內建函數，不過數量比lists來的少

不變性
Tuples裡的值是不可改變的

使用Tuples的時機為何?
Tuples的功能比Lists少，那為何還要使用tuples呢? 原因在於與list不同的是，它不可以修改。
List的語法如下
my_list = [1,3,6,8]
Tuple的語法則為
my_tuple = (1,3,6,8)
更多關於list的用法請回顧list文章",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191557,自我挑戰組,0,從0開始的菜鳥工程師挑戰賽系列,1,第一天-前言(Atom更改安裝目錄),lf2exe,https://ithelp.ithome.com.tw/users/20107727/ironman,1513193075000000000,814,"小弟原本是機械系的，受到國中(喬)同學不斷地鼓吹來學網頁設計，最後被騷擾到只好妥協了((笑))。
不得不說路遠之馬力，日久見人心，那位喬同學深知我的尿性，沒有壓(ㄐㄧㄤˇ)力(ㄌ一ˋ)就沒有動力，所以掏出了這個看起來難到歪頭的比賽，在天時地利人和的情況下，我再不接受是不是就太浮誇了呢!
正是工欲善其事，必先利其器，首先我找了一個編譯軟體 ""Atom""，聽說現在的編譯軟體都大同小異((小聲))，至於會找這個的原因單純就是喬同學的推薦了，如果未來有發現甚麼""特殊之處""再來分享。
首先，你先到它的官網去。

然後找到在那顆紅色按鈕(Download Windows 64-bit Installer)下面的""Other platforms""的選項點下去，就會進到下圖。

下載""atom-windows.zip""這個選項，它是一個解壓縮檔，你就可以解壓縮到任何你想要得地方啦~
結語:
這30天分享應該不是教學文，最有可能就是純紀錄我的成長史，難怪小時候老爸媽老是幫我拍了一堆照，要在三十天後回來看看自己的路程，想想就覺得激動(?)!!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191560,ModernWeb,0,ASP.NETMVC網頁程式介紹系列,4,[Day04]我的第一個MVC專案(二),小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1513192944000000000,606,"今天來分析一下MVC的結構，首先我們看Views這邊

會看到一個Shared資料夾，通常都是放主版頁面之類的資料夾(主版頁面應該是WebForm的說法，我不知道在MVC應該如何稱呼它)，MVC的主版頁面預設是使用_Layout.cshtml，在Visual Studio 2015之前的版本，要自己指定主版頁面，從VS 2015之後，如果你沒有指定主版頁面，預設就會載入_Layout.cshtml當作主版頁面。
接下來我們看Home資料夾，會看到一個index.cshtml，這也是MVC預設的首頁，可以在App_Start資料夾中的RouteConfig.cs檔案裡面改首頁，我們暫時不會討論到這個部分。
下面我們來看HomeController.cs

可以看到這一段
如果沒有特別指定View，HomeController裡面的Index所return的View就會是/Views/Home/Index.cshtml，就會顯示這個檔案的內容出來。
今天分享得很短，
主要是講到MVC的架構，
明天就會開始探討到如何將後端的資料，
顯示到前端。
--
小弟不才，
如果有謬誤或是要補充的，
都歡迎一起來討論！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191559,ModernWeb,0,每日文章推薦系列,10,Day10PHP的學習,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1513192869000000000,647,"目前中文的相關書籍 出版日期都有點久
導致最近在網路上看到有人問問題
大部分的原因都是版本差異
ex. mysql_* 系列函式在新版已經拿掉瞜
所以真的要看的話建議看完語法就好
另外還是會推薦看兩本書
現代 PHP｜新的特點及良好習慣(Modern PHP: New Features and Good Practices) 
雖然這本出來時的php版本是5.6
現在stable 已經7.2了
不過還是講到很多基礎的特性
建議還是去找來看一下
PHP The Right Way
有很多重點
強烈建議看一下
簡中版本八月更新 看不懂英文也可以先看
原文還蠻常更新的
有空可以回來看一下
前面提到版本差異
PHP在5.3這個版本號應該是個分水嶺
5.2以前是地獄 5.3以後是天堂
主要差別是多了namespace這個特性
從此php的套件使用方式完全改變了
從以前的下載 解壓縮 require
檔案裏面也要require來require去
少了一個就準備噴錯誤
變成composer require
還有packagist這個網站可以找你想用的套件
利用composer也可以很方便的在小專案引入套件
基本上是個現代PHP不可或缺的東西
沒看過不要跟我說你在寫PHP
想看詳細的就找本現代PHP吧
mysql 非常古老，并且已经被以下两个扩展取代：
PHP 中的 mysql 扩展已经不再进行新的开发了，在 PHP 5.5.0 版本中正式标记为废弃，并在 7.0 正式被移除 。
想要辨别 mysql 是否被使用，你不需要到 php.ini 去查看。只需要使用编辑器打开你的项目，然后全局搜索 mysql_*，如果有类似 mysql_connect() 或者 mysql_query() 方法出现，那么你就使用了 mysql。
如果因为特别原因还未考虑升级到 PHP 7.x 的话，可以考虑使用 mysqli 或者 PDO 来临时解决问题。
以上引用自 http://laravel-china.github.io/php-the-right-way/#databases
所以如果你看到書裡還在用mysql_* 系列函式的東西 請記得轉換一下
引用自http://php.net/mysqlinfo.api.choosing
就功能性我是覺得pdo跟mysqli都不錯
並沒有絕對的優劣
pdo號稱可以跨database 但是遇到特殊語法還是會GG
這邊有一篇相關討論可以看一下
學東西不要人家說哪個好用就跟著說好用
要理解優缺點
重點是千萬千萬不要直接組合字串去跑SQL
在啥程式語言都一樣
個人用過的只有兩套
laravel 跟 codeigniter
剛好也是兩個時代
我從2.X開始用 用到3.X
中間有遇到PHP4的案子還跑去用1.X版
架構簡單 隨拆即用 文件清楚
https://codeigniter.org.tw/userguide3/
感謝appleboy
架構簡單是優點
但也是缺點
遇到大型專案要擴充架構的時候就要自行設計
要自行設計不是問題
問題在於十個人去設計可能會有十一種作法
所以我覺得大型專案要找一個有架構可以參考的Framework
laravel我從3.x開始觀望
一開始覺得太繁瑣 所以就只是看看而已沒在用
進入4.x以後有玩一下 但還是覺得麻煩
而且優點不足以讓我替換掉codeigniter
當5.1 LTS版本出來以後我才覺得可以入坑了
不過當時也沒有專案讓我覺得需要用上laravel
又正好此時公司遇到要自行建立系統的狀況
所以又研究了一下各個Framewok
最後還是覺得在台灣用laravel比較好
主要原因是社群比較有在經營
要問問題也比較找的到人
所以就推薦用這套了
當時個人還是比較喜歡codeigniter
但是覺得團隊跟個人需求還是會不一樣
沒有
沒有
沒有
不重要也是要講三次
畢竟也不是每天都有值得分享的文章的XD
有一些是之前分享過了
除非是有修改或者是有有趣的回應
不然不會重複分享
(今天看過的文章)[https://github.com/fripig/article_log/issues/418]",,"['要看書嗎?', 'composer', 'mysql mysqli pdo', 'Framework', '今日分享文章']","['mysql', '差異', 'codeigniter', 'Laravel']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191558,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,10,ES6(3),yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1513191447000000000,562,"我們在做線上相簿需要向資料庫要資料，以往的做法會使用XMLHttpRequest，或者jQuery 的.ajax()功能，在ES6中新增了一個原生的 object 叫 Promise來處理 JSON API 及 AJAX 的工作。
Promise 有「承諾」的意思，把它想像成你答應別人某件事情，那麼這件事情在承諾當下到無止境的未來之間，一定會發生。（怎麼突然有如詩般的美感XD）
而 Fetch API 是一個新增的原生 web API，它的作用和 XMLHttpRequest相同，而且更簡單使用。
Fetch API 的值是一個 promise. JavaScript 是非同步，它不會等回傳資料回來，而是會立刻執行後面的程式。Promise 用處在設一個 trigger，不管是成功或失敗，在收到資料後能執行指定的動作。
input 是我們要取得的目標
init 是一些設定選項，如 method, headers, body 等等。
Promise 在收到回傳資料後可以用 .then() 串接功能，首先要做的是把收到的 JSON string 轉換成 JSON object response => response.json();.
然後這個 JSON 值就以 data 的變數名稱，使用在我們自訂的程式中。",,"['Promise', 'Fetch']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191465,ModernWeb,0,Nest.jsframework30天初探系列,10,Nestjsframework30天初探:Day10UnitTest&E2ETest,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1513190418000000000,596,"單元測試(Unit Test) 是蠻重要的一件事情，對於追求品質的工程師來說，早早點開這個科技樹，省得日後接大案寫爛code寫到懷疑人生。
Nestjs本身可以使用第三方測試模組外(jasmine、Jest)，也有內建測試模組，加上Nestjs的架構是朝SOLID原則去發展，用Nestjs去開發的專案，耦合程度會較低，寫起單元測試也較容易些。
1.0 請安裝Jest
1.1 根目錄新增jest.json並修改package.json，程式碼如下。
jest.json
package.json
1.2 在Users資料夾新增users.controller.spec.ts，程式碼如下。
cmd 指令:
src/modules/Users/users.controller.spec.ts
1.3 暫時修改一下UsersController，註解掉response動作，程式碼如下。
src/modules/Users/users.controller.ts
1.3 實際跑一次單元測試，console結果如下。
cmd指令:

說明:看到綠色打勾真爽，此為測試結果與預期一樣。
1.4 Nestjs 有Testing class可以幫助我們做單元測試，我們來使用一下，程式碼如下:
src/modules/Users/users.controller.spec.ts
1.5 看一下測試結果，console結果如下。
cmd指令:

說明:同1.3的運行結果。
E2E Testing，俗稱端對端測試，隨著專案日益龐大，可能已經有無數個Restful API，每一隻Restful API是否正常運作?光手動測試就累死人了，所以可以寫好E2E Testing，直接跑測試，是否正常運作一目了然。
2.0 持續使用Jest和Nestjs原生Testing class，但要另外安裝一下supertest，接著請在根目錄新增e2e資料夾，並在e2e資料夾底下新增jest-e2e.json、Users資料夾，然後在Users資料夾裡新增users.controller.e2e-spec.ts，程式碼如下。
cmd指令
e2e/jest-e2e.json
package.json
e2e/Users/users.controller.e2e-spec.ts
2.1 復原UsersController的getAllUsers()，做E2E測試需要有Response，程式碼如下。
src/modules/Users/users.controller.ts
2.2 實際跑一次E2E測試，結果如下。
cmd指令
console畫面

E2E測試成功，綠色爽感十足^^。
程式碼都在github",,"['Unit Test', 'E2E Testing']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191532,自我挑戰組,1,自我挑戰日記系列,8,CSS：background圓點背景,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1513188772000000000,575,"今天要說 圓點背景

這是用3層： 小黑點、墨綠點、綠底 組合而成
滿有趣的是每個顏色點的位置都不一定要固定距離
也是可以作移動
radial-gradient() 後 以及 background-size 都可以設定
還有透明的也可以是圓點、圓形
就可以做出以下的效果
範例 一

範例 二

範例 三

另外作為最底部的顏色
也是可以用圖片

--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191556,自我挑戰組,1,30天的切版日記系列,10,Day10:Bootstrap列印,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1513188006000000000,570,"Bootstrap在工作當中算是很常使用
維基百科上的介紹 : Bootstrap是一組用於網站和網路應用程式開發的開源前端框架，包括HTML、CSS及JavaScript的框架，提供字體排印、表單、按鈕、導航及其他各種元件及Javascript擴充套件，旨在使動態網頁和Web應用的開發更加容易。
從3.0版本開始，Bootstrap將行動裝置優先作為設計方針。
再來是客戶的列印需求:
知道css有這麼一個東西 , 可以設定列印時的樣式
首先按下ctrl + p ，畫面使用了手機寬度的css...
原本想說既然這樣那就把桌機版的css複製貼到@media print 裡面，於是...頁面重新整理之後按下ctrl + p 一點動靜也沒有...
打開google 搜尋print css , 大部分的說明都在 @media print 或是 media = ""screen"" 這類的，還是不解為何它非得用手機的css。
思來想去，看了一陣子，恩...一定是bootstrap的關係，在google 搜尋了 bootstrap print mobile 終於在stackoverflow有了有效的解法 附上連結
新增一個html 放上面這個a標籤連結試試 , 會有下面兩種結果


解決方法是在@media print另外為a[href] content 給個 "" ""
大概就是這麼一回事",,"['*列印會用手機寬度的css', '*a標籤的連結網址都會被顯示出來']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191437,自我挑戰組,0,迷失在挨踢叢林的獎金獵人系列,1,「獎金獵人報馬仔」-比賽分享之一,獎金獵人,https://ithelp.ithome.com.tw/users/20107677/ironman,1513187692000000000,592,"嗨，我是獎金獵人，現在正迷失在挨踢叢林當中，唯有提供各種資訊養分給願意帶我走出叢林的當地居民，我才能成功離開。
身為一個靠獎金維生的人，筆記本內當然是滿滿的懸賞資訊囉！今天要分享一個比賽，是育秀教育基金會主辦的育秀盃創意獎。育秀教育基金會從2002年起，已經連續舉辦15年了，基金會成立目標在於數位知識的推廣、發展，及培養數位人才。今年的競賽有三種，分別是軟體應用類、工業設計類及微電影。
主題是『智惠明天』，詳細規範可以參照活動頁面，這個比賽必須是要學生身份才可以參與，但是可以找指導老師一起腦力激盪喔！
我們是否有想過，明日的生活會是怎樣的型態呢？我們又要如何運用創新科技讓生活更加智慧、便利、美好？這次的比賽期待能跨領域整合，並將智慧系統進行技術深化，讓創意轉化為行動，讓美好生活激發出更多的共鳴與感動！
距離初賽報名截止日12月28日還剩下兩個禮拜左右，最吸引人的是金獎獎金高達15萬元，總獎金超過了百萬！
可以單打獨鬥也可以找五個夥伴一起報名，快來找神人同學一起報名拿獎金吧！
明天的文章將會針對這個比賽做比較詳細的說明，之後還會有過去比賽的經驗分享，我要去抓蟲烤來當晚餐了。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191252,ModernWeb,0,30天使用Node.js在AWS上開發後端系列,6,30-5Node.js起手式之專案建立與資料庫串接(2),neilwang,https://ithelp.ithome.com.tw/users/20107336/ironman,1513186100000000000,581,"上面講的應該有些複雜
我會先把一些code打完, 並附上註解
之後會針對Express這個框架大概說明一下！
既然處理api/v1這個路徑這邊程式碼寫完之後
接著就是api/v1/auth/login/facebook這裡了
先去v1目錄底下新增一個index.js的檔案
v1/index.js
這時候我們幫app.js加上一個express-validator這個套件
像在開發的時候, 絕對要小心來自外部的資料
所以透過別人寫好的驗證器模組, 可以快速將惡意的資料格式阻擋
app.js
接下來是v1/auth.js
下一篇會附上程式碼的壓縮檔 or github
然後大致說明一下 Express 的運作流程",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191513,ModernWeb,0,從無到有，打造一個漂亮乾淨俐落的RESTfulAPI系列,3,[Day-3]Node.js入門介紹,10程式中,https://ithelp.ithome.com.tw/users/20107247/ironman,1513185276000000000,618,"Node.js 是以 JavaScript 語言為基礎，是一個開放的原始碼 (Open Source) 的應用程式框架 (Application Framework)。

Node.js 是一個高效能、易擴充的網站應用程式開發框架 (Web Application Framework)。它誕生的原因，是為了讓開發者能夠更容易開發高延展性的網路服務，不需要經過太多複雜的調校、效能調整及程式修改，就能滿足網路服務在不同發展階段對效能的要求。在眾多後台語言中，選擇 Node.js 的原因有以下幾點：
安裝 Node.js ，這裡有兩個版本分別為穩定版和最新版，這可以具你的喜好安裝，作者是安裝最新的版本。
若要檢查 Node.js 是否正確安裝，可以使用以下的指令：
作者是使用 VS Code 來做開發，各位可以使是自己喜歡的編譯器來實作，編譯器來實作，首先開啟資料夾新增一個 index.js 的檔案，這支檔案就來實作我們第一個 web server。
之後在終端機輸入 node index.js 啟動檔案

顯示出來 console.log 的內容了！ 接著試著在網頁上輸入 localhost:3000 你會發現你寫的 Hello world 回應在網頁上了。

在開發上為了減低開發時間以及提升效率，所以 Node.js 延伸出很多框架供使用者做開發，例如: 被官方認同的 Express 框架、Sails.js (node.js mvc)、Koa、Socket Stream ......等
文章同時發表於：https://andy6804tw.github.io/2017/12/13/node-tutorial/",,"['何謂 Node.js', '總結']",,"['1. 安裝 Node.js', '2. 第一支 Node.js 程式']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191549,ModernWeb,3,重新認識JavaScript系列,10,重新認識JavaScript:Day10函式Functions的基本概念,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1513182907000000000,784,"如果要說 JavaScript 最核心也最容易被誤用的部分，我想應該就非函式 (Function) 莫屬了，那麼在接下來的分享中，我們就來聊聊關於函式的部分。
在前面介紹變數型別的時候曾經說過，除了基本型別以外的都是物件。
當我們透過 typeof 去檢查一個「函式 (function) 」的時候，雖然你會得到 ""function"" 的結果，讓你以為 function 也是 JavaScript 定義的一種型別，但實際上它仍屬於 Object 的一種。
你可以把它想像成是一種可以被呼叫 (be invoked) 的特殊物件 (值)。
「函式」指的是將一或多段程式指令包裝起來，可以重複使用，也方便維護。
宣告函式的方法有好幾種，但不管是什麼方式，通常一個函式會包含三個部分：
例如：
以上是一個函式的宣告與呼叫簡單示範。
函式使用 function 關鍵字來宣告名稱，參數 number 位於括號之中。
於是透過執行 square(2); 來呼叫 square 函式，此時 square 函式裡面的 number 的值就會是傳進來的 2，而 number * number 的結果就會是 4 了。
最後再透過 return 回傳結果，如果沒有使用 return 回傳，則預設會回傳 undefined。
常見定義函式的方式有這幾種：
下面我們一一介紹。
「函式宣告」應該是屬於最常見的用法：
像本篇一開始的範例就是用這種方式：
另一種方式，則是透過 變數名稱 = function([參數]){ ... }; 的方式，將一個函式透過 = 指定給某個變數。
像這樣：
可能有些人會覺得這樣很奇怪，但還記得我們一直強調的嗎？
函式實際上它仍屬於 Object 的類型，是一種可以被呼叫 (be invoked) 的特殊物件 (值)，自然可以透過變數存入囉。
是的，聰明的你也許已經察覺到了，在範例裡 = 後面的 function 是「沒有名字」的：
像這類沒有名字的函式在 JavaScript 是合法的，通常我們會稱它為「匿名函式」。
匿名函式我們等等還會見到，現在先介紹到這裡。
在函式運算式中，如果想要在 function 後面加上一個名字是可以的嗎？
可以，像這樣：
但是要注意的是，這個名字只在「自己函式的區塊內」有效，也就是說：
像這樣，脫離了函式自身區塊後，變數 func 就不存在了。
當然，在「匿名函式」的函式運算式情況下，你還是可以透過自定義的變數名稱取得 function，沒有一定要替這個函式取名的理由：
最後一種方式就是直接使用 Function (注意 F 大寫) 這個關鍵字來建立函式物件。 使用時將參數與函式的內容依序傳入 Function，就可以建立一個函式物件了。 像這樣：
透過 new Function 所建立的函式物件，每次執行時都會進行解析「字串」(如 'return number * number' ) 的動作，運作效能較差，所以通常實務上也較少會這樣做。
但不管是透過哪一種方式定義函式，呼叫函式的話就直接用「函式名稱(參數)」的方式，像 square(2); 就可以了。 [註1]
終於要講到全域變數與區域變數的差異了。
在 ES6 之前，JavaScript 變數有效範圍的最小單位是以 function 做分界的。 [註2]
什麼意思呢？ 讓我用簡單的範例來說明：
猜猜看，這兩組 console.log() 分別會印出什麼？
.
.
.
答案是 150 與 1。
由於函式 doSomeThing() 裡面再次定義了變數 x，所以當我們執行 doSomeThing(50) 時，會將 50 作為參數傳入 doSomeThing() 的 y，那麼 return x + y 的結果自然就是 100 + 50 的 150 了。
那麼下一行再印出的 x 呢？ 為什麼是 1 而不是 100 ？
因為...
「切分變數有效範圍的最小單位是 ""function"" 」
「切分變數有效範圍的最小單位是 ""function"" 」
「切分變數有效範圍的最小單位是 ""function"" 」
很重要，所以要講三次。
因為切分變數有效範圍的最小單位是 ""function""，所以在函式區塊內透過 var 定義的 x 實際上只屬於這個函式。
換句話說，外面的 x 跟 function 內的 x 其實是兩個不同的變數。
因此在最後印出來的 console.log( x ); 自然就是外面的 x 也就是 1 了。
所以我們說，變數有效範圍的最小單位是 ""function""， 這個有效範圍我們通常稱它為「Scope」。
那麼，如果 function 內部沒有 var x 呢？
很簡單，自己的 function 內如果找不到，就會一層層往外找，直到全域變數為止：
要注意的是， function 可以讀取外層已經宣告的變數， 但外層拿不到裡面宣告的變數。
「沒有 var 宣告的變數很危險」什麼意思？
來，稍微修改一下剛剛的範例，把 function 內的 var 拿掉：
猜猜看，這兩組 console.log() 分別會印出什麼？
.
.
.
答案是 150 與 1 ...... 才。不。是。勒～～
答案是 150 與 100。

先別急著崩潰，剛剛說過「切分變數有效範圍的最小單位是 ""Function"" 」對吧？
但這句話的前提是你得在 function 內部再次用 var 宣告這個變數，否則 JavaScript 會再往外層去找到同名的變數，直到最外層，也就是「全域變數」。
換言之，由於在 function 內沒有重新宣告 x 變數，使得 x = 100 跑去變更了外層的同名變數 x：
導致在呼叫 doSomeThing(50) 之後再印出 x 的值自然就變成 100 囉。
覺得混亂了嗎？ 還沒完呢。
現在我們把 var 加回去，然後在上面加一行 console.log(x) 像這樣：
現在我們已經知道 doSomeThing(50) 與 x 的值是 150 以及 1 了，
那麼要讓各位來猜猜看，在 function 內的 console.log(x) 會出現什麼？
.
.
.
答案是 1 或 100 嗎？ (打叉)
再猜一次。
.
.
.
正確答案是 undefined。

醒醒啊，天還沒黑，別急著睡覺。
其實啊，剛剛那份程式碼在瀏覽器 (或者編譯器) 的眼中，是長這樣的：
看出差異了嗎？
雖然我們這次在函式內部有透過 var 對變數 x 來重新做宣告，但是呢，要是不小心在 var 宣告前就使用了這個變數，這時候 JavaScript
就會開始尋找變數 x 了，在自己的 scope 找... 啊，找到了！
雖然是在下面，但可以確認的是自己的 scope 裡面有宣告，於是就 很貼心地 「只會把宣告的語法」拉到這個 scope 的「最上面」...
(還記得前面介紹變數時講過的嗎？ 只要變數有被宣告，使用時就不會有錯誤，否則會出現 ReferenceError 的錯誤。)
最後就變成這個樣子：
而 JavaScript 的這種特性，我們稱作「變數提升」 (Variables Hoisting)。 [註3]
也因為這種奇怪特性的關係，強烈建議所有可能用到的變數都盡量在 scope 的最上面先宣告完成後再使用。
除了變數以外，函式有沒有提升？ 答案是有。
還記得本文一開始說過，函式的定義有分成幾種，其中也可以分成 var xxx = function() {...} 存入變數的「函式運算式」以及直接用 function xxx() {...} 定義的「函式宣告」對吧？
這兩種定義方式最大的差別在於，透過「函式宣告」方式定義的函式可以在宣告前使用 (函式提升) ：
而透過「函式運算式」定義的函式則是會出現錯誤：
與變數提升的差別在於變數提升只有宣告被提升，而函式的提升則是包括內容完全被提升。 除了可呼叫的時機不同外，「函式宣告」與「函式運算式」在執行時期兩者無明顯差異。
看到這裡，相信你應該對變數的作用範圍有了基本的理解對吧，在本文的最後我再針對「全域變數」與「區域變數」做一些補充說明。
其實在 JavaScript 這門語言中，沒有所謂「全域變數」這種東西。
更準確地說，我們所說的「全域變數」其實指的是「全域物件」(或者叫「頂層物件」) 的屬性。
以瀏覽器來說，「全域物件」指的就是 window，在 node 環境中則叫做 global。
舉個例子，我們在最外層透過 var 建立一個變數 a，像這樣：
一直以來我們都稱它叫「全域變數」對吧？
這個時候，請你在後面加一行：
看到了什麼？
這時你應該會看到剛剛指定給 a 的 10 這個數字才對。
那麼就可以來下個結論：
所以看到這裡，相信你應該對「全域變數」與「區域變數」有了更直接的理解吧！
最後分享一下，這是我在網友推特上看到的：

以後有人問你類似問題，相信你也可以抬頭挺胸自信地回答他囉！
來源: https://twitter.com/rayshih771012/status/930075889483726849
[註1] 函式呼叫：除了單純的 函式() 之外，還有 .call() 與 .apply()，在後續的篇章介紹 this 時會提到這些。
[註2] ES6 之後有 let 與 const 分別定義「變數」與「常數」。 與 var 不同的是，它們的 scope 是透過大括號 { } 來切分的。
[註3] 提升：提升看起來是將變數和函數的宣告移動到程式區塊頂端，但實際上是變數和函數的宣告會在編譯階段中先被放入記憶體，實際在程式碼中位置還是一樣，往上移動的說法是為了幫助理解。
花了好幾天的時間，「重新認識 JavaScript」JS 基礎篇終於告一段落了，各位對 JavaScript 有了基本的理解之後，接著我們要開始進入瀏覽器的部分了。
在接下來的部分都會為各位詳細的介紹。
下一篇：前端工程師的主戰場：瀏覽器裡的 JavaScript，我們明天見。",,"['函式是物件的一種', '函式', '定義函式的方式', '變數的有效範圍 (Scope)', '全域變數與區域變數']","['函式宣告（Function Declaration）', '函式運算式（Function Expressions）', '透過 new Function 關鍵字建立函式', '沒有 var 宣告的變數很危險！', '提升 (Hoisting)']","['沒有名字的函式？', '「全域物件」是什麼？', '什麼叫做全域物件的「屬性」呢？']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191514,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,10,"[Day10]React,我一個前端框架",dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1513182592000000000,593,"我那時候完成的freecodecamp 的前端認證我就決定要學react. 我選react 的最大原因是因為它是最大的前端框架, 加上我看104, react的相關工作最多. 而且當時angular在改版, 好像被批評太常改版跟改太大了. 阿 vue 當時沒考慮.
那我馬上上facebook react網站做它的教學, 結果發現怎麼他嗎的難. 完全看不懂. 而且觀念跟之前寫的ES5完全不一樣. 當時很多教學寫法也不一致, 有人用ES5, 有人用ES6, 有人用ES7+. 害我這個新手看得都軟掉了.
之後上了一些udemy課程, 參加react maker 的讀書會, 就比較了解了. 那我來分享一些react的基本概念.
組件使你可以將UI 劃分為一個一個獨立，可複用的小部件，並可以對每個部件進行單獨的設計.
接下來的範例我會用我的markdown 專案demo來做講解. (PS. 這是我第一個react專案, 寫的很爛, 請多多包涵)
這一個網頁有三個component: header, input, display.

每一個component可以設定自己的state. state允許React組件在不違反上述規則的情況下,根據用戶操作,網絡響應,或者其他隨便什麼東西,來動態地改變其輸出. 根據不同的 state（透過 setState() 修改）Component 會出現對應的顯示結果.
在我的App.js 連結, 我有個狀態儲存 使用者輸入的text. 然後以下有一些function 可以針對state來做變更. 譬如handleAddInput, 就是把輸入的input 塞進狀態裡面. 要記得改變狀態要用setState.
因為我們UI裡面有很多 component, 那component 跟 component 要對話要交流怎麼辦? 這時候就要用props. 所以以上的範例我們要把 this.state.text 跟handleAddInput 傳給Input component. 然後我在Input component 可以用 this.props 來接收 App.js 傳來的質跟function
好拉! 今天先介紹到這邊, 如果要玩demo surge 可以來這裡 或可以來這裡看code github",,"['背景', '基本React概念', 'state(狀態)', 'prop(屬性)']",['component组件'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191546,自我挑戰組,0,資訊技術解戈迪安繩結系列,6,IT｜軟體｜POIApacheMicrosoftOffice格式檔案讀和寫功能,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1513181411000000000,563,"怎麼會命名成 Poor Obfuscation Implementation
POI 套件從 2001 年就開始了初始專案，由於 MS 的封閉特性，Office 檔案格式並沒有開放，作者就戲稱這個檔案格式是非常難以被理解，很混亂的一種檔案，就用了 Poor Obfuscation 這兩個字，當然還是成功地被 reverse-engineered，成就了這個專案，除了 MS Office 軟體之外，我們現在也可以用程式產生 Office 檔案。
主要元件
Excel (XSSF=HSSF+XSSF)
HSSF, XSSF
Excel 分為兩種檔案格式，比較舊的是 HSSFWorkbook，檔案格式為 Excel 1997-2003 版的Excel，副檔名是 xls，XSSFWorkbook 是 Excel 2007-10 的版本，副檔名是 xlsx。
基本的階層概念為一個 xlsx 檔案 XSSFWorkbook，裡面有多個工作表 XSSFSheet，每一個 Sheet 下面有一個表格，裡面有多列資料 XSSFRow，每列資料中有多欄資料儲存格 XSSFCell。
階層關係
XSSFWorkbook -> XSSFSheet -> XSSFRow -> XSSFCell
物件與檔案格式對應關係
參考
Java 通過Poi api操作(read/write)Excel
Java Code Examples
如何使用 Apache POI 處理 Excel 檔案",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191489,自我挑戰組,0,Verilog從放棄到有趣系列,2,[Day2]tool安裝,Sheng,https://ithelp.ithome.com.tw/users/20107543/ironman,1513178987000000000,604,"今天先教大家安裝會用到的工具，如果有玩過FPGA應該都知道Xilinx這間公司，我們要用的工具就是Xilinx所提供的Vivado 2017.3這套軟體，因為這一系列的教學比較著重於行為正確性，大多的教學只需要跑模擬就好，所以如果你有其他可以跑電路模擬工具的話(ex: ModelSim)也可以用自己習慣的工具，不用特地下載Vivado沒關係，以下是安裝步驟，安裝完會簡單寫一個程式驗證工具軟體是否有安裝成功。
步驟一 先到Xilinx官網下載Vivado 2017.3，就根據作業系統下載，如果是Windows就下載第一個選項，Linux就下載第二個選項，開始下載安裝檔之前可能要你註冊一下帳號，大概花個5分鐘去註冊，之後就能繼續下載了。

步驟二 下載完之後它是一個Vivado的下載器，點開之後原則上會遇到幾個問題，第一個就是要選哪種版本，那這邊我們就使用免費的版本，這版本對我們來說就足夠了，接下來第二個問題是要安裝哪些功能，那為了節省Vivado占用硬碟太大的空間，我們就安裝基本的功能就好，如附圖，剩下的都不用勾沒關係，之後就是漫長的等待了。


安裝完之後就可以來寫第一隻程式了，首先我們先創一個專案

打完專案名稱接著下一步

接著我們要寫verilog並且跑模擬，所以我們就選第一個選項，RTL(Register Transfer Language)。
如果之前有寫好的verilog code可以在這邊include，沒有的話就下一步。

如果是要上FPGA板子的話，這邊是在include 板子的constrain file，constrain file內容包括對應的input output腳位 clock和 reset之類的宣告，目前用不到就直接下一步吧。

這邊是要選你要用哪塊板子實現你的電路，但目前我們這一列都只是驗證行為上的正確性，只要跑模擬就好，並不會在FPGA板上實際操作，所以板子可以任選沒有關係，那就照圖片的步驟往下做。

專案創完之後，需新增空的verilog(.v)檔，如附圖。

創完之後來寫一段簡單的小電路做測試。
寫完之後來寫一個簡單的testbench，目前都只是測試tool是否運作正常，語法往後幾天會再跟大家分享。




到了最後一個畫面代表使用上大致沒有問題，往後的操作不外乎就是以上這些動作，創一個專案，寫verilog code，寫testbench模擬電路是否正確，安裝過程中或著tool使用上如果有任何問題歡迎大家留言發問喔。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191543,DataTechnology,1,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",10,Day10-HadoopEcosystem之HBase安裝教學,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1513178952000000000,582,"HBase安裝模式與Hadoop相同，有Standalone、Pseudo-Distributed與Fully-Distributed，而這些名稱也是根據Hadoop的安裝模式所命名。比較特別的是Standalone與Pseudo-Distributed模式不一定要將資料儲存在HDFS上，但無法擁有Hadoop的容錯機制與分散式等優點，而Fully-Distributed 只能 運行在Hadoop上面。
與Hadoop相同，HBase原始碼也是由Java撰寫，所以也是需要安裝JDK並且設定JAVA_HOME。
另外，HBase是架設在Hadoop上面的DataBase，如果想擁有Hadoop分散式儲存的功能，一個Hadoop叢集也是必要的。
所以需要作下列的準備：
與Hadoop相同，Standalone是HBase預設的模式，啟動時會在一個JVM內運行所有HBase全部的daemon，包含Master、RegionServer與ZooKeeper。
使用local file system安裝模式：
hbase-site.xml 所設定的路徑如果不存在，HBase啟動時會自動建立。
如果啟動成功，可以使用jps指令來觀察HBase的daemon，其中會包含：
使用HDFS安裝模式：
備註：{hostname}為主機名稱，請依照自己的Hadoop Namenode所在的hostname修改。
與Standalone運作方式類似，差別在於Pseudo-Distributed的daemon是在不同的JVM運作。儲存模式也與Standalone一樣，可以使用local file system或是HDFS，設定方法也與Standalone模式相同，只要修改hbase-site.xml。
設定為Pseudo-Distributed模式：
如果已經啟動Standalone模式的HBase，務必請先關閉再重新啟動，可使用下列指令關閉：
或者是使用rolling restart重新啟動HBase，不必完全關閉HBase。
由於Fully-Distributed只支援運作在HDFS，所以必須先準備好Hadoop，Hadoop運作模式一樣可以使用那三種模式。如果是要在production環境運作，無論是Hadoop或是HBase皆強烈建議使用Fully-Distributed。
設定完成就可以啟動HBase了！
安裝完成後，可以透過 http://{HBASE_MASTER_HOST_NAME_OR_IP}:16010 web ui 來查看HBase叢集的狀況。{HBASE_MASTER_HOST_NAME_OR_IP}為HBase Master所在的機器。
無論是Standalone、Pseudo-Distributed或是Fully-Distributed，需挑選適用的安裝模式才能發揮HBase最好的效益，也能減少使用上的困擾。
如果想要快速體驗Fully-Distributed模式的HBase cluster，可以使用作者所撰寫的hbase on docekr，內有使用說明與教學，也歡迎fork並開PR。
介紹完了HBase安裝後，接下來要進入hbase shell的使用教學！",,"['事前準備', 'Standalone', 'Pseudo-Distributed', 'Fully-Distributed', '最後']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191523,自我挑戰組,0,服務桌從開始到進入資安領域系列,9,[Day9]服務桌的日常:linux操作-使用其它身份執行root權限,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513178030000000000,587,"在linux環境中，有著嚴謹的權限架構。(一種朕不給的你不能要的概念)
臨時需要使用管理權限的時侯，使用sudo指令暫時取得root權限。
設定可使用root權限的使用者，開啟終端機編輯文件sudoers。
登入root，使用commend line模式編輯shdoers文件。
在root ALL=(ALL)ALL之下新增[用戶名:test] ALL=(ALL)ALL

重新登入用戶[test]帳號試一試^^
sudo -su [管理帳號:root]
輸入用戶[test]密碼。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191335,Security,1,CEH之越挫越勇系列,8,[Day08]網路掃瞄-實作篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1513177367000000000,689,"這篇幾乎都會在講 NMAP 吧 XD
據說考試認證必考 (？)
因為網路掃瞄我們主要目的有三個：
(1) 線上主機
(2) 線上服務 → 著重在這兒
(3) 提權利用
在我們對網段兩眼一摸黑的狀況下，我們該怎麼進一步的了解呢？
打上 NMAP 指令後，會有所有指令的說明

掃瞄內部的網段，知道目前有幾台電腦有在線上 //用 Ping的方式 24 Port 去掃
可以看到 192.168.137.1 在線上，並且開了135、139、445、2179、3389 Port…
可以看到 192.168.137.140 在線上，並且開了53、88、135、139、389、445 Port…

可以看到 192.168.137.4 在線上，並在同網站有 4 個裝置在線上。

針對指定 IP 做快速掃瞄 //掃常用Port
-namp -F  192.168.137.202
-nmap -T5 192.168.137.202

掃瞄主機，並列出相關詳細的資訊
做完以上，那麼對於對方的反應是什麼呢？
我們可以用 wireshark 觀察。
或可以參考這篇： 鯊魚咬電纜：30天玩Wireshark 
WireShark 的路徑 @Kali：



做個小小的篩選：ip.addr == 192.168.137.202 //Wireshark 指令的應用也會考
可以觀察到192.168.137.202 的三向交握過程

//掃瞄作業系統 -A / -O
nmap -A -F 192.168.137.140
nmap -A -F 192.168.137.202
nmap -O -F 192.168.137.202

於是乎我們可以知道這兩台在線上主機的作業系統了 =v=+
如果你對於作業系統上的弱點很熟，或是剛好熟知該作業系統最近有什麼新弱點，就可以用來…

所以為了我們不要被掃瞄到，我們要將防火牆的設定打開。

於是我們在網路掃瞄的時候，會得到不同的回應：
使用正向問答：nmap 192.168.137.202 -F
就掃不到 Port 了 =3=+++

使用逆向問答：nmap 192.168.137.202 -sX -F
","['NMAP', 'WireShark', '開防火牆']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191541,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,10,[Day10]EasyFlowGP--系統管理工具(一)SQL註冊器,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1513175088000000000,591,"前幾篇的分享皆是提到系統設計工具，用於表單開發使用。
今天要開始分享EFGP另一個部分，系統管理工具。
系統管理工具 : 協助管理者進一步管理、分析、轉派和模擬表單。
眾多工具中，個人覺得SQL註冊器是管理表單的大好工具。
這工具管理著所有表單對資料庫的連結，SQL語法的部分也是
一併在這工具撰寫和修改，若語法需調整，可免去一張一張表單變更的困撓
也增加Web表單的安全性。
以往連結資料庫會寫在Form程式裡，資料庫的SQL語法也寫在一起。
想查看網頁的SQL指令只要頁面上按右鍵檢視原始檔，就可見""Select * from...""
對於資安來說這樣其實有不安全....
如何使用SQL註冊器?
Step1.到系統管理工具\SQL註冊器 新增

SQL代號 : 自行命名ID值。
資料庫代號: 選擇系統設計工具設定好的資料庫名稱。
(請參閱) [Day 2] EasyFlow GP--系統設計工具(一)系統管理員 : 講整合的設定
SQL 語法:填寫資料庫SQL語法，若要抓表單元件請以<#elementID> 取代，若抓全域變數則以<@globalValue>取代
設定可調用表單: 設定此SQL語法將應用在那些表單上。
設定可調用客製JSP:設定此SQL語法將應用在自行客製的JSP表單上。(以下會說明)
Step2.到系統設計工具\Web表單


-可應用在JSP客製的表單
在JSP表單中請先引用
<%@ page import=""com.dsc.nana.user_interface.web.tools.JspRegister"" %>
在賦予此JSP一個ID值 EX:myJspId
<% JspRegister.register(session,""myJspId"");	%>
將此JSP ID值設定在SQL註冊器，就可以應用囉。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191536,ModernWeb,0,認識Chrome開發者工具系列,10,元素面版-動態編輯樣式,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1513171913000000000,588,"昨天我們花了一點時間看了如何使用樣式控制台 (Styles pane) 來檢視樣式，今天我們則要來看如何動態編輯樣式。
再次提醒大家，我們在元素面版裡的編輯都是暫存在記憶體裡，當你重新整理頁面後這些內容都會消失
你可以使用樣式控制台來打開及關閉某個選擇器 (CSS selectors) 的樣式，當你的滑鼠移到選擇器的區塊時，你就會看到每一個樣式屬性的前面出現了一個 checkbox
你可以打開及關閉這個屬性 (被關閉的樣式會被加上刪除線)，並且效果會馬上出現在畫面上。

圖片1: 開關某個特定樣式
當要編輯某選擇器的屬性的時候，直接用滑鼠左鍵點選那個屬性或是那個屬性的值然後就可以開始編輯了。這個編輯器有支援自動完成，當你在輸入時它就會提供你
一些建議的樣式屬性跟值 (使用 Tab 或 Enter 鍵來自動完成)。編輯完成後，就像編輯文件物件模型一樣，在樣式控制台的空白處滑鼠按一下滑鼠左鍵就可以完成編輯。如果你想取消編輯，可以使用 ESC 鍵。

圖片2: 進入編輯模式的畫面
另一個編輯的方式是點選該選擇器的樣式來源，這時候開發者工具會帶你到原始碼面版，然後你就可以在這裡編輯。我自己很少在這邊編輯，因為常常我在調整樣式
時，也需要調整文件物件模型，如果你切換到原始碼面版了，就沒有文件物件模型可以參考了。
這邊要特別提到，如果你是在編輯文字顏色或是背景顏色，你可以在值前面的顏色小圖示上點一下，它就會打開調色盤讓你選擇顏色。然後如果你想切換不同的色彩模式，你可以在顏色小圖示上值上用 Shift 鍵 + 點一下滑鼠左鍵去切換不用的模式 (有 RGB, HSL, HEX 等可以選)

圖片3: 使用開發者工具提供的調色盤來選擇顏色
在這裡的編輯一樣有支援取消 (Undo) (Mac 使用 Cmd+Z，Windows 用 Ctrl+Z) 及重做 (Redo) 的功能 (Mac Cmd+Shift+Z，Windows 用 Ctrl+Y)
每一個元素的樣式中，都會有一個叫做 element.style {} 的選擇器在這個元素的最上方 (也代表它的權重較高)，當你新增或編輯這裡面的樣式，開發者工具就會把這些樣式加在文件物件模型元素行內裡 (Inline)

圖片4: 編輯行內樣式
就像我們昨天所討論到了，元素的擬類別選取項可以透過樣式控制台來檢查。它也可以用來編輯，一樣透過 :hov 小圖示來打開狀態下拉選單，選擇你想要編輯的不同狀態後，如果這個元素有定義這些不同的選取項，就可以對它做修改。

圖片5: 打開 hover 擬類別選取項後，就可以針對這個選取項進行修改
要在樣式選擇器裡新增屬性時，使用滑鼠左鍵在選擇器的大括號 {} 後方空白的區塊點一下，這時候就會出現一個空白的屬性讓你編輯。

圖片6: 新增一個空白屬性
另一個方法是先點選要新增屬性的選擇器的其中一個屬性，然後再用 Tab 鍵切換屬性，當切換到最後一個屬性之後，就會出現一個空白的屬性。
在選擇器中，你可以使用 Tab 鍵及 Shift+Tab 鍵在樣式及屬性中做切換
其實我很少用到這個功能，因為就像前面說的，樣式是可以開關的，但是如果你真的很想把某個特定的屬性刪除，你可以在點選那個屬性或是選擇它的值，然後用 Delete
鍵把屬性或是值刪除，然後再完成編輯就把這個屬性刪掉了。
有時候我們想要編輯的元素其實還沒有選擇器，所以是沒辦法編輯它的樣式的，所以我們可以使用右上角的小圖式 ，讓開發者工具幫我們自動產生一組選擇器，它會依照這一個元素的標籤名稱或是 ID 及 Class 來命名 (它有一個命名規則，但是我沒有研究)，新增後就可以直接開始新增屬性。
要編輯某個選擇器的方式跟編輯選擇器的屬性一樣，在選擇器上用點一下滑鼠左鍵就可以編輯了。
使用 .cls 的小圖示，它會出現一個小方框，讓你可以新增一組 class 名稱在目前選定的元素上。
如果大家還記得我們昨天有提到這個模擬圖，你也可以直接使用這個模擬圖來做元素長寬等數值的修改，只要在數值上用滑鼠左鍵點二下就可以編輯了。

圖片7: 直接在區塊模型上修改高度
今天我們很快速的把動態編輯元素樣式的方式跟大家介紹完了。動態樣式編輯是我每天的工作流程之一，而且每次完成編輯後我就會把完成的樣式從樣式控制台拷貝，然後貼回我的編輯器裡，存檔後再回來確認修改，這樣的流程是很快速而且可以準確的確認瀏覽器在樣式更動後的畫面。希望大家可以試試看 :)",,"['開關樣式', '編輯樣式', '編輯行內樣式', '編輯擬類別選取項 (Pseudo classes)', '新增屬性', '刪除屬性', '新增及編輯選擇器', '新增一個 CSS Class', '使用區塊模型模擬圖', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191534,自我挑戰組,0,網頁學習日誌系列,10,RWD:網頁版面轉RWD設定,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1513169746000000000,638,"RWD網頁有幾個重點要注意：
解決方法：用max-width自適應寬度


css
html
手機瀏覽表格，不重要的欄位可以在手機瀏覽時隱藏起來，只在電腦網頁顯示。但是表格資訊如果全部都要顯示在手機上，可利用overflow-x來左右滑動檢視完整表格資訊。

css
html
子元素則可在固定寬度內根據手機平板做縮放，兩個子元素menu(紅) 和 content(藍色)加起來要等於100%，就會隨螢幕視窗大小縮放。
html
css
下圖為在固定寬度600px內 裡面的menu(紅) 和 content(藍色)，隨螢幕縮放而有不同的寬度


要讓網頁只有單欄，可做下列修改：
a. 有float設定則改為none：清除浮動，不具多欄排列效果
b. 寬度改100%：設定為只能單欄顯示
c. 高度改padding top或bottom：當內容物多，用固定寬度會超出欄位，所以用padding內距 預留高度
css
結果如圖：

網頁常見點擊區域如按鈕、表單等需使用者互動區塊，尺寸不要設定太小
網站的在手機瀏覽時，按鈕如果太小，使用者體驗會很差
如下圖( 圖片來源 : 六角學院)
",,"['1. 網頁不要有X軸(下圖圈選處)', '注意：', '2. 父元素寬度設固定px，子元素內容改%', '3. 清除float浮動效果', '4. 觸控點擊區域']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191531,自我挑戰組,0,Vuex學習筆記系列,8,[Vue.js]Vuex學習筆記(8)-actions的核心概念,NomiSu,https://ithelp.ithome.com.tw/users/20107601/ironman,1513166623000000000,601,"Actions 類似於 mutations，但仍然有些不同：
我們這邊來註冊一個簡單的 action
Action 函數接受一個與 store 實例具有相同方法和屬性的 context 物件，因此你可以調用 context.commit 提交一個 mutation，或是透過 context.state 或 context.getters 來取得 state 和 getters 。
下一章我們介紹 Modules 時，就會對 context 有更多介紹，到時就會知道 context 物件為什麼不是 store 實例本身了。
在實際情況中，我們常會使用 ES2015 中的 參數解構 來簡化程式碼：
Action 透過 store.dispatch 方法觸發：
這樣看起來跟 mutations 的用法差不多，但是我們要記得 mutations 必須是同步執行，而 actions 則可以異步執行。
actions 同樣可以使用 payload 或物件的形式：
我們用一個更加實際的例子來調用異步API與分發多重 mutations：
上面的例子我們正在進行一系列的異步操作，並透過提交 mutations 來記錄 actions 產生的轉態變更。
我們可以在組件中使用 this.$store.dispatch('xxx') 分發 action，或者 使用 mapActions 輔助函數將組件的 methods 映射為 store.dispatch 調用。
actions 通常是異步的，那我們如何知道 Action 什麼時候結束呢？更重要的是，我們如何才能組合多個 action ，來處理更加複雜的異步流程？
首先我們需要先明白，當一個 action 返回 Promise 時，store.dispatch 可以處理返回（return）的 Promise ：
在其他 action 中也可以這樣使用：
一個 store.dispatch 在不同模塊中可以觸發多個 action 函數。在這種情況下，只有當所有觸發函數完成後，返回的 Promise 才會執行。",['Actions'],"['使用 Actions', '簡化程式碼', '調用 Actions', 'Payload', 'mapActions', '組合 actions', '在 actions 中使用 async / await']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191528,AI&MachineLearning,4,以100張圖理解NeuralNetwork--觀念與實踐系列,3,Day03：NeuralNetwork的概念探討,IcodesoIam.,https://ithelp.ithome.com.tw/users/20001976/ironman,1513164774000000000,681,"上一次我們以十幾行程式完成阿拉伯數字的辨認，心情應該會小小波動一下(應該還不到小鹿亂撞的地步)，如果我們以傳統的程式解法，不寫個幾百行，應該是不會罷手的，但是，第一次接觸 Neural Network 的朋友應該對程式碼內的函數及其參數有很多的問號，例如(先請在這裡下載並開啟 0.py 程式，對照說明):
最重要的是，為什麼 『十幾行程式透過甚麼原理』能準確辨識阿拉伯數字? 以下，我們就要從頭開始講起，其中涉及機率統計、矩陣運算、線性規劃、微積分等，筆者會盡量以圖表說明，不會有任何數學公式推導，讀者不需有太大的心理負擔(我不會把你當掉, 哈哈)，如需再深入，歡迎留言，筆者會盡力彌補不足之處，若尚有未逮，只能怪筆者能力不足了。
特別說明，筆者不是學者，本文所有名詞定義以淺顯易懂為最主要考量，如有不精準或謬誤之處，還請包容，也請不吝指正。
Machine Learning 演算法(Algorithms) 不只有 Neural Network，還包括 K-Means、Support Vector Machines(SVM)、Decision Tree、... 等等，基本上，都是希望透過資料分類(Classification)或分群(Clustering) 的方式，轉換為規則或知識，一般進行的步驟如下：
Neural Network 是參考生物神經系統的結構，神經元(Neuron)之間互相連結，由外部神經元接收信號，再層層傳導至其他神經元，最後作出反應的過程。

圖. 神經元構造，圖片來源: 類神經網路初探 基本架構與感知器

圖. 神經組織，圖片來源: Study of Dendrimers in Cerebral Palsy Animal Model Points to New Therapeutic Target
將神經系統抽象化後，就類似以下結構，這就是 Neural Network 的概念。如下圖 Input Layer 就是接收信號的神經元，Hidden Layer 就是隱藏層，而 Output Layer 就是做出反應的輸出層，而各神經元傳導的力量大小，稱為權重(Weight, 以W表示)，也就是模型要求解的參數，如果求算出來，我們就得到一道公式，只要輸入信號，經過層層傳導，就可以推斷出結果了。

圖. 人工神經網路，圖片來源: 計算機視覺與卷積神經網路
Hidden Layer及Output Layer上每一個節點(圓圈)的值等於上一層所有節點的加權總和，如下圖左，這個公式是不是有點熟悉? 它就是統計學的簡單迴歸(Regression)，迴歸要計算權重值(W)，我們可以用『最小平方法』(Least Square)，最小化『預測值與實際值的差距之平均值』(如下圖右)，或者使用『線性規劃』(Linear Programming) 最小化目標函數，也可以求得W。
但是，上述模型只能解決線性分類，切割過於簡單，Neural Network 作了以下的強化，以解決一般性的問題：
Activation Fuction有很多種，可依據問題的本質，挑選適合的函數訓練模型，請參閱下圖，Sigmoid 函數就能使Y的範圍限制在[0,1]之間，中間只有一小段模糊地帶，適合用於二分法(真或偽)，另外 softmax 函數，可以將Y轉為機率值，且所有類別的機率總和等於1，就適合多分類，最大值就代表可能性最大；上次還有用到 relu函數，它是忽視負值，Y的範圍限制在[0, ∞]之間，還有其他函數，就是依照資料及模型的特性挑選就對了。

圖. Activation Functions，圖片來源：Activation Functions_Neural Networks
模型經過以上的強化，我們就沒辦法用單純的數學公式推導，求出權重(W)，因此，一般會改用『梯度下降法』(Gradient descent)，以逼近法求解，這就是優化(optimization)的過程。梯度下降法就好比『我們在山頂，但不知道要下山的路，於是，我們就沿路找向下坡度最大的叉路走，直到下到平地為止』，要找到向下坡度最大，在數學上常使用『偏微分』(Partial Differential)，求取斜率，一步步的逼近，直到沒有顯著改善為止，我們可能已經找到最佳解了，過程可參考下圖說明。

圖. 梯度下降法(Gradient descent)，圖片來源：Batch gradient descent vs Stochastic gradient descent
希望以上說明，沒有讓你搞昏頭了，Neural Network 的處理流程如下：

圖. Neural Network 處理流程
請對照上次的程式碼，我們要詳細解說程式結構了：
面對一個問題，我們要先定義要解決問題的目標，如果是損失(Loss)，通常的目標就是要使它最小化，程式碼的第21行，loss='categorical_crossentropy'，就是選擇損失函數(Loss Function)的種類；同時定義模型計算出來，我們要評估的成效指標，是要以『準確率』(Accuracy)、『精準率』(Precision)、『召回率』(Recall)或其他指標來衡量(請參閱 https://blog.argcv.com/articles/1036.c 說明)，Keras 提供的衡量指標只有各式的準確率，但可以自訂衡量指標。
再依每一層(Keras 稱為 Dense)的特性及需求，指定 Activation Function，例如第16行，Input Layer至Hidden Layer，我們排除負值，採用『relu』， Hidden Layer 至 Output Layer 使用『softmax』，求取每一個數字(0~9)的預測機率。kernel_initializer='normal'，表示梯度下降求解的起始值，這裡選擇使用『常態分配』的亂數值，請參考 https://keras.io/initializers/ ，起始值選擇不佳，可能會影響求解的速度與答案，通常不要選太奇怪的值就好。
第24行 將已知資料的結果(Y)作預處理，將Y值轉成10個數字，每個數字為0或1，例如7就轉為0000000100，代表它是 0~9 十個分類的哪一個，這樣才能作矩陣運算。
第35行 進行模型訓練，由於損失函數可能是一個非常複雜的曲線，或逼近最佳解的幅度過小，都會使得優化速度過慢或不穩定，所以我們要限制求解的最大訓練週期(Epochs)，以免跑不完。另外，梯度下降若每次都使用全部資料求斜率，可能會花費太多時間，所以通常會採用隨機抽樣，分批求解，batch_size就是指定一批要抽多少樣本。
第44行使用 predict_classes 函數，得到最大機率值對應的阿拉伯數字，就是預測的結果。
所以，一個模型的好壞取決於我們採用何種『損失函數』、『成效衡量指標』(Metrics)、Activation Function、優化器(optimizer)、隱藏層數(Layers或Dense)、kernel_initializer以及它們使用的參數，這些都是要依據需求反覆實驗，才能得到較好的模型，使預測更準確。因此，有人說 Neural Network 預測能力驚人，但每個人預測的成效可能都不同，聽起來，資料科學家像算命師，檔次不同，就有不一樣的結果，所以，筆者個人認為一定要了解運作原理，才能駕馭這個強大的工具。建議拿到問題時，先不要忙著解題，最重要是多作實驗，與資料先培養感情，再擬定方向，解決問題。
這次讀起來應該很累人，其實我已經忍痛刪了很多的內容，希望你還不會因此而轉台，下一篇我們就輕鬆一點，針對上次程式作一點有趣的實驗。",,"['前言', 'Machine Learning 概念', 'Neural Network\xa0概念', '程式解說']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191405,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,8,網路爬蟲Day6-爬蟲進階:非同步爬蟲配上多執行續,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1513162983000000000,618,"在開始看這篇文章之前，非常建議大家先熟悉個別的技術: 非同步技術以及多執行緒網頁爬取技術。以下，我想針對「他們的差別」以及在「多執行緒的技術理解焦點」兩個部分進行簡單的說明。
首先，關注到他們的差別。所謂的非同步技術，指得是我們每發出一個requests都要等待server端的回應，而非同步技術可以充分利用這個等待時間，同時再發出其他requests，直到server成功回應時，才開始用同一個執行緒出處理回應回來的資料。必須注意的是，他並不會占用到多的CPU核心數，只是充分利用在同一個核心上的運算量而已。承接著，上面這段解釋，大家應該很好想像，多執行緒在做的實情，無非就是，使用多個CPU核心去處理事情，這邊要比較注意的是，假設你的CPU核心不夠，硬是將執行緒的數量開的比核心數多，將可能會被強制終止某些執行緒。
再來，必須關注到「多執行緒的技術理解焦點」，如果還沒碰過這個技術，大家可以看完這一段落之後再開始學習多執行緒，相信會大有幫助。我想大家在理解這個技術的時候，可以先建一個手動的多執行緒，也就是把一個要跑回圈的data list，拆成三段或四段，在不同的terminal針對每一段data list執行同一支的程式。在這過程中，你會關注到一些麻煩，像是要怎麼裁切data list、或者裁切了之後會不會有些執行緒很快執行完，有些執行緒則處理很久。
因此，在面臨到這些狀況時，python內建了一個非常方便的類別queue，這個queue跟list很像，除了使用上有一些小差異之外(list的append、queue用put，list的讀取一般用for迴圈，queue則直接使用get配上while迴圈)。其中最大的差別在，list使用for迴圈可以被重複使用，但是queue中的data只要get出來之後，就會從queue裡面消失。而也正是因為這個特性，上多執行緒在取出queue的data的時候，完全不用煩惱前一個執行緒執行到哪，也不需要等待執行完才能執行下一個data，只要持續地從queue取出要處理的data即可，直到取完最後一個queue中的data。如此一來上述問題也就被解決了。
這份這份程式碼比較長，也比較繁雜，我上面有標上號碼，大家可以依著號碼的順序來看，比較好理解。","['概述', '專案', '程式碼']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191434,自我挑戰組,2,GAME30天系列,3,大綱（下,我是一支小小小小鳥,https://ithelp.ithome.com.tw/users/20107379/ironman,1513162615000000000,1121,"3 days
3 days
15 days
本人在開賽前兩個禮拜經由同事邀請後參加, 雖覺本人資歷尚淺, 且技術能力不足, 但最終還是選擇參加自我挑戰組, 參加後定會完成30天鐵人發文, 不拖累團隊, 若真的太忙或是遇到技術能力卡關, 會改以翻譯英文技術文章為主, 請多多包涵, 此篇大綱為日後實作願景, 題目為 “30天完成一款雙人連線遊戲”, 文中所用技術皆為第一次使用, 本人會盡力實作, 但不保證可以全部完成.
針對本人第二篇文章點閱率無故衝高, 被推上熱門文章一事, 本人猜測為內文用字太過爭議性,話題性, 所以本人已將此篇及日後文章存擋全數修改, 有疑慮的字眼詞句一併移除, 所以日後所ＰＯ文章皆並非本人撰寫風格, 至於修改個人檔案改了很多次都沒有反應, 本人會繼續嘗試修改
IT邦幫忙鐵人賽主旨為探討最新資訊科技端技術, 討論請以交流本專題所用技術為主, 所有有關 “露天拍賣” 公司名譽之發問, 本人之後一概不予回覆","['CSS3 Animation', 'Facebook SDK intro', 'Game 實作', '聲明']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191526,DevOps,1,Ops的轉職之路-Puppet從入門就放棄系列,3,Day3-Puppet的架構,shazi7804,https://ithelp.ithome.com.tw/users/20089211/ironman,1513162072000000000,600,"本系列文資料可參考以下：
前面兩天講了不怎麼技術的廢話之後，終於要在以下的 27 天會有比較""技術性""的語言了啊 ...
因為我習慣了解一個新事務時先從最簡單的開始看起 XDD，所以第三天我打算先來談談 Puppet 的整體架構，這樣看起來比較不容易放棄 ...

基於 pull-based 的架構 (官方建議)
Puppet 的 Master / Agent 架構通常適用於有規模的環境佈署，由 Puppet Master 提供 configuration，在每台要被佈署的 Node 安裝 Puppet agent 向 Master 獲取 configuration。
Puppet Master 通常由 N + 1 台 Puppet Server 構成，必須要能夠承受所有的 Puppet agent 訪問，而 Puppet agent 通常透過 service 運行或是 cron 來定期向 Puppet Master 更新 catalog。
Agent 透過 catalog 更新完畢後，將 report 回傳給 Puppet Master。

基於 push-based 的架構
無 Master 又稱獨立佈署的架構，透過 Puppet apply 進行單機佈署的方式達成。
Masterless 很常被應用於 Docker or Vagrant 等 image 環境使用，通常適用於數量少的環境。

Puppet tasks and plans 是 puppet 推出基於 push-based 的一次性的臨時佈署，與 Ansible 的方式相似，彌補 Puppet 長期以來使用 pull-based 必須等待 deploy time 的缺點。
可以使用 Bolt 開源專案或是企業版的 Puppet Enterprise Task Management (available in Puppet Enterprise 2017.3) 來實現 Tasks and Plans。
佈署架構上主要分為三種，每個佈署的方式都適應不同的場景，從能適應超大型架構的 Master / Agent 架構和常用在 Images 的 Masterless 架構，或是最近才剛出的 Tasks and Plans 用來解決臨時性的需求，Puppet 在這些階段都算是都有解決方案了。
經過時間的演變，Puppet 不再是以前那個老牌頑固不變的組態工具，從這幾年可以看到 Puppet 有聽到使用者的聲音而做了改變，現在變化的作法更多也更廣。",,"['Master / Agent', 'Masterless', 'Tasks and Plans', '不負責碎碎念']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191525,SoftwareDevelopment,0,認識scala系列,10,Scaladay10(Loop),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1513161978000000000,553,"for
foreach
使用 withFilter 過濾元素
迴圈搭配條件式 :
zip 可指定 index 開始的數字，zipWithIndex 則是從 0 開始 :
for 迴圈多個計數器變數的寫法 :
透過 Loop 及 yield 處理過元素後，可產生新的 collection :
scala :",,,['總結'],"['scala 迴圈的寫法很多種，但這邊大概整理成 4 項，根據需求來決定要使用哪種寫法 :', '循序取得 collection 元素．', '需要有 index 取得 collection 元素', '需要多個計數器時', '迴圈需要產生一組新個 collection 物件']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191521,ModernWeb,0,Expo---跨平台App開發從零到上架系列,9,ExpoDAY9---Audio&Video,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1513161006000000000,566,,['Expo DAY9 --- Audio & Video'],"['前言', '現在就做看看', 'Refs']","['Expo', 'React Native']",,,['tags: day9 iThome鐵人賽2018 ReactNative Expo AV Audio Video'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10191275,自我挑戰組,3,使用PHP串接金流相關API系列,3,Day02-Linepay(1)申請測試帳號,royal801991,https://ithelp.ithome.com.tw/users/20107301/ironman,1513160523000000000,1583,"首先登場的是：
穩居 2017 年 PTT 信用卡版前段班的 LINE Pay

除了請出寶劍和仲基代言，還端出了不限通路一般消費 3% 回饋，連繳稅都有 1% 回饋。
 回饋的 LINE Points ℗ 目前可以在這些地方使用：
✔️ LINE Pay 合作通路
可以看出 LINE Pay 在網路合作較積極推廣，合作商家遠多於實體通路，或許也是因為 LINE Pay 開放金流 API ，鼓勵大家使用，網路商家就能夠快速將網站串起安全的支付方式。如果想要成為 LINE Pay 的合作廠商，這裡 有完整的相關說明可以參考。
申請 Sandbox 的步驟如下
建立Sandbox
立即申請Sandbox帳號
確認Sandbox帳號資訊，LINE Pay 會將測試帳號密碼寄送到申請時填寫的信箱

使用email上的帳戶資訊即可 登入 Merchant Center

確認Link Key (取得連結金鑰)
① 輸入信件中的密碼

② 按下檢視
      即可取得串接 API 時需要的 Channel ID  & Channel Secret Key

註冊付款伺服器之IP成為white IP

串接及測試
連結至API串接技術文件
",,,"['LINE Pay', 'Sandbox']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191522,SoftwareDevelopment,0,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,7,Day07-寫SpringBoot的Unittest,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1513159721000000000,575,"在我們服務開發到一定階段後, 你就可以一邊開始寫測試案例了.
不管你公司有沒有規定要寫, 我覺得寫測試都是工程師對自己產出負責的態度與方式.
測試不會讓你完全沒有 bug 只是減少一些錯誤發生的機會,
也對日後要接手你專案的人幫助他測試改的到底對不對.
你寫了測試, 日後才有可能談所謂 CI CD DevOps 自動化.
你在外面也會聽到有些公司在說我們也要 CI CD 邁向 DevOps, 講了大半年都沒落地...
負能量專欄：實現才叫夢想，不然你都是幻想
從不起眼處扎根本事, 讓我們從測試開始吧
先看我們的 /test/resources/application.yml
上一篇多少都有提到就不重複介紹了
接下來我們的測試 BookApplicationTests.java
說明一下我們這樣測試是真的會啟動一個 H2 資料庫, 並不用額外去寫 mock 的代碼, 其實就是越接近真實越好.
這個呢, 是讓測試啟動的時候隨機去聽一個 port, 避免測試主機上大家都會去搶特定一個 port
你會想說測試時 port 是隨機...那要怎麼測勒?
我們用了這個 TestRestTemplate, 好像是比較後來 Spring 針對測試時的工具,
用這工具啊...就不用給完整 url , 給 uri 部分他就自己可以幫你打到正確的 port, 像下面這樣
這樣寫測試方便簡單又接近真實資料庫狀況呢~~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191448,ModernWeb,1,Go！從無到打造最佳行動網站系列,3,Day3初次見面Go,網襪工程師,https://ithelp.ithome.com.tw/users/20107302/ironman,1513159360000000000,1737,"Go是一個編譯語言，意思就是他不像Javascript、PHP一樣，按下執行時就馬上運行程式碼，必須先透過編譯器，將程式語言轉換成電腦看得懂的語言，才能夠執行程式；淺見的推論大概是因為它也是一種靜態強型別的語言，嚴格的規範變數的型態，對Coding 來說確實有不少的好處，程式碼也易於維護。
我們從官網提到的幾個特色來聊聊：
看的出來作者，在設計這套程式語言，盡量用一些較為簡單的詞句以及易懂的文字組合而成，我在思考什麼叫做Simple的時候，想到在學Java的時候，必須要Import一些函式庫，每句程式碼好像在比看誰的長，誰用的函示庫較多，但是Go更像是精簡版的Java，你可以很輕鬆的從github匯入套件。
我們也知道在維護程式碼的時候，時常會遇到大家的排版不一樣，GoLang解決了一些這樣子的問題，像是在每行程式碼結束時不需要再加上分號(;)，還有大括號的位置也不能隨意地放置，官方也提供了fmt工具，讓你的程式碼看起來更簡潔，更容易閱讀。
目前對可靠的運行這方面還沒有太多的研究，但知道有越來越多的公司願意將既有的技術慢慢的轉移到Go上面來開發，外國有一個知名程式語言統計平台tiobe，針對我們在網路上常使用的語言做統計，透過搜尋引擎的結果下去做分析，在2016年中後有越來越多人的關注，我想可能有越來越多人在使用吧！在2017年參加ModernWeb開始聽到在台灣有部分的人開始推廣GoLang這套程式語言，甚至有許多nodejs的大神紛紛的向Go靠攏e.g. TJ Holowaychuk -Farewell Node.js  有興趣的可以點連結看看；但這也間接證明了GoLang的可靠度。
對於這方面自己還有些能力上的不足無法更深入地去探討，但也歡迎有經驗的朋友可以提供。
網路上有許多的文章，來解釋Go與其他的程式語言來作比較。在國外有間公司(Scaledrone)，它是一間提供即時訊息推播的平台，處理每小數以萬計的訊息，這需要強大的server來提供服務，原本公司是使用Nodejs 來處理這些訊息，但後來轉到了Go，它們解釋Go傭有強大的平行處理的模式，減少了伺服器對記憶體的使用量，減少了它們的負擔，但它們最後也有建議，因為Nodejs本身就是JS語言對於Web Engineer來說，相對的好入手，網路上的資源也相較於Go豐富，如果屬於低用量的模式，也可以考慮Nodejs。這也說明了Go，對於Performance也不遜色於Nodejs。
Scaledrone 發表的文章，有興趣可以閱讀
又到了每天的專欄時間了，昨天其實很忙沒有什麼時間可以減肥，所以只好增肥，買了一個在南部非常火的飲料店麻古茶坊沒有任真看的人都會覺得他是麻吉，喝了一杯飲料叫做葡萄柚綠茶，覺得很好喝，通常點無糖，因為他們的糖實在太誇張的甜，以後我來當Youtuber介紹飲料好了，通常大家都叫我 飲料達人。今天減肥進度 0。
增肌減脂
通常要減肥，最重要的是把我們的體脂肪降低，達到減肥的效果，但如果忽略了肌肉的重要性，很可能你減掉的是肌肉，透過不同的訓練方法，才能夠保持一定的肌肉量，又能達到減脂肪的效果喔！
其實我沒有網襪，不過覺得網襪工程師好像很厲害。
如果你有興趣捕魚的話，或許你會喜歡網襪
By 網襪工程師",,,"['一、Simple (簡潔的語法)', '二、Reliable(可靠的運行)', '三、Efficient(高效率的運算)', '減肥專欄', '每日一句']",['小知識'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191515,ModernWeb,2,邁向JavaScript勇者之路系列,10,另一種方式介紹JavaScript閉包,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1513159069000000000,678,"閉包解釋非常多，這裡先透過幾個方式說明一下閉包是什麼：
這個範例用花錢的概念來說明，我們每次都會傳入不同的金額，並且把剩餘的金額存在內部作用域。
閉包就是存取內部的函式，所以直接使用 buyItem()(100) 兩個括號就是呼叫內部的函式。
幹麻要這樣？
這樣還沒完，目前只是一次性運作，來調整一下程式碼。
這個的行為是直接去操作內部的錢包，就像是直接花費一樣，接下來我們會用扣款的概念，不斷的使用錢包內部的金額。
接下來不要直接呼叫，而是將函式賦予在另一個變數上，這樣的方式就會將 myMoney 這個變數存在內層的作用域，然後每次執行後不斷更新此值。
然後勒？
小明拜訪完漂亮阿姨以後，接著遇到 Rich 的朋友 ""杰倫哥""，杰倫哥與小明去四處揮霍，小明也想趁此機會計算一下杰倫哥的花費狀況。透過閉包的方法，小明可以用同一個公式算出兩個人剩餘多少錢。
以上片段建議分段執行，更能理解其中的過程：
要了解閉包，就要多了解函式的作用域，掌握 變數 的作用域及函式的運作原理，此篇章難度就不會很高。",,['範例'],,"['直接呼叫內層函示', '將外層函式賦予到另一個變數上', '多個具私有變數的函式']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191388,Security,0,資安的學習心得及分享系列,10,DAY10木馬程式,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1513158830000000000,606,"接著上一篇提到的，到底什麼是木馬呢?其實木馬程式他與我們一般常見的病毒不太一樣，因為木馬程式不會自我繁殖，他也不會去感染其他的套裝軟件。例如故事提到的，木馬他利用了偽裝、潛藏、攻擊。

當然木馬程式他並非只會這樣。木馬程式具有隱蔽、自動啟動、欺騙、自我恢復、破壞、傳輸資料的行為特徵，並透過偽裝吸引用戶下載執行或安裝，提供種木馬者打開被種者的電腦門戶，使種木馬的人可以任意毀壞、竊取被種者的文件或操作畫面，甚至遠端操控被種者的電腦。如下圖:

舉個例子來說，通常一方會藉由發送免費軟體給用戶(在這稱使用者)，當然使用者會在這個軟體上留下資料(例如:用戶想要使用軟體，所以他會去註冊，因此會留下個資)
再舉個例子:如果今天軟體是駭客(不良人士)發送的，那麼他只要放個木馬在軟體裡，他就可以隨時隨地的去啟動木馬，做他想做的事情(竊取個資、破壞、操縱等)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191517,ModernWeb,1,用範例理解Vue.js系列,3,用範例理解Vue.js#3：VueInstance&InstanceLifecycleHooks,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1513158733000000000,2363,"
每個 Vue 的應用都是通過 new Vue() 來建立 Vue Instance
下面建立了一個名為 vm 的 Vue Instance，「vm」為 view model 的簡稱。
view model 來自設計模式 MVVM - model、view 和 view model。
在實體化時，可傳入一個選項物件，結構會像是這樣：
每個 Vue Instance 在建立時都會經歷一系列初始化步驟，例如，需要設置數據觀察，編譯模板，將實例掛載到 DOM，以及在數據更改時更新 DOM。在初始化過程中，它還運行稱為生命週期鉤子 (Instance Lifecycle Hooks) 的函數，讓開發者可在特定階段添加自己的代碼。
例如：created 鉤子可以用來在創建實例之後運行代碼：
附上 fiddle (https://jsfiddle.net/hunterliu/8fw120n2/)
另外還有其他鉤子將在實例生命週期的不同階段被調用，比如：
注意：鉤子中的 this 指向調用它的 Vue Instance。
下圖說明了 Vue Instance 的生命週期。
伴隨著對 Vue 的了解，整體的概念也會更清晰。
在看範例之前先附上官方 Lifecycle Diagram，方便對照。

可以從 Lifecycle Diagram 看到這些鉤子有：
在 Vue Instance 初始化之後，但在 data observer 和 event/watcher 被設置之前被執行。
不精確白話文為：此刻你無法調用 data 及 methods。
Vue Instance 已初始化完成，已設置 data, computed, methods, watch/event callbacks，但尚未開始mounting階段，且 $el 目前也未掛載。
不精確白話文為：此刻已經可以調用 data, computed, methods, watch等數據或函式。
在mounting階段開始前被調用：render function首次被調用。
選項物件中的el被新創建的vm.$el替換，並掛載到到 vm 上，並調用mounted這個鉤子。
數據被更新時會調用，發生在 Virtual DOM re-render 和 patch 之前(連結：Day4: Virtual DOM)，可以在此時更改狀態數據，並不會增加重新渲染的成本。
由於數據更新導致 Virtual DOM re-render 和 patch 之後會調用updated這個鉤子。
不精確白話文為：由於updated被調用時，DOM 已經更新。所以在此時更新數據很可能會導致updated無限循環的被調用。
在 Vue Instance 被銷毀前被調用，因此 Vue Instance 在beforeDestroy中仍可運作。
不精確白話文為：Vue Instance 可以在此時做垂死前的掙扎。
在 Vue Instance 被銷毀後被調用，此時 Vue Instance 所有東西會解除綁定，事件監聽也都會被移除，子實例也會被銷毀。
用一個範例逐步看到所有的鉤子被調用，並在這個過程中理解被執行的原因。
首先定義一個 Vue Instance 為 vm，而 data 中 msg 的值為Hello Vus.js，並且當每個鉤子被執行時，簡單的用console.log記錄該鉤子被執行。
注意：此時 Vue Instance 中的選項物件暫時還沒有指定el: '#app'，也請觀察以下四個步驟 HTML 的變化。
看範例時請打開 console。
若此時我們直接運行以上代碼，會發現只有beforeCreate和created被執行，因為在整個 Vue Instance 的生命週期執行到created之後，會先判斷是否有el這個選項，因為這邊並沒有定義el，因此需要等到vm.$mount(el)被呼叫時，整個生命周期才會繼續進行。
此時的 HTML 顯示 {{msg}}。
附上 fiddle beforeCreate & created
若添加以下代碼：
beforeMount和mounted會被執行，而在範例中額外添加了setTimeout為的是明顯區隔Create和Mount分開被執行。
此時的 HTML 顯示 Hello Vus.js。
附上 fiddle beforeMount & mounted
當 vm 中的 data 有異動時，例如修改 msg的值：
beforeUpdate和updated會被執行。
此時的 HTML 顯示 change msg。
附上 fiddle beforeUpdate & updated
可以透過 vm.$destroy()銷毀 Vue Instance。
beforeDestroy和destroyed會被執行。
此時的 HTML 顯示 change msg。
附上 fiddle beforeUpdate & updated
完整測試範例不只是把所有的鉤子執行一遍，也觀察了數據和DOM的變化。
看範例時請打開 console。
Lifecycle Hook 完整測試範例",,"['Vue Instance', '參考資料']","['建立 Vue Instance', '傳入選項物件', 'Instance Lifecycle Hooks', 'Lifecycle Diagram', '用範例逐步看  Create, Mount, Update, Destroy', '完整測試範例']","['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'beforeCreate & created', 'beforeMount & mounted', 'beforeUpdate & updated', 'beforeDestroy & destroyed']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190625,ModernWeb,1,Next.js+各種套件組合系列,10,Next.js&ApolloData(一)基本設定,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513158396000000000,546,"介紹
GraphQL 正紅，ApolloData 在 GraphQL 的包裝上非常用心，提供了 Cache 還有一些網路層面架構的分析包裝與語法更簡便架構更清晰的功能，讓使用GraphQL 前後端都非常的方便 官方也提供了一個 Next.js版本 提供快速入門參考
如果有興趣也可以參考 Polo 的另外一個比較詳細的介紹 ApolloData 鐵人賽文章
https://ithelp.ithome.com.tw/articles/10190943
先來看看在範例中會用到的套件除了Next.js基本的會再額外再安裝以下套件
一般在流程建立上會事先設定 ApolloClient 放入 ApolloProvider 的 client 參數再包在TopLevel Wrap ，這樣底下的元件就可以直接使用這個設定檔了，在純 SPA 的設定上比較單純但在 Next.js 設定上有分 SSR 所以來看一下程式碼，因為程式碼較多所以說明就直接備注在程式碼
ApolloClient
設定 ApolloData Provider
總結
在 Next.js中使用 ApolloData 設定檔中，要注意的依然是 SSR 的部分，在isomorphic-fetch有些要補在 SSR 後端的 fetch 這類的設定要記得不然很容易漏掉，另外 SSR 的另外一個重點就是他使用前端的 getDataFromTree method 去調用資料 在後端建立ApolloData節點，以上是 Next.js 在ApolloData建置時候注意的地方
官方 Next.js ApolloData範例
https://github.com/zeit/next.js/tree/master/examples/with-apollo",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191518,ModernWeb,0,挑戰CSS30天系列,10,day10_text-align&text-decoration,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1513158004000000000,517,"text-align 屬性是用來設定文字是如何對齊。可能的值包括：
left： 靠左對齊
right： 靠右對齊
center： 向中間對齊
justify： 左右對齊
text-decoration 屬性是用來設定文字上有什麼裝飾。可能的值包括：
underline: 文字下加上一條線。
overline: 文字上加上一條線。
line-through: 文字中間加上一條線劃過去。
範例如下：",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191463,DataTechnology,0,GraphQL+ApolloData入門系列,7,ApolloDataClient&React,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513158004000000000,517,"介紹
ApolloDataClient 在 React 部分提供了 React Native and Expo 可以直接用的功能，對於各種的 React Router 也友善支持，SSR部分也很容易設定，除了 HOC 用 Recompose 在組合ApolloData更有彈性 ， Next.js 已經是 React 主流SSR框架之一，ApolloData 也為 Next.js 使用者提供一個使用範例，可以更容易使用
官方範例
https://github.com/zeit/next.js/tree/master/examples/with-apollo
開始使用 React ApolloClient，至於ApolloClient 設定方法可以參考 前篇 https://ithelp.ithome.com.tw/articles/10191332 ，
這裡的差異性主要是 React 需要使用 ApolloProvider 包在TopLevel 並且給他client設定檔，
以下是 React 基本設定
使用 React 發出一個 Request ，Client 的語法都是使用 gql Es6 template literals寫作方式，ApolloData 2.0 使用 import gql from 'graphql-tag' ，  gql 的方式來寫作 Json payload (1.X的引用gql套件不一樣這邊要注意)，另外這個元件必須有被 Wrap ApolloProvider，發出request 方法只需要使用 graphql Hoc 把 gql 與元件綁定，這樣就可以做 Request 發 Query 到設定檔指定的目錄的位置
總結
ApolloData 提供了 React graphql HOC綁定 gql 語法 再把結果當作 Props 傳遞到元件之中
，前端工作只要寫好 Json payload 直接透過 graphql(語法)(元件) 綁好 一切就搞定了，上面案例如果Query有打資料回來就可以在元件中的 props.data 找到 server 回傳資料",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191516,DevOps,1,Nightwatch101：使用Nightwatch實現End-to-EndTesting系列,3,Nightwatch101#3：環境建置,cythilya,https://ithelp.ithome.com.tw/users/20092232/ironman,1513157988000000000,3947,"
Node.js 和 npm 是必須的。
安裝最新版的 Nightwatch。-g 表示全域安裝，讓 Nightwatch Test Runner 不侷限在特定專案才能使用。
安裝成功後，可使用 nightwatch -v 檢視版本號。

備註：使用 npm install nightwatch --save-dev 的方式安裝，可讓我們根據專案需求而使用不同版本的 Nightwatch 外，也能在 package.json 中一目了然目前跑測試所用版本，比起全域安裝是更好的選擇。
安裝 Java Development Kit（JDK），至少版本 7 以上。
可使用 java -version 來檢查目前所用版本。如下，version string 1.8x 表示是版本 8。

下載我的範例並移動到此資料夾底下。
方法 1：在 package.json 設定的 npm test 會執行本專案下的 Nightwatch Test Runner 並指定環境為 local 以進行測試。

方法 2：使用全域安裝的 Nightwatch Test Runner 進行測試。

昨晚當我正在一邊吃晚餐、一邊跟廚藝小鮮肉討論人生志向，還一邊看著莎莉賽隆的極凍之城的時候，群組傳來類似「WTF」的 X 聲，原因附圖如下。

點這裡來看看到底有多搞笑-30天糞ＧＡＭＥ 前言 1/10
這樣的文章進了當天的前 10 熱門榜，至今累積 1567 的點閱率，誰還要認真寫技術文 XD
網誌版。",,"['Step 1：安裝 Nightwatch', 'Step 2：安裝 Java Development Kit（JDK）', 'Step 3：下載專案', 'Step 4：安裝相關檔案', 'Step 5：啟動 Nightwatch，並進行測試', '後記']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191512,自我挑戰組,0,如何用電商一個月從0賺到100萬系列,6,day6.瘋狂的獲取顧客資料,ocom,https://ithelp.ithome.com.tw/users/20107558/ironman,1513156985000000000,861,"又有人來玻璃心留言了，我這邊就不嘴你們了，門在這，滾吧！如果你還留下來看，你們比國小生還不如。
做生意不要一開始就想賺大錢，他媽的一開始要做的事情，就是要瘋狂地獲取顧客資料，用你吃奶吃雞的力量，不顧一切的收取這些資料，操他媽不要一開始就要賺快錢，想一個月淨利賺幾百萬，那個時代已經過了，先默哀十分鐘，幹！還用同樣一套要洗客戶，用同樣的方法就是沒業績，還用你他媽腦袋有病。
要email、電話、line@、fb私訊這四個最他媽無敵操雞巴的重要，還好這篇沒什麼老闆看到，這一段價值上千萬，最好沒人看我比賽，地址次之、生日，性別再次之，不要本末導致（媽的說國小寫的比我好，他媽的他們會用成語嗎幹）第六天就是無節操的收集名單。
我建立了一套機制，用來瘋狂的收集客戶名單，從前天到今天兩天的時間，我已經收集了481個名單了，名單能幹嘛？幹我就是不告訴你，讓你看得癢癢的，能跟你說名單很重要，你他媽就要跪下謝謝我了，用來生錢的，充滿銅臭味，你愛嫌又愛賺的錢，一堆人愛當婊子又愛立牌坊，愛錢就要大聲說出來，我他媽超愛錢。
開店第一天戰績累積：36筆訂單，營業額20332元
操他媽這都是假的！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191511,Security,0,IT安全稽核系列,10,2.2是否定義風險評鑑的方法論？該方法論並確保產出可比較與可再產生的結果。,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1513155885000000000,531,"我們繼續根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，探討2.2的分析。
二、風險評鑑與管理（資訊安全組織、業務及資訊單位）
2.2是否定義風險評鑑的方法論？該方法論並確保產出可比較與可再產生的結果。
說明：此項說明在於兩個重點：1.評鑑方法論。2.可比較、可再產生。
對於這種評鑑，雖然我在這裡也是用行政院的自評表來探討不同的問題，但我看法是比較負面，如果有學理派的前輩，請多見諒….
資安評鑑，去網路上搜尋一下，不難發現一堆教學文章，其實就跟行政院的自評表做法差不多，會依循這些教學再進行評鑑的，以台灣目前的情況應該不會太多，大公司可能會比較專業，會依照資安規定，在充足的人力底下，進行評鑑，但是，依我的看法，資安漏洞還是漏洞，評鑑的確做得很確實，也很隆重，煞有其事的搞了一堆評鑑，結果產出的分析結果，又是一堆天馬行空的報告，問題還是問題，根本上還不如不要做，這種對上面有交代，只是告訴上面資安有在做事的評鑑，我的感覺，簡單說，真的是太矯情了!
太矯情的原因在哪？ 以前我曾經在某家公司上班，有天老闆拿了兩片光碟，說這是大補帖，要我用批次發信，上頭有好幾萬筆個資，把公司業務統一發送給個別或企業的高層，所謂的資安漏洞其實反映在這件事情上，就已經有很多問題可以探討了，例如說，參加一些說明會，你名片一遞出去，你部份的個資就已經洩漏出去了，外面賣大補帖的，只要蒐集完整資訊，隨時都可以在深入調查您的個資，面對這類資安問題，公司要怎麼做呢？這些很容易懂的事情，評鑑上面或許都會寫，也很認真的去分了好幾個等級，但是為什麼還是難以阻擋垃圾信，這樣評鑑結果，分析了半天，到底有甚麼意義呢？
接著，說到評鑑的可比較性，對於這點，我就覺得有點奇怪，奇怪的原因在於你要如何找可比較對象？你的可比較對象篩選條件是甚麼？你是否有充足的樣本呢？ 我曾經在某家公司服務時，每天都在跑資料庫，進行可比較對象的分析，結論是，為了幫客戶合理化，落入那個區間之內，這些都是可以「調」出來的，只要不要太離譜，每次參數一改，想落到那個統計區間都是可行的，根本上「篩選條件」決定評鑑的結果，參數隨你調，對於這種評鑑，對於其他外部人來說，不懂的就是看熱鬧，懂得人，也不太想說太多，戳破了會讓對方面子掛不住的。
對於評鑑，我最後總結一個想法，該做的還是要做，由其如果監理單位或高層有要求的，還是一定要做，但實際上，還是要把制度訂完整，把重點放在制度上，更重要的是，隨時注意法令變更，吸收實做的資安技術以及案例的探討，這比依照制式的評鑑要實際且有用多了。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191391,自我挑戰組,1,用IT看世界系列,9,XX股份有限公司資安通報,allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1513153621000000000,643,"今天就來分享一下公司內部的資訊安全季報。
實務上，每間公司都有不同的資案政策或者做法，但資訊安全最重要的目的。
還是希望大家去遵守「遊戲規則」，資安這種事情可大可小
我的綠政府說，資安即是國安，個人覺得是掛在嘴邊上的口號而已
前陣子一銀被駭，ATM遭駭客入侵
到前天的新聞中國軍方掌握我大門，也就是我們出入境都遭大陸軍方監控政府在睡覺嗎??
由於被主管賦予新的任務，每季要有一些「作業」。
其實在談談資安通報之前，我更好奇的是，關切度!!
user對於這種公告事項，大概就像Line的群發訊息，「已讀」。
那既然是「已讀」，我就必須想辦法讓他產生一些有「教育意義」的已讀。
下一篇將會分享資訊標準化作者的小故事，待續

[一銀被駭]摘自IThome電子報12月份
[中國軍方掌握我大門]摘自自由時報106年12月11日
以上轉載連結引用皆屬原著作者擁有
Copyright © 2017 Allenjung All rights reserved",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191508,DevOps,0,用30天來介紹和使用Docker系列,10,Day10：使用DockerCloud建構DockerImage,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1513152031000000000,578,"今天要介紹的部份是使用 Docker Cloud 去建構 Docker Image。 Docker Cloud 有提供可以在雲端裡建構 Docker Image 的功能，這樣就可以不用在自已的本地(Local)端下執行 docker build 的指令去建構 Docker Image。
Docker Cloud 可以連結到 GitHub 或是 Bitbucket ，就是說只要把 Dockerfile 的 code Push 到 GitHub 上， Docker Cloud 就會直接自動的去建構 Docker Image。這樣的好處就是說如果本地端的電腦硬體規格不高，可以把建構 Docker Image 的工作放到雲端去做。另外一個好處就是在雲端 Build Docker Image 完畢時，不用將 Docker Image Push 到 Docker Hub 上節省了網路傳輸的時間。
如下圖：

上圖就是一個 Client 把 Code Push 到 Git Hub 上，Docker Cloud 就會自動的把 Dockerfile code pull 下來進行 Build 的動作，以下就來操作如何使用 Docker Cloud。
在使用 Docker Cloud，Build Docker Image 前要做的事如下：
GitHub 上需要準備一個可以啟動 tomcat service 的 Dockerfile，網址如下：
https://github.com/jackyoh/tomcat-image-example
按照第6天介紹的方法註冊 Docker Hub 的帳號，這樣就可以在 Docker Cloud 上登入
開始進行設定 Docker Cloud 連結到 GitHub，步驟如下：
進入 Docker Cloud 的網站，按下右上角的 Sign in，輸入帳號、密碼之後按下 login如下圖

進入 Docker cloud 的網頁之後選擇 Repositories，如下圖

按下 Create 按鈕，如下圖

設定連結到 GitHub，如下圖

點選 Source providers 的 GitHub 插頭，如下圖

按下插頭之後，需要登入 GitHub 做認證，如下圖

登入 GitHub 後插頭圖片就變亮了，如下圖

這時就可以按下右上角的 Repositories，之後再按 Create 如下圖

填寫以下建立 Docker Image 的表單資訊，之後就可以按create，如下圖

按下 trigger 就可以執行 Build Code 的動作，如下圖

另外如果我們把 code push 到 github 上會自動 Build Code 不用按 trigger。在執行Build 的時侯有可能會花一小段的時間在 PENDING 所以要有耐心等待。
這個畫面的右邊主要是第一次 Dockerfile 寫錯所以沒有 Build 成功，第二次修改 Dockerfile 之後才Build 成功，可以點連結下去看Build Docker Image 的 log，如下圖：

Image Name 在第9步驟填表單時設定的
今天已經介紹如何直接使用 Docker Cloud 來 Build Docker Image，有這樣的功能之後在建構Docker Image不一定要在 local 做，也可以把這個工作放在 Cloud做，看需求而定。
Docker Cloud 還有一些沒有介紹到的功能，有興趣的話可以使用 Docker Hub 的帳號、密碼登入進去玩玩看。
Docker 的官方網站有提供如何使用 Docker Cloud 去 Build Docker Image 的影片，網址如下：
https://www.youtube.com/watch?v=sl2mfyjnkXk&feature=youtu.be",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191495,DevOps,1,30天入門Ansible及Jenkins[2018]系列,2,[Day02]Vagrant介紹,tsoliangwu0130,https://ithelp.ithome.com.tw/users/20103346/ironman,1513151993000000000,543,"由於在 DevOps 的實務操作上我們常常會同時操作多台機器，所以在正式進入接下來的主題前，我想要先花一點篇幅介紹如何使用 Vagrant 來模擬我們的測試環境。
在部署軟體服務的階段，開發人員常常會利用虛擬主機來模擬及配置開發環境。Vagrant 就是基於這樣的需求產生的一個服務。與傳統使用 VirtualBox 透過圖形使用者介面 (Graphical User Interface, GUI) 操作虛擬主機有一點不同的是，Vagrant 主要是使用命令列介面 (command-line interface, CLI) 來與虛擬主機做溝通。因此，我們在接下來的章節中將會運用大量的命令列來進行操作。
以上除了 Vagrant 本身必須要安裝外，其他軟體讀者可以根據情況自行斟酌是否要進行安裝。另外，在未來的章節內，我將主要以 macOS 作為我們的作業系統來進行操作。
在 Vagrant 安裝完成後，在終端機 (terminal) 內輸入以下指令：
若出現類似以下結果，表示 Vagrant 已經安裝成功囉！
使用 Vagrant 的另一大優點就是大家都可以把自己習慣的開發環境打包給其他人使用。而這些打包後的作業系統在 Vagrant 的世界內就稱為 Vagrant boxes。讀者可以依據自己的需求在 public Vagrant box catalog 上搜尋適合的 box 來使用。值得一提的是官方特別推薦使用 Bento boxes 這個列表內中的 boxes，除了因為開發者大多皆為知名軟體工作者，其品質相對穩定外，各專案也都已於 GitHub 上開源。作為示範，我將使用 bento 中的 bento/ubuntu-14.04 來作為接下來的標準 box。
首先，我們可以先在桌面上建立一個 workspace 給這次的專案使用：
接下來，將資料夾目錄切換至 workspace 中並根據我們選擇的 box 來初始化我們的 Vagrant 虛擬機：
你可能已經注意到此時 Vagrant 在 workspace 中初始化了一個 Vagrantfile，不過我們暫時先不用管它。接著，啟動我們的第一台虛擬機：
因為第一次啟動必須要下載整份 box 的檔案，所以可能會花幾分鐘的時間來啟動。在啟動完成後，透過 SSH 來登入該虛擬機：
登入後，若看到以下訊息就表示你已經成功用 vagrant 這個使用者的身份登入你的第一台虛擬機囉！","['使用 Vagrant 模擬環境', 'Vagrant 介紹']",,,"['Vagrant 是什麼？', 'Vagrant 及相關軟體安裝', '開始使用 Vagrant']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191397,ModernWeb,5,前端新手村系列,3,前端新手村HTML的作用,chris,https://ithelp.ithome.com.tw/users/20107637/ironman,1513151213000000000,3239,"「當你迷惘的時候，就回到原點想一想」-中華一番 蘭飛鴻
網頁前端新手村系列文章，宗旨並不在技術本身的教導，重點放在技術與技術之間的脈胳關係。讓零碎的網頁前端技術的關鍵字，成為比較有系統性的視野。
讓一開始接觸網頁前端的新手們，有一個比較友善的系統來架構你的學習，至於技術本身的深入探討，就留給其它的高手們吧。
先破題， HTML 是網頁的資料結構。
HTML ，是「 HyperText Markup Language 」的縮寫，它是一種標記語言，並不是程式語言。
現在所訂定的HTML5，是由2008年提出的工作草案[1]，受許多其它類似的標準影響，成為比以往的HTML更嚴謹的語法。
HTML 檔案是一種文字檔案，內容就只有一種資料型別: 文字(String)。
node = element object (在js看html才會叫node)
element = <tag></tag> 把 html 當文字
HTML的語法表示法，據我所知，有三種寫法。
以第一種，來介紹語法結構，就可以涵蓋其它兩種了
tag name 的用處，大多是用來決定該資料的型別，預設渲染方式。
如果把 HTML 當作是一種 XML ，那麼瀏覽器就是大家都說好的一種 Parser。
XML 是一種可以自訂 tag name 的標記語言，但是如何解讀或處理該tag name卻是沒有一致的標準。而 HTML 有(大約)一致的處理標準。
w3school 有列表，可以看一下有哪些
Attribute name 對資料的細部設定選項。(後面簡稱 attribute )
在 CSS 出現之前，有許多關於對齊、排版的 attribute 還在HTML裡面，一直到 HTML5 標準出來，才將這一切撥亂反正。排版歸排版、資料歸資料。[2]
w3school 有列出兩種通用的 attribute
attribute value 是相對 attribute 定訂可以使用的值。
提供給瀏覽器可以運算的數據或演算法名稱。
content 主要是「要顯示的文字資料」為主。
其實學習這個，就像是查字典一樣。
有看到別人有使用，就查一查。查了一個字，學習一個字。
除了多寫，也要多看別人寫的，才可以接觸到更多的「生字」
HTML5 制訂了很多的新標籤，包含用來排版的語意標籤 <header>, <footer>, <article>, 和 <section>。
這些在過去，大多都使用 <div> 後來為了提高 SEO 而推薦使用這些語意化標籤。
HTML 的作用，是組織一個資料結構。表示一個 HTML 文件。
這種資料結構本身，是一種樹狀結構

一般初學，請記口訣
用在看著設計稿(或圖檔)時，要怎麼把元素「切」成 HTML 樹狀結構。
會設計的朋友，請回想
在學設計時，常常遇到抽象畫面表示。要透過元素與元素之間的關係決定設計的語彙。
切版要切得好，除了將語法熟練之外，還需要因為內容或元素的關係，決定切版怎麼切，決定資料與資料彼此的關係。
[1]: HTML - wiki
[2]: HTML Attribute Reference","['HTML的作用', '參考資料']","['前言', '語法', '初學 HTML tag 的方式', '語意化標籤', '資料結構', '對於切版來說要注意什麼']","['Tag name', 'Name', 'Attribute Value', 'Content']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191509,SoftwareDevelopment,0,Kotlin30天，通過每天一個小demo學習Android開發系列,10,Kotlin開發第10天ProgressControl(ProgressBar+Handler),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1513151126000000000,524,"
這次通過 Handler 來定時增加 progressBar 的進度，iOS 中可以利用 Timer 來達成。
和 iOS 一樣，在 App 啟動後，系統會建立一個進程，這個進程裡面會有一個主線程，也就是 UI 線程。
所以和開發 iOS 的過程一樣，當使用多線程處理數據並且要更新 UI 的時候，要記得回到主線程上。
我們可以通過 Handler 搭配 Runnable 來達到可以重複執行任務的功能。
Handler 會讓我想到 iOS 中的 Dispatch 可以執行任務和建立隊列。
準備 taskHandler
通過 postDelayed(Runnable r, long delayMillis) 來開始一個任務，需要提供 runnable 以及執行間隔時間（毫秒）
removeCallbacksAndMessages(Object token) 用來取消任務
研究：Handler / Message / MessageQueue / Looper 會在之後的動手做中專門練習一下。","['ProgressControl', '筆記', '參考']","['Thread', 'Handler & Runnable', 'Handler']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191507,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,10,Django起步走：環境安裝與建立專案,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1513146863000000000,543,"首先要安裝Python
先確認一下目前的環境之前有沒有安裝過
如果沒有，可以到這裡按照環境教學安裝
確認你安裝好3.4.1以上的版本
為了避免與其他語言或本機設定產生干擾
建議運作在虛擬環境(virtual environment)內
先新增一個Django專用的目錄
接著用這個指令 (Mac)
當你看到最後一行前面出現(first_env)就是成功了！
當然這也可以替換為任何你喜歡的小寫名稱，不過盡量保持簡短
注意是兩個等號
如果有出現Successfully installed django
就是安裝成功了！
事情進行得比我想像中還要順利
現在我們來新增一個名為mysite的專案
這樣就會產生一個新的資料夾，裡面有預設的檔案
先別急著切進資料夾內
預設的資料庫為sqlite3，我們先把資料庫建起來
如果是第一次安裝，他會要你設定一個超級管理員帳號
預設username是你的電腦名稱
還需要一組密碼
接下來我們就可以叫起server囉
如果訪問 http://localhost:8000
你現在就可以看到

跟phoenix與rails比起來，這個初始頁面還蠻陽春的
老樣子 control + c可以離開
雖然伺服器已經起來了
但如果今天就停在這邊，我覺得對不起自己的自尊心
所以我們會繼續下去
首先我們來建立一個名為blog的app
在django會將不同功能稱呼為app
一個網站下會有多種不同的功能，例如：會員管理、相簿、交易等等
建立之後，必須在之前mysite的setting file註冊這個app
Django沒有scaffolding工具，所以我們必須一步一步自己來
首先打開blog/models.py，把裡面清空然後複製貼上下面的code
然後再執行一次：
就會新增對應的model到資料庫當中
打開blog/admin.py，並且複製貼上下面的內容：
接著再把你的伺服器打開
拜訪 http://localhost:8000/admin
這個時候他會需要你登入剛剛創建的帳號密碼
登入後，你就可以開始使用看起來簡陋但是基本功能完善的Admin功能囉

試著編輯一下資料吧！
參考資料","['1. 安裝Python', '2. 創建虛擬環境 (Optional)', '3. 安裝Django', '4. 新增專案', '5. 建立資料庫', '6. 啟動伺服器', '7. 建立App', '8. 建立model', '9. 操作Admin功能']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191416,ModernWeb,1,三十哩路，我的前端學習路程系列,10,Day10::我所知道的CSS重構第一章,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1513130934000000000,625,"開始要求自己的程式碼的乾淨與可視程度之後被前輩推薦了一本書
接下來幾天會以這本書為主的閱讀筆記，筆記會節錄書中的片段文章
有興趣的朋友可以買來看看，這本書真的蠻不錯的！
重構(Refactoring) 的定義是為了讓程式更簡單且更容易 複用(reusable) ，在不改變其 行為(behavior) 的情況下重寫程式的過程。
好的架構應該具備以下條件
能夠節省開發時所花費的時間，可預期性越高就越能了解組件功能，程式碼不熟的開發者就能更快速地瞭程式碼的功用。
程式碼複用指的程式碼可以在許多地方使用，降低同樣的程式碼重複編寫進而增加網頁效能。
擴充性高的話可以很容易地在不改變主體結構的情況下增加新功能。
維護性高調整現有功能就比較容易。
重構能改善軟體的架構，是一種可將程式碼重新組織成結構性更好的技術
目的是讓程式更容易預期、複用、擴充與維護。
若軟體越具有上述的特性，代表這套軟體更可靠，而且後續的管理維護工作也會更加輕鬆。
隨著時間經過，很多事情會逐漸改變
技術不斷翻新為了保持程式碼的品質就需要重構。
軟體系統會因為需求改變而演進，當需求改變時，程式碼也需要改變
規劃不完善，一開始沒有對各個組件間搭配有清楚的認識的話後續就得需要進行重構。
估計軟體開發所需的時間並不容易，時程被低估時開發者就會有“先做完再說”的壓力
為了能很快地將程式碼寫出來，寫碼時就不會深思熟慮。
即使寫得很好的程式最後也會變成一盤“義大利麵條碼”，難以理解與管理。
要跟上最佳實務的發展並不容易，特別是工作牽扯到許多技術或需要管理的團隊。
如果錯過運用最佳實務的時機，在未來的某個時候可能就需要重新檢視程式碼並進行某種程度的重構。
技術變遷很快，之前被認為是最佳實務的技術可能已經不復存在
如果不持續學習新知識，技術債就會越來越多
有天你會發現，自己的程式碼處於很糟的狀態，本不該如此的。
透過元素的style屬性或<style></style>內嵌於HTML中的樣式稱為行內樣式(inline style)。
行內樣式不太能重複使用，當樣式透過style屬性來設定時就只能套用到該元素上。
而內嵌於<style></style>標籤中的樣式就只能套用在該網頁上。
這些樣式應該要從HTML中抽出並整理到一個CSS檔中，這個CSS檔就可以在許多網頁中被引入使用。
抽離h1的行內樣式後的HTML
把h1的行內樣式整理到style.css裡面
在重構CSS時，確保所做的調整不會改變樣式原有的功能是很重要的
檔案中的CSS由HTML中抽離後，HTML與CSS檔都變得更容易觀看
HTML中不再有攏長的樣式定義，而CSS則被整理成各種邏輯區塊也更方便重複使用。
看完這個章節之後對於重構先有了基本的知識
也終於知道為什麼要把HTML跟CSS分成兩個檔案
資訊會隨著時間不斷演進，我們也必須不斷學習新知識才能讓自己保持在最完美的狀態
不要讓時間追過自己了！",,"['第一章 重構與架構', '為什麼重構呢？', '進行重構的原因', '跟上最佳實務的困難', 'CSS重構的簡單範例', '心得']","['1. 可預期：', '2. 程式碼複用：', '3. 易擴充：', '4. 易維護：', '1. 需求改變', '2. 設計不良的架構', '3. 低估難度', '4. 忽視最佳實務']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191501,自我挑戰組,0,2017挨踢人生大事紀系列,10,ERP改來改去何時了~PART3,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513129717000000000,689,"談到ERP改不完的需求，真是一把鼻涕，一把心酸淚...
邦友們若是感同身受！
且讓我們彼此安慰一番，療癒一下那堅強但也脆弱的心靈~
想想『地藏王菩蕯』的精神：「我不入地獄，誰入地獄！」
勇敢地的再戰下去吧~
『誰叫USER的需求，一直挨踢心中最軟的那一塊呢？』
觀察這兩年的趨勢，一直再鼓舞資訊教育向下扎根？！
程式設計要從小娃娃抓起？！
夭壽哦~
把那麼多小小幼苗，國家未來的主人翁，一大群一大群的推向火坑？！
我可是心有不忍啊~
寫程式、改需求...
是得要有當一名「修行僧」的覺悟，才走得遠啊~
其實撰寫程式，可以是一項很有趣的工作。
但程式邏輯一旦摻入了程式撰寫人以外的人為因素，就開始變得不那麼美好了。
有沒有過你寫了一支數學計算的小程式，卻被機車老師輸入了ABC給搞掛了的經驗！？
不斷改ERP需求的挨踢們，我認為就是一直在重複那樣的心情。
原本相信可以符合任何作業流程的ERP系統，竟然還是被挑戰了？！
可能是採購？可能是業務？也可能是內部某一流程的作業？
搞了一個特殊案例來挑戰ERP？！
明明供應商主檔定義了月結，付款票期三個月！
卻在交易了第二批物料，要求變更成月底就匯款！
而且原本已定案的採購單資料，價格都要調整成九折，還不能要求折讓？！
這下好了~
系統作業幾乎已經算是走了一半以上了，前端的採購卻丟來這些突發狀況給會計收尾。
會計問：「怎麼辦？挨踢！」
OS：『更~』
只能迴轉、迴轉、再迴轉，重頭來過囉~怎麼辦。
類似的場景，也許久久才發生一次，但永遠是挨踢胸口的痛！
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191502,SoftwareDevelopment,0,那些年八歲到八十歲都可以一起寫的程式系列,5,<Day5>累得半死寫到一半想睡了....,MichaelHuang,https://ithelp.ithome.com.tw/users/20107642/ironman,1513127310000000000,575,<待續>,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191496,ModernWeb,1,PixiJS，方便好用的WebGL內容產生工具系列,10,[PixiJS-Day-10]Ticker與動態製作,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1513126917000000000,739,"回顧 PixiJS 在建立後會產生的幾個成員：
本篇會前半會提到 ticker
PIXI.ticker.Ticker：
通常在製作隨著時間更新畫面的網頁時，以往會使用setInterval、setTimeout、requestAnimationFrame等方式
目前版本的 PixiJS 在建立實體時產生了一個 PIXI.ticker.Ticker實體，可將更新的程式碼放在 ticker 的監聽裡
先前版本的 PIXI 使用 requestAnimationFrame 更新程式
在 基本範例 中能看到對 ticker 的操作：
由於 canvas 與 WebGL 需要隨著時間更新畫面，
以往會使用這類型的程式碼：
基本範例中沒有提到 renderer 的更新，主要是 app.ticker 處裡掉了
所以若是沒有需要隨著時間更新的程式時，可以不用操作 app.ticker
例如：官網的拖曳範例 Dragging - PixiJS Examples

我在實作合圖上傳的功能時，就沒有操作 app.ticker

後續文章會介紹這個例子
有興趣的話可以玩玩看 app.ticker 的方法：
就會發現 app 不會動，因為 app 用來更新畫面的 ticker 停止了
列舉一些從官方列出來的 PIXI.ticker.Ticker 的方法：
started: 檢查 ticker 是否在運作；
另外還有
add、addOnce、FPS、minFPS、speed、start、stop、update 等
可看出PIXI.ticker.Ticker類別可控制的項目
由於我比較少使用 PIXI.ticker.Ticker 類別，完整 PIXI.ticker.Ticker 的說明，可參考 官網說明 ，可控制項目會比使用 requestAnimationFrame 要多
使用 PixiJS 製作動態：
由於 PixiJS 隨著時間更新畫面，
最基本控制動態的方法是將屬性變化寫在 app.ticker 的呼叫裡，
回到剛剛的 基本範例：

兔子的旋轉角度會隨著時間累加
另外提一個簡單與令人懷念的演算法：
兔子會跟著滑鼠的游標移動
CodePen：

(因為是錄製轉 gif ，畫面會有延遲的情形)
程式碼：
在製作較複雜的動畫時，我會使用 GreenSock 的 GSAP
由於 GSAP Tween 的是物件的值，使用上很直接
示意 Gif：

程式碼：
很多時候須處理的動態不只有一段，我會使用 GreenSock 的 timelineLite 與   timelineMax
由於是佇列的概念，我在學習的時候有遇到一些瓶頸
卡了一圈後，我覺得學習的最佳實踐就是 timelineMax 官網上的範例

系列文章不會做太多動態說明，有興趣的話再參考 GSAP 的官網與教學了
萬花筒例子有應用到GSAP，會在後續的文章說明",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191470,自我挑戰組,1,rails學習紀錄系列,1,[Day1]關於我誤解Ｍodel的那些事,thehappyend,https://ithelp.ithome.com.tw/users/20107708/ironman,1513125687000000000,588,"目前正在五倍紅寶石學習Ruby on Rails的課程，希望能將上課所學整理出屬於自己的筆記，透過文章整理思緒。因此文章內會有許多部分是參考龍哥的教材。
在還沒上課之前，我一直以為在兩個Model上打上Model 所提供方法，他們的資料庫就能互相調資料了。

但其實不是。
Model 所提供的方法是讓Model之間建立連結，不是資料表之間。
Rails 裡所謂的關係，是指在 Model 層級的關係，主要是透過 Model 所提供的一些方法（例如 has_one、has_many 或 belongs_to）搭配 Rails 的資料表慣例設定主鍵（Primary Key）及外部鍵（Foreign Key），讓這些資料表串在一起。
當Ｕser和store之間要建立好關聯，除了要在Model內設定方法外，還在要Store的資料表裡建立user_id的欄位。
因為Model是翻譯員，我們透過Model去跟資料庫要資料。
建立好關係後，要去要資料的話。
Model的User 會去問 Model的Store ，這個時候Store去找他的資料表裡有沒有user_id是user的。
一個 Model 就一定會對到一個資料表
其實有有三種情況。
HABTM(has_and_belongs_to_many)，不需要另外新增第三方 Model 即可完成多對多關連。注意，我是說「不需要第三方 Model」，不是「不需要第三方資料表」，畢竟還是要有一個資料表存放雙方的資訊，只是這個資料表因為不重要也不會存取它，所以可以不需要 Model 對應。",,"['誤解1', '誤解2']",['前言：'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191500,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,10,1-9.監控工具之一:ZabbixDiscovery自動新增監控,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1513125519000000000,603,"Discovery可以依照規則自動新增監控項目，或是自動增加新的監控主機，應用搭配非常豐富，這章簡單介紹基本應用。
到Templates，選Template Module Interfaces SNMPv2 => Discovery rules => Network Interfaces Discovery

SNMP OID會將snmp get到的值一個個放進參數，像IFNAME取到的值是ifName.1 Gi0/0/0, ifName.2 Gi0/0/1 …依序discovery[{#IFALIAS},1.3.6.1.2.1.31.1.1.1.18,{#IFNAME},1.3.6.1.2.1.31.1.1.1.1]
Update interval預設時間要一小時才會discovery一次，可以調短時間，搜尋完後再調長時間或關閉，節省資源。
Item prototypes 選 ""Interface {#IFNAME}({#IFALIAS}): Bits received""

Name 命名，的到的結果像 Interface Gi0/0/0(Test1): Bits received
SNMP OID 與前一章一樣取值，後面接上各個接口編號{#SNMPINDEX}
舊版本記得Store value選擇Delta(speed per second)
完成後過一段時間再確認SNMP的燈號是否亮起。
Configuration => Discovery => 點選右上角 Create discovery rule
設定上IP範圍，Check Type可以選擇需要的服務，Enable後完成

到Configuration => Actions ，這次Event source要改成Discovery

New condition選擇剛建的rule

接著選Operations，New一個host 加到Group，Link上HTTP的監控

內建有Template VM VMware就是利用Discovery去蒐集VM的API增加機器，有興趣的話可以拿""乾淨的""zabbix去做，我第一次接上去就把zabbix的效能用滿... 機器太多台，雖然說有temp不過還是要看需求做調整，好處是如果公司機器都在VM內就輕鬆了，不用再手動一台台裝Agent就可以做基本監控",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191474,自我挑戰組,1,花式PHP系列,5,Array：排序,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1513125121000000000,574,"
今天的內容比較偷懶一點，
畢竟這些排序函式的執行都只是一行內的事情，
而這些函式的共通點都是在哪裡用它比如何使用它還重要...。
儘管如此，知道有這些函式的存在還是很重要的，
希望大家看完這一系列的陣列函式介紹文可以使出各種自創的組合技！
比如什麼 ↑ ↑ ↓ ↓ ← → ← → B A的啦
這個函式可以產生一個順序完全相反的陣列。
恩，真的是毫無懸念的產出一個 [5, 4, 3, 2, 1] 了呢！
我們都知道，宣告陣列不指定 key 的時候 PHP 會自己給他們純數字的 key。
問題來了，上面的程式碼即使加上第二個參數，結果也毫無懸念的好猜，
但如果 我們在宣告陣列時手動幫它亂指定 key 呢？排序結果會一樣嗎？
在測試之前先講結論：不會。
為了執行這個測試，我們會宣告一個 values 一樣是 [1, 2, 3, 4, 5] 的陣列，
但 key 就是亂給的。
恩，
看起來 values 真的完全不受自訂 keys 的影響！
那沒事了各位，
我們繼續看下一個函式吧 :3
注意了各位，這個函式可以讓陣列的 values 排成你爸媽都認不得的樣子！
而且它是直接對傳進去的 array 做操作！
PHP 這些 array functions 的慣例是：
排序用的函式！我想知道它的人應該時常會遇到它派得上用場的時機吧？
底下用列點的方式介紹這些 functions：
k = key - 對 keys 排序
r = reverse - 反向排序
u = user-defined - 自訂排序邏輯
a = associative array - 排序的同時保留每個 value 原本的 key
除了上述這些 functions 之外，
其實還有下面三個可以自己寫排序邏輯的 sort function：
舉個例子：
時值地球曆2200年，地球上所有國家已經結合在一起，
人類也在研發出超光速引擎之後開始進軍其他星系...
但很可惜的，有些種族就是首抽沒抽好，開局就抽了一個帶賽的位置。
我們的地球聯合國附近剛好就有超先進的博格人...QQ
博格女皇決定使用它們手中掌握的殺手鐧 - 一段記載著太陽系各星系資訊的JSON，
並用 PHP 進行 usort 後決定佔領太陽系各星球的順序...","['array_reverse()', 'shuffle()', 'sort()與它的快樂好夥伴']","['基本用法', '第二個參數決定是否要保留 key']","['假設', '測試假設1']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191498,ModernWeb,1,JavaScript基礎二三事系列,10,Day10　存在與布林,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1513124618000000000,574,"今天來看存在existence與布林boolean的關係
由於JS常發生型別轉換這件事，開發者可以用Boolean()這個內件函式，來判斷型別轉為boolean的結果。

undefined、null、""""這些代表沒有的值，都會被被型轉成false。
開發者可以利用此特性，用if()敘述來判斷是否成功取值。
例如：

結果什麼也沒發生，也沒有語法錯誤，發生了什麼事？
我們都知道宣告變數，變數預設值是undefined。
而if()敘述句()內看的是布林值true或false，來決定敘述句{}裏頭的程式碼要不要執行。
故a在if()敘述句被型轉為false，所以這個條件判斷內的程式碼不執行。
如果是有值的狀況，例如：
結果會是？

a有值(字串)，所以型轉為true，這就是開發者對js強制型轉的妙用之一，可以判斷這個值是否有存在，當有值存在時，若值不是代表「沒有、無、未定義」的值，就會被型轉成true。
但如果賦值給a的值是數值0，那怎麼辦呢？
瀏覽器console結果是？

沒東西
雖然a有值(數值0)，但0被自動型轉為false，導致這個if條件判斷程式碼不成立，只是a確實有開發者賦予的值呀！
這個時候可以這樣寫：
結果是：

來看看if()內發生了什麼事
||運算子可以想成中文的「或」的意思，===這個運算子的特性則是嚴格相等比較，前面這篇筆記有說，運算子執行順序，先看優先性，再看相依性，===這個運算子優先性比||還高
(可參考MDN的運算子優先等級)
所以if()內的執行順序，先從a === 0這段程式碼開始，把這段單獨抽出來看，結果是：
//true 成立

再來看a || true
a的值0在if()內被自動型轉為false
所以變成是false || true
||或的意思，若有true就選擇true，假或真，選擇真。

是故if()內結果true，條件判斷成立，印出這裡有東西
這種寫法很少見嗎？不，很常見(我最近上班也有看到)
有的框架、函式庫、JS套件會用這種寫法，舉個例子，現在給變數a一個函式：
結果是：

用這種方式，能判斷的不是只有字串或數值，連函式也可以，當然物件也是可以的。
結果是：

　
　
　
小結
某次使用JS套件(別人寫好的Plugin)時，看原文件發現這種寫法，當時的反應是欸欸~~這樣也可以喔！後來想一下、console確認可行就用了，現在在udemy看到這部影片，存在與布林，感覺真是心有戚戚焉。
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分3-27",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191469,AI&MachineLearning,0,深度學習環境安裝筆記系列,2,[Day02]深度學習環境安裝筆記—Ubuntu系統安裝與設定01.選擇適合你的發行版,a7552005,https://ithelp.ithome.com.tw/users/20091307/ironman,1513124367000000000,621,"關於 Linux 的介紹我在這就不加贅述了，大家在使用 Ubuntu 的過程中如果遇到問題可以到 Ubuntu 正體中文站 發問，許多熱心的大大都在論壇上討論問題，另外發問前建議閱讀一下 提問的智慧 。
那我們就近入今天的主題 「 Ubuntu 系統安裝與設定 01.選擇適合你的發行版 」 吧！
目前我們常用的版本有16.04以及14.04，因為16.04是 LTS 版，建議使用16.04或是16.04的衍生版本，至於有哪些衍生版本等等下面會介紹。
一般來說，Ubuntu 在同一個主要版本會發行二次版本，以 Ubuntu 11 來說，就會有一個 Ubuntu 11.04 LTS 版和 Ubuntu 11.10 版，一般的情況下，Ubutnu 會對每一版本提供 18 個月的安全更新服務，但是，如果是 LTS 版本的話，那麼 Ubuntu 就會對 Desktop 版本提供三年的更新支援， Server 版則是會提供長達五年的更新支援，所以，LTS 指的就是長期支援 ( Long Term Support ) 的意思。
阿舍的隨手記記、隨手寫寫... - Ubuntu LTS 是什麼?
Ubuntu 這個發行版是由 Canonical 公司所開發的 Linux 發行版，採用的是 Unity 這個桌面環境，不過可惜的是 Unity 這個桌面環境在 18.04 版的時候就要廢棄回歸到 GNOME3 。 來源

基於桌面環境 MATE ，是基於 GNOME2 衍生出的桌面環境，介面清爽也沒有多餘的動畫，非常的省記憶體，是我最推薦的發行版。

Linux Mint 採用的是 Cinnamon 這個桌面環境，目前長的最像 Windows 的發行版，對不熟悉 Linux 的人建議先從這個版本入手。

長的最像 Mac 的發行版，也是最追求使用者體驗的發行版。

他的中文輸入法比較難搞，請參可這裡：
https://www.ubuntu-tw.org/modules/newbb/viewtopic.php?post_id=354768
最荒蕪的版本，專門給想自己調整系統的人使用的，絕對的輕量，因為什麼都沒裝，連桌面環境都沒有。",['1. 選擇適合你的發行版'],"['Ubuntu16.04', 'Ubuntu MATE', 'Linux Mint', 'elementaryOS']",['Ubuntu mini iso'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191494,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,10,10.應用：自用空氣品質資訊機器人,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513123855000000000,626,"無意間在找尋題材的時候看到這個 API 其實蠻有感的：居住在中部，這兩年明顯感受到空氣相當的混濁，除了出門常被叮嚀要戴口罩，家裡也買了空氣清淨機，雖然到最後吸入空氣的有沒有問題，其實我也搞不清楚，但多一分提醒、多一分防護總是好的，所以很臨時地把這篇加入系列文章。
Step 1.  前往政府資料開放平台 - 細懸浮微粒資料(PM2.5) - https://data.gov.tw/dataset/34827

Step 2. 不免俗的，複製資料來源網址進行測試

Step 3. 開啟 postman 來試試看 (似乎有點久)：

Step 1. 將下方資料貼在 json2csharp (http://json2csharp.com/) 上進行類別轉換。
註：若您沒安裝 restsharp，請參考上一篇 應用: 自用氣象資訊機器人 - 程式章節

Step 2. 修改程式碼如下：
Step 3. 將MessageReceivedAsync方法更改如下
Step 4. 開啟機器人模擬進行測試。

其實程式部分還有很多地方可以強化，這邊就先提供可以運作的程式提供參考。
https://github.com/matsurigoto/BotFrameworkExample03","['前言', '註冊及使用open data', '程式', '範例']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191490,ModernWeb,1,ZerotoherowithReact.js系列,7,【Day7React】從拆解電子名片學習ReactComponents#Part1,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1513123522000000000,600,"
每一個 component 外層都會用一個 class 包起來。extends 指的是 React.component 物件底下的子類別（subclass）。在這個物件底下，它的大架構是 render(){} 裡面放要回傳在 DOM 上的內容。
我們將整個名片的 JSX 語法放進 return() 中
在最後一行加入 class 的 名稱 <Card /> 就可以看到我們的名片出現在頁面上囉～
＊在 JSX 語法中，tag 第一個字都會是 大寫 喔！以便用來和 HTML tag 做區分。
在 card 這個 component 底下，我們還可以切成三個 components，分別為 Photo, Bio, Updates，那麼我們就來拆解剛剛放在 Card 裡面的語法吧！
為 Photo 創建一個 component
為 Bio 創建一個 component
為 Updates 創建一個 component
好的上面那段就是講一樣的話，做一樣的事ＸＤＤ
如此一來，我們就簡單拆解完我們的名片組件～
但拆解完最重要的是要組合回去啊，就像玩具拿出來玩不放回原位會被媽媽罵一樣。。。所以我們必須把剛剛拆解的 component 放回原本的 Card component 裡，React 在 render 的時候才會記得有這幾個組件的存在。
放回原位非常簡單，只要加上我們所設定的 類別名稱 即可。
Part1 的部分先介紹到這邊，明天介紹 modelur 的寫法囉～",,,"['把整張名片作為一個 component', '分屍（？）名片 Component']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191229,DataTechnology,0,MicrosoftBotFramework30天上手系列,7,botframewotkconcept概念,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1513123420000000000,549,"參考
https://docs.microsoft.com/en-us/bot-framework/nodejs/bot-builder-nodejs-concepts
botframewotk主要就下面幾個元件所組成",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191493,ModernWeb,3,前端工程師養成手冊系列,10,初級前端工程師的求職門檻,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1513123308000000000,1144,"這絕對能被列為我人生當中前十大最常被問到的題目之一，就趁這次機會來說明，究竟要達到什麼程度，才有辦法達到初級前端工程師的就業水平。
初級(Junior)前端工程師在網頁版型上必須駕輕就熟，通常公司會聘請到前端，自然是因為需要有一個專人來負責跨螢幕跨瀏覽器的工程師來開發他們的產品。所以你至少必須要滿足以下條件：
至於 Bootstrap 的部分也建議你掌握起來，但在投入它之前，請你至少要使用 CSS Media Queries 有實作過一個多頁式的網頁，並可兼容手機、平版、桌機的網頁尤佳。因為你的本業是前端工程師，你必須在深入框架前要對 HTML 標籤、CSS 有足夠的開發經驗，絕對不要變成只會用 Bootstrap，但超出一點 Bootstrap 額外的東西就不會自己寫 CSS 增加網頁彈性的話，那不是一個合格的前端工程師。
為了要讓網頁能夠與使用者產生互動，適量的動畫效果是絕對必要的。在初期時 CSS 必須要瞭解 transition、animation 的操作方式。但是若要能做到高彈性的互動，是絕對需要使用 JavaScript 來寫動畫效果的，如果你還不會自己刻，對 JavaScript 也還不會那麼熟悉，也可以先試著學 jQuery，就算不會 JavaScript，你也能透過他簡易的 API，自己設計出簡單的效果。
學會後也能夠自己去使用別人寫好的 jQuery 套件套用在網頁上，一些網站常見的動畫效果例如跑馬燈、圖片輪播、頁籤絕對要自己準備起來自己習慣用的插件清單，以備上戰場有足夠的武器應戰，如果你對熱門動畫套件不熟悉，之前我也整理了一份詳細清單，同時也曾經錄製兩個小時的 jQ 影片教學，也提供給您參考。
接下來就是紮穩 JavaScript 基礎功，從最基本的變數、函數、陣列、物件你自然必須了然於胸，學 JavaScript 的用意是在於你能透過他去接收網頁瀏覽器上所有的資訊。例如說：
這些舉例只是小小的冰山一角，現在的 JavaScript 已經不只侷限在網頁瀏覽器，甚至能透過它設計 APP、桌面應用程式以及任何你想像不到的東西。
一開始在學 JavaScript 的朋友可能會覺得他是個無底洞，彷彿學無止盡是很正常的，但無論如何基礎功還是相當重要的，如果你是初學者，目前我會推薦你這本書，並試著做一些線上題目，例如 codecademy 上面的 Introduction to JavaScript 、JavaScript，我也曾經設計過一個 JS 百題斬的題庫，若是你能答對 85 題以上，就代表你確實已經具備 Junior 的水平了。
但是若這樣還尚缺不足，在目前網頁趨勢來說，同時必須掌握 AJAX/API 整合的技術，以白話文來說明則是說在一個網頁上面，同時會介接三、四種服務已經是家常便飯的事情。舉例來說，假使我要做一個「高雄公車即時動線服務」的網站，首先你就必須接政府提供的公車動態 API，拉回來資料後再顯示在網頁上，如果你希望用地圖呈現時，就需要即時介接 Google Map API，假使你還需要做一個讓使用者儲存最愛資訊時，就可以用 firebase 設計註冊登入邏輯與資料庫設計，在公司做專案跟後端工程師配合時，也會搭配他提供的 API 來設計各種服務。
在這裡你所必須掌握的是閱讀文件的能力，你如何將你已經會的 JavaScript，在獲得這些 API 資訊後，顯示在瀏覽器上便是一個相當重要的課題。如果你聽不懂這段也沒關係，在我推薦的那本書上也有提到 AJAX 的部分，當你越加瞭解 AJAX 後再回頭看我這章節，自然會更加透徹。
Git 是版本控制語言，可以紀錄程式碼修改了哪些東西，當你不小心刪除、覆蓋檔案時，就可使用 Git 來進行還原。而 Github 則是來存放 Git 數據庫的東西。
你可能會想說，這跟前端又沒有太大關係，我處理檔案時小心一點不就好了？這樣就讓我來仔細為各位解釋：
當一個中大型專案，可能就會分派兩個前端三個後端，後端 A 去處理金流、B 處理報表、C 處理系統架構，前端 D 負責使用者端、前端 E 主要為後端介面。但一個專案該如何讓那麼多人協作程式碼卻又不打架呢？絕對是會仰賴到版本控制語言的。
我在學校教前端時，曾經有位被我教過的學生請我寫推薦函，一看公司大有來頭，雖然下意識覺得他應該不會上，但摒著年輕人總該去磨練經驗碰壁一下的想法，那時還是盡力地協助他。最後竟然意外被錄取了，後來試用期轉為正職時，學生好奇問了帶他的主管為什麼那時會錄取他。主管回他說：「其實那時面試一輪下來，你的前端能力只能算差強人意。但你 Git 卻是觀念最好的，我們也不怕你搞爛我們的 CODE，以前曾經有個實習生 Git 下錯指令搞爛 project .. 害我們一直有陰影。」
從這故事就可以看得出來，你要有機會進入到大公司或是有心要培養你的公司，你有辦法觀看他們的專案或試著參與，不會 Git 你就連基本的門票都拿不到。
所以在我門下的學生，我絕對會請他學 Git 再去投履歷，機會也相對大得多。
你可能會想說，我就只有一個人，哪還需要去做版控？這種觀念大錯特錯，Git 有辦法追蹤到每個檔案的每一行程式碼的更動，所以在你新增一個功能時，就可以進行版本控制。至少在你搞爛檔案時也能進行版本還原。面試官也會從你更新功能中觀看到你對程式碼的嚴謹度，例如程式碼縮排、命名規則、版控觀念來進行初步審核，所以自己盡早培養版本控制的觀念，你才不會進入公司後才在後悔當初沒學好 Git。
Github 上擁有許多開發者發佈的專案內容，你可以從中觀看許多程式碼邏輯，而你也可以上傳自己練習的專案上去，如果有開發者對你的程式碼有興趣，並發現一些問題，他也會主動發 ISSUE (問題單) 給你，或是佛心地幫你修改，並發 Pull Request (合併請求) 給你，你一定會心裡 OS 「so what？」，讓我講一個故事給你聽。
多年前我想要做一個 D3、C3.JS 的 SVG 圖表能夠匯出 png 格式並下載的功能，我那時候找到一個 angular 國外開發者有出一個完整的 sample，但因為我是用 jQuery 寫的，於是在 Github 問他一些原理，後來我終於搞出來也回饋給他，他也很替我高興。但故事還沒有結束，在那之後的半年一年期間我仍然會收到各個開發者詢問我這段的原理，原因他一直在幫我宣傳我有實作出來，請他們來請教我，儘管我已經完全沒在理那個功能了。
從那時開始我才開始嚐到一些甜頭，透過這些 open source 能夠與各國的開發者接軌，在相互交流技術的正能量環境上，我的開發程式能力也大幅提昇！
如果想自學 Git 的話，這裡也推薦一些資源給你：
如果以上的條件你都滿足，就能開始找工作了，我自己也有一份前端就職關卡文件，你可以依照每個關卡條件來關關闖過，在後面也有提到一些履歷寫法與面試教戰手則影片，也提供給各位參考。
曾經有學生問我，老師感覺那些公司都是要找「有經驗的」，甚至會提到一、兩年經驗，那種可以投嗎？當然可以啊，如果職缺內容提到的技能你都有涉獵的話。公司在尋找人才會有很多面向，例如資淺但有潛力拉進來培訓，或你的能力已經有滿足公司的條件等等，老實講也蠻看緣分的，所以初期就當做是磨練面試經驗也蠻 ok 的。
如果不曉得如何觀察公司職缺工作內容，也歡迎找我來詢問，更多的面試細節，在後面章節也會一一介紹到的。",,"['HTML、CSS 網頁版型是基礎功', '設計動畫效果點綴網頁樣式', 'JavaScript、AJAX、API 整合多方服務', 'Git、Github 是首要必學之路', '接下來，開始為自己找職缺']","['多位工程師協作同個專案，不用版控簡直找死', '為你自己的 CODE 把關嚴謹性', 'Github 是最大的程式碼開放平台']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191481,ModernWeb,0,重新學習網頁設計系列,10,DAY10.JavaScript類別與物件,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1513123267000000000,574,"物件導向程式設計(OOP)已經存在多年
物件是一種在邏輯上與一群資料及功能有關的東西
它的設計，是為了對應我們對這個世界的理解方式
引用: JavaScript 學習手冊
ES6之後我們能用簡潔的方式定義類別
說明
範例中定義了Car類別，接著定義兩個實例car1, car2
接著我們使用instanceof驗證該實例屬於Car類別
最後我們測是兩個Car實例是否相等，結果不相等
物件永遠不相等
說明
建立實例後我們能夠輕易地修改屬性來更改狀態
所有的方法都會是該實例的prototype
靜態方法是執行與整個類別有關的工作，而不是針對實例
說明
當PersonSam出生時我們使用大家通用的生份正規則來產生idNumber
由於全國人民的身分證產生規則都一樣，因此generateIdNumber方法屬於Person類別
而非實例Sam
類別是有階層之分的，例如汽車與機車屬於交通工具；狗與貓屬於動物
當有階層之分時我們就能夠透過繼承來將共通特性抽離至父類別
說明
範例中Car與Autobike都可以增加乘客
因此我們把addPassenger定義於Transportation
但由於不同的交通工具乘客成載量並不相同，因此在子類別建構是中複寫父類別的屬性值
我們能夠在子類別的建構子constructor中使用super來繼曾父類別的建構子constructor
接著在子類別中定自己的屬性，而若屬性已經定義於父類別則會蓋過父類別的屬性
因此我們可以針對不同的子類別定義相同屬性但卻不同數值來因應現實環境的需求
父類別有時亦被稱為超類別
更完整的物件操作請參考MDN JavaScript 物件導向介紹",['DAY 10. JavaScript 類別與物件'],"['定義類別', '類別屬性以及方法', '靜態方法(類別方法)', '繼承']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191381,SoftwareDevelopment,2,爬蟲始終來自於墮性系列,13,PTT台南版置底3C文,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1513123202000000000,618,"我是一個很喜歡尋寶的人，會常常看 FB 的地方二手版，看有沒有實用的東西可以撿便宜，除了 FB 以外， PTT 地方版也有大量的二手物品販售訊息，所以 PTT 台南版我也是常常逛。

不過，台南版規規定，所有的 3C 商品買賣都必須放於置底文的推文，所以這些資訊的顯示方式真的是爆難看。既然是個網頁工程師，有問題就應該自己動手解決，雖然畫面不好看我們無力解決，但我們至少能轉接個 API 出來，讓有能力的設計師可以有資料去製作好看的介面。

一樣是使用 PTT web 版來抓取資訊，台南版 3C 置底文的網址是  https://www.ptt.cc/bbs/Tainan/M.1464690165.A.D11.html ，看起來就是把底下推文的項目抓取出來就可以了。
接下來觀察看看每個 item 的 html dom，看起來只要抓每個 .push 就能抓到所有的推文項目，然後再抓取每個項目的發文者、推文內容、時間。
不過我們也觀察到，因為一個推文有其字數限制，常常會有人連續發兩個推文，既然如此，那這兩筆同樣的發送人應該要被歸類在同一個項目。
先來寫個 getItem function，收個參數 callback，屆時把抓取到的項目丟給 callback。接著我們做 request 台南版 3C 至底文的網址。
再來我們來抓取推文列表，抓到之後，我們 each 所抓到的內容，並將發文者、推文內容、時間整理出來。接著我們判斷抓取的發文者是不是等於上一筆的發文者，若相同的話，就把它併入上一筆，若不是的話，就 push 進去 items。

接下來我們用 express 來做 web service，先暫時聽 3000 port，未來 deploy 再改 80，經過測試沒問題就大功告成了。
爬蟲的應用不僅僅只是在抓資料，其實很多時候我們會是當個中介者的角色。資訊這個領域開放性的觀念很重要，唯有大家願意分享和貢獻，才有可能有更多的人站在你的肩膀上往前邁進。
我不是個設計師，我設計不了很友善的畫面，憑我一個人的力量是沒辦法解決這個目標的問題，但我能貢獻我的一份能力，串起解決問題過程當中的一環，那麼這就是一件有價值的事情。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍伸應用']",,"['getItems function', '取得推文列表', 'Express 做 api service', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191491,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,8,【Day8】UnitTest應用：系統狀態修改（待續，可先看程式碼）,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1513123044000000000,562,"有時候我們不是檢查某個方法，只對其檢查回傳值true或是false，有時候會需要修改系統狀態，而測試系統的狀態是否如我們預期。
今天的範例也是使用LogAnalyzer的功能，但是增加了一個方法WasLastFileNameValid，用來記錄上次檢查附檔名的時候是否有成功。
（本次是使用新專案，所以請參考專案【Day8】）
（待續）",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191281,自我挑戰組,0,蚵蚵攻城記系列,2,[Day02]學著安裝Gulp,azer19890427,https://ithelp.ithome.com.tw/users/20107340/ironman,1513122880000000000,578,"Gulp對我來說真的是一個很神奇的東西
到目前為止
Gulp幫我解決了一些問題
我一開始使用gulp是從git hub上fork別人的
這次我要在網路上找找看方法來試著自己安裝看看
首先要先安裝node.js
聽說工程師喜歡穩定的版本
所以我們選最多人選的版本
(我是那種看到新版本就想更新的那種啦)

安裝完成後點開它

對一個生科系的來說這個東西太恐怖了
沒有按鍵可以按 真的很想吐
我們先輸入
接著會跑出一連串沒看過的安裝過程
這指的是我當前的目錄
我想要先創建一個資料夾

真的產生了一個資料夾
我想要在資料夾裡面裝gulp
所以先把目前的位置換到mythirdgulp
接著輸入

會跳出一堆要我輸入 大概就是基本資料
接著會產生一個名為 package.json 的檔案在剛剛的資料夾中
接著安裝我需要的套件
接下來要寫要寫設定檔了
這邊.....
我還不會
先跳過它吧",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191487,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,9,ES6(2),yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1513122194000000000,552,"ES6 開始 JavaScript 也有和其他程式語言一樣的 template 功能。以前組成字串要用 ＋ 號來結合變數和字串，還會擔心單引號和雙引號的問題。有了 template 功能，用 backtick (esc 下面那個鍵)將字串包起來，變數部分用 ${變數名}，裡面還可以使用運算式，或者函式。
也適用在 multi-line strings。
Template strings 也支援巢狀堆疊的使用方法。",,"['template strings', 'HTML template strings', 'Nesting template strings']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191483,自我挑戰組,0,Verilog從放棄到有趣系列,1,[Day1]什麼是verilog?,Sheng,https://ithelp.ithome.com.tw/users/20107543/ironman,1513121960000000000,645,"什麼是verilog?
Verilog是一種硬體描述語言(Hardware Description Language)，簡單來說就是透過寫程式的方式來描述硬體的行為讓EDA tool(Electronic Design Automation)來幫你完成電路設計，過程包含把你的描述的程式轉成gate-level的電路，各個大小module的擺放以及繞線，跟最後的驗證，目前熱門的HDL有Verilog及VHDL兩種，會選verilog當這次的主題是因為verilog相較於VHDL來說，在台灣IC設計公司屬於比較主流的語言，另一個原因是如果有學過C語言的話，或許大多的語法可能不陌生，但很多人卻說，用C的思維去寫verilog會哭出來，沒關係，接下來的每一天會讓你覺得verilog其實很有趣．
為什麼想跟大家分享verilog?
在網路上，關於verilog資源不如其他語言的資源來得多，像是C、Java，Python等等，所以想利用這30天讓想學verilog的同學能對verilog有初步的了解，接下來的三十天會一一介紹verilog的語法，觀念，架構等等，這三十天跟大家分享的比較屬於行為描述的正確性，至於電路合成完的結果，像是timing或resource使用量的部分會提一點，有興趣的同學或許可以在留言板下跟我討論．
大綱：
tool安裝即使用（一至兩天）
語法（四到五天）
testbench(一至兩天)
電路觀念與思維（四到五天）
演算法（兩到三天）
電路應用（四到五天）
timing&resource(兩到三天)
須準備些什麼？
寫verilog時要拋開寫軟體語言的思維，引進邏輯電路的思考來寫，在往後的教學當中，會盡可能搭配電路圖來引導大家如何寫出一個漂亮又有趣的verilog，那接下來先幫大家複習一下幾個邏輯閘及真值表．

輸入   輸出
A  B    C
0  0    0
0  1    1
1  0    1
1  1    1
OR-gate

輸入	輸出
A  B    C
0  0    0
0  1    0
1  0    0
1  1    1
AND-gate

輸入  輸出
A    B
0    1
1    1
Inveter-gate

輸入    輸出
A  B    C
0  0    0
0  1    1
1  0    1
1  1    0
XOR-gate
 
其實在複雜的電路也是用這些邏輯閘組合出來的，所以知道這些基本邏輯閘的輸入輸出關係之後，我們就可以往下進行囉，未來三十天我會盡量把我知道的分享給大家，如果有筆誤的地方也請大家多多包容．",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191484,自我挑戰組,0,"Let's""Go""系列",7,Day07　newFunction,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1513121492000000000,561,"如下我們調用內建的new函式來宣告一個型別為int的變數p，
值得注意的是調用new函式，所得到的會是地址",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191485,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,8,08.物件導向的特性—封裝、繼承、多型、抽象(撰寫中),依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1513121467000000000,606,"提到物件導向設計(Object-Oriented Programming, OOP)，一定會提到它的三大特性，分別是封裝、繼承、多型。此外，還有一個東西，筆者覺得很重要，在實務經常使用，所以一定要特別拿出來討論的就是抽象。
為了產出這篇文章，筆者想了很久，抽象到底是要放到三大特性之中那一個特性呢？如果看倌們去 google 「OO 三大特性」，一定可以找到很多的資料，在這些資料中，有些文章將抽象放到封裝或繼承之中。有些資料則是單獨拿出來說明。
筆者本身比較傾向後者，將抽象視為一個特性，因為封裝、繼承兩個特性，都可以配合抽象一同使用。
常常看到說明物件導向的例子，是使用車子啊、動物啊。筆者來挑戰不一樣的做法，讓我們看故事，懂 OO。
小陳是個超級業務，經常代表公司跟各種客戶周旋。他總是帶著笑臉，面對客戶們各種千奇百怪的要求，總是能夠在公司角度與客戶角度之間，取得平衡點，成功獲得客戶的訂單。
同事們跟他請教成功取得訂單的訣竅，雖然他不吝指教同仁的疑惑，但有些事卻也是輕輕的帶過。
私底下，對於客戶與公司的種種要求，也是有著滿肚子的苦水，這時，他的妻子就是最好的聽眾，總是靜靜聆聽他的訴苦。
十多年過去了，小陳的兒子也出社會，成為一個業務。在小小陳遇到業務的問題，小陳總是站在後面給他最大的支援，提供自己多年的業務經驗。
朕賜給你的，才是你的﹐朕不給﹐你不能搶。
筆者覺得出上面這句話，真的滿貼切封裝特性。
封裝，就是把想要表現在他人面前的，才表現出來(Public)。不想要讓別人知道的，就通通藏起來(Private, Protected)。
這樣說有點抽象，我們來分析一下上面的故事，學封裝的概念吧。",,"['1. 看故事，懂 OO。', '2.後言', '3. 推薦']","['1.1 封裝(Encapsulation)', '1.2 繼承(Inheritance)', '1.3 多型(Polymorphism)', '1.4 抽象(Abstraction)', '3.1 文章分享']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191482,ModernWeb,0,初探前端之路-React-由生到死的踩地雷系列,3,瀑布流(Masonrylayout)卡片排版,Luis-Chen,https://ithelp.ithome.com.tw/users/20103556/ironman,1513121004000000000,560,"經典的排版設計，最近需要刻瀑布式卡片設計，目前還在調教中...
我是用styled-components 撰寫 所以看起來有點不一樣，但是在閱讀上還是OK的
整個卡片外部的容器，這邊設定的是響應式的判斷
用@media 去偵測瀏覽器頁面的長寬,2; 當min-width小於特定px就會更換欄位數column-count
這是內部 卡片的包住的欄位，[box-sizing](http://www.wibibi.com/info.php?tid=CSS3_box-sizing_%E5%B1%AC%E6%80%A7)
CSS3 box-sizing 屬性的功能是用來調整區塊的內距與邊框計算方式，預設的 DIV 區塊的邊框最外的寬度，會因為內距 padding 的值以及邊框 border 的粗細而有所影響，常見的情況是設計師調整了 padding 或邊框的粗細，導致整個 DIV 區塊的寬度改變，輕則影響到美觀，重則影響到整個網頁的排版，有了 CSS3 box-sizing 屬性，網頁設計師可以自己控制 DIV 區塊邊框的計算方式，改善寬度跑掉的問題。
用於調整padding設定完的跑版
單純的React-Semantic-Ui Card
因為他預設卡片高度是適應圖片高度，所以本身卡片就提供不等高的效果，只是他卡片的排版要像瀑布流卡片排列的話
要自己刻，排列的程式碼
網路上有很多做作法，我做的算是很簡陋的，只能先求有再改進了
參考",['前言'],"['CSS 樣式', '結尾']","['MasonryVertical', 'MasonryVerticalBrick', 'Card']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191440,SoftwareDevelopment,0,初探Kotlin系列,7,[Day7]ControlFlow,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1513120110000000000,553,"傳統If應用如下:
可用單行表達式
Kotlin中採用when關鍵字取代switch
使用方式如下
如果when多個條件皆處理相同的事物
則可以合併在一起
when的條件除了用常數之外也可用函數表示
也可用in跟in!關鍵字判斷是否在某個range內
用is跟is!檢查參數是否為某種類型(type)
取代if-else判斷式
For迴圈語法語C#相似
withIndex 可同時獲得key跟value值
沒甚麼大變化","['If', 'When Expression', 'For loop', 'While loop']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191466,自我挑戰組,0,ArasPLM開發練功30天系列,9,[Day9]Form-前端事件修改disabled為readonly,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1513120055000000000,574,"本節開始會介紹前端事件的各類操作，一開始我們先將事件加入到Form Event，並設定onFormPopulated(每次畫面刷新觸發)。
新增一支Method

加入到指定的Form Event中，並設定onFormPopulated

新增一個work order物件，開啟F12查看console.log訊息

這時候可以看到第一筆資料是來自document.thisItem物件，代表Aras在開啟物件視窗時，自動會把Item記錄在document暫存裡，提供開發者存取物件。第二筆訊息則是可以用Javascript原生程式碼讀取網頁物件，因此要在Aras系統中開發需要的功能並不是難題，只要熟練前端技術並對Aras物件整合，可以達成各種不錯的應用。
再來，試著把表單Text disabled設定為readonly，11SP9在disabled時使用者可能在文字框上無法複製文字，這時改為readonly即可。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191480,自我挑戰組,1,30天的切版日記系列,9,Day9:做個DatePicker(三)-事件,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1513119901000000000,567,"css的部分將日曆設定為絕對定位、預設不顯示並增加一個class並設定顯示 （由js控制）。
將日曆設定為絕對定位、假設這是一個之後會被幾個頁面運用的套件，頁面結構有可能會變動，因此在點開日曆前計算位置。
js
這邊不直接給左右箭頭建立綁定事件是因為init只調用一次，左右箭頭被不斷銷毀和重建，綁定事件會無法生效。
這邊在html結構加入了 data-date
js  target拿到選擇的日期
先這樣
一樣放在 這裡",,"['點擊input 展開收起日曆的事件', '月份切換', '選擇日期顯示到input']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191478,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,10,什麼？！我們竟然有3個標準？-你有聽過CommonJS嗎？(Day9),"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1513119653000000000,585,"Hi! 大家好，經過昨天的介紹
應該對 Node 這個 runtime 有更多了理解了

現在，我們要回到幾天前話題
那就是 JavaScript 的老毛病
在開始前，有個小問題可以先讓大家想想
「為什麼 ECMAScript 不要提出一套模組化標準給大家用，要讓開發者這樣痛苦呢？」
答案是，一直到 ES6 定稿，才正式地把 JavaScript 的模組標準定出來
ECMAScript 委員會決定要在 JavaScript 新增幾個關鍵字
其中最重要的就是 import 和 export 了！

基本上，他就等同於我們前幾天介紹 Yui 這套 script loader 的 Yui.add() 以及 Yui.use()
這是什麼原因呢
因為 ES6 其實還算是一個相對近期才定稿的標準
而且像是 import export 這樣關係到 「模組化」「讀檔」的標準
其中很多細節是瀏覽器開發廠商(Google, Mozilla, Apple, Microsoft)要注意的
而且不是自己說幹就幹，萬一跟其他人寫的版本有除了標準以外的衝突就不好了
這邊有個使用這些 ES6+ 新標準的好習慣
如果怕你使用的某個標準沒支援
可以先上 https://caniuse.com 來看看各家廠商實作的標準
沒有錯！這邊有個雷點！
我們昨天介紹的「標準化程式語言」
聽起來盡是一切美好，不但公正公開，讓大家都可以實作
不僅幫助 JavaScript 散播，還可以避免開發團隊突然飛機失事了，無限期停止開發
這樣的標準化程式語言
開放大家自做自的版本，結果就會是
「每個人支援到的標準都不一樣啊！」
像是舉 import export 好了，他的標準叫做 ES6 Modules

在 Can I Use 可以看到
Edge 一直要到第 16 版才有支援
Chrome 要到 61 版
Firefox 則是跟 IE 一樣，到最新版還是完全陣亡！
更別提手機瀏覽器，你要使用 import export 可以會面臨不支援的風險！
這就是「標準化」的一個問題
他保留了許多空間來讓開發者們想支援到哪裡
可是你想做一個「跨平台/瀏覽器」的軟體時，卻又很難兼顧開發緩慢的小眾
這也是為什麼就算 ES6(2015), ES7(2016), ES8(2017) 一直推陳出新，標準想開就開
(他們竟然還很認真的想讓 Date 這個物件支援也許火星將來會有的時區標準) 連結
所以，如果你想用這麼新的標準，可能要好好想想了

(但是，還是有其他方法的⋯⋯)
但是努力的 JavaScript 社群當然不會就此善罷甘休
現在有個非常活躍且著名的 Project 「Babel」(英文的巴別塔)

很大程度地解決了標準不通用的這個問題
但是，我們今天的主題是 CommonJS
因為最新的 「ES6 Modules」到現在支援性還很差
可是我們前面知道
早在接近 10 年前的 2008 ，前端模組化的問題就一直引起討論了
所以熱血的 JavaScript 社群
為了解決模組化的問題，當然是自己連同 標準、Runtime 都自幹一套拉！
解果答案是，他們太熱血了，「他們幹了『好多套』標準」
一個東西沒有官方標準的問題就是
當民間想自幹時，可能就會出現張三、李四寫的版本都不相容的情況
那時候民間流傳的模組化標準就有兩個流派，「CommonJS」 和 「AMD」
不是，這裡的 AMD 是指 Asynchronous Module Definition

這邊要介紹的第一個流派，是 CommonJS
CommonJS 當時在 2009 年被社群開發出來
他們決定在 JavaScript 新增一個新的 function - 「require」
以及 export 這個物件

來達成他們自己規範的模組化系統
因為 JavaScript 開發者們喜愛「標準化」的性格
CommonJS 代表的僅僅只是 require 和 export 這樣宣告模組的語法
至於不同 JavaScript 的 runtime，會自己去選擇要不要支援
或是開發可以轉譯 CommonJS 語法的函式庫
想當然，最早採用 CommonJS 「標準」之一的 runtime 就是 Node.js 拉！

(Ryan Dahl 在 JSConf EU 第一次發表 Node.js 的簡報)
基本上設計一套模組化標準，有幾個重要的特點要考慮
我對模組做 CRUD( Create-新增，Read-讀取，Update-新增，Delete-移除)
應該使用什麼樣的語法
我把模組引入進來，應該要是同步，還是非同步的？
(如果有個模組很大，該讓程式花 5 秒慢慢 Load 嗎)
(還是為了加快速度，去處理的非同步邏輯)
這就是我們今天的內容了！
我們今天介紹了 JavaScript 為了模組化這個老問題，而漸漸大家逐鹿中原的情況
從最新的 ES6 Module, 也提到了 CommonJS, AMD
由於早期標準發展較慢的原因，社群們開始了自幹之旅
最早的 CommonJS Module 看起來似乎前途光明，但是社群總是有 Drama
我們明天，會更加介紹 CommonJS 本身身為一個 Module 標準的特性
以及其他的競爭對手，如何提出異議，而跟他競爭的

最後，我們會介紹，不同的 runtime 如何在這些 Module Standard 的政治角力中做選擇
以及主戰場如何從火星(Node.js)，一路殺回地球(瀏覽器端)，讓 Browser 端 JavaScript 重返農藥！
我們明天見！","['前言', '最新潮的官方標準 import export', '那我們為什麼現在還沒在使用 import export ?', '警告！', '但是！', '不過？！', '什麼是 CommonJS', '等等，我剛剛是說「一」嗎？', 'AMD 是做顯卡的 Advanced Micro Devices(安謀) 嗎？', '注意！', 'CommonJS 的特性', '明天']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191071,自我挑戰組,0,iflen(learning.python)==30:系列,9,Day9-String-Format,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1513119619000000000,558,"兩種風格的格式化字串
靠左、靠右、置中
同數字呈現不同基底、千位數分隔號、百分比",,"['str.format()', '參考']","['by position or by name', 'aligning the text', '其他']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191365,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,4,[IV]用CodeIgniter的30天-靜態頁面原理探討,qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1513119547000000000,565,"昨天瞎J8抄抄寫寫，搞出了一個靜態頁面
今天來看看到底幹了些什麼
主要搞事的都是 controller 我們的 controller 很社會
看最終的 controller 長這樣
首先第一行
public function view($page = 'home')
我們知道他是一個 public 的函數叫做 view
自帶參數 $page = 'home'
然後
這邊用了 php 原生的 function file_exists 會去檢查文件是否存在
中間的參數是路徑和檔名
若是檔案不存在，就去呼叫
這支 function 位在
\system\core\Exceptions.php
is_cli 先判斷了是不是指令列模式
最後再把設定好的錯誤訊息給 echo 出來，就是我們看到的404頁面啦
再回頭看原先程式碼中的
這邊是把 $data['title'] 定義為大寫開頭的 $page 簡單暴力
最後
使用了
$this->load
的方法來載入，那 what is $this 呢？
我們看到整個檔案最上面
我們知道這個 controller 是繼承了CI_Controller的
繼承之後當然就可以使用裡面的 function 啦
所以可以知道我們載入了三個view
於是這就是第一個靜態頁面的解釋，剩下一些更深入的 core 部分會留到未來
如果 沒成功消耗完這 30 天 時間上充裕的話就來研究一下
畢竟這也是當初開賽的目標 (謎：不是找減肥失敗的藉口嗎",,['沒錯我要幹的就是這個！一行一行的看'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191468,ModernWeb,0,Confluence線上協同作業之平台系列,8,如何更換dashboard,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1513119480000000000,558,"dashboard在confluence中，可以把它想成網站的首頁，也就是點選網站後所看到的入口首頁，而如果沒有customize頁面的話，預設的dashboard會如下畫面，簡單乾淨容易使用是它滿棒的特色。

在我接觸confluence中曾經遇到3個與dashboard有關的問題，其一是要如何讓dashboard變成有動畫的顯示方式，遇到這個問題，我第一個想到的問題是美編及動畫不是我熟悉的，且confluence更新首頁設定的方式，我也不太會，此時我想到的幾個方式，其一找看看有沒有plugin可以變更dashboard，其二是問問原廠看有沒有其他方式可以來變更，而這兩種方式我都有試過，而都有些新的發現。
plugin的開發世界可說是多采多姿，遇到此問題當時第一個想到的就是輸入關鍵字dashboard來找看看有沒有現成的plugin可以直接來使用，也的確有找到，但那時候找到的plugin是要付費的，且那個plugin可以解決我第二個問題，有USER要求要將選單設定成階層式的呈現方式，但也因為該plugin是需要另外付費的，也因此不考慮此選項，而當時我曾經想用替代的方式，即安裝plugin後，將dashboard設計好後，試著將plugin移除看是否可以將其wiki語法直接拿來使用，有一點類似使用網頁按下檢視原始碼的效果，結果經測試此方式並不可行。
第二個方式與原廠確認此問題，那時候他們的回覆如下
Please take note that according to Atlassian Support Offering, customization and third party plugins are not supported by Atlassian.
也就是客製化或third party的plugin不支援，但他們會給予一些方向，後續的測試仍然要靠自己，例如原廠有建議https://marketplace.atlassian.com/plugins/com.simplenia.confluence.plugins.customdashboards/server/overview 的plugin，雖然我到現在仍然對此plugin不熟悉，但就在對此問題苦於沒解答的時候，有擅長美工的夥伴出來協助此部分，但另外一個問題也因此產生了，畢竟confluence的dashboard不是說換就能換的，而我也不知道怎麼來更換首頁，因為它不像php/html/aspx的網站只要知道哪個頁面的檔案是首頁，通常都是index.aspx/index.html 這類的檔案名稱，直接卻改該頁面的內容就可以了，而我也有針對此問題來與原廠確認，但通常的到回覆會是不支援此部分的問題support，而這個問題曾經讓我卡關有很久一陣子，在偶然的機會中，我在confluence的教學影片中(google隨意找youtube中的某一部影片)，看到幾個關鍵字，雖然我現在可以知道它的作用，但不知道他的語法的緣由，在theme的layout設定下

改成下列的語法

透過這樣的應用就可以將dashboard改成指定頁面的內容來呈現。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191282,自我挑戰組,0,軟體工程漫談系列,8,『我覺得這樣已經很方便了』--測試要做到多自動化才夠？,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1513119269000000000,677,"自動化測試、自動化測試，一樣的話不知道聽多少遍了，大家都知道要做自動化測試，但是真正能做到的有幾個？首先，『趕進度都沒時間了，沒時間寫測試』是我聽過最多的原因。我沒有辦法解決你沒時間寫測試的問題，因為，這代表你的工作環境不把測試當成你的工作，而且，加班寫測試也不就失去了本意。除非你把這件事當成興趣，或是學習技術，以side project的方式來在閒暇時間做，那還勉強OK。
在敏捷開發的洪流中，比較麻煩的是一種『我覺得我已經很敏捷了』的人。他不願意改變，他覺得這樣已經『夠敏捷』了。這種人，你很難動搖他的心智，因為他認為，『這麼敏捷了，還要改善什麼？』-- Well, 你發現這句話的矛盾了吧！
敏捷開發的重要精神就是持續改善，有敏捷精神的人，會在任何時刻有不需改善的想法嗎？
自動化測試也是一樣，如果你認為『這麼自動化了，還要改善什麼？』那你就是犯了跟上面抗拒敏捷的人一樣的錯了。我舉個例子吧：
我的產品中，有一個『客戶單筆消費明細』功能，我寫完了，也寫了測試。這個測試很簡單，我們有一個RD共同開發的環境，於是我在該類別中埋下一個main，我每次想驗證此類別有沒有被改壞，就去執行那個main，他會去讀取一批我事先在該環境準備好的資料，並且秀在螢幕上。
『只要這個測試用的main正常跑完，我只要一眼就能看出這個報表功能壞了沒，因為這個結果是固定的。』
這樣做算是自動測試嗎？嗯...well,...這要看你有沒有付我顧問費來回答你這個問題...
哈！開玩笑的啦，當然不算啊！
這樣充其量只能算是『跑個結果出來，並檢查一下對不對』
這種事連QA都懶得手動做了，你都動手寫程式了，怎麼才寫成這樣？
（請原諒我說話就是這麼直）
如果你所謂的『自動測試』長得像上述故事這樣，我們來看看你至少有哪些可以更好的做法
資料自己準備是好事，但是一旦用了共用資料庫，難保你的測試資料不會被別人不小心竄改。最好的做法，是有一個自己的空白資料庫，管你要架在自己電腦還是偷偷在公司伺服器裝一個。反正裡面只能有你的資料，而這個資料庫最好是隨時保持全空狀態（只有Schema），在每個測試案例要開始前，才去創一些這個案例專用的資料，並且在測試完後刪除，留下乾淨的資料庫給別的測試案例用。
關於這點，也許你有存疑，但因篇幅有限，歡迎參考拙作『談測試的資料』，裡面有比較詳細的論述、原因、與建議做法。
現在已經是2017年了，不管你是前端還是後端，甚至是網頁，都有不只一種的自動化測試框架，即便是worst case，都可以按一個鍵，就跑完此專案內所有測試。因此，像『寫一個只有自己知道在哪裡的main來慢慢測』這種大學時代的做法，我們就盡量不要用了。（就算用了也不要跟別人講）
我絕對不是說舊方法不好
我絕對不是說舊方法不好
我絕對不是說舊方法不好
舊方法很好。因為，舊方法會存在，肯定是因為在那個年代，他是最適合的做法，我們必須給予肯定。但是同樣的精神留著，可以拿來套用在比較方便又全面的技術上，何樂而不為呢？
請記住，測試，尤其是功能性測試，是跑再多次也不會嫌煩的。如果不能至少做到一鍵執行所有測試案例，在21世紀的今天，就不太被認為是『自動化』的測試方式。
沒有什麼是不能比較的。如果你的物件欄位有10個，那就叫程式幫你比對這10個欄位。如果你預期某行Log會出現10次，那就叫程式去屬看看是否真的印了10次。如果你預期這樣跑完資料庫會新增20筆資料，每筆資料5個欄位，那你就叫程式去整張table取出來，先數數看是不是真的有20筆，再一筆一筆對看這5個欄位是不是預期的值。
當然，除了一些圖案顯示性的功能比較難用程式比對以外，舉凡是資料正確性、特定method被呼叫次數、連線建立數等，只要是你用眼睛看得出pass或fail的值，都可以讓程式用同樣標準去檢視。你說你肉眼看一下很快，問題，你有比電腦替你看還要快嗎？一次努力，永久受惠，多划算啊？
半自動測試另一個有可能引發問題的地方，就是你必須時不時地想到，然後去跑一下。問題就在，你跑了30次都pass，然後隔了一周才想到，再去跑第31次，問題就往往出在這一周的空檔。
理想狀態下，我們會希望每次commit，或至少每次push，就能自動觸發此專案中的所有已存在test case。如果這件事很難，那麼你至少要排程，讓他每天自動地跑一次。既然是排程，時間就可以訂在大家都下班後的深夜了。而排程的好處很明顯：『你會忘，但電腦不會。』
至少，你每天一進公司打開email，就知道昨天我們團隊做的所有更動，把哪些其他功能搞壞了。記得我們前文說的嗎？痛苦的是要讓他提早發生。debug夠痛苦了吧？那就讓bug一旦被製造出來，就馬上被抓到吧！
以上只是一些基本步驟，還有更多更深的理論在背後，但是身為工程師，如果我們沒有要追求極致完美，至少我們要做到有信心。譬如：
我的主線上的程式，老闆隨時有需要，我都有信心他可以馬上讓測試人員檢測，測完馬上上線。
你如果初期能做到這種程度，其實也就夠了。
接下來就是在開發過程中，持續補強，持續讓流程更自動化 (aka更懶)，並持續改善你的工作流程，當然也包含你的『自動化腳本』本身。請記住：
在敏捷的世界裡，唯一不變的事情，就是『改變』這件事本身。",,,"['不要跟別人共用資料庫', '不要另寫main來測試你的功能（就算寫了也不要跟別人講）', '能夠用肉眼比對的『值』，就一定可以叫程式幫忙比對', '可以想到時手動驅動一下，但是至少你要每天『自動』驅動一次全部測試案例', '隨時思考有沒有更『懶』的空間']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191477,自我挑戰組,0,服務桌從開始到進入資安領域系列,8,[Day8]服務桌的日常:r9s無法接聽line語音通話問題排除,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513119177000000000,589,"設備:手機
型號:r9s
問題:小青蛙打電話給我，一接起來就掛掉。有圖有真相，您看看...

已嘗試過的方法如下，皆無法恢復line語音通話功能。
後來，移除了whos call之後，line語音通話功能終於回來了...",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191461,自我挑戰組,0,迷路還是繼續往前走的菜鳥工程師日常系列,8,[Day08]不負責任的Git教學03最終章,overflow,https://ithelp.ithome.com.tw/users/20107577/ironman,1513118930000000000,550,"相信有讀我GIT教學的大大們，應該是嚇到吃手手紛紛表示「怎麼可以教這麼爛！」　
昨天把分支推送到遠端數據庫後，今天就來教把分支合併到主線吧！
就完成了很簡單的分支合併拉！(前提是都沒有任何差異下拉XD)，不過既然身為新手邊緣人，可能比較無法讓你實際感受差異合併，本來想說要自己演多人開發合併衝突的狀況，後來想一想要多種角色扮演，我可能會越寫越亂，所以我就不打算說了，有興趣可以看其他人的文章哦
因為真的要差異合併的時候，你的前輩一定也不放心的機率很高，所以基本上第一次做差異合併真的可以直接請教前輩！
我們之前開發的時候都會避開彼此修改的東西，除非真的不得已的情況下，才會有機會處理到差異合併。不然其實我們都只是很簡單的要新增或異動功能：
每次的SOP大概都是這樣，基本上我們也不會去互撞對方正在修改的東西...，每一家公司有每一家公司不一樣的做法，但像我只會這些就可以在那家公司生存了，GIT就殘害大家到這樣囉！
我那時候是讀 連猴子都能懂的Git入門指南 老實說，只看網站我跟本不懂也無法理解，最重要的地方就是實際自己做過一次，才會比較明白，所以第一次操作的時候我直接請主管用他正常的SOP流程教我操作一次，我就先把它的操作方式記起來，再自己去理解為什麼要這麼做",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191476,ModernWeb,0,TypeScript-初學之路系列,6,Day06-Interface,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1513118181000000000,515,"TypeScript 有一種類型宣告方式
有時候這個模式叫做 duck typing 或是 structural subtyping，
或統稱為 interface
最簡單的的 interface
呼叫 printLabel 的時候會進行 type-check，而在 printLabel 中就有參數檢查
label 必須是 string
實際上可能有更多的屬性 不只是 label
檢查只會檢查 label 屬性是不是字串
有些狀況 TypeScript 並不寬鬆
依據上面的範例可以使用 interface 指定 label 為必要參數
LabelledValue 是我們可以描述參數必要性的範例
代表輸入值必須要有一個 label 變數型態為字串
我們並不需要非常明確的指定 printLabel 這個 Function 的輸入參數
只要符合這個 interface 就會允許使用
也可以定義不一定會存在的參數
有些 properties 應該只能被修改  無法整個被覆寫
也可以定義一個唯讀的陣列
最後一行中，當你定義為普通 ReadArray 要 assign 給一個 Array 是不允許的
const 只是禁止你的物件被覆寫
而 readonly 則是設定你的物件中的參數被覆寫
在第一個範例中，雖然我們寫了一個 interface 是 {size: number, label: string}
但是我們真正有使用的只有 {label: string}
我們在剛剛也有提到 optional properties 或是稱為 option bags
但是這兩個一起使用的話也有可能產生一些問題
上述範例中 creteSquare 中的 colour 拼錯了
正確應該是 color, 並且 TypeScript 會顯示編譯錯誤
然而你可以辯解說因為 width 是正確的
color 並不存在，但是 colour 名稱的錯誤是微不足道的
這時候正規的實作方式可以是
我們將會討論 index signatures 但是在這裡可以說 SquareConfig 可以有任意數量的 properties
不論是不是 color 或是 width 他們並不在意
另外還有一種方法 你直接宣告一個 SquareOptions 物件來放入 createSquare 中也不會有錯誤出現
請記得上述的範例  不應該讓這些檢查類別變得更加的複雜
你應該要持續檢查這些類型，因為大多數的錯誤都會造成 bugs。如果你允許 在 createSquare 中使用 color 或是 colour 這兩個參數
你應該修改 squareConfig 來顯示這兩種使用情境
interfaces 可以用來描述物件的輪廓
然而為了要可以描述物件的 properties 所以 interfaces 應該也是可以描述 Function types
interfaces 描述一個 function type 的時候只需要定義 parameter 列表和回傳值
每一個 parameter 都需要明確的定義名稱和類別
只需要定義一次之後就可以拿這個 interface 來建立變數
在宣告 Function 的時候 parameter 的名字不一定要一樣
宣告也可以只宣告一次
之後依據同類型宣告的 Function 也會依照之前宣告的 interface 做檢查，不避在重複定義。
基本上我們可以用 interface 來定義 Function 也可以來定義 index
在上方的範例中 StringArray 中有宣告一個 index type 為 number。
基本上只有 兩種類型的 index， 就是 number 和 string
也可以同時支援兩種類別，但是在支援兩種類別的時候若是為 100 則必須是回傳 '100'
也就是兩種類別必須要統一
string 是非常實用的宣告 index 方式
因為 obj.property 也可以視為 obj['property']
這一個範例因為 name 的類別並不匹配，所以在檢查類別的時候會有錯誤
最後我們試著宣告一個唯讀的 interface
也可以描述在 class 中的 method
例如在 Clock 中描述一個 setTime 的 method
當我們要使用 interface 來宣告 class 的時候
要記得 class 有兩種類型，一種是 public 一種是 static 當你要宣告一個 class 的 constructor 的時候會有錯誤
這是因為當一個 class 轉為 instance 的時候
只有 instance 這邊有做 typing-check 而再 static-side 並沒有包含這個檢查
所以在下面的這個範例，需要定義兩個 interface
ClockContructor 是為了 constructor 而 ClockInterface 是為了實體化後的物件定義
而會了方便我們定義 constructor 所以又建立一個 createClock 來做這件事情
因為 createClock 的第一個參數是 ClockConstructor 在 createClock(AnalogClock, 7, 21) 中檢查 Analogclock 的 constructor 是否有正確的參數類型
就像 classes 一樣 interface 可以利用繼承將他們的屬性傳給自己的 Children
也允許多重繼承，建立一個集合體
Javascript 常常會有很豐富的一個 多次繼承，也可以使用 Hybird Type 來做多個繼承
當一個 interface 繼承了一個 class 只是繼承了他的屬性而不是他的實體只是繼承了他的屬性而不是他的實體
這就是說當你要實踐這個 interface 的同時也必需繼承同一個 class 來實現他的所有屬性
當你有一個很大的繼承架構
但是又想要自訂一個程式碼專為某一個 subclass 中的某些屬性 又不希望她繼承所有的父輩繼承
上述範例中 SelectableControl 包含了所有的 Control 的屬性
包含 private 的 state，這意味著之後要實現 SelectableControl 的同時只能 extends Control 一個類別去承接他的 private 的 state
在 Control 之中允許透過 SelectableControl 來取得 private state
而 SelectableControl 就像是 Control 知道他還會有一個 function select
Button 和 TextBox 是 SelectableContorl 的子類
因為他們都是繼承 Control 但是 Image 和 Location 則不是",['Interfaces'],"['簡介', 'Function Types', 'Class Type']","['第一個 interface', 'Optional Properties', '唯讀', 'Excess Property Checks', 'Indexable Types', '實現一個 class 的 type', 'Difference between the static and instance sides of classes', 'Hybird Type', 'Interfaces Extending Classes']",['readonly vs const'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191475,ModernWeb,0,TypeScript初學之路系列,9,Day09-JSX(上),TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1513118082000000000,516,"JSX 是一種類似 XML 的標記性語言
可以被轉換為合法的 Javascript 因為 React 的框架而開始流行
但是也可以，但是也可以使用在其他程式中
在 TypeScript 使用 JSX 必須先做兩件事情
TypeScript 有三種 JSX 的模式， preserve, react, react-native
會保留 JSX 提供後續轉換使用
會生成 React.createElement 在使用前不需要再轉換
相當於 preserve 但是輸出的檔案副檔名為 .js
可以在命令列中使用 --jsx 或是在 tsconfig.json 中指定模式
寫一個 class
因為 JSX 語法解析困難
所以在 TypeScript 禁止使用 <> 來宣告
所以在 tsx 中改為
as 在 .ts 或是 .tsx 中都可以使用
為了理解 JSX 如何檢查類型必須要先了解原生的元件根基於值得元件有什麼不同
假如有一個元件 <expr /> 可能會引用 div 或是 span 這類的標籤
TypeScript 使用和 React 相同的規範來做區別
Intrinsic elements 預設是 JSX.IntrinsicElements 做類型檢查，預設是 any
上面範例中 foo 可以執行，但是 bar 會報錯誤訊息，因為 bar 並沒有在 JSX.IntrinsicElements 內指定
也可以指定為所有
一般使用 Component 如範例
範例
因為 SFC 是簡單的 Function 所以可以盡量的使用","['JSX', 'as Oprator', 'Type Check']",['基本使用方式'],"['preserve', 'react', 'react-native', 'Intrinsic elements']",['Stateless Component (SFC)'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191471,自我挑戰組,0,打雜人生-腦容量不夠用就筆記筆記唄系列,6,[Day6]Python自習手札:Selenium套件安裝,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1513117505000000000,527,"Selenium是firefox的插件，功用是網頁自動化測試來著~
開始安裝套件Selenium
官網下載Selenium
https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/

點選previous versions here

點選立刻安裝

點選立刻重新啟動

Selenium插件裝好了，可愛的圖示再右上角^^
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191473,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,9,[Round9]探索自我的心靈旅程,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1513117404000000000,515,"感恩 seafood、讚嘆 seafood，你有多久沒了解自己了(招手
經由上次”[Round 5] 喜歡、不喜歡，dochi?”的分析，大概清楚自己比較偏好哪種取向的桌遊了。而有不好經驗的過程先記錄下來，在之後的設計過程中儘量避免",,"['喜歡', '不喜歡']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191472,ModernWeb,0,PHPlaravel的邂逅系列,9,DAY09-Controller介紹PART2,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1513116811000000000,522,"昨天的controller中的index已經可以正常執行，今天來講解其他幾個Function。
下面的語法可以一次幫你建立好CRUD的路由，在web.php只要留下下面這一行就可以了。
終端機打入下面語法，就會顯示目前所有的路由，方便查看，如果忘記有寫哪些路由，就可以這樣查詢。

網址打上：http://127.0.0.1:8000/news/create ，看看有沒有正常執行
網址打上：http://127.0.0.1:8000/news/1 ，就可以看到上面的字串跟傳進去的id
edit、update、destroy、show，這幾個Function都是傳參數進去，可以修改特定的某筆資料。
如果你的controller只處理單個行為的話，就可以使用__invoke的方法，而在route裡面也只要寫上controller的名字就可以抓到controller的資料。
可以在route的後面加上middleware字樣和名稱即可使用
也可以在controller中加入middleware使用
或是直接在midddleware裡面加入閉包寫middleware，如果你的middleware程式碼很少的話就可以使用這個方法，就不用在特別新增一個middleware了。
在後續章節會有完整的CRUD教學",['DAY09-Controller介紹PART 2'],,,"['controller單個行為寫法', 'controller middleware用法']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191456,自我挑戰組,0,用laravel尻出自己形狀的linebot，還要撐三十天！系列,7,【第七天】支線任務：XPath,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1513116609000000000,568,"大家晚上好，前情提要！
為了爬取巴哈動畫瘋的本季新番，我們要做一隻小爬蟲，用的套件如下：
其中的MethodfilterXPath是這樣用的，我用昨天晚上的一些時間看了一下相關資料，
這邊推薦幾個網站給大家當作認識XPath的起手式！
大概有些初步的了解即可開始寫寫看一些例子！話不多說，我們開始吧！

所以我們可以先寫出一個function如下：
CrawlerService.php
CrawlerServiceTest.php
恩～照我看完上面一些參考連結的結論，我這樣子dd出來的東西，應該要會是一堆的A框的東西才是！
符合//div[contains(@class, ""newanime"")]這表達式

恩...這樣好像看不出來是啥鬼，東西太多了！
所以我們稍微調整一下吧！
CrawlerServiceTest.php
矮唷～好像有點樣子囉！看來理解沒錯！

以上圖為例，有些時候我們要的資訊（例如Ｃ框）不在Ａ框裡面，所以我們最後還是要再檢查一次！
很好！既然我們已經把Ａ框們給抓出來了，接下來只要在each裡面去整理出我們要的資訊就好！
下一個來抓日期吧！
CrawlerService.php
這裡要稍微說一下，為何還要再加上一個each呢？
不是應該直接寫成下面這樣就可以了嗎？
主要是因為還記得剛剛上面說到的有時候我們要的資訊不一定在Ａ框裡面嗎？
這樣寫的話就會噴錯。
（雖然也只是我猜測的原因，如果有大大發現我說錯了再麻煩趕緊指教一下）
我們可以試著追code會發現到
Crawler.php
回到正題來！我們就可以啪啪啪的把我們的function寫出來了！
CrawlerService.php
CrawlerServiceTest.php
這麼一來我們需求中的動漫瘋本季新番就已經爬好，只要再把他和之前的推送通知整在一起就大功告成了！
時間差不多，今天就到此為止囉～剩下明天再來做！",['【第七天】支線任務：XPath'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191464,SoftwareDevelopment,0,每天Racket3分鐘系列,9,"(cond((not(day-08?))'all-right)(else""我若不在寫Racket，就在去寫Racket的路上—Racket的控制結構""))",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1513115149000000000,522,"如同我們在前文所見的 if，if 的確是一個最古老的決策結構，幾乎有程式語言的時代，就有了它。而它的使用需要注意什麼呢？在 Racket 裡的 if，先接了判斷值，這判斷值如先前所述，如果不是 #f，就清一色都是 #t。這點其實需要特別注意，因為從程式語言觀點來看，這樣做並不好。一個嚴謹的語言，if 與任何判斷機制，都應只接受 boolean 值。
除此之外，在這裡需要特別說明的，其實是 if 的正論與反論邏輯，if 在其他語言，常常是可以只留判斷式成立時的行為，而不寫 else，像這樣：
然而，在 Racket 的 if，卻絕對不能沒有 else 的反論邏輯。例如你不能這樣寫：
因此，如果你真的不想做什麼事，可以這麼寫：
而我們使用這些條件判斷時，常需要組合幾個可能，搭配 and、or、not 之類的邏輯組合方式，而 Racket 正提供了這幾個選項：
當你的邏輯有多重判斷時，在其他的語言，諸如 Java/Python，會使用什麼語法？以 Java 來說，就是使用 else if 的作法，在 Python，我猜應該也不出是這作法。這作法的好處，是在於使用統一的語法形式來表達多層次的判斷，而當然，在寫起來也比較繁瑣。
Racket 則使用另一個簡潔的邏輯控制機制：cond。它可以讓你一直加上條件與回傳值，例外條件則使用 else 來表示。以下是用 cond 寫的一個費氏數列函式：
然而，cond 是一個特殊的案例，它可以不寫 else 區段，因此若你的 if 沒有 else，或許可以考慮使用 cond 來呼叫。
下這標題不是把大家當小朋友，而是其實 for 本質上是一種語法糖，它其實並不存在於程式語言的核心概念中，而是為了開發方便，擴充出來的語法。當然，Racket 之所以是 Racket，也在於它提供了許多親民的語法，像 for 就是：
for 有許多組合語法，詳細可以參考 Racket Reference [1]，我們主要說明它的基礎概念，因為我們後續會碰到跟它很像的一個結構。
首先先說明中括號，在 Racket 與 Scheme 裡頭，小括號與中括號是可以互用的，因此在慣例上，我們在定義區域變數時，會使用中括號 []。
for 的第一個區塊，是定義在 for 裡要使用的區域變數，這些變數只會存在在 for 迴圈中。定義的方式是 id sequence， id 就是變數名稱，先前已經解釋過。而 sequence 的型態很特別，它只的是在 Racket 語言裡面，具有次序關係的值，例如一個 List、Vector、String。然而，如果只輸入一個數字呢？它也允許你輸入一個正整數 n，然後它會從 0 跳到 n-1。
但是輸入一個數字的方式，其實可讀性並不佳。因此，我們要說明另一個作法：
如果你要用跳數字的方式，我會建議使用 in-range 的呼叫。
如果要對這些區域變數做些即時性的判斷與處理，可以搭配 for 的 Keyword，如：
像 for 還有昨天最後說到的 cadr、cdar 之類的特殊語法，其實都屬於 SRFI 的範圍。SRFI 全名是 Scheme Require For Implementation，是 Scheme 語言規格書之外的擴充規格。既然 Requre For Implementation，就代表有許多的實作，而 Racket 語言是把絕大多數的 SRFI 都實作在語言核心中了。",,"['1. 最古老的決策結構', '2. 最前衛的決策框架', '3. 一切都是為了 (for) 吃糖']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191457,AI&MachineLearning,0,深度學習環境安裝筆記系列,1,[Day01]深度學習環境安裝筆記—目錄,a7552005,https://ithelp.ithome.com.tw/users/20091307/ironman,1513114541000000000,595,"“在這裡我們不教你如何上太空，而是教你如何邁出第一步。”
雖然現在有許多好用的的框架跟環境可以讓普通人使用深度學習，在建置環境的過程中會遇到各種各式各樣的問題，很多時候明明照著官方的說明作還是會出現錯誤，如果連環境都建置不好更別說要入門深度學習。
本篇會介紹如何在 Linux 以及 Windows 建置常用的深度學習環境並列出可能會遇到的問題，讓大家在入門深度學習的過程中少走一點歪路，如果有各位有任何問題歡迎留言給我，我會想辦法解決。
這個系列原本是要寫給研究室的同學看的，不過機會難得就寫出來讓大家也能快速入門深度學習。",,['目錄'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191427,SoftwareDevelopment,3,來做個網路瀏覽器吧！Let'sbuildawebbrowser!系列,2,先來看看瀏覽器內核長怎樣吧！,微中子,https://ithelp.ithome.com.tw/users/20103745/ironman,1513113815000000000,715,"上一篇文章提到瀏覽器會需要解析、渲染，這部分就要靠瀏覽器引擎來處理，又可以稱為排版引擎（layout engine）、瀏覽器內核（web browser engine）、渲染引擎（rendering engine）或樣版引擎。不論怎麼稱呼，就是負責把程式碼變成使用者可以看到的畫面。
下面這張圖源自 hacks.mozilla.org，我認為將內核的工作呈現的滿清楚的，包含從網路取得網頁，與使用者端互動，引擎進行 js、css、html 解析，以及渲染畫面到使用者端。

一個瀏覽器的內核是由好多模組組成，其中瀏覽器引擎只是其中一塊，並且可以作為獨立模組，也就是說同一個瀏覽器引擎，可以衍伸為好多個瀏覽器。這概念跟汽車很像，如同你可以把汽車原本的四缸引擎換成渦輪引擎一樣。而渦輪引擎也可以裝在各種車款當中。了解了之後，我們知道 Firefox 和 SeaMonkey 這兩款瀏覽器都是使用 Gecko 引擎，但 Chrome 則不是，就是這個概念！
一個完整設計的瀏覽器引擎非常龐大複雜，Blink、 Gecko、 WebKit 這幾個市佔率最高的大佬，哪一個不是幾百萬行的程式碼，即便是比較年輕、簡單的引擎，像是 Servo 或是 WeasyPrint 也都是幾時萬行起跳。這使得一般人很難一探究竟，更別說想要貢獻了！如果能懂原理，知道簡化版的實作方式，在真正碰到複雜的程式碼的時候，也比較能從容應對。
當然，瀏覽器的內核不只有上述的部分，事實上除了上述講的渲染引擎之外，瀏覽器內核還有使用者操作渲染引擎的接口、JS引擎、網路處理等等。而一般來說瀏覽器內核至少要處理三件事情，JS的處理程序、圖形渲染程序、瀏覽器事件觸發的程序，此外還會有 HTTP 請求流程、EventLoop、計時器等等東西要處理。
其中 js 引擎可以改變網頁元素，而渲染引擎也是處理元素，當然就會起衝突，所以同一時間兩者只能有一個在進行。而另一個則會被凍結。js 本身為異步執行，但是還是會有個主程序，相對於主程序其他程序流則為異步。從頭到尾直譯為主程序，中途可能會有 API 呼叫、DOM 操作、文件處理，這些則為其他的工作流程，會被排到工作序列等待執行完，然後函數回調告訴主程序執行完成，這個步驟會不斷重複，稱為事件循環，直到工作序列裡面沒有東西，才算結束。
至於渲染引擎的細節我們明日再談。大家明天見！
關於作者
劉安齊，軟體工程師，熱愛寫程式，更喜歡推廣程式讓更多人學會",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191346,自我挑戰組,0,Kaggle的解題挑戰系列,2,[Day02]Kaggle的解題挑戰-申請帳號和操作說明,BillLin1983,https://ithelp.ithome.com.tw/users/20103074/ironman,1513110572000000000,568,"在解題之前，需要先註冊帳號
先到官網

選擇Sign In，有蠻多種註冊方式的，我個人是使用Facebook

再來會跳到同意書的頁面，選擇I understand and accept

花了一點時間熟悉一下介面，不過最最重要的三個核心是Competition, Datasets, 和Kernel。Competition應該就是要解的問題，Datasets是有那些資料可以用，Kernel就是可以拿來寫code跑資料的平台，如果想了解更多，可以到Discussion有Beginner可以看。因為工作需要，所以會先寫一下Big Data相關的SMACK架構，也算是有相關，下一步會先簡單學一下Python，最後再正式解題。",,"['註冊帳號', '主頁操作說明']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191371,SoftwareDevelopment,0,簡潔高效的PHP&Laravel工作術：從ElementaryOS下手的聰明改造提案系列,2,第2天：安裝elementaryOS前的準備工作,shengyou,https://ithelp.ithome.com.tw/users/20107229/ironman,1513109142000000000,644,"本文同步刊載於作者部落格：https://medium.com/@shengyou/2018ironman-eos-for-php-developer-day2-d9c6456fe7b2
在安裝 elementary OS 之前，我們先確認一下自己的電腦規格是否符合官方文件所條列的最低需求：
另外要額外提醒 4 點：
elementary OS 官方只提供 64 位元的版本。基本上以工作機來說，只要不是太舊的電腦，跑 64 位元應該都不是問題。若真的有需要使用 32 位元的版本，可以照著參考資料裡的指南試試。
elementary OS 的安裝碟會製作成使用 UEFI 開機的格式。因此，要確認一下自己的電腦是否支援 UEFI，並在 BIOS 裡設定將開機模式以 UEFI 運行。一般來說只要是近幾年的電腦應該都不是問題。
請準備一個容量至少 2GB 的 USB 隨身碟。稍後我們會用這個隨身碟製作一個 Live USB 開機碟，用它來安裝 elementary OS。隨身碟的廠牌、型號和規格沒有特別的限制，但若是 USB 3.0 的話，安裝起來會比較快。不過，由於等一下會把整個隨身碟重新格式化，因此若随身碟上有資料的話，請先完整備份。
請在有網際網路連線的環境下完成接下來的步驟。因為不論是下載安裝檔，或是安裝的過程中，都會需要從網路上下載檔案。當然，網路頻寬愈大的話，效率會更好些。若是您準備的電腦網卡規格比較特殊，Linux 還沒有內建的 Driver 支援的話，可以先用有線網路完成前面的動作，等作業系統裝完後，再處理 Driver 的問題。
接下來，就來開始製作安裝碟：
ISO 檔可以把它想像成把一個硬碟壓縮並封裝成一個檔案，我們下載下來後，就可以把它燒成開機光碟，或是在 USB 隨身碟裡製作成開機碟。現在幾乎所有的 Linux 發行版都會直接提供 ISO 檔供大家下載安裝，因此，我們的第一步就是要先取得 elementary OS 的 ISO 檔。
首先，請開啟瀏覽器後連至 elementary OS 官網： https://elementary.io 。然後在「隨您心意」的欄位輸入您願意付的價格後，點擊「購買 elementary OS」按鈕 (是的，您可以輸入 0 元後免費下載，但若是真的喜歡的話，別忘了貢獻一己之力喔！)。

接著，畫面會出現一個選擇下載版本的彈出視窗，請直接點選「下載」即可。然後，瀏覽器就會把 elementaryos-0.4.1-stable.20170814.iso 檔下載下來。請先保留著這個檔案準備下一步使用。

為了將下載回來的 ISO 檔製作成 USB 開機碟，我們會需要一套燒錄軟體來完成這個工作。可以達成這個任務的軟體非常多，其中也不乏免費的選項。但遵照我們的決策模型：簡單操作、介面好看而且要跨三種作業系統平台的話，筆者推薦的新寵是 Etcher！
首先，請開啟瀏覽器後連至 Etcher 官網： https://etcher.io/ 。網頁本身會很聰明地偵測判斷您使用的作業系統然後預選下載的版本。若您使用的是 Microsfot Windows 的話，還有提供免安裝版本 (Portable) 可供下載。請先保留著這個檔案準備下一步使用。

接著，我們就要用 Etcher 來燒錄一個全新的安裝碟。請先插上您準備的 USB 隨身碟後點擊 Etcher-Portable-1.2.1-x64.exe 啟動 Ethcher。啟動後，接著只需要三步驟：選擇 ISO 檔、選擇磁碟、燒錄即可！(因為 Etcher 是跨平台軟體，在各平台的操作差異不大，截圖使用的是 Windows 10 64位元免安裝版本做示範)

就這樣完成了！有了開機随身碟，接下來我們就可以用它來開機/安裝 elementary OS。",,"['第一步、下載 ISO 檔', '第二步、下載/安裝 Etcher', '第三步、製作開機碟', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191458,ModernWeb,0,ASP.NETMVC網頁程式介紹系列,3,[Day03]我的第一個MVC專案(一),小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1513108754000000000,611,"今天分享一下基本的ASP.NET MVC專案如何建，以及ASP.NET MVC大約的架構，我是習慣用C#，所以就以C#來介紹，不曉得VB能不能用ASP.NET MVC。
首先打開Visual Studio，點選工具列的 檔案 → 新增 → 專案，然後選擇Visual C# → Web → ASP.NET Web應用程式 → 選擇位置並輸入名稱 → 然後按確定

然後選擇MVC專案，帳戶的地方沒有的話跳過就好了。

一個基本的專案就建起來了，讓我們執行一下程式，會看到以下的畫面。

MVC的畫面預設是套BootStrap的版，基本上如果有學過BootStrap，直接就可以套在MVC上面，這個畫面就有一些基本的功能頁面，首頁的介紹、關於、聯絡方式，還有註冊跟登入的畫面，甚至MVC預設可以使用Google跟Facebook登入等，不過那部份一開始是關閉的，需要去把那個功能打開才有。
那我們現在來看一下結構的部分，以下是專案的資料夾結構：

剩下三個資料夾，是MVC的核心部分，英文字的開頭就是C、M、V，就是Controllers、Models、跟Views
接下來我們來觀察Controllers跟Views，基本上除了Views底下的Shared資料夾以外，Controller跟View是一對一的，也就是說Views底下有一個Home資料夾，Controllers底下就會有一個HomeController，這兩個是成對的。
今天先講到這裡，明天再繼續分析MVC的流程。
--
小弟不才，
如果有謬誤或是要補充的，
都歡迎一起來討論！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191455,自我挑戰組,0,,9,不知道各位最不瞭解的主題是哪一個？,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513107679000000000,598,"這次的六個主題+自我挑戰，今天開賽第九天
累計文章 599 篇
參賽組數 251 組
團隊組數 11 隊
AI & Machine Learning：16 組
Data Technology：9 組
DevOps：11 組
Modern Web：78 組
Security：8 組
Software Development：54 組
自我挑戰組：75 組
目前挑戰進度的分布：
Day 9：27 個
Day 8：13 個
Day 7：8 個
Day 6：9 個
Day 5：6 個
Day 4：7 個
人工統計真麻煩啊，改天來寫個BOT抓資料好了
上面挑戰進度的部分，是包含已經中斷的數量
持續挑戰中的 與 中斷的數字應該要分開來才比較有趣
抓資料的BOT目前只有每天抓取
https://ithelp.ithome.com.tw/ironman
這個頁面的資料下來存入資料庫
分項的資料抓取還沒寫
應該會連同主題，各篇文章，各個作者的鐵人頁面
還有每篇文章的統計數字都會列入資料庫整理
之後應該還會寫個5~6篇主題詳細介紹的文章才會把BOT寫完吧
或是開始介紹寫得很棒的文章之類的",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191454,ModernWeb,0,從無到有，使用Go開發應用程式系列,4,Constants,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513106721000000000,574,"Go 語言的常數有分幾種類型：
這些常數都可以用實字（literal）表示，實字又分成下面幾種：
常數有可能是已定義型態（typed）或是未定型態（untyped），實字常數、 true 、 false 、 iota 都屬於未定型態。
另外較特別的是，常數運算式裡的運算元都是未定型態時，運算完的結果也會是未定型態。比方說，下面都是未定型態：
但如果有一個型態是確定的，那運算完的結果也會是確定的，如：
布林常數是內建的常數，就只有兩個： true 和 false
原始碼實作也蠻有趣的（程式碼來自 builtin.go）：
Rune 常數使用 Rune 實字（rune literal）來表示，它其實是代表一個 Unicode 的整數。可以使用單引號 ' 括住 Unicode 字元，或是 byte 值來表示，如下面的範例是輸出 a 的三種方法，與輸出 中 的三種方法：
string() 函式為強制轉型字串
Byte 值的表示方法：
Unicode 表示方法：
數字常數使用數字實字（integer literal）表示。數字實字有三種表示法：
浮點數常數使用浮點數實字（floating-point literal）表示，浮點數使用的兩種表示法：小數點與科學符號，下面是幾個例子可以參考：
複數常數為數字實字加虛數實字（imaginary literal）組合而成。
虛數實字的表示法為：
而複數常數的範例如下：
字串常數使用字串實字（string literal）表示。如果是純字串，可以使用 ` 括要表示的字串，如：
這樣就會輸出 \n 兩個字元
如果需要轉譯 rune 常數為字元的話，可以用雙引號 "" 括要表示的字串，如：
這樣就會輸出 這是中文
今天先介紹基本的實字表示，再來要解釋變數型態應該就會比較好懂了。",,"['Boolean constants', 'Rune constants', 'Integer constants', 'Floating-point constants', 'Complex constants', 'String constants', '今日回顧', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191453,ModernWeb,2,重新認識JavaScript系列,9,重新認識JavaScript:Day09流程判斷與迴圈,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1513105393000000000,688,"在上一篇介紹過 JavaScript 的 true 與 false 奧妙之處 (?) 後，今天就來繼續談談流程控制的部分。
在開始今天的內容之前，我們先來看個在網路上流傳多年的老笑話：
工程師某日在下班前接到老婆的電話：
老婆說：「下班買十顆包子回家，如果看到賣西瓜的，就買一個。」
晚上工程師回到家，老婆看了就問：「怎麼只買了一個包子？」
工程師：「因為看到賣西瓜的。」
如果你不懂工程師笑點的話，那麼恭喜你有個正常人的腦袋。 XD
JavaScript 用來控制流程的「條件語法」指的是，當指定的條件為 true 時，就會執行後續所指定的指令。 而 JavaScript 的條件語法有兩種︰ if...else 和 switch。
就如同字面上一樣，「如果」怎樣怎樣，就做某件事，「否則」做另一件事，語法像這樣︰
上面的「條件式」可以是 true 或 false 的表達式。 還記得前一篇說的嗎？
「JavaScript 所有資料都可以透過 ToBoolean 轉換成 true 或 false」
轉換的規則請看前一篇 Day 08 運算式與運算子 [3]: Boolean 的真假判斷。
除了 if...else 之外，你也可以使用 else if 來新增條件：
else if 基本上沒有數量的限制，但為了程式的可讀性與維護性，還是盡量減少 if...else 的條件數量喔。
所以回到前面笑話，寫成程式就會寫成這樣：
然後回家你就準備跪算盤了。
這裏要講的 switch 不是任天堂那個 switch，而是流程判斷的另一個語法。
前面我們有提到，當你要做的條件判斷很多的時候，可能會寫成這樣：
像這樣，假設 1~3 月春天，4~6 月夏天，7-9 月秋天，10-12 月冬天，
而我們要從月份來判斷季節，用 if...else 可以這樣寫：
像這樣，如果不幸是冬天的情況下，你的 Math.ceil( month/3 ) 至少要做四次，且程式碼太長也不好維護。
如果改用 switch 的語法，可以這樣寫：
程式碼看起來是不是簡潔很多呢？
以上面的範例來說， switch 括號內的語法可能是運算式或是某個變數、值，像上面就是 Math.ceil(month/3)。
接著會進入 case 來判斷，若switch 括號內的結果剛好是 case 後面的「值」，則會執行 case 區塊內的指令。
而 default 的區塊就是當上面所有 case 都不成立的時候會執行。
需要注意的是，case 區塊並不像 if...else 用大括號 { } 來切分區塊的，而是用 break 指令。
如果沒有加上 break 且 month = 1 的情況下會像這樣：

像這樣，程式就會一路綠燈開到底了，除非你中間插入 break 語法。
但「適當地」利用 break 語法的話，你也可以這樣做：
所以除非你很清楚你要的結果，否則強烈建議 case 區塊結束前一定要加入 break 來終止。
講完 if...else 和 switch 之後，我才想起前面的「運算子」系列我遺漏了一個很有趣的東西：「三元運算子」。
三元運算子，又稱「條件運算子」，分別以 「問號」 ? 以及「冒號」: 所組合而成：
如果 「條件」 為 true，此時回傳 數值1， 否則回傳 數值2。
實際使用的方式：
像這樣會先判斷變數 age 有沒有大於或等於 18。
如果有的話， status 的值會是 '成人'，否則就是 '小孩' 。
接下來看到迴圈的部分。
所謂「迴圈」指的是，想要重複做某件事，而數值會依次數有「遞增」或「遞減」的變化來完成退出的條件。
什麼意思？ 舉個例子。
假設我們要用 console.log() 從 1 印到 10，在沒有使用迴圈的情況下：
同樣的東西你得寫十次，看起來很蠢對吧？

在 JavaScript 裡面，迴圈的常見語法有 for 以及 while 兩種。
那麼我們就來看看改用「迴圈」之後的寫法可以多簡便。
一個簡單的 for 迴圈語法會是這樣：
小括號 ( ) 的內容可以分成三個部分：

畫紅線的是「初始值」，用來初始化 for 迴圈中的計數器。
你可能會看過有人這樣寫：
雖然在這裡可以用 var 來宣告變數，但要小心，這裡的變數並不是專屬 for 迴圈內的變數，變數 i 的有效範圍其實跟 for 迴圈是相同的。
綠線的部分是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。
藍線的部分是，在每一次執行完大括號 { } 區塊的程式碼之後，會執行這段程式碼。
換言之，假設我們要用 console.log() 從 1 印到 10，用 for 的寫法就是：
然後我們看看 while 迴圈。
把剛剛從 1 印到 10，改用 while 的寫法就是：
可以看到， while 迴圈的語法就顯得單純一些。
括號 () 內代表的是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。

與 for 相比，兩者在執行時的原理其實大同小異。
然而需要注意的是，不管 for 或 while 迴圈，「結束的條件」是很重要的。
在執行迴圈的時候，若是「執行條件」沒有設定好，很容易變成「無窮迴圈」在裡面無限空轉，像：
或是
因為條件不管怎麼樣都會成立，寫成這樣的話你就跳不出迴圈啦！
剛才我們看過了 for 與 while 基本語法，
那麼假如我們想要跳過其中幾次，或是想要提早離開迴圈，有什麼方式呢？
這時候你會需要 break 與 continue。
兩者的功能差別：
所以說，假設我們想要印出 1 ~ 10 的所有數字，但跳過 3 的倍數 ：
有個陣列，假設裡面包含一堆 0 與若干其他數字，而我們不知道裡面內容。
我們想要找出不是「0」的「第一個數字」是哪一個：
在大多數情況之下，for 與 while 迴圈兩者能做的事情是一樣的。
那麼有沒有什麼事情是非 for 不可或非 while 不可呢？
在今天文章的最後，我簡單做個區別：
什麼意思？ 迴圈的特性都是，「只要指定條件是 true」就可以進入迴圈區塊對吧？
因為 for 迴圈同時包含了「初始值」、「條件」以及「結束迴圈的更新」三個部分，使得它的執行次數你可以一眼就看出來; 而 while 迴圈只包含「條件」的部分。
用一個我很喜歡的例子來說，假設我們要把「大樂透」的電腦選號規則程式化：「從 1 ~ 49 中選 6 個不重複號碼」
用 while 迴圈的話，你可以這樣寫：
思考一下，在這樣的規則下，要用 for 迴圈來寫，可以怎麼寫？
就留待各位自行想像囉 XD
那麼以上就是今天分享的內容，謝謝收看。",,"['條件語法 (1): if...else', '條件語法 (2): switch', '三元運算子:  (條件式) ? A : B', '迴圈', 'for 迴圈', 'while 迴圈', 'break 與 continue', 'for 與 while 兩者的差異點']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191326,自我挑戰組,2,自我挑戰日記系列,7,CSS：background透明重疊,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1513103055000000000,564,"繼續昨天的練習
用垂直、水平和距離畫出方格紙

再和上面一樣的角度把90度直接改成45度

欸...!?
居然不是原本想的格子
這應該是2個三角形疊在一起的樣子
另外發現還可以像以下做法
  連續→
--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191412,ModernWeb,0,Nest.jsframework30天初探系列,9,Nestjsframework30天初探:Day09Interceptors,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1513102914000000000,574,"
Interceptor是一個帶有@Interceptor()裝飾器的class，Interceptor需要實作NestInterceptor介面。
src/modules/Shared/Interceptors/logging.interceptor.ts
說明:請看註解，基本上很像Guards的說明XDDD。
Interceptor跟Component、Controller、Guard和Middleware一樣，都可以透過constructor依賴注入。
Interceptor可以作用在Method、Controller和全域，跟Guard一樣，nestjs很多地方的設計都有點類似。
如此，log機制建立就更為簡單，而且Interceptor加上Rxjs真的很方便，對於事件流可以有更多處理。
Response mapping
預期會得到{ ""data"": ""be transformed"" }。
5.1 運用在UsersController，新增testTransformInterceptor()。
src/modules/Users/users.controller.ts
5.2 打開Postman，對http://localhost:3000/testTransformInterceptor 進行HTTP GET請求，結果如下。

說明:不符合預期，nestjs作者提醒，使用@Res() object，response mapping無法作用。
5.3 修改testTransformInterceptor()。
src/modules/Users/users.controller.ts
5.4 打開Postman，對http://localhost:3000/testTransformInterceptor 進行HTTP GET請求，結果如下。

說明:符合預期。
Exception mapping
6.1 將ExceptionInterceptor運用在UsersController，新增testExceptionInterceptor()。
src/modules/Users/users.controller.ts
6.2 打開Postman，對http://localhost:3000/testExceptionInterceptor 進行HTTP GET請求，結果如下。

說明:ExceptionInterceptor()有攔截到並做出回應，這個其實也可以被Exception Filters捕捉到。
6.3 修改一下UsersController中的testExceptionInterceptor()，加上HttpExceptionFilter()。
src/modules/Users/users.controller.ts
6.4 打開Postman，對http://localhost:3000/testExceptionInterceptor 進行HTTP GET請求，結果如下。

說明:有HttpExceptionFilter被捕捉到。
到這邊我們已經知道Interceptor有何功用了，對請求和回應可以做更細緻的處理。
程式碼在github",,['Interceptors'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191451,自我挑戰組,0,Vuex學習筆記系列,7,[Vue.js]Vuex學習筆記(7)-mutations的核心概念,NomiSu,https://ithelp.ithome.com.tw/users/20107601/ironman,1513101679000000000,563,"提交 mutations 是改變 Vuex 中 store 的唯一方式。 mutations 非常類似於組件中的事件（event），每個 mutation 都有一個字串的  事件類型 (type) 和一個回調函數 (handler)， handler 就是我們實際進行狀態更改的地方，並且他會接受 state 作為第一個參數。
我們不能  像調用 state 一樣調用 mutations ，而是要以 store.commit 的方法來做呼叫。
我們可以在 store.commit 傳入額外的參數
在多數情況下， payload 應該是一個物件，這樣就可以包含更多的資料。
我們可以在物件中使用 type 來指定對應的 mutations。
因為 Vuex 中的 store 的 state 是響應式的，那麼當我們變更 state 時，監控 state 的組件也會自動更新，這也意味著 Vuex 中的 mutations 也需要與使用 Vue 一樣遵守下列的注意事項：
在各種 Flux 實現中，使用常量用於 mutations 類型是一種常見的模式，這樣可以使 IDE 中的各式 linter 工具發揮作用，並將所有常量放在一個文件中，讓你的協作者可以快速瀏覽整個應用程序中可能發生的變化。
用不用常量取決於自己，但在需要多人協作的大型項目中使用會很有幫助。
mutations 必須是同步函數，這非常重要，我們用以下的例子來說明：
假設我們正在 debug 一個 app 並且觀察 devtool 中的 mutation 日誌，當每一條 mutations 被記錄時，devtools 都需要捕捉到前一和後一個 state 的快照。
然而在上面的例子中， mutations 裡使用異步函數回調，devtools 不會知道什麼時候回調函數實際上被調用，因為當 mutations 被觸發的時候，回調函數還沒有被調用，因此這樣在任何回調函數中改變 state ，state 的狀態是無法追蹤的。
我們可以在組件中使用 this.$store.commit('xxx') ，提交 mutations 或者使用 mapMutations 輔助函數將組件中的 methods 映射為 store.commit 來調用。
在 mutation 中混合異步調用會導致你的程式很難被測試。例如，當你調用了兩個包含異步回調的 mutation 來改變狀態，你如何知道什麼時候回調和哪個先回調呢？這就是為什麼我們要區分這兩個概念。在 Vuex 中，mutation 都是同步事務。
同步收錄於部落格",['Mutations'],"['提交 PayLoad', '物件風格的 commit 方式', 'Mutations 遵守 Vue 的響應規則', '使用常量提供 mutations 類型', 'mutations 必須是同步函數', '在組件中提交 mutations', '備註']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191450,ModernWeb,0,挑戰CSS30天系列,9,day9_letter-spacing&line-height,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1513101340000000000,542,"letter-spacing 屬性可用來設定每一個字母之間的空間。
line-height 屬性可用來設定每一行之間的空間。
如以下範例：
成果如下圖：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191449,ModernWeb,0,每日文章推薦系列,9,Day9framework,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1513101262000000000,611,"軟體框架（Software framework），通常指的是為了實現某個業界標準或完成特定基本任務的軟體組件規範，也指為了實現某個軟體組件規範時，提供規範所要求之基礎功能的軟體產品。
框架的功能類似於基礎設施，與具體的軟體應用無關，但是提供並實現最為基礎的軟體架構和體系。軟體開發者通常依據特定的框架實現更為複雜的商業運用和業務邏輯。這樣的軟體應用可以在支援同一種框架的軟體系統中運行。
簡而言之，框架就是制定一套規範或者規則（思想），大家（程式設計師）在該規範或者規則（思想）下工作。或者說使用別人搭好的舞台來做編劇和表演。
來源:  WIKI
就網站開發來說，幾乎每個語言都有framework，
Ruby 有代表性的Rails 代表到幾乎沒人對其他的framework有印象
Python 有Django ,flask等
PHP 有 Laravel ,codeigniter,symfony等
一開始會接觸Framwork是因為工作上要架設indivo這個系統
架設的過程中順便研究了一下Django
在此之前寫網站都是自幹
而在接觸Django的途中接受到一些新概念
ORM,Code First等概念
可以不用自己建立資料庫
也不用自己寫SQL在當初是覺得真的很方便
感覺可以省下不少的工作
雖然入門有點繁瑣 繁瑣到一度想要放棄
不過還是研究到完成一個內部簡訊公告系統
因為工作環境還是PHP為主
所以後來還是找了php的framework
在參考了幾套以後 決定使用codeigniter
因為可以從php4一路支援到php5
寫法也沒有差太多
架構也簡單 在使用上已經省下我不少的麻煩了
光可以把本來一頁一個.php的環境整合到幾個controller就差很多了
而且文件完整 要丟給別人看也方便
雖然沒有orm 但是有sql builder也夠用了
因為可以跨到php4　所以連接案都能用（遠望
因為覺得好用 加上當時認識寫網頁的人也大多不是本科系的
所以我就努力的推廣朋友使用framewok了
讓他們能看懂我的程式碼
我也看得懂他們的程式碼
codeigniter算是可以隨拆即用的特性也蠻方便推人入坑的
不像現在要推廣Laravel還要先從composer開始
codeigniter就下載解壓縮 改好設定檔 上傳 就結束了
不過就觀察到現在
還是會有些人很抗拒使用現成的framework
都覺得會有太多用不到的東西
寧願自己寫一套
如果是大公司可以一直維護我是也蠻贊同的
但如果是小團隊我就會覺得還是用一套現成的吧
站在社群的基礎上去使用不是很好嗎?
上個月都還能看到類似的狀況發生
前言 · InfluxDB中文文档
就是預備工具吧
觀望一段時間了
另外可以順便看grafana
之前是看gov的全國重度級急救責任醫院急診即時訊息
看到這個工具的
雖然還不知道自己要用在哪裡XD
microlink.js, Convert your links into beautiful previews.
直覺會有機會用到
所以先記錄
github",,"['是什麼', '第一次接觸', '還是要寫PHP', '推廣', '鄙視鏈', '文章分享', '今日閱讀文章']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191334,Security,0,CEH之越挫越勇系列,7,[Day07]網路掃瞄-概念篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1513100824000000000,628,"網路掃瞄主要是確認主動攻擊階段：
(1) IP 狀況：是否在線上？角色？
(2) IP 服務：Port？平台？版本？
(3) 弱點對照 & 弱點利用
線上系統(Live Systems)：確認系統是否在線上
開啟服務(Open Ports)
繞過設備(Evasion IDS Techniques)
獲取標頭(Banner Grabbing)
弱點掃瞄(Vulnerability Scanning)
網路架構(Network Diagrams)
跳板 & 人頭帳戶(Proxies and Anonymizers)
IP 詐騙(IP spoofing and various)
滲透測試(Pen Testing)
(後續補圖)","['Scanning Network', '掃瞄步驟', '掃瞄準備', 'TCP 三向交握(Three-way Handshake)']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191442,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,8,(Day8)爬蟲作業終：爬完所有所需資料！,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1513099645000000000,596,"但如果程式前兩篇實作的程式碼，寫在同一份程式碼，本段無須執行喔!
第二層的重點在抓下公民參與議題的討論紀錄檔，這部分，是透過爬取下載按鈕對應的下載連結來實作。
這部分有另外處理iscsv的部分，用以實作部分沒有人留言的議題，也就沒有csv，若不進行處理，後續將有議題與內容對應的問題。
flink跟web.url筆，有csv連結的會壓TRUE
迴圈處理按鈕的下載網址列，要記得要踩停。本例一則至少睡兩秒，500多筆至少要20分鐘左右。
稍早用少量樣筆數，未踩停車，就有被網站ben掉！

dfl記錄得是第二層資料 再增補上下載連結資料
是否落地可自行考慮
[讀取]迴圈讀取下載連結位置durl，並將下載檔案名，定義為序號.csv
稍早的iscsv派上用場
共計有500多筆檔案，其中16.csv從缺，表示無csv，不進行處理

[讀取]以迴圈方式，將下載回來的csv逐一取出
定義欄名(當然也可等到最後再做)
處理結果如下圖：

欄位說明：
issueid：對應到第一層的議題代碼
aid：對應到本篇留言序號代碼
createdate：留言時間
city：留言者城市
area：留言者行政區
nname：留言者姓名
content：留言內容",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191357,ModernWeb,1,從無到有，打造一個漂亮乾淨俐落的RESTfulAPI系列,2,[Day-2]安裝VisualStudioCode與擴充套件設定,10程式中,https://ithelp.ithome.com.tw/users/20107247/ironman,1513098214000000000,673,"大家好歡迎來到這一系列的文章，為了維持後面文章的統一性我在這邊特別寫一篇編輯器的安裝與推薦的擴充套件與環境設定，打造一個方便的開發環境，為什麼我會選擇它呢？原因在於 Visual Studio Code 有強大的編輯功能，因為是開源的專案所以更新速度頻繁擴充套件的資源也很豐富，而且內建終端機與版本控制整個開發過程在同一個視窗就能完成。市面上的編輯器有很多例如： Visual Studio Code、Sublime Text、Atom、vim、Notepad++ ......等，各位可以依據自己的喜好安裝一個自己適合的編輯環境。
Visual Studio Code 由 2015 年微軟所開發的一個開源軟體，它同時支援 Windows、Linux 和 macOS 作業系統的開源文字編輯器。它支援偵錯，內建了Git 版本控制功能，同時也具有開發環境功能，例如代碼補全、代碼片段、代碼重構等。
Visual Studio Code 多種作業系統首先到官網下載安裝，此外若有遇到 bug 你可以到他們的 GitHub 提交 issues 就會很快地被處理囉！當然也可以許願，最近看到 Atom 更新了遠端共筆 (Code together in real time with Teletype) 的功能，近期也有人在 VS Code issues 上許願希望這功能可以趕快出來一定方便，說個題外話聽說終端機 (Terminal) 功能就是台灣人上去許願出來的。

這個指令設定是結合電腦內建的終端機，在終端機輸入 code . 就會自動幫你把資料夾專案開啟，首先在鍵盤按下 command + shift + p 再輸入 path 點選第一個就設定完成囉！之後你就可以在終端機移入你要開啟的資料夾再鍵入 code . 系統就會自動幫你開啟該目錄專案在 VS Code 上了。

在畫面左上角點選 喜好設定 => 設定 或是點選快速鍵 command + , 也能快速叫出設定檔，開啟之後如下圖，左邊為全部的設定參數查詢，若有需要更改可以點選左邊的一支筆做編輯，此時右邊的畫面就是你自己客製化的設定檔了，他使以 json 格式做編輯，在這邊你可以依據你喜好填入你的設定值，下面我也分享我自己的設定可以直接貼上，其中最推薦 autoSave 他會自動幫你儲存檔案不需再手動的存檔，以及 formatOnPaste 當你複製貼上網路上的程式碼時難免會跑版格式，此設定就是幫你貼上時自動排版你的程式碼。

這邊介紹幾個實用的擴充插件：

這邊先講 vscode-icons 如何設定，其餘插件可以先安裝好，後面文章會逐一教你如何使用，vscode-icons 下載後請選擇上方工具列 前往 => 命令選擇區 或是鍵盤按下 command + shift + p 輸入 icon 並點選第一個命令啟用。


文章同時發表於：https://andy6804tw.github.io/2017/12/12/vscode-tutorial/",,"['介紹 Visual Studio Code', '安裝', '環境設定', '擴充套件推薦']",,"['1. Path安裝code指令', '2. config設定', 'vscode-icons 啟用']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191439,SoftwareDevelopment,0,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,6,Day06-將Swagger規格說明匯出成PDF文件,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1513096961000000000,584,"Swagger 線上可以測試真的很方便, 但畢竟還是要啟動服務, 有時候對外或是對一些非技術人員比較不方便點
還是有個檔案給他讓他方便查看或是寄給對方
不過我們都寫好在註解上了啊, 我們要聰明點, 不要老是在做重複的工作
那今天就教你怎麼把 Swagger 轉成 PDF or Html 文件
官方文件在這裡 Swagger2Markup Documentation
首先我們要增加這個插件 org.asciidoctor.convert
修改 build.gradle
準備我們的測試 Swagger2MarkupTest.java, 因為是透過測試的功能在打包之前把文件產出
測試用的 H2 資料庫也需要改一下配置
test/resources/application.yml
我們把 initialize 關掉 改用 jpa.hibernate.ddl-auto
因為測試的時候...springboottest 似乎不會自己引入 schema.sql import.sql 來執行
所以會造成啟動失敗 (沒有表格)
我們簡單一點讓 hibernete 根據 Entity 自訂產生對應的表格就可以了
因為在這邊我們沒有要真的驗證資料對不對, 只是需要讓他產生出 swagger 的 json 資料
如果你需要事先寫入資料的話 可以參考這做法 TestingDataSourceConfig.java
原則上來說, 這時候如果我們執行 gradle test, 就會在我們專案下產出類似這樣的資料

但是目前測試是錯誤的, 看起來像是套件間的問題
我再找找如何修正吧...
比較詳細的說明可以先看我之前的版本
將 Swagger 輸出成 HTML 文檔
但是我舊的專案以前可以跑....打開來更新後就一樣套件衝突了....QQ",['注意!這篇因為新版套件造成衝突問題還要等更新喔'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191407,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,9,"[Day9]Javascript,wtf?花的發",dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1513096641000000000,591,"Javascript 是在1995年 布蘭登·艾克發明的, 當時因為時間很趕.老闆需要一個語言在遊覽器實現一些小功能, 譬如在網頁可以有雪在飄. 所以javascript 在10天就完成了. 但是當時可能因為開發太快也留下很多語言本身的問題跟雷.
經過了這麼多年, Javascript也成為全世界最大的語言. 當時的一些bug, 也留到現在. ECMA(決定javascript規則的團體)也決定不會去修改語言.
因為現在網頁有太多依賴這些bug, 如果改了很多網站就壞掉了跟多. 其實也還好, 只要注意一些問題就好了. 那我來分享一些我碰到的雷.
1. Float 數字, Javascript 不能處理很大或很小的數字. 這好像是因為javascript 使用如果有處理很大的書字要注意. 想要真的理解背後的原理可以 Google IEEE 754 , floating-point. 我程度不夠.
2. Weak Type + String concatentation. 有時候後端API 傳給你的數字有時候是 Number, 有時候是string,就很容易碰到這個bug. 請看以下範例
基本上只要記得轉type就好了
3. Auto Semicolon:   javascript 會每一行自動加入分號. 所以有時候會有問題
如何避免, 不要沒事亂斷行跟要有寫 分號的習慣. (我自己是沒有在寫分號的)
其實程式語言跟女朋友一樣, 大家都是有缺失的. 我們要接受跟包容它. 因為他們的優點大於缺點. 好像有一點脫軌了, 回歸正題.
但是說真的, 每一個語言不管是C, PHP, Java, Ruby都有自己很奇怪的點. 但是我們只要我們知道怎麼避免它的雷, 應該就還好. 我要用兩位名人的名言來為這篇文章做個ending.
There are only two kinds of languages: the ones people complain about and the ones nobody uses. -Bjarne Stroustrup (某位很厲害的programmer)
接受我們不能改變的，改變我們能改變的。 -某人
Let's Dance....

JS reserved words 
10 common JS bugs
w3c js mistakes
wtfjs
youtube js wtf",,"['背景', 'Javascript 的雷', '結論', '參考文件']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191426,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,9,Phoenix起步走：快速產生CRUD頁面,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1513095074000000000,582,"今天結束以後，Phoenix新手教學暫時要告一個段落
我當然知道還有很多博大精深的內容可以分享
但畢竟我系列的主題不是Phoenix教學
而是網站框架的比較
我認為如果想要比較不同的框架
熟悉到CRUD應該是最低底線
未來如果還有機會 比方說在其他框架卡關
會再繼續深入探討Phoenix的應用
Phoenix不管是框架或語言相對於其他都相當年輕
而年輕同時意味著變化
用比較不文青的講法，這幾年更新變化的幅度很大
所以當你上網查教學的時候
可能會發現那些內容已經不適用當前的版本了
這是我們查找資料必須留意的
比方說為了今天的內容，我搜尋了有關「Phoenix Scaffold」的頁面
確實也找到的相關語法：
貼上去執行看看：
登愣！ 語法已經不認得了
看了一下這是Phoenix 0.2.0的語法，現在3.0.0不能用，也還算可以接受
查別的教學
嗯嗯，順利產生了很多檔案
雖然有一些提示訊息，但是先不理他
編輯了router然後migrate以後，查看一下頁面
還是錯誤！
不賣關子，直接講結論好了
mix類似於Ruby的rake，當你執行mix help會列出所有的指令
相當於rake -T
如果你仔細觀察，你會發現在同樣版本同一個專案列出所有指令
居然會出現兩種版本的相同指令，有著類似的效果：
指令有這兩種開頭的版本，後者數量較多
如果比對指令說明：
是建立一個Phoenix v1.2.5的專案，而：
則是建立 v1.3.0的專案
我還是第一次見到指令不同，可以建立不同版本專案的事
又不是rvm做版本管理
大部份人第一次接觸到phoenix與phx可能都會直觀上認為是通用的縮寫
就像elixir -v與elixir --version其實是相同的
但實際上他們代表著不同版本，而且內容有顯著差異！
如果你接著比較gen.html的說明，你會發現phoenix版本多了model
這是因為兩個版本的資料結構不一致所導致
最顯著的差異是v1.2.5版本下有一個資料夾名為web
裡面有MVC與router
但是v1.3.0卻是放在lib下有個「專案名稱底線web」的目錄當中
在我的專案中名為blog130_web
如果你仔細比對其他目錄，也有些許不同
左邊為v1.2.5 右邊是v1.3.0

這樣巨大的差異自然導致兩邊的語法是無法互通的
認清楚這點後
事情就變得輕鬆順利
我們之前的教學是使用新版 mix phx.new
所以這邊接續使用phx
產生了很多檔案
首先來解釋指令：
第一個參數是module，你可以把他理解為model的母親
後面接著的參數是單數與複數名稱
最後接著的是欄位與型態
接下來只要按照指示
把resources ""/posts"", PostController這行貼到lib/hello_web/router.ex內
然後執行migrate
（注意順序不能顛倒，否則會出現路徑錯誤）
然後訪問 http://localhost:4000/posts
就可以看到利用 魔法 指令產生的CRUD頁面了

接下來的大部份商業邏輯需求
都可以從crud當中去變化
Phoenix的新手指引就先到這邊囉～",['phoenix vs phx'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191436,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,9,[Day9]EasyFlowGP--系統設計工具(四)組織設計師-談匯入的方式,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1513094948000000000,581,"系統設計工具最後一個要分享的是組織設計師。
舉凡和組織有關的部門資料、人員資料、角色和核決層級...等都是在這邊建立。
EFGP產品的安裝片中，有個工具SyncOrg的工具包
通常是顧問協助輔導將組織資料匯入，因為資料的關係性和注意的事項太多，所以
大部分客戶都是交給顧問。但若你有跟著顧問學習，或自己摸索此工具和資料表，
就可以善加應用在表單開發。
我這邊分享的例子是承接之前介紹的，使用importOrganizationData(string pXMLData)
這個方式匯入資料。
而XML的格式，就是SyncOrg這個匯入工具所定義出來的格式。
可以在SyncOrg匯入資料庫後，找到備份的格式檔，了解到匯入的格式架構。
路徑位置在


以下這個例子是新增User的格式。
ImportOrganiztionData內可分為Normal與Transaction的tag，
其中Transaction代表此範圍內處理的異動資料為一個單一交易，
一旦其中有任何一筆資料造成異動錯誤，則整個Transaction內的資料
全部會rollback。Normal則表示每一筆資料的異動都是獨立性，其
錯誤不會影響其他任何的異動。
其中異動的xml描述內容主要可以分為兩個部分，第一個部分為物件
的新增，第二個部分代表物件關係的設定。--- from 鼎新安裝包的WebService教學。
組成XML格式後，再透過服務任務Invoick，以查驗是否成功或失敗，常常會因為log
訊息不明確而花了很多時間和功夫。後來鼎新客服建議再組XML之前，可以先使用一個
工具-SoapUI 確認傳入的值和接收的值無誤後，再以Javascript組成XML格式
供Invoick使用。
SOAP UI 的使用不再本此分享文內，(GOOGLE爬文很多喔)
要留意的是傳入的值要包含在SOAP UI既有的 ![CDATA[…]]內，執行成功後，
此importOrganizationData(string pXMLData)
回傳的結果為處理結果，如果List size為0，表示異動處理成功；但如果List size不為零
，則表示處理的過程有發生錯誤，錯誤的原因描述在List內的元素
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191431,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",9,Day9-HadoopEcosystem之HBase簡介,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1513092468000000000,597,"HBase是運作在 HDFS 之上的非關連式分散式資料庫 (non-relational, distributed database)。想在 Big Data 的世界使用 DataBase，又想擁有 Hadoop 的容錯機制優點，選 HBase 就對了！HBase 具備高吞吐量與低延遲性的特點，非常適合在 Big Data進行更快速的讀寫操作。目前HBase深受各大企業或是網站使用，包含：Adobe、Facebook、Meetup、Trend Micro、Twitter、Yahoo!等等。
已經有Hadoop可以放儲存超大檔案，並且使用分散式運算MapReduce，那還需要HBase幹嘛呢？
這是一個好問題！讓我們來回顧一下前面的Hadoop操作，有put, get, cat, mv, rmr等語法，有沒有發現少了什麼？沒錯！就是edit。
HBase的特點就是提供即時隨機讀寫(random, realtime read/write access)的功能。當A電腦(client)新增了一筆資料時，B電腦(client)就可以馬上讀取到最新資料並且可以修改。
這有很厲害嗎？一般RDB都可以做到啊！沒錯，RDB在這方面的確做得到甚至更好，但是RDB無法存放PB等級以上的資料啊!(笑) 又或者Oracle DB可能可以放這麼大的資料量，但不敢想像Oracle會收多少取授權費用了...
HBase這麼厲害，可以直接取代RDB嗎？雖然HBase經過社群的努力下效能越來越好，但在某些情境還是無法完全取代RDB，他與RDB間沒有誰最好，甚至某些狀況是相輔相成。比較常見的情境是利用RDB當作HBase的metadata儲放處，或者是當作secondary index，較為複雜的relation先使用RDB查詢存在放HBase的資料主鍵(PK)，再使用PK從HBase取出raw data。
如果還記得MapReduce的WordCount範例，可以了解在檔案格式中要搜尋某個關鍵字或是某行紀錄時，需要對單一或是多個檔案進行fully scan(完全掃描)後才能得到符合關鍵字的資訊，需要不少的時間來完成這件事。
HBase是一個column-oriented的鍵值配對(key-value pair)的database，資料儲存以key-value方式儲存，key即是資料的主鍵(PK)也是index，稱之為Rowkey，如果善用Rowkey當作查詢條件來搜尋，效能就會比fully scan方式快上很多，這也是HBase的優勢之一，所以在存放資料時Rowkey設計就成了一們重要課題。好的Rowkey設計帶你上天堂，不好的就讓你住進refactor的套房。
如果以RDB的table來想像，HBase的table就是一張稀疏矩陣（Sparse matrix）的表格，每個row的column數量不一定會相等，但是每個column的row數量一定會相同。
HBase以key-value方式儲存，也以key-value輸入，當需要新增大批資料時這種方法效率就很低。因此HBase提供了bulk load的功能，讓使用者不經過put機制，直接將資料轉換成HBase的儲存格式：HFile，避免使用put時觸發split與compact讓put效能越來越慢。
基本上HBase是沒有內建任何的SQL查詢功能，只能在hbase shell使用scan搭配filter 查詢資料。別擔心，以SQL為功能的side project頗多，像是有名的Apache Phoenix，或者是Apache Trafodion，與台灣自行研發的HareDB HBase Client等等，都可以透過SQL語法查詢HBase的資料。
綜合本篇的結論，接下來的篇章會為大家帶來下列有關HBase的相關介紹：",,,"['HBase 與 RDB (Relational Database)', 'HBase 與 Rowkey', 'HBase 與 大批資料', 'HBase 與 SQL', '最後']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191422,自我挑戰組,2,GAME30天系列,2,大綱(上,我是一支小小小小鳥,https://ithelp.ithome.com.tw/users/20107379/ironman,1513087317000000000,2789,"3 day
3 days
3 days","['30天ＧＡＭＥ', 'Qausar Framework intro', 'Firebase intro', 'WebSocket intro']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191419,ModernWeb,0,認識Chrome開發者工具系列,9,元素面版-檢查元素樣式,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1513085959000000000,589,"我們用了兩天的時間把如何透過元素面版來動態編輯文件物件模型 (DOM) 講完了，今天我們要一起看的功能是動態編輯元素的樣式。樣式控制台 (Styles pane) 的位置就在元素面版中，通常它會出現在文件物件模型樹區塊 (DOM tree)　的下面，但是如果你的螢幕空間夠大的話，它會改變排版的方式，成為與文件模型樹區塊併排。

樣式控制台的位在元素面版的右邊，但是當你的開發者工具寬度太小時，它會改變排版並成為垂直的排版
要開始查看一個元素的樣式很簡單，我想可能有些人在前面操作編輯文件物件模型的時候就有注意到了。當你選擇一個元素之後，這時在樣式控制台裡就可以看到現在所選擇元素的所有樣式。我們來介紹一下這個樣式控制台的內容：

有衝突的樣式：在看過幾個元素的樣式後，你一定會看到一些元素的某個樣式定義是被劃掉的，這是代表這個樣式的定義與其他的樣式定義有衝突，而最後因為這個定義的權重 (Specificity) 比較低，所以就沒有套用到這個元素上。另一種同樣會被劃掉的樣式是不正確的樣式屬性 (Property) 或是值 (value) ，也就是說樣式寫錯了XD，瀏覽器沒辦法成功的渲染它，所以它會跳過。而這種不正確的樣式前還會多有一個警示小圖示。

有衝突而被蓋過的樣式

不正確的樣式
如果你不知道 CSS 權重是什麼，強烈建議你一定要了解一下，這是 CSS 的核心概念之一，MDN上有一篇說明權重的文件
樣式來源：所有的樣式都會有來源，其中最明顯的就是來自於開發者也就是你所寫的樣式表，這個來源的資訊會放在每一段樣式的右上角。當你點下來源後，開發者工具會帶你到原始碼面版 (Sources panel) 裡的樣式表檔案裡，你可以在這裡面編輯及更新你的樣式表，這個我們之後介紹原始碼面版後會再介紹。另外一個值得一提的來源是 user agent stylesheet，這代表這些樣式來自於瀏覽器本身所定義的。

樣式的來源會列在樣式宣告的右上角
區塊模型 (Box model) 模擬圖：在元素樣式的最下方，會有一個區塊模型模擬圖，這個模擬圖會有目前這個元素的 width, height, padding, border 及 margin，裡面的單位都是 px (Pxiel)

元素的區塊模型
hover 樣式：我們在討論編輯文件物件模型的時候有提到，有些元素有擬類別選取項 (Pseudo classes)，在一般的狀態下在樣式中是看不到的。但在樣式控制台的右上角有一個 :hov 的小圖示，當你點下這個圖示後，它會打開一個下拉選單，這個選單裡有幾種我們先前有提到的擬類別選取項 (:active, :hover, :focus 跟 :visited)，當你勾選這裡面的項目後，如果這個元素有定義這些選取項的樣式，它就會出現在樣式控制台中。

:hov 的下拉選單
搜尋樣式：當你的專案比較大的時候或是你使用了一些 framework 像是 Bootstrap ，一個很簡單的元素可能藏著一堆樣式宣告，在這些被複雜的樣式中要找到特定屬性真的不是好玩的，這時候，這個搜尋 (雖然它是用一個 filter 圖示…) 的功能就很方便，它可以快速的幫你找到特定的屬性。
今天其實本來想一口氣把檢查元素樣式還有編輯全部講完的，但是寫到一半後就想說還是拆成兩天好了，內容實在太多而且也想多跟大家介紹一點觀念上的東西。所以明天我們會繼續一起討論樣式控制台，把如何動態編輯 CSS 介紹完。",,"['檢查元素樣式', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191296,ModernWeb,0,Go！從無到打造最佳行動網站系列,2,Day2依然廢文前端後端,網襪工程師,https://ithelp.ithome.com.tw/users/20107302/ironman,1513084683000000000,722,"剛踏進Web的時候真的不知道什麼叫做後端、前端，網站不就是網站嗎？
前後端的概念，也是近10年來所衍伸出來的一個概念，相信還是有許多公司是把這兩塊混在一起寫的吧。其實不是這樣寫的方式不新潮，的確是非常方便的做法，當你的網站只有一頁時，我想應該沒有需要將前後端獨立出來寫，或是用任何的框架去寫，不僅僅浪費了伺服器的資源，甚至你在開發時還會有很多的問題。
簡單的來說，就是你在網頁上面是看不到程式碼的，通通都可以叫做後端。
這個講法有些抽象
假設我用PHP echo HTML，這樣算是後端的操作嗎嗎？
在這個例子上看起來就有點模糊了，如果真的要做到前後端分開來的話，會建議您帶資訊的部分已純資料為主，會較為恰當。
後端需要處理的事情包含，較重要的商業邏輯、與資料庫溝通、伺服器負載平衡、POST/GET 過來的資料、request請求、資訊安全…等等，這些可以說是後端的範圍，在較大的公司，可能會把部分交給其他的部門單位處理。
網頁三大語言：javascript、css、html
他們必須處理使用者看的到的部分，包含UI/UX的設計、動畫效果、驗證使用者輸入資訊、使用者與伺服器(代表著Service Provider)的溝通橋樑…等等。是一個網站最基本的單位，當然還有諸多功能，像是訊息推播、快取…等等，近年來在台灣也是一個較受到大家關注的一個技術。
後端與前端怎麼溝通，通常在前後端的工作之中，都有一些重疊的部分，像是後端可能帶出HTML至前端中顯示，通常有以下幾種方式
如果你只是單純的在開發一個不太需要更新的網站，那我會建議您後端使用AJAX/API 的方式來取得伺服器裡面的資料，這方式不需要去維護整個後端生態系統，對於維護成本可以大大的降低。
如果是要開發一個經常的需要調整，或是每一頁的商業邏輯較為複雜的網站時，當然你也可以使用AJAX/API的方式來維護您的系統，但會更建議您需要一個框架可以完整個整合前端後端，讓運作更為方便。
什麼才是好的模式，你的架構可以讓新同事越快上手，代表你的模式越好。
當然這只是我個人的淺見，但事實上確實是如此。
昨天喝了一杯清心的無糖普洱茶加珍珠，感覺很有罪惡感晚上立馬跑到健身房去跑跑部，摸一摸運動器材，今天晚上希望還可以去減減我的肥肉，可是我真的很喜歡喝飲料阿!有人跟我一樣喜歡喝飲料的嗎？
波霸珍珠的熱量有多高，大約是三分之二碗白飯阿！",,,"['什麼是後端？', '什麼是前端？', '他們怎麼運作？', '好的模式', '減肥專欄']",['小知識'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191418,自我挑戰組,0,網頁學習日誌系列,9,RWD:@media斷點,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1513082851000000000,618,"斷點簡介：
近十年因為手機平板的普及，瀏覽網頁不再是電腦專有，所以才會有響應式網頁。
如果沒有網站分析的話，就以最熱門的解析度為主。
statcounter（http://gs.statcounter.com）
是以分析使用者螢幕解析度的網站，從下圖可看到台灣手機用戶的螢幕尺寸的比率。

只有手機才顯示的元素：
網站menu清單一旦顯示在手機時，如果用同行排列會讓版面很擁擠，所以才有漢堡選單，他只會出現在手機網頁中。
使用電腦或平板瀏覽網頁時，因為網頁版面寬，如果放漢堡選單收納清單項目，反而讓網站訪客無法立即找到網站清單，造成使用者體驗較差，所以在較大螢幕尺寸的載具都設定隱藏(display:none)
下圖為bootstrap 的nav 漢堡選單：
網站或平板：

手機板：

",,,"['因為行動載具的螢幕尺寸都不同，因此設計響應式網頁時，要統計分析(如google分析)瀏覽該網站的使用者，是用哪種廠牌的手機、平板較多，再來根據該廠牌手機、平板尺寸作為響應式網頁的斷點，所以斷點會隨著網站訪客的螢幕尺寸而做改變。', '因此響應式網頁只能做到滿足多數熱門螢幕解析度為主，無法顧及到全部載具都完美呈現，所以要以滿足80%以上用戶為主。']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191328,自我挑戰組,0,2017挨踢人生大事紀系列,9,ERP改來改去何時了~PART2,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513082455000000000,749,"今天上午天色有一些陰暗...
註定了今天好像不是一個好天氣、好日子？！
看到一些邦友『落賽』的消息。心情也跟著有點失落~
加油~才第9天耶。而且我還規畫要寫另一個主題！得振作一些，把路走下去。
老實說，我對「自我挑戰組」的規畫是只要能不間斷發文就好了。
能不能寫出什麼好料、好康的文章，倒不是很在意~
但隨著慢慢有幾位邦友訂閱的通知，居然也好像有那麼一些壓力上來？！
感覺若是太隨便發文，有點辜負人家的期待。
回到主題好了。
今天先和邦友們聊聊，為什麼ERP會改來改去？
就我觀察的結果，ERP會出錯的地方，大部份以人為因素居多，可以略分為：
舉一個實例來說說第一種類型吧...
「挨踢！那個供應商建檔後，我再建那個價格契約的主檔，但為什麼現在我請購轉採購，都拉不到那契約價格啊？」
『你有確認過資料都建完整了嗎？』
「唉喲~我不會檢查啦！那些主檔都嘛好幾個月才會建一次，誰記得住啊？」
『你們部門裡不是有操作手冊可以看？』
「有啊！就照著做，還是有問題啊！是不是系統有問題？」
「趕快哦~今天要發出採購單。挨踢要趕快幫忙處理，生管在催了~」
『......』
經過一番折騰，才查出價格契約裡的有效期限區間打錯了？！
這類的問題，你叫挨踢能怎麼辦？
防呆？驗證卡關？提示？
唉~
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191413,SoftwareDevelopment,0,認識scala系列,9,Scaladay9(Currying),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1513079203000000000,579,"一般函式的寫法 :
Curry 就是將多個參數的函數變成一個參數的函式再將它們curry起來，Curry 的寫法 :
Curry 相當於下面例子，但下面例子可以先呼叫一個參數(val tempSum = sum(1))，再呼叫第二個(tempSum(2)) :
Curry 需要再後面加上 _ 佔位符符號(placeholder notation)當作第二個參數 :
一般函式 _ 的例子 :
再看一個例子，定義一個 sum 函數，參數一是 lambda expressions(Int => Int)，參數二 是 Int :
接著就可以實作不同的 lambda expressions，產出不同算法的結果
改成 Currying 的寫法，
在 scala function 參數只有一個時，可以用大括號(curly braces) :
在測試看看 :
可接受任何型態 :",,,"['Curry', '總結']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191404,AI&MachineLearning,4,以100張圖理解NeuralNetwork--觀念與實踐系列,2,Day02：撰寫第一支NeuralNetwork程式--阿拉伯數字辨識,IcodesoIam.,https://ithelp.ithome.com.tw/users/20001976/ironman,1513077112000000000,822,"照理講，我們應該先了解『神經網路』(Neural Network)概念，再談如何寫程式，但是，概念介紹內容有點硬，為了提高學習興趣，避免一開始就搞一堆數學公式，造成讀者跑光光，所以，還是柿子挑軟的吃，先從簡單的開始，與 Neural Network 先培養感情，如果您是條硬漢，可以等看完下一篇後，再回頭看這一篇。
我們就先來寫一支程式，目標是『辨識阿拉伯數字(0~9)』。
首先是選擇開發環境，一般而言，Python 及 R 都有很好的支援及大量的函數庫(Library/Toolbox)，而 Python 的框架較易於系統整合(Web、Mobile)，因此我選擇 Python，但支援 Python 的 Neural Network 框架(Framework)也很多，參見下圖，要選擇哪一個呢?

圖. Machine Learning 框架(Framework)GitHub評比，資料來源:【AI關鍵技術】三大熱門深度學習框架新進展。
其中，TensorFlow 網路聲量最高，因此，我們採用它作為程式開發的基礎，Keras 則是支援TensorFlow的更高階函數庫(Meta Framework)，可以用很簡潔的程式碼完成一個 Neural Network 模型，非常適合入門學習，因此我們就從 Keras 開始學起。
首先我們要建構開發環境，筆者以 Windows 環境為例，依序安裝以下軟體:
就是這麼簡單，當然，為了加速運算，你也可以安裝支援GPU版本的Tensorflow，NVidia支援CUDA的顯示卡請參考這裡 ，相關安裝程序請參考tensorflow官網，如果要在 Linux 環境開發也行，安裝內容不變， 請參考這裡。
以我的電腦為例，配備如下圖，GPU顯示卡為NVIDIA GeForce GTX 750(1GB memory)，實際安裝 Tensorflow GPU 版本的程序如下:

實際測試簡單的程式，確實快很多，但是記憶體太小，遇到複雜的程式，例如後續的CNN程式，需要儲存大量矩陣時，就GG了，所以，奉勸各位，要學 Neural Network，還是要花錢買張新一點的顯示卡，才能省去執行時去泡茶、喝咖啡的時間。
如果一切順利完成，就可以開始寫程式了。等一下，那 IDE 呢? 你可以用記事本、NodePad++、或者PyCharm，我則是使用 VS 2017 Community 版本，它也是一個很不錯的選擇喔，可以像 C# 一樣的除錯。另外，使用 Jupyter Notebook，可以讓你像作筆記一樣的寫程式，總之，戲法人人會變，端看你熟悉甚麼樣的環境與工具。
撰寫 Keras 程式，我們需要了解簡單的 Python 語法，建議快速瀏覽『Introducing Python』這本書的第二~四章就夠了，它不只有中文版，也有免費的PDF電子書喔。
以下範例主要是利用 MNIST 資料集的訓練資料，建立單一隱藏層(Hidden Layer)的 Neural Network 模型，以預測實際影像是哪一個阿拉伯數字，如下圖：

圖. 阿拉伯數字(0~9)辨識的流程
流程步驟如下：
程式很簡單，先看註解(#開頭)，即可了解整個流程：
執行方法很簡單，在DOS執行Python，接著將以上程式一段段貼上即可，我們就可以觀察每段程式的用途，要看變數內容，只要輸入變數名稱即可，全部執行完，可以看到準確率有 85%，夠神奇吧，畢竟我們只寫了10多行的程式(不含註解)。
要確認預測是否正確，可以再貼上下列程式，查看影像：

如果我們要看優化的過程，可以輸入以下程式，結果如下圖:

圖. 優化過程的損失函數(Loss)的變化
進行到這裡，我們已經跨出了一小步，後續我們接著抽絲剝繭，好好研究它為什麼可以這麼厲害。
相關程式請至這裡 下載，本範例為0.py。",,"['入門', '開發環境建置', '程式撰寫']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191410,自我挑戰組,0,資訊技術解戈迪安繩結系列,5,IT｜軟體｜開發｜Gradle專案建置自動化工具,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1513076170000000000,612,"簡介
Gradle 簡單說就是 Java 世界的 Makefile，它可以幫忙打理那些在專案開發過程中的瑣事，舉凡編譯、測試、檢查程式碼、產生文件、清理或壓縮檔案、上傳、發佈、重新啟動伺服器到送出電子郵件，都可以利用 Gradle 撰寫的 Script 來自動完成作業。
Java 建構工具 Ant、Maven vs Gradle 比較
[Ant]
Ant的主要優點在於對構建過程的控制上；Ant是第一個「現代」構建工具，在很多方面它有些像Make。2000年發佈，在很短時間內成為Java項目上最流行的構建工具。它的學習曲線很緩，因此不需要什麼特殊的準備就能上手。它基於過程式編程的 idea。在最初的版本之後，逐漸具備了支持插件的功能。
主要的不足是用XML作為腳本編寫格式。 XML，本質上是層次化的，並不能很好地貼合 Ant 過程化編程的初衷。Ant的另外一個問題是，除非是很小的項目，否則它的 XML 文件很快就大得無法管理。後來，隨著通過網絡進行依賴管理成為必備功能，Ant 採用了Apache Ivy。
[Maven]
Maven 發佈於2004年。目的是解決碼使用 Ant 所帶來的一些問題。因為 Maven 主要聚焦於依賴管理，實際上用 Maven 很難寫出複雜、定制化的構建腳本，甚至不如 Ant。
Maven 的主要優點是生命週期。只要項目基於一定之規，它的整個生命週期都能夠輕鬆搞定，代價是犧牲了靈活性。
Maven 仍舊使用 XML 作為編寫構建配置的文件格式，但是，文件結構卻有巨大的變化。Ant 需要碼將執行 task 所需的全部命令都一一列出，然而 Maven 依靠約定（convention）並提供現成的可調用的目標（goal）。不僅如此，有可能最重要的一個補充是，Maven 具備從網絡上自動下載依賴的能力（Ant 後來通過 Ivy 也具備了這個功能），這一點革命性地改變了我們開發軟件的方式。
但是，Maven 也有它的問題。依賴管理不能很好地處理相同庫文件不同版本之間的衝突（Ivy 在這方面更好一些）。XML 作為配置文件的格式有嚴格的結構層次和標準，定制化目標（goal）很困難。
。
[Gradle]
Gradle 結合了前兩者的優點，在此基礎之上做了很多改進。它具有 Ant 的強大和靈活，又有 Maven 的生命週期管理且易於使用。最終結果就是一個工具在2012年華麗誕生並且很快地獲得了廣泛關注。例如，Google 採用 Gradle 作為 Android OS 的默認構建工具。
Gradle 不用 XML，它使用基於 Groovy 的專門的 DSL，從而使 Gradle 構建腳本變得比用 Ant 和 Maven 寫的要簡潔清晰。Gradle 樣板文件的代碼很少，這是因為它的 DSL 被設計用於解決特定的問題：貫穿軟件的生命週期，從編譯，到靜態檢查，到測試，直到打包和部署。
安裝及配置
下載：http://www.gradle.org/get-started
將下載的檔案解壓縮到下面目錄（目錄名稱可自行帶換）
export
export GRADE_HOME=/Users/Kevin/Agile-MAC/Gradle/gradle-2.10
整合 Eclipse    2016年5月12日
開啟Eclipse專案選擇 Help -> Eclipse Marketplace..
搜尋條件選gradle按下 Install


重新啟動 eclipse
之後在目標專案上按右鍵選擇 Configure -> Conver to Gradle Project
接著在最外層的目錄下創造一個 build.gradle 的檔案

它的內容按照自己的需求來設定
[一個簡單的範例]
設定好了之後在專案上按右鍵，選擇 Gradle -> Refresh All
就會開始下載Lib, 等下載完就可以看到 Gradle Dependencies 內的檔案
完成！
資源
Gradle 常用的使用方法介紹
Spring 教學(1) - 從 Spring Boot 開始
使用 Gradle 自動化建置 Java 專案",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191393,ModernWeb,2,邁向JavaScript勇者之路系列,9,JavaScript的this到底是誰？,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1513076136000000000,808,"This 的在 JS 使用上非常頻繁，但一個 this 每個 function 都各自表示，這裡就直接用範例說明 This 有哪些情境，不過請注意一點，影響 this 的是在於函式的呼叫方法，並非宣告的時機：
如果直接調用函式，此函式的 this 會指向 window，以下兩個範例都是直接調用含式，所以都是指向 window。
這裡將 function 內在包覆著 function，但只要是直接呼叫，this 都是屬於全域。
無論在哪一層，純粹的調用方式 this 都會指向 window。
如果 function 是在物件下調用，那麼 this 則會指向此物件，無論 function 是在哪裡宣告。以下的範例中一個是純粹的調用，另一個則是使用物件的方法調用，物件的方法調用時 this 會指向調用的物件。
相同的道理，宣告的位置不重要，重要的是呼叫的方法。如果將物件內的函式賦予在一個純粹的變數上並調用它時，這個 this 將會指向全域。
DOM 調用 function 就如同物件調用 function，所以此 this 所指向的則是該 DOM。以下這段程式碼可以貼在任何網頁下的 Console，接下來點擊畫面上任何一區域，該區域則會加上紅線。
在建構式下會 new 一個新物件，此時的 this 會指向新的物件。建構式在後續的章節會介紹，此部分只要了解建構式的 this 也是指像物件本身即可。
這一個 this 不會是全域且可以在生成的物件上重新定義 (所以他指向的是該生成的物件)。
call 調用的函式可以直接傳入新的物件，使其作為 this 所指向的物件。
call, bind, apply 這三者均可，都可以傳入新的 this 給予函式使用，三者僅是使用方法不同，可參考：Function.prototype.apply() - JavaScript | MDN。
在實際運作時，立即函式 (IIFE) 或是非同步的事件 (setTimeout) 大多都會指向全域，如果需調用的則是物件本身的話，可以先用一個變數指向 this，等到調用後再重新使用它。
這個變數名稱可以自己定義，常見有 that、vm、self 等等，可以使用自己或團隊習慣的為主即可。",,"['純粹的調用 (Simple call)', '物件的方法調用 (As an object method)', '建構式的調用 (As a constructor)', '使用 Call 來呼叫 function', '重新指向 this']",,['DOM 物件調用 (As a DOM event handler) 同此方法'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191134,自我挑戰組,1,使用PHP串接金流相關API系列,2,Day01-電子支付,royal801991,https://ithelp.ithome.com.tw/users/20107301/ironman,1513074717000000000,724,"隨著 2015 年正式實施的《電子支付機構管理條例》，以及智慧型手機持有率和手機上網比例的提升，新型態的支付方式陸陸續續在台灣上線，消費者除了傳統的現金、信用卡，開始有了另一項選擇。
其中，以手機為載具的支付方式主要可以分為兩大類：(1) 感應支付 (2) 條碼支付。兩者在支付場景上重疊性不高，由於感應支付沿用原本的設備即可，能夠快速拓展到全球市場；條碼支付則需要由 APP 服務商一一招商，但對商家而言，由於不需要額外添購設備，少了裝設實體刷卡機這道門檻，消費者在不願接受信用卡的店家也能夠使用電子支付。
金管會(金融監督管理委員會) 在2016年11月正式宣布開放國際行動支付的申請。Apple Pay 在 2017/03/29 搶先成為台灣第一個上線的行動支付，剩下兩間對手也在兩個月內快速加入行動支付的戰局。三間廠商都是使用 NFC 的技術，只要手機有支援 NFC 功能，不用開啟其他 APP，甚至不需要網路，就可以完成 POS 機感應刷卡支付。
                                                            
除了支援 NFC，Samsung Pay 獨有的磁條感應技術「MST」(Magnetic Secure Transmissions）可以讓舊式 POS 磁條刷卡機也能夠使用感應支付。
條碼支付則是要安裝特定 APP，支付時需要在有網路的環境下，以掃描或是顯示條碼完成支付。支付的金額不會直接交給商家，而是暫存在第三方業者，提供交易擔保。這類第三方支付在中國發展得相當蓬勃，其中市佔率最高的支付寶於 2011/07 推出條碼支付的功能，也在 2015/12 與臺灣商家、銀行合作，開通線下掃碼支付服務。
條碼支付又可以再細分為兩種支付類型：直接支付、儲值支付。消費者可以在 APP 中預先綁定信用卡資訊，支付時直接使用條碼支付即可；另一種則是預先儲值金額到 APP 中，扣款時從帳戶扣除，讓沒有信用卡的消費者也能使用此種類型支付。
(條碼支付也能有效對付某些刷卡機 永遠修不好 的商家)

[參考資料]
台灣的行動支付玩具們 你玩過了嗎?
電子錢包混戰：行動支付與第三方支付有什麼不同？
APPLE PAY、SAMSUNG PAY、ANDROID PAY 懶人包
Samsung Pay支持POS機的原理解析",,,,"['感應支付', '條碼支付']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191403,DevOps,2,30天入門Ansible及Jenkins[2018]系列,1,[Day01]前言,tsoliangwu0130,https://ithelp.ithome.com.tw/users/20103346/ironman,1513074232000000000,604,"在軟體開發領域中，IT 自動化 (automation) 及持續整合 (continuous integration, CI) 是 DevOps 精神中相當重要的兩個部分。尤其當團隊開始導入敏捷開發 (agile development) 等概念時，這兩項技能往往可以讓實踐更加事半功倍。作為入門手冊，我將會在接下來 30 天內透過 Ansible 與 Jenkins 這兩個非常熱門的開源軟體來分別介紹上述的概念。
如果讀者有過任何開發軟體的實務經驗，相信除了開發產品本身的過程中需要花相當多心力外，在產品部署的環節也絕對是令大部分人頭痛的一個部分。其中環境的搭建及參數的設置往往會因為幾個疏忽導致產品無法像在開發時一樣正常運作。除此之外，一個完整的運作環境通常都不會只是寫幾個簡單的 Shell script 就可以輕鬆搭建，尤其當需要部署的主機不只一台的時候，重複性的工作更是會花費我們大量的時間。大多數的時候我們還會因為伺服器提供的作業環境不同、或其他種種限制而必須採取適當的調整。因此，IT 自動化在這時候就顯得格外重要。透過 IT 自動化，不但可以幫助開發人員有效減少部署產品所需時間外，還可以在有限度的修改下分別針對不同部署環境做相當程度的彈性調整，進而將時間有效節剩下來，並讓開發人員專注在更重要的事項上。
而在環境成功搭建後，對服務本身的維護及監控也是在開發流程中相當重要一環。當我們從原始碼代管服務 (e.g. GitHub) 上取得原始碼後，如何確保產品在發布前品質無虞，一直以來都是開發人員需要細思的課題之一。由於現在大多數的開發團隊都會透過版本控制系統來提交並整合開發人員們各自的修改，若在合併分支時沒有將合併衝突 (conflict) 處理恰當，或是合併程式碼後產生了某些邏輯上的隱性地雷，往往會到產品發布以後才意識到發生了不可預期的錯誤。在持續整合，甚至是持續交付 (continuous delivery, CD)、持續部署 (continuous deployment, CD) 的機制下，我們可以透過高頻的整合、測試並分析程式碼品質，在最短的時間內發現問題及其發生點，進而確保確保產品每一次的發布都是穩定且高品質的。
由於去年我已經用同樣主題參加過鐵人賽了，雖然仍然會透過今年鐵人賽的機會將自己這一整年所學重新做一番審視，並將去年文章的諸多錯誤進行修正及不足處進行補充，但整體而言還是對其他努力的參賽者來說不甚公平。因此，今年參賽對我而言只是一個很單純再次梳理自己所學脈絡的機會，並讓我可以將整理後的作品放在公開平台上，並期許自己可以對中文 IT 界有那麼一點點的幫助。",['30 天入門 Ansible 及 Jenkins'],,,"['為什麼需要 IT 自動化？', '為什麼需要持續整合？', '另外...']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191330,ModernWeb,0,Next.js+各種套件組合系列,9,Next.js&Recompose,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513073830000000000,580,"介紹
Recompose 可以使用 Functional Programing 的方式去組裝元件，這樣產生出來的元件對於渲染的 Cost 會比較小，而且他的所有包含Life Cycle，States，Handler，Props 都可以抽出來重複使用，Recompose 也支援 Rx.js 的資料方法開發 ，在比較複雜的需要多層 HOC 加工的時候更能顯示出 Recompose 強大的威力
安裝
babel-plugin-lodash 與 recompose
Next.js 在使用 Recompose 的時候 跟一般差不多，只是因為生命週期的關係要先使用setStatic去定義 getInitialProps，再去判斷是否需要 SSR，這邊也可以看到使用 Recompose 使用compose 去結合他提供的方法後產出一個 HOC 的物件在跟 stateless 的 function 結合 這樣stateless 就可以拿到 HOC 的 Props了
附記:因為 Recomopse 有滿多 API ，來說明幾個幫助理解
1.withState
有三個參數 第一個是StateName這個就單純是StateName，第二個是stateUpdaterName可以想像是setState，第三個就是初始化construct State 這樣就不難理解了
2.withStateHandlers
第一個參數是 construct State 第二個是 Handler 寫Method
可以實際看個範例就更清楚了，使用 withStateHandlers 最後產出的也是 HOC 會把 state 當作props 傳入
Recompose 上 還有許多常用組合的 API 底下有提供連結
總結
Next.js 上使用 Recompose 只需要加上 setStatic getInitialProps ， 多一個 SSR 的生命週期，其他使用都一樣，強力好物推推
Next.js 提供的範例檔案
https://github.com/zeit/next.js/tree/canary/examples/with-recompose
Recompose 官方 Github
https://github.com/acdlite/recompose",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191401,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,7,網路爬蟲Day5-爬蟲進階:非同步爬蟲程式的撰寫,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1513073494000000000,618,"在網頁的取得上，因為每次去要求server回傳html檔時，都要等待回應一段時間，此時client端(也就是你的電腦)其實是沒有在運算的，因此若能夠使用這段時間，發出其他要求，將可大大增加爬取的速度。
這邊必須區別於多執行緒的概念，多執行緒的指得是透過cpu內多個核心同時運作來增加速度，而非同步只是在同一個core上面，在core沒有在運作時讓它先做其他作業，所以非同步一般都是在網頁技術上比較常使用，畢竟等待server回應的時間大概只會在網頁技術上出現，如果全部都是在本機端跑，大約不太可能有這個空閒。
在看這隻程式碼時，建議由最下面往上看，首先建立loop物件，然後透過run_until_complete方法執行Main function，再整理並打包執行多次「呼叫fetch_coroutine function」的tasks。其中比較需要注意的是，要以非同步的方式執行的function，都必須在def前面寫上async，然後呼叫非同步方法時，等待回應須加上await。
上面那段程式碼(非同步)，我的電腦執行時間約是5~7秒不等，而執行以下的程式碼，執行時間約是15秒，約可以節省2/3的時間。","['概述', '程式碼', '比較']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191390,SoftwareDevelopment,0,Kotlin30天，通過每天一個小demo學習Android開發系列,9,Kotlin開發第9天ImageSlider(ViewPager),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1513073296000000000,555,"
今天通過 ViewPager 做一個類似 iOS 中的 UIScrollView 的功能。
Android 不像 iOS 有原生的 UIPageController，也就是提供有圓點的 Indicator  ，所以乾脆改成顯示文字了。
這是一個容器類，需要 PagerAdapter 來提供數據，ViewPager 經常和 Fragment 一起使用。
這裡的 PagerAdapter 有點像是 iOS 開發中 UICollectionView 的 Delegate + Datasource。
我們將 Activity 上拿到的 data 交給 Adapter 處理，Adapter 在將 data 和 Fragment 綁定（比如呈現在 Fragment 的畫面上）
在 activity_main.xml 中，上面放一個 ViewPager (id=pager)，用來放多個 Fragment（呈現不同的圖片）
下面放一個用來顯示「當下第幾張圖／總共幾張圖」的 textView(id=pageCountTextView)

在 fragment_slider.xml 中，定義一個放一張圖片的 Fragment 之後放到 ViewPager 中使用。
其中 imageView 的 ID 就取名叫 ImageView

我們先建立一個 IntArray 用來管理 images
（前面的動手做有提到， Android 的 Resource 都會有個對應的 Int，對 ImageView setImageResource 的時候是通過 Int）
我們實例化 adapter，並且加入一個 pageChangeListener 的監聽，當頁面切換的時候修改 畫面底部的數字。
四個需要複寫的方法：
問題：findViewByID 可以理解成類似 iOS 通過 XIB 來實例化介面的工具嗎？
問題：我在 Activity 建立了一份 images，而之後又將 images 丟給 PagerAdapter 這樣其實在記憶體上算兩份吧。
這不像 UIViewControllerDatasource 經常寫在 ViewController 上，共用一份 images。
可以在這方面多思考一下。","['ViewPager', 'MainLayout\xa0', 'Fragment Slider', 'MainActivity', 'PagerAdapter', '筆記', '參考']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191396,ModernWeb,0,用範例理解Vue.js系列,2,用範例理解Vue.js#2：用七個官方範例初步認識Vue.js,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1513071201000000000,760,"
非常偷懶的把官方介紹七個範例照打，目的在於粗略了解 Vue 在幹麻。
可以點擊各個範例的 fiddle 連結自行修改和觀看結果。
最基礎的資料綁定就是插入 string，利用 Mustache 的語法：
執行結果

附上 fiddle (https://jsfiddle.net/hunterliu/ofmm9pk9/)
有時 double curly braces 的語法會與後端有衝突，為避免這樣的情況發生，可以在 Vue Instance 的選項物件中加入delimiters: ['${', '}']。
我們可以簡單改寫上例如下：
執行結果

附上 fiddle https://jsfiddle.net/hunterliu/ofmm9pk9/1/
Vue 可以透過 v-bind 綁定 HTML 的屬性。
執行結果

附上 fiddle (https://jsfiddle.net/hunterliu/f7swmcnb/)
透過 v-if 這個指令(directive)決定是否顯示p tag。
執行結果

附上 fiddle (https://jsfiddle.net/hunterliu/hj0kuy8j/1/)
透過 v-for 這個指令(directive)顯示 todos list。
執行結果

附上 fiddle (https://jsfiddle.net/hunterliu/5qx0rguc/)
在console輸入app4.todos.push({ text: 'New item' })可以看到新增了一項todo。
透過 v-on 綁定 click 事件，點擊button時執行reverseMessage，將message反轉。
執行結果

附上 fiddle (https://jsfiddle.net/hunterliu/s5qcnq9c/)
透過 v-model 可雙向綁定 input 和 vue instance 的 message。
執行結果

附上 fiddle (https://jsfiddle.net/hunterliu/hakh94ro/1/)
執行結果

附上 fiddle (https://jsfiddle.net/hunterliu/6bmrr9ar/1/)",,"['Vue example', '參考資料']","['01 - Hello Vue', '02 - Bind Message', '03 - Conditional Rendering', '04 - List Rendering', '05 - Event Handling', '06 - Form Input Bindings', '07 - Component']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191394,DevOps,0,Nightwatch101：使用Nightwatch實現End-to-EndTesting系列,2,Nightwatch101#2：Nightwatch與SeleniumWebdriver,cythilya,https://ithelp.ithome.com.tw/users/20092232/ironman,1513071159000000000,3986,"
Nightwatch 是專門給網頁使用的自動化測試框架，它使用 W3C WebDriver API（過去稱為 Selenium WebDriver）來自動操作瀏覽器。好處是可撰寫並自動執行 End-to-End Testing 與 Node.js 的 Unit Testing，並簡化設定 CI（Continuous Integration，持續整合）的過程。在這裡，我們用來做 End-to-End Testing。
WebDriver 是讓開發者撰寫程式來操作瀏覽器的遠端控制介面，可作為跨瀏覽器自動化測試的工具。Nightwatch 即是透過 WebDriver API 來控制瀏覽器，模擬人類的各種操作行為，例如：瀏覽特定網址、輸入文字、點擊按鈕等。
Nightwatch 將我們所撰寫的測試程式碼轉成 HTTP Request 送到 WebDriver Server（也就是 Selenium Server），Selenium Server 再送到瀏覽器，接著 Selenium Server 回傳 HTTP Response 回來給 Nightwatch。Nightwatch 幾乎必須至少送兩次 Request 到 Selenium Server 才能完成一個完整的指令（Command）或斷言（Assertion）。第一個 Request 是依照 CSS Selector 或 Xpath 來定位網頁元素，第二個指令是對這個網頁元素執行指令或斷言。

圖片來源：Theory of Operation
大致了解 Nightwatch 與 Selenium Webdriver 後，接下來就可以開始建置環境、準備開工了。手牽手一起來學 Nightwatch 吧！
網誌版。",,"['什麼是 Nightwatch？', '什麼是 WebDriver？', '運作原理']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191392,Security,0,IT安全稽核系列,9,2.1是否鑑別適用範圍內之所有資訊資產及其擁有者？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1513069822000000000,597,"不知道從甚麼時候開始，台灣的研究生喜歡把考卷或申請書寫到一大篇，如果言之有物，那尚且值得一讀，但我是不欣賞那種做法的人。
我在美國念書的時候，系上教授永遠要求，用letter格式(台灣普遍是A4格式，大小有差)，寫一頁報告，在學校的教授網路平台直接給同學點閱，交換意見，教授看完也會直接請學生上去系統看成績，期末會有一個大報告，可是大報告，也不像台灣的一大疊，連裝訂都很困難的那種厚度，在美國是不能出現的，除非你要繳交專業論文，否則，教授是不鼓勵你這麼做的。
Why?
在美國master的學歷，定義上就是要就業用的，主要都偏向觀念的建立，試想如果你到外面企業，寫了一大本報告，你的主管，大部分根本不會有時間去翻，所以提綱挈領的報告就變得相形重要，報告的第一頁就變得非常重要了。在美國，至少在我的念書的學校，你必須強迫自己，把所看過幾百頁的課本，濃縮成一張紙，並且在前端就把要點點出來，其他的附件，就不用了，正常的老闆是不會去管你的附件從哪來的。當然，念書又是另外一回事了，所以教授還是會有要求要ㄧ份從主題深入的報告，當作期末報告總結。
在我回台灣工作之後，我還是無力去改變台灣企業界這種喜歡交一大本的報告的習慣，不免俗的，還是要把附件給通通附上去，證明我是很認真的，其實，我一點也不喜歡這種文化，人家都搭火箭到外太空了，我們還在殺豬公。
不過，我還是講句，When in Rome, do as Rome. 入境問俗，工作就是工作，企業文化還是得遵循，老闆喜歡這樣，做下屬的還是盡量配合，制造衝突，不是件好事。
以下管理階層、資訊安全組的部分，後面還有大約九項的稽核內容，但比較偏向稽核面，我不在贅訴，接下來我先進入第二階段「風險評鑑與管理」，這部分的就是由資訊安全組織、業務及資訊單位來負責的。
所以，我們還是繼續根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，探討2.1的分析。
二、風險評鑑與管理（資訊安全組織、業務及資訊單位）
2.1是否鑑別適用範圍內之所有資訊資產及其擁有者？
說明：此項說明在於二個重點：1.鑑別。2.資訊資產及擁有者。
以最簡單的方式來解釋，公司ㄧ般的電腦、筆電，都有建立固定資產，正常都會貼上一張標籤，標明編號，耐用年限….，造冊列表後，就能確實掌握公司的所有的固定資產，到年底時，在做ㄧ次固定資產盤點，以確定東西都在所屬的地方。
同樣的道理，Server裡面也是區分成很多使用的節點，每個人有每個人擁有的權限，或者說每個部門有每個部門的權限，同理，硬體、機房、設備、網路佈局也是一樣。
每個資安人員，在從事每次固定的動作之後，都會產生ㄧ個紀錄，這個紀錄裡面，哪些應該列入文件裡，都需加以分類，以避免造成組織內部雜亂無章的網路管理情況，而這種鑑別的能力，除了靠外部稽核之外，更需要資安團隊分類管理的能力，才能確實做好管理。
列表造冊，說實話，是種吃力不討好的工作，但是只要建立ㄧ次，後續就只有增增減減，並定期刪除ㄧ些無用的資料….
道理看似簡單，其實是非常困難的，有甚麼解決的方式嗎?
我只建議要ㄧ直備份，睡飽點，頭腦清醒點，否則ㄧ個不小心，把擁有者搞錯了，或刪到不該刪的，天下會大亂的!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191336,ModernWeb,1,三十哩路，我的前端學習路程系列,9,Day09::我所知道的CSS動畫,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1513069130000000000,606,"CSS也能做動畫？
沒錯，CSS也能做動畫！
在看到CSS繪圖之後我在同樣的Pen裡頭又看到了會動的簡單小動畫又激起我的好奇心！
然後我就去Google了
要用CSS做動畫需要
@keysframe & animation
@keysframe的功能是控制動畫效果
可以用百分比來表示，也可以使用from、to
0%和from都表示動畫開頭，100%和to都表示動畫結束
animation則是控制動畫何時開始、結束
就來做做看顏色變化吧！
一樣先把HTML寫好
我們先在skin上面設定預設的樣式
接著在@keyframes 替動畫命名還有動畫的效果
因為我想要讓顏色慢慢變化因此在50%與100%的時候變換顏色
然後在.box上要套用的animation名稱跟播放秒數就可以看見效果了！
以上，因為沒有玩得很深入
不過這個真的很有趣，平常都以為動畫效果一定只能靠JS呈現
原來CSS這麼好玩！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191293,自我挑戰組,2,用IT看世界系列,8,嘞索病毒-要你哭我不哭,allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1513066632000000000,658,"今天來談一談Wanna Cry吧!!由於上半年他真的太紅了，新聞也報，就連我們不懂資訊的老闆娘也出來關切
當然身為資安小組成員的我一定要「幹些事情」讓他放心，例如關關防火牆的一些port裝裝hot fix
還是老話一句，「擋得住機器擋不住人性」
人性是脆弱的，在去年
我前公司的總字輩主管就中了，這種人中標相當麻煩(你懂得)
時間點剛好是他從大陸回來的時候中的!!那邊真的是大毒窟
重點是!!!!
長官會問怎辦呢???檔案被加密如和解?(我會解還會在這領你一個月3XXX元)
這個時候我必須採取保護自己的作法
我直接報告長官說，沒辦法解(硬)
他一定很不爽，我花錢請個垃圾~~(給的請香蕉只請得起猴子)~~
這個時候你就要軟，因為所學有限之類.....總之就是承認自己是個無能小輩
原因是因為，我不想做原廠工程師的事情，卻領工讀生的薪資
即便我有這功能，我也不想開
因為我知道，不見得有解
網路上的解法百百種，你要花時間去測
大致上的概念是用『回朔』，就是還原點的概念
如果，今天一個user他有養成「備份的習慣」，還需要IT幫他還原嗎?
通常來找到我們就是，沒備份，沒建還原，把IT當成(Hack)
我幾年的工作經驗告訴我，自user面前承認自己技術能力不足，是個藝術
讓他覺得，工程師也是人啊，別啥了不起的
他就會很爽的放你一馬，特別是那種高官，特別有效
解問題的方法有好幾種：
<1>用硬技術去解
<2>用軟技術去解
<3>用嘴巴去解
工程師大部分為了對得起自己的良心，都會直接「硬幹」，花了好多時間去測試、研究
這讓我想起HTC工程師真的很偉大，但又如何???
昔日洋華電今日宏達電
今日宏達電呢????
明天來解密公司資安通報，待續",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191389,Security,0,資安的學習心得及分享系列,9,DAY9特洛伊木馬,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1513065514000000000,610,"特洛伊木馬
對於目前使用者的網路使用習慣來說，每天要到網路上、瀏覽網頁、查資料，要去避開這些惡意軟體，是一個很艱難的任務，所以擁有正確的觀念，並且學習讓自己盡量不去接近惡意軟體才是最好的策略。

今天我們要講木馬，在講木馬的時候，我們先來說一個故事。

希臘神話中一個有名的故事『木馬屠城記』。
這故事發生在無堅不摧的特洛伊城裡，希臘軍在持續19年的圍城後，因為他們始終打不進去，所以想出一個致勝的計謀，他們就做了一隻巨大的木馬，並且把它的軍隊藏在木馬裡面，並且散布謠言，讓特洛伊城的人把這隻木馬拉到城內，之後趁著夜晚特洛伊人都睡覺時，藏在木馬裡的士兵就由城內開始攻擊。因此無堅不摧的特洛伊城就這樣被拿下了。
故事講完，為什麼要先講這個故事?因為木馬的攻擊就像這個故事的道理是一樣的，他利用了偽裝、潛藏、攻擊。

待續..",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191387,DevOps,0,用30天來介紹和使用Docker系列,9,Day9：如何備份DockerImage為tar檔,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1513064554000000000,587,"前幾天是在介紹如何把 Docker Image 放到公開網路的 Docker Hub 上以及架設私有網路的 Docker Registry 上，但是有時侯想備份 Docker Image 的檔案或是安全性的考量沒有把 Docker Image 放到公開網路的 Docker Hub 上而且也沒有架設私有的 Docker Registry…… 等等的需求。
因此就需要將 Docker 備份出一個檔案，然後使用 USB 隨身碟或是光碟存儲放到另外一台電腦上，之後再 Load 到 Docker 上。
今天要實作的流程如下：
一. 把第5天實作的 Docker Image存檔出一個檔案
參數說明如下：
-o: 輸出檔案
mytomcat 是 Docker Image 的名稱
畫面如下：

在這過程可能會需要花費一些時間，執行完成之後就可以看到產生出 mytomcat.tar的檔案
二. 檔案放到另外一台電腦之後 Load 到 Docker 上
參數說明如下：
-i: 放要 import 的檔案名稱
畫面如下：

三. 啟動Docker container，確認 Docker Image 有成功的被 Load 進到另外一台電腦上
*使用以下指令啟動 Docker container
畫面如下

在 Browser 上輸入 http://192.168.182.130:8080 看到 tomcat 畫面，就可以確認 Docker container 有啟動起來，畫面如下

今天已經介紹了如何備份 Docker Image 的部份了，適合在沒有網路而且只需要個人使用的情況下使用。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191386,DataTechnology,0,Python學習筆記系列,9,[Day9]Dictionary字典,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1513063866000000000,551,"Dict是一組無序的鍵值對集合(key : value)，其中key必須是獨一無二的。而mappings則是將物件儲存在key裡的集合，Dict主要操作為藉由鍵來儲存一個值，並可用該鍵來取得該值。
那現在來開示範一下Dictionary要如何使用


Python有內鍵""加""和""減""的函數，可以用+=和-+表示以上的statement，請詳下圖

我們也可以先創建一個空的dictionary，然後再指派key值

Dictionary的巢狀結構


資料來源: Go from zero to hero in Python",,,['Dictionary(dict)又稱關聯記憶體，dictionary是由key來當索引，它可以是任何不可變的型態，字串和數字都可以當作key。'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191318,ModernWeb,1,前端新手村系列,2,前端新手村從設計載體到RWD顯示原理,chris,https://ithelp.ithome.com.tw/users/20107637/ironman,1513062727000000000,1246,"「當你迷惘的時候，就回到原點想一想」-中華一番 蘭飛鴻
網頁前端新手村系列文章，宗旨並不在技術本身的教導，重點放在技術與技術之間的脈胳關係。讓零碎的網頁前端技術的關鍵字，成為比較有系統性的視野。
讓一開始接觸網頁前端的新手們，有一個比較友善的系統來架構你的學習，至於技術本身的深入探討，就留給其它的高手們吧。
從「和平面設計師合作」的觀點，來看待網頁設計。
可以發現平面設計師對於圖形的「失真變形」、「裁切」與「手機排版」、「桌機排版」之間的變化，並不是很熟悉。
網頁設計看似平面，其實與平面設計最大的不同，是作品的載體[1]改變了。
依「和平面設計師合作」的經驗，平面設計師訓練中，熟悉的排版方式 不考慮數位載體的變形與元素之間的關係。[2]
「以我的刻版印象中的」平面設計師(這樣才不會打翻一船人)在畫面上的思緒，靠著幾種邏輯運作
意思是「平面設計師不了解 px ( pixel )單位的使用」。
因為當不同的設備、螢幕尺寸，尤其是「相同解析度，不同尺寸的螢幕」或者「相同尺寸，不同解析度的螢幕」，會造成切出來的作品跑版。
最主要的原因，是沒有考慮到 pixel 在螢幕成為物理尺寸時，有 pixel pitch 的影響。
以此為原因之一，平面設計師與UI設計師的專業領域是重疊又分離的。
在Photosop的設定上，有個可以設定「印刷精細度」的單位，叫 dpi ( dots per inch )，也就是單位面積中，可以放進的 pt (point) 愈多，看起來的畫面也就愈細緻。(買印表機，就是要看這個唷!!)
在買手機時，有個規格叫 ppi ( pixel pre inch )，也就是單位面積中，可以放進多少個 pixel。
也就是間接的定義了 pixel pitch 和每一個 pixel 的大小。[3]
試想一下，從32吋的電視機到55吋的電視機，解析度都是 1920×1080 的時代，它們是如何辦到的呢？
對網頁來說，作品是以 pixel 為基本單位，但是到物理尺寸，必須要經過 pixel pitch 和 pixel size 的影響，才能被尺量得到。
在設計師要展開設計時，前端工程師要和設計師談一下，手機和桌機，各別要使用什麼尺寸進行設計。而這個尺寸，要以 pixel 為單位。而不是「設計一個 5.5吋的手機和24吋的螢幕」。
來聊聊，要怎麼樣正確的取得解析度。
以iPhone為例，到官網介紹手機的解析度，可以看見它上面標示的解析度，這個規格稱為 native resolution 或 screen resolution ，以下就稱為「原生解析度」一詞。

在 Chrome 的 開發者模式之下，可以模擬成各種手機尺寸的解析度瀏覽方式。但是，卻找不到 1334 × 750 的 iPhone 6，看到的數字是 375 × 667；找不到 1136 × 640 的 iPhone SE(或 iPhone 5)，卻看到 320 × 568。
Chrome模擬出來的解析度，稱之為「渲染解析度」，當然，這不是它的定義，只是用這種方式可以快速的找到它的規格。


它是透過瀏覽器的渲染，造成的一種解析度尺寸。而網頁的真正載體是瀏覽器。所以要了解瀏覽器如何看待手機尺寸。
上一篇，我們有講到 meta 有一種 name=""viewport"" 的設定，讓瀏覽器隨設備決定渲染解析度。
讓手機排版上，使用「字會變大」的解析度，瀏覽，又保持細緻的感覺。
也就是說，排版上是吃低解析度的「渲染解析度」，內容呈現上，是吃高解析度的「原生解析度」，就可以達到攻守兼備，有高可讀性，又不會低畫質的手機瀏覽體驗。
換句話說，當你沒有設定好 <meta name=""viewport"" ...>時，手機瀏覽器也許會使用原生解析度，顯示桌機版排版！
讓我們整理一下。
讓我們來算一下
以 iPhone 6 為例
長邊: 1334 = 664 × 2
短邊:  750 = 375 × 2
在桌機版這樣顯示

在手機版這樣顯示

在手機版，把2個pixel 當作1個pixel處理。
用更多的 pixel 呈現「原本要用1個 pixel 的內容」達到內容更細緻的效果
[1]: [But 桑專欄] 科技始終來自於人性‧字體始終取決於載體 (上)
[2]: 給尺寸稿
[3]: Pixel density - wiki
[4]: 如何取得手機版面的設計解析度","['從設計載體到RWD顯示原理', '參考資料']","['前言', '從平面設計師聊起', '螢幕的 pixel 單位', '印刷與螢幕', '瀏覽器的渲染解析度？', '渲染解析度']",['那究竟是精細了多少呢？'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191385,DevOps,1,Ops的轉職之路-Puppet從入門就放棄系列,2,Day2-Puppet是什麼？能吃嗎？,shazi7804,https://ithelp.ithome.com.tw/users/20089211/ironman,1513056563000000000,620,"本系列文資料可參考以下：
Puppet ? 拿去餵 Google 翻譯就是「木偶」阿 (誤)！！，今天要講的 Puppet 不是木偶啦，而是 2005 年出品的老牌自動化組態管理工具 Puppet，起源由一位長期待在 Data Center 上班的工程師 Luke Kanies (創始人) 對於現狀的不滿所以開始寫 Puppet。

過去 Luke Kanies 認為 Server 即是整個服務的一切。
""Servers used to be the center of everything.""
當 Internet 發展的快速，服務開始變得龐大，你的服務不只有單一程式語言，還有很多不同類型的 Server 來提供服務。
""Applications are increasingly complex and distributed, and you can't just consider one node""

這時你要看的不只是單一 Server，而是整個 infrastructure，所以一個容易讓人看懂的 infrastructure 開始變得重要。
""What's needed is a single abstraction and view of the entire data center infrastructure.""

當時的 Luke Kanies 對於做重複性工作非常不滿，他認為人腦應該拿來做更困難的事情，讓「自動化」來完成簡單且過雜的事物後，人們可以做更多想做事情。

從 Startup 到財富 100 大企業中佔有 75% 的比例都使用 Puppet，他們都用了你還怕什麼 ?!
From startups to 75% of the Fortune 100, thousands of companies rely on Puppet.
總是覺得相同類型的工具只要選一樣來搞就好了，因為這世界實在太多黑科技了，你根本沒辦法每一樣都學會，所以在挑選的時候每一套工具我都會淺淺的入門後再做決定，但是在做決定時，會有幾個主要的因素影響我：
在 2016 年和 Chef 並駕齊驅為 32%，而目前台灣最熱門的 Ansible 緊追在後

在 2017 年至今排名被 Docker 遠遠超過，但是在組態管理工具來說沒有差異太大。

當你無法評估或猶豫不決的時候，市佔率是一項可以說服主管、說服老闆很簡單的東西，當你選擇市佔率比較高的資源時，你會占有以下優勢：
先說用 Puppet 最具代表性的其一就是 Github 並且維護大量 Puppet modules，連 Github 都在用的好工具不用嗎？不過當然也不能有品牌迷思啦，在這時候真的要理性一點 XDD ..
選擇工具時最主要還是看需求，因為我身在的企業有著相當複雜的環境，所以在選擇組態工具時能夠符合各種環境彈性調整絕對是首選，在這塊 Puppet 和 Chef 都能輕鬆的達到目前環境的需求，並且針對大幅 Scale 能簡單的處理。
如果前兩項都達到了，那麼就要開始思考要花費多少時間成本在這套工具，總不能玩個一年還跟他 5 分熟吧 XDD，在這塊針對 Puppet、Chef、Ansible 我自己定義是：
也由於 Puppet 和 Chef 的使用上頗相近，很多企業也採用 Puppet + Chef 來彌補各自的缺陷。

結論是沒有一定要使用某一項工具最好，而是適合你自身的環境、適合自己，最後的目的有達成就是好工具！",,"['時代變遷讓整個 infrastructure 的防守範圍擴大', '可被記錄及可視化的 infrastructure', '時間就是金錢，減少你的工作時間，去做你想做的事情。', '龐大的使用者經驗', '為什麼是用 Puppet 而不用 Chef, Ansible']","['市佔率', '需求', '成本']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191332,DataTechnology,1,GraphQL+ApolloData入門系列,6,ApolloDataClient基本設定,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1513043490000000000,710,"介紹
前幾篇文章都是在介紹 Server 的部分，因為 ApolloData 提供了許多前端的套件,這次先以用原生 ApolloClient來做一個 簡單設定並打出 Request 的步驟
安裝
ApolloData 剛升2.0版本 如果是使用2.0之前的版本請參考官方網站
以下是2.0基本設定
link:中的HttpLink 可以設定任何網域的要連 GraphQL Server ，預設是在本機的 /graphql底下，
另外因為 ApolloData 有cache優化機制所以這邊也要預設給他一個 Cache
在還沒有搭配使用 React 或其他框架時候可以使用原生基本語法 client.query 的方式送出 payload
總結
設定 ApolloClient 時，主要設定了 link 與 chache， 設定後，直接使用 ApolloClient 去發 Request 到 GraphQL Server，好處是設定一次就不用每次發 Request 的時候都在設定一次網址 ， days7 再來說明 React 如何透過 ApolloData 提供的 HOC 來發 Request",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191384,ModernWeb,0,Expo---跨平台App開發從零到上架系列,8,"ExpoDAY8---Touchable,Icons&Speech",iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1513042689000000000,574,"
Touchable 系列一共有四種，","['Expo DAY8 --- Touchable, Icons & Speech']","['前言', 'Touchable?', 'Expo Icons', 'Expo Speech', '現在就做看看', 'Refs']","['Expo', 'React Naitve']",,,['tags: day5 iThome鐵人賽2018 ReactNative Expo Touchable Icons Speech'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10191382,SoftwareDevelopment,1,看到code寫成這樣我也是醉了，不如試試重構？系列,2,技術債（TechnicalDebt）,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1513042639000000000,717,"昨天曾提到，難改的程式通常設計不會太好；程式會設計不好有很多因素，比方說，筆者最常看到的是：因趕上線而寫出設計不好的程式碼。
我們會因為某些因素，而寫出未來難以修改的程式，這個狀況稱之為「技術債」。技術債是一種隱喻，以債務來形容這個狀況，非常地貼切！同時也能讓非技術人員理解技術人員的處境。
在現實生活裡，通常我們會為了某個目的去跟銀行貸款，比方說買房、投資或是週轉等等。當然銀行沒那麼好心，肯定會要你付出一點代價－－利息。只是因為達成目的所帶來的短期利益大過於利息，因此我們仍然會選擇借貸。
技術債也是一樣，一個快速開發且設計不良但能動的程式，如果提早推出市場搶得先機，勢必能收到短期成效。但在開始維護的時候，就得付出程式難改的代價－－時間。有道是時間就是金錢，技術債所付出的代價一樣也是金錢。
一般貸款都會經過各種評估，銀行才肯放款。技術債則不大一樣，開發人員有可能會不知不覺中欠下技術債。
Martin Fowler 把技術債產生原因分成了兩種維度，分別是魯莽（reckless）、謹慎（prudent）與有意（deliberate）、無意（inadvertent）。
這兩種維度剛好切出四個象限，如下圖：

圖片來源： TechnicalDebtQuadrant | Martin Fowler
有時我們很清楚現在這麼做會有什麼缺點，以及未來該如何移除這個問題，只是礙於現況不得不這麼做，這正是屬於右上角謹慎與有意的技術債。
但相反地，我們也很有可能無意中欠債，比方說，初學程式的新手，通常都會使用萬解複製貼上來解決類似的需求，但有設計經驗的老手都知道，這通常不是個好的實作方法，而這正好屬於左下角魯莽與無意的技術債。
依欠債方法來看，技術債有以下種類：
廣義來說，只要技術上會難以修改的理由，都可以算是技術債。
知道技術債的產生原因後，我們可以了解該如何避免產生技術債。
最簡單的方法是幫自己的程式寫註解、把開發過程遇到的問題和解法寫筆記、建置專案過程寫文件等等。撰寫文件是馬上能做的事，新專案可以避免欠債，舊專案也能馬上還債。
但通常遇到趕上線，而文件也不是必要的交付物，接著就會被忽略。而這問題會到越來越多不了解程式架構的協作者（甚至是三個月後的自己）加入專案時，才會漸漸被發現。最明顯的警訊就是：協作者開始要求寫文件，因為程式已經難以理解到需要文件支援了。
趕上線而沒寫文件，是屬於有意與魯莽的技術債。
在提測試前，先來聊聊人見人怕的 bug 。
大家都很怕系統有 bug 。換個角度想，事後被別人（或是未來的自己）發現的才叫 bug ，自己開發當下發現的不算（因為當下就會修好）。也因此 bug 最可怕的地方在於，它通常都是不知不覺寫下來的，而開發人員卻能一直與 bug 共存，甚至是使用它。直到 bug 被發現後，才注意到整個系統都依賴 bug ，這時要修 bug 已經是天方夜譚了。
這個 bug 也可以稱之為技術債－－因為修改程式都可能要考慮如何跟 bug 共存。
寫測試，是開發者的職責一部分。測試除了驗證功能外，還能保護原始碼，讓開發人員在修改有測試保護的程式時，比較不會因為粗心而寫下 bug 。這就像是為程式買保險一樣。
可想而知，有保險的程式， bug 不容易出現，技術債當然會大幅減少。
粗心寫出 bug ，是屬於無意的技術債。
除非是天才開發者，不然缺少設計的程式，通常會因為擴展性差、難以修改而成為未來的技術債。開發階段做的設計，如 DB schema 設計、程式物件導向設計、系統架構規劃等等，都能有效減少技術債產生。
雖然設計能減少技術債，但「天下武功，唯快不破」。產品只要能用，越早上線越好，不管是 POC 為了驗證產品可行性，或是提早進入市場獲得使用者回饋都是非常有價值的。而且「設計再怎麼好，都無法應付需求變化」，不管再怎麼謹慎，今天寫的每一行程式碼，明天還是有可能成為技術債，非常難以避免。
如何在「產生技術債與價值」和「高品質程式」之間取得平衡，這是企業所應該要面對的課題。
無意的技術債難以避免，但在可以選擇的時候，就跟銀行借錢一樣，當然還是謹慎地欠債好，而不是魯莽地欠債。
技術債會讓程式碼難以修改，而重構的目的之一，正是改善設計並讓其他人更容易地理解程式碼，換言之，重構正是在還債。
技術債跟信用卡的循環利息一樣，如果置之不理，會像滾雪球越滾越大。而技術債要付的利息是時間，團隊會發現估算開發時間越來越長，因為程式碼越來越難修改，直到團隊無法掌控專案被解散為止。
當團隊意識到產品有技術債時，應當把當它卡債一樣，訂定償還計畫－－也就是定時重構，減少技術債，同時程式碼也能持續運作，為企業產生應有的價值。",,"['為何要借貸？', '為何會欠下技術債？', '技術債的種類', '如何避免技術債？', '有借有還，再借不難', '今日回顧', '參考資料']","['為程式寫文件', '為程式寫測試', '為程式做設計']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191378,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,9,1-8.監控工具之一:ZabbixSnmp網通設備資料收集,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1513041663000000000,610,"市面上網通設備基本上都是支援snmp協定，利用SNMP可以收到CPU使用狀態、流量、up/down狀態等等。
先安裝功能相依插件
安裝完啟用後測試
-c:  SNMP community string通常預設是public
-v  SNMP版本，一些舊設備只能用1
http://net-snmp.sourceforge.net/wiki/index.php/TUT:snmpwalk
利用snmpwalk獲取cisco設備流量
Cisco設備enable snmp指令看官網
https://www.cisco.com/c/en/us/support/docs/ip/simple-network-management-protocol-snmp/7282-12.html
snmpwalk 測試IF-MIB::ifHCInOctets可以先不key,會出現一串資料
下面指令是看interface流量
也可以用OID:1.3.6.1.2.1.31.1.1.1.6

這裡收到數字是總流量，所以流量是用兩個時間點的相減 (Counter64這可以去GOOGLE一下有些故事)
查看描述 GigabitEthernet0/0/0 很清楚可以知道是哪的端口
snmpwalk -c public -v 2c x.x.x.x IF-MIB::ifDescr

接著在zabbix 上實作
Host 的SNMP interfaces Add新增一個

Key自行命名
Host interface選snmp新增的
SNMP OID選擇要監控的interface,一個interface要建立in/out兩個item
IF-MIB::ifHCInOctets
IF-MIB::ifHCOutOctets
Units注意單位bps
Store value選Delta per second(因為是要之間的差值)新版不用

進階來做個電波圖
1-4時有講過，時間拉長時儀表板會做一個平均的動作，依據時間長短有分鐘、小時...
所以離峰值會無法顯示，因此我們把線分成三份，MAX,AVG,MIN來顯示

Displa的地方個別上色、寬度調整

可以參考http://play.grafana-zabbix.org/dashboard/db/grafana-zabbix-demo?orgId=2&panelId=10&fullscreen&edit",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191374,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,9,[PixiJS-Day-09]遮罩,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1513040321000000000,629,"遮罩 mask 在 PixiJS 裡相當容易使用，用法是被遮的物件.mask = 遮罩;
不使用時，設定 被遮的物件.mask = null; 即可
程式碼：
註：遮罩後不顯示的範圍不會列入事件的感應區
會特別列為一篇的原因是：
遮罩的行為有可能跟想像不太相同，
下方分別使用 PIXI.Graphics 類別與 PIXI.Sprite 類別來當作遮罩說明
每張圖片分做左右兩個部份
左：兔子與遮罩，不設定遮罩
右：兔子與遮罩，使用遮罩遮兔子
- 使用 PIXI.Graphics 類別繪製遮罩
1-1. 遮罩為純色色塊：

填入色塊的顏色與遮罩結果無關
1-2. 遮罩為透明色塊 (0xff0000, 0)時：

填入色塊的透明度與遮罩結果無關
1-3. 除了填顏色，也填線段的情形：
對照來看，線段部分也會視為遮罩的一部分

將左圖與右圖合起來一起看，可看出遮罩包含了線段的部分

- 使用 PIXI.Sprite 類別繪製遮罩
使用 PIXI.Sprite 讀入的圖片當做遮罩，
由於只有當做遮罩的圖片不同，這個段落不附上程式碼
2-1. 做為遮罩的圖片是 透明-純黑 的圖片時：
有些意外的，設定遮罩後，黑色與透明的部分皆不會顯示

2-2. 做為遮罩的圖片是 純白-純黑 的圖片時：
顯示的部分為填上白色的部分

2-3. 做為遮罩的圖片是 透明-純白 的圖片時：
顯示的部分為填上白色的部分

2-4. 做為遮罩的圖片是 透明-純紅 的圖片時：
顯示的部分為填上紅色的部分

2-5. 做為遮罩的圖片是 純白-純紅 的圖片時：
紅色與白色的部分皆有顯示

2-6. 做為遮罩的圖片是 純黑-純紅 的圖片時：
顯示的部分為紅色部分

繼續測試，若填入的顏色為灰色的情形時：
2-7. 做為遮罩的圖片是 透明-0x888888灰色 的圖片時：
顯示的部分為 0x888888灰色 部分，有些不透明

2-8. 做為遮罩的圖片是 白色-0x888888灰色 的圖片時：
顯示的部分為 白色-0x888888灰色 部分

2-9. 做為遮罩的圖片是 透明-0x888888灰色 的圖片時：
顯示的部分為 0x888888灰色 部分

本篇小結：
PIXI.Graphics 類別與 PIXI.Sprite 類別的遮罩，表現出來的結果不太相同
各有適合使用的情形
視情況選擇遮罩的類型了",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191368,ModernWeb,0,重新學習網頁設計系列,9,DAY9.JavaScriptArray操作,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1513040299000000000,602,"今天來分享一些在實務上常用到的Array操作，內容涵蓋較新語法
使用時最好是最好能夠將語法向下編譯至ES5提高瀏覽器支援度
目前最普遍的方式就是使用webpack搭配babel
使用教學網路上非常多，而我也將在之後的文章中分享我的個人設定
說明
一般而言我們會使用arr1這種方式來宣告陣列，而不用使用arr2這樣的建構式方式
arr3是個實用的新使用方式，使用建構式搭配.fill方法建立帶有預設值的陣列相當實用
說明
push添加元素至陣列尾端
unshift添加元素至陣列前端
pop移除陣列最尾端的一個元素
shift除陣列最前端的一個元素
concat將指定元素與暫列合併並回傳新陣列
concat能夠處裡給予的陣列，但無法處裡陣列中的陣列
slice不會修改元素本身，而是回傳一個新的陣列
reverse直接反轉當前陣列
sort直接排序當前陣列
搜尋陣列時會傳指定元素的引索值，若找不到該元素則回傳-1
將一個陣列轉換至另一個陣列
過濾一個陣列的內容
將一個陣列的內容及合成一個值
通常用來累加數值，或是將陣列集合成單一物件。
補充
這邊示範了兩個範例
第一個範例比較普通，只簡單做個數字加總
第二個範例比較有趣，示範如何把單一字串元素的陣列轉成一個帶有物件元素的陣列
更完整有關reduce方法的使用方式請查看MDN reduce 文件
確認陣列元素中是否存在指定元素
陣列中的每個元素都符合條件回傳true
陣列中只要有一個元素都符合條件就回傳true
這裡僅列出了我常用的API
更多更完整的Array的使用方式可以參考MDN Array API",['陣列 Array'],"['宣告', '加入與移除元素', '取得子陣列 slice', '反轉', '排序', '搜尋', 'map', 'filter', 'reduce', 'includes', 'every', 'some']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191380,ModernWeb,2,ZerotoherowithReact.js系列,6,【Day6React】學習都是從觀摩他人的code開始,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1513039216000000000,833,"Codepen 是寶庫！！
我是一個喜歡把玩顏色、嘗試各種介面風格的人，因此 codepen 是我經常使用的工具，更棒的是，可以在上面看到各種高手，用著千奇百怪你一生可能都學不會的招式在寫 code，看了真的很療癒！
此外，codepen 也提供匯出程式碼或是儲存在 GitHub Gist 的功能，個人認為非常好用，程式的移駕不至於太麻煩。

我們找一個 Codepen 上的 React 範例（這邊就直接拿我上一篇做的小練習xD默默置入行銷），點擊右下角的 export 匯出 Zip 檔，匯出的檔案結構為：

接著，把整個資料夾丟到我的編輯器裡面探探程式的秘密吧！
第一個先看看 index.html 裡面放了什麼程式碼：

這邊我們看到了引入的 React CDN，和一行
那我們就來看看 js 資料夾底下的 index.js，這應該就是我所撰寫的 js 程式碼吧！但事實上，這邊放的是 Babel compile 後的語法。而我們實際撰寫的 js 語法則會放在 babel 資料夾中的 index.babel

Todo App 是學習任何語言很好的題材，計算機也是。這兩個題目都是練習 CRUD 的最佳素材：
在 Codepen 挖到許多寶物～前輩為我們開創了一條路（夜深了想睡了語無倫次了），很多的學習都是從模仿開始，而我不知道哪一天可以完成 React Todo App 希望能盡快學習。
分享兩個很不錯的範例：
https://codepen.io/marekdano/pen/bVNYpq
https://codepen.io/grsmith/pen/BLaGXN?q=react%20todo",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191379,ModernWeb,5,前端工程師養成手冊系列,9,找一個好mentor，讓你少走些冤枉路,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1513038901000000000,1150,"什麼是 mentor (饅頭) 呢？mentor 並非像是教室的老師能夠全程時間來「教學」，而是比較偏向「引導」的角色，也因此 mentor 也可以稱為人生與職場導師的代名詞。
我相信你在投入前端時，時常會有不知道自己下一步到底該怎麼走的窘境，很希望有人可以教你該怎麼走下一步，讓自己不至於繞太多歪路，導致浪費太多時間。我必須老實說自己從就業到現在沒有遇到 Mentor 過，直到我反過來輔導別人，在幾年前看到 mentor 這個詞彙才發現自己都在當別人 mentor 了，所以這裡也來分享如何找一個好饅頭 (mentor)。
首先你先要有個認知，沒有人天生就必須幫你忙，我常常會看到有人去加一個前端開發者的 FB 好友，然後問他些問題，沒獲得回應就抱怨對方冷漠。但是你有想過彼此素未謀面，當你請教個程式問題裡頭很多 BUG，就算資深開發者也需要花一陣子才有辦法搞懂邏輯，那對方為什麼有義務幫你去 Debug 呢？每個人都有自己的人生要過，光自己的事情都應付不暇，怎麼還管得著別人？
難聽的話雖然說在前頭，但並不代表就無望了。這裡分享一些方式給各位。
我相信在你投入前端領域時，多少也透過一些網路資源與社群文章發現一些活躍人士，進而追蹤他們的動態、部落格與演講。或是在前端聚會時，遇到些資深開發者，這些人自然會有可能是 mentor 的最佳候選人，畢竟他們在這條路走跳許久，自然會知道許多經驗談。
舉例來說，他們可能會在哪裡演講或參與什麼聚會時，這時你也就可以跟著前往。如果有見到面，也可以透過提問讓對方留下好印象，如果能私下請教問題那就更棒了。這裡分享一個小訣竅給你，請不要太過阿諛奉承，誇讚對方的技術能力。越資深的開發者也因為投入的技術過深過廣，所以也相對覺得自己掌握的技術比較起來微乎其微。比較好的方式是你有看過對方的技術部落格、 Git  repository，然後請教一些東西，如果你有用他分享出來的技術自己做一些小應用，那就更棒了。對方就會覺得你真的有認真閱讀他的技術內容而對你產生好感，印象分數自然大加分。
接下來你就可以試著加潛在 mentor 好友，並再次自我印象加深他對你的印象，能做到這你其實就走近一大步了。
在你投入前端過程中，勢必會有許多程式與職涯上的問題想詢問他人，所以強烈建議你要將提問的智慧看過一次，不要讓 mentor 認為你是伸手牌，另外在發問頻率上也要節制，像是以我個人主觀感覺，每天都問超過十幾個問題可能會有點排斥，但如果是三四天問一兩個問題倒就覺得可以。
在發問前要讓對方認為說你確實有花許多時間在尋找問題上，別人發現你是有備而來才會主動想要幫你。另外提醒一點，如果你是程式碼問題的話。
絕對不要截圖程式碼，也不要在聊天視窗貼程式碼。
絕對不要截圖程式碼，也不要在聊天視窗貼程式碼。
絕對不要截圖程式碼，也不要在聊天視窗貼程式碼。
因為太重要了所以要講三遍，如果是觀念不通時，你可以把該程式抽化出來放在 codepen、jsbin 上，好處在對方可以即時從 code 瞭解你問題，並回改給你。還有就是絕對不要將所有的程式碼放上去，只將自己觀念有問題的放上去，這樣才可以加速檢視程式碼的時間。若是專案複雜的話，至少也要傳到 Github 上，絕對不要丟一個 zip 壓縮檔要請對方幫你看，如果你做這樣的事情會被莫名扣很多分數，一定要切記，說真的沒有那個美國時間解壓縮看你的 CODE。
因為 mentor 並非會一對一教你技能，所以許多事情有疑惑時，大部分 mentor 都是會提供個方向給你參考。有些人都會以為有可能獲得免費的教學那真是大錯特錯。像是以我在引導學生時，我會大量問問題來讓他反思，讓他能夠自行尋求自己內心的答案，且有時候旁觀者清，又較能看出學生在意的點在哪裡。例如我就常反問學生說：
透過這樣的問答才能夠讓學生知道自己的真正想追求的是什麼，所以有些人會覺得我這麼忙，竟然還有辦法線上輔導學生轉職感到不可思議，但其實我除了少數回應他們程式問題並確保所學觀念沒問題，依照他們的背景適時提供資源讓他們自己去消化外，絕大部分的時間也就是陪伴他們更加瞭解自己而已。
但要切記人生是你自己的，不論是 mentor 或是其他人都無法為你的人生做決定，你要走的路是你自己要承擔風險的。若是你把這決定權交由給他人幫你做決定，那豈不就很不負責任嗎？所以我都會跟學生說：「我沒辦法下決定，若是我說了你得到失敗的結果，那豈不就會怨恨我？況且你自己下決定失敗了也沒關係，至少你自行承擔風險而努力過了，代表你也向前一大步，在以後人生會更有智慧地下決定。」
mentor 除了技術引導外，其實更看重關係的建立。有些人本身就很忙，不會主動關心你。但你問問題時，他還是都會回覆你。有的則是會主動關心你的近況，就端看雙方的個性調性如何，所以也相當看重緣分。有些又有點像是師徒制，師傅看出你的潛在性，自然會希望你能發光發熱，而徒弟也在觀察潛在師傅是否適不適合自己。
同時也會因為技術與個人的發展，mentor 也會只短暫一陣子，或是持續很長一段時間，其實是很正常的，但也要記得受人點滴，未來有機會也能湧泉以報。",,"['沒有人有義務去幫你', '如何認識潛在 mentor', '不要把潛在 mentor 當做免費的顧問', 'mentor 重「引導」、非「教導」', '找出適合自己的 mentor']","['追蹤你在意的資深前端開發者', '參與他們可能出現的場合', '結束後，使用 mail、加社群好友加深對方印象']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191375,ModernWeb,0,JavaScript基礎二三事系列,9,Day09　強制型轉與比較運算子,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1513038744000000000,584,"今天我們來看看強制型轉與比較運算子
JavaScript是動態型別Dynamic Typing語言，故非常容易發生強制型轉這件事。
強制型轉Coercion，JavaScript自動轉換值的型別。
例如說：

結果是3，合理！
那這樣呢?

發生了什麼事?
這裡我們可以用typeof()這個內建函式來查看一下a現在的型別

string(字串)
對JS而言，當數值與字串相加時，它會將數值自動轉型為字串，所以1變成'1'。
實際執行可以想像變成：
字串'1'與字串'2'相加就是字串'12'，而不是數學意義上的相加。
以此聯想，那：
console會印出什麼?

字串'ithome'與數值30相加結果是字串'ithome30'
用typeof()來查看一下b現在的型別

string(字串)
　
...不過
很些人會以為「阿~在JS只要數值與字串計算，數值就會被轉成字串」
或是拿數值類比成硬幣，字串類比成物品，說硬幣(錢)可以數學計算(買賣)也可以當成物品，但物品不一定能拿來數學計算(買賣)，以此比喻數值與字串的計算狀況。
　
這麼想容易落入JS的陷阱裡！
看看以下程式碼：
console會印出什麼?

'10'在計算時型別從字串轉型成數值
用typeof()來查看一下c現在的型別

number(數值)
console會印出什麼?

'10'在計算時型別從字串轉型成數值
用typeof()來查看一下d現在的型別

number(數值)
　
所以撇開+不說，字串和數值進行計算時，不是只有數值會轉成字串，字串也有可能轉成數值。
　
　
接著來看看以下程式碼
console會印出什麼?

合理!
那
console會印出什麼?

疑?為什麼也是true?
誠如昨天筆記，當運算子優先性相同，就依據相依性來判斷是左到右執行還是右到左執行。
現在有兩個<運算子，所以優先性是一樣的，那就再來看<的相依性：
<相依性為左到右，所以3 < 2 < 1 的執行順序是先比較3和2，再比較1。
3 < 2相比結果是false，接著再運行false < 1的相比較。
在JS中，true若被強制型轉成數值會是1，false被強制型轉成數值會是0。
這裡的false因為與數值進行比較判斷，被JS自動型轉成0，變成0 < 1，而0 < 1成立，回傳結果true。
要判斷哪些東西會被轉型成數字可以用Number()這個內建函式：

NaN在JS中表示Not a Number
表示不是數值
它也不是原始型別Primitive Types
所以若是今天筆記前面的例子
會印出字串ithome30
那
字串string減數值Number，執行時字串ithome無法被自動型轉成數值
結果自然是

拉回比較的主題，要在JS中進行數學的比較(兩邊是否相等)，可以使用==運算子。
若是用==運算子來比較數值0與布林值false，會發生什麼事呢?

比較時被強制自動轉型(型別轉換)了
上面說過false與數值互動時會自動型轉成0，執行時實際變成是
0與0相等嗎?
當然囉，所以回傳true。
只不過我們都知道，0和false根本是不同的東西，它們連型別都不同呀！
這個時候，可以使用===運算子：

false！
同樣是比較左右是否相等，==和===差異是什麼？
因為==運算子只比較值，故型別會有轉型來轉型去的狀況，而使用三個=是嚴格比較，===運算子不只比對左右兩邊的值，連型別也會一起比較，0的型別是數值，false的型別是布林，比較過程中不轉型，兩邊不相等就回傳false囉。
引用自影片作者對三個===的評語
That is going to save your life.
　
　
　
小結
JS是動態語言，會有自動轉型(型轉)的狀況發生，除非我們就是故意要讓它轉換型別來比較、運算，否則進行相等比較時，最好使用===嚴格比較。
關於JS的比較表格可以參考MDN的相等性比較表格
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分3-24~3-26",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191377,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,9,09.應用：自用氣象資訊機器人,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1513037914000000000,660,"瀏覽了許多開放資料平台，能符合個人需求第一項資訊非天氣資訊莫屬。每天回到家裡，家人總是會聊聊最近天氣變化，明天記得多穿件衣服..等。但在偶爾要出差或參加多天活動的時候，往往會遺忘觀看氣象資訊，不是隔天下雨淋得成落湯雞，就是冷到直發抖。若機器人能即時查詢目前獲明天的氣象資訊，即能減少這些問題發生。
Step 1. 開啟中央氣象局官網 - http://www.cwb.gov.tw/V7/index.htm → 登入 → 進行註冊 (註冊流程不贅述)


Step 2. 註冊好後，我們前往氣象資料開放平台進行登入 - http://opendata.cwb.gov.tw/login

Step 3. 點選資料使用說明 → 點選取得授權碼
註：請記錄授權碼，撰寫程式時需要。

Step 4. 將頁面往下捲，使用方式是使用 HttpGet，需要的參數似乎為dataid 與 authorizationkey就足夠了，dataid 在網站上有清單。

Step 5. 如前一篇所描述的，我們透過 postman 先來測試今明36小時天氣預報。似乎是 Xml 格式且包含各地區的資料，我們可能需要找一下文件並過濾一下條件。

Step 6 下方有一個資料擷取說明的連結，可以開啟一個PDF 檔案，內部有更詳盡的使用方法：

Step 7. 雖然更詳盡但與官網上有些不同。我們整理一下參數：
組合起來變成
http://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=CWB-XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&locationName=臺北市&elementName=Wx,PoP
註： elementName:
Wx, 天氣圖示代碼+描述
PoP, 降雨機率 (Probability of Precipitation)
Step 8. 再度嘗試一下 postman，我們得到了明確的資料內容。

Step 1. 在開始撰寫程式之前，我們先安裝 RestSharp。 工具 → NuGet 封裝管理員 → 管理方案的 NuGet 套件..

Step 2. 安裝 RestSharp

Step 3. 其次，我們要思考一下取回的資料該怎麼處理：從上面 postman 的回傳結果，可以看見這一個多層的 JSON 格式資料，我們必須產生對應這個格式的 (data transfer object)，比較能順利進行資料操作。 我們將剛才傳回來的 JSON 資料內容複製，貼在 json2csharp (http://json2csharp.com/) 上進行類別轉換。

Step 4. 接這些程式碼貼在 RootDialog.cs 內，你的程式碼應該如下
Step 5. 更改MessageReceivedAsync 方法內容如下：
Step 6. 啟動專案，我們透過模擬器輸入”天氣”


Step 7. 您可以上傳 Azure Web Applicaion，這樣你的 bot 又多會一項技能。 隨著我們服務越來越多，我們在後續某一篇會做 refactor。
https://github.com/matsurigoto/BotFrameworkExample02","['前言', '註冊與使用 Open Data', '程式', '範例']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191376,SoftwareDevelopment,0,那些年八歲到八十歲都可以一起寫的程式系列,4,<DAY4>,MichaelHuang,https://ithelp.ithome.com.tw/users/20107642/ironman,1513037686000000000,584,<待續>,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191307,自我挑戰組,0,花式PHP系列,4,Array：流程控制、迭代操作,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1513037490000000000,606,"
接下來要介紹 PHP 陣列函式整整六天～
如果你覺得 foreach 或 for+count() 就能打遍天下，請一定要看看這系列文章！
使用 PHP 自己提供的陣列函式，
除了可以使你對陣列的操作更語意化，還能讓別人更清楚你這段程式碼的目的在哪～
有學習過這些函式的工程師一定都能一眼看懂你想作什麼的！
in_array 可以幫你檢查陣列中有沒有指定的資料存在。
比如說，
有一天你去買紅豆餅，
你已經想好你要吃奶油口味的了，但你還是需要問他有賣什麼口味，
你知道老闆賣的口味之後，就要想想其中有沒有包含奶油口味才決定要不要購買～
array_key_exists 作的事情其實跟 in_array 差不多，
不過對象不一樣，前者是對 array key(index) 作比對；後者是對 array values～
除了在買紅豆餅的時候你會需要用到這個函式 ～
在有些要動態決定程式行為的場合也用的到～
比如說有個能送出 http request 的 function curl($request, $params = []) {}，
在有設定 $params['method'] 的時候會送出使用指定方法的 http request
上面的例子改寫一下就可以了：
array_map 通常用在你單純需要取出陣列中的部份資料，或取出轉換過的資料的時候。
比如說你在買紅豆餅之前（這次你沒有特別想吃的口味），
需要估計每種口味買 2 個的話各是需要花多少錢，那就可以這樣計算：
上面這段程式碼等價於：
array_walk 與 array_map 一樣都是對陣列做一個迭代的動作，
但其中最大的差別在：
這兩點差別就造成了 array_walk 與 array_map 適用場景的不同！
下面這段程式碼主要在把紅豆餅的價錢後面，都加上「元」這個字：
（你們可以試試看把 $value 前面的 & 移除掉，比較移除前後的差別）
而上面這段程式碼等價於：
坦白說，
從精進程式碼語意化的目標來說，
這邊 array_walk 改進的效果不如 array_map 明顯，甚至還不如 foreach 本身。
我個人大部分時候也還是偏向使用 foreach 而不是 array_walk，
還是各位如果有什麼想法也歡迎在留言處告訴我，謝謝大家～",,['正片開始'],"['in_array', 'array_key_exists', 'array_map', 'array_walk']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191351,SoftwareDevelopment,0,爬蟲始終來自於墮性系列,12,PTTCode_job訂閱通知,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1513037436000000000,677,"除了要處理各種工作室奇怪的問題之外，我其實是一名接案工程師，雖然目前已經不會再主動求案，但在早之前，其實都是必須在網路上四處找案子的。而為了避免淪為廉價奴工，所以我不太會去一些數字型外包網站，大部分的來源會是在 FB 社群或者 PTT code_job 版。
正所謂時間就是金錢，常常有人做版上發了是我有興趣的案子，但因為在忙較晚看到就變成「已發案」狀態了。所以那時候就寫了一隻爬蟲，每隔一段時間就去幫我查查看有沒有新發案，有的話就自動寄信給我，從此之後我考試每科都得 100 分，案子永遠第一個聯絡...
要探訪 PTT 基本上就是走 telnet，但小弟不學好，所以那部分就沒有涉獵了，好在 ptt 有網頁版，雖然會 delay 些時間，不過大致上還是可以接受的。

Code_job 版網址是 https://www.ptt.cc/bbs/CodeJob/index.html ，看起來挺容易爬的，雖然有分頁，但 index 預設就是最新的。
這時腦中就在思考，我如何才能取得最新的文章呢？把公告濾掉，然後直接抓最後一篇或許是個直覺的方法，但考量到可能新發案會突然短時間發出兩、三篇，所以這個方式並不完整。
接著又想，若我能去記錄上一次爬蟲拿到的最後一篇文章，就能知道這次爬蟲新抓取的篇數。這樣確實可行，但不簡潔，至少我要有個地方去記錄上次文章，要嘛就是 database，要嘛就是存 file，兩種都還要額外的心力去處理。
接著又想，若上面有時間的話，那我可以去比對時間，例如爬蟲五分鐘爬一次，那我就能去算五分鐘內生成的文章有多少。但事情看起來沒那麼簡單，畫面上只有日期，日期範圍又太大了。

持續觀察上面有的物件，突然瞄到一個有趣的東西，文章的連結。這個連結中，有一個 10 位數又 15 開頭的數字，憑著工程師強烈的第六感，這肯定就是 timestamp。

趕快驗證一下...
Bingo！那麼剩下都小事了...
我們把動作分解成幾個：

因為單純是 get request，我想應該也沒有研究的必要了XDDD，就直接來研究抓取 dom 就可以了。確認可以抓到文章列表，那剩下的就是 filter 的事情了。
先 define 一個 crontab 會抓取的時間數值
然後直接用 request 來抓取 code_job 版，然後再把文章 list 抓出來
最後加入 timestamp 的 filter
我們可以透過 crontab 來設定每五分鐘 trigger 一次，同時加上 email server 來達到主動通知寄信，mail server 我們可以使用平常收發信用的 smtp，或者使用第三方的 service 像是 mailgun 之類的。
其實玩爬蟲並不是要多高深的技術或者，或多絢麗的技巧，真正有價值的是在於解決問題和省下時間。像是這次介紹的 ptt code_job 主動發文通知，就是一種很簡單，實作不困難，但卻能為我們省下許多的時間，而技術本意本該就是如此。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍伸應用']",,"['方法探索', '觀察物件', 'Define 抓取時間', '取得文章列表', 'filter', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191228,DataTechnology,0,MicrosoftBotFramework30天上手系列,6,DebugabotwithVisualStudioCode(typescript),Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1513037368000000000,581,"如前篇 Debug a bot with Visual Studio Code (javascript)
因為我要用tpye script 做開發，
所以設定上就得複雜一些
tsconfig.json
將 app.js 改成 app.ts ，並移到 src 作為主要開發目錄，tsc 會將該目錄轉譯到 dist 下
sourceMap 設 true 不然無法debug
.vscode/launch.json
這樣就可以順利在*.ts裡 debug了
#附註，還有一堆設定
https://code.visualstudio.com/docs/nodejs/nodejs-debugging",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191373,自我挑戰組,0,"Let's""Go""系列",6,Day06　Pointers,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1513036713000000000,573,"這一章我們要來談談指標
指標代表著變數在記憶體內的儲存位置，
透過指標我們可以在不知道變數名稱的情況下，對變數的值做讀取或是改變它的值
如下我們可以說指標p指向變數x
若要對這個變數改值，我們可以透過表達式*p讀取指標的值，並對它做修改",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191359,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,7,【Day7】NUnit好用的小功能(修改中),eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1513036574000000000,586,"這篇會說明幾個NUit內幾個好用的屬性或是方法，其中包含TestCase、SetUp、TearDown、ExpectedException、Assert.Catch<t>(delegate)
以我們第一個範例來說，這樣的程式碼很難維護，因為每一個參數每一個測試都要寫一個function（方法），當有100總可能性，是不是需要寫出100種不同的方法名、100總不同命名。這樣程式碼變得很長，而且裡面的程式結構又十分相近，所以可以增加case，使用TestCase。也就是參數畫測試(parameterized test)。
修改僅需要下面這些步驟：
所以會變成（參考檔案:LogAnalyzerTest_TestCase.cs)
其中使用三種不同的參數，只有第一個會發生錯誤，因為並不是使用「.log」檔名。
這樣就相同的功能，只需要參數替換就好，可以節省很多時間在觀察以及編寫重複的程式碼。
接著更簡單化且可以測試多個不同的結果：使用第二個參數。增加參數「expected」，接著修改Assert.True(result)，變成Assert.AreEqual(expected, result)
所以最終程式碼變成：
更為簡單明瞭囉！！
從原本的兩個function，現在變成一個，參數也變成三種，而且一次可以測兩個預期結果。這是個不錯的功能吧！
臨時想要增加：SetUp、TearDown、ExpectedException、Assert.Catch<t>(delegate)
有空會補齊
---待續---",,['TestCase'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191372,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,8,[Day8]EasyFlowGP--系統設計工具(三)Web表單設計師:表單設計和Javascript區塊,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1513036458000000000,604,"(平安渡過一週後，開始覺得有點挑戰!因為工作開始忙碌起來，原本寫文章的時間改成現在，看來要和灰姑娘比賽，12點敲鐘前要完成分享 @@)
今天要和大家分享，系統設計工具的另一個工具
Web表單設計師:使用JavaScript語法結合Form表單畫面，設計出生動的簽核畫面。
鼎新這幾年在EFGP的開發上，將Web表單設計成越來越簡便，先前提到的SQL註冊器
就是個便於開發的工具之一，資料開窗畫面改為設定式(下圖)，這些都有助於資訊
同仁在更短時間內協助公司完成EFGP表單。

接下來之後的分享也會花較多時間，和大家說Web表單設計師的部分。
現在先和大家介紹最基本的FORM 四大函式 與表單簽核的關聯。
==============================================
開啟一張全新的表單時，會有四大區塊。

function formCreate() :表單初始被建立時，表單第一次被開啟時，通常只在第一關發單人開啟時
function formOpen()   :表單每一次開啟時，首先讀到的區塊，EX:直屬主管開啟，部門主管開啟...
function formSave()   :表單儲存時，當表單被儲存成草稿時，以檢核表單需要。
function formClose()  :表單關閉時，當離開這張表單才讀取的區塊。
隱藏版的函式，formDispatch()
function formDispatch :表單執行繼續派送時，所呼叫區塊。
當流程簽核關卡執行繼續派送時，function呼叫的順序為 formSave=>formDispatch",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191367,ModernWeb,2,30天串接30個GoogleAPIs的服務應用系列,8,[day8]-離開不是結束，這裡不是終點....（退賽宣言T_T),KingTzeng,https://ithelp.ithome.com.tw/users/20103130/ironman,1513036328000000000,762,"從這邊認識到很多前端的朋友，去年在寫鐵人文的時候也是...
因為去年的鐵人賽寫的並不好，所以今年想再次挑戰，
並挑了一個拿手的主題，想今年終於可以寫充實的內容了...
而且有很多網友的回饋，讓我感覺到有成就感～
但因為我本是寫網頁的人....
因為公司欠缺APP工程師，所以安排我去撰寫雙平台的程式
之前使用Cordova去包還可以Pass，但最終還是以原生為目標
所以今年八月時我去學了ReactJS，想用React Native來撰寫APP
但小妹不才...學習的成效並沒有很理想，近期目標可能要改成專注在RN上了....
不好意思....但跟標題寫的一樣，退賽並不是結束！
有空時我還是會繼續寫文章更新在這&我的部落格與Github上
peter0521邦友點播的Google Calendar API的 Sample練習也不會忘記的！！
（就是一種無壓力寫30個應用文的狀態....)
對邦友以及自己抱歉，
這次不想一直卡文了，對其他參賽者不公平，在此先下台一鞠躬了...
2017.12.11 King Tzeng
想認識我的可以加我FaceBook交流一下～謝謝你們^^
這是我的個人網站 https://tzeng17.com/",,['對有訂閱我與期待的邦友說聲抱歉了....'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191369,SoftwareDevelopment,0,30天iOSAPP開發系列,6,[Day06]爬取網路資料,d3764291,https://ithelp.ithome.com.tw/users/20107588/ironman,1513035201000000000,562,"因為預想中的專案需要有各種資料，而資料來源在Day 5已經有提及，因此預想程式流程如下：
python爬蟲，爬取資料=>寫入資料庫=>手機端讀取資料庫
因爬蟲、資料庫不太於本次專案重點，因此會快速帶過。
在爬蟲部分，會每5分鐘確認資料是否更新，若更新則寫入資料庫。
手機端抓取資料目前看到貌似要使用URLRequest等功能。但因為太複雜無法在一天內消化完畢...
因此今天就先這樣吧...",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191370,SoftwareDevelopment,1,簡潔高效的PHP&Laravel工作術：從ElementaryOS下手的聰明改造提案系列,1,第1天：什麼是elementaryOS？,shengyou,https://ithelp.ithome.com.tw/users/20107229/ironman,1513035053000000000,678,"本文同步刊載於作者部落格：https://medium.com/@shengyou/2018ironman-eos-for-php-developer-day1-f9eaeff8e554

圖片來自官網
elementary OS 是一個以 Ubuntu 為基底，全新打造圖形化操作介面的一個發行版。其強調簡潔 (concision)、免設定 (avoid configuration) 及極簡文件 (minimal documentation) 的核心精神，意圖打造最易於使用的 Linux 操作體驗。
筆者一向是個視覺導向的人。當初看上 elementary OS，就是因為其畫面的優雅、輕量的預載環境及無負擔的學習曲線而受其吸引，加上本身工作的開發環境也是以 PHP/Laravel 的開源方案為主，一時突發奇想，是不是有可能用 Linux 的圖型化發行版，打造一個讓 PHP 開發者也能輕鬆上手、開心工作的開發環境呢？這系列主題於焉而生。
在接下來的 30 天裡，將使用 elementary OS 為基礎，目標是同時滿足對設計的堅持與產能的要求，打造自己也愛用的工作機。主題將囊括 PHP/Laravel 的所有開發家當及身為一個工程師所需要的各項生產力工具，試圖挑戰 Linux 只是簡陋替代品的刻板印象，讓它中看又中用！
不論這幾年開發潮流如何的移轉，從開者者口中冒出的選項不是 Microsoft Windows 就是 masOS，似乎 Linux 從來都不會是工作機作業系統的首選。話雖如此，從筆者的角度卻覺得，其實用 Linux 當工作機有幾個較少意識到的好處：
工作機就是正式機
反正平常寫 PHP/Laravel，說到底最後還不是要部署到 Linux？那直接用 Linux 來開發，不就更早適應正式機的環境？甚至在某些情境下，還可以直接本機測試，省去用虛擬方案模擬環境的麻煩。
具高可攜性
當初看上 Linux，其中一個原因就是其可攜性。而大多數的 Linux 都可以直接安裝在 USB 隨身碟上運行，這讓工作環境的可攜、轉移甚至量產都變得可行。甚至可以在教學活動裡，運用這種方式來降低學員環境間的差異。
相形安全的工作環境
截至目前為止，Linux 平台上的病毒相對較少 (小眾市場？)。其他平台的病毒也較不容易跨界感染，使用 Linux 當工作機算是一個相形安全的工作環境。
更專心的工作環境
的確，Linux 上支援的東西比較少，尤其像電玩這一類的。也因此，意外創造出一個不會被外物誘惑的工作環境！(誤)
Linux 發行版多如牛毛，尤其近幾年主打不同特色的發行版如雨後春筍般的釋出，為什麼會獨鍾 elementary OS？我的理由是這樣的：
想要有一個乾淨的 Linux 環境
有別於其他主打零調校的發行版已預裝許多軟體，elementary OS 出廠時幾乎什麼都沒有，這對想要自訂開發工作機的工程師來說，是一個很乾淨的系統。工作需要的東西，我自己會想辦法搞定。
想要有一個漂亮的 Linux 桌面
目前大多數的 Linux 桌面都愈來愈美了，不過要做得優雅又具備該發行版自有的風格的就真的是少數了。而 elementary OS 則是少見才問市就先推設計指南 (Human Interface Guideline) 的開發團隊。其對設計細節的重視，是筆者非常欣賞的地方。
以 Debian 為基底
除了視覺上的原因外，開發上還是習慣使用 Debian 流派的設定。因此，在挑選發行版時，也會優先選用以 Debian 為基底的發行版。elementary OS 是以 Ubuntu 為基礎做開發，這意味著它可以直接使用 Ubuntu 的的套件庫、設定也是依著 Ubuntu 走。當遇到問題時，也是用 Ubuntu 的關鍵字就可以查到相關資料。以 Ubuntu 目前的市佔率來說，查資料相對容易。
我愛擬真設計！
我要誠實的說：「我討厭 Flat Design！」我喜歡 elementary OS 的其中一個很大的原因，是因為它所有圖示都採用擬真 (Skeuomorphism) 的設計，這完全是個人立場問題。 :p
在接下來的 30 天裡，筆者會在 elementary OS 上打造可以開發 PHP/Laravel 的工作機，而在做方案選擇時，會依照以下決策模型來評判：
介面一定要漂亮！
就說是視覺系了嘛~而且目標就是要打破 Linux 軟體都很醜的印象了，所以假如兩個相同功能的軟體，一定先選介面好看的，不好看的就謝謝再聯絡~ (甚至功能超強但介面實在太醜的也不考慮)
跨三大平台者優先
雖然目標是拿 Linux 當工作機，但不是所有時機手上都有 Linux 可以用；加上工程師有一部份的任務是要彼此交流，儘可能的使用可以橫跨三大作業系統平台的方案，降低轉換環境時的適應時間。若是順利的話，還可以拉人進 Linux 這個坑 (！)。
可以用網路服務解決的就用網路服務
現在很多開發工具都直接做成網路服務了，也因此在瀏覽器裡就可以直接使用。這對 Web 開發者來說是再容易適應不過了，也更具可攜性。
以能完成預期任務為目標
在選擇軟體方案時，以能符合需求為主，對於軟體的授權方式沒有太強烈的要求。換句話說，只要好用、可以提升效率，就算是付費軟體、Freemium 也都接受。
對工程師來說，工作機的選擇當然還是以順手為主。在這個系列裡，筆者僅從自己是開發者的角度出發去構築，可能無法滿足所有開發工作需求，也無法保證能打造出完美的工作環境。畢竟技術決策永遠只有最適解沒有最佳解，清楚自己的需求並做正確的選擇才是智慧之舉。不論您是懷著一股傻勁跟著筆者一起跳坑、或是抱著觀望的態度、抑或是嗤之以鼻，都由衷地希望您能找到自己最喜歡的一種方式。
準備好了嗎？讓我們拋棄成見，一起重新打破對工作機建置的想法吧！",,"['為什麼會選 Linux 當工作機？', '為什麼選擇 elementary OS？', '決策模型', '免責聲明', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191304,ModernWeb,0,Confluence線上協同作業之平台系列,7,Confluence的法律相關事項,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1513034111000000000,576,"甚麼時候我特別在法律上的議題予以研究與了解，以前可能看到免費軟體，第一個反應就是可以任意安裝在電腦上，而之後開始瞭解到免費軟體的授權範圍也有所不一樣，有分成公司/家用與教育用，也開始花些時間在了解軟體上法律的規定，confluence是套裝商業軟體，除了試用有它的試用次數及天數限定，當您購買軟體後，也有些使用規範，我把它整理如下。
Questions for Confluence is a plugin (原廠提供的一個plugin，但是需要另外再購買)，而它主要功能如下
Incident Support - Identifying and troubleshooting problems in the system
Root cause analysis
Assistance with issues during installation
Assistance with issues during upgrades
Identifying and creating needed bug reports
Guidance around implementation and configuration
Integration support with other Atlassian products
而試用的帳號是以e-mail來判定，同一個email評估只有30天有效，可延長至90天。這是給客戶，讓他們有時間來購買之前嘗試產品。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191358,SoftwareDevelopment,5,來做個網路瀏覽器吧！Let'sbuildawebbrowser!系列,1,做一個瀏覽器之前，先來認識瀏覽器,微中子,https://ithelp.ithome.com.tw/users/20103745/ironman,1513033961000000000,764,"
很久以前就想寫關於瀏覽器的系列文章了，至於多久以前，其實大概也才幾個月吧。幾個月前我突然想往開源社群發展，誤打誤撞便開始了我對 Mozilla 的 Servo 專案的貢獻之路。Servo 專案是新一代瀏覽器引擎，強調平行化處理，因此速度會更快。在上面我也算是活躍社群貢獻者，幾個月下來對瀏覽器引擎開發也算或多或少有了解。事實上我更想從網路上吸取大量相關知識，可惜瀏覽器不是顯學，幾乎沒什麼資料可以參考，有也就那幾篇。而我專門挑中文資料缺少的領域寫文章，雖然其實這次英文資料也少得可憐，如果能讓中文界對於瀏覽器的了解更深一步，我很樂意寫文章彌補一點缺憾！系列大概分兩大主軸，其一是輕鬆簡單的原理和背景知識，其二則是比較進階的實作方式。
何謂瀏覽器，大家每天都在用，感覺我都不需要說明了呢！你每天用的 Chrome、Firefox 就是瀏覽器，你操作的是他的使用者介面，也就是網頁的畫面呈現好了，你還可以使用一些介面上功能，例如書籤、歷史紀錄、回到上一頁等等之類的東西，方便你瀏覽網頁。但是在你看到「看得到的」網頁之前，網頁都只是冰冷的程式碼，這就要靠瀏覽器引擎來做處理，讓程式碼變成一塊一塊的圖形和文字。一個好的瀏覽器要兼具使用介面友善跟程式處理快速，簡單來說就是你使用起來覺得很直觀很方便，瀏覽網站的時候覺得速度很快。在排除網路速度、電腦規格的情況下，好的瀏覽器帶你上天堂，爛的瀏覽器讓你生不如死。
簡單來說，瀏覽器會先從對方的伺服器（也就是網址，像是 https://tigercosmos.github.io)下載網頁的原始碼，網頁原始碼通常會有很多檔案，但最簡單來說就是 html 、 js 、 css，下載完之後，瀏覽器會解析原始碼生成 dom tree、rule tree 和 rendering tree。最後把 layout 渲染在你所看到的螢幕畫面。
有點玄？ 我們仔細來分析。
瀏覽器首先向你在上面搜尋欄位輸入的網址（URL）提出請求，對方伺服器就會把第一份檔案 index.html 傳給你。這邊要說一下伺服器原理，當你輸入網址的時候，伺服器收到訊息說有人向他要檔案，但是這時候伺服器只會給你一個「最原始的 html」，這跟網頁的形成架構有關係，因為一個網頁是由第一個 html 去連結更多的 html 、 js  、 css。當下載完 index.hmtl 之後，瀏覽器會根據這份文件去把其他檔案，以及其他檔案連結的更多檔案通通下載下來。
雖然說網路速度影響這步驟很多，但別小看這步驟，如何下載也是有學問的，比方說你要是能提早知道該下載，那不就變快了嗎？這部分還牽扯到網站的優化以及 HTTP 協定，甚至更多細節。
網頁原始碼中，我們把 html 稱之為 DOM tree，而 css 可以稱為 rule tree，兩者結合起來稱為 render tree。 DOM 可以想像成網頁中的一塊一塊元素，rule 則是賦予一塊一塊元素形狀、大小、顏色等等，因為靠這前兩者的結合我們可以把畫面弄出來，進而可以渲染，所以叫 render tree。
而 js 的功能則是去變化 DOM tree 和 rule tree，並且是「事後改變」，比方說按按鈕之後增加元素，送出資料改變畫面部分內容之類的。
在前一個步驟解析完之後，瀏覽器就知道這個網站的 tree 長怎樣，計算完每個 tree 節點的位子和大小形狀顏色，進而可以依照 render tree 順序把網站畫出來。網頁的元素是照順序排列，從左到右，從上到下，任一元素變化都會造成其他元素移位，就像是搭捷運人擠人那樣，這種情況稱為 reflow。而當 render tree 有變化時候，layout 便會被從新計算，進而重新 render(reflow)。
解析和渲染可以說是瀏覽器最最關鍵的部分，效能好不好，速度快不快基本上就靠這邊的技術了，而之後也會針對這幾個主題詳細討論。今天就到這邊囉～大家明天見！
關於作者
劉安齊，軟體工程師，熱愛寫程式，更喜歡推廣程式讓更多人學會",,"['Why', 'What', 'How']","['下載', '解析', 'Layout ＆ Render']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191362,AI&MachineLearning,0,讓我們一起來見見歐美語音助理界的當紅炸子雞-Alexa吧!系列,8,[Day8]錨定語音偵測與雙連音片段,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1513033767000000000,560,"當很多人在同一個房間裡，Alexa需要弄清楚到底誰在說話。一開始比較簡單，當某個使用者說一句喚醒詞""Alexa"" Echo對應方向的麥克風就會開啟，並對Alexa說""播放爵士音樂""，而在這之後，在使用者身旁的人們可能持續不斷的跟使用者交談，那Alexa到底要如何辨別出到底是誰呼喚她的呢?

這個問題的解決方案來自2016年的一份論文<錨定語音偵測>(Anchored Speech Detection)
一開始Echo得到喚醒詞""Alexa""，並使用一個遞迴神經網路RNN(RNN是為了對序列數據進行建模而產生的)從中擷取一個錨定嵌入(Anchor Embedding)， 這代表喚醒詞裡包含語音特徵。接下來，用另一個不同的RNN，從後續要求敘述中擷取語音特徵，基於此得出一個端點決策，這就是Amazon解決雞尾酒派對難題的方法。
語音合成的步驟一般包括

Alexa擁有連續的語音合成。Amazon的專案團隊錄製幾千小時的人類自然發音聲訊，然後得其切割成非常小的片段，由此生成一個資料程式庫。這些切割片段稱為”雙連音片段”。雙連音由一個音素的後半段和後一個音素的前半段組成。最終把語音整合起來時，聲音聽起來的效果就比較好。
建立這個資料程式庫要高度細緻，並且需保證整個資料程式庫裡片段的一致性。另外一個重要環節是演算法方面，如何選擇最佳片段串列結合在一起形成最終的波形。一開始就要用清楚目標函數為何，來確保得到最適的""雙連音片段""以及如何從龐大的資料庫蒐集到此片段。比如說把這些片段標籤上屬性，分別是音高(Pitch)長度(duration)和密度(intensity)我們也要用RNN為這些特徵找到目標值。


(本文為擷取TechNews雞尾酒派對部分和雙連音來為大家做分享，請詳以下資料來源)
資料來源: TechNews, Association of Technology and Innovation",,,"['雞尾酒派對問題', '雙連音片段:']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191280,自我挑戰組,0,蚵蚵攻城記系列,1,[Day01]生蚵人想當工程師,azer19890427,https://ithelp.ithome.com.tw/users/20107340/ironman,1513033406000000000,601,"我是一個生科系及藥理研究所畢業的學生
現在在生技公司當一個技術員
用右手大拇指按微量吸管幾乎是我每天的工作內容

雖然一直想著想要離開生科產業
卻一直沒有那個勇氣跳出來
認識了一些工程師的朋友
得到了他們的幫助
是一個非常認真的mentor
幫我設計了一套的課程
開始了這個成為一個前端工程師的計畫
希望我最後成功跳出蚵架
這裡大概會介紹我剛開始架設環境
以及學習HTML、CSS及JavaScript一些紀錄
架設環境
安裝Gulp
HTML
我所認識的tag
CSS
Less
水平&垂直置中
Dummy Image
第一個切版練習
JavaScript
邏輯控制
Data types
物件
Arrays
JSON
Jquery selector & click & hover
Plugin
Module
大guy 4 醬",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191366,自我挑戰組,1,30天的切版日記系列,8,Day8:做個DatePicker(二)-數據,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1513032760000000000,569,"加入日曆數據的 js
data.js (寫了一大堆註解)
套到頁面的 main.js
*本日心得 ：month+1 -1 要弄清楚，date 、 data一直狂拼錯覺得累
一樣放在 這裡",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191348,自我挑戰組,0,ArasPLM開發練功30天系列,8,[Day8]Workflow-PathPre/PostMethod,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1513032538000000000,553,"介紹一下Workflow一個不常用到的事件---Path Method
Path Method分為Previous和Post，其this物件皆為Activity，可利用上一篇的做法取得表單物件，但什麼時候會用到這兩個事件呢?

一般來說，我經常會直覺地將Method寫進Workflow OnActivate中，也就是當節點被啟動的時候進行驗證檢查，OnClose時可以新增或修改資料。
以上的情境通常是單一Path的狀況，若是像下圖這樣呢?

在使用者簽審時，可能會具有兩種簽審動作，最後會指向同一工作節點，但是在工作節點啟動的事件時，並無法曉得從哪一條路走過來的。
如果需要寫一支程式判斷使用者簽審動作，要做不同的內容檢查，一種是放在OnVote事件寫在一起，另一種就是把邏輯拆分兩半放在Path上。
當Workflow OnVote時，代表送出簽審的動作，此時紀錄Path的名稱，因此可以用下列方式讀取",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191153,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,3,[III]用CodeIgniter的30天-靜態頁面實作,qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1513032445000000000,568,"第一個練習是靜態的頁面
先假設我們輸入一串網址
我們的網站會怎麼解讀這串呢？
首先會呼叫 member 這個 controller
這個 controller 裡面有個 method 叫做 kickass
那這個 method 怎麼執行呢？
我們傳入一個參數叫做 alex87 來執行剛剛的 method
照著官方範例新建一隻檔案
application/controllers/Pages.php
你創建了一個類別名為 pages，並且有一個 view 方法，接受一個參數名為 $page 。這個 pages 類別繼承了 CI_Controller 類別。 代表這個新的 pages 類別可以存取在 CI_Controller 類別（system/core/Controller.php）中定義的方法以及變數。
接下來就是建立 view 了
application/views/templates/header.php
application/views/templates/footer.php
上面兩個是模板，每個網頁都會載入的那種，所以放在 templates 資料夾裡面
接下來新增兩個內容頁面
application/views/pages/home.php
application/views/pages/about.php
裡面就亂打一些字就好
現在基本頁面都有啦，但是程式不知道要怎麼運作
該來教教 controller 怎麼做人了
修改剛剛的 Pages.php 的 controller 成下面的樣子
做到這邊當你進入
[你的網址]index.php/pages/view
[你的網址]index.php/pages/view/about
你會看到剛剛的兩個頁面，還有一開始寫的 header 和 footer
太神啦
更神的是
名字可以自己取耶 路由規則可以自己寫耶
什麼是路由規則呢，就是資訊流的導向規則
我們打開
application/config/routes.php
把全部註解掉，並在最下面加上
CodeIgniter 由上而下讀取這個路由規則，並且將請求導向第一個符合的規則
每一個左側規則都是正則表達式，對應到右側由 ** / ** 分隔的控制器與方法。
當一個請求進來，會找出第一個符合的規則並做導向呼叫其控制器與方法
如果有包含參數也會一併傳遞。
第二條規則使用了萬用字串 (:any)，它將會符合任何的請求。並將參數傳送給 pages 類別中的 view() 方法。
現在，訪問
[你的網址]index.php/about
是不是被正確的導到 pages 控制器中的 view() 方法呢？太神啦！
現在我們成功建立第一個 MVC..目前還沒 M 的網頁了
明天來細細說明剛剛到底幹了什麼事情吧",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191360,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,8,[Round8](佔位先)番外篇-DIY「禮物」,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1513032289000000000,559,"本篇先留位置與上一篇凑一起，待有空採買道具時再一同補上製作文。
經由上一篇的「番外篇-桌遊「禮物」之研究」可以發現道具十分簡單，
兩個主要道具的材料為
分數牌:  33 張，號碼為3-35，大小5.7x9cm
籌碼: 55個，大小未知，能一手藏住的為佳",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191364,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,8,ES6,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1513032278000000000,547,"功能、畫面和操作方式和客戶確定後，終於要進入開發階段了！聽說現在 React 正夯，這個線上相簿的功能不會太複雜，客戶也沒有限制使用的技術，我們就拿 React 來小試一下牛刀。
在這之前，我們先學學 JavaScript ES6 的新語法。ES6 是 JavaScript 的新規範，更新了一些語法，寫起來更順利。在這個線上相簿裡我們會用到幾種，在這裡介紹一下。
二者和 var 一樣是用來宣告變數。
const 宣告後變數則不可改變，但如果是 array 或 object 的話，可以改變裡面的子元素。
let 的用法和 var 差不多。
這二個宣告和var最大的差別在，var是 function-level，如果變數宣告是在迴圈裡的話，由於不是在function內，會溢出到全域變數，或是被全域變數影響。為了不要溢出，工程師會使用到IIFE。
const & let 則是 block-level，只要被curly braces {} 包圍住，就不會溢出到外面。",,"['const & let', 'Arrow function']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191070,自我挑戰組,0,iflen(learning.python)==30:系列,8,Day8-String-stringprefix,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1513030799000000000,538,"'b' 或 'B'開頭的表示法產生的是bytes type而非str type且僅能包含ASCII的字元。
'r' 或 'R'開頭的表示法稱作raw string，特性是看到反斜號()並不會做特別處理。
'u'開頭的表示法為unicode legacy literal。
目前不曉得可以用在甚麼地方、怎麼用以及有什麼特性與好處",,['參考'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191345,ModernWeb,2,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,9,不只是瀏覽器！JavaScript征服世界的第一步-Node.js(Day8),"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1513030760000000000,607,"我們終於進入 Node.js 這個主題了，真是令人興奮
Node.js 近幾年有得到許多關注，對於一般人的認知他是一種後端「語言」或是「框架」
但是事實上，他這兩個都不算
Node.js 基本上就是，讓你可以在後端也寫 JavaScript 的一堆函式庫

如果有寫過一點 JavaScript 的話
對於 JavaScript 的印象應該是一種可以跑在「瀏覽器」這個特定環境的小語言(現在已經不小了)

其實在定位上，他早期比較接近 Lua (一種很適合寫各種遊戲插件的腳本語言)

現在問題來了
既然 JavaScript 也可以在後端執行？
那是不是 Python, Java, C 也可以寫前端呢？
想要知道這點，我們就要了解 JavaScript，身為一門「標準化程式語言」的身份

要怎麼判斷一門程式語言有沒有標準化
一種方式，就是上網搜尋，你有沒有辦法去「下載」到他
有些語言，像是 Python 或 Java
你可以明確地找到某個載點
像是 Download Python 或 Install Java

但是像 C, C++, JavaScript
你卻不會看到有載點叫做「把 JavaScript 安裝進你的主機」
原因是，像是 Python, Java 這兩門語言
都有背後的核心開發團隊，他們會負責寫編譯器、直譯器
而這些團隊可能是大公司或是某些社群
而一門語言的走向，幾乎完全被這個核心團隊所主導
但是有些語言，因為他們一開始的特性可能就是「要廣為使用」
他們會使用另一種方式，「只設計程式的語法」
一般來說，我們指的 Java, Python
除了像是他們的 public static void class in 這些語法
我們還會把他的執行環境也包含進去
像是我們所說的「安裝 Java」或是「寫 Java」
其實是下載 JVM 這個引擎(執行環境後)
把你使用 Java 語法的文字檔丟進去給他執行
但是像是跟 JavaScript 相近的標準化語言
他們當初在設計時，只會推出所謂的「規範」(你可以把它想成規格書、是很抽象的東西)
舉例來說，JavaScript 所使用的規範(規格書)叫做 ECMAScript
我們常聽到的 「ES6」，就是在 2015 年推出的 ECMAScript 第六版
其中，這些規格書的內容都會寫的很抽象
舉例來說，像是 ES6 其中一段內容可能接近這樣
在 ECMAScript 定完後，他們該做什麼呢？
答案是：「ECMA 他們什麼都不幹」
原因是，為了讓 JavaScript 能夠廣為流傳
他們會特別只規定 JavaScript 該有哪些特性，或是關鍵字
至於寫出一套可以「執行 JavaScript」語法的引擎(執行環境)
就交由世界上的各個開發者來開發了了！

只要有人寫出一種新的 JavaScript 執行環境
我們就可以說，「他是 JavaScript 的一種實作」
你應該常常聽到一個名詞，叫做 runtime
就是這裡實作、執行環境的意思！
瀏覽器端
在瀏覽器端，各家公司都有發展自己的 JavaScript Runtime(參考資料)
舉例來說，像是 Google 的 V8，就是專門用來給 Chrome 使用的 JavaScript 引擎
他的底層是使用 C++ 寫的
而像是 SpiderMonkey, JavaScriptCore, Chakra
分別是由 Mozilla、蘋果、微軟為他們自己的 Firefox, Safari, Edge 所開發的瀏覽器實作
伺服器端
當然，早在 Node.js 之前，其實就有其他 Project 去實作 JavaScript 了！
像是 Rhino, Nashorn，就是使用 JVM 這個執行環境去跑你的 JavaScript

而我們今天的主角，Node.js
是當初有個開發者 Ryan Dahl

他那時候想要寫一個當時覺得很酷炫的功能 - 「上傳進度條」
(因為那時候連 ajax 才剛開始有)
他發現現有的 Ruby, PHP，本身開發非同步的伺服器行為表現都很糟糕
早期的 Ruby, PHP，他們幾乎沒有任何的並行
他們就算開不同的執行緒，在接收一個請求後
都會卡著直到回傳結束，非常的沒有效率
那時候他想解決這些並行的方式
就是使用 JavaScript 初期就有的 Event Loop 和 單線程的的特性
來看是否可行
Ryan Dahl 在 2009 年的 JSConf EU 展示了使用 C/C++ 來各種伺服器功能
像是 HTTP，以及 fs(讀寫檔案) 的函式庫
並成功 Demo 了使用 Node 寫的一個 IRC 伺服器
之後 Node 有了許多生態系，包含我們後續要介紹的 NPM 和 CommonJS

藉由介紹「規範」，希望可以讓大家更了解不同程式語言的設計
像是 C/C++ 同時也有像是 C99, C++2017 這樣的規格
他們一樣是只發表抽象的規範
而保留不同編譯器開發團隊很大的自由去決定該怎麼實作
(這也是有個名詞「undefined behavior」要命的地方，像是 C 因為他接近電腦底層，一點不確定的地方都最好不要有，可是有些寫法卻沒有完全定義在規格書裡「應該編譯出來長怎樣」，踩到這樣的雷通常很痛苦)
Node.js 基本上只是使用了 Google V8 引擎，並且補足了關於網路、檔案系統的函式庫
所開發出的另一套 JavaScript 實作
在明天，我們將會介紹現在發展最活躍的套件管理器「NPM」
他不只提供了一種可管理的方式來處理你的各種依賴(Dependency)
他的安裝方式、package.json、使用的模組化方式
深深影響了整個 JavaScript 生態系，甚至是其他苦於套件管理的程式語言
我們明天見！","['前言', '什麼是 Node.js', '為什麼 JavaScript 也可以在後端執行', '什麼是標準化程式語言', '為什麼不能下載 JavaScript', '但是 JavaSript ?', '什麼是 runtime、實作', '常見的 JavaScript 實作', 'Node.js', '結果', '明天']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191361,ModernWeb,0,PHPlaravel的邂逅系列,8,DAY08-Controller介紹PART1,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1513030598000000000,543,"controller的檔案會在app/Http/Controllers底下，以後新增的controller都可以在這邊找到。controller能夠將相關的請求處理邏輯組成一個單獨的類別，方便我們調用裡面的東西。
新增一個新的controller指令，接著我們就可以在controller裡面寫點東西。
下面這個指令的controller內容全部要自己寫。
而下面這個指令可以幫你寫好預設CRUD，直接在function裡面寫程式即可。
有CRUD的內容，是不是方便很多啊，但有些功能不用CRUD全部都要寫，你就可以使用剛介紹的第一個指令，寫你想要的function就可以了。
接著我們來寫點程式碼，來讓route可以接上controller，首先先到route/web.php裡面，上面我是新增一個最新消息(NewsController)的controller，那就先來試試看顯示最新消息的首頁吧
你會看到空白的頁面，因為還沒在index function裡面寫東西。
剩下的內容明天繼續～",['DAY08-Controller介紹PART 1'],,,,"['step.1 新增一個最新消息的路由', 'step.2 要在專案的目錄底下執行唷', 'step.3 找到index的位置，來回傳字串試試看，頁面重新整理看看頁面是不是有出現這是最新消息的首頁，有的話就是成功囉']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191354,自我挑戰組,0,迷路還是繼續往前走的菜鳥工程師日常系列,7,[Day07]不負責任的Git教學02,overflow,https://ithelp.ithome.com.tw/users/20107577/ironman,1513030243000000000,558,"先吶喊一下～啊～我覺得我文章難產了，接下來會有點跳的講解XD，可能會很難懂 
今天我們就來介紹幾個重要的功能吧！我們直接使用visual studio code進行，Git的教學，我們就直接示範操作，不教你一堆指令，為什麼？老實說我一開始接觸的時候我也是透過介面操作，反正在職場上先會用比較重要，我也是後面才漸漸領悟其中的道理，雖然這樣的學習法不太好，所以跟給你魚吃不如教你釣魚，我是先相反，直接給魚吃，如果怕自己餓死了！自然會自己去學，當然如果你自己沒有這種自動自發的領悟，那......領悟了就會明白了XD
昨天忘了講解Git安裝完後，我們必須設定Git的使用者設定，所以請打開cmd(命令提示字元)，請先把你的資訊填寫完畢，以免後面會發生不如預期的狀況，這一步驟就是在你push到github的時候，他要知道你是誰，所以必須輸入
昨天已經clone到本機端了，接著我們直接把資料夾拖進去 Vscode 裡面，並直接打開 README.md檔案
上面打得好亂啊，我果然沒有教學的天分
上面你已經學會Git的clone、push、checkout、commit、branch，你會從遠端數據庫把專案下載下來，你也會新增分支，切換分支，並commit後，推送到遠端數據庫了，會這樣其實就差不多了
所以面試官問「你會不會Git」，可以說「我會」，「那你會什麼？」，「你會建分支，切分支，commit，從遠端數據庫拉專案」，面試官就會說「嗯！也差不多這樣啦」，就矇過去了（誤，畢竟常用的也就這些，有些不常用的自己可以練習一次，等到真的需要用到再去查也不遲，第一次有狀況我們菜鳥都馬很緊張，就直接求救主管XD，主管一定會教你（誤",,"['push、commit', 'checkout、branch']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191347,SoftwareDevelopment,0,每天Racket3分鐘系列,8,"(list'day-07""組織你的資料—Racket基礎資料結構：Pair、List與Vector"")",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1513030131000000000,513,"Lisp 的全名，稱為 List Processor，顧名思義，在 Lisp 裡頭，最常見的資料結構就是 List。其實在 s 表示式裡頭，整個語言都是用 List 結構組成：(element1 element2 element3)。因此，在 Lisp 以及 s 表示式家族語言裡頭，都具有著這種稱為語法與資料的 homoiconicity 的特性。（台灣沒有適切翻譯，對岸則稱「同像性」）因此，處理 List，也是開發 Racket 過程中，極為頻繁且重要的事情。
在 Racket 裡頭，List 怎麼建立呢？你或許會想到，Python 裡頭，List 就是一對 [] 所包起來的東西，同樣的，在 Racket 裡頭，List 就是一對 () 所包起來的東西。但因為要與語法區別，所以前面加上單引號，如下：
除此之外，你也可以直接用 list 函式，包住所有的元素：
若我們要取這個 List 的第一個元素，可以使用 car：
而要取剩餘的元素，可以使用 cdr：
既然是 List，我們可不可以把東西加進去呢？像 (list-add abc ""d"") 那樣？在 Lisp 家族裡頭的 List 基本上是不可變的（immutable），亦即語言層面並不鼓勵你對這個值進行任何的變換操作，如果要加上任何一個東西，建議是建立一個新的 List：
append 的操作，是對多個 List 進行結合，因此後頭接的，也應該把它包進一個 List 的結構中才行。但如果你不小心打了：
會看到：
怎麼有個 . 呢？
要回答上面的問題，我們要回到那時代。我們已經說到，程式語言的前人們，使用 s 表示式創造了 Lisp 這樣的一個語言。然而 s 表示式，它不只對應到了語法樹，它其實是二元樹的一種表達方式：

於是，他們在節點之間，給一個點 .，來表達兩個一對的資料組。因此我們在今日，能用 cons，來建構一個 Pair：
然而，要表達上述那棵樹，我們要有多少節點呢？
當節點多時，資料結構的表示會變得很複雜，因此後來便簡化成兩條原則：
而 Pair 也同樣具有 car 與 cdr 的操作，並且 cdr 取到的不是一個 Collection，而是單一個元素：
還記得上面第二個簡化規則嗎？它有什麼作用呢？我們在 Racket 可以用這個方式，來建立一個 List：
這代表著，其實 Pair 是 List 的基礎結構，而每個 List 的最後，都存在著一個 '()。因此，在 Racket 裡頭，我們可以用這個方式來做一個簡單的 map 操作：
其實，我一開始在學時，car 與 cdr 這三個字，看起來很簡單，但我覺得很難記。所幸，Racket 之所以是 Racket，在於它有相當大量的開發者與資源，因此這兩個字，也被轉變成比較好記的 first 與 rest。因此，上述的 map 也可以這樣寫：
程式碼就親切多了！此外，Racket 可以用 car 與 cdr 的合併呼叫，例如：
當然，如果你想直接取第二個，用 list-ref 就好了啦：
但，你若對資料結構有些概念，就會知道 List 的好處是可以動態擴充，而缺點也在於即使你呼叫 list-ref ，它也是線性尋訪，因此是一個一個 car 進去：
這時你或許會想問，Racket 有沒有像陣列一樣，靜態配置的一種資料結構呢？
答案是肯定的，它叫 Vector，在很早期的 Java 裡，也有個叫 Vector 的容器呢！
Vector 的字面表示就與 List 有所區隔，使用 #( 來表示：
當然，Vector 也有用函式呼叫來建置的方式：
只是，這點很重要： 在 Racket 裡頭，其實沒有像 C/Java/C# 家族那種 type array 的表示，例如 int[] 。而我們透過上述的方式所建立的 Vector 也如前所述，是一種 immutable 的資料結構，如果你要建立一個空的 Vector，可以塞值進去，可以這麼做：
這樣會建立固定 10 個，每個皆為 0 的 mutable Vector，而 0 這參數可以省略。因此，要設定某個位置的值，可以使用：",,"['1. Lisp 之所以是 Lisp', '2. 雙雙對對', '3. Racket 之所以是 Racket', '4. 別忘了 Vector']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191344,自我挑戰組,0,用laravel尻出自己形狀的linebot，還要撐三十天！系列,6,【第六天】爬蟲聽起來很強欸！那是啥？,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1513029028000000000,581,"時間過很快，一下子就到第六天了！這２天看到有人願意訂閱這系列文章讓我很是感動！
希望在這跌跌撞撞的分享中能多少幫助大家！
好了，回顧前五天我們所做的，已經能夠順利把LINE的訊息推播到手機了！接下來我們要做的就是去嘗試寫出一隻簡易爬蟲，把我們想要接收的資訊爬下來再推送到手機上，最後再設定個排程我們的小目標就達成了！
很明顯的可能會有快２０天的文章不知道要幹嘛，歡迎大家提提想法看想做些什麼！
回到今天的重點，爬蟲！
什麼是爬蟲咧？其實我也沒寫過欸，所以我們一起來估狗看看吧！ 維基
快速了解吸收一下，簡單來說就是把網頁(html)給摘下來，接著透過程式去篩選出對我來說有意義的資訊！
當然還有更厲害更高竿的做法就是在觀察當前頁面的資訊後給予適當的header或是先打A拿到資訊後再打B的各種爬蟲！很深奧吧！
這邊有看到也是同樣參加鐵人賽的選手文章，我覺得內容很紮實詳細，大家可以去看看～ 連結
那所以說這次的需求我們是要做很麻煩的爬蟲嗎？不！當然是選最簡單的開始啊！
如果以圖片來說的話！

從右至左都是鳴人，但一個是還在拿油漆畫三代目雕像的屁孩！一個是可以屌打夜輝的大神！
學習是急不來的！用心體悟心靈祥和比較重要！ /目\
首先第一步，要站在巨人的肩膀上！所以我們來找套件吧！
guzzlehttp/guzzle太大聲（？）就不多說了，
那為什麼爬蟲會選symfony/dom-crawler咧？其實當下也沒特別多想，只是看它的測試好像用起來挺方便的，所以就是它了！
而且而且！

所以就是它了別怕！
用起來也一點都不麻煩，
我們可以很直覺的就寫出來這些！
CrawlerService.php
CrawlerServiceTest.php
但接下來就要看範例(測試)和文件了！ 文件
呃...雖然前幾天假日有寫了一些，但暫時還想不到該怎麼解釋類似以下的東西。
大家可以先看看這個文件 中文範例
今天時間差不多啦！剩下的我們明天完成！
（趕快去找相關資料來補腦！）",['【第六天】爬蟲聽起來很強欸！那是啥？'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191352,DataTechnology,1,Python學習筆記系列,8,[Day8]Lists串列,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1513028875000000000,541,"以下我們介紹如何使用List

索引操作和切片操作

Python的List很彈性，沒有固定數量，亦沒有最大數量的限制


Python也有巢狀結構，所以可以把list放在另一個list裡面
串列綜合運算讓我們可以用快速建構一個list，常見的應用是基於一個 list 或可列舉物件，將每一個元素經過某個運算的結果串接起來成為一個新的 list

資料來源: Go from zero to hero in Python",,,['List是一種有序列的資料結構，list中的每個物件用逗號區隔，並用中括號將元素包起來。'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191355,ModernWeb,3,從無到有，打造一個漂亮乾淨俐落的RESTfulAPI系列,1,[Day-1]從無到有，打造一個漂亮乾淨俐落的RESTfulAPI,10程式中,https://ithelp.ithome.com.tw/users/20107247/ironman,1513028296000000000,611,"哈囉大家好～今年是我第一次參與鐵人賽活動，想藉由這次機會，將我在這一年所學貢獻出來，和大家一起學習，此外為何我會選擇這個主題呢？主要原因是在工作實習部分負責 Node.js API 的撰寫，在這一年中學習到許多新知所以想就由這次鐵人賽寫出一系列網頁後端教學，帶給想進入網頁後端但不知如何下手的人，在 30 天的文章中我會從最基礎的編輯器推薦、語言選擇、環境建置、框架介紹、自動化部署、資料庫架設、到一個簡單的部落格貼文 API 範例實作，若時間允許的話還會介紹Google Cloud Platform 伺服器的架設，內容看似很多很豐富但這也是給我自己一個挑戰，最後希望帶給各位讀著滿滿的 大 收 穫！
需要準備的工具有 Visual Studio Code 當然你也可以用你熟悉的開發環境例如 ： Sublime 、 Atom、Vim。
本系列文章使用了以下的風格作為撰寫風格:
Airbnb 開發團隊在撰寫 JavaScript 部分規定了大量的寫作風格與規範並開源給各位使用，所以作者在開發上也採取這套規範。
小駝峰式命名法（lower camel case）：
第一個單字以小寫字母開始，第二個單字的首字母大寫，例如：firstName、lastName。
這系列文章同時會發布在我的部落格
由於文章都是趁下班時間寫，所以內容難免有錯別字，如果對於文中有任何疑慮或有錯誤也歡迎指正，互相學習～
文章同時發表於：https://andy6804tw.github.io/2017/12/11/it2017-intro/",['從無到有，打造一個漂亮乾淨俐落的 RESTful API'],"['前言', '此系列文章適合誰?', '系列文章預計內容', '開發環境', '寫作格式', '歡迎交流']",,,"['1. 採 Airbnb 寫作風格', '2. 駝峰式命名法']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191356,ModernWeb,0,TypeScript-初學之路系列,5,Day05-TypeScriptWithGulp,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1513028092000000000,513,"此篇是使用 TypeScript 和 Gulp 並且利用 Gulp 的 pipeline增加 Browserify
uglify 或 watchify 以及 Babelify等等功能
在此範例中建立一個資料夾  proj 但是你可以建立一個你希望的名字的資料夾
先簡單建立資料結構
在 src 中建立一個新的 main.ts
在 proj 中建立一個 tsconfig.json
建立一個 gulpfile.js
建立一個新的檔案 src/greet.ts
然後再修改 src/main.ts
最後再修改 tsconfig.json 將 src/greet.ts 加入編譯
然後就可以看到編譯後執行的結果
Note: 雖然我們使用 ES2015 但是 TypeScript 使用 commonJS 模組，但是你也可以在 options 中設定 module 來改變它
我們開始寫前端的程式
我們希望可以把所有 modules 打包到一個 Javascript 檔案
而這些事情就是 browserify 所做的事情，而這會使用到 CommonJS 模組，而這也正好是 TypeScript 預設使用的，也就是我們可以在 TypeScript 直接使用 browserify
先安裝 browserify, tsify, vinyl-source-stream
tsify 是 browserify 的 plugin 做的事情就像是 gulp-typescript 一樣，而vinyl-source-stream 則是提供一種方便我們了解的檔案輸出格式
在 src 中建立一個 index.html 的檔案
然後修改 main.ts
接著再修改 gulpfile.js
增加一個 copy-html 的task 並且將其加入在 default 的 task中，也就是代表當 default執行的時候會先執行 copy-html 並且也修改 default 的 function 加入呼叫 Browserify 和 tsify 的 plugin，將 tsify 取代 gulp-typescript 也丟入一些參數在 Browserify 之中, 在 bundle 之後 再利用 vinyl-source-stream 輸出檔案 bundle.js
然後我們可以執行之後再用瀏覽器開啟 dist/index.html來觀看結果
Note: 設定 debug: true 是因為 在打包成為一個檔案之後， SourceMap 可以對照你打包後的檔案，當你發生錯誤的時候，就可以找到相關錯誤位置，提高 debug 的效率
現在我們已經有 tsify, browserify 我們還可以再加入一些套件
Watcherify 利用 gulp 啟動，可以保證程式持續執行，並且在修改後同步修改重啟，你的瀏覽器也可以立即 refresh 觀看結果
Babel 是一個大型並且彈性的編譯 Lib 可以將 ES2015 轉回 ES5 和 ES3，可以自行增加擴充編譯套件，而這些是 typescript 沒有支援的
Uglify 則是將你的程式最小化，讓你下載的時間可以大大減少下載的時間
安裝 watchify和 gulp-util
再修改 gulpfile.js
gulpfile.js做了三個改變
綜合以上 1, 2 的步驟我們將 browserify 移出了 default task 放到了 function bundle裡然後透過 監聽 update 的 Event 來隨時重新編譯程式
而 3 則是會列印出過程的訊息方便我們開發程式的時候查閱
然後我們開始啟動則會看到下方的訊息
並且當你修改 main.ts 時會自動重新編譯
也就是當你重新 refresh 網頁的時候
就可以看到最新的更新狀態
因為 Uglify 會打亂你的程式碼
所以需要安裝 vinyl-buffer 和 gulp-sourcemaps 讓 sourcemaps 持續動作
gulpfile.js修改為
`Note: Uglify 只需要做一次
buffer和 sourcemaps 會產生一個獨立的檔案 bundle.map.js
你也可以確認 bundle.js 中的程式是不是已經最小化了`",['Gulp'],['Minimal project'],"['初始化', '安裝相關的套件', 'Example']","['測試 App', '增加模組', '執行', 'Browserify', 'watchify, Babel and Uglify', 'Uglify']",['Watcher'],,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191236,ModernWeb,0,初探前端之路-React-由生到死的踩地雷系列,2,組件間通訊this.statethis.propsrefs,Luis-Chen,https://ithelp.ithome.com.tw/users/20103556/ironman,1513028001000000000,527,"當我們初入React後，最容易遇到的問題就是組件間的通訊，算是第一大魔王拉，目前也只能跌跌撞撞慢慢找出攻略法。
目前看到寫比較完整的文章
參考
這是React的Component 的變數設定，大概就是說
state 是Component內部的變數
props 是外部傳進Component的變數
refs 是子組件傳給父組件時用的
常用的屬性：props, state, refs
state 和 props 同樣儲存資料，有什麼差別？
下面大概寫一下react 正規class 格式：
會在construtor(props){}裡面定義this.state 這個Component 要用到的變數
當然也有一種寫法state={""apple"" : """" }這種比較精簡的寫法，
而下面的 就是 class App 的子組件 如果我們要傳值給
value={this.state.apple}給他，而如果要接收變數格式大概像這樣：
可以先用console.log 查一下有沒有接收到值，
這大概是基本的state、props 觀念
ＯＫ 這就是重點，其實我們父子組件溝通通常沒什麼大問題，只要子組件不需要更新父組件傳過來的值的話
從我開始學到現在有做過幾種作法，
參考，這大概就是說 子組件逆回傳值給父組件，這個用法現在開始捨去掉了，這不符合React的撰寫風格
一般來說，React 設計通常都是從上到下的傳值，不可以逆推
格式：
而父組件大概就是用this.Input.value收值Input 就是refs=""Input""
這是我目前的寫法，
只要先把要溝通的變數先寫好，再用props去接收
更新的話我看過有一種寫法以前也試過
直接使用props.value 然後用this.setState({value:this.props.value})去更新
這寫法比較怪，怪再說this.setState是用來更新this.state 而這個寫法好像就是說，我直接在子組件更新父組件的this.state.value(在父組件內value是.state)
另一種寫法是上面文章的作法
跟上一個寫法一樣觀念：只是setState是在父子間處理，而傳處理父值得function給子組件
子組件：
就直接把值傳進function 自然就更新了","['前言', 'state、props、refs', 'Example:', '父子組件間的通訊']","['Refs', '先在父組件設變數']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191350,ModernWeb,0,TypeScript初學之路系列,8,Day08-Generic(上),TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1513027986000000000,499,"或是我們用 any 來宣告型態
使用 any 導致這個函式可以接受任何類型的 arg 參數，但是這樣會錯失一些訊息
我們需要一種方式讓 input 和 output 類型是一樣的
藉由前面輸入的 T 協助接到 input 也希望和 response 是相同的，是相同的
若是我們希望取回 arg 的長度但是並沒有指明 arg 具有 .length 這個屬性
因為這個變量是任意類型，所以傳入的可能是字串或數字
那就沒有 length 這個屬性
我們可以先宣告陣列
現在 loggingIdentity 的輸入直是包含了 T 屬性的陣列
回傳的也是包含了 T 的陣列
也可以改寫成為
在函式忠宣告泛型的方式如下
也可以使用不同的名稱宣告，只要變數的數量吻合就可以了
也可以利用 signature 物件的方式來做宣告
上述範例可以利用 interface 來做宣告
藉由上述範例使用泛型來做宣告的話
就可以把這個參數的型態作為函式的輸入值
例如: Dictionary而不是單純的 Dictionary
泛型類別和泛型宣告方式是一樣的，利用 <> 在 class 後面
GenericNumber 很片面的 class，沒什麼去限制他使用 number 你可以使用字串或其他更複雜的物件
就像 interface 一樣
泛型類別只是確認你使用的是同一個型態
而什麼型態則不是他們限制的
在之前 類別中有提到
類別有分兩個部分 靜態與實例層
泛型類別只負責實例層 靜態層不能使用 泛型類別",['泛型'],"['泛型的 Hello world', '泛型 class', '泛型類別']",['使用泛型變數'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191349,ModernWeb,1,ZerotoherowithReact.js系列,5,【Day5React】render一個會動的React日曆,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1513027521000000000,582,"
日曆 DEMO
時間誠可貴，參加鐵人賽方得時間更加珍貴
我們可以直接把要呈現在 DOM 的內容直接寫在 ReactDOM.render() ，不過通常我們會在這個 function 外先做好所有 JavaScript 的邏輯，例如運算或從 API 取出資料等等，我們會先在外面處理完，再將要輸出的結果放到 ReactDOM.render() 裡。
一開始的寫法是將要 render 的內容放在 ReactDOM.render() 裡
而將要渲染的內容移至 ReactDOM.render() 外，則程式碼會這樣寫
記得這邊的 HTML 語法事實上是 JavaScript 語法，當你有兩個以上的元素，就必須把他們包在 <div></div>  否則 Babel 看不懂這個語法，無法轉譯導致出現 Inline Bable Script 的錯誤訊息。
為了使用 Javascript 來取得屬性的值，JSX 使用 {...} 來取值，所以把 new Date().toLocaleTimeString() 放到 {} 中，就可以順利在頁面上顯示時間。

以上是不會自動更新的時間，再手動 reload 頁面後才會看到新的時間。那麼，我們如何在不手動操作的情況下，讓頁面上的時間就像是一般的電子鐘一秒一秒更新？
我們只需要將
轉換成
設定我們要在每 1000 毫秒重跑一次  tick() 這個 function，如此一來 React 就會再次更新 DOM。一千毫秒也就是我們熟知的一秒鐘，因此就可以做出像時鐘一樣，秒數每秒更新的樣式了！
在會 render 出時間之後，我突然靈機一動，因此就做出這個有時間的日曆了，透過 JavaScript 的 Date().getDate() 可以抓取當天的日期；Date().getFullYear() 可以抓取「西元年」；Date().getMonth() 則可以抓到月份，不過比較特別的是，月份是從 0 作為起始點，所以這個月會顯示 「11」，我們只要手動在後面 +1 就可以順利取得當下的月份。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191317,ModernWeb,0,Nest.jsframework30天初探系列,8,Nestjsframework30天初探:Day08Guards,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1513025110000000000,556,"
Guard是一個帶有@Guard()裝飾器的類，Guard要去實作CanActivate介面。
Guard只做一件事情，就是擔任路由警衛，決定程式在收到HTTP請求後，是否要執行 route handler。 先前有介紹到Middleware，為何不使用Middleware作為路由警衛?因為Middleware只要有呼叫next()，必然會讓程式繼續執行下一個事件，所以不適合，角色權限的設計也會更顯麻煩。
注意:客戶發動請求的流程為 Request->Middleware->Guard->Pipe->route handler。
程式碼如下:
src/modules/Shared/Guards/roles.guard.ts
說明:我們先一睹Guard樣貌，後續會有較詳細的實作。
Guard跟Middleware和Pipe一樣可以作用在Method、Controller、Global。
說明:正常顯示。
說明:符合false的預期。
6.2 在Decorators資料夾新增roles.decorator.ts。
src/modules/Shared/Decorators/roles.decorator.ts
程式碼如下:
6.3 修改RolesGuard。
程式碼如下:
src/modules/Shared/Guards/roles.guard.ts
說明:請看註解。
6.4 UsersController做些小變化。
程式碼如下:
src/modules/Users
@UseGuards(RolesGuard)代表整個UsersController的方法都會去執行路由警衛機制，@Roles('xxx')代表只有該角色才能訪問，預期是http://localhost:3000/users 不能被訪問，但http://localhost:3000/users/1 可以被訪問。
6.5 打開Postman 對http://localhost:3000/users 發出GET請求，結果如下:

符合預期，因為getAllUsers方法帶有@Roles('admin')裝飾器，但Ted的role是general，所以被拒絕訪問。
6.6 打開Postman 對http://localhost:3000/users/1 發出GET請求，結果如下:

符合預期，因為getUser方法帶有@Roles('general')裝飾器，Ted的role是general，所以允許訪問。
以上大家已經知道怎麼實作Guard、Role，這可以讓我們更容易管理我們的route handler的訪問權限。
程式在github",,['Guards'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191043,自我挑戰組,0,Kaggle的解題挑戰系列,1,[Day01]Kaggle的解題挑戰-苦難的開始,BillLin1983,https://ithelp.ithome.com.tw/users/20103074/ironman,1513024951000000000,555,"今天已經11號了，本來計畫4號就要開始寫的，但當天早上就看到有人在PO文，就心想，我沒那麼閒丫，怎麼有空來跟那些人參一腳，不過重新整理心情之前，還是決定參賽了，主要是主要是想強迫學習這方面的知識，30篇應該是會寫完，但，另外有事可能就會跳過了吧，不知道這樣行不行XD。
Kaggle我個人覺得，有點類似Leetcode，是一個解題的網站，不同的點在於他是在解Data Mining, Machine Learning的題目，所以，最好是具有相關的背景會比較好，沒有的話可以到Coursandra網站上Machine Learning的課，我希望有空可以重新Review一次課程，也希望可以玩一下SMACK的Big Data架構，也希望可以學一下Python，喂，也太貪心了吧，不過，好家在這類的資源應該有很多了，計畫找一些資源，研讀一下，實作一下，寫一下心得，一天就過了
參考資料
想成為年薪 300 萬台幣的資料科學大師？一整年的武功秘籍自學清單都在這了！(Important)
coursera-Machine Learning(Important)
想成為一名戰鬥力超強數據分析師？讓公司程式白痴聽懂程式碼在幹嘛，保證你立刻成為最強人才
Scikit-Learn 教學：Python 與機器學習
大數據人工智慧人才晉級指南：從菜鳥到高手，四大階段必學資料庫",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191322,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,8,Phoenix起步走：ORM與Schema、Migrate,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1513023545000000000,556,"ORM 是現在動態網站架構中幾乎不可或缺的一部分
在Rails有 ActiveRecord、Laravel 是Eloquent，Django則是 QuerySet
而在Phoenix我們使用Ecto
在繼續深入之前，我們先介紹一下 ORM
這邊引用ihower的介紹：
ORM (Object-relational mapping ) 是一種對映射關聯式資料與物件資料的程式技術。物件導向和從數學理論發展出來的關聯式資料庫，有著顯著的區別，而 ORM 正是解決這個不匹配問題所產生的工具。它可以讓你使用物件導向語法來操作關聯式資料庫，非常容易使用、撰碼十分有效率，不需要撰寫繁瑣的SQL語法，同時也增加了程式碼維護性。
（不過Elixir並不是物件導向程式語言）
我在第三天介紹Laravel時也有提到過去的經驗
簡言之ORM是一種便捷強大的資料互動工具
壞處是你會漸漸忘記怎麼寫原生的SQL 查詢語法
一般來說，ORM產生的SQL語法會比你寫的更有效率
假設我們需要產生一個User的Model：
他會產生兩個檔案：user.ex與20171211072512_create_users.exs
前者是schema檔（同時也是Model），後者是migration檔
後面提示訊息提醒你別忘了執行migrate
我們來看看檔案的內容：
上面引入的相關的元件讓程式得以作用
中間顧名思義為schema
下半部changeset定義了model基本的結構與預設的資料驗證
你可以看到我們的user 已經有兩個欄位：name與email
這是因為產生時我們在後面加註name:string email:string
前面是欄位名稱，後面是欄位型態
因為資料型態預設是字串，所以後面的:string其實可以不用加
也就是
這樣有一模一樣的效果
migration則與rails大同小異：
timestamps()會自動產生inserted_at與updated_at兩個時間戳記
在資料新增或更新時自動更新
不需要的話也可以拿掉
實務上不會在新增時就把所有欄位都想清楚
在migrate之前直接修改檔案都是可以的
就算已經migrate，也可以rollback以後修改
切記：
修改已經migrate後的migration是不會生效的！
比較Rails相同目的的指令：
可以看到一樣產生了一個migration檔
一個同名的model，以及測試的檔案（但實務上會把自動產生test_unit關閉，因為都用rspec）
這邊有蠻多不同點可以與Rails做比較討論：
要討論時機不同的差異，首先我們要了解migrate的意涵：
migrate這個指令是把migration的內容實際作用到資料庫當中
在migrate之前，migration就像是一個計畫書
執行migrate以後，就會按照計劃書開始對資料庫動工
所以如果你在migration有bug，也會等到migrate的時候才會告訴你
從這個角度來看，如果我們將schema視為資料庫結構的寫照
理應在migrate之後才產生比較合理
在migrate之前產生的schema其實與migration無異
都只是我們的預期
但寫程式的我們必須接受一個現實：
預期與現實常常是有落差的
因此我認為Rails在migrate之後產生schema比較合理
從另外一個角度我想繼續談資料庫與程式碼之間的差異：
新手常常會有一個誤會
就是以為版本控制(git)會聯同資料庫結構一起被追蹤
比方說切換不同分支(Branch)或git pull最新版本
會連著資料庫結構一起變更，事實上不會
版本控制只能追蹤程式碼，與資料庫是兩回事
切換版本的時候如果想同時更新資料庫狀態
實務上的做法是先把當前版本的migration 還原(rollback)
切換後再migrate新的migration（假如有的話）
假如沒有按照程序做的話
可能會遇到一些奇奇怪怪的資料庫不一致的問題
要特別留意！
在Rails的情況下，migrate後的schema就是資料庫當前的結構
但在Phoenix卻是事實上與資料庫脫節的
這也是為何我認為Rails的處理較為合理的原因
先講結論，我覺得Phoenix這邊的處理我比較喜歡
一個專案動輒二三十個model，schema全寫在同一個檔案
查找上有些不方便
分散為同名的檔案確實方便管理多了
Phoenix將schema與model在同一個檔案做法
我目前還不確定是好是壞
可能要有更多開發經驗，感覺一下才能知曉
Rails是兩個部分分開
按照程式的常規習慣
不同的東西通常放在不同地方
會比較有利於查找
指令有些相同也有相異的部分
先講不同之處：
Rails的慣例是產生model時使用單數
如同上例我們使用user，會自動產生一個複數的table名稱users
程式中表示Class則是單數大寫User
Phoenix在創建Model（Phoenix稱為schema）時必須指定名稱
也就是上面提到的mix phx.gen.schema User users
前者會成為Class名稱，後者是table名稱
當然你也可以用完全無關的兩個字（但建議千萬不要這麼做）
建議遵循前者單數首字大寫；後者複數小寫的慣例
會比較愉快順利
相同之處也不少：
產生model時後面可以指定欄位，也可以略過
指定欄位時如果是String時，型態可以略過
也可以跳過Model，單純產生migration：
但Rails的migration名稱如果符合命名慣例會有一些神奇的魔法
這部分我不確定Phoenix有沒有
實務上都是產生後，直接編輯migration檔案比較多
如果想要查看所有的migration狀態，語法是：
想查看所有ecto指令，可以使用mix ecto：
一切的變更，都要等到migrate以後才會真正作用到資料庫
如同提示，他產生了一個名為users的table
我們可以用mix ecto.migrations來確認這件事
假如你後悔了，或是還想做一些修改，當然可以rollback
這個時候再查一次，就會看到：
唯一的migration狀態由up變為down
假如你要切換到另外一個分支，而那個分支中並沒有你當前的migration
最好要把那些migration都down下來，避免有奇怪的影響
反之當你切換或是pull一個最新版本時，裡面有新的migration
程式一般都會提醒你開啟server前先執行migrate
把那些資料庫變更都實現到你本地的資料庫
保持這些好習慣，就是新手與資深開發人員的差距唷！
後記：
躺在床上的時候想起有一種情境忘了講
起來趕快補上避免遺忘！
假如你沒有先把migration down下來
就算把它刪除，對資料庫的作用依然存在
刪除後如果查詢資料庫結構會看到
一片空白！
但事實上如果用iex下去查，schema還是存在的唷
這可能是Phoenix的一個Bug
因為我原本預期會跟Rails一樣
刪除後會顯示NO FILE，但同時還是up的唷！
事實上當你切換到沒有這個migration的分支
就本地端程式的視角，跟你刪除它是一樣的
反之，如果你是在down下來的情況下刪除migration檔
他就不會出現在清單上了","['Schema的不同', 'Migrate 操作']","['1. Schema產生時機', '2. 檔案數量', '3. 檔案內容', '4. 指令']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191343,ModernWeb,2,重新認識JavaScript系列,8,重新認識JavaScript:Day08運算式與運算子[3]:Boolean的真假判斷,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1513021771000000000,712,"運算子系列總算要來到最終篇了。
如同先前所說，礙於篇幅的關係只會列出常見、以及大家在學習 JavaScript 最容易被搞混的部分。
如果要了解完整的內容可詳閱：MDN-運算式與運算子。
在前面的文章中，我們曾經提到過 ++ 與 -- 運算子，分別為我們處理變數的「遞增」與「遞減」。
那麼如果我們要處理的運算，不是 「+1」，而是「+2」、「+3」的話，有沒有更簡便的寫法呢？
這時候就可以利用指派運算子 (Assignment Operator) 來幫助我們。
最基本的指派運算子就是大家都很熟悉的 =，一個等號來表示。
像上面範例中，我們用 = 符號將右側的運算式結果「指派」(assign) 至等號左側的變數 a。
除了最基本的用法之外，還可以結合數學運算子：
a += 100 代表 a = a + 100 也就是說，會先將 = 右側的 a + 100 計算完成後，然後再指定至變數 a 內。
當然，行爲也會與數學運算子一樣的是， += 前後都是「數值」或「布林值」的話，則會視為數字後相加，而若有其中一方為字串，則會視為字串來連結。 這部分前面也已介紹過就不再贅述。
下面簡單列出常見的指派運算子：
「逗號運算子」主要的工作讓逗號分隔運算式可以循序執行 (由左至右) ，並且會回傳最後一個運算式的值。
如果需要在一個運算式裡面同時包含多組運算式的話，就可以用「逗號」 , 來將它們分開。
最常出現的地方應該是 for 迴圈：
透過 , 運算子可以將多組運算式看做是一個。
另外還有個常見的場景，就是「宣告」變數的時候：
像上面的 a 與 b 可以寫成：
這樣就可以同時宣告多組變數，且給予預設值。
但是，有個需要注意的地方就是，有些朋友可能會寫成這樣：
喔喔！ 同時宣告兩個變數，而且 a 與 b 同時都給予 10 的預設值了！
逼逼！ 像這樣看似很方便的寫法，其實是有大問題的！

那麼 var a = b = 10; 出了什麼問題呢？
一開始我們有說過，沒有 var 宣告的變數都會變成「全域變數」對吧？
你可能會說 var a = b = 10; 有啊，前面有 var，但事實上，這段程式碼拆來來看是這樣的：
看出來了嗎？ 實際上變數 b 是沒有透過 var 來做宣告的。
換言之，你可能在無意間創造了一個全域變數，而你卻沒發現：
往後我們會介紹到變數的作用範圍，這裡讓各位有個印象即可。
再來是今天的重頭戲：「邏輯運算子」。
如果你曾經用過其他程式語言來開發的話，你可能會覺得...
這有什麼好值得說明的，不就 AND &&、 OR || 還有 NOT ! 三種嗎？
運算後我應個會得到一個「boolean」的值，不是 true 就是 false 嘛。
如果你也是這樣想的話，那麼接下來的部分很值得繼續看下去。
來看看這份範例：
看到了嗎？ 說好的 true 跟 false 呢？

在講解前上面的詭異狀況前，先來說明一下，
「AND &&」：用兩個 & 符號來表示，在「多數程式語言」中代表的意義是：
「(條件/運算式A) && (條件/運算式B)」當 && 左右兩側的值同時為 true 時，則會得到 true 的結果。 若其中一方是 false 的情況下，則得到 false 。
「OR ||」：用兩個 | (pipe) 符號來表示，在「多數程式語言」中代表的意義是：
「(條件/運算式A) || (條件/運算式B)」當 || 左右兩側的值只要有一方為 true，則結果為 true。 只有在兩側皆為 false 的情況下才會得到 false 。
「NOT !」：以一個 ! 驚嘆號來表示，原本是 true 的結果經過 ! 轉換後會得到 false，而 false 會變成 true。 所以你可能會看到很多人用 !!xxx 來取代 Boolean(xxx)，透過兩次的「NOT」操作，即可判斷某數值 Boolean 轉換後的結果。
嚴格來說，只有「NOT !」運算子才會回傳 true 或 false。
你可能會說，可是我在 if 條件式裡面，代入
這類的寫法，都可以正常執行啊？
是的。
在 JavaScript 這門程式語言當中，我們可以分成兩種「值」：
這不是在講廢話，我知道你看完都硬了，快收起你的拳頭。
前面講過，JavaScript 這門程式語言，我們可以分成兩種「值」，第一種就是經過 ToBoolean 轉換後會變成 false 的部分：

來源: ECMAScript® 2017 Language Specification: 7.1.2 ToBoolean
不是我在豪小，真的有規範對吧。
如果是上面列出的幾種情況，那麼透過 ToBoolean 轉換就會變成 false，而其他的部分都會是 true。
而那些轉換後會得到 false 結果的，我們通常稱這些叫 「falsy」值，而其他會變成 true 的部分，則是 「truthy」值。
聽起來好像很好理解嘛，讓我們來猜猜下面程式片段會得到什麼：
猜對了嗎？ 答案都是 true。
裡面只有 ""''"" 看起來比較像 false，但規範裡寫著是「空字串」 """" 或 ''，可不是「雙引號包覆單引號」喔。
然而還有一些容易讓人搞混的地方：
以上這些也都是 true。
所以再複習一次：
判斷 false 比判斷 true 要來得簡單對吧！
事實上，「AND &&」與「OR ||」分別代表「且」與「或」的意思沒錯，但一開始的範例為什麼會是：
說好的 true 跟 false 呢？ 誰跟你說好
來看看 ECMAScript: 12.13Binary Logical Operators 規範怎麼說：
The value produced by a && or || operator is not necessarily of type Boolean. The value produced will always be the value of one of the two operand expressions.
簡單來說，透過 && 或 || 所產生的值不一定會是 Boolean，而是兩者其中之一。
&& 與 || 運算子在判斷的時候，會先對左邊的數值進行檢查。
所以，在 if 條件判斷當中，JavaScript 會針對回傳後的數值再度做 ToBoolean 判斷是「falsy」或「truthy」，
這也就是為什麼在 && 與 || 的結果可以用來當作 true 與 false 的判斷了。
所以說，未來如果看到這類想騙人的題目：
相信你應該可以知道答案是什麼了吧！
那麼以上就是今天分享的重點，希望各位在遇到「真假」轉換的時候不會再上當受騙。
下回我們要繼續來介紹流程控制的部分，感謝大家收看。 掰。",,"['指派運算子 (Assignment Operator)', '逗號運算子', '邏輯運算子 (Logical Operator)', 'Falsy 與 Truthy: 論 Boolean 的型別轉換']",['再回到邏輯運算子'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191342,ModernWeb,0,ASP.NETMVC網頁程式介紹系列,2,[Day02]當ASP.NET長了腳，變成ASP.NETMVC,小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1513020616000000000,575,"這篇文章主要是探討ASP.NET跟ASP.NET MVC的差別。
我是先學ASP.NET(以下簡稱WebForm)，
然後才學ASP.NET MVC(以下簡稱MVC)的，
如果用習慣WebForm的控制項，
在進入MVC的時候會需要一點時間適應一下，
因為MVC的控制項是用Html的控制項，
我是大概花了幾天的時間適應，
還好之前有學過一些Html的語法，
加上現在網路上的參考資料還蠻多的，
所以沒有花很多時間適應。
雖然WebForm有控制項可以拉，
但其實最後到網頁上還是要轉成Html的語法，
只是WebForm會自動幫忙轉，
不用自己去記那些Html的語法，
但是如果要加上CSS，
還是要去瞭解他最後轉成Html用的是什麼標籤，
才有辦法套用CSS的部分，
這部分其實瀏覽器都幫我們做好了，
像我習慣用Google Chrome，
就可以用F12開發人員工具去看網頁的Html結構，
再套用到CSS就可以了。
不過這裡主要是介紹MVC，
WebForm的部分就此打住吧，
MVC跟WebForm的差別不只在控制項的部分，
其實WebForm也可以用Html的控制項，
只需要加上runat=""server""就可以做到了，
有人說反而MVC解放了WebForm，
因為強迫使用Html語法反而可以相容其他網頁的語言
如PHP、JAVA等等，
要換成其他語言前端的部分可以很快就搞定。
其實MVC這個詞可以用在各種語言，
只是ASP.NET MVC強制將M(Model)、V(View)、C(Control)分開，
讓你一定要用這個架構去寫網頁，
不過我認為MVC跟WebForm之間最大的差別，
還是在於WebForm是先將控制項做出來，
然後產生PostBack事件來改變控制項內容，
所以會有Page.IsPostBack等語法，
但是MVC是先在後端將所有變數都準備好，
然後將變數傳到前端再Show出來，
每一次都要先經過Controller，
然後才透過View將網頁結果Show出來。
今天大概分享到這裡，
明天會開始最簡單的ASP.NET MVC的專案，
並對ASP.NET MVC的架構做簡單的說明。
--
小弟不才，
如果有謬誤或是要補充的，
都歡迎一起來討論！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191341,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,7,(Day7)爬蟲作業二：爬出第一層所需的所有議題,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1513020274000000000,548,"接續前一篇，接下來就是拿著前一篇的總頁數，繼續往下處理每個頁面的議題列表．
迴圈開始
url的頁碼，隨著迴圈數進行翻頁
比照前篇，準備所需資料的xpath，開始爬找．
比照所需要搜集的資料記錄，對應到xpath，一樣帶入程式中，取出資料．
這裡要注意的是date時間的xpath跟另兩組不同，記得要分開處理．
各自取出後，按data.frame物件收留．
簡單的判定，確認dfl這個物件在第一次被執行時，進行初始指定．
之後的每次，因資料欄位數相同，用函數rbind()，套句大家比較熟的說法，“插入一列”．
頁碼也一併置入．
重要步驟：每次用runif()函數，發出1個2到8之間的亂數，當作系統暫停Sys.sleep()的秒數．(S大寫)
下方的右大括號，表示迴圈結束
迴圈結束後，代表所有的資料應該都已處理完畢．
此時，因需要一序號，當作一Key值．
這部分就引用函數rep()，跑一序列欄位出來．
再用所謂“插入一欄”cbind()函數處理．
檢視結果如下：共計搜集了500多筆議題紀錄．

最後，可選擇將本次結果，輸出成為csv，作為資料來源或是傳遞資料之用．
存檔路徑，結合了上一篇工作檔路徑，並自行進行命名．
以上就幾段程式碼，對Ｒ語言進行爬蟲的演示．",,['以迴圈的方式，逐一爬完所有的頁數．'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191340,自我挑戰組,2,GAME30天系列,1,關於我們,我是一支小小小小鳥,https://ithelp.ithome.com.tw/users/20107379/ironman,1513018501000000000,750,"我們是「露天拍賣」的工程師，這次決定一同組隊「露天廢物」參加鐵人賽，扶持彼此完成這艱難的 30 天任務。
成員如下（按字母順序排列）
歡迎大家閱讀我們的學習歷程！",,['關於我們'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191152,自我挑戰組,1,自我挑戰日記系列,6,CSS：background線條,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1513015391000000000,568,"前篇文章寫到的線條背景
還有另一種作法
就像是畫出大小向下一層一層增加
就可以做出下面的背景

範例

使用 linear-gradient(to right, #0575e6 45%, transparent 0),
作出一個 從 0 至 45% 沒漸層的顏色
會沒有漸層是因為  transparent 0
也可以用  transparent 45%
意思是 從 #0575e6 45% 漸層到 transparent 0 之後透明
若是 transparent 後面 45% 以上
比 #0575e6 的 45% 還多時就會產生漸層
另外如果是 background-image: transparent; 就會是全部為透明
--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191338,自我挑戰組,0,Vuex學習筆記系列,6,[Vue.js]Vuex學習筆記(6)-mapState與mapGetters合併使用,NomiSu,https://ithelp.ithome.com.tw/users/20107601/ironman,1513015307000000000,564,"我們在實際開發時， computed 內容並不會像前兩章的範例那樣簡單，有時我們需要將本地組件的 computed 或是 mapState 與 mapGetters 混合使用。通常我們要使用一個工具函數將多個物件合併為一個，以使我們可以將最終的物件傳給 computed 屬性，但自從有了物件展開運算符，我們就可以將寫法大大的簡化。
mapState 與 mapGetters 函數返回的是一個物件
使用物件展開運算符之前我們要先知道展開運算符 (Spread syntax)，了解後再看下面的程式碼就會很清楚的知道使用方式。",,"['合併使用', '物件展開運算符 (Object Spread Operator)']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191188,自我挑戰組,0,,8,不是相關科系的工程師，也應該瞭解一下軟體開發,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1513014139000000000,581,"我覺得這個主題其實涵蓋了 Web開發，跟DevOps，嚴格來說這次主題範圍最大應該就是這個主題了
AI大部分也都是軟體控制、資安對於軟體開發也是很重要的素養
軟體程式工程師、軟體架構師、軟體工程師、軟體開發理論、程式語言、軟體專案管理師、軟體質量、演算法
有學習過軟體工程的人都知道，這是一門有系統化的課程，但是軟體開發本來就不是只有一種方式
現在的DevOps也是根據敏捷開發的理論所衍生出來的流程
廢話不多說，來推薦幾個已經寫了很多天的主題吧
爬蟲始終來自於墮性 8/30
每個人每天花很多時間在網路上，網路肯定已經是生活中不可或缺的一部分，但你知道嗎？為了交換資訊，我們常常在網路上做著重複的動作，查交通時刻、查股票價格、看表特版、發廢文...而這些重複的動作，一天可能還不只做一次。身為一個懶惰的工程師，為了自己寶貴的時間，也為了保護自己的黃金手腕，無時無刻思考著如何自動化肯定是必然的，而爬蟲同時也是一種諜對諜的遊戲，就讓我們一起用 node.js 來探討爬蟲的知識與技巧。
保持前進、持續優化程式碼內涵 7/30
在持續開發軟體的生涯中，經手或協同開發的過程中。 常常發現各種小問題累積，最後導致軟體的維護，變成如同惡夢的地獄。 其實只要在開發中間，利用一些技巧，就可以程式碼更容易閱讚與維護。 期望可以自己在這三十天，可以將自己一路走來，不停撞牆與突破的經驗， 好好的整理成一系列的文章，分享給大家。 若能幫上忙，那就太好了。 若覺得有改進空間的，也請給與指教與建議，謝謝。
30天從零開始 使用 Spring Boot 跟 Spring Cloud 建構完整微服務架構 5/30
30天內從零開始到學會使用 Java 界中最流行的 SpringBoot 打造服務 並進一步使用 Spring Cloud 搭建一套高效、分布式、容錯的平台
那些年八歲到八十歲都可以一起寫的程式 3/30
近年來，程式教育這股熱潮從世界逐漸燒到台灣，也越來越多人重視這個議題，也有更多人想學會箇中的道理，但相信學習過的人都會發現其實真的不是那麼好學，遇到瓶頸最後只好放棄，但我相信並非所有人都要學會那麼艱難的技術，不是每一個人都要需要會寫網頁、寫 App ，只要學會基本的程式邏輯訓練，在未來都能更加得心應手的使用未來新科技，並能使生活能更順利便捷。
看到 code 寫成這樣我也是醉了，不如試試重構？ 1/30
有過慘痛維護經驗的開發者都會了解，程式是需要設計的！設計不良的架構，會在未來增修功能的時候，大喊要殺了某人；但追求完美設計的下場，反而會被不懂程式的非工程人員追進度，還會被嫌沒效率；「重構」能在這兩個極端之間取得一個平衡。它能在具備基本設計的架構上，持續以增修功能為目的，補足設計上的缺陷。不僅能持續交付程式碼，也能持續改善設計，好重構，不試嗎？
這主題感覺大家都寫不多呢
看來之後再分享更多好的主題也是可以的",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191337,SoftwareDevelopment,0,初探Kotlin系列,6,[Day6]PackagesandImports,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1513014018000000000,518,"跟Java一樣 package宣告在檔案的最上頭
下列的package預設會載入在每個Kotlin檔案中
不同平台還會載入不同所需要的Package
可以Import單一個名稱
或Import某個Package底下的所有package class object等等
如果載入內容有相同名稱 則使用as關鍵字重新命名","['Packages', 'Default Imports', 'Imports']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191312,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,7,07.持續優化碼概念篇回顧,依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1513013438000000000,565,"在前面幾篇文章，針對程式碼的閱讀性，提到命名規則、註解，重構，接著讓我們簡單快速的回顧一下，持續優化碼內涵的概念與做法。
持續優化碼的第一步，就是自我要求程式碼具有可有高閱讀性。
這件事，一開始一定是困難的。因為這己經跟你原本的工作習慣有所差異。至少要花上三個月左右來磨合，工作上才會比較順手。
當我們現在撰寫新的功能時，不管是在宣告變數、函數名稱、類別名稱等等，都需要事先設想它的功能用途。然後，取一個符合該功能用途的名稱。
如果今天是要修改前人遺留下的程式時，假若程式本身的閱讀性不佳。只要針對要修改部份的程式區段，進行最基本的重構—改名，讓經手過的程式，變成具有閱讀性的好程式碼。不管是要持續負責維護的自己，還是未來接手的同事，都是好事。
筆者認為，寫程式就像是打造一件藝術品，一定要經過不斷的雕琢後，才能散發出他內在的光芒。
沒有人可以一開始就寫出完美而美麗的程式碼，一定是在開發過程中，不斷的重構，才能慢慢的產生高閱讀性、高維護性、高修改性的程式碼。
很多人之所以不重構，主要的原因之一，就是擔心在執行軟體功能的優化或重構時，會將功能改壞，造成多做多錯、不做不錯。
要有效的執行單元測試的前提，程式的開發的方法，需符合 DI/IoC 、低耦合的原則。
很多工程師，為了快速達到開發的目標，可能會將相同的程式碼 Copy/Paste 到多個地方。但是，萬一這個部份的程式碼要修改，很容易發生…以為全部的程式碼都有改到，結果偏偏漏改一個地方。
因為筆者開發用的程式語言，都有支援物件導向。所以善用物件導向的特性，可以讓程式具有高維護性與高修改性。
以筆者開發的習慣，基本上有幾個原則。",,"['自我要求程式碼具有可有高閱讀性', '適時重構程式碼', '筆者的開發習慣']","['重構的保護傘—單元測試', '重覆使用程式碼']","['撰寫新功能', '維護現有程式']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191329,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",8,Day8-Hadoop之MapReduceWordCount程式碼說明,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1513010010000000000,558,"承接上篇的程式碼，這次計算的檔案有兩個：wordcount_target1 與 wordcount_target2，由於檔案容量小於HDFS一個block的大小(預設為64mb)，這兩個檔案被上傳至HDFS後分別會被儲存至兩個block。
程式開始執行運算時，在這個範例中首先會先執行map，預設會啟動2個(與block數量相同)map來執行分散運算，最後reduce 會將所有的map運算結果進行最後的加總。
在map階段會執行下列的程式碼：
Map方法在處理資料時，只會一次處理檔案內的一行資料並且當成一個字串。首先會透過StringTokenizer將讀取進來字串，使用空白當作分割字串，並且組成鍵值配對(key-value pair)後傳出。
如果wordcount_target1被map讀取後執行，結果就會變這樣：
另一個map執行wordcount_target2檔案的結果就會如下列所示：
Map階段完成處理並送出key-value的結果後，接下來reduce就會接收所有map處理完的資料進行最後的運算。
在此階段reduce會把wordcount_target1與wordcount_target2經過map運算後key-value，再針對相同的key進行一次加總並且根據key排序，就是最後運算出來的結果：
如果有注意主程式(main)的話，可以看到有一個行程式碼：
setCombinerClass 主要是用來讓map可以再進行一次運算。上面的程式碼指定了使用WordCountReducer.class，表示map會把運算結果進行一次reduce的運算。
wordcount_target1 經過CombinerClass的運算後，結果就會變這樣：
而wordcount_target2 運算結果就變這樣：
可以注意到這2個map結果，經過CombinerClass處理後，key-value個數一共減少了5個，換算成百分比就是少了5/18(27.8%)。當資料量非常大(數兆筆資料)的時候，運算次數減少27.8%是非常可觀的。所以善用CombinerClass可以加快mapreduce程式的運算時間！
經過這一連串的介紹，想必大家對於Hadoop應該有更深一步的了解。Hadoop的篇章也到這邊告一個段落，接下來將邁入Big Data的資料庫：HBase。",,,"['Map', 'Reduce', '效能調整', '最後']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191325,自我挑戰組,0,2017挨踢人生大事紀系列,8,ERP改來改去何時了~PART1,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1513008867000000000,687,"當公司導入ERP第二年時，董娘和管理部副理，問了我幾個問題？！
『ERP的原廠和顧問維護合約，費用都好貴。這些合約非簽不可嗎？』
『ERP系統目前都上線兩年了，應該不需要調整什麼的吧？』
『ERP的外掛程式？還有什麼增強、卡關、防呆的程式？是不是都做得差不多了？』
那時的我很心虛的應付：
「目前的ERP應該只是系統的硬體方面穩定，但是系統的應用軟體這部份，還有很多要改善！」
「所以最好還是簽維護合約，有問題的時候可以找顧問和原廠來解決！」
如今~都上線四年多...
ERP的問題仍是不曾間斷過...
甚至連基本的建檔作業，仍會出錯？！然後要求挨踢處理收拾爛尾...
接下來幾天，我就來報告一下，ERP究竟為什麼會有永無休止的更改需求吧~
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191306,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,8,"[Day8]JS物件導向,ObjectOrientedProgramming,wtf?",dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1513004789000000000,587,"物件導向(Object Oriented Programming, 後面都已OOP簡寫, 因為我懶)是比較進階的程式概念, 我覺得很多人把OOP講的很複雜而且也寫得很複雜, 讓很多新手看得不要不要的.
我這一篇文章我要試著用我的的方式來解釋OOP, 讓新手可以馬上可以上手.
所以廢話不多說, let's do it.
我們先看一下mozilla 跟 wikipedia 官方的定義
mozilla:連結
物件導向程式設計 (Object-oriented programming, OOP) 是一種使用 abstraction 概念表達現實世界的程式設計方式。物件導向程式設計運用數個先前所建立的技術所組成，包含模組化 (modularity)、多型 (polymorphism) 以及封裝 (encapsulation) 。直到今天許多主流的程式語言 (如 Java, JavaScript, C#, C++, Python, PHP, Ruby 與 Objective-C) 也都支援物件導向程式設計。
wiki: 連結
物件導向程式設計（英語：Object-oriented programming，縮寫：OOP）是種具有物件概念的程式編程典範，同時也是一種程式開發的抽象方針。它可能包含資料、屬性、程式碼與方法。物件則指的是類別的例項。它將物件作為程式的基本單元，將程式和資料封裝其中，以提高軟體的重用性、靈活性和擴充功能性，物件裡的程式可以存取及經常修改物件相關連的資料。在物件導向程式編程裡，電腦程式會被設計成彼此相關的物件
看完這兩個定義,你應該會是

所以看完兩個官方說法, 這樣懂嗎? 如果懂, 那下面就可以不用看了. 如果不懂, 別擔心. 哥也是過來人, 哥教你.
說真的物件導向說真的就是一種整理程式碼的方式. 就這樣而已, 不要想的太複雜.
那我現在來教你怎麼整理你的code 變物件導向.
我們先看範例, 再來講解. 這是昨天的例子(只是我把每段功能整理成函式function)
接下來我們把以上的變數(Variable)跟函式(function), 寫在一個object 裡面就好了. So Easy.
有一些東西要注意.
結論: 物件導向把相關的變數跟函式打包在一起在一個物件裡面, 讓以後方便維護還有可擴展性.",,"['介紹', '物件導向, Object Oriented Programming, wtf?', '教學']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191319,ModernWeb,0,挑戰CSS30天系列,8,day8_direction,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1513002868000000000,545,"direction 屬性是用來設定文字的方向。可能的值為 'ltr' 與 'rtl'。
如以下範例：
成果，LTR 方向會在左邊，RTL 方向在右邊。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191315,自我挑戰組,0,服務桌從開始到進入資安領域系列,7,[Day7]服務桌的日常:瀏覽器被綁架問題排除,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512999380000000000,606,"那些年坐在服務桌接電話的日子，瀏覽器被綁架的問題，應該可以入圍十大問題排行榜了，時不時的就聽到......
瀏覽器被綁架事出必有因，解決問題需要找到事情發生的真因，對症下藥好的快^^
以下是瀏覽器預設啟動位置/預設值，如果預設值的後面被加了其它網址、參數就會被綁架了。
""C:\Program Files (x86)\Google\Chrome\Application\chrome.exe""
""C:\Program Files\Internet Explorer\iexplore.exe""
""C:\Program Files (x86)\Internet Explorer\iexplore.exe""
===未完待補===
已安裝的應用程序更新內含廣告
安裝內含廣告的應用程序
已儲存的捷徑URL(injection)且設定自動開啟
瀏覽器首頁被改
瀏覽器應用程序起始位置被加參數
使用其它瀏覽器被感染
註冊表被修改
驅動修改或DLL(injection)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191316,ModernWeb,0,認識Chrome開發者工具系列,8,元素面版-動態編輯文件物件模型2,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1512998654000000000,574,"今天我們要接續昨天還沒討論完的部份，把動態編輯文件物件模型的功能介紹完。
昨天我們有介紹了編輯元素標籤跟屬性的功能，但還有一個功能是可以編輯整個區塊的 HTML。在打開元素面版 (Elements panel) 之後，選擇你要編輯的元素，然後在這個元素的上按滑鼠右鍵，在更多動作選單裡選擇 Edit as HTML 或是使用快捷鍵 (Mac Fn+F2 或是 Windows F2)，這樣就會進入 HTML 編輯模式了，在編輯完成後可以使用快捷鍵 (Mac Cmd+Enter 或是 Windows Ctrl+Enter) 或是用滑鼠在編輯的元素以外的區塊點一下就可以了。這一個編輯的方式可以一次編輯很大的區塊，但是因為不會有自動縮排，編輯起來不是非常方便。

這是一個我覺得很直覺並且很酷的功能，你可以直接拖移某個特定的元素：當你選擇你要移動的元素後，使用滑鼠左鍵按住不放，然後拖拉到你想要移動的位置，再放開滑鼠左鍵，這樣這個元素就會被移動到新的位置，並且畫面也會立即更新來反應這個修改。這個功能在做排版的調整時是很方便的。
在選定元素後，使用鍵盤的 Delete 鍵就可以把元素刪除了，有時候其實你不想刪除這個元素，但是想暫時隱藏這個元素，你可以使用鍵盤的 H 鍵來打開及關閉這個元素。有一點要注意的是，這個隱藏後的元素還是會佔有原先的排版空間。
刪除及隱藏元素的功能也都可以透過更多動作選單來使用
這兩個功能就像我們一般使用文字編輯器一樣，當你選定某個要複製的元素後，就可以使用更多動作選單裡的選項，或使用快捷鍵 (Mac Cmd+C 或 Windows Ctrl+C 來複製，然後 Mac Cmd+V 或 Windows Ctrl+V 來貼上 ) 來做複製。而貼上的時候要注意，你所貼的位置，如果你想要把元素貼上在同一個階層，那你要選擇這個元素的父元素，而不是直接貼在這個元素上，不然這個貼上的元素就會變成這個你所選定的元素的子元素 (Children)

在更多動作選單裡的複製裡有不少的選項，但是我自己是都只用快鍵捷複製，其他的功能很少用到 XD
常常我們會有一些元素的一些樣式是會在不同的滑鼠操作中有各自的變化 (:active, :hover, :focus 跟 :visited)，我們可以透過開發者工具來開關這個狀態：在選定一個元素後按滑鼠右鍵，這時候會看到這幾個擬類別選取項的選項在更多動作選單中，點選其中一個 ( 同一個元素可以選擇多個 )，這時候你就會看到這個元素在各個不同狀態的畫面樣式。這個功能除了在這邊可以打開之外，也可以透過樣式控制台 (Styles panel) 來開關，之後我們介紹樣式控制台時會再說明。
關閉擬類別選取項的方式就是從更多動作選單裡再選取這個選取項一次

透過上述的方法打開擬類別狀態時，在打開的 DOM 元素的左邊會出現一個橘色小點
這個功能是當有時你在檢視某個元素時，但是這個元素現在不在你元窗可以看到的範圍 (有可能這個頁面很長像是 Facebook 或是 Twitter 的頁面 ) 因為捲軸太長了，這時候這個功能就很方便，可以讓你直接捲動到這個元素所在的可視範圍內。
今天我們把剩下的幾個動態編輯文件物件模型的功能介紹完了，相信經過這兩天的介紹大家對這個元素面版應該就不再陌生了，接下來幾天我們仍然會在元素面版中，但是這次我們要介紹的是樣式控制台，當我們介紹完樣式控制台後，你就會有完整動態編輯文件物件模型及所有樣式相關的能力，只要再加上一點時間的練習及經驗，以後除錯 HTML 及 CSS 功力一定不再一樣 :)",,"['編輯 HTML', '移動元素', '刪除元素及隱藏某個元素', '複製及貼上元素', '更改擬類別選取項 (Pseudo classes)', '捲動至可視範圍 (Scroll into view)', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191313,自我挑戰組,0,打雜人生-腦容量不夠用就筆記筆記唄系列,5,[Day5]Python自習手札:嘿～拍森，幫我蒐集哆啦a夢相關資訊,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512998356000000000,661,"傳說中，人類的肩膀上住了一隻小天使和一隻小惡魔，小天使代表的是正向光明勤奮，小惡魔代表的是負面黑暗懶惰，每當人類在決擇時，往往會受到小天使與小惡魔左右......
小惡魔:嘿～拍森，幫我蒐集哆啦a夢相關資訊(抱
小天使:有沒有著麼懶啊= =
小惡魔:科技始終來自人性啊...(笑
所以...然後...小惡魔贏了(小天使完敗QQ)...就著樣挖坑給自已跳下去惹...
大數據時代已經開始一段時間了，有沒有發現在FB或其它社群路過的時侯，出現的廣告越來越接近自已想灑錢的種類了呢?!
以往使用工人蒐集資訊匯整的工作，都在搜尋、復製關鍵字、貼到小本本上面，重覆、重覆再重覆的，直到工人爬完網路上大部份的文，累積足夠的資料量再予以分析，篩選出自已需要的。
網路爬蟲，實現自動化抓取網頁內容。
舉例來說，就是叫拍森幫我到網路上爬文，順便幫我建一份哆啦欣賞/必買清單，像著樣幫助心情愉悅的事情可以叫拍森做。
正經一點的事情，比方說弄一份網路新聞懶人包著樣，也可以叫拍森做。
但...小時侯老師都有教的，做人要有禮貌。
對於已經暗示加明示不歡迎爬爬的地方，好孩子要自覺一點退下就是了。
原想盡量的使用Linux原生的環境不裝其它的東東，但有些必要的套件(Selenium)還是需要安裝的...
後續需要實際跑跑、找時間實作的東東:
(1)  linux套件:Selenium
(2)  瀏覽器:chromium
(3)  編碼:UTF-8",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191314,AI&MachineLearning,1,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,8,08.Opendata介紹與使用指南,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1512997993000000000,603,"當機器人如預期般的開始回覆資訊後，工程師的我就開始天馬行空的想接一堆服務、取一些資料來應用，像是天氣資訊、旅遊資訊與交通資訊...等。但問題來了：收集資料與提供服務都需要耗費人力與時間，很少廠商願意佛心提供免費資料讓貧窮工程師使用，同時身為懶惰工程師又很不想做爬蟲 (可能面對格式變更問題、抓太多次又被當成攻擊鎖掉)。這時候，政府機關的開放資料平台就是你的好朋友。
開啟 政府資料開放平台 (https://data.gov.tw/) 的工程師就像在逛菜市場一樣，要找到好看又不會讓自己拉肚子的服務…

看看這精美的說明，應該可以讓我們省下不少時間。

註：這些開放資料平台都需要經過註冊，使用前請詳細閱讀使用規範
註：最下面參考資料還有多個開發資料平台提供您參考
下圖是一張簡易的流程圖：當使用者下了關鍵字(命令)後，組合相關的參數資料，呼叫 WebAPI 的方式 (多數是 HttpPost 或 HttpGet) 取得相關資料 (XML、JSON、CSV或excel…等)，再解析內容後，組成使用者想要看見的型態回傳給使用者。

在介接之前，我們需要確認對方的服務是活著且正確的。 HttpGet 方式較容易，點選開啟瀏覽器後即可以檢視/下載資料。但如果是HttpPost 呢? 我們要解析資料格式怎麼看呢？ 如果需要 Token呢？ 這時候就需要另一個好朋友 postman !
Step 1. 點選網址 https://www.getpostman.com/ → 下載與安裝 (不贅述)

Step 2. 新增 collection (可以在這個collection 內建立資料夾，方便整理)

Step 3. 新增 Request → 輸入名稱與存放在哪一個 collection

Step 4. 依據API條件，選擇 GET/POST、輸入 URL、Header、Body…等參數內容

Step 5. 我們搜尋台北市環保旅館資料：輸入資料 →點選 Send 進行測試，似乎效果不錯

確認服務可以使用且正常運作，並且也得到正確資料格式後，下一篇我們就可以開始撰寫相關程式，讓你的機器人無所不知。
天氣冷想吃薑母鴨，怎麼沒有薑母鴨開放資料(被毆) ","['前言', '使用服務取得資料', '參考資料']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191310,DataTechnology,1,GraphQL+ApolloData入門系列,5,ApolloDataServer&GraphQL,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512994181000000000,574,"介紹
GraphiQL ApolloData  有提供一個提供網頁可以直接打 Json payload 的功能 ,這個界面也有提供 GraphQL API 可以查詢非常的方便,尤其在開發階段非常好用,另外除了 ApolloData  提供的 GraphiQL 這邊也介紹兩套幫忙開發時期會用的好工具

安裝 apollo-server-express
這邊 endpoint /graphiql 的 graphiqlExpress (注意多一個小i) 要設定一個 endpointURL 對應到原本的唯一開放的 /graphql ，只要  graphqlExpress 裡面的 Schema 沒問題這樣就設定完成了 ，這個WEB 介面上就可以查詢也可以帶參數，介面右邊上方也提供一個 DOC 可以查詢 API 很方便，後端定義 Schema 就可以在這邊查詢到
繼續開發到認證階段的時候可能要塞一些 Header Token 這時候再來介紹另外一套可以像 PostMan 那樣可以塞參數的工具  https://github.com/skevy/graphiql-app 這套可以使用 Header

通常會在認證的時候寫入Token 這時候原本的 GraphiQL 就比較不方便了,這套就可以在寫驗證時需要塞入Token Header 的好幫手,跟介面多一個右上角藍色的 Edit HTTP Headers
如果是使用 VsCode 的話這邊在介紹另外一套擴充套件  rest-client (神器)
https://marketplace.visualstudio.com/items?itemName=humao.rest-client

這一套就類似 PostMan 但是用文字來取代設定，如果在 VsCode 想要看到結果可以直接看到查詢的結果,開發速度會加快。 rest-client 使用的時候要注意格式(尤其是不要隨便斷行留空白)，看結果很方便但是就沒有 API 文件可以參考了
總結
在開發階段除了 GraphiQL，如果需要進一步使用 Token 可以使用 IDE 版的 GraphiQL，如果習慣文字介面想要更快 可以考慮使用 rest-client (推)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191311,SoftwareDevelopment,1,認識scala系列,8,Scaladay8(tuples),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1512992345000000000,561,"tuple 是可存取不同型態的一種物件，它是 immutable 的．格式像這樣 (element1 , element1 , ...)
使用 ._ 取得 tuples 的 element 並從 index 1 開始．
其實 tuple 是根據 element 的數量，scala 幫你 new Tuple 的物件，例 : new Tuple2 , new Tuple3 , ... , new Tuple22．tuple 的 elements 目前最多只能存到 22 個，如果超過可能也要思考一下設計面是否恰當．
tuple 如果只有兩個 element 的話，可以用 (element1) -> (element2) 產生．
tuple 的值也可以用變數存取．
filter 會根據寫的條件，找到需要的元素．
map 會走訪 collection 的每個元素然後做處理．下面例子是取出每個 tuple 的第二個元素，然後是一個新的 List 最後再使用 sum 方法將 List 所有元素加起來．
foldLeft 定義 : def foldLeft[B](z: B)(f: (B, A) => B): B
foldLeft 需要兩個參數，第一個是初始值(z: B)、第二個是一個函數(f: (B, A) => B)，然後回傳初始值的型態(B)",,['tuple'],['總結'],"['使用 filter find tuple :', '使用 map sum tuple :', 'foldLeft 版本 (另外還有有fold、foldRight)']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191309,AI&MachineLearning,1,以100張圖理解NeuralNetwork--觀念與實踐系列,1,Day01：以100張圖理解NeuralNetwork--觀念與實踐,IcodesoIam.,https://ithelp.ithome.com.tw/users/20001976/ironman,1512991728000000000,793,"這一波人工智慧(Articial Intelligence，AI)風潮方興未艾，產學研界發表不少的具體研發成果，例如AlphaGo、機器人、無人駕駛自動車、ChatBot、人臉辨識、語音辨識...等，加上各種媒體新聞不斷吹捧，搞的好像不懂AI的資訊人，就快要失業了，於是，狂買了近二十本的相關書籍，準備好好的努力一下，一窺 AI 奧秘，剛好藉由鐵人賽督促自己，記錄過程並將心得與同好分享，也希望能獲得各位先進的指教。
人工智慧其實已經歷了三波熱潮，如下圖，前兩波都功敗垂成，只留下一些美麗的願景。

圖. AI 的三波熱潮, 資料來源：http://www.testleo.com/blog/archives/6121 。
為什麼這一波會成功? 主要有幾個動力：
種種的因素擘劃出美麗的未來願景，還是海市蜃樓? 且看未來發展。

圖. 第三波AI的動能，資料來源: 人工智能，請準備迎接冬天
這一波AI的主軸就是『機器學習』(Machine Learning)，強調讓『機器自我學習』，藉由資訊的蒐集與演算法的改進，讓機器可以吸收知識，自我學習，並根據學習的成果(即預測的準確性)修正與反饋，不斷提升機器的智慧。這種解決問題的方法與傳統的系統開發想法有所不同，Machine Learning 不只靠演算法解決問題，也靠不斷累積的資料，將之轉化為『知識』，深植於模型內，請參考下圖說明：

圖. 傳統程式開發方式 vs. Machine Learning 解決問題方式
Machine Learning 目前偏向大量使用統計理論作為建立模型的基礎，尤其是 Data Mining 方法，包括『決策樹』(Decision Tree)、迴歸分析(Regression)、支援向量機(SVM)、聚類分析(Clustering)、貝氏分類演匴法(Naive Bayes classifier)...等，但目前最夯的是『神經網路』(Neural Network)，它主要是模仿生物的神經系統，透過層層連接的『神經元』(Neuron)，建立傳導的模型，以推論輸入(Input)到輸出(Output)的過程。

圖. 神經系統，圖片來源：李宏毅 一天搞懂深度學習
現在網路大廠紛紛推出『神經網路』(Neural Network)的框架(Framework)，而且大都是Open Source(佛心來也)，以支援Python語言為主流，安裝方便，入門的門檻也很低，只要寫個十幾行的程式，就能辨識阿拉伯數字，乍看一下，好像依樣畫葫蘆，就可以寫出個應用系統了，但是每一個演算法都有很多的假設與適用範圍限制，可以直接套用，解決問題的機率其實很低，因此，還是要了解其原理，進而知道其假設、限制及可變通的方式(至少調調參數吧!)，才能真正解決問題，若把烏龜辨識為槍枝，那就窘了。
這個系列的發文，會以 Google TensorFlow 的框架為基礎，採用架構在它上面的Keras為程式開發主軸，它同時也支援其他框架，如 CNTK、Theano，這類的程式(Keras、TFLearn) 稱為 Meta Framework，是學習 Neural Network 很好的學習工具。
由於 Machine Learning 技術主要是建構在統計及數學的基礎上，再加上眾多演算法(Algorithms) ，對於從事應用系統開發多年的我而言，要在短時間內打通任督二脈，甚至能動手開發，實在很艱辛，雖然在校學統計6年(從來沒應用過，所以也忘得差不多了)，又開發系統多年，在自學過程中，仍然頻頻卡關，腦袋打結，雖然如此，還是在過程中有很大的收穫，因此，為降低讀者的學習障礙，撰文以『輕鬆/快樂學習』為出發點，用圖說故事，希望有助於釐清各個演算法觀念、原理與實作。
系列發文將包括以下內容:
觀念會盡量以圖說明，原理會牽涉統計，但不會有數學推導(因為我也不會)，實作會以Python/Keras程式撰寫，讀者可以各取所需，不必吃滿漢全餐。
由於鐵人賽時間緊迫，一邊讀書、一邊看/寫程式、一邊撰文，發文內容如有謬誤，還請各位先進不吝指正，也請各位不要期望過高，畢竟小弟也是剛入門而已。",,"['前言', 'AI的演進', '機器學習(Machine Learning)', '神經網路(Neural Network)', '實作環境(Implementation)', '發文內容']",['寫了十幾天，今天總算鼓起勇氣參戰了。'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191127,ModernWeb,0,Next.js+各種套件組合系列,8,Next.js&Typescript,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512991377000000000,597,"介紹
Typescirpt 以下簡稱 TS 是一個強型別的語言在 React  通常也可以使用 Flow 來增加型別，TS 有更多優異的功能例如智能提示,有錯誤在開發階段型別有錯誤馬上提示，不會累積到要 Build 的時候在提示錯誤,此外在重構也可以使用 Referenc 看看程式關聯避免漏掉 ，TS 也有支援 JSX 副檔名為tsx ，更強的事也內建了 Babel  轉換功能,而且是babel未來版本都支援,所以使用 TS 是一個很好的選項
安裝
npm i  typescirpt concurrently  -D
設定
因為 Typescirpt 是開發時期會使用所以加上 -D ， 另外 concurrently 是同步執行的意思因為在 package.json script 中 TS 會執行 tsc --watch 只要有異動檔案就會自動 Rebuild 程式碼 因為除了執行 tsc --watch(持續不中斷)， Next.js 也需要同時並行所以需要 concurrently， 這樣就可以在 package.json 的 script  縮短成一行指令同時執行(要不然就要分兩次執行)
package.json
設定concurrently 同時跑 tsc 監聽與  next，  \是包在""裡面
Typescirpt 的tsconfig.ts檔案是重點， 設定完後就會代理許多事情
常見的設定就如同上方
outDir 是輸出的資料夾根據 target 看要產生哪種的 script 以上範例指定 es2015 也就是 es6
moduleResolution 因為 Next.js 是屬於 node 項目所以選擇 node
jsx 可以選擇 react 或是 react-native
typeRoots 是預設 ts module 的定義檔
lib 如果選擇 2017 就會包含之前所有的 2016 2015....等等
以上設定完後就可以享受  Typescirpt 帶來的智能提示以及一些強型別錯誤的偵測功能
進到程式端的部分 以 React 基本元件為 範例
以上是定義這個元件的 Props 與 States 的 interface 這樣就可以在這個 元件 呼叫 Props 或是 States 的時候用到智能提示了，如果有缺少的也立即用紅色小波浪提示，只要把滑鼠移到小波浪就會提示哪些沒有吻合定義檔
當越來越多程式會用到各式各樣的 Plugin 的時候這時後,會建議 由 TS Build Script 後再由 Next.js  來幫忙補需要的 Plugin ，例如要加上一些 bablerc 但又不希望由 TS 來加入，所以在 script 的部分就會使用到一些檔案搬移的工作.
以下的 script 就會每次在執行tsc之前先把移除之前的檔案再把需要的檔案建立好然後再把 TS 的程式藉由tsc幫忙轉換
總結
在 React 中使用  Typescirpt 設定上不會很難，好處也多多，建議  Typescirpt 與 Next.js 需要理解各自的用途，然後再進行組合發揮各自的功能，這樣可以讓設定檔變更少，例如  Next.js 就有例如提供 Automatic  Code Splitting 而 TS 有幫忙轉 Babel  等等...這兩者的搭配可以少設定 Webpack 或 BabelRc ，如果真的有需要在交付給 Next.js 的next.config.js ... 沒有看到 Webpack或BabelRc 那些設定專注於開發 是一件心情很好的事啊
參考設定檔案
https://github.com/polo13999/StartWithTsAndNext",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191299,自我挑戰組,1,使用PHP串接金流相關API系列,1,Day00-開始,royal801991,https://ithelp.ithome.com.tw/users/20107301/ironman,1512991253000000000,656,"第一份工作開始接觸 PHP 也過了兩年，但工作內容上都是在現有系統架構下開發，剛好趁著這次鐵人賽的機會，來挑戰看看沒有接觸過的金流串接部分。今年也是行動支付大量成長的一年，所以在主題上也選擇了一些自己常用的服務來和大家分享。
也很感謝露天廢物所有成員，願意一同挑戰這次鐵人賽！
目前的規劃大致如上，預計以 Linepay 作為分享主軸，也會根據 API 實際串接狀況再做改動。
我們是「露天拍賣」的工程師，這次決定一同組隊「露天廢物」參加鐵人賽，扶持彼此完成這艱難的 30 天任務。
成員如下（按字母順序排列）
歡迎大家閱讀我們的學習歷程！",,['關於我們'],['目錄'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191308,自我挑戰組,0,資訊技術解戈迪安繩結系列,4,IT｜程式設計｜Front-End｜Redis及WebSocket的一個實時消息推送系統,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1512990578000000000,562,"需求分析
後台同時對接了網頁，微信公眾號，iOS 以及 Android客戶端。在某些特定場景下，比如一個用戶接收到其他用戶的提問，我們就需要向這個用戶推送一條消息 (設備狀態)。用戶或者在手機上收到了一條彈窗通知，或者在網頁上看到了消息圖標顯示小紅點 (告警消息)。
公眾號消息推送使用客服接口推送消息。
移動端的消息推送使用國內某些知名的推送平台。在用戶從APP登錄的時候，APP會主動向推送平台設置自己的ID。後台將消息發送到推送平台時指明這個ID即可。
網頁的消息推送一般常見的實現方法有輪詢，長連接，WebSocket等等。在這裡我們使用的是WebSocket 。
消息傳遞的基本流程
後台服務器在某些情況下生成了一條消息， 首先將消息保存到本地數據庫，這樣客戶端可以調用API顯示消息列表。隨後消息被放入任務隊列，任務隊列將消息通過推送平台發送至APP，通過微信公眾號後台發送至用戶微信客戶端。
為了將消息通過WebSocket發送至在線的用戶手中，我們先將消息發佈到 Redis。訂閱了 Redis 的 Node 收到消息，將消息通過 WebSocket 傳遞至與之連接的瀏覽器。
一個大致的消息流如下圖所示：

Redis的發佈訂閱機制
所謂的 Publish/Subscribe，可以讓發佈者將消息發佈至某一個 channel，所有訂閱了這個 channel 的訂閱者就可以立即收到這個消息。在 Redis 的發佈訂閱機制裡面，一個消息可以被發佈至多個channel，訂閱者也可以同時訂閱多個channel的消息。
為了訂閱一個名為 message-channel 的消息，我們可以在 Redis 命令行下執行
消息發佈之後，原本訂閱的那個終端就可以收到消息了：

使用 Python 程式語言發佈消息·Node訂閱消息
向 Redis 發布的消息的數據類型必須為 byte，如果我們需要傳遞複雜的數據結構，就需要將數據 dump 為 json 格式。
client.publish(""message-channel"", json.dumps(data))
訂閱 message-channel 的 Node 在獲取消息之後，將消息體解析，獲取到裡面的 user id ,根據這個 id 決定消息發送的對象。如果此時用戶不在線，消息就不會被發出。
創建WebSocket的服務
本文對 Socket.IO 以及 WebSocket 沒有加以嚴格的區分，但嚴格的來說，Socket.IO 並非完全是 WebSocket。Socket.IO 是一個封裝了 WebSocket 協議的庫，隱藏了底層協議的細節，提供比較高層次的功能。它首先嘗試創建一個長連接，在可能的情況之下嘗試將連接升級到更加輕量級的 WebSocket。此外它還提供了一些更加高級的功能，比如斷線檢測，斷線重連等。
Socket.IO 的服務需要使用它自帶的 client 去連接服務，瀏覽器默認的 WebSocket 對象是不能用的。
如下代碼可以創建一個簡單的Socket.IO服務
此時 socket 會運行一個自帶的 http 服務，你可以打開 http://127.0.0.1:3000/, 開啓調試工具並執行如下代碼：
WebSocket的權限驗證
對於每一個 WebSocket 連接，需要驗證連接人的身份，驗證後才能夠向這個連接發送消息。
一般的 HTTP 請求協議可以通過驗證 cookie，或者在HTTP頭部放置 token 達到驗證的目的。WebSocket 也可以用類似的方法，不同之處在於 WebSocket 只需要在連接建立時驗證一次即可。注意此時 WebSocket 服務以及後端的 HTTP 服務必須在同一個網域底下，不然後端服務的 cookie 不會被傳遞給 WebSocket 服務。一個可行的做法是使用 nginx 同時反向代理後端的 HTTP 以及WebSocket。
後端的 Node 服務接收到連接請求之後，將 cookie 轉發給Web服務做驗證。轉發給 Web 做驗證的原因在於 WebSocket 常用於高併發的場景，應該避免 Node 服務直接請求數據庫。
比如我們使用cookie驗證用戶，那麼我們可以這樣：
如果驗證失敗，主動關閉連接，或者通知客戶端關閉。如果驗證成功，我們可以讓這個連接監聽加入一個專門的 room，為了簡單起見我們直接使用戶的 id。這樣，從Redis獲取的消息體裡面也有用戶 id，我們可以據此將指定的消息送入指定用戶的瀏覽器裡面。
可能存在的問題
按照我們的需求，任何一個消息最終只會被分發給一個用戶。而 Socket.IO 的設計初衷則是基於聊天室的。它認為一個消息有可能會被分發給一個聊天室里的所有用戶。在這個矛盾之下，你會發現這個系統的水平擴展並不是很方便。
目前這個系統的消息會被發佈到單一的 Redis channel，並且只有一個 Node 進程在處理所有的連接。考慮連接過多，單一進程無法處理的情況，為了擴展，一般的做法無非是：
1增加單一機器上面的 Node 進程數。
2增加多台物理機器，每台物理機器運行多個 Node 服務。
上面的(1比較容易實現，簡單的來說，每一個用戶的 WebSocket 會被隨機分配到任何一個 Node 進程。所有 Node 進程訂閱同一個 Redis channel。這樣一個消息會被所有 Node 查看到，然後可能會被其中一個進程傳遞給自己正在連接的用戶。
在(1這個方法里，消息如果僅僅被相關的 Node 進程捕獲就好了，畢竟最終只會有一個 Node 進程處理這個消息。但退一步講，哪怕消息被傳遞給了所有Node進程也應該不會有太大性能的問題。考慮實現(2的機制，難道對於一個消息也要將它發佈多多台物理機器的多個 Node 進程上面去？
一個可行的擴展方法是基於 uid 做一致性 hash，客戶端的連接按照 uid 被 hash 到指定的 Node 進程。Node 進程按照同樣的算法處理指定 uid 的消息，當然這個已經超出了本文的討論範圍。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191305,Security,0,CEH之越挫越勇系列,6,[Day06]資訊蒐集-實作篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1512988752000000000,660,"原本想說資訊蒐集都寫在一篇的，但因為太多惹就想說可以再拆一篇來寫 XD
不然光編排都會有點頭昏眼花 XD
其實實作部份有做相關的投影片，所以有部份的圖是讀書會那時候抓下來的，有點模糊就是了…
就給想要實作的大家當參考囉 XD
//以下列出的工具，平常真的不常用就是了…
查詢該 IP 或 Domain 於該地區的註冊資料。
就像小時候在電話旁邊的電話黃頁；Whois這個網站指的是已註冊網域清單 XD


由 **Regional Internet Registries(RIRs)**所訂定。
區域網際網路註冊機構，區分為五大塊：
非洲地區(AFRINIC)
亞太地區(APNIC)
北美地區(ARIN)
南美地區(LACNIC)
歐洲地區(RIPE NCC)
註冊IP、實體位址、負責人、通訊方式、E-Mail…
//我覺得跟 Whois 比起來… 應該只是因為多了UI介面吧 (XD？

這是第一個實作練習，裝個firefox Plugin 去觀察網站的機敏資訊抓版本資訊。
但我覺得沒有很實用就移掉了 =3=""
也沒有擷圖這樣，有興趣可以參考這個網站：http://n.sfs.tw/content/index/10101
//該工具是考古題之一
netcraft做footprinting的關鍵：
（1）找name server
（2）從email資訊做社交工程
（3）hosting country
（4）hosting history：
	os與web server對不上，通常以web server資訊為準(web service在前線，較不易誤判)
（5）弱點對照
查看主機是否在線上。 //但當然可能服務會被關掉

各平台都合用的「nslookup」指令：
輸入 Domain Name 可查詢 IP (正解 DNS)
輸入 IP 可查詢 Domain Name (反解 DNS)

//據講師說有法律責任 (！)
這個部份的指令，去年很中二的講過了 XD
[Day11]滲透測試x駭客思維xGoogleHacking
但還是有很有趣的實作供大家參考：
在Google Search中，如果忘記指令，有進階搜尋的功能，其中「""」代表完全符合。

Google Hacking Databases(GHDB)
https://www.exploit-db.com/google-hacking-database/
沒錯就是個指令資料庫！近期前輩們都用什麼指令做Google-Hacking =v=+++

http://www.hackersforcharity.org/ghdb/
Google-Hacking老祖宗的指令用法資料庫，據說很久之前就沒在更新了，但一樣很多值得參考的用法。





屬一個強大網站備份網站：http://www.archive.org
不僅網站、檔案或相關的程式都可能在網站上找的到 XD
觀察時代的脈動的備份網站，記錄每個網站最高的流量及當下的備份，講師說來源是 Alexa (？)
以我們家的網站為例…

挑選備份的時間點，據說 Archive 以較大的流量異動去做備份(？)

2017 年的官方網站長這樣…

1997 年的官方網站(？)長這樣…

就是一個網站更新的通知工具(？)
會列出所有更新的部份，提醒該是時間去注意新的資訊了。

抓取目前現在的網站做備份，以取得機敏資訊(？)


完成路徑：
file:///C:/MyWebSites/www.certifiedhacker.com/www.certifiedhacker.com/index.html


利用信件原始檔頭去分析該信件STMP傳送的路徑。






顯示網路環境中的關係圖，它可以讓你從任何人的公開網站獲取數據，進而觀察任何主機。
//使用 Maltego 抓取社群資訊
PS．這有免費版本跟付費版本，所以有興趣實作的大大在實作上可能有部份功能是受限的 ：)
//考古題有出現過這個工具

取得目標指定類型的檔案下載，講師說好用，但這個工具不會考 =3=+
//FOCA 相關的使用經驗之前有上過 DEFCON 21 議程
","['Whois', 'Smartwhois', 'Netcraft Toolbar', 'ping', 'nslookup', 'Google Search', 'Archive', 'Watcher', 'HTTrack Web Site Copier', 'eMailTrackerPro', 'Path Analyzer Pro', 'Maltego', 'FOCA']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191302,Security,0,資安的學習心得及分享系列,8,DAY8網路釣魚,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1512987630000000000,614,"網路釣魚
究竟什麼是網路釣魚呢?
現今在這個充滿著各種犯罪類型的網路中，應該常常可以看到病毒的蹤跡，但是我們要怎麼樣去保護自己不去被病毒或是惡意軟體所困擾，這是個受到廣泛討論的議題之一。
而說穿了網路釣魚就是有心人士利用不同的手法去獲取他人的資訊罷了。

我們主題回到網路釣魚，網路釣魚這個騙術相信大家常常聽到，因為常常被有心人士運用在一些敏感性的資料上，釣魚者他想要你的資料，所以他會用各種方法去獲得，但是網路釣魚比較屬於『願者上鉤』這類的觀點。
其實通常釣客常都會利用一些電子郵件、假網頁、不明軟體等，帶領使用者到另外一個網站，讓人填寫他們想要的資訊，他們會先精心的設計一個與目標網站可能很相似但是又不同的網站，讓使用者產生熟悉的感受，進而依照過往的習慣，輸入與個資有關的資料。(常見的有誘騙收信人開啟郵件、不明廣告..等)
現金的網路釣魚大多會出現在一些企業組織、社會媒體上，其原因就是釣客可以一次獲取大量的利益。(身分證、銀行密碼、信用卡等重要證件資訊)
『一次釣一條魚，不如一次釣一群魚』
基於這個觀點。現今社會上的釣客的手法越來越進步，詐騙的方式也越來越好。他們也可能大量地使用一些註冊商標、圖片，目的就是要把郵件做得更真實，如果包裝得好，會更容易欺騙使用者。
網路釣魚技術的新趨勢包括以下5種(以下為引用)：
1.	更正式：採用商務文書的書寫格式且詐騙者的文筆愈來愈好。
2.	更真實：大量使用圖片與其他能讓郵件顯得更真實的元件，包括使用銀行的標誌、名稱、版權與「註冊商標」等符號，連最微小的細節也不遺漏。
3.	更準確：更精確地鎖定目標，只傳送給真正應該接收該郵件的客戶。
4.	更專業：犯罪集團已經組織化，且利用有效率、系統化的方法來蒐集、核對，及運用竊取的資訊，以換取更大的利益。
5.	更虛偽：利用偽裝故意加上針對網路釣魚攻擊所發出的警告。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191300,Security,0,IT安全稽核系列,8,1.8組織是否依已規劃期間執行資訊安全管理系統內部稽核，以確保符合資訊安全規範、法規等的要求？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1512986717000000000,572,"有人提到一個問題，
如果工人在現場休克暈倒，難道還要等長官核准嗎??
講到暈倒休克，我就以個人親身經歷的經驗，來解釋這個說法的問題，因為這畢竟不能混為一談。
兩年前，我常到大陸出差(前公司)，有個領班，他在這家公司已經超過二十年了，因為該公司為了方便核算薪資，堅決不肯改用輪班制，所有的人一律同時加班，因為趕貨的關係，平均一個人加班超過十八小時以上，某天早上，這位領班，七點半準備上班，突然在廁所昏了過去，最後病逝在醫院。我想這很明顯是過勞死，但大家也知道，大陸勞動條件其實很差，而且普遍也都沒甚麼法律知識，而上層的人第一時間，也是立刻則優撫卹，目的就是盡速把事情抹平，最後，死者家屬並沒有對公司提告，這事也就不了了之。
我提這個事件主要原因，並非探究過勞死的問題，我要說的是，一般公司，都有代理人制度，人都有不可預測的災難風險，如果突然某些原因發生，代理人制度就要啟動，以免影響公司正常運作，這並非長官核不核准的問題，而是在於公司的代理人制度有沒有完整。
正常公司的ERP裡面，都會設有代理人，當某些特殊情況下，這個機制就是要讓公司「繼續營運」。這已經不是長官核不核准的問題，公司運作，不可能因為一個人的偶發事故而停滯，除非是天災戰亂等等，不可避免之因素等等。
以下，我們繼續根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，探討1.8的分析。
一、資訊安全管理系統 （管理階層、資訊安全組織）
1.8組織是否依已規劃期間執行資訊安全管理系統內部稽核，以確保符合資訊安全規範、法規等的要求？
說明：此項說明在於一個重點：1.內部稽核。
公司各部門的經理人，在根據適切性建立制度後，就要由各部門開始執行制度，制度面控管，是由各單位主管進行控制，然而，為預防各單位主管訂好制度，只是晾在那裡，或者根本不願意照自己訂的制度走，或者利用不當的權利徇私舞弊，因此，在較具規模的公司，就會設立稽核部門，在上市櫃公司，稽核就是直屬於董事會，董事會委派稽核部門，進行各部門執行業務狀況的稽核，確認是否根據自己訂的制度走，有任何問題都得要回報給董事會了解狀況。
目前很多公司的資安制度，其所訂定的資安辦法，似乎都算完整，事實上，坊間版本都差不多，講明了就是抄來抄去的，一點都不安全。而同一套衣服，並不一定適合穿在每個人身上的，所以這種資安制度，就只能拿來參考，還是得要修改到符合公司的資訊安全需要，才算可以行，否則漏洞百出，公司一發生事故，便是勞民傷財，得不償失。舉個簡單的例子，最近某家銀行，ATM就被外國專業駭客組織盜領，這種資訊安全上的漏洞，其實是防不勝防，資訊安全人員，如果平常沒有設立一套安全機制，能讓人如此輕易的植入木馬程式，這些問題，資安人員就得要負起責任了。這絕對不是只靠稽核人員稽核就能發現的，稽核人員都是「事後稽核」，而「事前防範」，就要靠第一線人員主動出擊才行。
最後，提到法令問題，以下是目前有關資安的法令，參考就好，我還是得說說稽核人員，很多稽核人員對於資訊安全的知識不足，才是大問題，靠這些法令並無法補足任何資訊安全的稽核，知識不足要如何解決？重點還是可以靠經驗累積，找出一套資訊安全的稽核模式，而這就得看稽核人員是否願意邊學習邊成長了。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191294,自我挑戰組,0,數位遊牧民族（DigitalNomad）系列,7,第七天-CAMPatMAYA,alincode,https://ithelp.ithome.com.tw/users/20092025/ironman,1512986243000000000,529,"
除了比較正式的 coworking space 之外，在清邁還有兩間很有名的 24H 的咖啡廳，其中一個是 CAMP，它主打是年輕人聚會的場所。經營者是三大電信商之一 AIS，秉持著回饋社會的方式經營這個場域，所以消費並不貴，只有消費 50 元，即可取得兩小時的免費網路，如果兩小時到了之後，它也不會趕你出去啦，只是沒網路而已。
設施：






場地會比一般 Coworking space 吵一點，但是比台灣一般咖啡廳都安靜很多。
位置百貨公司的樓上，百貨公司不開放的時間，需要透過地下一樓的小門進出，有點難找路線，但是開口問的話，警衛會指引。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191301,自我挑戰組,0,網頁學習日誌系列,8,Git:上傳資料到Github,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1512986237000000000,585,"因為之前所做的都是在本地端資料庫，要上傳到Github連線遠端的話，必須要下載遠端資料庫的git檔案，
會使用 複製遠端資料庫 的語法
如下圖，接下來進入圈選處的git_test，剪下隱藏資料夾 「.git」，貼到上層的git_test



再把上圖的4個檔案中的git_test刪掉之後，打開GitBash指向到桌面的git_test資料夾可發現
後面多出master，這個是遠端分支名稱。

先確認資料庫名稱，語法如下：
可得到origin的名稱

3.確認檔案是否全都加入索引和git log紀錄，如果沒有就不能上傳到Github

4.上傳檔案
語法如下
資料庫名稱:origin
遠端分支名稱:master
所以輸入
跳出輸入github帳號選項和密碼視窗

回到Github資料庫git_test，可看到網頁檔案已經上傳，而且也有commit紀錄，接著進入Settings

尋找GitHub Pages，Source選項改master branch，按下sava儲存，則會出現網址可瀏覽網頁，

如果要刪除資料庫(git_test)可選下圖綠色圈選處Delete this repository
",,"['上傳到遠端資料庫', '產生網址', '刪除資料庫']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190936,ModernWeb,0,用範例理解Vue.js系列,1,用範例理解Vue.js#1：前言,hunterliu1003,https://ithelp.ithome.com.tw/users/20107107/ironman,1512985419000000000,1039,"
之前只稍微用過 AngularJS，目前公司前端是用 Vue。
希望透過這三十天整理筆記，記錄自己的學習過程。
這三十天的內容會以 2.x為主，畢竟還很菜的我沒經歷過之前的階段，Vue 算是我的第一個前端框架。
首先必須感謝我的 mentor Summer，願意分享許多知識與經驗，也鼓勵我參加這次鐵人賽。
也歡迎大家任何批評指教，或是補充不足的地方。
個人喜歡先看結果，再深入理解背後的原理。因此程式幾乎都會提供範例連結，大家可以直接看到結果和修改。
文中會穿插實例，分享自己遇到的問題，和如何選擇解決的方式。
這部分就是做多少算多少。
vue-router
vue-devtools
vue-loader
Vue Vuetify
Vue.js + Typescript
render function
多國語系
axios, axios-mock-adapter
我們是「露天拍賣」的工程師，這次決定一同組隊「露天廢物」參加鐵人賽，扶持彼此完成這艱難的 30 天任務。
成員如下（按字母順序排列）
歡迎大家閱讀我們的學習歷程！",,"['30天的文章形式大致分為:', '關於我們']","['用範例理解 Vue.js 基本語法與概念', 'Vuex 介紹', 'Vue 相關']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191297,ModernWeb,0,邁向JavaScript勇者之路系列,8,JavaScript的文法學,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1512985062000000000,699,"大多數國家的語言都是由左到右、由上而下的閱讀方式，中文、拉丁語系就是屬於這類型，但也有部分國家是由右到左的，像是阿拉伯語系就是如此。而 JavaScript 是由左到右，還是由右到左呢？大多情況下我們會認為 JavaScript 是由左到右，但部份時候則會由右到左的喔。
用簡單的一點的方式說明， +、=、==  都是運算子，本身這也是屬於函式的一種，是用來將它本身 前後方的值 做計算，然後回傳一個新的值。
所以中間的 + 即是運算子，這些運算子都屬於一個函式，但他只要寫在兩個值的中間(或是前、後的其中一方)，不需要完整函式即可運作，所以稱為運算子。運算子可以用來賦予值、數學運算、比較等等，如果想知道有哪些運算子可看：運算式與運算子 - JavaScript | MDN
我們在寫 JavaScript 時也是習慣由左到右撰寫，但其實 JavaScript 文法並不是只有由左到右，而是依據 結合性 (Associativity) 決定它是由左至右，還是由右至左閱讀。
一個簡單的例子：
請問以上這段是從哪個方向開始閱讀!?
上述的例子，將 5 的數值賦予給 b ，再由 b 賦予給 a，所以 a 的值會得到 5。除此之外，JavaScript 還有一個優先性，高優先性 (Precedence) 的運算子會被優先執行，在看以下範例：
我們都了解先乘除後加減，所以乘號的優先值基本上是高於加的；而如果括號則是括號內的優先計算，所以很好理解。
所以下方兩個 a 分別會是什麼？哪一個運算子會先被執行？
所以這段只要了解優先性就可以知道答案，MDN 有提供完整的表可以參考：運算子優先等級，表中的 Precedence 數值越高代表優先度高，也會被優先執行，而 Associativity 則是文法閱讀的順序，大家也可以直接貼到 Chrome Console 看看以上答案。
第二個 a 的說明
因為綜合性 (閱讀順序)及優先性的關係，就會產生一些怪異的問題，以下兩個案例非常接近，但卻出現相反的結果，以正確來說以下兩者應該都出現 false，但卻出現一個 true，另一個 false 的結果 (正常專案盡可能不要做連續的判斷)。
上面的後者來說，他會依據以下方式來執行：
這段因為太燒腦，所有小明沒有出場。
延伸問題，請問以下解答是什麼？
文章同時發表於：https://wcc723.github.io/javascript/2017/12/11/javascript-grammar/",,"['運算子', '方向及優先性', '陷阱']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190937,DevOps,1,Nightwatch101：使用Nightwatch實現End-to-EndTesting系列,1,Nightwatch101#1：使用Nightwatch實現End-to-EndTesting,cythilya,https://ithelp.ithome.com.tw/users/20092232/ironman,1512985019000000000,3173,"
只要是工程師，寫完程式碼就必定會做測試吧（?）
做測試有什麼好處？
在做整合測試時，要怎麼確定使用者能順利走完預定的流程呢？例如：從購買商品到進入購物車、結帳完成。或者，要怎麼確定在修改全站共用的 UI 元件後，網站仍能正常運作？這時候我們往往就會找個人來當 QA，假裝他 / 她是一般使用者，把網站主流程都點一點、用一用。由於靠人力完整測試是非常耗時耗力的，因此，若能有系統的靠程式完成，就能快速、全面地檢查，一下子就知道有沒有問題了。
既然能靠寫程式解決人力檢測的問題，就先選個方法－來用 Nightwatch 吧。
這一系列 2018 鐵人賽「Nightwatch101：使用 Nightwatch 實現 End-to-End Testing」會有以下內容
希望大家不吝指教 :)
我們是「露天拍賣」的工程師，這次決定一同組隊「露天廢物」參加鐵人賽，扶持彼此完成這艱難的 30 天任務。
成員如下（按字母順序排列）
歡迎大家閱讀我們的學習歷程！

網誌版。",,"['為何要做測試？', '為何要做 End-to-End Testing？如何做？', '大綱', '關於我們']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191295,ModernWeb,1,Go！從無到打造最佳行動網站系列,1,Day1廢文日楔子,網襪工程師,https://ithelp.ithome.com.tw/users/20107302/ironman,1512984382000000000,764,"畢業了一年多，從高中一路寫程式到現在，寫了不少糞扣，一直到了現在跟同事好朋友們一同報名了鐵人賽，其實覺得有點累人(聽到30天就快掛掉的感覺)，一直以來都跟PHP做朋友，我是後端工程師在上班也寫PHP，老實說跟GoLang沒有什麼太大的關係，參加了2017的Modern Web發現現在蠻多的公司都在寫這個程式語言，激起了我一點的好奇心。
在台灣，Go不是一個熱門的語言，但覺得不久後，會是一個趨勢的程式語言，支援不同的平台，具有快速的執行效率，因為是新的程式語言，也有不少的優勢及解決非同步的問題，這次的鐵人賽，將記錄著我的學習筆記以及開發過程。期許能給自己帶來一些能力上的提升，還有認真的學寫一個新的程式語言。
前端有需多的框架可以使用，這次會選用Vue其實是因為比較能夠快速上手，可能你也跟我一樣對前端的許多框架感到疑惑，我要怎麼選一個適合我開發的框架，這沒有標準的答案，但我會給你個建議，多學習及練習不同的框架，找到所謂的手感，不同類型的專案開發，可以用不一樣的開發模式，但在小型的網站或架構我會使用-Vue，因為簡單學習、方便理解。
在接下來的三十天裡面，主要寫的大綱如下，目標是讓網站可以動起來(這不是基本的嗎!!)，也會有一些基本的概念及筆記，但不會太多，因為其實還蠻多這些基礎的教學，以及前輩們寫的些文章可以參加，會著重於開發實作上。
我們是「露天拍賣」的工程師，這次決定一同組隊「露天廢物」參加鐵人賽，扶持彼此完成這艱難的 30 天任務。
成員如下（按字母順序排列）
歡迎大家閱讀我們的學習歷程！
自從加入健身房一段時間了，對於「減脂」這件事好像都沒有進步，我決定透過鐵人賽順便紀錄我的減肥過程，希望完賽後身材可以變好(這是主要目的嗎??)，可能會順便寫一些有關於肥肉的文章(xDD)，每次吃完飯都會有一種罪惡感，但是我就是戒不掉飲料阿~~~
歡迎大家如果有什麼問題，可以留言給我，每一個留言我都會回覆，我會盡力回覆你們！
之後會在將這次鐵人賽這個系列的文章連結附上",,,"['前言', '規劃', '關於我們', '我要減肥！', '建議與問題']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191292,ModernWeb,0,JavaScript基礎二三事系列,8,Day08　運算子的優先性,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1512982057000000000,572,"今天繼續來看運算子，昨天提到：運算子可以想成是一個函式，這個函式會將前後兩個參數，傳入對應的JS內建函式中，進行運算並回傳。
那是什麼決定運算子的執行順序呢？
這就看運算子的兩個特性，優先性與相依性來決定。
優先性
表示哪一個運算子被優先運算，當同一行程式有不只一個運算子時，具高優先性的運算子會先計算，然後依序算到排序等級低的運算子。
原來運算子也有分社會階級
相依性
表示運算子被計算的順序，若是左到右計算的運算子就稱為左相依性，右到左則稱為右相依性。
若運算子的優先性都相同，那就是依據相依性來判斷順序，決定是左到右還是右到左運算。
來看看以下程式碼：
現在有+和* 兩個運算子透過=賦值給a
JavaScript會先執行哪一個呢?
在JavaScript中，*運算子優先性比+還高(先乘除後加減)，所以會等於23，輸出結果看看：

　
一般常見的運算子如+-*/(加減乘除)與物件的.運算子都是左相依性的。
那有沒有右相依性的運算子呢?
有的！
例如我們常用的=就是，在JS中一個=符號也是運算子，它並不是數學運算上的「等於」，它可以把右邊的東西賦值、指向(或傳址)給左邊的東西。
例如：
X 宣告變數Tony，它和字串IronMan相等。
O 宣告變數Tony，接著=運算子右邊的字串IronMan賦值給左邊變數Tony
所以=運算子是右相依性。
若是要判斷數學上的「等於」，左右兩邊是否是一樣的東西，在JS中就要用 == 和 === 來比。
拉回來，再看看以下程式碼：
結果會是多少？

為何都是4呢？
看到a = b = c;時，我們習慣從左邊看到右邊。
(先看a，再看 =，再看到b，再來看到 =，最後是c)
但是=運算子是右相依性的，實際上是右到左：
1.c先賦值給b
2.b再賦值給a
也就是說，執行時程式可以這樣想：
因此abc自然都是4囉！
　
　
　
小結
關於運算子的優先順序，我們可以參考MDN的運算子優先等級
裏頭有清楚列出JS對不同運算子的執行順序。
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分3-22、3-23",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191289,SoftwareDevelopment,1,Kotlin30天，通過每天一個小demo學習Android開發系列,8,Kotlin開發第8天BottomNavigation(Fragment+Intent),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1512980849000000000,590,"
準備實現 iOS 上 UITabBarController + UINavigationController 的功能，這中搭配經常出現在各種類型的 App 上。
在 res 資料夾下建立一個 menu  資料夾，然後在裡面放一個 navigation.xml，定義幾個可以點選的 Item。
實現 navigation 的點擊監控
通過 supportFragmentManager 來管理 Fragment
要切換 Fragment 需要幾個步驟（來自官方文件  in Java）
Kotlin 的例子
我們在 main 的 layout 中引入 BottomNavigationView
其中我們通過下面的方法引入剛才定義好的 menu（我們在 menu 下，有建立一個 navigation 的文件，並且定義好了幾個 item）
幾個需要注意的地方
顏色的部分可以直接在 <android.support.design.widget.BottomNavigationView /> 下修改
通過在 Activity 中加入
然後通過 override 方法來接收點擊情況
這裡和 iOS 的 UINavigationController 不太一樣。
通過給 Intent 加 Flag 的方式可以清除其他 Activity 跳到下一個 Activity 上。
iOS 通過 CocoaPods 等工具進行依賴包管理而 Android 是通過 Gradle 而 Android 世界裡看起來連官方提供的一些 UI 控件 都會通過 Gradle 加載。
如果不是通過 IDE 來建立 BottomNavigationView，需要手動在 Build.gradle 中的 dependencies 增加依賴
","['Menu', 'Build.gradle', '筆記', '參考']","['Fragment', 'activity_main.xml', 'Navigation 返回鍵']",['回到最初的 Activity'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191287,SoftwareDevelopment,0,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,5,Day05-增加Swagger來提供線上版API規格說明,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1512979118000000000,587,"撇開微服務這個架構, 其實一般在開發應用, 多少都會有呼叫對方或是被對方呼叫 API 的溝通模式,
以前常常會拿到一份過時的 API 規格書....為什麼? 你懂的 寫文件這件事大家都懶XD,
你要工程師每次開發都要去檢查 修改 文件真的是很難的一件事
所以我們來透過 Swagger 來製作線上版 API 規格文件吧~~
首先我們先在 build.gradle 增加
springfox-swagger2 這是我們主要的套件
springfox-swagger-ui 這個會有個 Html 的頁面讓你操作
springfox-data-rest 一般他只會讀我們自己寫的 API, 加入住個會把 Spring Data Ｒest 讀出來
再來我們訂製輸入輸出的物件 BookDto.java
這些 ApiModel, ApiModelProperty 都是到時候 Swagger 會幫我們輸出在 UI 上可以給對方看的,
所以要好好寫啊, 開發時一併寫好, 有修改的話也是順手調整, 省去大量維護的時間
接下來我們稍稍修改一下我們的 BookController.java
這邊三支 API 都有加上對應的 API 描述
然後我們配置 swagger 的啟動 SwaggerConfig.java
這樣就可以了
那這個 SpringDataRestConfiguration 是要幹嘛的?
剛不是提到 Spring Data Rest 的功能嗎?
除了加上依賴以外, 別忘了還要加上這個才會引入 Spring Data 的 RestAPI 喔~
服務啟動後我們進入 swagger 的 ui
http://localhost:8080/swagger-ui.html
畫面如下

basic-error-controller 這個先不用管
http://localhost:8080/swagger-ui.html#/Book 這個就是我們開發的 API
點開來看呢, 你可以很方便看到我們寫的 API 說明

今天我們要新增一本書

可以很方便知道 新增完的 Http code 及回覆的資料 跟各屬性的說明與資料型態
那我們的 Request 要送什麼在更下面一點

你也可以看到要送資料到 request 的 body,並且知道格式跟型態
點一下 Example Value 的內容框...他會把範例放到左邊的 Value 欄位
也還是有屬性的說明可以看喔

當你填好資料後按送出...Try it out
直接在頁面上知道你的測試資料是不是對的
記得把 bookid 拿掉...那是資料庫產生的,
實際上在寫的時候我常會分 CresteDto UpdateDto 新增跟更新的欄位常會有點差異

好了測試成功....
是不是很方便呢?
修改的時候也可以順手把程式改一下
省得再去找文件, 再開 word, 再找改的地方, 修正成最新 這樣煩人的文件維護工作了",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191259,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,6,網路爬蟲Day4-html檔的解析,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1512978450000000000,667,"在解析html檔時，我們首先需要了解兩個概念，第一個是html標籤，這個部分也是組成網頁的最主要部分，第二個是定位html標籤的方法selector以及Xpath，這兩個工具可以幫助你在html檔中快速找到你要的網頁資訊。如果已經對撰寫html檔有所了解，請拿捏收看。
這個部分我只說幾個重要的元素，如果你是html的初學者，必須注意每一個tag的功能，在爬蟲的應用上通常會特別注意「是否為表單元素」，如果是表單元素，有價值的資訊並不像其他元素，用一組html tag包起來，而是放在tag中的value屬性。其他，比較詳細的教材，可以看W3school。

上面講了主要組成網頁的基本元素，接下來要講的是，讓電腦可以找到特定元素的方法。這邊只簡單講概念，詳細部分，selector請看W3school，Xpath請看W3school。
這個部分因為實在太複雜，只說幾個重要的，我知道大家看完還是霧煞煞，別著急，下面我們會跟著python套件一起示範使用方式。
舉台北大學課程檢索頁面為例:

進入頁面後按下F12，如果是使用chrome，左上角會找到一個元素選擇器，透過選擇器去網頁上面點選特定的元素，瀏覽器就能自動幫你定位出他在html中的位置。

此時，在元素上面點擊右鍵>copy>copy selector，就可以取得這個元素的Selector:
不過請注意，nth-child這個功能在下面要介紹的拆解html的python套件BeautifulSoup中並沒有被實作，也就是這個套件無法處理這樣的語法，因此必須透過其他解決方案，來處理這個元素。
這個概念就比較簡單，html檔案是巢狀結構，也就是一層包一層的結構，最上層的結構就是html，然後html裡面會包著head跟body，網頁中通常會直接被你看到的部分都包在body中。下面可能就會有很多div, h1~h6,或其他上述元素。
而所謂Xpath，就是透過，從最上層到最下層。每一層經過的tag名稱串接起來的定位器，承上例，將copy Selector改為copy Xpath即可得到:
首先必須說明的是，這個套件的底層是用正規表示式所寫成，早期一點的爬蟲玩家，大都必須比較辛苦的手刻正規表示式，現在大家就比較方便拉，詳情大家可以看他們的官網，以下我僅針對比較常用的幾個元素做簡單示範。
如果對於數據處理有興趣，非常推薦認真學一下pandas，這東西就是python中的excel，功能非常強大，解析html tag只是其中的一個小功能，後面會有一天的時間，完整的介紹pandas的表格操作功能。
另外，需特別提醒的是，pandas對於html中表格元素的容錯能力其實沒有大家想像的完美，所以如果遇到無法解決的狀況，還是建議大家先用BeautifulSoup處理好完整的table元素，再丟給pandas。","['概述', 'html標籤tag(元素element)', 'Selector以及Xpath', '應用套件BeautifulSoup、pandas']","['Selector', 'Xpath', 'BeautifulSoup(非表格元素)', 'pandas(表格元素)']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191240,ModernWeb,2,前端新手村系列,1,前端新手村從空白頁開始,chris,https://ithelp.ithome.com.tw/users/20107637/ironman,1512978387000000000,744,"「當你迷惘的時候，就回到原點想一想」-中華一番 蘭飛鴻
網頁前端新手村系列文章，宗旨並不在技術本身的教導，重點放在技術與技術之間的脈胳關係。讓零碎的網頁前端技術的關鍵字，成為比較有系統性的視野。
讓一開始接觸網頁前端的新手們，有一個比較友善的系統來架構你的學習，至於技術本身的深入探討，就留給其它的高手們吧。
<meta http-equiv=""X-UA-Compatible"" content=""ie=edge""> 記錄此檔案要相容於 IE 的什麼版本[3]，究竟還有沒有必要留，如果你的網站主要是為了 IE 而生就可以不用留了，其它的時候，還是設定一下吧！[4]
有一種 meta 標籤，有 name 的屬性，表示這是設定哪方面的meta。
例如:
影響使用者是否可以用兩隻手指縮放網頁。
影響瀏覽器是否使用渲染解析度顯示網頁(行動版排版)，還使用物理解析度顯示網頁(桌機版排版)
在早期，網頁還沒這麼複雜時，其實工作並不是分工進行的。
設計加一些簡單的語法就可以把網頁呈現出來了，而這樣的工作，就是「切版」。
「切版」，就是一個動作將視覺設計好的PSD切成HTML+CSS然後供後端的工程師上程式。[5] 現在看起來也太黑心了，不過當年真的還有人就這麼賣起來了。
過去的網頁設計與現今有很大的不同，就來聊聊有什麼過去慣用，而現在不使用的手法吧。
後來手機導致響應式網頁設計(Responsive Web Design)(簡稱RWD)的廣為流行，讓切版的工作的複雜度與工作量變得更大更複雜。
table 排版，可以說是 2002年左右的切版神器。
就連知名歌手的官方網站，都是PSD轉出來的table語法組成的!!
不過，之後手機的廣為流行，改變了世界，也改變了網頁的製作方式。RWD的需求大增之後，使用 div 切版的技術就成為主流了。
在 table 排版的時代，側邊欄流行用 frame 切割瀏覽器的方式，記得知名網站「史萊姆的第一個家」也frame 這樣製作的呢！當年還有「網頁製作百寶箱」之類的網站，教巢狀式 frame 一次只要切割兩格，有需要再將其中一格切成兩份，整個看起來就變三份了。
這樣的技術，也隨著時代而消失了。
現在切版的觀念之一是: mobile first。
也就是手機優先考慮，換句話說，一定要 RWD。
加上平板電腦的出現，手機各種尺寸的機海戰術，前端工程師的工作複雜度大幅提高。
這也影響了設計師與前端工程師的工作分離。
接著UX的觀念、Ajax技術的廣為流行
後端工程師無法一直cover在前端裡的有工程師特性的工作(其它的設計師處理)。
接下來的文章，就開始來介紹這個時代製作網站的技術吧！^^
[1]: HTML 5.1 2nd Edition
[2]: Recommended Doctype Declarations to use in your Web document.
[3]: 【HTML教學】X-UA-Compatible設置IE兼容模式
[4]: https://www.w3.org/blog/2008/01/ie8-versioning-mechanism/
[5]: [新手前端]前端工程師和「切版的」有什麼不同?","['從空白頁開始', '參考資料']","['前言', 'meta', '所謂的切版', '古早味的網頁製作', 'Mobile First']","['table 排版', 'frame 排版']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191285,DevOps,3,用30天來介紹和使用Docker系列,8,Day8：查詢DockerRegistry的資訊,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1512976880000000000,634,"昨天已經介紹了要如何把 private 的 Docker Registry 建立起來，但是還有一個問題就是要如何讓使用者知道目前 Docker Registry 上有哪些的 Docker Image，因此今天就來介紹如何查詢 Docker Registry 裡有哪些 Docker Image 的資訊。
查詢 Docker Registry 裡的 Docker Image 資訊主要可以透過二種方式，第一種直接使用Docker Registry 提供的  Restful API 查詢，第二種是使用有 WebUI 畫面的方式來查詢，今天都會介紹到。
一. 查詢 Docker Registry有哪些 Docker Image 前的準備
檢查昨天建立的 Docker Registry 有沒有啟動，如果沒有啟動使用 docker start <container name> 指令來啟動，畫面如下：

把防火牆關閉，指令如下
二. 使用 Docker Registry 提供的 Restful API 來查詢 Docker Registry 資訊
畫面如下

畫面如下

畫面如下

三. 使用 hyper/docker-registry-web 所提供的 Docker Web UI 工具來顯示 Docker Registry 放了哪些Docker Image
container 啟動成功之後的畫面如下


上圖看到了 mytomcat Docker Image 的資訊

上圖可以看到建構 Docker Image 詳細資訊
今天已經介紹了要如何的查詢到 Docker Registry 裡面有哪些 Docker Image 的資訊了，明天介紹如何儲存 Docker Image 成檔案的功能。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191283,ModernWeb,0,每日文章推薦系列,8,Day8習慣養成,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1512964560000000000,653,"個人認為至少要有以下幾個習慣
雖然是講學習
但是我覺得重點是資訊更新
學習新的東西 並且持續驗證以往學習的東西
沒有人可以保證自己一開始學的一定是正確的
所以如果堅持自己學的一定是正確的
反而會影響你去學新的東西
保留一點空間會讓你學新的東西更有效率
因此習慣去學習我覺得是蠻必要的
就我而言是每天上網看有沒有新的資訊可以看
因為我覺得這方面真的更新很快
如果一個禮拜或一個月才想整理一次
反而會導致東西多到不知道怎麼取捨
這就是個人選擇了
長期用電腦通常就會導致運動量不足
然後就變成肥宅
為了避免變成肥宅 所以還是習慣運動吧
個人是最近為了減肥 就天天運動個一個小時左右
雖然很花時間 但是有確實感受到肌肉變多跟體重下降
不過也確實感受到運動是個很花時間的行為Orz
休息有生理上的也有心理上的
有些人可能只有生理上的休息卻忘記心理上的
導致壓力越來越大 到了最後還是導致生理出問題
要特別提出來要變成習慣 就是覺得很多人都沒有休息XD
這玩意之前是習慣
但是一堆人都覺得要有這個習慣以後就變成標準了
例如PHP的PSR
python的 PEP 8
javascript的族繁不及備載
之類的標準
不照這些標準 你能不能工作呢?
可以 但是其他人會很麻煩
所以就會有人利用環境搞的你不照標準就不能工作
有個例外
PHP是真的不照PSR寫都快不能工作了XD
以前這些標準你要靠自己來
寫得不好就提警告叫你自己改
改久了就會知道要怎麼寫才不會有警告
自然而然就變成習慣了
但是現在工具太方便了
其實你自己寫的不照標準
也可以幫你轉換成符合標準
像是phpstorm內建的工具
或是javascript 的 preitter
都可以協助人去把程式碼變成標準的格式
所以你就算自己不習慣寫成那個格式
也可以靠環境處理好了
比以前方便很多
Aurora Serveless的红与黑
算是一個值得關注的工具
所以值得多注意
近期重构工作的一点收获
重構要注意的點大同小異
所以就多看看有哪些是自己能做到的
Useful tools for your Node.js Projects — 2018 edition
這類推薦文章經常冒出來
但是會隨著時代演進一直改變
所以多看來維持自己的資訊
說不定會讓你平常的工作瓶頸
因為一個新工具的誕生就消失了
如何在 Laravel 中创建自己的 PHP 辅助函数 | Laravel China 社区 - 高品质的 Laravel 开发者社区 - Powered by PHPHub
很久以前就知道怎麼做了XD
不過有人寫成文章還是值得分享
今天看過的文章
這兩天去參加黑客松真的好累
建議給一個休息區ORZ
害我帶充氣沙發去不知道擺哪好XD",,"['那些習慣值得養成', '工作上的習慣', '今天分享的文章']","['習慣學習', '運動', '休息']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191279,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,8,[PixiJS-Day-08]PIXI.Graphics與繪圖,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1512961598000000000,616,"PIXI.Graphics 官方文件：
http://pixijs.download/dev/docs/PIXI.Graphics.html
PixiJS.Graphics 是我常使用的方法，除了畫出圖像外，也使用此類別畫出來的圖像來做遮罩
例一：萬花筒

每片六邊形由六個三角形組成，
每片三角形各自畫了三角形的遮罩，三角形內則是物件本身做動態
例二：按鈕

為避免粒子效果超出按鈕範圍，畫了梯形範圍做遮罩
PIXI.Graphics 繼承自 PixiJS.Container，因此也會有前一篇提到的各個特性，可以在畫完後再調整整個 PIXI.Graphics 實體的 alpha、旋轉、座標等。
雖然可以使用 PIXI.Container 的特性，但我習慣讓 PIXI.Graphics 類別專心處理繪圖，用來互動與容器的功能還是交給 PIXI.Container 的物件處理
PIXI.Graphics 的繪圖，每次畫完一個形狀時，會放在 PIXI.Graphics 實體的 graphicsData 裡
每一個形狀, 則分為外框(line)、填滿(fill)與路徑
想法上很接近 photoshop 裡的形狀工具 
直接繪製形狀的方式有幾個：
drawCircle、drawEllipse、drawPolygon、drawRect、drawRoundedRect、drawShape
很像 photoshop 裡形狀工具裡的各種功能

另外的方法則是 moveTo 到起始點，然後使用 lineTo、bezierCurveTo等方法一筆一筆畫出形狀
對，就是 photoshop 裡鋼筆工具的感覺
beginFill 與 endFill：
beginFill(color, alpha):指定填滿的顏色與透明度，
在最後呼叫 endFill() 前的線段與形狀會套用填滿的顏色與透明度
lineStyle：
lineStyle(lineWidth, color, alpha):
指定線段的寬度、顏色、透明度
clear：
清除掉該 PIXI.Graphics 實體上繪製的 graphicsData，但不影響本身的 children
clone:
有時的情境是需要複數個一模一樣的物件，我會用 clone() 的方法複製
需注意的是：clone() 會複製該 PIXI.Graphics 實體繪製出來的 graphicsData，但不包含本身的children
另外需注意的是，目前沒有填滿漸層的方法。
PIXI.Graphics 完整的繪圖方法還是以 PIXI.Graphics 官網 為主
我目前使用過 PIXI.Graphics 的 moveTo、lineTo、bezierCurveTo；beginFill、endFill 等方法
使用起來與其他語言或是 canvas 繪製圖形的感覺沒有太大差異",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191223,自我挑戰組,0,軟體工程漫談系列,7,『逃不了就面對，打不贏就加入』--論持續集成交付與自動化,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1512959648000000000,711,"以前唸書時，跟幾位化工所的朋友特別要好。當時曾經問過他們，所謂的『化學系』跟『化工系』難道不是一樣的東西嗎？得到的回答是：『化學注重的是化學本身，化工重視的是化學工業生產過程中，從原料到成品中間的所有製作的工程。』那時的我有聽沒有懂，因為在我的世界裡，『資訊工程』就是寫程式，頂多學學演算法或DSP等數學理論，什麼工程不工程的，我可是一點概念都沒有。
出社會，待了幾間老外開的軟體公司，這才知道，所謂的『軟體』，跟『軟體工程』根本就是兩回事，寫了好的軟體，在現代的資訊業界根本就是基本功中的基本功，把軟體生產的『工程』做好，那才是學問。然而跟幾位同在業界的同學聊天，才知道，在台灣的業界，雖然能做世界頂尖軟體的公司很多，但是能夠做到流暢的『軟體工程』的卻是少之又少。要不，就是自以為自己流暢，然後靠著基層員工加班賣肝，創造出一波又一波的經濟奇蹟，aka國民生產毛額。重點這些勞工還蠻自願的...
不過關於勞工自願過勞這件事，不是本文重點。那是完全另外的故事了...
我想說的是，你是否在日復一日夜復一夜的加班賣肝過程中，抱怨為什麼明明外面的世界已經有很多方便的工具，先進的技術，老闆和主管卻依舊強迫我用20年前的技術與程式風格硬刻，不准我求新求變？答案很簡單：『They don't care!』雖然殘酷卻很真實。沒別的，既然20年前那一套幫助公司成長茁壯到今天的地位，那他有什麼理由非變不可？你的心情和肝指數，根本就不是公司的營業目標。培養出聰明又方便工作的環境，對主管的KPI一點幫助都沒有，反正每年每年資工系畢業宅男多如過江之鯽，你的肝根本就不值錢！
於是，不要再死腦筋了，我不是說好的軟體工程不重要，而是你不要再傻傻的坐著等公司哪一天頓悟後開始推動了。記住，好的持續集成與自動化，不是為了公司著想（雖然公司也會因此得益），而是為了拯救你的肝（還有腦神經）！
好，我們知道要為了自己做好持續集成與自動化了，那我要從哪裡開始？Well, ...

怎麼說呢？首先你得先想想，在你的日常生活中，什麼事讓你感到最痛苦，痛苦的事，就讓他提早發生。舉個例吧！這是我見過的實際案例。
在筆者曾經待過的某個團隊裡，用的是git flow管理分枝，用了一段時間，同事發現奇怪，每次在feature branch上都運行得好好的，為什麼每次一回到develop，光是merge就讓人頭痛！就有人質疑了：『是不是因為git不好用啊？』嘖...
『哇哩咧，你才不好用，你全家都不好用！』
了解後才知道，該團隊每次開出去的branch都有至少一個月的壽命，長壽者甚至可以活超過半年！天啊！那當然不好用啊！所以我們後來就規定，feature branch壽命最多不可以超過一週，太長壽的branch就代表任務的粒度太大，必須得拆成更小的任務。目的就是要讓痛苦的merge過程『頻繁、小規模』地發生。如此一來，每次的主線更動程度，才能控制在可預期範圍內，把風險降至最小，痛苦指數降到最低。
再舉個例子。

在正式環境部署，向來都是張力高並且有風險的。尤其是當你這次的升版有大幅度的修改的時候。怎麼辦？請注意，現在是21世紀，我們還是要盡量用21世紀的思維來思考。還記得我們git flow的故事嗎？一樣地，這種有風險的事，就是要頻繁地做。怎麼做？
想個辦法把過版的流程整理成幾個腳本，然後每次過版都只執行這些腳本，並且嚴格禁止在正式環境上做任何手動操作，然後提高過版的頻率，讓版本與版本之間的功能差距縮小。『那多危險？萬一腳本錯了怎麼辦？風險豈不更高？』非也，非也。正是因為腳本錯了就會造成很大的風險，才要每次都用同一套腳本去執行。
試想，你自己的名字你從小到大寫過這麼多次，還會寫錯嗎？ＯＫ也許會，但總是比起每次都寫不同的名字還要熟練許多吧？也就是說，每次執行正式環境過版時，那個腳本早就已經被驗證過幾百次了，正確性肯定比手打指令來得高多了。也許還是可能會有打錯指令的時候，但是你想，『是打一行永遠固定的指令容易錯，還是打10~15行每次都不太一樣的指令容易錯？』不然，你看當初唐伯虎怎麼靠著那幅臨時畫的『春樹秋霜圖』騙過寧皇？還不是就靠著畫過幾百次的熟練度？

更何況，既然是腳本，那一定也可以執行檢查的指令吧？腳本可是不會累也不會帶感情的，他也不會因為跟你有私交就幫你掩蓋新版程式無法啟動的事實，一旦執行後有任何錯誤，看你是要叫他停下來還是要回朔，任你決定嚕！腳本你寫的嘛。至於腳本能不能越來越精進與安全...
這，就要看你『持續改善』的功力了...
由此可知收個知心的徒弟多重要。你看，曾子就很瞭他的老師，夫子一講，他馬上就懂了：『夫子之道，忠恕而已矣。』前面講這麼多屁話，舉了例子，也講了理論，其實重點只有一個：『越是痛苦的事，就讓他提早、頻繁地發生。』原因很簡單，人會出錯，人會累，也會害怕。
為什麼害怕？因為未知。對於大幅度的變動，以及不熟悉的事物。人多多少少會感到害怕，這是很正常的。於是，即便現在有敏捷開發、DevOps、CI/CD等技術與討論，其實萬變不離其宗，就是希望在軟體生產的『工程』中，透過頻繁、小幅度的更動，降低風險，提高可控制度，甚至在有變化來臨時，提早掌握時機，轉變方向，消極者減少損失，積極者提高利潤。
不做，不會怎樣；做了，很不一樣！","['前言', '醒醒吧，你的肝根本不值錢', '做好自動化，遠離肝硬化', '痛苦的事，就讓他提早發生', '越具風險的事，就要越常做', '吾道一以貫之']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191226,ModernWeb,1,三十哩路，我的前端學習路程系列,8,Day08::我所知道的CSSGridLayout,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1512956370000000000,652,"CSS Grid Layout
又被稱為網格佈局
簡而言之就是將畫面切割成若干方格
再依照想要的位置把方塊放進去！
會使用到的屬性有
在開始之前我們要先知道grid的運作方式
網格的區塊是由一條條交錯的線組成
所以先使用grid-template-columns和grid-template-rows畫出我們的線框
接著再使用grid-column和grid-row畫出格子的範圍
首先先把HTML寫好
為了方便辨識所以
.grid是線框
.item是格子
接著就是CSS囉！
Columns(X軸) 和 rows(Y軸)
為了畫出格線我們要使用
grid-template-rows 和 grid-template-columns
這兩個屬性一定要加s
先把最外層的div加上display:grid
然後設定columns跟rows的數量跟尺寸
像下面這邊就是個三格，每格都是150px
畫好線框後就可以在.item裡面設定位置囉！
設定的方式是使用grid-column和grid-row(不用加s)
grid-column是X軸的位置
grid-row是Y軸的位置
把所有的item設定好之後就可以得到3 * 3的格子囉！
grid也可以運用在網頁佈局上
這個時候我們需要再多加幾樣設定
grid-template-areas
grid-area
這兩樣設定的用途是先用grid-area給格子們取名字
再使用grid-template-areas讓格子們依照編排好的隊伍排隊
先在item們裡面設定grid-area
接著在grid增加grid-template-areas這個屬性，想留白的話就給他一個.就可以囉！
在學Bootstarp的時候意外發現的東西
由於當時正在苦惱有沒有能夠替代Bootstarp的方案所以小小的玩了一下，不太確定要拿這個來排版該怎麼排...
以上！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191217,ModernWeb,0,重新學習網頁設計系列,8,DAY8.JavaScriptandMe,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1512953947000000000,629,"本篇內容分為兩個部分
其內容受眾屬於比較出階開發人員
但若您是資深前輩，小弟也深深希望可以看看我寫的內容，指點指點。
以前我會再遇到問題時候去找範例程式碼來參考修改，這樣的方式雖然可能解決眼前的問題
但事實上淺在很大的危險，若我們只參考眼前的程式碼，沒有對該程式碼裡面的每個API去深入瞭解
那其實就是用了一支半解的程式在我們專案當中，有的時候使用這樣東西比使用笨方法解決問題更糟糕
因此熟悉我們專案中每個API是非常重要的，花時間去把文件仔細地琢磨很重要！
我們常會在網上聽到或看到一些技術的文章，常會介紹一些新潮有趣的內容
更棒的是很多人樂於分享他們的所學，所以將他們寫成文章並分享在網路上
但是人畢竟有可能出錯，所以當我們看到一個新的知識點，不仿跟同學、同事討論一下
接著更加深入的去找相關知識的真正來源，且最好可以打開編輯器手動玩一下新的所學
知識縫合是個簡單的概念，我是在某個Youtuber口中聽到的
它的意思是指，當我們接收到一個新的知識，不管是聽到、看到貨時其他任何形式
如果我們要真正的吸收它，就必須把知識與自己做一個縫合
寫部落格就是一個最簡單也非常有效的方式
我們可以藉由做筆記的時候梳理我們的知識內容，當在寫範例給自己看或給別人看時
可以立即的驗證到腦中的東西是否正確，因為我們必須將東西呈現給讀者之前好好的先驗證過執行結果。
而在這麼一個過程中，我們能夠將知識與自己做一個縫合，這能使我們提高學習的效率。
網路上的學習資源真的很多，但是如果我們只是光看不練習部筆記，很多時候其實那個時間是白花了
因為很容易在短時間內將它忘記，因此刻意練習將自己所得到的知識與自己縫合其實是最關鍵的。
把握住以下三個重點
utils主要用來定義在應用程式中不特別屬於某個模組且有很多時候會用到的方法。
以上這句話提到的模組、方法雖然不是本張的重點，但若對這兩個名詞不太熟悉
希望你不管是在讀這篇文章的前後，可以去了解一下他們真正的意義
本章主要分享我個人常用的utils，希望對你有幫助
另外也希望，若有更資生的前輩們閱讀到此文
可以過目一下並指點我程式中的不合理亦或是提供其他好用的utils
說明
以上是我個人的utils內容分享，每個函示的用途已經註解於程式碼中在此不多做贅述
其實在一些common的library或是framework的src或是core裡通常也會有這支檔案
若大家對自己所使用到的工具有興趣不妨去研究研究。",['DAY 8. JavaScript and Me'],"['第一部分 - 學習方式', '第二部分 - utils', 'utils']","['瞭解你所用到的 API', '驗證知識，知識補全', '知識縫合']",['第一部分總結'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190743,DevOps,1,Ops的轉職之路-Puppet從入門就放棄系列,1,Day1-前言,shazi7804,https://ithelp.ithome.com.tw/users/20089211/ironman,1512952862000000000,692,"本系列文資料可參考以下：
身為一個 Operations 出身的工程師，過去幾年我一直認為自己是 IT 界的黑手，Ops 對於企業來說是一個不可或缺的職位，要上線、要佈署總是要等待大家都下班後才能默默的執行，凡事跟科技有關係的東西不懂就先問 Ops，有插電的就是你的啦！！

對於企業老闆來說這個職位無法替公司帶來利益，可是裁掉的話公司又無法營運，當網站活的好好的這絕對是應該的 (慣老闆：你沒動他為什麼會壞？)，然而出問題的時候 Ops 總是要第一線 On Call 站出來 Debug，如果沒修好就不是只有手黑而已，連臉都黑了，這時候又會出現 ""慣老闆：那個某某某為什麼網站又不能動了。""、""Developer：我昨天上線的時候不是好好的嗎？我在我的電腦測試 OK 的阿！""，然後就默默又揹了黑鍋，多數身為 Ops 職位的工程師或多或少都會感受到這樣的感覺。

然而 Ops 重複性質的工作項目隨著科技規模龐大也開始越來越多，每有新專案地基都大同小異，在這樣的性質下做了三年，開始對於人生有了警訊，在這樣下去終究只是個黑手。
從一開始嘗試自己用 script 來把這些事情重複性質的工作做完，終於開始享受到有時間可以去讀一些除了 Ops 以外的東西 (i.e Database、Infosec、Coding)，但是隨著專案越來越龐大，這些 script 也越來越複雜，隨著維護工作越來越艱難，跟開發團隊的鴻溝也越來越深，開始陷入工作的瓶頸中。
那時我剛進入現在的公司並且當時正開始推行 DevOps 文化，在 DevOps 文化建立初期非常艱難，企業既有的人文與文化非常重要，在一間很有年資的企業無法喊喊口號就能開始 DevOps，但這時我非常慶幸是一位 Ops，因為身為一位 Ops 你很容易跟 Developer、DBA、InfoSec .. 等等團隊進行 co work，從這樣的部門角色很容易可以把觸手伸到(誤)到各單位，推廣 DevOps 是一件很有效的方式 (當然也需要權力及制度的推力)

從導入 DevOps 文化中我開始了解到，推行 DevOps 最直接的方式就是把 Dev 和 Ops 的工作都攪在一起，擁有相同的思維、共通的目標就不會讓鴻溝加深，最直接的方式就是 CI / CD 與  自動化，但是身為 DevOps 的推廣者怎麼可以空口說白話呢，一定要有一些具體的事蹟才能說服其他人，所以在 2017 年初我開始接觸了 Puppet，要做就先從解決自己的問題開始 ...",,"['資訊業黑手之路', 'DevOps 文化的覺醒']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191272,SoftwareDevelopment,0,看到code寫成這樣我也是醉了，不如試試重構？系列,1,什麼是重構（Refactoring）,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1512951745000000000,829,"前言
在開始講重構前，先來講個小故事：
臺中都會區鐵路高架捷運化計畫目前豐原到大慶的高架化工程已完成九成左右了。以下撇開政治因素與技術細節，純粹就維基資料來討論鐵路的規劃。
鐵路的功用，正是讓電車能在上面跑。但鐵路不管在平面或是高架，電車都能跑，為何還要多此一舉把平面變成高架？主要原因是，平面鐵路穿越台中，會造成前後站發展不均；鐵路與道路交錯點需要平交道，尖鋒時間容易造成交通壅塞；除此之外，另有預算增設五個區間通勤車站。
奇怪？既然會有這些問題或需求，又為何不一開始直接高架蓋好蓋滿？這又有幾種原因：
以上是筆者合理推測，但畢竟不是鐵路系，真實情況歡迎留言回應
因此，當初平面鐵路的規劃並沒有問題，而是隨著時間推演與環境變化，平面鐵路漸漸不符合需求，才會需要進行鐵路高架化。
重構一詞，如同 DevOps 或 Agile ，大家對它的認知都有點不一樣，有的人認為是砍掉重練、也有人說是效能優化。
一位知名的軟體工程大師－－ Martin Fowler ，它寫了一本書就叫 Refactoring - Improving the Design of Existing Code （中譯「重構：改善即有程式的設計」）

在這本書裡， Martin 是這樣定義重構的：
Refactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves its internal structure.
中譯版的翻譯如下：
在不改變程式碼外在行為的前提下，對程式碼做出修改，以改進程式的內部結構。
重構就很像鐵路高架化一樣，它並不會改動原有功能，而是改進設計。程式原本跑好好的，哪會有人閒閒沒事去動它。但遇到業務需求需要修改程式，也只能跳下去修改，而且還不準改壞。
有維護經驗的軟體工程師都知道，遇到好改的程式碼是要看人品的，除了前人設計好之外，業務需求也剛好落在預期更動範圍內，程式碼才會好改。人品不好，就有機會看到設計不良、難以修改的程式碼，加上跟原本設計不搭的業務需求。
上述兩種狀況都很極端，以一個常態分佈的狀況下，通常會是一個設計還算可以的程式，但開始難以應付新需求。可能程式是自己一手維護，但同時也隱約感覺到它出現了瓶頸。
由前面的故事可以了解，現實生活中我們最常遇到的是：現有設計無法輕易的滿足業務需求，這時有幾種選擇：
第一、解決不了需求，那只好解決提出需求的人。但通常有很高的機率被提出需求的人（如老闆）解決掉。
第二、在現有設計下，硬是把跟設計不合的功能實作出來。這個方法又稱為 workaround ，因省下重新設計的時間，通常都能以較短的時間完成需求，但這些省下的時間都會在未來付出代價。
第三、山不轉，路轉！那我們把程式改成「可以輕易滿足需求的設計」就好了呀！這方法跟 workaround 剛好相反，當下花時間設計，但會省下未來修改的時間。是的，這就是本次鐵人賽的主題－－重構！
講了這麼多，為何我們需要重構？甚至還有專門的書在說明重構的技巧？
環境會變，需求也會跟著變，沒有人能保證鐵路不會變高架，也無法保證自己的程式碼不需要修改。重構技巧可以應付改變，也能提高程式碼品質，讓程式碼更好維護，這就是為何我們會需要重構！",,"['為什麼需要重構？', '今日回顧']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191162,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,8,1-7.監控工具之一:ZabbixAction處理IISProblem,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1512951666000000000,628,"Action Triggers不只能發mail，還可以Remote command
假設偵測Client的80 port，當down的時候重啟IIS服務
Host link內建Template App HTTP Service 
額外補充，數字改成要監控的port號，例如sql
Action => Operations 

Operation type選擇Remote command
Target list: 這裡只想重起有問題的，所以選擇Current host
Type: 有IPMI,Telnet,SSH等方式，Custom script能利用zabbix tool下command
Commands: 這個範例是啟用WinServer的powershell下指令
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/restart-service?view=powershell-5.1
補充:有些服務沒有開port，就要監控process
Template OS Windows下有一個Windows service discovery規則其實是把服務內的都加入
IS Admin Service服務名稱是IISADMIN，可以直接在temp加上以下監控

等到IIS掛了才重啟已經造成傷害了，我們可以多加上監控連線數，告警值發訊息，警戒值重啟
perf_counter這功能會到效能監視器取值
https://www.zabbix.com/documentation/3.4/manual/config/items/itemtypes/zabbix_agent/win_keys

利用以下指令可以監控所有IIS站台總連線數
偵測memory使用率過高，回收pool
補充2-指令Performance
用logman方式添加指令設定自定義效能計數器
will大連結
https://blog.miniasp.com/post/2010/03/06/Use-Logman-to-create-Data-Collector-in-Performance-Monitor.aspx",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191273,SoftwareDevelopment,0,那些年八歲到八十歲都可以一起寫的程式系列,3,<DAY3>GetStarted----如何製作Blockly？,MichaelHuang,https://ithelp.ithome.com.tw/users/20107642/ironman,1512951563000000000,612,"目前對使用者來說開發Blockly是直觀的、簡單的、視覺化的，用拖曳的方式拼好拼圖即可完成，對開發者來說可以用JavaScript、Python、PHP、Lua、Dart....等熱門語言來完成背後的程式運算，筆者較擅長JavaScript所以後續說明都以JavaScript為主。
製作BlocklyApp方法
參考文獻：
Developers Doc.
https://developers.google.com/blockly/guides/overview
<待續>",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191271,ModernWeb,0,從無到有，使用Go開發應用程式系列,3,HelloWorld,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1512951019000000000,607,"學習程式的第一隻程式當然就是 Hello World 了，官方首頁有提供 Hello World 原始碼：
未來有原始碼，都將會在這個專案裡更新。
討論原始碼細節前，我們先想辦法讓它可以在昨天建好的環境執行。我們先建個目錄，在裡面新增一個檔案叫 main.go ，然後切換到目錄，把上面的內容輸入到檔案裡，接著下 go run main.go ：
順利的話，應該就會如上面的範例一樣，看到 Hello, 世界 。恭喜你，寫出第一隻 Go 程式了。
首先從指令開始看起：
指令 go run 所做的事正是直譯，也就是直接拿原始碼編譯，同時執行。
接著來看原始碼：
第一行 package 指的是定義套件名稱。每個 .go 原始碼開頭都必須要宣告 package 。
main 套件是有特殊意義的套件名，它是程式的起始點。執行程式的時候，將會從 main 套件開始。
可以試著把 main 名字換成其他名字，再執行一次，將會出現錯誤訊息：
它說，不能跑非 main 的套件。這個概念與大多數 PHP 框架的 index.php 類似，是所有 request 的起始點。
緊接著這行程式碼：
import 表示要引用套件，而 fmt 套件是 Go 內建的處理格式化輸入輸出函式庫。
Hello World 的目的是要輸出文字，所以我們需要這個函式庫。
最後這裡是定義函式，也就是要開始寫流程了。
func 定義了程式流程，供其他函式呼叫使用。上面的程式碼可以看到兩個函式，一個是現正定義的 main ，另一個則是 fmt 套件所提供的 Println 函式，這是把後面帶入的文字印出來，然後再另外加一個換行。
Go 語言有套件庫的概念，同時的函式也有能見度的規範。 Go 採用比較特別的方法：開頭大寫的函式是 public ，不同的套件庫可以呼叫 public func ；開頭小寫的則是 private ，只限套件庫內部使用。
上例 Println 是屬於 fmt 套件的 public func ，因此雖然套件庫不同（main 與 fmt），仍然可以正常呼叫。
而 func main 比較特別，它會搭配 package main 一起使用。前面提到 package main 是所有程式的進入點，而 go run 會把 package main 的 func main 拿出來呼叫。
最後總結一下： go run main.go 實際上就是執行 fmt.Println(""Hello, 世界"") ，於是就跑出 Hello, 世界 （和換行）了。",,"['這之中到底做了什麼呢？', '今日回顧', '參考資料']","['go run', 'package', 'import', 'func']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191264,ModernWeb,0,Expo---跨平台App開發從零到上架系列,7,"ExpoDAY7---View,Text&Assets",iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1512950843000000000,600,"
首先打開你的 Expo XDE，找到閃電按鈕，點選 New Project。

隨之會出現視窗，詢問你要是否要使用專案模板建立新專案，以及該專案要存在哪裡。上次的[]中，我們選過右邊的 tab 模板，這次我們要使用左邊的空白專案。
選取左邊的 Blank，並且取名為 expo-tour-day6。

幾分鐘後會看到如下畫面，表示一切順利。如果有問題，歡迎回文留言或到 React Native Taiwan 發問。

最後，選取 Open in Editor 會自動使用 VSCode 打開專案。

View 是 React Native 最基本的 UI 元件。View 是一個支援 flexbox、style，以及 touch 事件的容器，同時也支援 React Native 的 Accessibility 處理。
最基本的 View 長得就像以下這個樣子，它就是一個 html 元素，連屬性的寫法也一樣。
引用一下官方文件的範例，實際使用大概像是以下這樣，同時可以參考 View 使用範例。
想了解更多屬性嗎？View 的全部 Props。
It’s not currently possible to bundle assets inside of standalone apps. For many apps, this is a dealbreaker. For example, if your app includes 100mb of images and you need them to be available immediately when the user opens the app, you will need to detach/eject. When you publish your app, all assets that you import with require in your app are uploaded to CloudFront and loaded on demand, when requested in your app — similar to how a webpage works. This has the benefit of allowing you to update any asset over the air, without re-submitting to app stores, but it isn’t ideal for every situation. Some assets need to be available immediately when the app loads, and sometimes there are a lot of these assets. In these situations, the only option available to you right now is downloading and caching assets when your app loads. We are working on making it possible to bundle assets with your standalone app while also preserving the ability to update them OTA.","['Expo DAY7 --- View, Text & Assets']","['前言', '目標', '開新專案', 'View', 'Text', 'Asset', '現在就做看看', '恭喜', 'Refs']","['檔案會存在哪裡？', '效能考量', 'Expo', 'React Native']",,,['tags: day7 iThome鐵人賽2018 ReactNative Expo View Text Assets'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10191247,自我挑戰組,0,花式PHP系列,3,關聯陣列、花式函式宣告與呼叫,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1512950685000000000,627,"
PHP 的 Array 比較特別的地方是，
它其實可以是其他語言的 MAP，也可以是 List、Hash Table、Dictionary！
在 PHP 中，通常把我們能在 Array 中使用 String key 與一組值對應的行為稱做 Associative Array。
在大多數時候，PHP 的 Associative array都能作為一種很優秀的 JSON 資料呈現、撰寫的方式～
比如下面的這段描述歌曲資料的 JSON 就能透過 Assoc array 的方式撰寫：
再來是對應的 PHP 語法：
(如果單純把 PHP 的 Array 當成其他語言的 List 來用就很可惜了。)
Assoc Array 中自訂 String key 的地方其實就是在提供一個 Object；
而不特別指定 String key 的地方就是在提供一個單純的 Array～
注意 json_decode() 的第二個參數可以指定要把 Object 的部分轉成 stdClass 或是 Assoc Array。
這一點影響到你後續如何在 PHP 中查找你收到的資料。
『...可變參數函數是指一個函數擁有不定引數，即是它接受一個可變數目的參數。...』
~ 維基百科
這段話的意思是，
PHP 接受我們宣告一個能接受不恆等數量參數的 Function！
比如當我們不確定這個 function 後續會如何擴充它需要哪些變數，
就可以使用 ... 來宣告這個 function 的參數。
讓我們延續上一章的資料來舉例，
底下是一個能計算歌曲資料（用 Object 來計算）其 md5 的 function :
在這個章節我會使用到上個段落的 $data
但這章節的 $data 是透過 json_decode($data, FALSE) 輸出的
上面這個 Function 被設計成只能一次計算一個 Object 的 md5，
如果我們想得到數筆資料的 md5 就只能用 foreach 或 array_map 依序執行。
但只要改寫一下 function 就能簡化掉使用 foreach 的麻煩：
上面這樣子寫，我們就能一次接受三筆資料了呢～
但是固定就是三筆，不能再多了！

不過有 ... 的幫助的話，我們可以做的更好的：

這樣子484看起來舒服很多呢～
而且現在這個 function 可以接受不等數量的資料輸入了，
所以在改寫 -1我是以傳入3筆資料舉例、在改寫 -2我索性就只傳兩筆資料了，
一樣可以正常運作喔～
讓我們承接改寫 -2的 function 並繼續
在改寫 -2中我們已經獲得一個可以接受不等數量變數的 function 了，
但我們可不可以也動態決定要傳幾筆資料給這個 function 計算呢？
可以的！
只要在 call function 的地方對 array 使用 ... 就可以了！
目前$data->data總共有 3 筆資料，所以這樣的語法等價於：
這樣子的 PHP 是不是一下子變得特別動態的感覺了呢？","['Array 與 JSON', 'Array 與 Function Call']","['使用 ... 宣告可變參數函數', '使用 ... 展開參數']","['使用 Javascript 接收 JSON', '使用 PHP 接收 JSON', '可變參數函數？']","['這麼做的好處在哪呢？', '舉例', '改寫 -1', '改寫-2']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191219,DataTechnology,0,MicrosoftBotFramework30天上手系列,5,DebugabotwithVisualStudioCode(javascript),Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1512950551000000000,581,"參考
https://docs.microsoft.com/en-us/bot-framework/debug-bots-locally-vscode
原文有點偷懶，因為他只講javascript 的設定，
但他們自已也是用type script 開發，
居然沒有講 type script的設定，
如果用的是 type script 還得設定
https://code.visualstudio.com/docs/languages/typescript
Quick Start
參考這個，我們以console開始
https://docs.microsoft.com/en-us/bot-framework/nodejs/bot-builder-nodejs-quickstart
app.js :
然後 再點 DEBUG
.vscode/launch.json
#註 我在試這裡時，一直無法attach,跳到 browser 去， 原來因為我的chrome有裝 NIM(Node Inspect Manager)套件，關掉就可以了.",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191200,SoftwareDevelopment,1,爬蟲始終來自於墮性系列,11,台彩的銷售地點,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512950518000000000,725,"
這是聊天室裡小魚提出來的主題，其實這類的需求老實說挺多的，在日常生活中，常常需要去整理一些網路上的資料，他不難但很煩，而且這些沒營養的動作常常會耗費掉一、兩個小時，甚至是每天都必須做一次，那麼我們就藉著這個主題，來寫一篇爬資料的流程。
ps. 這個主題其實不會很適合新手嘗試，因為老實說有很多是經驗累積出來的感知XDDD
台彩的銷售地點網頁位置在 http://www.taiwanlottery.com.tw/Lotto/se/salelocation.aspx ，第一眼看起來挺單純的，看起來動作並不複雜，需要做的事情為：

但發現選擇縣市以後，其鄉鎮市區的選項會 post request 轉跳原本的頁面，然後鄉鎮市區的資訊會在這個 request 的 response。同時看到這個 request 送出了一些有趣的資訊，其中 DropDownList1、DropDownList2 我們合理猜測是那縣市和鄉鎮市區的下拉選單。

反查一下 DropDownList1 確定是縣市沒錯，而且可以看到每個縣市所代表的代碼，而 DropDownList2 在選擇縣市時都保持為 0。

接著我們要先提一下另外幾個 __ 開頭的參數，有經驗的人大概一眼就能看出這是 asp.net 的一種驗證機制，簡單來說，他會確保你所送出的 request 是從對的流程送過來 ，因為它裡頭包含了流程和頁面內容的狀態資訊。上一頁填入的內容不同，下一頁的驗證值就不同。
舉個例子，我們若用 get 重新請求網址，這個我們稱為第一頁，接下來我們選擇台北市，這個我們稱為第二頁，你將會發現，在這兩個頁面的 __EVENTVALIDATION 是不同的。總歸來說，在這個頁面每個縣市選擇後有他自己的 __EVENTVALIDATION，當查詢按下去的時候，會根據這 22 個縣市要各別有 22 個不同的 __EVENTVALIDATION。
接著我們選擇鄉鎮市區，在這個步驟並沒有發出 request，還好沒有，若有的話，我們就必須把這些全部的鄉鎮市區的 __EVENTVALIDATION 都記起來，那就會多了一個步驟了。接著最後按查詢，然後 post request 得到的 response 就帶有經銷商的資訊了。

來觀察一下這個 post request，不只多了一個 Button1 值為查詢，另外 DropDownList2 也帶上了所選擇的地區。更眼尖的發現，地區的部分後面似乎跟著空白...

為了求證一下，我們去看看 form data 的 source，確認真的是空白，而空白也會被一併 encode，同時在網路上找了一些文章，在 application/x-www-form-urlencoded 的時候空白會被 encode 為 + (不過這個地方大概也就是剛進入這領域的玩家會遇到的雷)。

確認目標和探訪後，我們先來取得所有縣市的鄉鎮市區，這個動作看起來可以很順利的取得。

接下來要模擬按下查詢的 request，在這邊我們發現複製 chrome 的 form data 並沒有辦法很順利的取得結果，這是因為剛剛上面提到鄉鎮市區後面有兩個空白，但 postman 預設送出的 post data 會將空白 encode 成 %20。

關於這點我們可以用 postman 所產生的 curl 來驗證，與 chrome 所送出的 data source 比對一下，發現確實變成 %20，也就是說，我們等等實作的時候，要將 encode 的 %20 取代成 +。

那我們在這個階段怎麼用 postman 驗證呢？這時候可以使用 raw data 來送，記得 header 的 Content-Type 要設成 application/x-www-form-urlencoded，確認可以順利拿到經銷商資料，那麼我想整個 case 就沒問題了。
這邊我們先分成兩個部分，首先我們要先抓到所有縣市和鄉鎮市區，同時要記錄各別縣市的 __EVENTVALIDATION 等資訊，那就來寫一個 getAreas function，這個 function 會先做出一個 1-25 的 array，因為縣市的代碼是 1-25，接著我們用 async.map 來送 request，同時帶上 __VIEWSTATE, __EVENTVALIDATION 還有 DropDownList1 的 city code。取得 response 後，將裡面的資訊整理一下，包含這個頁面新的 __VIEWSTATE, __EVENTVALIDATION 都把他們包裝起來，因為等等查詢經銷地點時會用到。
接下來就來根據每個鄉鎮市區來取得各自的地點，但在這邊我們會選用 async.mapSeries 來送，因為用 async.map 會是非同步發送，對 server 會造成一定的負擔，而 async.mapSeries 是同步的，我們就慢慢抓吧。然後我們對剛剛拿到的 area 資訊做 string series，讓他變成 key=value&key=value&key=value 的形式，同時順便做 encodeURIComponent。接下來有個重要動作，就是上面提到的空白 encode，我們要將 %20 取代成 +，然後就可以很順利地送出 request 了。拿到 response 之後，再將商店資訊包裝一下，就能丟給 callback 了。
我們完成了所有元件，接下來就來組合流程吧，首先先 getAreas，取得 所有鄉鎮市區之後，就丟入給 getStores function，然後就能取得所有經銷商地址了！","['定義目標', '實際探訪', '分解研究', '實作程式碼']",,"['選擇縣市', '取得鄉鎮市區', '模擬查詢', '比對 encode', '驗證 raw data', 'getAreas function', 'getStores function', '積木組合', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191268,ModernWeb,3,前端工程師養成手冊系列,8,程式寫不好，是不是我沒天份？,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1512950467000000000,1211,"相信大家在學程式的過程中，都曾經閃過這些念頭：
這些念頭我都曾經有過，但是最終我還是排除萬難地成為了前端工程師，提供給各位我克服後的心態轉換建議。
常遇到學生問我：「老師，如果我花 XX 時間的話，有辦法找到前端的工作嗎？」，這點我從來不會保證學生一定會在何時可以就業。因為每個人的吸收學習程度都不同，若是你沒達到目的，下一次豈不就更難重新出發？
你需要專注的是規劃你的學習清單，就像前面番茄鐘所提到的心法，凡事都可以切出大、中、小項目，將任務碎片化再逐一攻略。每天日月累積前端技能，自然能夠水到渠成。當然會因為天份的關係，你總會覺得周遭的人好像都很聰明學東西都很快，但你是否有看到他背後投入多少心力，每晚夜深人靜時，面對著淡淡發光的螢幕貪婪地探索知識呢？
在學校裡，成績就是一切，在名次排行榜的枷鎖下彷彿任何東西都好像要跟人比較一樣。但以掌握一個技能來說，你的對手只會有一位，就是昨日的你。常常會有學生問我：
學生：「老師我這頁花了我一天排完，會不會太久？一般專業工程師應該很快就能排好的吧？」
我：「那上個月請你排的那頁你花了多久？」
學生：「三天啊，而且還一堆 BUG」
我：「所以再給你一個月練習不就可以更快？凡事都是日月累積來的，跟自己比較就好，你現在應該著重在觀念的應用，等到真正有專案壓力時，自然就能培養起來。觀念不對基底不好也都是枉然。」
所以也奉勸各位，不要自己幫自己找對手，你最大的對手就是昨日的自己，你只要有贏他，就足夠了。
這個要看你寫什麼程式，如果像是大數據分析、資料演算的話當然需要，但以前端來說初期是不需要的，頂多到第二份、第三份工作時才需要瞭解一些而已。一開始學 HTML、CSS 時，程式語法都是設定樣式，實際上不需要邏輯運算。在學 JavaScript 時，便會開始培養邏輯觀念，但也不會那麼的重。像是我周遭的前端強者絕大部份都是非本科系，我輔導的學生有七八成也都是非本科系，同時原本本業是服務業、業務、銀行等相關，轉換跑道還是相當順利。
還記得我當時想成為工程師時，都會對這職業產生幻想，例如強大的工程師應該打字速度都超快吧？他們一定都是做很炫砲的項目，不像我做得東西小不拉機又不酷。他們一定很常在 open source 上相當活躍，本身一定又是個超熱血熱情的傳教士，年薪自然都是千萬等級以上，而且一定超愛寫程式，無時無刻都在寫才對。
但其實當我成為前端工程師跟許多人接觸後才發現，那些都是來自於我的幻想，有些人當工程師只是因為他擅長，但並不喜歡這工作。或是只是剛好歪打正著成為工程師而已，但是平常下班時間也不會碰程式。像是 Bootstrap 開發者也直言自己很痛恨電腦，原本他是要去修社會學的。PHP 之父的經典名錄也有一句提到他覺得自己不是一個開發者，當人們打算要解決一個記憶體問題時，他反而覺得重開機就好了，幹嘛要去解決？
如果你想學程式，未來也想成為一個開發者，奉勸你不要對這職缺有過多的幻想感到卻步，你不需要很有天份很有熱情才有辦法寫程式，就連我下班時間也有很多時間拿來耍廢追劇打 Game ，沒有無時無刻都在寫程式的。
絕大部分的人都會因為自己卡在一個小細節卡很久，就會開始自我懷疑自己到底適不適合寫程式，但我要老實說這是必經的過程，而且不代表未來就不會發生。像是我在寫程式時也時常犯許多低級錯誤，例如語法拼錯、忘了存檔就想開啟看結果、已經會的觀念但不知道為啥卡到陰一直沒解出來。
不過這些過程也是在幫助你 debug 除錯的能力，就像是很多學生問我問題，他還沒說完我就猜到他是哪裡出了狀況，學生當然會覺得老師很厲害，但可不要忘了我們可是經歷過數千次這樣 debug 經驗才有辦法達到這火候的，而且這段過程我也沒辦法教，你只能慢慢熬才有辦法內化到你心裡。
最後建議當你覺得卡關時不妨暫停一下，去上個洗手間或洗澡吧，有時候坐久了血液循環不好，當你在移動時大腦就會重新運算新的解法，所以我都會笑稱洗手間是我的靈感來源 (誤。",,"['跟自己比較就好，勿豎立對手', '寫程式是不是數學要好，一定要有資工資管背景？', '拋棄你對工程師的無限幻想', '程式卡關是家常便飯']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191263,自我挑戰組,0,ArasPLM開發練功30天系列,7,[Day7]Workflow-讀取工作流程中的表單物件,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1512950337000000000,581,"如何讀取正在工作流程中的物件，我們先建置一個工作流程，並且加入一支程式。
新增一個空白的Workflow

新增一個Method到Released節點中

加入到 Work Order

進入簽審清單

簽審至Released，顯示出錯誤訊息

程式一樣是組成AML並apply給資料庫讀取，apply前的內容如下
apply後結果",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191267,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,6,【Day6】解說第一個UnitTest之2-測試程式碼結構與精神,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1512950219000000000,596,"此部份參考書本的第2.4章節。
這邊會講解一些Unit test會包含的架構以及作者表達的命名精神。請參考第四天和第五天
通常一個UT會包含三個行為：
所以在程式碼：
可以看到這三個條件。先實體化要測試的對象，接著進行資料測試，最後再檢驗結果是否相同。
在範例中，可以看到方法名稱非常的長，這是作者的命名習慣。目的是直接從名稱就可以快速了解目的以及測試結果。
裡面包含了被測試的功能、測試的條件，以及預期的回傳結果，所以方法名稱有這三個部分：
所以有：
IsValidLogFileName_BadExtension_ReturnsFalse和
IsValidLogFileName_goodExtensionUppercase_ReturnsTrue
我們可以解讀：
是不是簡潔有力許多呢？這樣就不需要進入程式碼裡面，就可以快速得知測試項目與內容！
而作者也在程式碼中，這三個部分做出區隔，每個部分都空一行，可以讓閱讀者可以更容易取得這三個部分。
明天將會講解一些NUit可以使用的小功能",,,"['Unit Test通常包含三個行為', '作者的命名習慣']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191266,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,7,Prototype,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1512949468000000000,613,"UX 設計最後一項產出物是原型 prototype。它和 mockup 都是交付給客戶的東西，目的在測試及驗證，二者一定會經過反覆修正，不可能一次到位。
Prototype 用處在模擬產品真實的互動效果，看看使用者有沒有照你設計的方式操作，看看產品開發的方向是不是符合客戶期待，還是老話一句，「客戶永遠不知道他們想要的是什麼，但是他們知道不想要的是什麼」。設計方向錯了，修改 prototype 總是比修改程式來得簡單。
Prototype 最好用真實的資料，不要用假資料讓客戶想像，最怕他們說懂了，其實跟你想的完全不一樣。
現在可以製作 prototype 的工具非常多，每隔一陣子就有新的出來，簡直跟 JavaScript 一直有新程式庫一樣。我們是工程師，做 prototype 又不能當飯吃，公司也不會買給我們。我們只是不想要在開發後期更改需求，進入輪迴的重構加班地獄而已。所以在挑選原型工具上我的要求是「免費、容易上手」。在試過幾種工具後，我推薦的是 Marvel。
先自我揭露一下，我跟 Marvel 沒有任何關係，上面的連結也不是推薦連結，可以讓我獲得免費的專業版（可惡），純粹就是「免費、容易上手」，以及下面幾個優點。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191257,DevOps,0,大型敏捷專案的DevOps系列,5,[鐵人賽Day5]題目未定,AkitoSun,https://ithelp.ithome.com.tw/users/20094400/ironman,1512949367000000000,551,"先卡位，待補
BTW，連續30天真點要人命......",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191265,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,7,07.應用：透過SkypeBot建立簡易查詢(對話)功能,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1512949137000000000,557,"經過好幾篇繁複的設定：我們註冊 Bot、匯入 Bot Template 、安裝了模擬器、上傳了範本程式到 Azure Web Appliaction 與設定兩個通訊軟體(Facebook message 與 Slack)。接下來終於可以開始嘗試寫一些程式來完成些基本需求：透過簡單的文字判斷，回傳想要的資訊。
相對於 Slack 與 Facebook messages，對於自家產品 Skype 的設定很友善，建立 Bot 後在 Channel 頁籤即可以看見 Skype bot 已經加入。

只需要點選 Skype後，加入聯絡人即可。
註：若要開啟群組對話、撥打電話或進階設定，請點選 Edit 內設定。


首先開啟我們的 Visual Studio 2017 → 透過 Bot 範本建立一個 Bot application
若您還有印象，我們的 MessagesController 內有一個 api/Messages 的 API
註：請參考這一篇 03. Microsoft Bot Framework 介紹：下載 Bot 的 Project template 與 Item template 章節

我們先使用 Ctrl + 滑鼠左鍵點選傳入參數 Activity，檢視內部有哪些性質是我們需要用到的？似乎有 ChannelId、From、Text、Type 等多個性質名稱可以猜到用途。

我們先建立一個 Resources 資料夾 → 右鍵 → 加入 → 新增項目 → Resources Files (未來有機會可以延伸作為多國語系)
註：因為我在我的2017找不到 Resources Files。若您與我相同，嘗試建立文字檔案並更改附檔名為res，並確定性質自訂工具為 ResXFileCodeGenerator 與建置動作為內嵌資源。


我們在資源檔案內加入一些資料

開啟 RootDialog.cs 這隻程式，將 MessageReceivedAsync 方法改成如下：
註：您可以 Ctrl + 點選 PostAsync 方法，您會發現程式註解說明：透過前一則傳入資訊參數，建立連線回傳資料給使用者。應該是直接做回覆動作。
啟動程式後 → 開啟模擬器 → 輸入辦公室地址
註：若您沒下載或設定過模擬器，請參考：請參考這一篇 03. Microsoft Bot Framework 介紹：透過模擬器測試您的 Bot 章節


接下來我們可以把機器人程式重新發布 Azure Web appliction

發行完成後，透過 Skype 測試，效果似乎不錯。
因為自己有使用 Skype 手機板，以後若需要查詢只需要透過手機即可。

https://github.com/matsurigoto/BotFrameworkExample01","['前言', 'Skype Bot 設定', '程式', '範例']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191262,自我挑戰組,0,"Let's""Go""系列",5,Day05　Variables,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1512948548000000000,544,"在Go裡面我們可以透過上面來宣告特定型別的變數，並對這個變數賦值
值得注意的是，當你若是省略後面的賦值，Go會自動給予這個變數初始值
數值型別會是0，bool型別對應的是false，字串型別對應的則是空字串
相對的，當你在宣告時忽略了型別，則可以使用以下方式同時宣告不同型別的變數",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191227,ModernWeb,0,Nest.jsframework30天初探系列,7,Nestjsframework30天初探:Day07Pipes,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1512948059000000000,576,"
Pipes 是帶有@Pipe()裝飾器的class，Pipe必須實作PipeTransform介面。
Pipe可以將input data轉換成我們想要的output data，它也可以扛下參數資料驗證工作，在參數資料不正確時拋錯出來，這個錯誤會被上一章節提到的ExceptionsHandler或自定義的Exception Filter所捕捉。
注意:ValidationPipe 只能run在TypeScript，nestjs作者表示，如果是使用一般JavaScript的話，推薦使用Joi套件。
Paramtype
官網說明:
注意:因為TypeScript的Interface在轉譯過程會直接消失，所以如果是使用interface而不是class的話，metatype的型別會變成Object。
src/modules/Users/DTO/create-users.dto.ts
說明:請看程式碼裏頭的註解。
src/modules/Users/users.controller.ts
//@UseFilters(new HttpExceptionFilter())
說明:符合ValidationPipe所做的回應。
9.2 console結果

拜class-validator所賜console有顯示詳細的型別錯誤資訊。
9.3 打開Postman，對http://localhost:3000/users 進行POST請求，傳入符合CreateUserDTO型別的json object。

成功!
正常顯示，所以ParseIntPipe轉換型別成功。
程式碼都在github",,['Pipes'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191261,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,6,(Day6)爬蟲作業一：準備工作與爬出頁碼,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1512947435000000000,606,"網頁來說，主要有動態網頁與靜態網頁的差別．
動態網頁的部分，則可利用RSelenium來進行動態頁面的抓取．
(這部分，留給不知道還有多久的將來，再行回過頭補充吧！)
靜態網頁，可利用以下介紹的方式進行作業．
爬蟲的流程可分為Connection(連接)和Parsing(解析)兩階段．
主要R語言分別使用的套件:
相關連結與解析用的函數：
相關連結與解析用的函數：
本專案將以xml2套件，進行實作，在此將前步驟所觀察到的各式所需結果，帶入程式碼當中。

首先，專案的目的當然是要爬回所有分頁的資料，在此之前，當然要知道共計有多少分頁．
因此，就先來處理已經顯示在頁面上的總頁數，當作小試身手，也為下步驟做準備．
(本步驟除更新外，僅需安裝一次。)
本專案預計資料將暫時落地為csv檔，先行處理預設工作目錄。
基本上，站台跟節點都是分開處理，要根據需要兜成一完成路徑，才可使用．
後續，仍有其他的作業將沿用相關設定．
這邊注意使用的是paste0()的函數，請自行比較跟?paste．
最後一行，是直接連結上網站，將網頁整體內容抓回來，放到doc中．
可以用View(doc)查看一下結果，基本上是把整個對應網頁的header,body爬回來了！

給定xpath總頁碼對應的xpath節點
用xml_find_all爬出該xpath對應位置
接著用xml_text抓出對應值
最後用處理字串，將""1/""去掉，僅留下我們要的資料．
補充提醒：練習階段，會將總頁碼給定較小的值，便於後續習作
有部分網站，沒有總頁數可以爬抓，可利用其他方法，測試總頁數，得到相同結果．",['處理步驟說明'],"['rvest', 'xml2', '首先安裝Package。', '安裝成功後，叫用library。', '處理工作路徑', '處理網址並連接', '根據總頁碼數字的規則，自doc查找出對應的資料．']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191260,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,8,小插曲-關於RyanDahl,"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1512947411000000000,563,"今天我原本想寫些關於 Node.js 的介紹
跟往常一樣的話，應該會從 Ryan Dahl 怎麼從一開始寫 Ruby
跟從 V8 開始包裝成一些 C/C++ Lib 的故事開始
(這是我原本寫的草稿)
https://hackmd.io/GwMwHATAzApgRgFgLQFYIEYCGSEE5chJy5xhLq4AMCKluA7GMLikA===?both
在寫的過程中我看了一些資料，一開始是一些 youtube 影片(你可以 youtube 搜尋 'Node History')
這部是他在講歷史 https://www.youtube.com/watch?v=SAc0vQCC6UQ
這部是有名的超緊張 presentation https://www.youtube.com/watch?v=SAc0vQCC6UQ
Ryan Dahl 他有趣的地方是，其實就算到後來，他有了不少曝光
他講話看起來還是超生澀的，我就有點好奇他後來到底在做些什麼
基本上我搜尋的方式是使用像 Ryan Dahl quora 這樣的關鍵字去 google
的確找到不少篇 https://www.quora.com/What-happened-to-Ryan-Dahl
基本上內容就是，他其實後來變得很安靜(沒有很在參與 node)
跑去 google 做機器學習的 project
他的部落格甚至很神奇: http://tinyclouds.org/
他只有 10 篇文字，最早的一篇還是在讀數學系時寫的
如果繼續搜尋的話，其實像 HackerNews 上有許多他的討論
https://news.ycombinator.com/item?id=4306241
https://news.ycombinator.com/item?id=3530546
https://news.ycombinator.com/item?id=3055154
如果去 google 的話，還有一個網站是專門架來黑他的 http://shitryandahlsays.tumblr.com/
我閱讀他的文章後，其實覺得 Ryan Dahl 也許只是個比較單純的人
我原本想花一天的篇幅寫這些內容，不過後來就算了，似乎不是每個人都會想要一直曝光(他連 twitter 都刪掉了)
所以明天的文章將會是正常的 Node 介紹文，敬請期待吧！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191091,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,6,06.避不開的基本功。持續優化程式碼的根本—重構(待補完),依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1512946861000000000,610,"在前面的文件中，不斷的提到重構，看到這名詞，可能會覺得很難，或是覺得這離自己很遠。
但在筆者的認知中，重構這件事，其實沒有那麼困難。甚至，各位看倌在開發的過程中，所做的動作，就是在重構。
Refactoring: a change made to the internal structure of software to make it easier to understand and cheaper to modify without changing its observable behavior.
Refactoring: Improving the Design of Existing Code
簡單來說，就是在不影響外部功能的前提下，修改內部的程式結構，讓其更加容易閱讀、維護與變更。
所以只要符合上面提到的原則，都可以稱之為重構。
重構的行為，如果真的要列出來。可能洋洋灑灑幾十條。
在筆者的心中，依難度、工作量、變動性，將重構的行為分為好幾級。",,"['1. 重構的原則', '2. 重構的等級', '3. 後言', '4. 推薦資料']",,"['Lv.1 無感', 'Lv.2 整形', 'Lv.3 大風吹', 'Lv.4 砍掉從練', '4.1 書藉']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191246,ModernWeb,0,PHPlaravel的邂逅系列,7,DAY07-Route基本介紹PART2,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1512946453000000000,570,"今天也來講講route的其他部分
如果覺得路由名稱太長，你也可以自行命名路由的名稱，這樣方便重導向或是指定特定的路由，而我們需要做的就是加上name這個方法就可以了，那我就來實際操作看看。
下面程式碼中看到了兩個路由，分別用數字1跟2來區分。
首先先進到1號路由，第一個參數中，{id}這部分是可以抓到來自url上面的參數，而為什麼又多一個問號呢？問號代表的是這個參數可以是空值，不一定要給id，而後面閉包的參數也有新增一些東西，因為參數可能為空，所以就需要有預設值，這邊就設定是id=null，預設不一定是null，這樣也可以使用is_null來判斷是否有傳進來id。
再來看看2號路由，我們把/student/profile縮短成了profile，這樣1號路由在重導向就只要輸入profile就可以了，對於一些很長的網址馬上縮短了不少，也可以增加程式碼的維護性。
可以在路由之前加入共同的middleware(中間件)。
為什麼要這樣做呢？如果你是有註冊的會員，可以先在middleware中寫一些驗證會員的邏輯，這樣就不用每一個路由前面都需要加上一樣的驗證程式碼。
那要怎麼實作呢？Route::middleware裡面的參數為陣列，可以同時放多個middleware，在後面需要加上group的方法，在後面就可以放進要驗證的路由。
這邊先讓大家有個印象，以下的程式碼還不能執行唷，還少了資料庫跟model的部分。
模型(model)就是可以對資料庫操作的orm，在後續章節會討論，這邊先簡單帶過。
下面看到了function中加上了App\User，model在新增時會在App的目錄下面，這邊就是指User的model，後面是變數名稱，而變數名稱預設一般都會以model名稱小寫來當變數，laravel會自動對應到該model裡面。
今天路由的部分已經告一段落，明天會講到controller的使用方法。",['DAY07-Route基本介紹 PART 2'],,,"['命名路由', '路由組', '路由模型綁定']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191258,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,7,[Round7]番外篇-桌遊「禮物」之研究,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1512946187000000000,559,"本篇預計介紹禮物的配件以及說明一下遊戲機制
名稱
配件
遊戲機制
下一篇試試diy禮物",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191243,自我挑戰組,0,打雜人生-腦容量不夠用就筆記筆記唄系列,4,[Day4]Python自習手札:親切的繁體中文變亂碼,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512945611000000000,597,"昨天在寫註解手札的時侯，在註解欄位輸入親切的繁體中文......
跑跑跑的時侯，出現了神秘的幾行文字......
問卦股狗大神之後，得知亂碼是編碼錯誤造成的......
python原始碼默認使用ASCII編碼，當腳本中的字符出現ASCII不支援的部份，而使用者未指定編碼方式就會出現亂碼現象。(原始碼編碼需要與顯示程序編碼一致。)
原來腳本包含註解，都需要符合ASCII編碼或指定其它編碼方式才能正確顯示。
還以為，註解可以任意的使用字符標示，原來著個想法是錯的。
在原本的腳本上，加上著2行字符，指定編碼方式。
後來就順利執行啦~^^~

===參考/引用資料來源===
https://read01.com/NyeP3z.html",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191164,SoftwareDevelopment,0,初探Kotlin系列,5,[Day5]BasicTypes,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1512945242000000000,541,"Kotlin的基本型別
在Kotlin中所有的變數 屬性 都是物件(Object)
下面介紹機個常見的基本型別
在Kotlin中處理數字的型別非常接近Java
但所有數字的型別都是一個物件(object)
對於整數值 有以下幾種常量
Kotlin不支援八進制
對於浮點數 有以下幾種
可使用下底線增加可讀性
字符使用char表示 且不能被轉換為數值
字串的類型在Kotlin中用String表示
String 是不可變的 並可用for迴圈來讀取單一字符
Kotlin有兩種類型的字串
使用兩個引號("""")且包含跳脫字元的字串
如果字串使用三個引號("""""")則不可包含跳脫字元 但可以有其他符號
字串的Templates表達式","['Numbers', 'Characters', 'Strings']","['Literal Constants', 'Underscores in numeric literals (since 1.1)', 'String Literals', 'String Templates']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191150,ModernWeb,0,Confluence線上協同作業之平台系列,6,自行架設confluenceserver,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1512945191000000000,556,"在架設confluence server的過程中，曾經有幾個問題有在我們小組內討論過多次，而這個可能沒有標準答案，
1.Confluence要架設在ubuntu或centos那個環境較佳呢? (這個問題我有問過原廠)
2.Confluence AP及資料庫要架設在同一台或者分開呢？
而會有第1個問題產生原因，主要是focus在哪個作業系統效能較佳及比較沒有bug的問題，而這可能沒有標準答案，就有一點類似瀏覽器你比較喜歡哪種，舉凡從ie,netscape,firefox,google chome等，而也曾經看過瀏覽器依照使用率的比較統計表，當然也曾經聽USER抱怨過像是使用IE開啟網頁總是有些錯誤或提示訊息(當然可能因為它使用的瀏覽器版本較舊的因素，而原因不是因為IE的關係)，而其實ubuntu/centos哪個作業系統較佳，可能沒有答案，但或許可以轉成另外一個思考角度，哪一種作業系統support的支援度較廣(舉凡元件的安裝、可以回應問題的速度來列入評比)，這或許可以當成此問題的答案之一。
而confluence的AP及資料庫是否要架設在同一台或分開架設呢？就我的成長schema來看，我傾向是將其分開架設，主要是當AP有問題的時候，DB仍然可以保護到，當然我也有看過把AP及DB架設在同一台的情況，但畢竟這個情況並不高，在硬體資源允許的情況下，分開來架設才是適合管理維護的方式。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191172,Security,0,CEH之越挫越勇系列,5,[Day05]資訊蒐集-概念篇,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1512945045000000000,651,"俗稱踩點
蒐集蛛絲馬跡與網路勘查，又稱足跡探測
主要目的在於取得人員與群組的名稱、系統資訊
Domain name
Internal domain names
Network blocks
IP addresses of the reachable systems
Rogue websites / private websites
TCP and UDP services running
Access control mechanisms and ACL’S
Networking protocols
VPN Points
IDSes running
Analog/digital telephone numbers
Authentication mechanisms
System enumeration
…
User and group names
System banners
Routing tables
SNMP information
System architecture
Remote system type
System names
Passwords
…
Employee details
Organization’s website
Company directory
Location details
Address and phone numbers
Comments in HTML source code
Security policies implemented
Web server links relevant to the organization
Background of the organization
News articles
Press releases
…
(1) 搜尋內容會保留暫存頁面

(2) 使用轉址工具頁面
如Google翻譯或其他網頁Plugin工具…
可以不用直接連線至該網站，而對網站做出資訊蒐集的動作…


(3) 使用搜尋工具的自動填入功能

(4) 快取或歷史爬蟲記錄頁面
可以參考 Howard 大大的「[爬蟲始終來自於墮性](https://ithelp.ithome.com.tw/users/20107159/ironman/1325」系列文 XD
這裡就不示範惹 =3=+
(5) DomainName混淆或仿造

(1) 目標藍圖
Google 地圖的隱私權問題、辦公大樓的地圖規劃、針對銀行金庫的地形探測…
(2) 求職網站
公司位置、公司產業、公司負責人、聯絡窗口的E-Mail…
//以勒索軟體為例，可以寄給誰？用誰的名義？可以要求多少贖金？
公司徵求資訊工程師時的需求內容及官方網站，進一步資訊搜尋網站可利用資訊漏洞…
//資料庫架構、程式語言、軟硬體佈署、資訊部門佈署
(3) 社交網站
易於利用於網拍詐騙及人肉搜索、網路謠言及病毒傳播…
(4) 社交工程
以取得信任的方式，騙取不應有的權限，取代認同的權限行為…
- 垃圾翻找(Dumpster Diving)
- 偷窺強記(Shoulder Surfing)
- 尾隨(Piggybacking/Tailgating)：跟著前人腳步進門，離開電腦時會將電腦登出。
- 小豬背進門(Piggybacking)：欺騙內部人開門或借帳號給人家用…
光社交工程我可以講三個小時…  XDDDDD
(5) 爬蟲進階
鎖定目標後還能以爬蟲的方式去建立 Alert Services，定期通知更新內容。
(1) 帳號是否存在 (SMTP)
(2) Domain Name (whois)
(3) 收發E-Mail頻率
(4) 以社交工程發送惡意連結
(4) 觀察使用者習慣，取得更高權限
檔頭可以顯示出寄出時間、寄件人、收件人、收件時間跟寄信 SMTP 的路徑…
更詳細的教學說明可以看這兒：資安文章-電子郵件標頭解析

簡稱「CI」，就是所謂的「商業競爭市場分析」，代表花錢找第三方就對了！ =v=+++
收集使用者行為的資料分析，針對市場區隔及目標客群的大數據分析。
EDGAR Database：美國官方單位的公開資源觀察網站
Web-stat、Alexa、Monitis：網路流量分析網站
(1) 不要將機敏資訊輕易的公開在網路上
(2) 設定嚴謹的存取權限
(3) 加上加密機制及驗證機制
(4) 待其他前輩補充
先這樣 =3=+++","['Footprinting and Reconnaissance', '搜尋引擎', '技巧延伸', 'E-Mail', '檔頭資訊', 'Competitive Intelligence', '流量監控', '預防方式']",,"['蒐集網路資訊', '蒐集系統資訊', '蒐集組識資訊']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191170,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,7,[Day7]JS電腦思維，軟體規劃,dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1512945011000000000,594,"終於來到javascript, 我認為學寫語言最重要的不是學語法或邏輯而是電腦思維(computational thinking)。 如果你心裡想說 ，花的發(what the f*ck?)， 我懂。
「Don't learn to code. Learn to think.」
我相信我們一開始學javascript 就是照w3c, mozilla, 或相關課程所提供的步驟做然後做完啦要自己上的時候， 就腦袋一片空白， 然後就卡住了。 對不對， 我一開始也是這樣。
總有的課程都有一點像這張圖一樣。好像覺得不會的人照做就會了。

我當時是在做freecodecamp 的挑戰連結， 然後最後的project 要做計算機， 井字遊戲，我就卡住了。
為什麼會這樣？ 我不是有做完那些課程？ 為什麼我還是不會？
其實這些課程教了我們語法跟方法， 但是從來沒有教我們怎麼用電腦思維。
電腦思維基本上來說就是把一個project 拆成很多小步驟。 然後把這些小步驟變成程式碼。 最後在優化。
舉例，我們來做個代辦事項app. 那代辦事項app需要什麼功能？
那接下來把以上的故事變成code。
把需要的變數跟方法都想好了，其他的就簡單了。 其他的就是整理跟優化這些方法，然後串介面。
這是我freecodecamp, 最後四個專案的github. 你也可以看我怎麼串介面。
最後是有人教我這套思考模式， 我才完成這他媽的難的四個專案， 我也拿到freecodecamp 的前端證書。  WOOHOO!
",,"['電腦思維', '參考連結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191255,ModernWeb,0,TypeScript-初學之路系列,4,Day04-BasicType,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512944562000000000,528,"為了要讓更清楚的使用 TypeScript 會從最基本的元件 numbers, strings, structures, boolean, values 這類的動作， TypeScript 支援宣告這類型的 types
宣告最基本的 true/false 在 TypeScript 中稱為 boolean
和 Javascript 一樣，在 TypeScript 中預設的是浮點數
而這個類別統一為 number 也支援
另外一種工程師常用的類型是字串
這種形態使用 string 來做宣告，在 TypeScript 中都允許使用單引號(') 或是 雙引號("") 來做字串的宣告
你也可以使用 template strings，宣告使用 backtick/backquote(`)
這個 template strings 也可以寫成
TypeString 和 Javascirpt依樣允許你使用 Array， 宣告時使用 [] 來做類型宣告
Tuple 允許你宣告每一個參數的類型
好處就是當你明確的定義類型的時候，使用的時候就會有明確的錯誤訊息
另外一種特別的型別是 enum 你可以定義哪些允許的類型列表
你也可以設定 enum 得值
也可以直接定義 key值
我們要描述一個變數
但是在攥寫程式的當下不知道他的類型
這個值是屬於動態的內容
所以可以利用 any 來做宣告
any 類型相當的彈性
你也許會期望 object 也會有一樣的情況
但是 object 並不允許你呼叫任意的函式
即使他真的存在
void 有一點像 any
他並沒有任何類型
你可以在沒有回傳的函式中使用它
當你宣告變數為 void 的時候
你只能 assign undefined 或是 null
在 TypeScript 中 undefined 和 null 有他的類型就叫做 undefined 和 null
就像 void
他們沒瞎小路用
預設 null 和 undefined 是各種類型的亞類型
也就是你可以 assign null 或是 undefined 給 number 類型的變數
然而若是你在 tsconfig.json 中的選項 strictNullChecks 設定為 true 則 null 和 undefined 只能 assign 給 void 和他們的各自類型。
若是一個變數有多重可能
你也可以利用 union  類型
never 類型代表永遠不會發生
例如你的函式確認永遠都不會回傳任何值
那麼你就可以利用 never 類型
或是某一個變數永遠都是 false 你也可以設定他為 never",['Introduction'],"['Boolean', 'Number', 'String', 'Array', 'Tuple', 'Enum', 'Any', 'Void', 'Null 和 Undefined', 'Never']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191242,ModernWeb,0,30天串接30個GoogleAPIs的服務應用系列,7,[day7]-創造自己的地圖服務應用，GoogleMapsAPI抓取當前位置練習,KingTzeng,https://ithelp.ithome.com.tw/users/20103130/ironman,1512944266000000000,649,"長期用電腦的我們肩頸那邊的筋很僵硬，天氣突然變冷了連帶也會造成腦部疼痛...
記得要保暖好頭部和頸部，程式開發者辛苦了TAT (敬禮
抱歉星期六也就是昨天天氣變化太大身體不適，也就先卡文了...
昨天的文就改寫peter0521網友留言點播的Google Calendar API Sample練習好了...
因為我都是當日寫的沒有庫存文章...
擇日補上，非常抱歉...
今天緩一下來做地圖定位這塊的撰寫好了
Google Marker的應用尚未結束，還有很多Event沒有解說，請搬板凳慢慢等待...(被打
大家用Google Map最常的動作""之一""，應該有定位目前的位置這個功能吧～
定位目前位置可以作很多的應用，舉凡購物時可以找尋你家附近的分店、或是你迷路時打開目前定位導航等....
那就不多說，附上參考資料
Maps JavaScript API - Geolocation
其實定位非常的簡單，原理是：
這箇中的奧妙就在獲取設備當前的位置是用Javascript提供的Web API來取得經緯度，而不是用Google提供的API來取得經緯度！

參考資料 - MDN開發者技術文件 Geolocation
解析一下Google的Sample

navigator.geolocation會回傳一個 Geolocation 物件，透過這個物件可以存取Device的位置資訊。
但是因為有隱私的因素在，會先詢問User是否允許授權！（重要）
[ 這邊有我今年自己的做的side project來做截圖範例 ]
跳""是否允許授權""↓

允許授權後↓

大致上該注意的就這些了～（欸？就醬？
練習Time
所以練習寫顯示目前位置的地圖~

giphy大圖連結 http://gph.is/2jhOjZf
趕快在deadline前斷尾（逃....
附上完整程式碼
Demo連結：https://tinatyc.github.io/King-Ironman-30Day-Challenge/page/day7/
為啥我的GIF一直弄不好
實作Demo目錄 on GitHub
同步刊登於King 學習前端之人生
[ 著作權為King Tzeng所有，請勿抄襲或致敬＝口＝]",,"['結果假日天氣變好冷...頭痛荒廢了兩天...', '文後-']",,"['起始式', '獲取設備當前的位置 -> 取得經緯度 -> 傳給Google Maps API']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191248,自我挑戰組,0,迷路還是繼續往前走的菜鳥工程師日常系列,6,[Day06]不負責任的Git教學01,overflow,https://ithelp.ithome.com.tw/users/20107577/ironman,1512944053000000000,603,"今天開始是不負責任的教學文章，可能從頭廢到尾，你還是什麼都沒學到
進入不負責任GIT主題，我相信大家再學習新技術的時候，都會自行腦補，甚至轉換為自己懂的語言儲存在腦袋裡面，所以以下的內容，有誤的機率很高，當然如果你跟我的語言是共通的，那肯定有機會幫到你XD
如果你還沒準備好被我殘害，這邊還來的急轉彎，可以看保哥的GIT教學文章 傳送們
什麼是GIT? 我只知道GEE GEE GEE耶！（爛梗還敢說
一個很爛的故事，我寫完我都不可置信 瞎扯蛋
你可以想像自己本身(master)也可以有多重人格(branch)
例如你平常可能非常聒噪(master)，遇到喜歡的人就會變沉默寡言(branch)
你從聒噪切換(check out)到沉默寡言
當喜歡的人漸漸發現原來你不沉默寡言，所以你也不必再隱藏了
在喜歡你的人面前你可以沉默寡言亦可以非常聒噪(merge)
好啦！稍微正經一點介紹
簡單說他就是版本控制系統，你的檔案做的所有改變，他都會記錄起來。你不必再擔心檔案被覆蓋或是東西改壞救不回來，不必為了備份，複製很多個資料夾 website1208、website1209、website1210等等......
把自己桌面搞得亂七八遭，甚至有時候又分不清楚誰是誰
首先想要成為工程師當然要有一個GitHub阿，不然要怎麼跟上
不會連註冊都要教學吧？一點進去就跟你註冊facebook很像！
輸入username使用者名稱、email信箱、password密碼，就可以了！
先下一步到底就對了，因為我也都看不懂啊，所以我無法介紹中間的設定，安裝完成後開啟cmd(命令提示字元)，輸入git --version
有跳出版本資訊就代表安裝成功拉
就先點+然後new repository

接著有我不負責任的英文亂翻譯，這邊就是請你輸入你要建立Git的專案名稱，然後最下面要打勾產生空白「初始化的版本」

接下來就會跳轉到專案的頁面，點下綠色按鈕，再點紅框的小按鈕，就先不理其他東西了

接著開啟cmd(命令提示字元)，並移動到你要下載專案的位置 例如:桌面
並輸入git clone 剛剛複製的網址下載完後就可以在桌面看到這個資料夾了
接著可以打開資料夾觀看隱藏的檔案是否有git的資料夾，基本上都不會去動他，只是要讓你知道git相關設定和紀錄都在裡面

好啦！今天就不負責任的介紹這樣，不然我一次說完就沒梗了並消失在鐵人競賽裡面XDD",,,"['註冊 GitHub', '安裝 Git', '在GitHub建立專案', 'CMD基本指令']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191238,自我挑戰組,1,用laravel尻出自己形狀的linebot，還要撐三十天！系列,5,【第五天】推送通知PUSH!　Part2（2/2）,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1512943994000000000,624,"大家晚上好，今天要來把推送的樣板實作上去！以下面那隻小小兵為例！

為什麼會選他咧？因為我想做的事情是做一個推送巴哈動畫瘋的當日當季新番動畫列表！
所以對這需求來說，有張小截圖是很合理的！
好啦不廢話開始進入正題吧～
還記得昨天做的那隻推送訊息的function嗎？
如果有自己看過官方的API文件大概就會知道為何我註解寫的content可以是MessageBuilder|string，如果還沒看也沒關係，吃連結吧！
或是直接看程式碼也有說明他吃MessageBuilder這個介面的物件！
LINEBot.php
沒問題！我們就餵給他這個物件！但要選哪一個咧？依照我的判斷應該是發綠光的那個！

如果你是使用PHP Storm 可以直接 ctrl(用mac的是command) + 左鍵 點擊 MessageBuilder，就可以快速查找有哪些物件有用他了

如果是用VS code的話好像要另外下載套件，我記得是按F12的樣子
那我們再來看看TemplateMessageBuilder這個樣板Message是在幹嘛的！ 文件
恩～看來他又要餵一個叫做TemplateBuilder介面的物件，依照文件上描述他可以有這四種物件！

那我們就用一樣的找法，可以找到有用這介面的四種物件吧！

恩～仔細看了一下，多的兩個是CarouselTemplateBuilder和ImageCarouselTemplateBuilder，看起來是多提供給我們拿來包複數個的CarouselColumnTemplateBuilder和ImageCarouselColumnTemplateBuilder！真是太佛啦！
那話不多說，我們就先從寄送單一個ImageCarouselColumnTemplateBuilder來試試看吧！
ImageCarouselColumnTemplateBuilder.php
恩...又來了一個TemplateActionBuilder，一樣的方法去追code，這次就不廢話了，我選UriTemplateActionBuilder這個來使用！
頭暈了嗎！？
仔細整理一下這個大腸包小腸的概念到底是包了什麼！

然後我們就可以組出下面這個！
LineBotService.php
LineBotServiceTest.php
我們先別急，把他dd出來看一下他吐回的訊息是什麼
這是一坨大雷！
一開始我完全搞不懂他到底是在表達什麼！
unknown template type我都已經照文件上給的了，應該沒有問題才對！到底是鬧哪樣了呢？
接著我開始去細看每一個物件到底在必瞎咪懵！發現他是在組json的字串格式！ 文件
沒錯，最終目的是要組出跟這有８７％相似的陣列。

有想法了嗎？對的，就是那同個interface的另外一個物件ImageCarouselTemplateBuilder！
我們就把它拿來用用看吧！就決定是你啦！
LineBotService.php
LineBotServiceTest.php
恩～收到一堆垃圾了！

好欸！成功了！
接著我們稍微整理一下我們想要塞入資料的格式，最後會生出下面這個，詳細可以參考這裡
LineBotService.php
LineBotServiceTest.php
好啦！今天時間差不多了，如果有任何其他問題或是建議都可以在底下留言回覆喔！","['【第五天】推送通知PUSH!\u3000Part2（2/2）', '然後他就400了！What!!!?']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191254,ModernWeb,2,重新認識JavaScript系列,7,重新認識JavaScript:Day07運算式與運算子[2]:「比較」與自動轉型的規則,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1512943874000000000,689,"在上一篇文章當中，我們介紹了四則運算的算術運算子 (Arithmetic Operator)，那麼在今天的分享當中，我們繼續來看看其他運算子吧。
昨天寫完之後才突然想起，算術運算子除了用來做「兩個數值」的四則運算、取餘數的作用以外，還有另外一種是只需要單個數值就可以完成運算，這類運算子通常會被稱為「一元運算子」 (Unary Operator)。
如同我們過去在學校所學的數學一樣，正號 + 與負號 - 分別用來表示數字的「正數」與「負數」的狀態。
但有趣的是，若是正號 + 與負號 - 後面帶的並不是一個數字型態的值，那麼 JavaScript 會在背後先透過 Number() 的方法嘗試著將其轉型，再看前面帶的是正號 + 或負號 - 來決定其數值。
而物件型別的情況下，則是會先透過物件的 valueOf() 方法先求得對應的數值，再依照正號 + 或負號 - 來決定其數值。
如果得到 NaN，那麼結果就是 NaN。
所以說，如果你覺得 Number() 太長，又想做數字轉型的話，透過加號 + 也會有一樣的效果。
除了正號 + 與負號 - 之外，另一種更常見的一元運算子就屬「遞增」 ++ 與「遞減」 -- 了。
遞增與遞減就如同字面上意思一樣，當變數遇上了 ++ 就會加一，而 -- 就會減一：
所以 ++ 與 -- 這兩個運算子，你可以把他們當作是： a = a + 1 與 a = a - 1 的意思。
但是除了遞增與遞減的功能外，++ 與 -- 這兩個運算子的位置也是有差別的喔。
這裏我們簡單做個比較：
我知道看完之後你可能會想翻桌，根本就一樣嘛。
別急，就結果來說， ++ 放在變數前面與放在變數後面，是一樣的沒錯。
我們換個寫法再來一次：
看出差異了嗎？
當我們將 ++ 放在變數後面時，回傳的結果會是「原始的數值」。
而 ++ 放在變數前面時，得到的會是「+1 之後的結果」。
當然事後再將兩者印出時，就都會是 +1 之後的結果了， -- 的概念也是一樣。
結束了算數運算子之後，接著我們要來看比較運算子。
比較運算子就是用來比較運算子兩側數值 (可能是純值、物件，甚至某個運算式或函數回傳的結果)，比較後得到 true 或 false。
針對不同型別的數值，JavaScript 會嘗試將它們在背景 (自動) 轉型到同樣型態後，再做比較。
很多朋友在剛接觸 JavaScript 的時候，應該都會搞不懂「兩個」等號 == 與「三個」等號的差別 ===，這裡就來詳細說明。
一個等號 = 的情況很單純，是「指定、賦值」的意思，像：
此時會將等號右側的值 (10) 指定至變數 a 當中。
而若要比較數值的情況下，多數程式語言會用「兩個」等號 == ，來為左右兩側的資料進行比較。
當然 JavaScript 也有：
看起來很 ok 對吧？
但是如果是兩個「資料型態」不同的比較呢？
猜猜看，此時 console.log( a == b ); 會是 true 或是 false？
答案是 true。
這時候問題就來了，一個數字的 10 與字串的 ""10"" 居然會相等？
真不知道該說是 JavaScript 太貼心還是太不嚴謹。
如果是數字與字串也就算了，我們來看看下面這個例子：
來猜猜看，這兩個運算式的比較結果會是什麼？ 答案都是 false。
另外我們再來看看各種莫名其妙的比較判斷：

然後：
看完還覺得 JavaScript 如此貼心嗎？ 是噁心吧

「JavaScript 我真是猜不透你啊～」
為什麼會這樣？ 等等我們回頭來介紹 JavaScript 自動轉型的規則，你就知道了。
所以後來，為了排除這種奇怪的問題，於是就新增了「三個等號」=== 這個比較運算子。
三個等號 === 與兩個等號 == 雖然都是比較的意思，但最大的差別在於「三個等號 === 不會替數值做自動轉型」。 也就是說，回到一開始的例子：
在 === 的情況下，數字的 10 與字串的 ""10""，由於 JavaScript 不會做自動轉型，所以結果會是 false，它只會在雙方的數值與型態都相等的狀況下回傳 true。
而原本 null == undefined 的情況下會得到 true，改成 null === undefined 之後，得到的會是正確的 false。
這也是為什麼在 JavaScript 這門程式語言中，大家會提倡盡量使用 === 來取代 == 的原因。
除了判斷是否相等以外，與之對應的還有「不等於」。
當然不等於也分成 != 與 !== 兩個版本： != 的版本會做自動轉型，而 !== 則不會做自動轉型。
就觀念上來說都是一樣的，這裡就不再贅述。
前面提到，在兩個等號 == 的比較運算式下，若是雙方的資料類型不同時，則會進行「自動轉型」，那麼這裡就來說明自動轉型的規則。
除此之外，還有前面文章曾提到過的：
除了判斷是否相等以外，當然也有為數值的「大小」來做比較。
使用的運算子就是大家都很熟悉的大於 >、小於 <、大於等於 >=，以及小於等於 <= 符號。
當然此類運算子也會遇到不同型別要「自動轉型」的狀況，規則大致如下：
另外， => 不是運算子，是 ES6 的箭頭函式，後續我們會來介紹這個東西，小心不要搞錯了。
「自動轉型」一直是 JavaScript 初學者很容易搞混的地方，希望透過今天的介紹可以幫助各位理解，如果覺得不過癮的話，還可以參考「JS 真值表」

保證讓你剛入門就放棄 (欸
別擔心，正常情況下，大部分的奇怪狀況你應該都不會遇到。
那麼感謝各位一路看到最後，以上就是今天分享的內容。",,"['算術運算子之二', '比較運算子 (Comparison Operators)']","['正號 + 與負號 -', '遞增 ++ 與遞減 --', '「相等」 == 與 「全等」 ===', '不等於 != 與 !==', '自動轉型的規則', '數值的大於 > 與小於 <']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191250,SoftwareDevelopment,1,每天Racket3分鐘系列,7,"(display""λf.(λx.f(xx))(λx.f(xx))—day-06—Racket的Function與Lambda—1"")",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1512943669000000000,542,"他是圖靈在普林斯頓時的老師，是當時一位頂尖的數學家與計算理論專家。當一個文化進入另一個時，首先需要做的是將原有的語彙翻譯過去。然而在台灣的電腦科學界，我找不到這個人名字的翻譯。他叫做 Alonzo Church，在對岸的文章中稱他為：阿隆佐，邱奇，因此，我文章以 Church 來稱呼他。
在那個時代裡，還沒有現代的電腦，那時人類還在探索用機器進行數學計算的可能性。而 Church 正是投下第一彈的人，提出了將數學函式抽象化的原則：lambda calculus。
從這時候開始，人類開始討論的不是函式怎麼算出來，而是函式的抽象變化與應用。lambda calculus 的概念也形塑了最早期的程式語言模型。
回到現代，這個時代最多人用的語言，我想應該是 JavaScript，網頁前端的人得用，有時候網站後端的人也得用。因此，我們來看兩個函式的宣告：
以上的函式，與以下的函式在語義上是等價的。
這件事我想應該很多人能快速理解它，藉著這個觀念，我們接下來要來看 Racket 的函式宣告：
同樣，以上的函式與以下的函式，在語義上也是等價的：
Racket 的函式宣告，最基本的概念是 define 一個 lambda 給 id 的過程。因此，你若在 Chez Scheme （最好的 Scheme 實作） 的 source code 看看它裡頭使用的函式宣告，幾乎清一色是用 lambda 的宣告風格。
然而，第二種宣告方式，其實是更多人慣用的方式，用 () 將函式的名稱與參數包起來，接下來就是接函式定義的本體，不使用 lambda。我猜應該是這樣寫，打的字比較少，所以更多人愛用吧！
現在，你會了基本的函式宣告，也看到上面示範的 square 了，你試著來宣告 cube （立方）吧。
很多語言其實是沒有規格書的，但 Scheme 不只有，而且言簡意賅，頁數極少。在 Scheme 規格書裡，第一章介紹整個 Scheme 語言的概覽，第一章的第一小節介紹 Scheme 的資料型態，第一小節的最後一項，介紹函式（原文稱 Procedure），他是這麼說的：
Procedures Procedures are values in Scheme. [1]
是的，在 Scheme 與 Racket 裡面，函式不是像值，函式就是值。因為它是值，在語義上，可以進行多種變化與應用。
剛剛上頭，我留下一個練習，要各位寫一個 cube 的函式。我們現在來想想，怎樣在 Racket 裡頭做連加？假設我有一組連續數字：0 ~ n，我要把它連加起來，不使用公式解，使用 Functional Programming Language 標準的遞迴解，應該怎麼寫呢？
這裡引入一個過幾天會談到的 if，if 也是一個函式，它有三個關鍵點，if 後方直接接判斷式，做完判斷後，#t 的結果放接下來第一個位置，#f 的結果放接下來第二個位置。
這樣寫很蠢，沒關係，我們再看連乘怎麼寫，給定我有一個連續數字：0 到 n，求其連乘解（前提是 0! = 1）：
這裡的操作，都是一樣的，連加與連乘 0 到 n，就是指 n 加上（或乘上）它子集的連加（或連乘）。
然而，FP 語言特性便是如此，你發現流程有重複嗎？有的，同樣要判斷值是否為 0，同樣要用 n 來加上（或乘上）它以下的值的函式結果。我們可不可以這樣寫：
然後把 sum 與 factor 改為這樣：
在這範例裡頭，各位會看到，我們之前所用的 + 與 * 全部被當參數傳了！在 Racket 與 Scheme 裡頭，它們全都是函式！這也就是為何我們在第三天時，直接打 1 + 1 時，會出現：
的緣故。好，最後一個變化，使用我們前面的 square 與 cube，並加上一個 identify。
現在，你不只可以連加，還可以連加它的平方，也可以連加它的立方。",,"['1. 從圖靈的老師談起', '2. 來看看最有現代感的 JS', '3. 回到 Scheme 規格書', '4. 你的語言能不能這麼做']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191249,ModernWeb,0,TypeScript初學之路系列,7,Day07-Classes,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512943632000000000,536,"傳統的 Javascript 使用 function 加上 protyotype-based 來繼承建立元件
但是這樣的機制對程式開發者習慣 Object-oriented 的感覺很尷尬
ECMAScript 2015 與 ECMAScript6 中允許開發者使用 object-oriented class-based approach
最基本的 class-based 範例
這樣的程式對 C# 或是 Java 的開發者應該會比較親切
宣告了一個新的 class Greeter
這個 class 中有一個屬性是 greeting constructor 和 greet
看到有一個關鍵字 this. 之後可以呼叫這個 class 的屬性
在 TypeScript 中可以直接使用 object-oriented patterns
當然也可以建立一個 class 做繼承的動作，
範例
上述範例中以 extends 這個關鍵字來建立一個子類
Horse 和 Snake 是繼承在 class Animal 之下的子類
在子類中的 constructor 必須使用 super() 這將會執行父類的 constructor
這個範例也示範了如何覆寫父類的 Function 在 Snake 和 Horse 都有建立一個 move 的 Function 來覆寫過 Animal 的 move 執行結果後如下
在我們的範例中可以自由地宣告屬性
但在其他語言(C#) 需要使用 public 這個關鍵字來規範屬性是不是可以被瀏覽
但是在 TypeScript 中 public 是預設值
但是你也可以使用 public 來宣告屬性
當某個屬性使用 private 來宣告
他不能來宣告，他不能被直接呼叫
TypeScript 是一個結構型態系統
我們比較兩種不同的類別
不論他們是如何產生的
只要他們的所有屬性沒有衝突
我們就可以稱這兩個類別是相容的
然而當兩個類別在比較的時候如果擁有 private 和 protected 屬性
除非他們所這個 private 和 protected 繼承的是同一個父類別才會是兼容的
否則在形態上兩個都會是不同的
在這個範例中我們有 Animal 和 Rhino 兩個 class
Rhino 是 Animal 的子類別
另外也有一個 Employee 他看起來和 Animal 十分相似
都有一個 private name: string
因為 Rhino 是繼承 Animal 所以 Animal 實體化後可以 assign 給 Rhino 的實體並不衝突
代表他們是相容的，而 Employee 即使有一樣的 private name: string 但是卻無法相容，
因為他們並不是在同一個父類的類別
protected 和 private 很相似，只是當你宣告為 protected
我們沒辦法直接呼叫 name 但是可以透過 Employee instance method 來使用，因為 Employee 繼承自 Person
我們也可以將 constructor 宣告為 protected 這代表這個 class 只能用來繼承，而無法直接產生 instance
你可以宣告某些參數或變數是 readonly 使用 readonly 這個關鍵字來宣告\
但是必須在初始化或是在 constructor 的時候進行宣告
TypeScript 支援 getters/setters 去對 Object 中的屬性進行取值或是修改
我們希望使用者是有足夠的安全性，所以使用 private 宣告 fullName 然後允許使用 set 來對 fullName 來做修改
command line
有兩點需要注意
在這個部分我們討論的是實體的屬性
也是靜態屬性 實體的屬性 也是靜態屬性 這個屬性只能在 class 中取得
而無法被繼承
抽象類別就像之前的類別一樣 也許不需要實體化
使用 abstract 關鍵字來宣告抽象類別與抽象函式
abstract 中的函式並不會並不會包含在實體
也一定會使用 abstract 關鍵字來做宣告定義
抽象類別無法直接使用 new 產生物件
若是在抽象類別中並沒有宣告的類別與屬性 其子類別即使寫了也無法使用
在 TypeScript 中宣告一個 class 的時候，其實你已經同時執行了多個宣告
上述範例中當 let greeter: Greeter 我們將會使用 Greeter 類別的 instance 賦予 class Greeter
當我們使用 new 這個關鍵字來實體化的時候
便會執行 constructor 轉譯之後的結果如下
在 let Greeter 就會準備指定給 constructor
而看到接下來的 new 關鍵字並且開始執行 constructor 就會取得一個藉由 Gretter 這個函式實體化的一個結果
在修改一下上面的範例
在這個範例中我們在 Greeter 宣告了一個靜態的屬性 standardGreeting並且給予值 Hello, there
第一步驟跟之前的範例一樣，利用 Greeter 產生了一個物件是 greeter1 然後將他的類別 assign 給 greeterMaker
並且修改了他的 standardGreeting 為 Hey there! 之後再由 greeterMaker 產生一個 greeter2 當它的 greet()
執行的時候產生的字串卻是 Hey there! 而且此時我再次執行 greeter1.greet() 的時候得到的卻也是 Hey there!
也就是當我們 可以利用 這樣的方式統一管理一個靜態屬性也會互相繼承靜態屬性",['Classes'],"['Basic Classes', '繼承', 'Public, private 和 protected modifiers', 'Readonly modifier', 'Accessors', 'Static Properties', '抽象類別', 'Advanced Techniques']","['public by default', '了解 private', '了解 protected', 'constructor function']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191253,自我挑戰組,1,30天的切版日記系列,7,Day7:做個DatePicker(一)-靜態結構+樣式,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1512943407000000000,546,"日曆是網頁上常用的工具，也來自己做做看

今天先做靜態結構+樣式
**日曆這種東西很容易被使用在各種頁面，class命名上取的略長，以防在網頁中重複命名。
有先丟到github : 連結
這配色是因為聖誕節快到了～",,"['首先是html結構', '再來是css']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191251,SoftwareDevelopment,0,30天iOSAPP開發系列,5,[Day05]OpenData,d3764291,https://ithelp.ithome.com.tw/users/20107588/ironman,1512943264000000000,535,"open data近來越來越受歡迎。而政府也漸漸開放越來越多的資料。
因此本專案預計抓取open data的資料來APP做呈現
((禮拜天比較偷懶...
明天預計測試使用APP抓取資料並顯示
Wiki open data","['Open Data', '參考資料']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191245,ModernWeb,0,挑戰CSS30天系列,7,day7_cursor,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1512940889000000000,553,"今天比較忙，先簡單放上一些內容
滑鼠游標圖案
加上 style=""cursor:pointer"" 即可
其他滑鼠游標圖案，參考",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191244,SoftwareDevelopment,0,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,4,Day04-增加RestRepositories讓SpringData直接升級為RestAPI,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1512940496000000000,565,"前一篇只有用到 Spring Data, 但我們很多物件都有 CRUD 的基本操作,
你就必須寫很多 CRUD Controller, CRUD Controller, CRUD Controller, CRUD Controller......
請不要再這樣浪費生命了....
現在起你連一行程式啦都不用寫....
透過 Spring Data 原本提供的功能, 再加上這個套件
然後把原本的 @Repository 換成 @RepositoryRestResource
這樣我們的 Book 物件, 一行程式都不用寫
就可以透過
POST   /books
PUT    /books/{bookid}
GET    /books/{bookid}
DELETE /books/{bookid}
就不用一直重複去寫這些 CRUD 了
但是通常你會有需求不想讓所有 API 對外開放 ex:DELETE /books/{bookid}
你可以進一步用這個註解開控制是否對外 @RestResource(exported = false)
整個改完程式就會像這樣
build.gradle
BookRepository.java
我把 CRUD 的 Override 都列出來,
delete 功能我們控制 RestResource(exported = false) 不對外開放
程式啟動後可以透過
來知道這服務提供多少個 API 來操作

查詢分頁
取得單一資料
然後我們試一下刪除是不是真的會被外面 RestAPI 給刪除
就可以很清楚看到 405 此操作已被拒絕了
你看 CRUD 都不用重複再開發, 查詢也支援分頁
是不是大大節省我們重複寫一些基本操作的時間呢?
work smart not work hard!!
多用一些新的工具節省你的精力, 把時間花在你的商業邏輯吧~~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191067,自我挑戰組,0,iflen(learning.python)==30:系列,7,Day7-String-操作,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1512937379000000000,538,"操作層面分為取出資料、如何走訪和如何異動資料...，等等，string是immutable所以不能異動!
可以取出list中的某一個資料(字元的概念)和部分資料(子字串的概念)，分別為indexe和sliced
...
...
...
慢著!這段根本就是從Day3-List-操作 複製貼上的阿!
哈哈，沒錯，不過仔細想想這也是python這門語言厲害的地方吧，將同一套抽象操作運用在不同的資料型態。
使用+連結，但若為不同資料型態時，例如int，會發生甚麼事呢?
利用splitlines, strip, split, replace組合，簡單計算詞頻
source from 25 Hints You’re Working on a High Performing Team",,"['取出資料', '走訪', '其他', '參考']","['concatenate', 'count: 計算子字串出現次數', 'find: 尋找子字串', 'splitlines, strip, split, replace']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191237,自我挑戰組,0,資訊技術解戈迪安繩結系列,3,IT｜程式設計｜Front-End｜Cordova+eclipse,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1512936028000000000,556,"前言
談起跨平台手機 Apps，PhoneGap 應該算是最為人熟識的 Framework。
PhoneGap 與 Cordova 的實際差異：按照官方的說法 PhoneGap 是 Cordova 的一個 distribution。
原來是 Adobe 在 2011 年從一家小型公司手上收購了 PhoneGap。然後又把它的 Source Code 捐獻了給 Apache 基金會成為 OSS。但 Adobe 又保留了 PhoneGap Build 這個服務自己獨有。
從此於是乎兩者的關係曖昧不清…按照官方的說法 PhoneGap 是 Cordova 的一個 distribution。
”PhoneGap is a distribution of Apache Cordova. You can think of Apache Cordova as the engine that powers PhoneGap, similar to how WebKit is the engine that powers Chrome or Safari.“
實作
作業系統：Mac
[Hello World]
確保 Android SDK 已經有被加入 PATH 環境變數中，在 Mac 上可以加到 ~/.bash_profile 裡面
export ANDROID_HOME=/Users/Kevin/Agile-MAC/Android/android-sdk-macosx
準備 ios build
1.安裝 Xcode
2.安裝 ios-sim、ios-deploy
3.安裝 Node.js
官方建議 用 npm 來安裝 Cordova
sudo npm install -g cordova
建立 Hello World 專案
cordova create hello com.errui.hello HelloWorld
上述指令會建立一個 hello 目錄，接下來的指令都是要在這個 hello 目錄下執行
查詢目前 cordova 支援的平台
執行 Hello World 程式
如果目前在 Android 模擬器那邊已經建立了多個 AVD 的話，
跑起來的可能不是我們要的那個，
可以執行下面的指令先看一下目前有的 AVD：
cordova run android —list
若是要指定 Nexus_4_API_15 這個 AVD，可以這麼做
cordova run android --target=Nexus_4_API_15
下面就是 Android 和 iOS 模擬器，分別把 Hello World 專案執行起來的畫面
Android

iOS

參考資料：
Cordova: The Command-Line Interface
Cordova: Android Platform Guide
Cordova: iOS Platform Guide
http://blog.tiger-workshop.com/difference-between-phonegap-and-cordova/",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191187,自我挑戰組,0,,7,Securityisnoend.,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1512935055000000000,554,Security is no end.,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191230,ModernWeb,1,初探前端之路-React-由生到死的踩地雷系列,1,為什麼我用:hover滑鼠放在圖片邊緣會一直閃？,Luis-Chen,https://ithelp.ithome.com.tw/users/20103556/ironman,1512934679000000000,580,"大家好，我大概都是直接從問題點出發，並寫記錄我的解決方式，但不一定是最好的解決方法，所以還煩請大大提點了
我有用 hover 讓我圖片滑過鼠標時，他會縮小transform: scale(0.95);
而如果沒有多做細節當我滑鼠停在圖片邊緣時，會一直閃，會像下圖：
圖檔好像不能支援gif? 情況圖片連結
via GIPHY
參考來源
有幾種解決狀況
#1.加一個寫法：如下圖
需要在加:not把:hover 包進來
#2. 這個其實也是從參考來源那邊的範例，只是這是我做實驗的結果：
就我所看到的話，預覽圖
其實還是會有閃爍的情況，但是有改變了，這時候的閃爍情況，只因為你按到了他的預設的圖片大小的邊緣，當你在邊緣左右滑動時，不停的觸動到他的:hover 所以才會縮放(閃爍)
好像還可做更好，像是每個圖片再加邊框，防止圖片太過接近而造成(閃爍情況)，有新的發現在補","['前言', '問題情況', '解決方式', '總結']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191233,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,7,Phoenix起步走：新增頁面與路由,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1512932077000000000,589,"接續昨天的進度，現在我們有一個乾淨的Phoenix專案
首先來新增一個靜態頁面
打開lib/hello_phoenix/web/router.ex
這個檔案是專案的路由
所謂的路由，就是決定網址如何對應到程式的對照表
通常是對照到控制器（controller）（在Django就是對照到View）
如果你大致瀏覽一下，可能會注意到pipeline :browser與pipeline :api
我個人認為這是相當好的發明
因為這邊算是新手指引，所以先不解釋太多
簡言之，就是讓透過瀏覽器與API兩種不同的進入專案模式可以做不同的處理
後面有機會再詳細說明。
我們讀到這一行get ""/"", PageController, :index
這就是我們看到的預設首頁的路由
我覺得能看到是蠻好的，有助於新手了解來龍去脈
像是Rails的預設首頁路由與內容都是藏在底層運作
也難怪很多人會說Rails充滿著黑魔法（不知道為什麼，但是會動）
要新增頁面，我們先建立一個路由
在首頁的路由下面新增這樣一行：get ""/hello"", HelloController, :index
如果你之前碰過任何一種現代網站框架，你大概就已經能理解這一行在講什麼：
當GET方法訪問 http://localhost:4000/hello 的時候
對應到HelloController的index方法
也就是上面提到的網址與控制器的對應關係
順帶一提，透過在瀏覽器輸入網址的訪問，就是GET方法
如果要模擬POST或其他方法（通常是測試API時），可以透過一些工具
很遺憾的，當你新增完路由以後，controller不會自己產生
你可以透過指令或是手動新增檔案，這邊我們先手動新增
建立lib/hello_phoenix/web/controllers/hello_controller.ex
然後把下面內容複製貼上：
這邊稍微說明一下命名慣例
你可能會好奇為什麼在路由與程式內我們使用HelloController
但是檔案名稱卻是hello_controller
沒有為什麼，這就是慣例（XD）
首字大寫的組合叫做「駝峰式命名」(Upper Camel Case)
也可稱為「帕斯卡命名」(Pascal Case)
另外一種全小寫，用底線連結的我不知道怎麼稱呼（如果你知道請告訴我！）
如果你符合慣例，程式就會自動找到對應的檔案
這樣的慣例在Rails也相同
如果你硬要不符合慣例，也可以在後面指定路徑讓程式知道去哪裡找
但是建議千萬不要這麼做，只是增加維護的困擾
新增完controller後，我們接下來新增對應的view
請在 lib/hello_web/views/hello_view.ex這個位置
複製貼上下方的程式碼：
最後在 lib/hello_phoenix/web/templates新增一個新的資料夾 hello
在裡面新增一個檔案 index.html.eex，複製貼上：
然後在瀏覽器輸入 http://localhost:4000/hello
你就可以看到

在Phoenix修改程式，是不需要重新啟動伺服器的
這一點相當方便
現在我們新增另外一個頁面，可以從網址接收參數
首先打開路由，在剛剛的hello下新增一行：
接著到剛剛的hello_controller.ex新增show方法：
最後一個動作，在剛剛的hello資料夾下新增一個show.html.eex
好了！現在如果我們打開瀏覽器，輸入 http://localhost:4000/hello/bater

基本上在hello後面的參數不管接什麼名字，都會呈現在畫面上
現在回頭說明一下什麼是 *.html.eex
eex就是Elixir會事先編譯的文件，前面有html
代表是Elixir編譯過後會產生HTML
在這樣的文件內可使用Elixir語法，跟Ruby的erb一模一樣
剛剛新增了兩條新路由，你可能還沒有感覺
但之後如果每次有新的功能就要新增一次路由
感覺非常麻煩
所以Phoenix跟Rails一樣有resources 懶人工具
他會一次幫你產生八個常用到的路由
比如說：
他會自動產生下面的路由
順帶一提，如果你想查詢目前有什麼路由，指令是：
相當於Rails的
恩，Rails還是比較簡短優雅呀！
當然，如果你用不到這麼多
與Rails相同，這邊也是支援only與except
假如你輸入 resources ""posts"", PostController, only: [:index, :show]
那麼就只會產生：
resources也支援套疊，後面scope與指定controller方法都與rails大同小異
實在沒有動力複製貼上
有興趣的朋友在需要用到時可以查詢用法
（看Rails的路由教學可能也有相同的效果ＸＤ）","['新增路由 (Router)', '新增控制器 (Controller)', '新增View', '新增 Template', '新增一個接收參數的頁面', 'Router']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191235,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",7,Day7-Hadoop之MapReduce實作,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1512930104000000000,585,"前面介紹完了HDFS的基本操作與指令介紹後，接下來要來簡介MapReduce分散式運算的實作，終於可以寫點程式啦！
由於Hadoop原始碼是由Java所撰寫，當然MapReduce也需要使用Java來實作囉。本篇將會實作MapReduce界中的Hello World - word count。
首先使用先在本機機器產生兩個檔案：wordcount_target1與wordcount_target2，內容分別為：
接下來在HDFS上建立一個資料夾，並且將這兩個檔案上傳到資料夾內：
如果MapReduce job成功送出到Hadoop上執行後，Yarn會接手資源控管，可以透過web ui：
http://{host_or_ip}:8088 觀察MapReduce運作的情形。
註：{host_or_ip}請輸入安裝時namenode所在的host name或是ip。如果是Standalone安裝模式，請輸入localhost。
成功執行程式碼後，想必有些人應該是滿臉問號，下一篇就來解釋程式碼的運作流程吧。",,"['WordCount的範例程式', '使用說明']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191042,自我挑戰組,1,自我挑戰日記系列,5,CSS：background線條、同心圓,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1512927981000000000,585,"今天要利用前面文章寫到的漸層做線條、同心圓背景
先指定顏色
範例 一

但這只是漸層還不是線條!
應該要是色塊呈現而不是漸層
所以在2個顏色中間增加 ""前一個顏色 + 後一個位置"" 產生不會漸層的方式
例如水平線的 #0c1f91 0px, #fff 25px 是漸層
中間增加 #0c1f91 25px →  #0c1f91 0px, #0c1f91 25px, #fff 25px 就會是色塊
範例 二

就會是國旗和眼珠了!!??
若要作為背景
有另一個方法就是連續 重複的區塊 也就是重複範例二 的漸層
範例 三

使用在背景上就很快速了
作法就是將 範例 二 的 COPY 然後在 linear-gradient 或 radial-gradient 前面加 ""repeating-""
最後再加上 結束的顏色及位置 拉出結束顏色的寬度

就會跟使用圖片背景一樣自動延伸填滿
還可以利用顏色的寬度作變化

--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191234,ModernWeb,1,ZerotoherowithReact.js系列,4,【Day4React】終於跟World說HelloWorld!,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1512926914000000000,622,"簡易起手式，我使用 CDN 引入 React 來理解 React 的運作原理
我們需要的 CDN 有三個：
有了 Babel 翻譯機，我們用 JSX 語法暢快地在 JavaScript tag 裡面寫 HTML 語法，而在 <h1>Hello World!!!</h1> 的下一行又是原生 JS 語法，讀取擁有 root ID name 的元素，將我們要渲染的內容透過     ReactDOM.render 填入我們要產生 DOM 的區塊。

我把剛剛那段 JSX 程式碼貼到 Babel 去  compile 看看它會幫我們翻譯成什麼樣的程式碼：
可以看到 Babel 幫我們轉譯為 createElement 這個 JavaScript 語法。

Babel 讓我們的程式碼在各個瀏覽器都可以使用，如果你寫了很高深很前衛的語法，但你的瀏覽器版本可能比較舊，Babel 會 transpile 協助將你的程式碼降到瀏覽器可以支援的版本",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191232,Security,0,資安的學習心得及分享系列,7,DAY7阻斷式攻擊服務,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1512924223000000000,685,"傳統的阻斷服務攻擊DoS

(傳統Dos攻擊手法)
傳統的Dos攻擊就像單方面的封包傳送服務，攻擊者會藉由封包發送的方式來阻斷你的服務，可能你今天電腦想連接網路，結果無法上網產生中斷或停止的顯示，所以這類的攻擊常會導致使用者產生無法連接存取的功能。

(DDos攻擊手法)
DDos分散式阻斷服務攻擊
DDos就是我們常提到的分散式攻擊，一般來說我們攻擊者只要對單一目標發動攻擊就可以造成別人電腦無法存取。
但是DDos會發明是有用意的，他主要是講說基於大規模攻擊，目的是因為傳統的Dos可能攻擊不夠強，所以沒有什麼作用。
然而DDos基本攻擊的對象大多是一些知名的網站(socail network、online game)
 
原因是可以同時讓多個使用者無法連接那個網頁。其實這類的攻擊手法，也曾經出現在知名的遊戲上(LOL)，他同時讓大量玩家一起斷線，當然這是不好的手段，畢竟遊戲還是要公平競爭。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191175,自我挑戰組,0,D3.JS網頁視覺化學習系列,6,Day6圖表簡介-聚合線圖（前述）,linonedollar,https://ithelp.ithome.com.tw/users/20107135/ironman,1512921028000000000,569,"聚合線圖的作用通常是用於呈現資料變化趨勢上的使用，或者比對不同筆資料在同樣時間內的資料趨勢變化
常見用法有兩種：
第一種呈現資料隨時間內的變化趨勢，如台灣人口圖

第二種：我們常常需要比對不同的資料狀況，如果僅以表格呈現不容易讓閱聽人了解狀況，所以會做成圖表比較的方式
如薪資比較圖

昨天太晚回到家，寫完昨天的就按下上傳而忘記檢查...
不過也是一次很好的教訓，警惕之後不管做完什麼事情都要再三檢查",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191201,SoftwareDevelopment,0,那些年八歲到八十歲都可以一起寫的程式系列,2,<DAY2>Let'splay----目前市面上有哪些相關的產品,MichaelHuang,https://ithelp.ithome.com.tw/users/20107642/ironman,1512916991000000000,605,"Blockly Games:
Blockly Games不需需要註冊，點進去即可開始遊戲，每個關卡都有者不同，例如迴圈、判斷式....等，讓使用者能輕鬆在玩樂過程中的學習到該有的程式邏輯概念。

Scratch：
Scratch是麻省理工媒體實驗室終身幼稚園組開發的一套電腦程式開發平台，旨在讓程式設計語言初學者不需先學習語言語法便能設計產品。開發者期望通過學習Scratch，啟發和激勵用戶在愉快的環境下經由操作（如設計互動故事）去學習程式設計、數學和計算知識，同時獲得創造性的思考，邏輯編程，和協同工作的體驗。

Motoblockly
Motoblockly是由台灣團隊慧手公司所製作的拼圖式的程式編輯軟體，擁有直覺、便利、並且能將程式積木轉成程式優點。目前僅提供線上的方式給使用者與Arduino 相關的程式編輯，所以一般使用者在開發的過程中，事先並不需先安裝任何軟體，只需有網頁瀏覽器即可編寫使用，因此當然也可以橫跨作業系統平台來使用。不過也因目前只有線上版，所以使用者自然也得在可以上網的環境才可以使用。另外 motoBlockly 提供了使用者只須 One Touch，便可將目前所堆疊的程式積木直接轉換成 Arduino 程式碼的服務。使用者可藉此很快的學習比對程式積木與呼叫的函式之間的關聯，這對學生未來想要進階至直接以 Arduino IDE 編寫程式會相當的有幫助。不過 motoBlockly 目前還無法直接與 Arduino IDE 做連結溝通，所以使用者在完成自己的程式積木堆疊後，得先利用網頁將程式積木轉換成 Arduino程式碼，再自行將網頁上的這些 Arduino 程式碼做全選複製到自己電腦的 ArduinoIDE 上，才能做編譯上傳的動作。

參考文獻：
「 Blockly Games 」網站:https://blockly-games.appspot.com/?lang=zh-hant
「 Scratch 」維基百科:https://zh.wikipedia.org/wiki/Scratch
「 Scratch 」網站:https://scratch.mit.edu/
「 Motoblockly 」網站:http://www.motoblockly.com/motoblockly_v1.5/demos/code/index.html",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191221,自我挑戰組,2,軟體工程漫談系列,6,『用註解補足程式碼易讀性？』--論註解的是與非,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1512914713000000000,681,"這是一篇臨時追加的主題，因為在前文中，有邦友指教，聊到註解的實用性，深有感觸。同時，想到大師Robert C. Martin也在作品中不只一次強調註解的利與弊，甚至為此特留一章加以論述，於是臨時把今天的主題換成探討註解在工程師的職涯中扮演的地位，以及不當使用時可能帶來的災難。
首先，我必須說，寫註解是一個非常良好的習慣，透過較口語化的簡短敘述讓閱讀的人可以更快的了解這段程式碼的邏輯用意輸出輸入與作者的思維脈絡實在是cp值很高的投資，然而，實作上，他也很有可能因為這樣的高cp值，帶來不可輕忽的災難。
這些災難，不是註解的問題，而是使用者的使用方式違背了註解的精神，有哪些呢？症狀很多，我們簡單舉一些例子：
這是工程師很常製造的問題。以前讀書時，老師為了養成我們寫註解的好習慣，都會在程式作業裡，把註解當成評分標準之一，然而卻沒有教我們該怎樣讓註解發揮輔助的效果，與程式本身相得益彰。於是，為了分數著想，我們總是在程式寫完後，草草地在不需註解的地方加上一些相當『雞肋』的註解，譬如：
是不是很有既視感？這是一個相當常見的『為了註解而註解』的範例。既然函式命名已經很清楚，大家看一眼就知道他是要實作『quick sort』演算方法，上面那一行的註解就顯得相當雞肋。此外，創造新array不是這個函式的主要目的，所以創造這個動作也不需要特別說明，註解回傳值更是無聊！你根本沒有其他方法回傳演算後的結果，不是嗎？『那中間那一行總該是重點了吧？』 -- 他當然是重點，但是你這個函式既然只做一件事，而且在函式命名中已經簡短又清楚地交代了內容，你還有需要再進入主題前一行刻意昭告天下說『大家注意，我要開始實作quick sort演算法了喔！』不用吧？
於是，對於『了解這個函式』這個目的來說，上述的四個註解，都無法比函式名稱本身帶來更多資訊，豈不雞肋哉？
有了能提供更多好的資訊，良好的註解後，我們馬上就要面臨與程式一樣的課題：『維護』。『維護有什麼難的？』來，我們看看下面這段：
這就很明顯了，函式一開始只需要傳入User物件，所以註解裡非常盡責的定義了input，但是後來因為某種需求，想要把連接用的Connection改為由外部傳入，而且邏輯也改了，一旦比對用戶名稱不符，就會吐出一個自訂的WrongNameException。從創建以來，函式已經做了兩次以上的功能性變更，但是註解卻依然是最初版的。這可不行，他不提供資訊，我讀讀程式碼便罷，慘的是他還給了錯誤資訊，這還得了！但是造成這種情況是為什麼呢？
原因很簡單。通常，在進度很趕時，我們光是要把功能調整好就已經很喘了，更不要提同步修改註解了。『這一段我先這樣改，可以work我再來回頭改註解』，您肯定這樣想過吧？well...

多少次妳寫完功能測試無誤，就這麼雙手奉上給QA測試，測完就這麼上線了？你連回頭補自動測試的時間都沒有，還管得上註解？你出道幾年了？你以為老闆在這波專案結束會給你兩三天重新審視註解？這種老闆世間少有，如果你老闆是這樣的話你應該忠心跟隨千秋萬世，沒有的話，不用難過，你只是遇到正常的老闆罷了。
所以，寫了註解就像生了老二一樣，你不可以只顧老大不顧老二不是？不要當個不負責任的父母，就像你寫了註解卻讓他不與時俱進，這樣的註解比不寫還糟糕！
在我自身的職業生涯中，『靠勢』的註解是最讓我詬病的了。什麼意思，看看範例吧：
寫下這段程式碼的人，心中肯定認為，他提供了足夠的資訊，這段程式碼有了足夠的資訊，所以後人閱讀時一定沒有問題。嗯...也不盡然錯，為什麼？因為他的註解的確是非常清楚，我一看就知道這是VVIP，那是普通會員等等。然而，這樣的工程師，這樣的工程師就是有了註解後就開始『靠勢』，他雖然很貼心地為了閱讀者，考慮了資訊量的充足，卻沒有考慮到的是：『使用者的心情』。
如果我是一個第三方使用者，我不是你本人，也不是你同事，甚至拿到程式時已經是個封裝完成的binary檔，譬如jar檔，試問我又要和從得知，Type1是誰，Type2是誰？什麼？叫我從Maven上抓下來解譯？你乾脆留你電話給我直接問好不？
如果我把註解的內容改寫成Enum名稱，肯定會好多了吧？試試吧！你不會後悔！
所謂Clean Code的精神，就是程式本身要『言簡意賅』。我如果能用5個字解釋，就不用10個字。能用10行寫完，就不要硬加到20行。工程師應該要先想辦法透過『程式本身』釋放足夠多的資訊，並且這樣的資訊是要『從上而下』的。
回到一開始說的，註解是非常好的習慣，因為當程式真的無法提供足夠多資訊時，註解可以作為輔助。然而，她畢竟只是輔助，就跟左手一樣

然而，有了好的程式，以及好的註解，『維護』才是令人頭痛的事，有了好的程式習慣，也要有好的維護註解的習慣，這才是優秀（而非平庸）的工程師啊！
明天見！",,,"['為了註解而註解', '不與時俱進的註解', '『靠勢』的註解']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191222,自我挑戰組,0,如何用電商一個月從0賺到100萬系列,5,day5.摸摸小手培養感情,ocom,https://ithelp.ithome.com.tw/users/20107558/ironman,1512913089000000000,1040,"xx留言者又來留言ooxx了，你太閒了是不是，不爽滾
先來跪一下，有人說圖片直接上拉就可以用，我他媽弱智不會用，錯了就跪！
跪完就來寫day5，已經選好產品、弄好頁面、申請粉絲團，接下來就是要來賺信任感，絕對不是他媽的直接賣東西，人家談個戀愛，還要送送禮物，說說好聽的話，妞才願意讓你弄，換成賣東西你當然要先摸摸人家小手，說說貼心話，再賣東西給人家，才能幹走人家的錢，不要又不想付出感情又想插，他媽天兵啊你。
先給後取大丈夫！幹，我說的好有道理。
接下來要弄的就是，把青春小宇宙熱血小狼君的奮鬥故事，寫成一連串的小故事，貼在粉絲團上面，讓看的人覺得你特萌特愛你，每天寫持續寫，寫個三個月你就變網紅了！你說幹不是說好一個月賺百萬，你他媽騙人啊，對啊，操！我就是騙人，不爽滾。
我們先寫個十天，十天再來賣東西，十天夠你養一些好騙的人的信任感了，台灣的人很可愛，他們很好賺信任感，你有寫就有差，如果你說沒耐心寫、不會寫、不知道怎麼寫，要怎麼辦？那你就去吃大便吧，回家去媽媽十塊，不要出來社會害人了，幹！做生意哪裡可以給你說不會，你什麼都要會，不會也要會。
寫熱血奮鬥故事
寫產品設計研發史
寫你為了這個公司付出了多少
寫你公司員工多可愛多負責
寫你員工多愛產品
寫你很重視客戶服務
....掰就對了
市面上寫這些的87%都是唬爛誇大的，但大家就是愛看啊，愛看寫就對了，幹嘛硬要跟客人反著幹，他們愛看你就是要寫這些，才能建立起信任感，你說內容真不真實，幹！這就要看你人品拉，就像我句句屬實，我就是完全不負責任，寫的都是屁話，完全沒實作經驗，就像寫小說一樣，如果不想看，一個字！滾！操！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191225,自我挑戰組,0,Vuex學習筆記系列,5,[Vue.js]Vuex學習筆記(5)-getters的核心概念,NomiSu,https://ithelp.ithome.com.tw/users/20107601/ironman,1512913066000000000,582,"在某些時候我們需要 computed store` 中的 state ，例如在 to do list 內取得完成的數量。
但是如果有多個組件要使用相同功能呢？我們要複製上面的程式碼到每個組件內嗎？還是要將他抽取出來成為一個 helper ？其實這兩個做法都不太理想。
還好， Vuex 允許我們在 store 中定義 getters ，getters 就類似組件中的 computed ， getters 的返回值會根據他依賴的關係被緩存起來，只有當他依賴的值發生改變才會重新被計算。
getters 可以將 state 作為第一個參數
我們在組件中即可以下面方式來取得 doneTodos ：
getters 可以將其他 getters 作為第二個參數
在組件中可以用下面方式來取得 doneTodosCount ：
我們也可以傳參數到 getters 來取得返回結果，這是非常便利的方式查詢 store 中的陣列。
mapGetters 輔助函數與前面提到的 mapState 用法相近，可以簡化程式碼。
Output: [ { ""id"": 1, ""text"": ""..."", ""done"": true } ], 1
如果我們要將 getters 屬性取另外一個名稱，可以用物件的方式：
新名稱: 'getters 屬性名稱'",['Getter'],"['為什麼需要使用 getters ？', 'getters 使用方式', 'magGetters 輔助函數']","['使用 state', '使用其他 getters', '返回函數']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191224,自我挑戰組,0,Vuex學習筆記系列,4,[Vue.js]Vuex學習筆記(4)-state的核心概念,NomiSu,https://ithelp.ithome.com.tw/users/20107601/ironman,1512913005000000000,594,"Vuex 使用單一狀態樹，這是一個物件包含了全部應用層的狀態與供應單一數據來源 (Single source of truth)，這代表通常你每個應用只會有一個 store 。單一狀態樹讓我們可以直接指定 state 其中的一項並讓我們能夠輕鬆的得到目前應用程式的狀態與快照 (snapshots)。
單一狀態樹與模組化並不會產生衝突
上一篇中我們已經知道利用 store.state.count 來取得 state 中的 count 值。
但先前的做法只能夠在當前宣告的檔案中使用，我們要怎麼讓所有組件來使用呢？還好 Vuex 提供了一個機制可以將 store 從根組件注入到每一個子組件中，我們將上一章的 src/main.js 再新增一行程式碼：
這樣我們任何的子組件就可以用下面的方式來取得 store 內的 state :
之後打開瀏覽器的 DevTools ，就可以看到 count 的值了。
但如果我們要如何更好的顯示狀態呢？ 用 computed 來將 state 的狀態存起來會是一個很棒的方式。
執行上面的程式碼後，就可以在頁面上出現取到的值。
當一個組件需要獲取多個 state 的時候，如果每次都要宣告為 computed 會很麻煩，為了解決這個問題 Vuex 讓我們可以使用 mapState 輔助函數來幫助我們，將繁瑣的流程簡化。
Output：1, 1, 3
使用 Vuex 並不代表要將所有狀態放入 Vuex ，如果有些狀態只有屬於某個組件，這樣的話我們就不需要將他放入 Vuex ，實際使用時我們還是要進行權衡和確認，不要把事情搞得太複雜。",['State'],"['單一狀態樹 (Single State Tree)', '在組件中取得 Vuex 的 state', 'mapState 輔助函數', '組件仍然可以有本地的狀態']","['使用方式', '更簡單的使用方式：']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191220,ModernWeb,0,Expo---跨平台App開發從零到上架系列,6,ExpoDAY6---Debugging,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1512910171000000000,579,"

圖片來源
天一亮，農夫就會去找到適合的牛耕田；而你則負責找到有潛力的新人，教他寫 Expo。天人合一，師法自然，很公平。
一般來說，需求與設計討論不一會是我們會負責到的週期，對我們來說，最重要的就是開發與除錯。工程師的績效在開發完成之後，大概就是每週可以順利解決多少 Bug，所以一套框架本身設計的開發與除錯過程是否便利，至關重要。
當然，最好的情況下就是編輯器本身也能支援框架除錯的功能，那就更好了。是的，VSCode 支援針對 React Native 與 Expo 的除錯模式。
如果你還沒有安裝好 Expo 的相關套件，或是想進一步確認是否有正確安裝，請看前篇：Expo DAY3 --- Installation。
如果你還是很猶豫，搞不懂 Expo 與 React Native 的關係，請移步：Expo DAY1 --- Introduction，希望幫的上你。
如果，你沒辦法說服你的老闆，或是你手下的新人，究竟為何要學 Expo，你可以參考：Expo DAY2 --- Pros v.s Cons（未完成）。運用你的大智慧，一定能化險為夷，讓大家在領年終前歡喜入坑。
Expo 的 Development Mode 可以理解成一套整合流暢的 React Native App 開發體驗，以及一個開關。
原先 React Native 已經包含了一些非常實用的工具，例如可以透過 Chrome 遠端 debug 你的 JavaScript 程式碼、Live Reload、Hot Reload，以及類似瀏覽器 HTML 元素選擇器的 inspector。
這些東西 Expo 都包含在內，同時給你更多 --- 將 Cli 畫面整合進 Expo 中，將 USB 連接線變成無線的 QRCode 與簡訊連結，將一切你需要的額外資訊都包還在 Expo Client 中。
那就來看看 Expo 怎麼在開發過程中驗證與除錯吧！
",['Expo DAY6 --- Debugging'],"['前言', 'Development Mode？', '使用 Expo Development Mode', '使用 VSCode Debug Expo', 'Logs', '現在就做看看', 'Refs']","['XDE', 'Clients', '為你的 App 專案建立 debug 設定檔', '實際使用']","['iOS', 'Android']",,['tags: iThome鐵人賽2018 ReactNative Expo day6 Debugging'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10191218,SoftwareDevelopment,1,認識scala系列,7,Scaladay7(Class&Object),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1512907195000000000,570,"scala 在定義 class 沒給修飾子(private,protected)的話，預設是 public 的．一個 class 的 members 會有屬性(field)或方法(method)，屬性會用來存取該物件的值，物件提供方法讓外部呼叫．
使用 new 建立 class 的 object :
取得物件的變數值，呼叫物件的方法 :
scala function 的參數都是 val 的不可修改．
如果不想讓外部直接取得變數值，可以用 private 修飾子，再提供 method 給外部對該變數做修改：
在 scala 分號(semicolon)在結尾是可以不必要的，通常都會省略，但如果要把多段程式碼寫成一行，就會需要：
scala 並沒有像 java 一樣有 static members，所以需利用 Singleton object (只會有一個 object)，來達到 static 的效果 :
scala object 是 Singleton 的，在執行時期只會有一份，無法使用 new ．
在執行 scala 程式時，程式進入點會從 object main method 進入 :",,"['define Class', 'define object', 'object main method']",['總結'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191212,DataTechnology,0,GraphQL+ApolloData入門系列,4,ApolloDataServer&Auth,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512903052000000000,607,"介紹
前後端分離的網頁會使用 Jwt 或是 Firebase  會先驗證 Token 是否過期， 驗證後拿到資料再透過 ApolloData 提供的套件 apollo-server-express 傳入，而邏輯判斷在 Resolver 層處理
步驟方法
以  apolo-server-express  為例
先安裝 npm install graphql apollo-server-express 與常用的 express 套件
這邊有另外一篇 Firebase  登入篇如果有興趣也可以順便看一下前端如何登入 https://ithelp.ithome.com.tw/articles/10190624
這邊假設前端已經使用 Firebase  登入並拿到 Token 並且在每次 Request 的時候 都會在 Header 裡面放入Token
這時候在發 payload 到 Express 時候就會先經過一個 Middleware 先去 Check 這個 Token 是否有效,在 GraphQL  的 EndPoint 中除了加入 Schmea 外這次多一個 Context  第三個參數,並且把加上剛剛驗證過的  req.user放入第三個參數 context: { user: req.user },(範例中以 firebase.auth 為例. Jwt 驗證也是同樣方法), 這邊看起來是兩個參數但實際上在 Resolver 層是在第三個參數
接下來到 Resolver 的部分

就可以透過地三個參數去做 USER 邏輯判斷了
總結
之前在學習 GraphQL 的時候一直會有 Auth 的疑問,不知道從哪邊切入，一開始會在 Express 那一層做掉不過這樣並不理想，所以透過第三個參數傳入 認證資訊 再到 Resolver 層處理才是正解",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191216,ModernWeb,0,ASP.NETMVC網頁程式介紹系列,1,[Day01]什麼是MVC？能吃嗎？,小魚,https://ithelp.ithome.com.tw/users/20105694/ironman,1512902795000000000,702,"之前在網路上查資料的時候，
常常看到有人用這樣的標題再寫，
這次鐵人文的開頭就用這個標題來做起頭吧！
這一篇是比較理論的部分，
也是一個比較基本的概念，
基本上是從網路上的文章跟之前看到的文章加上自己的一點心得寫出來的，
那到底什麼是MVC呢？
Model-View-Controller(MVC)是一種設計模式(design pattern), 主要目的是用來簡化應用程式的開發與增強程式的可維護性, 其做法是將應用程式分割成以下三個邏輯的元件 :
模型（Model）
用於封裝與應用程式的業務邏輯相關的資料以及對資料的處理方法。「 Model 」有對資料直接存取的權力，例如對資料庫的存取。「Model」不依賴「View」和「Controller」，也就是說， Model 不關心它會被如何顯示或是如何被操作。但是 Model 中資料的變化一般會通過一種重新整理機制被公布。為了實現這種機制，那些用於監視此 Model 的 View 必須事先在此 Model 上註冊，從而，View 可以了解在資料 Model 上發生的改變。（比較：觀察者模式（軟體設計模式））
視圖（View）
能夠實現資料有目的的顯示（理論上，這不是必需的）。在 View 中一般沒有程式上的邏輯。為了實現 View 上的重新整理功能，View 需要存取它監視的資料模型（Model），因此應該事先在被它監視的資料那裡註冊。
控制器（Controller）
起到不同層面間的組織作用，用於控制應用程式的流程。它處理事件並作出回應。「事件」包括用戶的行為和資料 Model 上的改變。
使用MVC來進行網路應用程式開發有很多優點, 包含程式碼簡潔與程式升級的彈性, 但最為人稱讚的優點在於可以將一個專案的開發分成三個不同的角色來增加協同作業的效率。
Development -
對應到MVC中的Model元件, 這部分主要是由熟悉伺服端程式語言(ex:PHP/Python/RoR/ ASP.Net / Perl...etc), 資料庫管理與設計, 資訊架構, 演算法, 以及資料驗證等技術的工程師所負責, 這個角色負責建構應用程式運作細節並提供APIs以及如何與資料互動的規則。
Design -
對應到MVC中的View元件, 一般來說負責此部分的是熟悉圖像製作, HTML, CSS以及Javascript的視覺設計人員。
Integration -
對應到MVC中的Controller元件, 整合者主要負責將視覺設計師所開發出的靜態頁面轉換成嵌有程式的動態頁面, 將資料利用表單發送到Model Layer, 接收並轉換Model Layer所回傳的資料並呈現在View Layer之上
MVC的缺點是由於他沒有明確的定義，所以完全理解MVC並不是很容易。使用MVC需要精心的規劃，由於它內部原理比較複雜，所以需要花費一些時間去思考。
你不得不花費相當的時間去思考如何將MVC套用到你要開發的東西商面，同時由於模型和顯示要嚴格分離，這也是一件相當困的事情。每個物件在使用之前都需要經過徹底的測試。
由於我們將一個要開發的軟體分成了三個部分，所以使用MVC同時也意味著你要管理比以前更多的文件，這一點是顯而易見的。這樣好像我們的工作量增加了，但請記住這比他所帶來的好處是不值得一提的。
簡單來說，MVC是由三個概念所構成，可以用在各種的網頁程式語言當中，View是讓使用者看的，Controller是處理使用者引發的事件，其中最有爭議的就是Model，基本上處理後端的事件如讀取資料庫是屬於Model的部分，但是Model的範圍太廣，定義也很難清楚，很多人討論、爭論到最後還是沒有一個結果，所以這部分稍微瞭解一下即可。
這30天主要是分享微軟開發的ASP.NET MVC的部分，微軟將MVC的架構放到ASP.NET MVC當中，ASP.NET MVC跟ASP.NET其實有很大的差別，這個部分將會在下一篇來分享。
參考資料：
[資訊] 什麼是MVC？What's Model-View-Controller？
維基百科-MVC",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191192,自我挑戰組,0,2017挨踢人生大事紀系列,7,點陣式印表機無法正常列印時-MIS排除的手法！,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1512902379000000000,695,"今天趁著週末有空檔，頭腦也還算清楚時，來寫篇一下心得文。
也呼應一下上回的選擇題：挨踢鳥事滿天飛-點陣式印表機無法正常列印時！
牛哥我遇到這類問題，究竟是怎麼去應對的。

以上的拓樸，雖然繪製手法拙劣，但也稍微能示意出我下面要帶出的排錯要義！
當使用者在PC1操作，要在他執行的系統畫面中，進行報表的製時。
這時若是印表機無動作！
我第一個判斷會先區分，是電腦的問題？印表機的問題？還是系統的問題？
利用中小學生都應該會的試驗手法，
試著去還原案發現場，到使用者現場環境PC1操作一遍，大致了解問題後。
再想辦法再找一個可對照的操作環境PC2，再做一次！
針對：電腦？印表機？系統伺服器？三者去釐清問題會是歸屬在那一段？
也就是在其他可運用的電腦，再下一次同樣的列印操作。
就能先判斷是否是當事人電腦的問題，還是問題就是直接是印表機本身。
若是連對照組PC2，也仍無法列印成功，
這時就要去驗證一下，是否系統的伺服器有無異常狀況發生？
一般而言，系統伺服器是比較不容易出狀況的部份，直覺上就比較不會去懷疑這一段。
而通常若是問題真的是發生在系統伺服器端，那真實場景之下，就會是MIS是電腦接不完了......
當問題也不在系統伺服器端！
而且你把印表機拆下來，另外再接一台電腦去列印，結果是印表機正常？
這時候，就要回歸到你對整體電腦網路的架構了解程度，去找出可能出狀況的異常點去排錯了。
因為我上面的架構示意圖中，使用者的電腦，和印表機是透過網路串起來的。
所以網路的節點，在出問題時，也要列入你去排錯的質疑清單：
節點上的交換器，甚至線材...
先試著把示意圖裡，最靠近印表機的網路裝置(Switch Hub)重開試試吧！
別忘了把印表機也跟著重開看看...
聽看看，是不是印表機熟悉的嗡嗡聲又開始動作了呢！
這回合鐵人賽文，就先這麼結束囉~
祝各位邦友，週末愉快！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191147,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,2,[II]用CodeIgniter的30天-WhatisMVC?,qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1512901905000000000,599,"現在多數 web 框架都採用所謂的「MVC」架構
究竟何謂MVC呢
簡單來說就是把不同用處的程式分開
如果要複雜來說你可以自己查 wiki 或是有些人的文章就是直接複製貼上 wiki
如果看得懂 wiki 那下面也不用看了，直接exit();
一開始寫程式，大家都一樣
把所有要用到的東西混在同一鍋裡面做撒尿牛丸
寫的當下很爽，想到什麼就寫什麼，好像潑墨山水一樣
維護時候就會發現頭上有人淋了一整盆墨汁
同樣功能會寫多次內聚(Cohesion)超低
為了改一個判斷可能多個頁面
改好了交出去，又被測出有地方沒改到，被尻洗一番灰溜溜的回來找還有哪裡沒改到
而且這個遞迴可能會執行多次
既然都知道 CSS 和 javascript 要分開寫，那 PHP 有什麼可以分開的呢？
出現了，他可以解決你的問題
把一般程式的操作分為三個區塊
什麼是MVC？
負責處理業務邏輯，具有對資料庫的存取權限
代表只要操作資料庫的事情都歸他管，而且model不管他什麼時候被執行
所以model說幹就幹，就像一把錘子，不管下面是什麼
只要出現在他面前，就一路看成釘子把他錘下去
就是皮膚 a.k.a skin
使用者看到的畫面，通常是一些基本的網頁DOM，它不具有邏輯
能接收foreach塞資料或是if判斷輸入的值，千萬別讓他去call model
然後就是坐等其他地方給與他資料，不管是顯示在畫面上的
抑或是使用者在畫面上的操作
從名稱上可以知道，他就是負責控制(control)用的
白話些說叫做分派工作
今天使用者輸入一串網址，會先在 controller 找到對應的  function
controller 會判段改顯示哪個畫面(view)，哪些東西要引入，例如CSS、javascript
如果有使用者操作畫面上的元件，也會觸發對對應的 function
然後去分辨這個命令需要做的動作，如果是對資料庫做操作
那 controller 就會去呼叫 Model 中對應的 function
然後 Model 就會 把他錘爆 就會執行該 function 該做的事情
CodeIgniter 官方這張圖把資料流向說明的很清楚了
如果有看不懂的名詞，現階段看要去查清楚或是直接蓋住
也是不影響理解的
",['MVC'],"['Model', 'View', 'Controller']",,['假的，沒看到'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191215,ModernWeb,0,邁向JavaScript勇者之路系列,7,JavaScript連連看!?兩個物件的值居然會一樣,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1512901231000000000,703,"承上集，小明現在在漂亮阿姨 (陳小美) 家裡，漂亮阿姨還有一個雙胞胎姐姐 - 陳美美，陳美美的各方面與雙胞胎妹妹都很接近，除了名字以外。因此，偷懶的小明決定將兩個人的名字畫線連再一起，然後改個名字就好了。
接下來，調整一下姊姊的名字

小明將兩個人的名字，對應到相同的資料結構上，阿姨與她的姊姊都是同一份資料。因此，小明將阿姨姊姊的名字寫到阿姨的名字上了 (明天醒來就會搞不清楚是誰了!?)。
一般而言，我們在傳遞變數的時候，如果是單一的值賦予到另一個變數後，兩者是毫無關係的。
但就上面小明故事來說，會發現兩者的物件好像是綁定再一起的，改動其中一個，另一個物件也會跟著更動，這個因為在 JavaScript 中的物件是 ""傳參考(by Reference)""，其結果就像是小明筆記本所發生的狀況。

如果使用資料表的概念在思考，可以想像資料表的 Address 就是變數，Value 就是值，一個 Address 只能對應一個值，那麼物件在組成的時候就會產生另一個表，然後透過 address 來做傳遞，所以才會兩個變數共用同一個資料表。
這樣的結果有好處也有壞處，好處是我們在操作物件時，可以輕易地用更短的變數來操作，以下面範例來說，我們可以將 DOM 物件賦予在一個更精簡名稱的變數上，然後修改其中的值。
壞處可以參考小明所遭遇到的問題，操作資料格式時將兩份資料給搞混了，所以在處理資料時，如果他實際並非 ""同一份""，而僅是相似時就要特別注意此問題。
我們來介紹不同方式來複製物件且不含參考，而以下是基礎的資料格式。
另外複製也會有區分 深度 (Deep Copy)及淺度 (Shallow Copy)，差異在於一層傳值，還是所有層級皆傳值，在 bwh 這一層就可以做此測試。
這是很直接的觀念，把物件的參考賦予方式改用值的方式來傳遞，此時手動傳值的部分將會完全獨立。不過注意，在內層物件還是依據參考的方式傳遞 (bwh 的物件)。
和手動賦值的方式接近，不過是使用 for...in 的語法將原本的物件屬性，傳到新的物件上，這種方式同上也是屬於淺層賦值。
將物件轉換為一個不相干的字串，再將字串轉回物件，這種方式就會使兩個物件毫無關聯，屬於完全複製沒有深度限制。
jQuery 套件中的 extend 可以複製物件，他也可以將加入參數使用深度複製 (deep copy)，不虧是萬年 jQuery，各種好用工具都在其中。
jQuery extend 詳細文件: jQuery.extend() | jQuery API Documentation
原生 ES6 中也有提供類似 jQuery 的複製方法，但此方法僅適用於淺複製，並沒有提供深度複製。
By Reference, By Value 在 JavaScript Object 中一值屬於很常見的問題，不管新手老手都曾經錯在其中 T_T。",,"['傳值與傳參考', '複製物件不含參考']","['手動賦值', 'for...in', '轉字串', '使用套件', 'ES6']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191214,自我挑戰組,0,網頁學習日誌系列,7,Git:Github簡介和註冊,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1512900696000000000,569,"在本地電腦資料完成後，可上傳在Github 方便管理網站更新紀錄，也可以觀看別人的程式碼，
所以是屬於對外開放，如果要放重要的程式，也可付費購買不公開的資料庫。
輸入關鍵字(如下圖的jquery)，出現的結果如下：
右邊的Languages 為語法標籤，也就是說要尋找jquery是與什麼相關? javascript、html等都列在右邊
要找程式可透過此方法找到，十分方便!!!

找到程式後也可以查看最近的修改紀錄(commit)


如果喜歡的話可以直接下載，如下圖所示：

上方有三個小icon，從左至右為：關注活動、給個好評、複製專案

關注活動：程式開發人員有變動資料的話，系統會通知
給個好評：喜歡程式可給個好評價
複製專案：複製專案到你的資料庫中，複製的專案在下圖紅色圈選處，它會自動新增資料庫

Github : https://github.com/
按下Sign up for GitHub

填寫資料後，按下Creat an account

選擇Unlimited public repositories for free免費公開資料庫，另一選項為付費私人不公開資料庫，最後按下Continue

這頁面可不填寫，直接點選下方的Skip this  Step，就可註冊成功了!!!

點選New repository

Repository name填選資料庫名稱，選擇Public，最後按下Create repository

3.成功創建後會出現下方圈選的網址，這是資料庫的網址
",,"['特色', '其他說明：', '註冊', '創建遠端資料庫']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191213,DevOps,0,用30天來介紹和使用Docker系列,7,Day7：建立private的DockerRegistry,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1512900355000000000,607,"昨天已經使用了 Docker Hub 把 Docker Image 傳送到網路上了，所有人都可以把此 Docker Image Pull 下來使用。但是有以下的需求使用者就不適合把 Docker Image 放到公開的網路上，像是有些軟體有 License 的問題、考慮到有安全性的問題、希望更快的網路速度……等等的需求，就不適合直接把 Docker Image上傳到網路上，而需要把 Docker Image放在內部網路裡。
今天就來介紹要如何的建立一個 Private(私有) 的 Docker Registry
今天要實作的部份如下：
1.	建立 Docker Registry Server
2.	把第5天做好的 Docker Image Push 到上個步驟架設好的 Docker Registry Server
3.	找另外一台電腦把 Docker Image Pull下來測試
一. 建立 Docker Registry Server
*直接透過啟動 Docker container 的方式，就可以把 Docker Registry Server 建立起來，指令如下：
參數說明如下：
-d：執行的 docker container 是 run 在背景的狀態，所以需要使用 docker logs 的指令才可以看到 log 狀態
-p：主機的 5000 port mapping 到 container 的 5000 port
-v：因為 push 到 docker registry 的資料是放在 container 裡面的，如果把 docker container 刪除掉 docker registry 的 Image 資料就會不見，因此需要使用 –v 參數將主機的檔案路徑 mapping 到 container 裡面的檔案路徑，這樣 docker container 被刪除 docker registry 的 Image 資料還會存在
--name：設定 docker container 的名稱
執行成功之後畫面如下：

二. 把第5天做好的 Docker Image Push 到上個步驟架設好的 Docker Registry Server
因為這裡是 Demo 所以直接使用 IP 位址指定 Docker Reigstry 的位址，在實務上這是 Hard Code的做法，所以較好做法應該是使用指定 Host Name的方式。
畫面如下：

沒有成功的把 Docker Image Push 到 Docker Registry 上
(2)	重新啟動 Docker 的 service 指令如下
4.	重新 push docker image，指令如下
可以看到畫面如下

以上就成功的把 Docker Image Push 到了 Docker Hub 上了
三. 再另外找一台電腦把 Docker Image Pull下來測試
今天我們已經架設了一個 private 的 Docker Reigstry，如果是私人使用是沒有問題的，但是如果放在一個規模很大的公司上執行還是會有問題，像是安全性問題例如規定哪些使用者可以 Push Image 或是哪些使用者只能 Pull Image 的問題，所以考慮的層面需要更廣，這些在網路上都能找到很多的參考資料。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190627,ModernWeb,0,Next.js+各種套件組合系列,7,Next.js&Styled-component,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512899137000000000,570,"介紹
styled-component(以下稱SC) 是目前Css In Js 呼聲最高的一個套件。 透過 SC 可以快速產生一個具有可傳 Props 的物件同時又具有指定 html 類型的特性,除了在生成元件上速度非常快,也有一些擴充性可再利用的特性，非常的方便也支援 Reactnative ，原本寫 Sass Less Css 也不用太擔心，因為他有支援 ES6 Template Literals LITERALS 可以直接用原來的風格撰寫
開始使用
安裝SC npm install --save styled-components
馬上使用 在創建一個 SC 只需要 import styled from styled-components 之後就可以馬上使用,如下方 styled 後面加上 HTML 物件例如 h1，button,section,div..等等
這樣就會具有該 HTML 的特性又具有 SC 的一些 Props 功能 ，使用創建出來的Tag 還可以包其他TAG做出不同組合
利用 SC 創建的物件可以直接指定參數 例如 下方的 Button的primary 傳入後可以在 Props 裡面使用 props.primary接收到
SC 也可以在既有的元件上再掛上 Style ,以下範例有一個Link 用Styled使用HOC 包裝起來再使用ES6 Template  Literals 語法包起來
SC 也提供了動畫功能 import {keyframes} from 'styled-component'定一個 keyframes 的動畫在 SC 裡面給 animation 用 ES6 Template  Literals  傳遞動畫的使用也非常方便
在Next.js 設定 Theme 的部分也是在目錄 pages 底下創建一個 _document.js 檔案 因為 SSR 的部分有些程式碼是不能寫在 React dom 節點,這邊 getInitialProps SC 提供了一個 ServerStyleSheet
renderPage 就是在 APP 渲染之前加上一個 sheet.collectStyles 的 Wrap ，然後也在 Head 底下把 sheet.getStyleElement() 產出的 Style 打上去這樣就會有 SSR 的效果了
Theme 的部分 在 TopLevel 定義好 ThemeProvider 底下的 SC 都可以拿到 Theme 如下範例
使用 SSR 時候記得加上 .babelrc 檔案並安裝 Styled-component 的Plugin ， 如果想要除錯方便也可以把 displayName 設定為 true 這樣在 className 的時候會多一個 component 的名稱，至於 preprocess 可以想成 Minify 性質是類似的，要使用的話則不能與 Minify 共用要選其一
總結
SC 在 React 的元件組裝上非常的容易上手,並且容易擴充,而在 Next.js 上使用要記得在 _document.js 補上 getInitialProps 產出 Tag 放在 Head 中, 並使用 SC 提供的 ServerStyleSheet 的工具,配合 Next.js 提供的 renderpage 重新 Wrap App dom
Next.js  範例 參考來源
https://github.com/zeit/next.js/tree/canary/examples/with-styled-components
以上範例都可以在官網查詢到
http://styled-components.com",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191211,SoftwareDevelopment,0,Kotlin30天，通過每天一個小demo學習Android開發系列,7,Kotlin開發第7天MyLocation(GoogleMap),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1512896611000000000,560,"
這次做一個地圖應用，通過 Google Map 顯示自己的位置以及對應的座標。
功能
接觸的內容
通過在 App 上右鍵的方式建立一個 Activity，點開 Gallery 以後會看到 Google Maps Activity。
IDE 會同時幫我們建立一個 Activity 以及一個對應的 Layout。

而 IDE 同時還會建立一個 google_maps_api.xml 文件，這裡面會需要寫上我們的 Google Map 金鑰。
我在 Github 上有看到一些人是將 key 放在 /values/strings/ 底下，又或者在 values 下另外建立文件來使用。

而在 AndroidManifest.xml 文件中，IDE 也幫我們加了一些東西，比如：
這裡發現 google_maps_key 又或者 MapsActivity 的 title 都是通過 @string/key 的方式來引用。
@string/key 的內容部分是來自下圖中的 strings.xml

在 Android 中，可以通過 Intent 來切換 Activity。
這次會用到定位的權限，需要在 AndroidManifest 加入：
我們實例化一個 locationManager 並且嘗試獲取用戶當前位置，並委派一個 locationListener。
在取得座標的時候，將地圖移動到座標所在位置，並且將座標顯示在 locationTextView 上。","['通過 IDE 建立 MapActivity', '筆記', '參考']","['通過 Intent 切換 Activity', 'Permission', 'LocationManager']","['檢查與請求權限', '請求結果的 Handler', 'locationListener']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191210,DataTechnology,0,MicrosoftBotFramework30天上手系列,4,WhyVisualStudioCode,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1512894967000000000,560,"visual studio code 是目前正當紅的 編緝器，
去年的此時，
大家還在為 web 開發，
到底要用 webstorm atom sublime 爭執不下時。
visual studio code 以旋風掃落葉 之姿，橫掃編緝器界。
開放式的架構
https://github.com/Microsoft/vscode
每周更新。
目前也不斷的有神人撰寫各類plugin!
原則上 visual studio code 左邊就五個選項。
我必需誠實的講，
其實我都只用到 folder 跟 search
git:我都會將View -> Terminal 開出來，就習慣直接下指令了。
debug:都真接看console， 因為node.js 是單process 的，比較不會有一定要設斷點的狀況。
extensions:安裝完，被默司大神導讀後，就沒在開過了。
(https://www.youtube.com/watch?v=rsaqfyDLzQM)
(https://www.youtube.com/watch?v=iP6vM2hZ8TM)
(https://www.youtube.com/watch?v=zGqICko2_uo)
剛好遍寫遍複習及看一下有什麼功能。
Visual Studio Code 就是 botframework 的指名編緝器，
下一篇，翻譯一下。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191165,AI&MachineLearning,3,玩轉資料與機器學習-以自然語言處理為例系列,5,網路爬蟲Day3-html檔的取得及常見問題(續),GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1512894506000000000,627,"接續昨天的文章...
因為網站的防爬蟲機制，一般都是在requests的階段會碰到問題，所以就在這部分講一講，比較常遇到的一些問題，以及他的解決方案。

這個header可以透過F12>Network>目標頁面>Requests Headers找到，這個東西如果你是用python的requests套件，伺服器端偵測到的可能就是Python用戶端送出的requests，有些防爬蟲比較高階的網站會檔下這類型的requests，因此如果有遇到這類問題，可以這樣處理。
如果各位不相信，可以把假header拿掉試試看，然後在回傳的值當中，尋找這個網頁最重要的元素(ctrl+F)$259,123，照理說你透過python得到的網頁，跟直接透過瀏覽器接點進去的就不是同一網頁了，應該會是她特別寫給爬蟲愛好者取得的一個網頁，你也就找不到這個數字了。
由於大量爬取同一個網域的網站，剛開始我們都會直接透過迴圈處理，但是迴圈一般都會以比你想像中快十倍甚至百倍的速度運行，也就是說，一秒內你可能發超過10個requests給那個網站的伺服器。而恰巧不巧，早期攻擊一個網站最常使用的方式就是大量送出封包癱瘓伺服器，但是現在這部分的攻擊基本上都已經沒有效果，每一種語言的網站架構基本上都會有預設防禦這種類型的攻擊，就算開發人員沒有特別注意，也會預設擋下這類型的requests。所以建議你，如果要大量發出請求，可以使用time這個套件。
重複向特定網站的伺服器送出過多requests時，網站可能會直接鎖定你現在所使用的IP位置，這個時候也只能想辦法換IP拉，有幾種換IP的方式，因為你的手機一般都是浮動IP，所以如果流量夠的話，可以重新連線一次，一般wifi也是同樣的原理。不過有時候，這樣做如果間隔時間太短，系統還是會使用同一組IP。
這邊介紹一個小工具給大家，原本是我去大陸時，翻牆回來的工具，後來發現爬蟲上使用更是便利，而且如股純粹是爬蟲用途的話，你可以不必使用付費的版本。就是hotspotshield，當然大家如果有習慣使用的VPN工具，那也是可以啦，這個工具的使用上，一但你發現你的IP被封鎖了，直接重新連線hotspotshield，它就會幫你換到其他國家的IP了。
順帶一提發現IP被檔的辦法，我很習慣性的會先把抓下來的html文件存成一個個的純文字檔，在程式在跑的過程中，你可以打開檔案總管到你儲存純文字檔的資料夾中，監視檔案的大小，一旦發現檔案的大小都維持在同一個且很低的水平的時候，大約就代表你被封鎖IP了。當然你也可以透過python去偵測純文字檔儲存下來的大小，如果規模夠大的話，還是很有效益的。
由於現在網頁技術越來越先進，往往很多網頁的內容，並不需要透過獨立的網址才能呈現，在同一個網址下，透過javascript就可以讓html元素做很多變換，在配上ajax甚至可以跟資料庫互動。因此，若你要取得這些，進入網頁與使用者互動之後才會得出的html元素，純粹的requests就無法滿足你的需求了。
也因應這個網頁設計越趨複雜的趨勢，現在網頁測試的領域也越來越興盛，因此selenium這一個網頁自動化測試工具也就誕生了。它實作了非常多的介面，當然其中也包含python。從爬蟲的領域來看，這個東西就是個神器救星，因為所謂網頁測試，也就是要模仿真人操作網頁的行為進行測試網頁是否有bug，
換而言之，真人透過與網頁互動用javascript產生的html元素這時也可以輕易取得了。另一方面，由於不太可能有網站可以區分自動化工具跟真人，一旦它擋下你的自動化測試工具，它擋到真的人的機會也會很高，會很不利它網站的運作。總體而言，這還是一個滿方便的爬蟲工具。
這邊簡單說明一下selenium使用的過程中要注意的問題:",,,"['4. 實務問題三: 一般網站的防爬蟲機制', '5. 實務問題四: javascript渲染出來的網頁，或不明原因被檔的網頁']","['(1). 直接偵測requests的header', '(2). 一秒太多次requests', '(3). 總共太多次requests，或太規律，鎖IP']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191209,ModernWeb,1,認識Chrome開發者工具系列,7,元素面版-動態編輯文件物件模型1,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1512891300000000000,569,"今天要一起來看的面版是元素面版，如果你是第一次使用 Chrome 開發者工具，元素面版應該就會是你打開開發者工具後的第一個面版，這個面版其實是由幾個小的控制面版 (Panes) 組成的，我們會拆分成幾天來討論這個面版的幾個大功能，其中一個就是今天要討論的動態編輯文件物件模型。
元素面版的構成比較複雜，常常會覺得頁面的空間不夠使用，你可以使用快捷鍵 ESC 來開關控制台面版 (Console panel) 得到更多空間
在編輯某個特定元素時，我們首先要做的第一件事就是先找到這個元素的 DOM，在開發者工具裡有好幾個方法可來達成這件事：
在頁面中所要編輯的元素的畫面上按滑鼠右鍵，在選單中選擇檢查。這時候，你的開發者工具就會打開到元素面版並且指到你所選擇的元素上。

有時候因為頁面的結構關係，這個方式並不一定可以準確選擇到你所指定的元素
假如你知道你所要選擇的元素的 ID, class 或 HTML 標籤名稱，那你其實可以在元素面版裡，使用搜尋的功能 ( 請參考上篇提到的快捷鍵) 來找你所想要選取的特定元素。

另一個方式是：在打開開發者工具並切換到元素面版後，使用在面版左上角的 - 檢查元素模式 (Inspect Element Mode)  工具來選擇元素。當你進入這個模式後，在頁面移動時就會看到正在選擇的區塊，在選擇到元素後，再按一下滑鼠左鍵，該元素就會被選取並顯示在元素面版裡。
還有一個方法是當你在元素面版的文件物件模型樹中 (DOM tree view) 使用鍵盤上的方向鍵來做操作。
最後一個尋找元素的方法是使用元素面版左下方一個類似麵包屑的介面

上面提到了很多方法你可以選取 DOM 元素，我自己本人比較常用的方式是使用檢查元素模式及搭配鍵盤的方向鍵快速的移動。通常這樣都可以很快的找到你想要的元素。
所有的編輯在頁面重新整理後都會消失，這些編輯後的內容都不會儲存到你的原始碼裡面，> 除非你做了特殊設定
在編輯元素時可以使用取消 (Undo) (Mac 使用 Cmd+Z，Windows 用 Ctrl+Z) 及重做 (Redo) 的功能 (Mac Cmd+Shift+Z，Windows 用 Ctrl+Y)，就像我們一般在用文字編輯器一樣
編輯元素的標籤 (HTML tag)：你可以用滑鼠左鍵連點兩下所要編輯的元素，在進入編輯模式後，再輸入你想要的標籤名稱 (標籤會有自動完成的功能，所以，只需要改標籤的開頭就可以了 )。當完成編輯的時候，用滑鼠左鍵在編輯模式外的區域點一下就可以完成編輯，如果是要取消編輯，可以使用鍵盤的 Esc 離開。

編輯 DOM 標籤
編輯標籤屬性：就像編輯標籤一下，在所要編輯的屬性上滑鼠左鍵連點兩下後就可以直接編輯那個屬性。另外也可以直在選好元素後，按一下鍵盤上的 Return 或 Enter 鍵來進入編輯模式。如果你要切換到下一個屬性，可以用 Tab 鍵。

編輯 DOM 元素屬性
新增屬性：在被選取的元素上滑鼠右鍵打開更多動作選單 (More actions menu) 然後選擇新增屬性 (Add attribute)，然後再輸入新屬性就可以了。你也可以在編輯元素標籤時，直接把屬性寫上去。

新增一個 DOM 元素屬性
刪除屬性的方式與編輯標籤屬性雷同，在選擇該屬性後把屬性跟值一起清掉就可以了。
今天我們很快的看了一下如何用元素面版來尋找特定的元素並且編輯元素標籤跟屬性，這些其實是很實用的功能，特別是尋找元素，當你編輯完你的原始碼後，回到開發者工具看到的這個文件物件模型樹 (DOM tree view) 其實才是瀏覽器渲染完成的文件物件模型 ( 這個字真的很繞口 …)，透過這樣的檢查方式，常常可以找到一些臭蟲像是我們在撰寫或編輯HTML 時給錯的屬性或甚至錯誤的結構。而動態編輯的優點就是我們不需要往返我們的原始碼跟瀏覽器來查看說，這個屬性套上去後，或是這個標籤移到下面後畫面會變成怎樣 (移動的功能我們明天會介紹 )，而是可以立即的看到瀏覽器的畫面，這個優勢在接下來介紹的樣式表編輯裡會更明顯。好了，希望大家今天有學到新東西，明天我們會繼續把動態編輯文件物件模型的功能講完。",,"['尋找元素', '編輯元素', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191208,AI&MachineLearning,0,讓我們一起來見見歐美語音助理界的當紅炸子雞-Alexa吧!系列,7,[Day7]Alexa聲學模型部分,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512883936000000000,584,"延續AI NEXT大會揭密Alexa是怎麼練成的Topic
這次的主題是聲學模型的部分
跟各位介紹一下，語音辨識系統框架主要包含四大部分->分別是 1.訊號處理 2. 聲學模型 3. 解碼器 4. 後端處理

首先，Alexa會對麥克風蒐集來的聲音，進行一些訊號處理，將訊號轉換到頻域，從每10毫秒語音提出一個特徵向量，提供給後面的聲學模型。聲學模型負責把聲訊分類成不同的音素。接下來就是解碼器，可以得出概率最高的 一串詞串，最後一步是後端處理，就是將單詞組合而成容易讀取的字檔。
在這過程當中，都會用到機器學習和深度學習的部分。
聲學模型為一個分類器，底部是匯入資訊，隱藏層將向量轉化到最後一層裡的音素概率，這是一個典型的神經網路。
Alexa是一個美式英語的語音辨識系統，所以會匯出美式英文中的各個音素。在Echo初發表時，Amazon錄製了幾千小時的美式英語語音來訓練神經網路模型。
2016/9發行德語版Echo，如果從頭來過一遍用幾千個小時德語語音來訓練，成本相當高。所以這個神經網路模型很棒的地方，就是可以透過”遷移學習”，保持原有網路其他層不變，只把最後一層換成德語。
兩種不同的語言，音素很多不一樣，但仍然有很多相同的部分，所以，可以只使用少量的德語的訓練資料，在稍作改變的模型上最終可以得到不錯的結果。


(本文為擷取TechNews聲學模型部分來為大家做分享，請詳以下資料來源)
資料來源: TechNews, Association of Technology and Innovation",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191207,DataTechnology,0,Python學習筆記系列,7,[Day7]格式化輸出,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512880091000000000,574,"
'String here {var1} then also {var2}'.format(var1='something1',var2='something2')

更多補充:
%d	    以10 進位整數方式輸出
%e, %E	將浮點 數以10進位方式輸出，並使用科學記號
%o	    以8進 位整數方式輸出
%x, %X	將整 數以16進位方式輸出
%c	    以字元 方式輸出
其實每次都想多發一些文，不過這周一到日白天到下午都要上大數據的課程和討論期末專題報告，還請各位讀者諒解~
參考資料來源: Go from zero to hero in Python",,,"['Strings', 'Floating Point Numbers', 'Conversion Format methods']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191206,ModernWeb,0,每日文章推薦系列,7,Day7工作環境,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1512875092000000000,633,"靠作網頁吃飯的人 大概都會聽過一件事
作網頁要用macbook
不過我個人是覺得啥系統都可以啦 只是要找到適合的工具
開發工具從之前的sublime text轉移到phpstorm
一年兩三千 省下的時間應該就超過這個價值了
sublime text我是在55塊的時候買的吧 沒有免費升級3的優惠
所以也只能放棄他了 不然很吵
vs code也是蠻好用的 如果主要工作是前端我就會用vs code
phpstorm 寫js還是有點小問題
目前我在家裡是用三四年前買的喜傑獅 QX-350 記憶體加到16g
上面跑win10 pro 之前在網路上買到便宜的正版序號 大約三四百就有
跑網頁的環境從早期的xampp 到用wagon
到現在的用docker
目前win10上面跑都沒有啥太大的問題了
win10 pro 還可以用ubuntu 所以要跑一些工具也方便很多
不用開docker 也不用開VM
一些windows能跑的工具用cmder也很夠用了
在家裡用windows的原因很簡單
我steam遊戲快破千了 很多遊戲只有windows版
不用windows就浪費了
而且電腦也比較便宜
出門工作會用今年拿到的MacBook Pro (Retina, 15-inch, Mid 2015)
當初對touch bar有憂慮 所以就買了上一代的macbook了
基本上也是docker可以正常跑我就沒啥問題了
工具自從換了phpstorm以後也幾乎無縫接軌
在公司是用一台i5的準系統弄起來的PC跑ubuntu
想說在公司也不會作啥奇怪的事情 裝個linux理所當然
sublime text,phpstorm 也有linux版所以轉換也沒有啥差別
個人是覺得工具是拿來用的
不是拿來限制自己的
在任何系統都讓自己能正常工作到時候哪台電腦壞掉要替換也好找
三年前有段時間是帶著ipad 加藍芽鍵盤趴趴走
反正有文字編輯軟體也有ssh client 也夠工作了
不過後來開始用git我就沒辦法了XD
JS时间处理插件MomentJS
蠻好用的工具
但是用npm去打包的時候要記得不要包到用不到的語系
會肥很多
另外之前有看過別人介紹]date-fns
看來也是不錯用
今天看的文章
假日文章會少一點",,"['傳言', '使用工具', 'windows', 'MAC', 'Linux', '工具', '今日文章分享']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191203,自我挑戰組,0,服務桌從開始到進入資安領域系列,6,[Day6]服務桌的修業:網路不通問題排除,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512874259000000000,618,"Windows作業系統網路不通
使用指令確認網路狀態
使用指令ipconfig
確認ip address是否可以正常取得，網路正常的話會取得IP。

使用指令ping 127.0.0.1
確認tcp/ip設定是否正確，網路正常的話會響應。

使用指令Tracert [ip address、URL、hostname]
確認本地端到目的端之間的祥細訊息

使用指令Netstat
確認網路整體的使用情況(網路連接、路由表、網路port現況…)

網路有訊號無法連線

確認網路連線狀態

點選詳細資料

確認網路連線詳細資料

回到網路連線狀態點選內容，再點選TCP/IPv4內容。

確認一般設置

確認其他設定設置

控制台/網路連線/進階設定

確認連線設置

到網路和網際網路

網際網路選項

連線選擇LAN設定

確認自動設定的部份是否異動、設置Proxy (預設:自動偵測設定)

硬體的部份
到裝置管理員查看網卡狀態
有時侯作業系統和網卡驅動衝突，也會有網路不通的現象，改安裝其它版本的驅動也許可以改善著個現象。
又或者是缺少微軟、網卡驅動、網卡製造商寫的應用程序......(見招拆招了

其它因素
被勒索 → 有些版本無法完整跑完程序且搞掛網路，沒樣本玩, 不知道怎麼做到的...
使用一鍵清理工具之後就網路不通、無法開機 → 系統必要的執行檔可能也被咔掉了
特定的應用軟體無法與伺服器連線 → 確認伺服器還活著且功能正常
筆電Wifi開關未開啟(實體鍵) → 引導使用者開啟
網路線未接、接觸不良、不小心踢掉了 → 引導使用者接好
帳號權限或驗證問題 → 著部份要看是使用者的設備問題、還是帳號權限的驗證問題嘍~
軟體衝突 → 需實測確認解法
防毒軟體誤擋 → 需實測確認解法
......可以遠端幫忙解決的大部份是設置問題，網路完全無法ping到的只能衝到現場處理了Q_Q",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191205,ModernWeb,0,重新學習網頁設計系列,7,DAY7.HTML5表單群組Fieldset,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1512874005000000000,597,"fieldset是一個新的html元素，用來群組化表單裡的input元素
有了fieldset我們可以很簡單的控制表單內的元素是否disabled而不用一一指派每個input元素
更棒的是我們能夠為fieldset指定目標form元素，因此完全破除了input必須寫在form裡的限制
即便HTML5已經為input新增form這個屬性來指定目標表單form
但有了filedset，我們能夠更加合理的處理群組性的input元素。
fieldset可將表單form關聯元素input、select..群組化。
除了特定的三個屬性以外，也支援其他全域屬性
html
javascript
範例 JSBin
此範例展示了如何用javascript禁用與啟用fieldset
大家可以注意到，我們不用依序設定fieldset裡頭的元素
只需要控制fieldset的disabled與否即可，就連submitbutton也不例外
並且在範例中特意地將form的disable設為none強調完全隱藏表單元素
但我們依然可以使用fieldset與button搭配屬性form來submit該表單。
仔細的讀者可能會發現到fieldset裡的submitbutton依舊加上了屬性form
原因是，雖然改變field的disabled可以一起控制該button是否可以點擊
但button並沒有繼承fieldset的屬性name值，因此還是需要明確指定表單名稱id
順帶一提元素legend用以語易化的表示元素form的title",,['fieldset'],"['Attributes', 'Default CSS', '範例']",['範例說明'],['補充說明'],,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191088,ModernWeb,1,三十哩路，我的前端學習路程系列,7,Day07::我所知道的CSS設計模式與架構之BEM,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1512871196000000000,631,"這次分享的是BEM
BEM分別是
B=>Block
E=>Element
M=>Modifier
Block 區塊
網頁是由多個區塊組合自成一區
在命名上則是當開頭的
Element 元素
為Block的一部分（子組件）
無法獨立於Block之外
不過有些Block可能沒有Element
在命名上會以Block的名稱加上兩個底線__作為開頭
Modifier 修飾(我比較喜歡叫他裝飾!!)
用來定義Block或Element的狀態或屬性
同一個Block或Element可以允許多組Modifier同時存在
命名則是以Block或Element名稱加上一個底線作為開頭
實際運用上大概會像這樣
介紹到這邊，我個人比較喜歡BEM
雖然命名的方式非常長又繁瑣
但是這樣可以很明確的知道Block下面有哪些元素又或者加了哪些裝飾！
以上是我發現問題與解決問題的過程跟方法，分享給大家~!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191050,Security,1,IT安全稽核系列,7,1.7是否有文件或記錄顯示管理階層對資訊安全管理系統建立、實作、運作、監視、審查、維持與改進之承諾？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1512870823000000000,671,"職場上有種人，叫有責無權....這真的是屎缺。
職場上有種人，叫無責有權....你不是權貴，就不要幻想，這是每天都看報紙喝茶的，不清楚狀況就出來盧的工作。
職場上有種人，叫無責無權....這類都住冰櫃。
職場上有種人，較有權有責....這種動物，還要細分，一種是清楚狀況，一種是狀況外的。
不管你是哪種人，或者你是其他種的人，好比說外星來的(像我就是，歪星來的殺手，其實我就是督敏俊，來自星星的督教授，撥一下頭髮~~ 疑~~ 假髮掉了!)，我建議，在權與責之間，先決條件是記得「保護好自己。」
下面就是要講到權責問題，簡直是冰與火的戰爭....
一、資訊安全管理系統 （管理階層、資訊安全組織）
1.7是否有文件或記錄顯示管理階層對資訊安全管理系統建立、實作、運作、監視、審查、維持與改進之承諾？
說明：此項說明在於二個重點：1.管理階層有沒有核決。2.有無留下軌跡。
當職務已經擔任管理階層，有了「權」之後，相對就要有「責」，權責分明是一定要有的，雖然大家都知道，組織內很多管理階層有權之後，都不願意對是負責，規避責任，這類的事情屢見不鮮。
大家都會說：「沒有肩膀的主管。」
而在這裡，我們就要利用系統，分配責任給這類的主管，早期，一般的紙本文建，很多規避責任的主管，可以閃過很多責任，然而當系統規範之後，自然閃無可閃，而企業所用的ERP(Enterprise Resource Planning)就是建立在這個基礎上。當然，很多中小企業的ERP形同虛設，主要是企業規模還沒達到一定標準。然而，上市櫃公司就一定要走ERP系統，每個階層，一關卡一關，一關未過，絕對不會到下一關，而簽核之後，簽核的單位主管就要負責，否則就是內部管理失衡，一定會被主管機關懲處。而這樣子的概念，放到資訊安全上，就是希望管理階層去承諾與負責。
我想很多這裡的年輕人，一定不懂，甚麼叫ERP，我舉個簡單的例子，在正常的情況下，當你要請假，你送出假單，假單由你的代理人簽完之後，才能送到主管那裡，最後由主管核准，才能休假。而這種層層的簽核，就是最簡單的ERP概念。沒有過這關，無法到下關，下關駁回，就得重來。
這麼做的好處，就是希望公司管理階層，不要閃避責任，同樣的道理，資訊安全有多麼重要，把到放到銀行來看，如果一個不小心，整個銀行被駭客盜領，那到底哪裡出來問題，沒有人肯負責，沒有人肯承諾改進，那整個資安體系，很快就瓦解掉了。
資訊安全管理系統建立、實作、運作、監視、審查、維持與改進，這些敘述，是一個流程，每個頓點其實都要卡控，實際上，應該如下圖所示才對：

(製圖為作者本人)
權責要分明，才是組織讓管理階層最好的承諾方式之一，也是讓沒有肩膀的主管無所遁形的方法之一。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191202,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,7,[PixiJS-Day-07]stage、PIXI.Container與父子結構,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1512870803000000000,622,"PixiJS 在建立後會產生幾個成員：
本篇會提到的是 stage 與 stage 的 type: PIXI.Container
PIXI.Container 類別有一些特性：
-	容器　　：可加入其他元件與元件索引操作，如新增移除設定深度
-	可互動　：預設不可互動，設定為可互動後，可使用各種互動監聽
-	可視物件：可設定 x、y、alpha、setTransform 等
PIXI.Container 的容器介紹與操作

PixiJS 可視物件的起點是 stage，對比可想像成 HTML DOM 的 <body>，將元件從 stage 開始一個個疊上去。要讓物件可以被看到的話，要把物件使用 addChild() 等方法加進 stage，或是放在 stage 裡的 container 裡，移除則是使用 removeChild() 等方法。
stage 也是一個 container，只是最底層的 container 叫做 stage。
PIXI.Application 原始碼 ：
- 在場景上加入可視物件：
- 取得物件或是索引：
- 設定物件深度：
- children：
取得容器內所有的可視物件 readonly
- parent：
列出該物件的上層物件 readonly
設定 parent 則使用 setParent() 方法
- 除錯：
雖然可以用 children()、getChild() 等方法查找物件，但畢竟不是 HTML DOM 結構的除錯方式，在除錯時可能會有點不方便
我習慣使用 dat.gui 來替 PixiJS 專案除錯。
除錯的方法會在後續文章會提到
- PIXI.Container 的互動操作
interactive：
interactive 預設是 false，各個物件預設不會被點到，即使是物件相疊的情況，只要上層不指定 interactive = true; 就不會影響到下層被點到的情形
互動相關的內容會在後續提到
- PIXI.Container 的可視物件屬性操作
- position：
PixiJS 沒有 CSS，沒有 CSS 的 position:absolute 或 position:relative。
使用的是 (x, y)，座標系統左上為(0, 0)，物件放入場景或容器時，預設放在 (0, 0) 的位置
- rotation：
PixiJS使用的旋轉單位是弧度，如果要轉90度的話，寫法是
- pivot：
指定旋轉物件的中心點，需注意若改變 piviot 屬性後，子元件的顯示的位置會改變
由於 Pixi.Container 類別相當龐大，本文未列出所有的方法
完整屬性與方法於官網 PixiJS.Container 頁面上。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191053,ModernWeb,0,30天使用Node.js在AWS上開發後端系列,5,30-5Node.js起手式之專案建立與資料庫串接(1),neilwang,https://ithelp.ithome.com.tw/users/20107336/ironman,1512866959000000000,630,"為什麼學Node.js還要使用Express這個框架呢?
其實我自己的想法是, 框架本身畢竟是由一群人維護
身為一般的開發者, 應該專注在開發功能, 其他的只要跟著框架的規則
很多自己做要花很多時間的事情, 幾行之內就結束
不管是Express或是Koa2都可以, 先讓自己專注在功能開發上吧!
使用 Express 應用程式產生器 (Express Generator)
打開終端機
輸入
npm install express-generator -g
切換終端機的目錄到桌面
cd Desktop/
接著開始產生Express專案
接者會跑一堆字出來之後
接下來切換到自己剛剛建立的專案底下
接下來就可以直接透過輸入以下指令來啟動Express
通常我會習慣另外開一個models的資料夾在專案內
專門在放處理資料庫相關的程式碼
覺得指令麻煩也可以直接用編輯器建立!
只是想說用用指令, 看起來比較帥(?
接著可以用編輯器去編輯這個 index.js
這裡很推薦一定要使用index.js這個檔名
因為之後再引入的時候, 語法寫起來比較好看!
後面會再提到一次不用擔心
目錄結構會變成以下, 多了models這個目錄
稍微介紹一下什麼是API(Application Programming Interface)
簡單來說就是你提供一個功能給網頁或是APP呼叫
例如: 註冊會員
我們就可以設計一個API, 網址是http://xxxx.com/api/v1/auth/register 這樣
接下來寫個會員登入的功能吧!
我們會額外多一個路徑叫做ap1/v1
這樣API的網址就會變成 http://xxxx.com/api/v1/auth/facebook/login 這種
會用這樣設計的原因是假如有一天需要重大更新
就可以把v1切換成v2
這樣會比較有彈性!
routes/index.js
routes/index.js 是每個進來的API請求都會先經過這隻檔案
這隻檔案再依據api/v1/ 後面不同的路徑, 導向給不同的程式去處理
這篇實在太多東西, 會分成兩至三篇, 會再重新講解一些並總結!","['先安裝 Express Generator', '建立資料庫相關的程式']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191184,自我挑戰組,0,花式PHP系列,2,我來、我見、我宣告變數,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1512866522000000000,613,"先看看這段程式碼：
底下這段程式碼在模擬解析從 Google Distance Matrix API 回傳的結果正不正確、可不可用。
resolveApiResponse 成功的話會回傳一個物件、失敗的話則會回傳 NULL，
最後再透過 assertTrue 辨別有沒有執行成功～
底下程式碼的難點都有註記可以參考的網頁
「確定API執行成功」那段：
如果是你，你會怎麼精簡這一段程式碼呢？
這樣好多了吧？
但我這邊提供給你另外一個作法：
這樣子做雖然好像只是節省一行，
但當你在 if-else 之後還有要繼續使用這個變數，
或者你在 if-else 之後還有 n 個變數也需要拿去做額外的處理，這樣的方法就能節省 n 行呢！
看看最後一行吧！
我們直接把 resolveApiResponse 回傳的結果丟給 assertTrue 之後，
是不是如果要獲取 API 的結果就只能在 CALL 一次了呢？
不用的！
只要把程式碼改寫成下面這樣就行了！",,"['有個地方看起來很不順眼...', '另外一個地方也能這麼做']",,"['把共同的部份提取到 if-else 前面？', '直接在 if-else 裡面宣告！']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191199,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,7,[Day7]EasyFlowGP--系統設計工具(二)簽核流程設計師:服務任務SessionBean,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1512866476000000000,611,"續昨天的Session Bean，今天來分享鼎新在EFGP與TipTop整合的標準Session Bean 設定。
一.表單結案回寫TipTop簽核結案

當簽核到最後一關要結案時，請再往後加一個[服務任務]，啟動SessionBean將簽核狀態回寫TipTop。
此函式需要傳入一個流程變數，其值為流程序號processSerialNumber
名稱:	自由命名ex:簽核同意回寫TipTop	
伺服器種類:	JBOSS	
伺服器IP:	  localhost	
伺服器Port:  1099	
JNDI Name:	TiptopManager	
函式名稱:	 processAgreed 
Home Class Name:  com.dsc.nana.services.sysintegration.tiptop.TiptopManagerHome	
			-----------------------------------------------
此函式processAgreed傳入參數只有一個，就是流程序號。		
			請先新增一個流程變數		
ID:pProcessInstanceSN		對應流程變數:processSerialNumber

二.表單撤銷回寫TipTop抽單狀態
當發單人執行撤銷(俗稱抽單)的動作時，系統要更新TipTop的簽核狀態為抽單。
[[注意]]這動作的服務任務不是放在流程畫面上，是在[主流程屬性設定]\事件處理
的流程撤銷指定SessionBean

名稱: 自由命名ex:流程撤銷	
伺服器種類:	JBOSS	
伺服器IP:	  localhost	
伺服器Port:    1099	
JNDI Name:	TiptopManager	
函式名稱:	     processAborted 
Home Class Name:  com.dsc.nana.services.sysintegration.tiptop.TiptopManagerHome	
			-----------------------------------------------
此函式processAborted傳入參數只有一個，就是流程序號。		
			將先前設定好的流程變數指定就行。		
ID:pProcessInstanceSN		對應流程變數:processSerialNumber

三.表單終止回寫TipTop抽單狀態
當簽核關卡執行終止流程(俗稱不同意)的動作時，系統要更新TipTop的簽核狀態為送簽退回。
聰明的你是否有留意到先前的圖示。設定的路徑一樣是在[主流程屬性設定]\事件處理
的流程終止指定SessionBean。(圖略)
名稱: 自由命名ex:流程終止-不同意	
伺服器種類:	JBOSS	
伺服器IP:	  localhost	
伺服器Port:    1099	
JNDI Name:	TiptopManager	
函式名稱:	     processDisAgreed 
Home Class Name:  com.dsc.nana.services.sysintegration.tiptop.TiptopManagerHome	
			-----------------------------------------------
此函式processDisAgreed傳入參數只有一個，就是流程序號。		
			將先前設定好的流程變數指定就行。		
ID:pProcessInstanceSN		對應流程變數:processSerialNumber

以上就是EFGP整合TipTop最主要的三個SessionBean設定。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191142,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,7,1-6.監控工具之一:ZabbixActionTriggerstoSlack,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1512865937000000000,626,"做完監控最後就是要做處置拉，簡單的發訊息給負責人請他處理，進階的寫腳本做重啟還原等動作，而這些發送訊息或是腳本通常會花費一些時間客製化調整。
首先到Actions 頁面左上角選擇Triggers => Create action
建立一個規則(Group分得夠清楚這邊設定規則比較方便)以下是CPU告警範例
A 不再維護中
B 是在Zabbix Servers的Group底下
C告警嚴重性大於Warning
D Application歸類在CPU

Operations這是發送訊息的內容、發送對象及方式設定的地方

這是給簡訊的告警訊息，只列出重要的資訊
Recovery operations
告警訊息
Operations設定發送對象
Steps  1-0 一直重複步驟
Step duration : 經過600s後動作
Operation type : Send Message 發訊息
Send to User groups: 發給在administrators群組底下所有人
Send only to: 用什麼方式發 ，下面介紹Media types設定方式

Administration => Media type
如果公司有架設mail server，將IP指過去驗證即可，gmail信箱設定方式會複雜許多，有興趣可以參考http://my-fish-it.blogspot.tw/2017/03/ss-zabbix-32-e-mail.html
這裡介紹用slack
創立帳號後，點選+建立一個Channel

點網址https://my.slack.com/services/new/incoming-webhook
選擇剛建的channel後點Add

找Webhook URL把連結記錄下來

SSH連上Server
url後面輸入剛剛紀錄的
回到Zabbix Web頁面  Administration => Media type
預設有Email，如果公司有架設mail server，將IP指過去驗證即可，gmail信箱設定方式會複雜許多，有興趣可以參考http://my-fish-it.blogspot.tw/2017/03/ss-zabbix-32-e-mail.html
使用腳本方式發送可以接API傳給簡訊平台,line,slack等API
https://www.zabbix.com/documentation/3.4/manual/config/notifications/media/script
點選Create media type，因為Type選Script，Script name會去找/usr/lib/zabbix/alertscripts路徑底下檔案，Script parameters是依照zabbix macro格式:發送給誰、主旨、訊息

接著到Users選擇要發送的對象選Media，點Add新增

Send to輸入建立的channel， When active可以設定只在這時間內發送訊息

最後回到Action的Send only to就出現Slack可以選擇了
可以故意將告警規則調低一點測試訊息。

其他平台可以參考以下連結，原理都是相同的
Line
http://chienleebug.blogspot.tw/2017/03/zabbixalarm-to-line-notify.html
Wechat
http://www.linuxprobe.com/zabbix-alert-with-wechat.html",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191197,ModernWeb,0,從無到有，使用Go開發應用程式系列,2,環境建置,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1512865750000000000,608,"今天來建立開發環境，會分成安裝主程式與設定環境變數兩個部分。
這裡的主程式是指 go 指令，它能處理編譯、直譯、建置、格式化程式碼、測試、下載依賴等多種工具的組合。
以下介紹常見的環境該如何安裝 go 。
使用 Homebrew 可以簡單地安裝：
未來將會使用 MacOS 當作主要練習環境。
使用預設安裝，但筆者試了一下， Ubuntu 預設版本是 Go 1.6 ：
使用 Vagrant 建立 Ubuntu 虛擬環境測試
如果需要最新版，可以加入 golang 的 PPA ：
注意安裝套件與 go 指令的位置
如安裝上遇到問題，也可參考 wiki 。
可到官方網站下載 MSI 檔安裝，接著重新打開命令提示字元後，就可以使用 go 指令了：
可下 go env 取得環境變數：
裡面有一個 GOPATH ，這是需要設定的環境變數。它代表著 go 程式的工作空間（workspace）， Windows 預設會設定在 ~\Go ， Unix-like 則沒有預設，官方建議設定在 ~/go 。
Workspace 裡，劃分成三個主要目錄：
接著可以使用 go 的第一個指令－－ go get ，它會把目標下載回來放在 src 裡，如：
這樣會把上面這個 repo ，使用 HTTPS 協定 clone 到硬碟裡。
當如果編譯需要第三方的原始碼時，即可使用 go get 下載，同時這也可以用來下載自己或是第三方的原始碼。把所有原始碼集中成一個大大的 workspace ，這就是 go 管理原始碼的概念。",,"['安裝主程式', '環境變數設定', '今日總結', '參考資料']","['MacOS', 'Ubuntu Linux 16.04', 'Windows']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191198,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,7,JavaScript如何越來越像正常的語言-前端模組化早期歷史(YUI+scope),"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1512865643000000000,595,"Hi 大家好
如果是第一次點進這個系列的話
這幾天的內容是介紹 Vue-cli 這個工具產生的 「boilerplate」
包含了哪些 JavaScript 的工具
在昨天，我們花了一整天在討論 JavaScript 這門語言
在我們軟體開發上會碰到的問題，簡單列出來有
這其實就是「Modern JavaScript」的意思了！
其實在近 10 年間，前端發展了非常多的工具來解決 JavaScript 基本的設計
接下來我們就要一探另一個厲害的設計模式 - Module
在前端，最早自幹的一套 module 系統叫做 YUI

如果去網路上做些調查
https://www.slideshare.net/josephj/yui-14721701
https://itw01.com/8FOED5A.html
http://josephj.com/entry.php?id=385
http://josephj.com/entry.php?id=394
https://www.slideshare.net/josephj/yui-is-sexy-for-jsdctw
https://github.com/creeperyang/blog/issues/17
YUI 最早在 2009 年就已經出現了
他使用的就正是 Module (模塊化) 的設計模式
什麼是模塊化(Modulize)
基本上模塊化就是，在開發上，盡量讓每個檔案
都成為一個自成一樹的環境
想要在你的檔案(模塊)裡新增任何第三方套件
你都得將他一一引入，並且取名
以不仰賴任何的全域變數為優先
任何你加入的依賴都會是你手動新增的

在 YUI 裡面，做到這件事的方式基本上很簡單
我們寫的任何 code，都必須包在一個 function 裡面，並且讓他是匿名的(Anonymous)
這邊就是善用了 JavaScript 唯一的變數 scope 是 function 的特性
只要我們的每段 code，都使用一個沒有名字(代表不會產生全域變數)的 function 來執行
而要加入任何依賴，都得手動當作參數來加入
我們就可以達成 Modulize 了

(這邊關於 YUI 的 code 不必細讀，有興趣的話可以搜尋 module design pattern 會更有幫助)

最後執行的方式，就是由 YUI 自己幫你把所有的 Module 都執行
Dependency 也會自動幫你加入
這就是最基本的 Module 設計模式了
在 JavaScript 裡面應用起來，基本上就是使用 function 來限制變數的 scope
還記得 closure 這玩意兒嗎？不是只有面試會用到
在像是不管最新的 Webpack、還是 Browserify
都用到了許多像是 closure、IIFE 的方式來善用 JavaScript 的變數特性
希望在篇之後，可以讓大家更了解 Module !
今天我們介紹了最早的前端模組化框架之一 - YUI
也介紹了什麼是模組化、沙盒，這些常用在軟體上的設計模式
不過！基本上這些早期的工具都不是很完美！
他們的模組使用起來非常手工，除了寫 code 外還得包來包去的
並且，這些依賴(Dependency)都是使用手動當作參數加進去的
除非你們團隊很嚴格！不然這些規矩還真麻煩
接下來我們將開始要進入未來了！也就是 Node.js 的出現
使得 JavaScript 的發展突飛猛進，以及在背後支持的社群
到底在模組化的過程做了哪些事
我們明天見！","['前言', 'Module Loader', '執行起來', '結尾', '明天']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191196,ModernWeb,2,前端工程師養成手冊系列,7,寫爛CODE是學程式必經之路,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1512864756000000000,1051,"在我進公司寫程式的時候，前幾年都覺得自己在產出一堆噁爛的 CODE，業界還有一個術語叫做「義大利麵的程式碼」，意思就是你寫的 CODE 就像是麵條雜亂交錯，完全無法看出你的程式脈絡。
尤其是網站要準備上線時我就會特別緊張，都會想拉同事幫忙看一下能不能這樣寫。
阿杜：「靠北只要可以動就好了，管那麼多幹嘛？？」
我：「.....」
設計師同事：「嗯..你網頁跟我設計稿很一致啊，應該沒有什麼問題吧？」
我：「喔....」
於是乎網站上線三個月後相安無事還譏笑我顧慮太多！！！
可惡你們都不懂我內心的糾結，我裡面下的 CSS 程式碼都從網路上複製亂貼亂測試，網路上說這樣就能兼容 IE6、7、8 我就傻呼呼的貼上去也沒問題？那時候流行 table 排版，裡面的結構 table 包 table 包 table 巢狀到不行你們也覺得沒關係？我 jQuery 效果亂貼跑馬燈就出來，問我怎麼寫？我只會跟妳說就這六行 jQ CODE 跟一個 CSS 載入就會動，你說原理哦？不好意思他 CSS 寫得很外星語言我完全看不懂欸。
以致於剛進公司前幾年的上線網站都不敢跟人說那些是我做的，深怕別人會打開原始碼，然後恥笑我的 CODE，恥笑公司怎麼會請到這麼巢的人來做網頁排版。
相信各位在開始學寫程式的時候，也一定會有我以上的心路歷程，那麼到底該如何調整心態度過這段時期呢？就讓我娓娓道來吧。
寫程式同時也是培養邏輯的過程，以網頁排版來說你學了 HTML、CSS ，可能在網頁排版邏輯並沒有融會貫通，自己實作出個網站。JavaScript 學了一些流程控制、變數函數，自己硬幹出一個超陽春版的 todolist 代辦清單，雖然當下你都會覺得自己做得東西超爛，但你確實靠自己的想法做出一個「可以正常運作的東西」，更重要的是當東西做出來，才有辦法去優化，思考下一步要如何擴充功能，或做完後去搜尋其它人是怎麼寫的並加以練習。
所以我都會跟初學者說，你們就放心寫爛 CODE 吧！一位成功的資深工程師的背後都有著一堆爛 CODE，再從中去思考如何讓自己更好，沒有人天生就是天才，信手拈來就寫出一行行好 CODE，所以拋棄你的羞恥心，初期先以「先求有再求好」的心態來學習程式吧！
比較常見的例子就是 HTML、CSS 還沒實際做出一個版型就想直接用 Bootstrap，或是 JavaScript 才剛會 變數、if、for 等基本語法，就想直接學 SPA 框架 (vue、react、angular)。
以前我也會這樣，當社群上有人分享他開發的習慣與設計模式後，我就依樣畫葫蘆去模仿，然後還洋洋得意地以為自己功力大幅提昇。但實際用幾天後才發現，裡面有太多抽象的設計模式需要理解，或是你的專案根本不需要用到如此複雜的開發架構，導致自己痛不欲生。
所以會建議不要好高騖遠，好好地打穩基礎功才是王道，所以每當有人問我前端趨勢是哪些時，介紹完後我都還是會耳提面命地說，先把基礎功學好吧。要用 CSS 框架，至少底層的 CSS3 media queries 瞭解響應式原理，你才知道當版型有超出預期的調整時，自己也能寫 CSS 去客製，想學 JS SPA 框架，至少先把 AJAX 原理搞熟、知道網址 router 邏輯、JS執行生命週期再去碰才不會覺得各種觀念卡卡。
當我培育線上學生投入到一個我認可的階段時，我都會建議他們盡快去就職將能力培養起來。
有時候透過自學你所能涉獵的範圍有限，例如一個專案從開始到結束的過程、跨部門溝通，更重要的是程式碼也會比較全面，在公司你要做的東西絕大部分都在做別人的產品服務，在功能邏輯也會比較複雜，吸收得東西也會比較多。
那在公司執行專案確保東西能如期交付，通常都會去壓時程，例如設計師要花二天設計與跟客戶確認，網頁切版 N 天，後端套程式 N 天。在時間有限的情況下，才能督促自己提升程式開發能力。
常常會有學生問說：「老師我想用 XX 框架，你覺得我可以在下個專案上用用看嗎？」
我都會建議說想試試看都 ok，但不要一口氣在一個專案用太多新技術，以免變數太多，像我在開發新專案時，至少七成是我有把握的東西，其中三成就會是最近我吸收的新技巧，想透過專案來使用他們提升我的程式功力。在時間壓力之下，學習效果自然會被逼得更好。
當然，你要全盤投入新技術在專案上也不是不行，個人覺得在開發程式時，也是在培養一種「我就是有辦法將這個系統依照我的技術觀打造起來」的自信，在決定導入前，先把一些重要的邏輯設計先設計出一個雛形 MVP，確認 ok 就放手去幹吧。
那時程被拖延到怎麼辦呢？當然是自己加班補起來啊，如果是你自己壓得時程但自己錯估時程，本來原本技術就可以做好的事情，因為你投入新技術導致時程延宕，那就是你自己的責任。但這也能讓你培養起「瞭解自己的學習投入狀況，並評估工作時程的能力」，這樣一來在專案跑個好幾輪樣流程後，功力絕對大增。
在公司一定會遇到時間很趕，但又必須有產出的時候。以我來說，正常開發時程我就會用我自己擅長且又正規的寫法來寫，都會考慮到程式品質與未來靈活彈性的狀況。但當時間少時，你自然會以所有功能都先有，連命名都超懶、完全不管任何品質，反正可以跑就好。雖然在時間允許之下你還是會瞬間寫出正規的 CODE，但絕大部分都還是相當的骯髒。
在這過程中也是對自己能力不足的照妖鏡，你可以發現自己在哪些細節上還有待加強的空間。例如對物件導向不熟悉、或是 CSS 模組設計上的脈絡，表示你對那些東西沒有真正內化到自己的心裡。
所以在公司沒有很忙得時候，我還是會自主研究自己已經上線的爛 CODE，去思考我哪裡還有進步的空間。唯有自主發現自身不足之處，才有辦法讓自己更好。",,"['自己要先寫出爛 CODE 才知道要怎麼改進', '不要還不會走就想學飛', '透過專案時程壓力來練功', '適時重構，重新檢視自身不足']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191195,ModernWeb,0,JavaScript基礎二三事系列,7,Day07　型別與運算子,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1512864637000000000,597,"今天開始，課程影片進入第三章節囉！
JavaScript是動態型別Dynamic Typing語言，相較於C#、JAVA之類的靜態型別語言，JS的變數不用在編輯時特意宣告型別(例如布林值、字串、數值..等等)，在執行時它就會自動判別。
而說起型別，JS有6種純值Primitive Types，(又稱原始型別、基本型別)，「純值」是什麼意思呢？
純值是指一種資料的型別(型態)，換句話說，純值(基本型別)不是物件，因為物件就是名稱/值配對的組合物，為避免與口語上的'值'搞混，下面純值改稱呼原始型別或基本型別。
這6種基本型別分別是:
undefined
表示未定義，是JS給所有變數的初始值，剛宣告的變數在我們賦值之前，其值是 undefined，所以開發者最好不要賦值undefined給變數。
null
表示空、不存在，開發者在宣告變數並要先表示這個變數沒有值時，可以賦值null，不要手動賦值為 undefined。
另外，JS的null有一點特別的地方，當我們使用typeof(null)來檢查時，居然會回傳object。

欸~上面不是才說Primitive Types不是物件嗎？
null確實是Primitive Types，而非物件型別，畢竟物件的特色就是可以自由增加屬性，而null既不是名稱/值的組合，也沒辦法讓開發者自行修改其屬性，它確實是Primitive Types原始型別沒錯。
那為何使用typeof()檢查null會回傳object？
原來，這個BUG是JS的歷史包袱之一，這個設計可以追究到JS被創造出來時候，具體典故可以參考阮一峰大的文章：undefined與null的區別裡的說明。
boolean
表示true或false其中一個，意即是/否、對/錯、成立/不成立。
number
表示數字，JS的數字型別只有number，不像其他程式數字還有分整數與其他特定數值型態，另外JS的number是浮點數，表示(實際上)有小數點跟在後面。
string
表示字串，由字符組成，可以用單引號或雙引號來表示。
symbol
表示符號，是ES6新增的型別，可以賦予變數獨特性、獨一性。
了解何謂Primitive Types後，最後我們來快速看看運算子Operator
在JS中有不少運算子種類：算術運算子、賦值運算子、比較運算子、邏輯運算子...等等很多種。
我們最熟悉的就是算術運算子啦，+、-、*、/(加、減、乘、除)，至於JS怎麼知道，當我們輸入+這個符號就等於相加呢？
可以把運算子想像成是函式的一種，這些符號會將前後兩個參數傳入對應的JS內建的函式中，進行個別的運算並回傳。
　
　
　
小結
今天複習了何謂Primitive Types與運算子，明天來看看運算子的優先性。
至於今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分3-19~3-21",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191130,自我挑戰組,1,用IT看世界系列,7,研究所-進修之路(1),allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1512864130000000000,682,"其實這週真的很煎熬要生出兩份備審資料..........

因為我除了白天要工作，還要準備研究所「備審資料」(希望順利考上)年底到了又兼任公司尾牙主持人.....慘,假日上CCNA的課程,晚上下班週二週四烹飪課allen的異國料理奇遇記(幸好烹飪課結束了)....不然我真的一天24hr不夠用
但~~~結束其實是另一個的開始
在準備要參加IT鐵人賽其實是需要很大的勇氣請參閱Day1-緣起，因為12月研究所報名是我人森hen重要的MBO，why??
#########我跟板上的一些大大不一樣,很多都是有資訊背景###########
而我非本科系畢業，從畢業開始進入業界工作後，想繼續進修這件事情，已經想很久了，但都是停留在「想」，沒有實際作為，真佩服自己當年30歲,機票買了就飛去澳洲流浪的勇氣，話說我回來後一直沒有忘記我的資訊所的夢，在銀彈存夠之餘，再繼續往前衝，其實對我而言上不上資管所或者資工所這都不重要，我比較在乎的是，學校是否有足夠的資源讓我使用，舉例來說，我相信有接觸過Linux的朋友一定有聽過鳥哥這號人物，但講蔡德明可能,他到底是誰????像這種神級的人物出現在學校，學生可能比較無感，反正就學校老師啊!!教資訊的，如果校園有這種神級人物隱藏在此，能修習他的課程，比你念哪個系所重要吧??
一直認為，學校只是個媒介
學生的想法，才是導引他最重要的方向
在此非常感謝亦師亦友wkpeng大大推坑",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191096,SoftwareDevelopment,4,爬蟲始終來自於墮性系列,10,IT鐵人排程發文,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512864005000000000,788,"參加 IT 鐵人賽目前已經進入第七天了，發現其實產文章不是最難的，反而每天都必須撥時間在電腦前才是最困難的，我都沒辦法不帶電腦出遠門了ＱＱ。既然如此，那我們就寫個排程讓系統自己每天發文章，我只需要把文章準備好就好了。
IT 鐵人賽要發一篇文章的流程其實不困難，大致流程就四個動作

而在這些動作流程跑下來，發現在第二步驟「點選主題」時產生了一個 create  的 request，然後我們被導向一個帶有類似 article id 的頁面

接著在點選第四步驟「發表文章」時，發現他又送了一個關鍵的 publish request 出去，裡頭帶著文章標題、文章內容、tags，還有兩個神秘的參數 _token 和 _method，接著就發文成功了，可見我們只要搞定這兩個 request，那麼應該就大功告成了。
ps. 這兩個神秘參數對網站來說有其意義，所以並不能省略，一個是發文的 token 驗證，一個是 request 的 method，因為 browser 其實無法容易的送出 put 和 delete method。
但在繼續之前，我們忘記了一件事情，就是肯定要先登入才能夠發文呀。在 Day 4 爬蟲原則和技巧中有提到，對於 http 來說，每次的 request 都是 stateless，也就是說，在這個 request 裡面肯定有某樣東西是驗證我們為已登入狀態。易地而處的思考一下，若我們是網頁工程師，那麼若要驗證使用者，肯定第一個會想到的就是 session 和 cookie。

所以直覺的就來測試看看把 cookie 加上去，看起來是可以確保是登入狀態，同時我們檢查一下 cookie 的有效期限有 30d，看起來挺夠的。

接下來我們模擬 create 文章的 request，同時帶上 cookie，然後我們得到一個帶有 article id 的 302 redirect response。

接著我們對這個 article id 做 publish request，一樣帶上 cookie 還有事先準備好的文章內容外加那兩個神秘的參數 _token 和 _method，送出後我們就看到成功的 response，搞定！
先把準備好的 cookie、post subject、post description、tags 拿起來備用。
接下來實作 createPost function，這個 get request 不用帶任何參數，只要一個固定的網址(網址每個人都不一樣，請看自己的建立主題文章的網址)，不過在 options 裡面我加上 followRedirect: false，因為這個 request response 會直接 302 redirect，為了比較好抓 response 裡面的 article ID，所以我停止自動 redirect，然後我用 regex 將抓取到的 article ID 丟給 callback。
ps. 在使用 regex expression 的時候，我常用 https://regex101.com/ 來做測試
然後我們就準備來發文章了，發文章只需要一個 post request，這裡 post 過去的 url 會包含剛剛得到的 article ID，同時帶上觀察到的 form 的參數，然後再放個 callback 驗證一下 request 完成。
我們完成了所有元件，接下來就來組合流程吧，首先先 create post，取得 article ID 之後，就丟入給 publish function。輕鬆寫意，不過在測試的時候記得去刪掉你發表出去的測試文章！
當我們可以輕鬆的執行發文之後，我們還需要一個排程工具來幫助我們在固定時間發文。想到排程就肯定是 crontab 當能不讓了，可以將預先寫好的文章內容，用檔名分好檔案，然後排程讓 crontab 在當天就讀取該檔案的內容發送文章，如此一來，我們就只要專注在產生文章的檔案就行了。
ps. cookie 有有效期限，並且隨時可能會被 disable，所以儘可能的話，在發表文章之後，可以送一個 notifiy 到我們的 email，這樣才能萬無一失。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍伸應用']",,"['驗證身份', '建立文章', '發表文章', '備料', 'createPost function', 'publishPost function', '積木組合', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191191,自我挑戰組,0,ArasPLM開發練功30天系列,6,[Day6]RelationShips-關聯表加總數字欄位檢查,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1512863947000000000,564,"延續上一篇，我將 work_order_part的ItemType屬性增加一個欄位，稱作數量quantity

然後將上一篇的Code改為
這樣就可以直接讀取關聯表中的欄位值，直接做數量計算。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191190,自我挑戰組,0,"Let's""Go""系列",4,"Day04　Hello,世界",syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1512863563000000000,583,"在完成前一章的安裝之後，我們開始第一個Go程式吧
正如同很多程式語言書籍都會有的部分，""Hello World""
你應該會發現三個區塊
package後面是你使用的package名稱，在後面我們也會提到如何自己定義package
由於我們的第一個程式會需要使用到Println，因此我們必須調用fmt這個package
在這個程式的main區塊裡面我們透過Println來印出 Hello, 世界",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191008,AI&MachineLearning,1,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,6,06.BotFramework應用:FacebookMessages機器人,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1512863288000000000,606,"可以銜接聊天機器人的服務很多，其目的與用途有不同；前一章節我們介紹 Slack 與 Bot 之間的介接，多數可能用於工作與討論群組；這一章節我們所介紹介接 Facebook messages，可以用於行銷、客服或宣傳。當你決定開始製作聊天機器人的同時，可以先思考用途，再決定與哪個服務介接。
Step 1. 首先你要有個 Facebook 粉絲專頁：https://www.facebook.com/bookmarks/pages 這個連結可以建立新的粉絲專頁。您可以嘗試建立一個，我用的粉絲專頁 https://www.facebook.com/JustCoding4Fun/ 如下圖：

Step 2. 在關於這個頁面有粉絲團編號，先記下這個編號，我們等等會用到

Step 3. 接下來我們需要一個 Facebook app

Step 4. 建立完成後，我們也記下應用程式編號與秘鑰

Step 5. 接下來我們要開啟 message 服務：點選新增產品 → 設定

Step 6.找到權杖產生 → 選擇粉絲頁面 (需要登入 Facebook )，會產生粉絲專頁存取權杖，請記錄下來


Step 7.  接下來選擇 Webhooks，你會看見需要填寫 回呼網址(callback URL) 與 驗證權杖(Verfiy Token)，這是什麼 ?


Step 8. 我們回到 Bot framework 站台 → Channel →  Facebook Message，拉到下方就可以看見回呼網址(callback URL) 與 驗證權杖(Verfiy Token)。


Step 9. 將剛剛資料貼回，並在訂閱欄位勾選 messages, message_postbacks, messaging_optins與message_deliveries


Step 10. 回到 botframework 設定畫面，將前面步驟的粉絲團 ID、Facebook app ID, 秘鑰 與粉絲專頁存取權杖 填入並點選Save

Step 11. 接下來要新增審查內容，點選新增後 → 編輯細節。完成後提交審查，審查通過後就能夠使用
註：您可以指提交 pages_messaging項目

沒想到 Facebook Bot 設定如此的嚴謹，還需要審核後才能運作 ","['前言', 'Facebook messages 設定', '參考資料']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191193,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,6,Mockup,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1512863259000000000,718,"Wireframe 只能算是畫面設計過程中的草稿，最後拍版定案的畫面會做成高精細度的圖交到前端工程師手中，這種圖就是 mockup，前端工程師就會依照 mockup 指示來切圖。
Mockup 和 wireframe 的差異是 mockup 需要符合網頁使用的 grid and design system，而 wireframe 只是在探索元件之間的關係，憑設計師的直覺判斷元件擺放的位置。
那我們就是沒有設計天份怎麼辦？（所以才來當工程師啊！）沒關係，只要掌握 grid 和 design guideline 二樣原則，我們也可以設計出看起來專業的網頁喔！
這邊要介紹的二樣東西是 8-point grid 以及 Material Design.
先講 Material Design 吧，這個大家一定聽過，就算沒聽過也一定用過。Material Design system 是 Google 為扁平化設計原則所開發出來的一整套設計系統，在這之前 Google 一直被嘲笑，和 Apple 比起來，較沒有統一的設計風格。Material Design 發佈之後，很快的就被開發者和設計師所接受，我覺得它的好處是適合用在任何裝置、任何大小的螢幕，而且 web 及 app 上的差距不會太大。相比之下，倒是較少看到將 iOS 的設計系統搬到 web app 上。
採用 Material Design 有二個好處，第一個是它有完整的線上文件，裡面已經清楚的幫我們規畫好各種 UI 元件，提供配色參考，以及各種圖示。第二個好處是現在所有 Google 產品都已經改成 Material Design 外觀，也就是說全球的使用者每天都在接受 Google 的教育，對這種設計已經很熟悉，不需要我們再想理由說服客戶。而且我們自己當然也很熟悉，開發起來會比較順利。
再來講 8-point grid，grid 是格線的意思，網頁設計事實上是從平面排版演化而來，排版是為了讓我們的大腦容易識別，因為大腦的一個特性是「尋找規律 (pattern)」，有助於大腦在短時間內處理大量的感官訊息，然後才去判斷要在哪裡分配較多的注意力。一個例子是我們在看報紙時一開始一定是跳著看的，發現有感興趣的專欄，才會仔細讀裡面的文字，而報紙的排版有助於讀者區分專欄。我們在瀏覽網頁也是採F字或Z字的方向，找我們感興趣的訊息，不可能細讀網頁上的每一個字。有了格線的輔助，能讓我們的頁面佈局有「規律的美感」，UI 的重點其實就在一致的規律。
8-point 在這裡可以當成 8-pixel 來看，也就是說元件的高度是8的倍數，元件之間的距離，和元件內的 padding 也同樣是8的倍數，為什麼是 8px 呢？
其實這個數字沒有硬性規定，其中一個原因是常用的螢幕尺寸屬於8的倍數的比較多，如 1024x768, 800x600, 1920x1080,  320x568. 另一個原因是8是雙數，對主流的高解析度螢幕，不管像素的密度多少，都能確保 UI 成像後是完整的像素，而不會有小數點。參考來源
下面的圖是我用 Material Design 以及 8-point grid，在 Sketch 做的響應式佈局。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191194,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,5,【Day5】解說第一個UnitTest之1-程式碼解說,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1512863162000000000,582,"第四天，裡面有兩個檔案LogAnalyzer.cs 和LogAnalyzerTests.cs。其中LogAnalyzer.cs為主要的功能程式，而另外一個就是我們的主角Unit test的LogAnalyzerTests.cs。本次主軸將會討論這個檔案。
概述一下LogAnalyzer.cs。這是一個測試是否為log檔的檔案，帶入的參數是該檔案的名稱。由此可知我們的判斷依據就是檔名，如果是正確的檔名，將會回傳true，如果是錯的就是false。所以在unit test中，我們要執行的測試內容，就是檢查這個「判斷檔名」功能是否正常運作。
首先要製作一個正常的功能，判斷IsValidLogFileName(string)功能是否正常，所以測試要包含回傳true和false，因此有一個會回傳true的測試：IsValidLogFileName_goodExtensionUppercase_ReturnsTrue和會傳false的測試：IsValidLogFileName_BadExtension_ReturnsFalse。
在每個測試方法上面有個[Test]，這是一個標記方法的方式，它讓NUit Test可以識別此方法是一個測試的方法。
而測試的方法內有測試目標方法被呼叫，並且帶入我們所要測試的檔名。後面的Assert是一個Nunit.Framework內的一個Class，提供靜態方法，這是用於聲明某些特定的假設（也就是我們測試期望的回傳值）是應該成立的。以IsValidLogFileName_goodExtensionUppercase_ReturnsTrue為例，我們是期望它要回傳true，所以我們使用Assert.True(bool)，如果測試的值是true，則表示通過。同樣道理使用Assert.False(bool)，表示預期是false。
而如果這兩個測試有通過，在測試結果（第四天最後一張圖）會亮綠燈，當失敗就會亮紅燈。這也就是Unit Test有沒有通過的圖示。
明天將會說明這個測試的精神與結構",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191185,自我挑戰組,0,,6,不夠Modern不能稱之為是ModernWeb,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1512862378000000000,594,"各家的網頁、網站 開發語言，
或是 相關的前後端工具，
甚至是UI/UX相關的方法或是實作。
現在都是與日俱進，
不管是前端的進步也好，
還是前後端分離這件事情，
甚至是後端開發語言也是不斷地更新、進步。
JavaScript 這10年內的進步，我相信大家都是有目共睹
不斷地進步與進化，現在用JS都可以寫前端+後端了
還有各種開發用的Framework可以使用，不論前後端甚至是APP端都蓬勃發展呢
大家也應該對於這個主題中的各項子主題都相當熟悉才是
雖然現在沒有明確定義網站開發的整體流程分工，
自己工作過以後，也覺得分工也是因公司因團隊而異的
這個主題現在有74個人參與，自我挑戰也才73個人 (12/11)
所以想必不用我多做說明了
來推薦10幾篇進度最多也挺不錯的主題吧
三十哩路，我的前端學習路程 8/30
持續30天來記錄自己學習前端技術的心路歷程
認識 Chrome 開發者工具 8/30
在日益複雜的前端工程中，開發者工具是一項非常重要但是又常被遺忘的工具，所以希望透過這一次的鐵人賽跟大家介紹 Chrome 開發者工具，讓大家的除錯功力更上一層樓。
next.js + 各種套件組合 8/30
next.js 一些基本介紹與各種套件的組合介紹
重新學習網頁設計 8/30
HTML5, CSS3, ES6 更新已久，很多新東西並沒有花時間去認識。 希望可以藉這個機會好好更新下自己的知識庫，讓自己技術跟著時代前進。
前端工程師養成手冊 8/30
學習程式時常會遇到許多未知的挑戰，當自己無法解決又求助無門時，容易讓自己止步不前，原本想踏入程式之路的熊熊烈火因此熄滅真的非常可惜。 這本手冊我將會整理這幾年投入前端的經驗談，以及輔導超過兩百位前端轉職成功所內化出來的心得，讓想成為前端工程師的朋友，能夠吸收我們前人的經驗而更加順遂 :D
PixiJS，方便好用的 WebGL 內容產生工具 8/30
PixiJS 是運作在 WebGL 下的內容產生工具，如果頁面不支援 WebGL，也可自動轉換成在 Canvas 裡運作。 內建各種互動方式，可以使用一套程式碼，分別對手持裝置與PC做不同或是相同的事件監聽。 也內建了遮罩與混和模式效果，視覺與互動上可考慮與一般網頁不一樣的呈現方式。 擴充上也可再加上 WebGL 濾鏡等功能，更多的介紹與實作，就在內文裡了!
新時代的網頁框架比較-- 淺談Rails、Django、Phoenix、Laravel 7/30
寫完題目就有點後悔，我真的要談這麼大的題目嗎？（題目是可以編輯的吧ＸＤ）反正鐵人賽本來就是要把自己逼入絕境，發揮人的潛能不是嗎？ 前陣子學了一點Elixir與Django，覺得與Ruby on Rails的交互參很有意思，在文學領域有一門學問叫「比較文學」，但比較不同程式語言框架之間的文章卻不常出現（或是我孤陋寡聞）。 希望這個題目可以給猶豫不知道要選擇哪一種框架的新手作為一些參考。同時我也是擔心今年如果單純寫Ruby on Rails，我可能會湊不滿三十天啦。
如何在前端開發流程中加入使用者經驗設計 - 以線上相簿為例 7/30
以技術開發為主的前端工程師，如何在開發流程中，加入使用者經驗設計的工作項目，然後以 React 開發一個線上相簿。希望透過這個分享，讓工程師有基本的 UX 能力，能在開發前就介入產品設計，避免在過程中亡羊補牢，導致產品最終像是個拼湊起來的結果，增加開發的成功率。並且以一個 ES6 新手記錄 React 心得。
平時沒注意的 JavaScript - JS 生態系及週邊工具整理 7/30
Alex Tzeng @alxtz 基本上我會把之前讀過，有實際學過的原文好文做一些翻譯，順便附上實作。 熟悉的領域包含 Vue, React, Webpack, Node, Python, Shell, Linux, Atom, Open Source, Functional Programming, 寫履歷, 面試, 出國。 基本上之後我會將更詳細的更新寫成網頁放在 GitHub 上，同時間也可以發 PR 跟我講有什麼想聽的 https://github.com/alxtz/Iron-Man
Expo --- 跨平台 App 開發從零到上架 7/30
Expo 是一套基於 React Native 開發的框架，它除了相容大多數的 React Native API 之外，也透過 Expo SDK 提供豐富的額外 API。除此之外，它最大的特點是有自己的整合開發工具『Expo XDE』，以及不需要任何實體連接線，即可部署程式到任何安裝有 Expo App 的手機上的超便利特性；換句話說，甚至可以在沒有 MAC 電腦的情況下，撰寫 iOS App。 本文旨在提供 Expo 一條入門的捷徑，內文除了 Expo 框架的使用教學之外，預計會整合使用 Express.js 撰寫後端 API + Appium 實現 Android/iOS 自動測試。
Nest.js framework 30天初探 7/30
Nest.js 還算是很新的Node.js 後端框架，初次看到這框架時，已經深深被吸引住。雖然我寫Node.js也只近一年，coding經歷也還很淺薄，但想藉由這機會跟大家一起學習這框架。 Nest.js 是base on Express和Socket.IO，語法架構類似Java Spring和Angular，實現語言官方推薦使用TypeScript，是一套適合拿來寫大型網站的後端框架。 想用Node.js寫高品質後端程式的工程師，不要錯過這美物了~~
Confluence 線上協同作業之平台 6/30
本主題主要是分享在學習Confluence之學習過程中，曾經遇過的實際問題及其處理方式，當然有些問題目前可能不是最適宜的方法，而也因為我對程式領域及邏輯不是擅長，主要描述如何透過替代方式來達到同樣的效果，文中將分享從server的建置、軟體版本的升級、與國外原廠之協同合作經驗與搭配少量的程式開發來分享所學
這些文章應該是我比較喜歡的幾篇
看起來比例上還是前端居多，後端比較少
不過還是鼓勵可以更多人出來分享自己的學習或是經驗分享
畢竟自己寫文，成長最多的還是自己呢",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191049,SoftwareDevelopment,1,保持前進、持續優化程式碼內涵系列,5,05.隱藏在原始碼的小幫手~註解,依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1512860911000000000,627,"如果有幸接手他人的程式碼，有可能會發生以下幾種情況，
假若該程式碼，具有高閱讀性，沒有註解，其實沒有那麼重要。但是，如果程式內容本身不易閱讀，為了未來的自己，或是接收程式的後人，請養成註解的習慣。
開發的過程中，有時候，為了 DEBUG，可能會在程式碼中，插入除入用的程式碼。像上面範例中出現的 Console.WriteLine(...)，基本上，在完成除錯後，應該要刪除這些有特定用途的程式碼。
這種情況可能發生在接收過來的程式碼，或是為了效能改寫原本正常運行的的程式寫法。改寫完成後，想保留本來的寫法，以便以後可以回來查詢的機會。
事實上，如果修改後的程式沒有發生任何問題，回來查看被註解掉的程式碼機會，基本上無限趨近於 0。
實務上，在修改前，應該就要將原本的程式碼上傳至版控軟體中，進行任何的功能變動時，應養成上版控的習慣。
保留註解程式碼的原因，是為了回朔當初的寫法或功能，請愛用版控軟體，保持程式碼的清潔，以提升閱讀性。
若是一定要保留在程式碼中，應該針對註解的部份，額外增加註解，說明保該程式碼保留下來的原因。
看到這句註解，應該是滿頭霧水，註解的用意是？
單純表示 2017/5/12 修改的?
如果只是單純註明這段程式碼修改的日期，那這個註解本身是沒有任何意義的，應該盡可能避免。小弟看到這種註解，通常都是刪除。
告知協同開發的伙伴說明程式碼己經修改？
一般而言，如果需要協同開發程式，表示軟體有一定的規模。請愛用版本控制軟體，版控軟體可以更有效的比對出異動的程式碼。
如果工作環境還沒有版控軟體，麻煩試著自行架設，會發現新的世界。
修改程式碼是因為需求變動？
如果是因為臨時性的需求變動，特別標註修改日期，那麼應該連帶說明修改的原因。以確保其他人看到這段程式碼時，第一時間可以明白修改的原因。
有些時候，可能某個功能的實作是因為特定因素，所以採用特定的做法，這時，就可以特別註明，讓後面的人知道，避免在維護程式時，將功能改壞。
軟體開發過程中，為了修改程式邏輯，經常會出現將原本的程式碼區段註解，避免之後還有派上用場旳時間。但是在完成開發後，整理程式碼時，應該清除將這些暫時註解掉的程式碼。
若程式碼己經具有高閱讀性，某方面而言，是可以替代一定程度的註解。但是註解可沒有那麼單純。註解中，有時候，會特別記錄重要的資訊，而這些資訊，正好是程式碼本身無法表示出來的。
在 Clean Code 一書中，關於註解的章節中，提到好的程式碼，應該程式碼本身就是最好的註解，雖然無法避免使用註解進行說明，但應該該竭盡所能，讓註解減少到最低。對於這個說法，很多人抱持的不同看法，算是滿有爭議的說法。但也很值得我們去思考的這個問題。",,"['回顧', '推薦']","['沒有註解的程式碼', '無用的註解', '食之無味、棄之可惜的註解', '無法解讀的註解', '有益的註解', '書藉', '相關文章推薦']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191183,SoftwareDevelopment,0,30天iOSAPP開發系列,4,[Day04]將APP實際灌入device,d3764291,https://ithelp.ithome.com.tw/users/20107588/ironman,1512860552000000000,586,"
按下run的按鈕即可執行在模擬器上或者iPhone上面。

",,['無線連接iPhone'],"['選擇模擬器或者實際將iPhone接上電腦', '開啟Devices and Simulators', '選到想無線連接的裝置，變且將Connect via network選起即可', '按下run鈕即可運行程式在該裝置中']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191181,ModernWeb,1,ZerotoherowithReact.js系列,3,【Day3React】認識JSX,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1512859141000000000,609,"在撰寫 React Component 的時候，使用 JSX 可以提高程式撰寫的效率。JSX（JavaScript Extention）並不是一種全新的語言，他是一種語法糖（syntax sugar），看起來和 XML 非常相似。JSX 是一種 inline markup 可以將類似 HTML 的語法結構轉換成 JavaScript。
簡單來說，JSX 提供了比 JavaScript 還更直觀的 HTML like syntax。
JSX 是更快速、安全性更高、更簡易的 JavaScript
HTML 標籤 vs. JSX 組件
JSX 提供了語法糖給
React.createElement(component, props, ...children) 方法
在 HTML 中，我們可以透過 class 來給予自定義的外觀屬性；在 JSX 中也可以，但 class 和 for 是 JavaScript 保留關鍵字用法，因此在 JSX 中使用 className 和 htmlFor 替代。
compile 後的結果為：",,,['理解 JSX'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191180,ModernWeb,2,重新認識JavaScript系列,6,重新認識JavaScript:Day06運算式與運算子[1]:算術運算子,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1512858699000000000,705,"前面花了好幾天的時間介紹變數與型別，接著我們繼續來要介紹的重點：運算式 (Expression) 與 運算子(Operator)。
JavaScript 的語法基本上可以分為兩大類，「敘述句 (Statement)」 與 「運算式 (Expression)」。
上例 = 右側的 10 * 10 就是運算式。
在運算式中，會透過提供一些數值給「運算子」(Operator) 進行運算，進而得到一個運算的結果。
例如我們從小就學過的四則運算「加、減、乘、除」都是屬於運算子的一種。
運算子的類型很多，依照性質來分類，大致上可以分成下面幾種：
由於篇幅的關係，系列文只會針對常見以及容易搞混的部分來做解說。
更詳細的內容各位可以參閱 MDN: 運算式與運算子 。
JavaScript 各種運算子當中，最常見的就屬「算術運算子」了。
簡單來說，算術運算子包括了大家所熟知的數學四則運算「加、減、乘、除」等。
一般來說，四則運算的算術運算子在多數的程式語言中，應該可以算是最單純的算術運算子，但是在 JavaScript (更準確的說法應該是 ECMAScript) 當中，運算後的結果可能會跟你所想的不太ㄧ樣。
加號 + 的使用非常簡單，如果你想要表示 1 + 2 這個算式的話，可以這樣寫：
如果加號 + 前後雙方都是「數字」的話，確實是最單純的情況。
但我們前面在介紹變數的時候，有提到「特殊的數字」這種東西 (忘記的朋友請回頭參閱：Day 03 變數與資料型別)。
什麼是「特殊的數字」？
Infinity 、 -Infinity，以及 NaN 都屬於「特殊的數字」。
先看 Infinity 系列：
NaN 的話，則是只要有其中一個是 NaN，那麼結果就必定是 NaN：
到目前為止還只是單純數字的狀況。 那麼，假設加號 + 兩側的其中一方，不是數字而是「字串」呢？
在上面的範例當中可以看到，當加號 + 兩側的其中一方是字串的情況下，加號 + 會將兩者都視為「字串」連接在一起。
也就是說，其中一方是字串，另一端會被「自動轉型」為字串後，連接在一起。
以 number 、boolean 、 object 的情況來說，轉型時會去呼叫它們的 .toString() 的 「原型方法」[註1] 去取得對應的字串。
而 null 與 undefined 則是透過 JavaScript 的 String() 函數來將它們分別轉為 ""null"" 與 ""undefined""。
另外，在一個很長的運算式中，可能會有「數字」與「字串」的混搭算式，如：
猜猜看，此時 str 的結果會是什麼？
答案是 「 ""10 加 100 的數字會是10100"" 」。
會有這樣的結果是由於運算式的計算是「由左而右」且「先乘除後加減」的模式來運算。 也就是說，前面的字串會先與 num1 相加，再把結果與 num2 做相加。
若要避免這樣的問題時，可以在 num1 + num2 的算式中，用小括號 ( ) 包覆起來：
str 的結果就會是預期中的「""10 加 100 的數字會是110""」了。
再來是減號 -。 如同前面的加法一樣，如果只是單純的數字算式：
那麼結果就會是單純的數值運算。
如果是「特殊的數字」之 Infinity 系列：
如果其中一方是 NaN 的話，那麼結果必定是 NaN。
另外，與加號 + 不同的是，當其中一方不是「數字」的情況下：
關於物件的 prototype 與 valueOf() 的部分，我們在往後文章會有詳細篇幅介紹，這裡只需要知道自動轉型的規則即可。
相較前面的加法、減法的規則，乘法運算子就單純許多。
乘法運算子由一個「星號」 * 來代表，用來計算前後兩個數值的乘積。
在前後兩者都是數字的情況下，計算結果就是兩個數值的乘積。
如果計算結果超出 JavaSCript 的數字範圍，那麼就會看結果是正數或負數來決定是 Infinity 或是 -Infinity。
當然如果其中一個是 NaN的話，那麼結果必定也是 NaN。
而依照 IEEE754 標準的規定， Infinity * 0 的結果也是 `NaN。
如果有其中一個不是數字的話，那麼 JavaScript 就會先在背後以 Nubmer() 作轉換後再進行計算，如：
除法與乘法的規則類似。
除號在 JavaScript 用一個「斜線」/ 來表示。
在前後兩者都是數字的情況下，計算結果就是兩個數值的商。
但是，在被除數為 0 的情況下：
當然，如果有其中一個是 NaN，則結果也會是 NaN 。
如果有其中一個不是數字的話，那麼 JavaScript 就會先在背後以 Nubmer() 作轉換後再進行計算。
除了基本的四則運算之外，JavaScript 也有取餘數的運算子，以「百分比符號」 % 來表示。
使用方式與除號類似，但得到的值是除法運算後的「餘數」：
在前後兩者都是數字的情況下，計算結果就是除法運算後的「餘數」。
而被除數是 Infinity 或 -Infinity 的情況下，則取餘數後結果都會是 NaN。
被除數是一般數值，而除數為 Infinity 的情況下，則結果為被除數：
被除數是一般數值，而除數為 0 的情況下，則結果也是 NaN。
當然，如果有其中一個是 NaN，則結果也會是 NaN 。
與除法一樣的是，如果有其中一個不是數字的話，那麼 JavaScript 就會先在背後以 Nubmer() 作轉換後再進行計算。
[註1] 原型方法: JavaScript 與其他物件導向語言不一樣的地方是，它的繼承是 ""prototype-base"" 的。 也就是說，即便是基本型別的數值，除了 null 與 undefined 屬於特殊用途，並沒有相對應的原始型別包裹物件之外，都有它們對應的構造函數，或稱包裝器 (wrapper) 。 而這些「基本型別」的數值理論上是不會有對應的方法 (method)，但可以由原始物件繼承而來。這部分在後續講到原型鍊時會有詳細說明。
[註2] valueOf() 是用來回傳特定物件相對應原始型別的值，當 JavaScript 的物件在進行運算時，都會透過 valueOf() 或 toString() 方法，取回該物件對應的原始型別的值再進行運算。
沒想到四則運算也可以寫這麼長一篇，在後續的文章當中，我們會繼續來介紹 JavaScript 的其他運算子，以上就是今天分享的內容。",,"['運算式 (Expression) 與 運算子(Operator)', '算術運算子']","['加號 (+)', '減號 (-)', '乘號 (*)', '除號 (/)', '取餘數 (%)']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191173,自我挑戰組,1,服務桌從開始到進入資安領域系列,5,[Day5]服務桌的修業:用工具幫忙比對2個純文字檔案的差異之處,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512858560000000000,610,"比對純文字檔案，幾行之內可以用工人智慧自已用肉眼對完;數量多的時侯，看的眼花花還不一定可以在短時間內對好對完‧‧‧
用工具來幫忙進行比對的工作吧~
Notepad++平時都被拿來當作進階版的notepad.exe使用，其實它也有提供外掛模組可以幫忙做比對喔~
首先開啟已安裝的Notepad++
選擇:外掛模組 → Plugin Manager → Show Plugin Manager

選擇:Compare → 再點選Install安裝

選擇:是確認更新該模組

(跑跑跑‧‧‧)

選擇:是，重新啟動。

開啟需要比對的2個純文字檔案~
選擇:外掛模組 → Compare → Compare

比對結果(圈起來的地方↓)，差異之處明顯標記，看東西方便多了Www
(發自內心的感謝作者，好人一生平安~~~)

ps:人家是新手不能回文...還請留言的大大見諒唷~
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191178,自我挑戰組,0,迷路還是繼續往前走的菜鳥工程師日常系列,5,[Day05]新鮮人第一天上班,overflow,https://ithelp.ithome.com.tw/users/20107577/ironman,1512858460000000000,651,"相信有看我上一篇的大概可以知道我也只有一間公司可以選擇XD
這家公司是自有產品的網頁工程師，不是接案公司，我也很感謝這家公司的主管敢錄取什麼都不會的我，也算帶領我在網頁領域的起頭，我真的蠻感謝他的
第一天上班主管就帶我和大家認識「這是我們部門新來的網頁工程師」，我一臉震驚，嚇到吃手手（什麼？我是工程師@@，然後頓時感受頭有點暈，這頭銜我承擔的起嗎？所以我都只敢說我是助理工程師......，因為大家一聽到工程師就開始自我腦補他們印象中的「工程師」
公司主要是用到的技術有SQL、.NET、PHP、GIT，所以第一個月上班當然就是去熟識這幾樣東西囉。
以上程式語言的部分，我也都是進公司才開始重新學起的，但在學校也學了許多程式相關課程，所以至少還是會很基本的if/else、for、switch，就可以騙吃騙喝了，SQL的部分雖然有教過，但我早就忘光了，當時也沒認真學，不過如果比起完全沒接觸過程式的人，可能真的入門門檻高一些，主要還是要用心跟不排斥最重要啦@@
所以接下來我真的要寫一點關於技術的文章了XD，但我會很不負責任的亂講一通，就寫一些我會的部分跟我如何學習這個東西。當然我不會很深入講一些進階的東西因為我也沒辦法，畢竟那些都有更棒的前輩跟神人寫過了，所以講的部分就是有這樣子的程度就可以存活了XD，當然每家公司所必備條件都不太一樣拉
糟糕阿～第五天我已經快沒梗了，感覺差不多要斷掉了，後面想介紹一些我學過的東西，但我怕我寫不出來
那明天開始就是先不負責任的GIT超簡易教學？還是就消失在鐵人競賽了讓我們繼續看下去",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191179,ModernWeb,0,PHPlaravel的邂逅系列,6,DAY06-Route基本介紹,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1512858164000000000,606,"延續DAY05，我們已經開好一個專案了，對於目錄也有一些認識了，今天就可以來寫點程式了
DAY04已經開了一個專案(firstproject)，檔案還在的就直接使用。
如果你是新來的、或是把檔案玩壞了ＸＤＤ，我們再來開一個新的專案。
新增專案指令
先進到專案底下，輸入以下指令按enter開啟serve，再去瀏覽器網址列輸入 http://127.0.0.1:8000 ，確認專案可以正常執行。

今天先來介紹Route，一般接收到的請求都會先進到Route去，根據接收到的url，給予對應的route回應。
先把專案的code開起來，選到routes的資料夾，裡面會看到四個檔案，簡單介紹一下這幾個檔案。
get是什麼呢？他是http method一般定義了八種方法，一般常用的有GET、POST、PUT、DELETE這四種方法。
一個基本的路由只需要兩個參數，第一個是url、第二個是閉包，下面的第一個參數是一個/，我們稱為根目錄。
第二個是閉包，裡面看到了一行程式碼又是什麼意思呢？
這邊會回傳一個view的檔案，檔案名稱叫做welcome，接著可以到專案目錄找到resources資料夾底下的view的資料夾，看看是不是有個叫做welcome的檔案。
現在可以把裡面那一行程式碼改掉，改成下面程式碼，看看網頁會跑出什麼來，結果網頁上面跑出hello wolrd的字樣，代表請求會進到這裡來。
那如果我們想抓到網址上面的路由參數，又該怎麼寫呢？
在laravel中會把參數包在{}大括號中，我們把參數命名為id，接著在第二個參數傳入$id這個變數，這邊會回傳網址列上輸入的id
。
網址我們打上http://127.0.0.1:8000/user/1 看看回傳是不是user_id:1，如果是就代表可以抓到1這個參數囉
這邊僅介紹後續專案裡面會用到的方法，詳細的用法可以參考官網",['DAY06-Route基本介紹'],,,['基本路由'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191166,自我挑戰組,0,花式PHP系列,1,Prologue,牙膏大師,https://ithelp.ithome.com.tw/users/20106636/ironman,1512857567000000000,615,"大家好，我是牙膏大師！
我想透過這個系列文分享一些我自己也覺得很酷的PHP、Laravel的語法、還有雷～
雖然說寫滿三十天對我來說是很困難的事情，我也只規劃了二十二天的內容，
但只要有人因為這個系列文學到東西就是賺～
Online PHP Functions可以讓你在線上測試PHP程式碼，
最強大的地方在你可以隨意調整執行程式碼用的PHP版本！
還有，如果你還沒研究過PSR -2的話，現在讓你研究研究。
雖然這僅僅是Coding Style的建議，
但你遲早要把寫過的程式碼交給其他人維護的，所以用統一的習慣寫PHP語法對維護也是有幫助的。
如果你是無暇顧及Coding Style的新手，我也建議你把這個連結加進我的最愛～
如果你有在使用PHPStorm，卻不知道有「Ctrl+B」這個追蹤function的利器，現在就去試試吧！
不過一些透過魔術方法(如__call())執行的function，
是沒辦法透過這個快捷鍵追蹤的！請特別注意這一點。",,"['首先', 'PHPStorm', '系列文規劃']","['線上測試工具', 'Coding Style']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191167,自我挑戰組,2,用laravel尻出自己形狀的linebot，還要撐三十天！系列,4,【第四天】推送通知PUSH!　Part1（1/2）,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1512857439000000000,650,"還記得前天我們已經把LINEBot的provider寫完了嗎？
今天就來實作推送通知看看吧！
首先，在你的專案底下新增LineBotService.php，裡面先長這樣

這時候會發現我一開始就要拿這物件時，就要先給他$lineUserId。
這樣有熟悉的感覺嗎？
沒錯，你的AppServiceProvider.php要再多加入這個！ 參考
現在，你最基本的推送訊息已經做好了！試著寫些測試看看吧！ 參考

接著執行下面這串指令，你的手機應該就會收到Line的訊息了！記得要先把你的機器人加入自己賴的連絡人清單嘿！
如果確定沒問題可以收到，可以加入以下這行！
先把他Skip起來，我們只要知道這功能可以實作就好～ 參考

接下來你一定會想推送比較酷炫的樣板格式，最好是還能夾帶圖片的，這樣比較潮！
明天我們就來談談傳送樣板上遇到的雷吧！",['【第四天】推送通知PUSH!\u3000Part1（1/2）'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191163,自我挑戰組,0,打雜人生-腦容量不夠用就筆記筆記唄系列,3,[Day3]Python自習手札:寫註解提示自已曾經寫過什麼東東‧‧‧,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512856241000000000,605,"自已碼的東西一段時間沒看，港覺不像自已寫的一樣…(冏
著個時侯就需要註解提示提示啦^^
註解的方法有: 單行註解、多行註解
單行註解
多行註解


vim編輯模式:
/    搜尋字串
i    編輯
Esc    跳出
!    強制
:w    存檔
:q    退出vi
:wq    存檔並退出vi
:x    存檔並退出vi",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191168,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,6,你所不知道的JavaScript模組化歷史，NPM&Module,"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1512855719000000000,592,"這篇算是我一直很想深入研究的主題
因為之所以要有 boilerplate，不但是因為寫重複的檔案很費時
還有因為 JavaScript 的生態系實在太廣大
有許多協助開發的插件要學，對想趕快解決問題，「Get Sh*t Done」的人會很花時間
但是仔細探究這些插件(plugin)的功能，以及背後開源專案的架構
不但是一種深入理解 JavaScript 語言特性的機會
也可以有機會一瞥往後的新技術是想解決哪些現有的不方便
在一一介紹有哪些套件時，這邊會先介紹幾個基本概念
以往我們開發一個專案時，總會引入一些第三套套件像是 jQuery、Bootstrap、lodash
但是隨著專案的規模長大，我們以往只是使用 <script src=""jquery.js></script>
來引入各種函式庫的方式，不但繁瑣(你要複製貼上很多次)，還會有以下幾種問題
JavaScript 本身的變數 scope 很危險，加進來的函式庫都會變成全域變數
如果你把這兩個函式庫都使用傳統的 <script> 來嵌入 HTML 裡面
他們的變數 _ 是會互相衝突的
第三方套件的開發者，基本上一定會注意不跟其他套件衝突的命名
但如果是團隊成員自己寫的 code，也會碰到同樣的問題
最簡單的管理方式，可以使用熟悉的 namespace
基本上就是寫一個自己的物件來包裝，減少全域變數的數量
範例: 我叫做 Alex, 我可能在跟 Don 合作一個專案
來達成基本的 namespace 管理
但是這樣的方式，本身還是會增加全域變數的數量
如果今天來了第二個 Alex、
或是 Alex 這個物件需要引入 Don 的某個 Dependency(依賴)
(像是 Bootstrap 會用到 jQuery 的功能一樣)
就會產生許多麻煩的問題
所以在早期前端發展，開始出現一些各種的 script loader

基本上，所謂的 script loader
就是一些幫助管理各種 JavaScript 函式庫載入的工具
基本上 <script></script> 是使用非同步的方式來載入函式庫的
造成了我們為了使某段 code 一定可以使用到 jQuery
我們得要在開頭都寫 $( document ).ready
最早的 script loader，就是讓基本函式庫互相依賴的情況不會太糟糕
今天基本上講解了 JavaScript 開發上會碰到的問題
許多人剛開始寫 JavaScript 的時候也會有這些疑問
但是開始導入 Webpack 後，似乎就從來沒遇到問題了
這些像是全域變數、Dependency 的問題，不同的程式語言、開發環境
都非常的常見
這也就是為什麼會有「Modern JavaScript」這個名詞的出現
JavaScript 並不是自己進步了
而是開發者們提出了各種解決方案、加上自幹和熬夜的心血
來推動 JavaScript 變得 「Modern」
明天的主題我將會繼續介紹 JavaScript 模組化演進的歷史
對於最早的 「Script Loader」，如何管理雜亂的 <script>
可以上網搜尋各種內容
https://cnodejs.org/topic/5090f63b65e98a9809159ecb
https://github.com/creeperyang/blog/issues/17
https://medium.com/sungthecoder/javascript-module-module-loader-module-bundler-es6-module-confused-yet-6343510e7bde
https://medium.com/@gimenete/how-javascript-bundlers-work-1fc0d0caf2da
https://medium.freecodecamp.org/javascript-modules-part-2-module-bundling-5020383cf306
https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8
https://addyosmani.com/writing-modular-js/
http://requirejs.org/docs/whyamd.html
https://appendto.com/2016/06/the-short-history-of-javascript-module-loaders/
https://gist.github.com/desandro/4686136","['NPM, node_modules, package.json, lock-file', 'JavaScript 的危險 - 全域變數 & 依賴', '解決依賴(Dependency問題) - Script Loader', '明天']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191068,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,6,[Day6]CSSFlexbox,dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1512855677000000000,586,"CSS排版一直是一件很幹的事. 從最一開始是用table 然後換到float， 這些屬性都不是專門為排版而設計的。現在CSS推出 flexbox(未來還有grid) 來解決我們排版的問題了。 woohoo.



flexbox 主要有兩個元件， 一個爸爸(parent) 一個小孩(child). 爸爸元件可以決定方向，換行/單行， 平行位置， 垂直位置 , 塞滿或空間區隔. 以下是爸爸的屬性。
這是小孩(child) 的屬性。
廢話少說， 我們來做一個響應式的導航欄(responsive navbar). Let's do ittttt!
連結codepen


",,"['教學應用', '參考連結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191171,ModernWeb,0,TypeScript-初學之路系列,3,Day03-Function,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512855279000000000,564,"Function 在 Javascript 中是很基本的型態，可以用在隱藏資訊，或攥寫模組等功用
Javascript 中基本的 Function 有兩種
在 Javascript 中的 Function 可以使用外部的變數，這個行為叫做 capture
使用 TypeScript 寫一個最基本的範例
完整的 Function Type 範例
上述範例中輸入的參數可以定義類別，同時也宣告 Function 回傳的類別，並且有兩個相同的宣告類別，
但是做事在一開始就宣告完整的 Function 類別，那之後就可以省略
範例
在 TypeScript 中指定每個參數不能是 null 或是 undefined
在 Javascript 中每一個 Function 都是非必要的，
當你沒有輸入的時候值都會是 undefined 在 TypeScript 有宣告的都是必要的，
但是也提供一個 ? 來宣告此參數為非必要
TypeScript 非必要參數必須要在 必要參數的後面， TypeScript 也可以提供預設值的設定
範例
上面的範例中可以看到，你可以先預設值給予預設值之後就不是必要參數，因為當你沒有輸入該參數的時候也會有預設輸入不會影響程式執行
在 ES6 也有一種特性 Rest
而這個特性在 TypeScript 也可以應用在 Function 之中，當你不知道之後輸入的參數值總共有幾個，可以利用這個特性將所有後面輸入的參數值組合成一個陣列
上述範例是可以編譯的，但是在執行的時候會有錯誤
因為在執行照 createCadrPicker 的時候會找不到 suits 這個 Function 因為這是 this的作用域的問題
因為對 Javascript 來說 Function 也是物件，所以在上述範例中的 createCadrPicker 中的 this 是指這個 createCadrPicker Function 本身，但是這個 Function 並沒有 suits 這個屬性，所以他會找到 undefeind 在後面 this.suits[pickedSuit] 的時候因為 undefined 在 Javascript 並不是物件，所以就會造成這個錯誤
所以我們可以把這個範例做一些修改
其實我們做的修改只是將 function(){} 修改為 () => {} 但是因為在 Javascript 中的 arrow function的特性 所以他找到的 this 是指 desk 這個物件，就可以指導 suits 這個屬性這個屬性
但是在上面範例中的 this 的型別依舊是 any 如果我們希望在 Function 定義 this 的型態就要將這個宣告放在 Function 的第一個參數
加上兩個 interface， Card 和 Deck
在 interface 中的 createCardPicker 有宣告了 this 的型態
是 Deck 而不是 any 所以 --noImplicitThis 不會有錯誤
你在 callback 中使用 this 的話
依舊會產生一些錯誤，因為 this 會是 undefine 你可以宣告一個 interface 來避免這種錯誤
this: void 代表 addClickListener 預計 onClick 是一個 Fucntion 並沒有 this 的類別
Javascript 是一個動態繼承的程式語言，一個函式藉由輸入值得到不同的回傳值是十分常見的
pickCard 會依據我們傳進去的參數不同，回傳不同的資訊這樣的話我們該如何去定義呢？
為了要讓 TypeScript 編譯的時候能夠選擇正確的型態會宣告兩個不同的 PickCard1
然後分別宣告不同的 parmeter 而產生的不同的 response
然後在最後真正宣告 function pickCard1():any 設定回傳值是 any
之後再真正使用 pickCard1 的時候就會依據不同的 parmeter 檢查不同的形態和 response",['Functions'],,"['Optional and Default Parameters', 'Rest Parameters', 'this', 'this parameters', 'Overloads']",['this parameters in callbacks'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191140,SoftwareDevelopment,0,初探Kotlin系列,4,[Day4]CodingConventions,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1512855272000000000,558,"每種程式語言都有它的開發規範或風格
今天說說Kotlin文件裡的開發規範
大致上跟Java的風格差不多
Lambdas的大括號前後應有空格 參數及箭頭的前後都應保留空格
Class如果只有少數幾個參數則應寫為一行表示即可
若有多個參數則用以下表示
如果function回傳一個Unit 則Unit不用寫出
上述function相當於","['Naming Style', 'Lambdas', 'Class', 'Unit']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191169,ModernWeb,0,TypeScript初學之路系列,6,Day06-Interface,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512855211000000000,568,"TypeScript 有一種類型宣告方式
有時候這個模式叫做 duck typing 或是 structural subtyping，
或統稱為 interface
最簡單的的 interface
呼叫 printLabel 的時候會進行 type-check，而在 printLabel 中就有參數檢查
label 必須是 string
實際上可能有更多的屬性 不只是 label
檢查只會檢查 label 屬性是不是字串
有些狀況 TypeScript 並不寬鬆
依據上面的範例可以使用 interface 指定 label 為必要參數
LabelledValue 是我們可以描述參數必要性的範例
代表輸入值必須要有一個 label 變數型態為字串
我們並不需要非常明確的指定 printLabel 這個 Function 的輸入參數
只要符合這個 interface 就會允許使用
也可以定義不一定會存在的參數
有些 properties 應該只能被修改  無法整個被覆寫
也可以定義一個唯讀的陣列
最後一行中，當你定義為普通 ReadArray 要 assign 給一個 Array 是不允許的
const 只是禁止你的物件被覆寫
而 readonly 則是設定你的物件中的參數被覆寫
在第一個範例中，雖然我們寫了一個 interface 是 {size: number, label: string}
但是我們真正有使用的只有 {label: string}
我們在剛剛也有提到 optional properties 或是稱為 option bags
但是這兩個一起使用的話也有可能產生一些問題
上述範例中 creteSquare 中的 colour 拼錯了
正確應該是 color, 並且 TypeScript 會顯示編譯錯誤
然而你可以辯解說因為 width 是正確的
color 並不存在，但是 colour 名稱的錯誤是微不足道的
這時候正規的實作方式可以是
我們將會討論 index signatures 但是在這裡可以說 SquareConfig 可以有任意數量的 properties
不論是不是 color 或是 width 他們並不在意
另外還有一種方法 你直接宣告一個 SquareOptions 物件來放入 createSquare 中也不會有錯誤出現
請記得上述的範例  不應該讓這些檢查類別變得更加的複雜
你應該要持續檢查這些類型，因為大多數的錯誤都會造成 bugs。如果你允許 在 createSquare 中使用 color 或是 colour 這兩個參數
你應該修改 squareConfig 來顯示這兩種使用情境
interfaces 可以用來描述物件的輪廓
然而為了要可以描述物件的 properties 所以 interfaces 應該也是可以描述 Function types
interfaces 描述一個 function type 的時候只需要定義 parameter 列表和回傳值
每一個 parameter 都需要明確的定義名稱和類別
只需要定義一次之後就可以拿這個 interface 來建立變數
在宣告 Function 的時候 parameter 的名字不一定要一樣
宣告也可以只宣告一次
之後依據同類型宣告的 Function 也會依照之前宣告的 interface 做檢查，不避在重複定義。
基本上我們可以用 interface 來定義 Function 也可以來定義 index
在上方的範例中 StringArray 中有宣告一個 index type 為 number。
基本上只有 兩種類型的 index， 就是 number 和 string
也可以同時支援兩種類別，但是在支援兩種類別的時候若是為 100 則必須是回傳 '100'
也就是兩種類別必須要統一
string 是非常實用的宣告 index 方式
因為 obj.property 也可以視為 obj['property']
這一個範例因為 name 的類別並不匹配，所以在檢查類別的時候會有錯誤
最後我們試著宣告一個唯讀的 interface
也可以描述在 class 中的 method
例如在 Clock 中描述一個 setTime 的 method
當我們要使用 interface 來宣告 class 的時候
要記得 class 有兩種類型，一種是 public 一種是 static 當你要宣告一個 class 的 constructor 的時候會有錯誤
這是因為當一個 class 轉為 instance 的時候
只有 instance 這邊有做 typing-check 而再 static-side 並沒有包含這個檢查
所以在下面的這個範例，需要定義兩個 interface
ClockContructor 是為了 constructor 而 ClockInterface 是為了實體化後的物件定義
而會了方便我們定義 constructor 所以又建立一個 createClock 來做這件事情
因為 createClock 的第一個參數是 ClockConstructor 在 createClock(AnalogClock, 7, 21) 中檢查 Analogclock 的 constructor 是否有正確的參數類型
就像 classes 一樣 interface 可以利用繼承將他們的屬性傳給自己的 Children
也允許多重繼承，建立一個集合體
Javascript 常常會有很豐富的一個 多次繼承，也可以使用 Hybird Type 來做多個繼承
當一個 interface 繼承了一個 class 只是繼承了他的屬性而不是他的實體只是繼承了他的屬性而不是他的實體
這就是說當你要實踐這個 interface 的同時也必需繼承同一個 class 來實現他的所有屬性
當你有一個很大的繼承架構
但是又想要自訂一個程式碼專為某一個 subclass 中的某些屬性 又不希望她繼承所有的父輩繼承
上述範例中 SelectableControl 包含了所有的 Control 的屬性
包含 private 的 state，這意味著之後要實現 SelectableControl 的同時只能 extends Control 一個類別去承接他的 private 的 state
在 Control 之中允許透過 SelectableControl 來取得 private state
而 SelectableControl 就像是 Control 知道他還會有一個 function select
Button 和 TextBox 是 SelectableContorl 的子類
因為他們都是繼承 Control 但是 Image 和 Location 則不是",['Interfaces'],"['簡介', 'Function Types', 'Class Type']","['第一個 interface', 'Optional Properties', '唯讀', 'Excess Property Checks', 'Indexable Types', '實現一個 class 的 type', 'Difference between the static and instance sides of classes', 'Hybird Type', 'Interfaces Extending Classes']",['readonly vs const'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191161,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,4,網路爬蟲Day2-html檔的取得及常見問題,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1512852840000000000,690,"要取得html檔，我們首先就必須了解，前端(瀏覽器)是如何跟每個網站的伺服器要資料，以下詳細說明。
從RestfulApi的理論來說，目前一般網頁除了透過URL(網址)去取得網頁之外，都還會配上一個HTTP動詞，增加前端介面跟資料庫互動的彈性，大家有興趣可以看一下WIKI。
一般在瀏覽器上輸入URL進入網頁都是預設為GET動詞，就是純粹從資料庫中取出資料。
POST動詞則是送出一筆表單資料，比較常見的出現地點是各位在申請帳號，輸入完資料之後按下提交那一刻，瀏覽器除了會自動重新轉向新的URL外，還會配上POST的動詞，如此則會回傳一筆表單資料伺服器，然後再進一步導向「申請成功」的介面。而這兩個動詞也是爬蟲領域當中比較常用到的，其他動詞若各位對架設API有興趣，可以自己再去學習。
需要特別提醒的是，因為POST是送出一筆表單資料，所以下面「用法」環節，也要傳送一筆python中dict型別的資料給伺服器，才能得到POST方法配上URL回傳回來的資料。
至於如何進一步去查看，目前的網頁是透過GET或是POST而回傳的結果，則可以按下F12，點到Application(如果是空的，可以按一下F5重新整理)，並透過每一份文件中的Preview進一步確定回傳的文件中哪一份是你要的，然後再點回Header去看，Request Method後面是GET或是POST。



如果發現爬下來的的頁面無法解析的話，大部分時候是編碼的問題，編碼一般都是用utf8，這個包含的字量比較多，例如「喆」在其他編碼中一班會用「吉吉」儲存，不過比較老舊的非英文網站，或是政府官方網站，如果是中文的話很可能會使用cp950或是big5，這個編碼一般都是從html文件中(所有的html文件都有head跟body兩個部分)的head部分找得到，按下F12找到Elements。

狀況一-爬下來的html檔是亂碼: 這種狀況可直接設定requests類別實體下的encoding屬性為相對應的編碼，上面「使用方法」中已經有使用過，就不再贅述。

狀況二-POST Data是亂碼: 如上圖(Post Data)中的qCollege欄位的值即是亂碼，此時點擊此途中右上角的view URL encoded，並複製編碼下的字串到webatic去解碼，了解這個編碼背後的意思。

若不先將html存成純文字檔案，有可能會產生兩個大問題。第一、電腦的記憶體有限且相對不穩定，所以如果把每個頁面都用暫存存起來，可能會產生記憶體不足，或是程式執行出錯時暫存全部被洗掉的問題。第二、如果每次測試解析html之前都要上網站去get一次，量大的話很有可能會被鎖定IP。因此，檔案讀寫是爬蟲過程中不可或缺的一項技能。使用的套件是python內建的套件open，我們直接承接上面的re.text字串，進行以下示範。
明天將說明如何應付一般網站的防爬蟲機制以及萬惡的javascript，下級待續:))","['一、概述', '二、Http動詞', '三、套件與使用方法']","['(一)、GET', '(二)、POST', '(三)、查看GET或是POST', '(一)、概覽', '(二)、requests']","['1. code', '2. 實務問題一: encoding問題', '3. 實務問題二: 檔案讀寫問題']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190946,Security,0,CEH之越挫越勇系列,4,[Day04]滲透流程,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1512852709000000000,996,"其實，很多朋友私下都有來問過我滲透流程…
然後，我給的答案都是很官方的看客戶需求…
因為，不同產業跟不同客戶都會有不同服務…
如果，你也有這樣的問題，那可以參考 CEH 認證的標準滲透流程。
不過，CEH 因為滲透測試的環境不同，所以章節分為內部及外部網路兩個循環。
規劃準備(Planning and preparation)
方法設計(Methodology designing)
資訊收集(Network information gathering)
滲測週期(Penetrating perimeter)
取得目標(Acquiring target)
獲取權限(Escalating privileges)
執行滲透(Execution,implantation,retracting)
報告結果(Reporting)
清理(Clean-up) & 毀滅蹤跡(Artifact destruction)
　
　
//其實我覺得比較像是初階跟進階的版本…
//CEH 定義的流程絕對跟業界不一樣…","['滲透階段', '滲透階段']",,"['準備階段(Pre-Attack Phase)', '攻擊階段(Attack Phase)', '後續階段(Post-Attack Phase)']","['（1）Reconnaissance：被動資料收集', '（2）Scanning：掃描目標，了解目標主機配置狀態與弱點對應', '（3）Gaining Access：獲得權限', '（4）Maintaining Access：維持存取權限(如後門或木馬)', '（5）Clearing Tracks：破壞足跡的完整性，並把自己藏在正常行為中', '原廠章節：第一階段-內部', '原廠章節：第二階段-外部']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191160,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,5,(Day5)爬蟲的第一課爬蟲規劃網站觀察確認規則,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1512850766000000000,634,"在大數據的環境下，數據當然是重要的；為了拿到數據，常得使用爬蟲技術來取得一些具規則性的數據，也才有後續的演算與延伸分析的可能性。
根據網路爬蟲-MBA智庫百科　網路爬蟲又名“網路蜘蛛”，是通過網頁的鏈接地址來尋找網頁，從網站某一個頁面開始，讀取網頁的內容，找到在網頁中的其它鏈接地址，然後通過這些鏈接地址尋找下一個網頁，這樣一直迴圈下去，直到按照某種策略把互聯網上所有的網頁都抓取完為止的技術。
對於我們撈取既定資料來說，範圍可能就在定義得更窄一點，僅取專案所需的人事時地物的資料。
舉本專案為例，公共政策網路參與平台，得先確定所需分析的資料，分別有:
所謂爬蟲的技巧，主要重點就是放在觀察，與確認尋找所需的資料有無所謂的規則。
常有站台.節點.分頁等資料各自呈現，需進行加工才能對應出正確的網址
Step1. 將游標停在所需的資料上，滑鼠右鍵按下檢查或是F12，進入開發人員工具模式。

Step2.根據觀察，得出下列結果:
Step3.在該需要的欄位，滑鼠右鍵按出Copy的第三個Copy XPath選項，複製該筆XPath。

利用[Xpath Helper]工具，反覆驗證規則，再觀察。

這部分作業，就是反覆的點選網頁與網址，並確認比較與先前得出的規則，有無差異，藉此確保規則的正確。
正所謂""砍樹前，得先把斧頭磨利""，爬蟲作業開工之前的規劃與準備的工作，甚至還比開發爬蟲本身還要來的重要。
最終，紀錄下所需欄位的各項資料，就可著手開發程式了!

*這部分，真心覺得是整個爬蟲作業的主軸啊!!
想起了句名言 : ""Do No Harm!""
寫個爬蟲容易，但不代表可以不顧及對方伺服器的負擔狀況，大肆高頻的撈取資料。如果不按規矩來，也許下一步就是被列入黑名單，成為拒絕往來戶。
觀察該網站根目錄下的robot.txt資料，確保不要有違對方管理的規則。
這部分，也是在實作過程，務必要注意的重要事項。
網頁觀察: pala.tw","['爬蟲的規劃', '爬蟲重點技巧: 觀察 v.s. 規則', '好用順手的工具', '做個自我克制的爬蟲']","['1. 觀察目的(關鍵字)網頁的正確網址規格', '2. 觀察所需資料的元素，位在那個node或是tag分隔。', '3. 反覆觀察/驗證/再觀察/再驗證', '網頁解析工具', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191095,ModernWeb,0,30天串接30個GoogleAPIs的服務應用系列,6,[day6]-(預留)(待補)網友點播GoogleCalendarAPI的Sample練習,KingTzeng,https://ithelp.ithome.com.tw/users/20103130/ironman,1512849450000000000,616,未來補上....(跪,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191126,ModernWeb,0,Confluence線上協同作業之平台系列,5,練習安裝Confluence,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1512847065000000000,563,"就如同您要在windows下安裝軟體依樣，我們需要先把windows安裝起來，而安裝的方式可以使用光碟機透過導引的方式，逐一點選下一步來完成安裝作業系統所需要的步驟，也可以透過隨身碟來讀取作業系統所需要的安裝檔案來完成；而confluence基本上也是類似的方式，但是我們需要先把他的作業系統端先準備好，例如ubuntu、windows或者centos都可以支援，而接著依照作業系統的版本在https://www.atlassian.com//software/confluence/download-archives 來下載所需要的版本，來進行安裝程序。而如果您跟我一樣是想透過安裝過程來了解confluence的話，可以先試著使用windows的版本來練習。(windows版本的confluence與virtualbox軟體來搭配，可以當成練習安裝plugin或者功能性測試的環境)

目前的我總共練習安裝一百多次(在https://my.atlassian.com/product 下可以看出目前總共有哪些atlassian的軟體license)，而可能是為了測試在不同作業系統下安裝的效能、多個作業系統的環境整合、版本之間的升級測試比較，才進行了那麼多次的練習，同時也是幫助自己更了解confluence的必經過程。例如在前年的4月多，因為要進行confluence版本的升級測試，在此部分在正式升級作業進行前，我就練習測試了好多次，而也在confluence support開了幾次的升級過程中所遇到的問題ticket與原廠確認，結果在正式升級作業進行的過程中，我還是失敗了3-4次後才升級成功，也因此就算我已經練習個多次，但在正式Production的環境中，仍然會有些不可預測的問題可能會出現。

下列的步驟為windows版的confluence安裝步驟整理，當點選下載後的confluence安裝執行檔，執行後出現如下畫面

勾選您要的安裝方式，通常會選擇第2種方式

確認安裝的路徑

建立confluence home的路徑

建立桌面捷徑及程式名稱

設定要執行confluence所使用的port位

勾選將confluence當作預設啟用的服務

完成及進行confluence的啟用設定

勾選confluence為production的環境

不要勾選plugin (這些plugin也是要付費的)

貼上啟用序號 (點選get an evaluation license連結會傳回所要使用的序號)

如果有自己建立資料庫的話，則選擇external database,如果沒有的話，則可以選擇embedded database

點選empty site空資料的選項

點選建立使用者的選項

建立管理者的帳號與密碼

完成設定步驟

接著透過wizard的導引步驟來設定space及了解PAGE建立的流程 (其中有包含一部影片，有介紹到confluence)

設定帳號的小icon

設定space的名稱

透過導引步驟了解如何建立page頁面

由內建的template來選擇所要建立的page頁面

輸入page title

拖曳照片到page頁面

完成後儲存頁面

pagetree顯示所建立的page

點選Create建立page 頁面

在page下可給予comment或like

可輸入@來指定給特定的帳號提醒顯示

最後會收到Atlassian Welcome Kit的歡迎信件
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191154,自我挑戰組,1,軟體工程漫談系列,5,『這位工程師，你在公三小』--論命名的重要性,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1512845154000000000,771,"大學時期，我們花了很多時間學習資料結構，讓資料有適當的儲存方式；我們也學演算法，讓系統運算快而正確；我們學網路、學組合語言、學計算機結構、...，但是，出了社會開始工程師生涯，卻發現什麼快速排序法、雜湊圖的，人家都已經做好library讓我們去使用了，而我們花最多的時間，其實是在『讀前人的code』、『修別人的bug』。
你知道的，不要說是讀別人的code了，光是自己的程式碼，過了兩個月再回來看，也都看起來像是別人寫的。每次接到任務，光是要看懂而忍住不罵髒話，就已經很辛苦了。『為什麼你們這些人寫程式要這麼隨便？』恐怕是大多數工程師在看別人程式碼時的共同心聲了。
為了公司整體，與為了未來的自己，何不一開始就寫出較易了解的程式？要知道，寫出機器能懂的程式並不難，只要compile能過他就懂了，而寫出人能懂的程式才是真功夫。『無瑕的程式碼』是我認為一個好的工程師應該具備的能力，然而叢書系列這麼多本，原則範例這麼多，我們要從哪裡開始呢？千里之行始於足下，我們從命名開始吧。
最基本的就是變數的命名了。這點，應該比較容易遵守。簡單來說，變數一定要讓人看了就知道是要做啥的。
這樣的命名是否讓你頭痛？因為從名稱無法馬上看出用途，必須得再往下看邏輯才知道，這樣就拖慢了閱讀速度，就是不好的命名，就更別說上面的money和money_1這種容易使人混淆的命名了。改成這樣如何：
看完變數定義，還沒看後面程式碼，大概就能猜到接下來應該是一段針對某個userId進行balance調整的程式。要不要往下繼續閱讀，就可以很快判斷出來，是不是很省時？
韓式的命名也很重要，一般來說閱讀程式時，大多以top-down的方式來閱讀，所以，一旦函式命名得好，讀者即使不點進去看，也會知道這一段在做啥，如果是不重要的，他就可以放膽跳過，就算是重要的，他也不用花很多時間點開來一行一行閱讀，可以馬上抓住整短的邏輯脈絡，進而，你知道的，減少因誤會原意而生的錯誤。
更有甚者：
如果不點開來一個一個看，鬼才知道這些函式有什麼不一樣！不要造成後備或未來的自己的困擾，這種讓人混淆的命名，還是少取為妙，阿彌陀佛！
類別命名也是很重要的。一般來說，我們會希望類別的命名和函式與變數一樣，一看就懂。然而，類別的命名又更難了，為什麼？因為系統的功能是隨著公司的發展而累積的。一個類別誕生後，經過時代的演進，很容易就會被加入原本不屬於他應做的是，或是被移除了一些功能，使得這個類別的命名再也不合時宜，譬如：
你可以想像，UserManager創始之初，應該只有getUser與addUser兩個函式，而後來應該是因為一些需求變更，加了新的user建立模式，但是舊的函式又不敢貿然刪除，於是就先把它給註解掉。後來又因為別的需求，加了取得推薦商品與已購買商品等功能。
如此一來，UserManager這個名字已經不合時宜了，要的話，也應該改成UserAndItemManager才對。
但是，事情可沒這麼簡單。這樣的命名雖然合時宜了，但是卻大大地違反單一職責原則。如果要追求真正的Clean Code，變成一個優秀的工程師，我們應該要把Item相關功能從UserManager身上移除，譬如，另外各自創立Invoice以及Recommender的類別才對。
喔，順帶一提，上面回傳Map<Integer, Item>的方式，也是違背Clean Code原則的，這會增加一些未來被誤用的風險，不過，那就又是另外的故事了...
最後，我們知道人生不能重來，但是git可以。於是，只要你有用不到的類別、變數、或是函式，都應該要大膽地刪除才對，以免影響閱讀。如果哪天真的有重啟功能的需求，大不了回舊版來找便是。
以上只是Clean Code眾多原則中最基礎的命名原則，也是命名原則中最基本的第一步。但是，不踏出第一步，怎麼到的了偉大的航道？注意：一旦命名容易使人混淆，閱讀後續的程式碼就容易誤會，邏輯就容易被改錯。這是我們所不樂見的。
可惜的是，怎麼寫出好懂易讀的程式，學校卻很少著墨。這真的有賴大家平常的注意，以及經驗的累積了。",,,"['變數的命名', '函式(method/function)的命名', '類別命名']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191157,DevOps,0,大型敏捷專案的DevOps系列,4,[鐵人賽Day4]簡單介紹微軟的Scrum「實作篇II」,AkitoSun,https://ithelp.ithome.com.tw/users/20094400/ironman,1512844614000000000,580,先卡位，待補,,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191155,自我挑戰組,1,30天的切版日記系列,6,Day6:幾個Sass寫法,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1512843557000000000,578,"研究幾個看過卻還未明白的sass寫法
會寫成
如果還想再設定border屬性，比如另外設定左右border的寬度為0
現在可以寫
sass可以讓@import寫在css規則內
比如有個文件 叫做 _black-theme.scss (前面的下底線是局部文件命名規定)，內容如下
然後把它放到css內
結果會是
如果網站中有些地方的樣式類似，可以用變數來處理，但如果大段的重複樣式，變數就沒辦法處理了。sass的混合器可以解決大段樣式的重複使用。
@include來使用sample
結果會是",,,"['縮寫形式的嵌套', '嵌套導入', '混合器 @mixin']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191156,ModernWeb,0,挑戰CSS30天系列,6,day6_color,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1512843404000000000,556,"color (顏色) 屬性可設定一個元素的顏色。此屬性可以有以下三類的設定值：
範例如下：
成果如下圖：

另外，提供網路上的色碼表連結：
https://www.ifreesite.com/color/
（最下面可透過十六進位值轉換成 RGB 碼）",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191003,ModernWeb,0,Nest.jsframework30天初探系列,6,Nestjsframework30天初探:Day06ExceptionFilters,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1512841291000000000,599,"
在Nestjs世界裡，有一層Exception Layer，專門負責捕捉Exception，並適當的回應給Client。
預設情況下，所有未經定義的Exception(非HttpException或未繼承HttpException的class)，都會被Global Exception Filter捕捉處理，並返回一段JSON訊息給Client。
說明:Nestjs有一層Exception layer，有一隻ExceptionsHandler會去執行捕捉錯誤。

說明:GET回傳結果為Nestjs預設的錯誤回應。
說明:throw new HttpException()，使用nestjs的API，做更細緻的處理。
說明:如此我們就客製化了回應的錯誤訊息和狀態碼。
說明:ForbiddenException extends HttpException，所有特性都會跟HttpException一樣。
說明:再使用Postman對http://localhost:3000/getException 做GET請求，結果會跟第4點一樣。
8.1 在src/modules/Shared/ExceptionFilters下新增http-exception.filter.ts ，並寫些程式碼如下。
src/modules/Shared/ExceptionFilters/http-exception.filter.ts
說明:@Catch()裝飾器會連接metadata到Exception Filter，告訴Nestjs，Filter會去尋找HttpException。
src/modules/Users/user.controller.ts
說明:Controller呼叫一下@UseFilters()裝飾器，傳入HttpExceptionFilter，如此CustomForbiddenException的行為會被控制改寫。
說明:console有打印log資訊，在這邊是以console.log()替代log操作。
9.2 Postman結果如下。

說明:json回應有被改寫，Exception Filter具有override功用。
src/modules/app.module.ts
大功告成，這樣對Exception Filter就有更多的了解，真是神好用的Filter。
程式碼在github",,['Exception Filters'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191065,自我挑戰組,0,資訊技術解戈迪安繩結系列,2,IT｜程式設計｜Front-End｜PhoneGapAPP快速開發移動端應用,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1512840748000000000,572,"跨平台解決方案
如果想同時開發網頁應用程式及原生APP，目前有三種主要工具: Unity，一個專業的遊戲開發引擎，並且開發效果最接近原生APP，能維持高性能。相對而言，也要付出較高的學習成本。Xamarin，基於Mono專案的開發套件，並且在價格上特別實惠(尤其對.NET開發者而言)。可以直接透過微軟的 Visual Studio及C#開發各種跨平台App。Cordova，能直接使用HTML/CSS/Javascript來開發跨平台APP，如果你是網頁工程師，則學習曲線則幾乎為0。
PhoneGap 技術簡介
PhoneGap是一個用基於HTML，CSS和JavaScript的，創建移動跨平台移動應用程序的快速開發平台。它使開發者能夠利用iPhone，Android，Palm，Symbian,WP7,WP8,Bada和Blackberry智能手機的核心功能——包括地理定位，加速器，聯繫人，聲音和振動等，此外PhoneGap擁有豐富的插件，可以調用。
該技術可以讓Web開發人員可以利用他們所有的HTML、CSS和JavaScript知識，而且仍舊可以同iPhone的重要本地應用程序(如攝像頭和通訊錄)交互。重點在與快速開發一些基本的應用。門檻相對較低。
功能的支持
PhoneGap在多個主要的智能手機設備上提供了以下功能的支持：
●加速計
●攝像頭
●羅盤
●通訊錄
●文檔
●地理定位
●媒體
●網絡
●通知(警告、聲音和振動)
● 存儲
[開發工具]
中文網站：http://www.phonegapcn.com/
英文網站：http://phonegap.com/
[配置要求]
下載及安裝
Eclipse Classic
Android SDK
ADT Plugin
PhoneGap
[Hello World 範例 PhoneGap+jQuery Mobile
打開 Eclipse,在文件菜單下面點擊 New > Android Project

Application name：Hello
Package name：com.phonegap.hellophonegap
Create Activity：App
注：目前 PhoneGap 0.9.3 用 Android 2.3 以上版本可能會出錯，所以 Build Target 請選 Android 2.2 以下版本。

項目的根目錄,創建兩個目錄:
解開 phongap  資料夾，選擇 Android，裡面會有一個 phonegap.js 和 phonegap.jar 檔

執行以下操作：
[修改程式碼]
Eclipse的 src 文件夹中的主 Java 文件進行少量調整，如下圖：
class 繼承類由 Activity改為 DroidGap
將 setContentView(R.layout.main) 這一行替換為 super.loadUrl(""file:///android_asset/www/index.html"");
添加 import com.phonegap.*;
移除 import android.app.Activity;

在這裡你可能會遇到Eclipse找不到phonegap.jar的錯誤。在這種情況下，右鍵單擊 /libs 文件夾找到 Build Paths/ > Configure Build Paths。然後在Libraries標籤頁中添加 phonegap.jar 到項目中。

右鍵單擊AndroidManifest.xml並選擇Open With > Text Editor。將以下的程式碼拷貝到 android:versionName=""1.0"">
之後:
在把 android:configChanges=“orientation|keyboardHidden” 加到 activity 裡的 android:label=""@string/app_name""的後面，如下圖：

[hello world 程式碼編寫]
在「/assets/www」目錄中新建文件 index.html ，將下面程式碼複製貼上並存檔
大功告成！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191146,DataTechnology,1,GraphQL+ApolloData入門系列,3,ApolloDataServer介紹,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512838963000000000,635,"介紹
ApolloData Server 主要有三個任務
第一個是解析  Client payload map 打進來的資料,並且符合 Type Query 與 Type Mutation  的定義(即開放的 API )
第二個是  Resolver  解析 , Resolver 解析要符合定義的  Schema Type
第三個是 是驗證功能
當然支援 GraphQL  Spec 的 Server 還有很多 但是可以透過下面官方提供的比較表可以看到 ApolloData 是非常用心

ApolloData Server 的運作方式
https://www.apollographql.com/docs/graphql-tools/
ApolloData 把原生的撰寫 Schema 方式調整過了所以寫作起來就好像在寫NOSQL的定義檔,
typeDefs 就是定義 Type 而Type 中可以返回另外一個 Type 像關連般的樣子,
如下面的 Author 底下的 posts:[POST] 定義 posts 為 POST 的 Type 並且為陣列,另外 id:Int! 的驚嘆號就是表示必須,其他基本型態就有 Int ,String,Boolean,也可以像 POST 那樣自定義 Type
官方範例
接下來可以看到 type Query 與  type Mutation 這兩個都是開放 Client 端可以操作的 API 所以 Client 是不能直接操作 Schema 必須透過開放的 API ， 符合之後才能到 Resolver ，而這邊的
posts:[Post] 左邊的就是開放的 API 介面右邊的就是 Resolver 要符合的形態
再來看一個 author(id:Int!):Author 左邊的多了一個小()裡面的意思就是 API 開放的參數要是id並且是數子， Resolver 回傳形態則為是 Author
接下來會看到 Mutation 相對於 Query 是查詢 Mutation 則包含新增刪除修改 只要有異動資料庫的都叫做 Mutation
其他都跟query一樣
Resolver 的部分官方範例 用假資料 Mock 起來 ，符合回傳形態沒有連結資料庫，這樣比較好說明
Resolver 的部分要上面程式碼開放的 API 介面相符合 type Query 與 type Mutaion
Resolver 的格式 也是分成 Query 與 Mutaion ，寫法都一樣基本上會有三個參數
第一個是 PARENT 通常會用""_""， 第二個是傳入的參數第三個通常是用來驗證身份使用
如果沒有參數傳入就直接像上方的 posts這樣直接打回去 posts (這邊是上面定義好的陣列形態就是post)
有參數要查詢的話就會至少要兩個參數如下，如果有加上驗證資訊的話就會放在第三個
另外我們可以在 Client 端使用 Nest 巢狀查詢
例如
例如上方的 payload query 那是因為 Resolver 這邊有做一個關聯查詢會把Post的post.authorId當下一個Author的Id查詢條件,這樣就串起來了
Schema 跟 Resolver 基本的設定就完成了
ApolloData Server貼心的把邏輯開發分開並且簡化,接下來把它還原成原生的CODE
總結
ApolloData Server 貼心的幫忙開發者省下許多重複的工作並且把邏輯變得更清楚，讓開發更順暢 ，輕鬆上路了
day4 再來說明 Server 驗證的部分
官方網站有介紹與範例
https://www.apollographql.com/Servers/",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191148,ModernWeb,0,從無到有，使用Go開發應用程式系列,1,Let'sGolang,Miles,https://ithelp.ithome.com.tw/users/20102562/ironman,1512837445000000000,606,"前言
Go 是 Google 所開發的程式語言，最近有很多新流行的 Server 端應用都是使用 Go 開發的，如 Docker 或 Drone CI 等；除此之外， Go 語言關鍵字少、程式結構相較簡單、加上內建開發工具（如編譯、測試、文件等等）都很完整，這對新手入門是非常友善的。
總和以上這些特質，有越來越多人已經入坑 Go 了，而今天開始，筆者也要入坑了！
其他語言也有優點，那為何選擇 Go 語言？首先，因為筆者興趣比較偏向後端語言；後端語言很多，而筆者比較想學靜態語言。
在候選名單中，有 C/C++ 、 Java 、 Rust ，但看了許多文章，最終選了 Go ，原因是：
PHP 是目前筆者最熟悉的語言，當跟一個語言越熟，就越會了解它不適合的情境。眾所皆知的，它效能比較差，即使 7.0 的效能大大超過 5.x ，但還是無法跟 Java 等靜態語言相比；其次是，原生提供的函式庫並不擅長處理多執行緒；最後，大家最常使用的組合是 LAMP ，它非常適合設計成無狀態服務，但同時會反應另一個問題：因每次狀態都是從新建立，包括 DB 連線，那在大流量的情境下，該如何有效管理 DB connection pool 。
剛好 Go 能解決上述三個麻煩的問題，這也是我想學 Go 的主要原因。
未來三十天預期會從環境建置開始，一邊學習，一邊使用 Go 寫出幾個簡單的 CLI 應用與 API Server 。",,"['為何選擇 Go 語言？', '原本的 PHP 呢？', '三十天目標', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191145,自我挑戰組,0,hexo-從初學到入門系列,2,測試hexo環境-day2,josephwu,https://ithelp.ithome.com.tw/users/20107307/ironman,1512837132000000000,558,"首先我們來看看hexo的常見指令:
$ hexo new [layout] <title>  產生一篇新的文章
[layout]如果沒輸入會使用預設的版面 <title>為你自訂的文章名
$ hexo generate 等於 $hexo g 產生靜態的檔案
$ hexo server 等於 $ hexo s 啟動伺服器  預設網址為: http://localhost:4000/
$ hexo deploy 等於$ hexo d 將檔案部屬到存放空間
接下來依序輸入以下指令:
並在瀏覽器輸入: http://localhost:4000/
就可以看到你剛剛建立的文章article，並出現預設的版面
",,,['在上一篇談到如何建立hexo環境後，接下來就開始要測試我們安裝的hexo是否能成功執行，並更進一步部屬到github上'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191144,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,6,Phoenix起步走：環境安裝與建立專案,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1512836977000000000,575,"今天的內容原本是昨天的後半部
但介紹完Elixir之後，如果把Phoenix環境與概述講完
感覺篇幅有點略長，安裝切一半又很奇怪
不如整篇作為一個獨立的文章，方便有興趣嘗試Phoenix的朋友做參考
要進入Phoenix之前，首先我們需要安裝Elixir
安裝的步驟相當簡單
假設你在MAC環境而且已經有使用Homebrew
如果是其他環境的話，可以參考這邊
安裝完Elixir以後
你就可以使用iex，類似ruby的irb
也可以在這邊練習Elixir語法
在進入iex時可以看到安裝的版本
以我為例是Elixir 1.5.1
如果你只是單純想查詢版本，可以用-v
建議至少在1.4以上
安裝完Elixir後，理論上你也裝好Erlang了
如果你貼上這行
他會回傳你目前的Erlang版本，以我為例是OTP 20
你的版本應該大於等於20，請確保至少大於18
凡事總有意外，如果你沒有順利安裝好Erlang
可以參考官方指南
在安裝Phoenix之前，我們還需要先安裝Hex
他是Elixir 的外掛管理器，可以理解為ruby的bundler
注意到我們用了一個陌生的指令mix
這個是Elixir 的命令工具，提供許多方便的功能，
比如說新增元件、編譯、測試等等
前面鋪陳了這麼多，終於要安裝Phoenix了
Phoenix 預設使用 brunch.io 来管理靜態資源，
而 brunch 是基於 Node.js 開發的，所以如果你會用到靜態前端
就需要安裝node
但假如你只需要開發API，不使用任何js, css等靜態資源
就可以略過
確認一下版本大於5.0.0
如果你需要安裝，請參考官方說明
Phoenix 預設使用PostgreSQL，當然你也可以選擇MySQL或MongoDB
都有對應的支援
只有Linux使用者需要安裝，Phoenix即時更新功能會用上
Mac與window用戶可以略過
如果你照著步驟做，到這邊環境已經安裝完成
我覺得不算太困難
現在我們馬上來新增第一個Phoenix專案吧！
Phoenix就會在當前的路徑創造一個名稱為hello的專案
如果你想要指定資料庫，可以加上參數，例如：
當然，如果你的專案已經創建好了
你依然可以在裡面的設定檔更改資料庫
在建立的過程中，他會問你要不要安裝相關的外掛
預設是Y，所以大膽的Enter按下去就可以了（除非你很確定你不需要）
安裝完後，你會看到下面的提示訊息：
這邊基本上就說明了接下來的步驟
同時也是幾個常用的指令
首先cd進去剛剛新增好的專案
用vim或是你慣用的編輯器把config/dev.exs這個檔案打開
滑到最下面資料庫設定的部分：
如果你是使用預設的PostgreSQL，就會看到跟上面一模一樣的預設
把你本地環境的username與password複製貼上然後存檔
接著就可以執行
用rails理解就是:
ecto是Phoenix使用的ORM，後面會介紹到
資料庫好了以後，就可以開啟伺服器了
打開瀏覽器輸入 http://localhost:4000
如果一切順利，你會看到Phoenix的歡迎畫面

control + c可以離開
參考資料：
https://www.gitbook.com/book/mydearxym/phoenix-doc-in-chinese
https://github.com/chenxsan/PhoenixFramework/blob/master/00-prepare.md","['1. 安裝Elixir', '2. 安裝Hex', '3. 安裝Phoenix', '4. 安裝Node.js (optional)', '5. 安裝PostgreSQL (optional)', '6. 安裝inotify-tools (optional)', '7. 建立專案']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191143,ModernWeb,0,WhatDoestheCodeIgniterSay?系列,1,[I]用CodeIgniter的30天-開賽,qian247k,https://ithelp.ithome.com.tw/users/20107530/ironman,1512835743000000000,686,"第一次參加鐵人賽，晚了幾天開賽
因為想看看大家都怎麼樣寫的，其中也看到讓我非常有興趣的主題
「好想知道怎賺到一百萬啊」抱持著這種心情持續關注
其實只是想看髒話舒壓
當初花很多時間在想標題和簡介要怎麼寫會比較好笑
然後我就認清自己是個沒梗的人
結果只想得出這種過氣的名稱，文章標題是比較正經的說法
其實很久以前就在說要摸摸 CodeIgniter
有接觸過社群的工程師都知道，只要有人問「請問有什麼框架好用」
一定會掀起一番論戰
不亞於「推薦用什麼編輯器」掀起的腥風血雨P.S我是phpstorm派的
CodeIgniter 這種東西，有的公司用，有的公司不用
只要能解決問題，他就是好的框架
所以開這個主題
主要是了解內部物件和類別的作法
其實早就有這個想法了，只是跟減肥一樣各種推託
一直說服自己「這東西很簡單，之後再看」結果就是一直拖到現在沒看
廢話了一大串，應該很有誠意了吧
因為是要了解 CodeIgniter 的運作方法
所以沒有特別說要做出什麼成品
先介紹MVC，再來理解 CodeIgniter 的開發哲學
用基本常見的練習來了解 CodeIgniter 中怎麼做到 CRUD 的
如果看到什麼新鮮的名詞也會跳出去看看
目前開發環境使用 docker 建置 php + nginx + mysql
如果你沒聽過 docker 今年有人寫相關主題可以去追蹤一下看看
比那些有的沒的套裝環境好多了！",['來看看之後 30 天的規劃'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190623,ModernWeb,1,Next.js+各種套件組合系列,6,Next.js&Material-UI,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512835731000000000,783,"介紹
Material Design 是 Google 提供的一套設計標準， Material-UI 是參考其標準設計為 React 開發者使用的套件目前在 V1.0 BETA 版 ，最主要差異是導入了 Css In Js (在v1.0版之前是使用 Sass 模式)，目前 Css In Js 有很多套而 Material-UI 是使用 Jss 來當作主要的 核心
V1.0  Next.js 上的設定
先安裝
npm install Material-UI @next --save
在安裝 如果要使用ICON作者也很貼心的加入到套件之中
npm install material-ui-icons
如果要單獨使用套件直接掛入就可以了，不過這樣是沒有 Theme 通常要再補一個 Provider提供佈景
Jss 因為要在 Document 本文中先設定JssProvider ，在 Next.js 要覆寫 Document 本文就要在 pages 目錄底下設定 _document.js 這隻檔案
這邊 主要是在 MyDocment.getInitialProps 完成Jss Provider 設定,順便傳入 Material 的佈景主題到 Meta 之中
context 也是設定主要佈景的地方,會跟 client共用
context 內容主要是 Jss 跟 Material 的設定 Material 會要先設定 Theme
然後透過 Jss 的 createContext 去創建給 stylesContext 使用,這邊順便注入到 SSR 的 Gobal 與 Client SPA 共用
接下來設定 SPA , Material-UI提供了一個 withStyles HOC 讓 Css 掛到指定的元件，在 componentWillMount
這 getContext (import getContext from '../styles/getContext')
就 SPA 跟 SSR 都同一隻設定值(不用分開寫)，在 componentDidMount 的時候因為SSR會有些衝突所以就把多餘的節點先移除，在給 SPA 的 MuiThemeProvider 需要的 Theme 以及 sheetsManager (都來自設定 getContext)，
這樣就會有 Theme 主題了 ，接下來就可以在 Next.js 輕鬆的使用 Material-UI，其他元件的部分因為都是隨裝即用可以參考 https://material-ui-next.com/
主要理解這邊提到的三隻程式的關聯就可以輕鬆快樂上手了
另外 JSS 的寫作風格是 利用駝峰 CSS 語法像一些有""-""的都要拿掉例如 background-image在JSS 就要寫成 backgroundImage ，通常都會把這些 CSS跟 Components放在同一層在 import 近來後透過 mateial-UI 提供的 withStyle HOC綁定到物件 ，物件的class 都要寫成 className
總結
Material-UI 使用了 Jss 駝峰寫法 Css In Js 的好處之一就是可以省去 perBuild (Css的語法都支援)，也省去開發階段reBuild 工作，除了Next.js 設定稍微複雜一些,稍微胖一些.不過個人滿喜歡 Material-UI 風格的,這個相對於 styled-components 都是屬於 Css In Js,也是常常被比較, styled-components 比較輕 day7 來介紹一下
官方提供 Next.js 範例
https://github.com/mui-org/material-ui/tree/v1-beta/examples/nextjs",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190749,自我挑戰組,2,自我挑戰日記系列,4,CSS：background圓型漸層,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1512835375000000000,592,"先前文章寫到的是直線性漸層
今天是 徑向漸層 能作出由中心向外漸層效果的圓
以及指定 漸層點 → 結束點 與中間顏色的距離位置
這在線性漸層也是可以使用
距離位置的單位有 0 ~ 100% 及 px
shape size at position 中的
shape 決定正圓、橢圓的值
size 能指定圓的長寬，用指定的似乎沒容器的限制
position 能指定位置，前面一定要加 ""at""
範例

除了已指定的圓大小 - 80px 50px - 不受容器的限制外
漸層都從中心點延伸至4個邊當中最遠的距離
ellipse 橢圓形 - 找出垂直、水平最遠的 2個邊 作出的橢圓
circle 圓形 - 找出離中心點最遠的 1個邊 的正圓形
和以下4種

closest-corner - 延伸至最短的角，用垂直、水平最短的距離決定圓長寬
closest-side - 延伸至最短的2個邊，並決定圓長寬
farthest-corner - 延伸至最遠的角，用垂直、水平最遠的距離決定圓長寬
farthest-side - 延伸至最遠的邊，並決定圓長寬
這4種在置中時看起來沒太大差別
這是因為要移動中心點的位置才能看出最短的距離和最遠的距離產生的變化。
接下來在 shape 加個指定位置 ""at 40px 25px"" 後，就能看出差別了

ellipse 和 circle 同上都是延伸至最遠的邊形成圓

closest-corner、closest-side、farthest-corner、farthest-side 在指定位置後就看的出差別了
--- 明日待續。
to 小魚： 被發現了
不太懂怎麼不能留言和回應呢, 這是要升級的意思嗎....( ˘•ω•˘ )",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191141,ModernWeb,0,重新學習網頁設計系列,6,DAY6.CSS選擇器Selector(實際範例),CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1512831739000000000,580,"在前面幾天我們陸陸續續地複習了幾個常用的CSS 選擇器 Selector
我將在這篇中使用table來講解一些實務中常用到的偽類別
目的是使我們所建立的表格可以有更佳的可讀性，並且不在必要時刻不使用class
首先建立一個簡單的表格，與其內容
點擊範例JSBin以查看執行結果。
接著我將說明直接註解於CSS區塊內
點擊範例JSBin以查看執行結果。
這個範例簡單卻又實用，
而不僅僅是表格, 當我們需要陳列多筆資料，
好好的運用:nth-child與其他偽類別是必不可少的。
最後，像這樣沒給class但又對裡頭的元素進行了樣式修改
其實可以定義一個css namespace意思是指我們只要給table一個class
接著將樣式定義於table.class-name底下，就能在不污染全域table的情況下達到一樣的效果
這樣的行為在沒有使用css 預處理器時相當麻煩，因此在了解了css的特定度以及選擇器之後
下一步該學習的就是CSS 預處理器",['DAY 6. CSS 選擇器 Selector (實際範例)'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191139,DevOps,0,用30天來介紹和使用Docker系列,6,Day6：把DockerImagePush到DockerHub,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1512828522000000000,747,"昨天已經把啟動 Tomcat Service 的 Docker Image 建立起來了，如果我們要將這個 Docker Image 分享給其他人用，有幾個方法：
今天要介紹的部份是把 Docker Image Push到公開網路的 Docker Hub 上，所有的人都可以把這個 Docker Image Pull 下來使用。
今天要實作的流程如下：
1. 到 Docker Hub 的網站如下圖。

2. 直接在畫面右邊的 “New to Docker?”，輸入註冊 Docker Hub 的資訊，輸入完之後就按下 “Sign up”

3. 看到如下畫面之後就去收 E-mail，把帳號啟動

4. 收到信之後，按下 Confirm Your Email 畫面如下

5. 登入 Docker Hub 畫面如下

6. 看到以下畫面表示 Docker Hub 帳號已經註冊成功了

**1. 打開 terminal 輸入 docker images，畫面如下 **

2. 要把 Docker Image Push 到 Docker Hub 上，需要把 Docker Image 加上 tag，如下指令
使用的Docker tag格式如下：
docker tag ${Image Name} DockerHub帳號/Image Name
執行結果的畫面如下：

3. 輸入 docker login 指令登入到 Docker Hub，畫面如下

4.使用 docker push 指令把 Docker Image Push 到 Docker Hub 裡，指令如下
成功之後的畫面如下

**1. 在 Docker Hub 網站裡，登入帳號進去可以看到 Repositories 已經有 jackyohhub/mytomcat 的 Docker Image 如下圖 **

2. 使用 docker rm 指令把 local 的 Image 刪除掉，測試從 Docker Hub pull Docker Image 下來，指令如下
畫面如下

3. 從 Docker Hub Pull Docker Image 下來，指令如下
Pull 完成之後畫面如下

4. 啟動 Docker Container，指令如下
5. 啟動完成之後就可以使用 Browser 查看結果，輸入 URL 位址為 http://localhost:8080 可以看到如下畫面

今天已經練習了要如何把 Build 完成的 Docker Image 放到公開網路的空間上了，但是會有不希望分享自已做的 Docker Image 或是有安全性上的需求。如果有以上的需求 Docker Image 就不適合放在公開的網路空間裡，所以明天要介紹如何在自已的內部網路下架設一個 Docker Hub，通常稱為 Docker registry。",,,,"['一. 註冊 Docker Hub 帳號', '二. 把 Docker Image Push 到 Docker Hub 上', '三. 測試是否成功的把 Docker Image Push 到 Docker Hub 上']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191138,自我挑戰組,0,網頁學習日誌系列,6,Git:gitconfig和本地數據庫,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1512827326000000000,734,"基本操作上手後，然後就開始在Git Bash指定使用者，他目的是確認是誰上傳該版本到資料庫，方便專案維護。
打開Git Bash 直接複製 上面語法，並把使用者email和名字改為自己的email、名字。
複製語法，貼上時按右鍵出現小選單選擇Paste

輸入結果如下：

要確認是否有註冊成功輸入
下圖圈選處就是資料成功註冊了

接下來說明本地數據庫工作流程
在這裡以寫植物觀察日記來說明
一、種下種子並觀察植物成長
二、確認植物生長情形，有改變則紀錄
三、把寫的紀錄收納歸檔於植物觀察日記
套用在本地數據庫就是
種下種子並觀察 = 建立或編輯檔案
有變化則記錄 = 新增索引 (git add  .)
紀錄歸檔 = 提交版本( git commit -m ‘文字敘述’)
在桌面建立新資料夾gitdata
Git Bash 指向到gitdata資料夾

建立本地數據庫
輸入
結果如下：
檢測是否有建立數據庫有兩個方法：
01.後面出現(master)

02.檢視gitdata，並顯示資料夾隱藏項目，會發現多一個 「.git」的資料夾，它會幫忙記錄git版本所以不能刪掉!!

下圖顯示 綠字的a.txt和index.html 表示已成功加入索引

不過如果新增b.txt，再輸入「git status」會出現紅字，表示該檔案沒加索引，只要再輸入「git add .」即可。


在這邊輸入，結果出現如下圖

現在確認是否有建立commit版本記錄，可輸入

上圖圈選處可發現，已經新增一個版本記錄了",,"['建立數據庫', '新增索引', '提交版本']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191135,SoftwareDevelopment,0,認識scala系列,6,Scaladay6(operatorsaremethods),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1512822921000000000,703,"以 Int 為例，Int 定義了許多運算子的方法，例如：+,-,*,/,!=,to,...
Int 也實作了許多 overload 可帶入不同型態的參數，overload 就是方法名稱一樣但傳入參數的型態及數量會不一樣．如果方法參數都一樣，return type 不一樣還是不能 overload :
像 + 就可傳入許多不同型態的參數，回傳型態也不一樣 :
再來看 String，String 的 api 裡有提供 concat 這方法，也可以把他當成運算子使用 :
String 的 toLowerCase ，把 toLowerCase 當作方法呼叫 :
toLowerCase 也算是 Postfix operators，需要 import scala.language.postfixOps 才不會出現 warning :",,['Any method can be an operator'],"['scala 的方法可當成運算子，運算子也可當成方法', 'prefix operators 、 infix operator 、 Postfix operators', '總結']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191132,ModernWeb,0,邁向JavaScript勇者之路系列,6,JavaScript就是一堆物件的概念,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1512819035000000000,1370,"在 JavaScript 中，除了上一篇所介紹到的原始型別以外的都是物件，包含陣列、函式...甚至全域本身都是物件，物件本身可以一層包著一層，其內層可以是字串、數值、陣列、物件，甚至是函式。
小明的記事本都是用物件的概念在做紀錄，他會將要做的事情、筆記分門別類的做巢狀紀錄，這樣的好處可以讓他在尋找資料時比較好處理，並且可以自由地新增屬性及值。

那麼小明筆記本資料如果使用 JavaScript 寫的話會如下，可以發現其實大家做筆記的方式也是這樣的巢狀概念：
我們簡化一下資料內容，紀錄單人資料時也是用巢狀的方式在記錄，如果要尋找一個人的特定屬性時也會比較快。(ex: 漂亮阿姨的力量值在 auntie -> bwh -> strength 可以找到)。
物件本身的組成是由一個 {屬性(property) / 值(value)} 組成的，可以透過 JavaScript 的規則定義一個物件的名稱，舉例來說上述的阿姨可以用以下方式定義：
相同的概念，我們能夠使用一樣的方式取出物件的值，但如果是未定義的屬性則會出現 undefined，嘗試取出未定義屬性的子屬性則會出錯：
另外也可以使用中括號來取用變數的值：
有時候，我們無法預設了解物件內有什麼屬性，此時我們可以使用列舉 (for ... in) 來取出物件內的屬性及值。
JavaScript 本身可以運行在瀏覽器、伺服器端，以瀏覽器來說全域本身就是一個大物件 (window)，裡面包含許多瀏覽器的 API、開發者定義變數、DOM 物件... 、方法等，只要在開發者工具下輸入 console.log(window) 就可以看到。

上圖可以看到剛剛宣告的物件也存在於 window 的物件下。
接下來可能會思考到為何陣列、函式都是物件？如果說陣列本身是物件可能也許好理解，他的存取方式與物件是非常相似的 (下方範例)：
但偏偏他還多了許多陣列方法 (像是：push, shift, unshift)，為何還會說是陣列呢？

這段都與原型繼承有關，我們在更後續的章節再來介紹這一段。
文章同時發表於：https://wcc723.github.io/javascript/2017/12/09/javascript-object/",,"['故事說明', '如何存取物件', '列舉物件', '除了原始型別以外都是物件']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191131,Security,0,資安的學習心得及分享系列,6,DAY6網路攻擊,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1512818705000000000,834,"這篇不是講網路怎麼攻擊，要講怎麼攻擊之前，必需先講一下網路攻擊者為什麼想要攻擊，其攻擊動機及目的。

動機：
我們會想說，別人會什麼要攻擊我，是不是會遭遇其他危險?其實原因有很多，而多半都是好玩居多，或一些莫名的理由。
就像下方的舉例：
攻擊者1：我只是為了想要滿足個人的利益。
攻擊者2：我只是想要報復B，所以我寫了XX木馬攻陷B。
攻擊者3：我只是想滿足個人的快樂而已。
攻擊者4：因為C的電腦上擁有XX資料，我想要盜取(在這稱為不當利益)。
….之類的
目的：
雖然說攻擊者最終所達到的目的不同，但是有個共同的目的就是得到自己想要的東西，例如:有的攻擊者是為了金錢、有的攻擊者是為了利益、而有的攻擊者則是為了名聲，不過也不是所有的攻擊都是不好的。
而最常見的攻擊就有竊取資料、攻陷他人電腦、走後端攻擊等

所以我們要先學會保護自己的電腦，懂得一些基本觀念，才可以知道怎麼保護自己的個資。
至於怎麼保護，這就會牽扯到『資安的知識』。
像是防止資料外洩、系統安全知識、網路安全、教育訓練等這類等知識。
因為網路攻擊他並不會憑空就出現在你的電腦上。

(圖片來源google)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191129,SoftwareDevelopment,2,爬蟲始終來自於墮性系列,9,番外篇#1-養成持續分享的習慣,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512818669000000000,847,"這陣子因為參加鐵人賽的關係，所以工作室裡面的學員大部分也被我推坑下來，而看到一些學員會抱持著擔憂、懼怕的心情，擔心自己所寫的東西不夠好，怕講的內容會讓人覺得沒什麼。
我是這樣看的，分享這件事情，無論是在社群分享、網路分享、或者平常討論，比較大的受益一直以來都是講者本身，上台分享只是一種驗證自己是否真正了解這個主題的最直接方式，不懂，那就去弄懂就好。若不敢講出自己的想法，那其實並無法了解自己懂了沒，再者，當主動拋出了自己的想法，很常時候會得到別人的反饋，而這種入坑和推坑的重疊，不就是知識持續成長最重要的養分嗎？所以在工作室裡的氛圍，分享就像是喝水一樣平常的事情。
於公，分享可以帶給自己省視，可以帶給他人成長；於私，分享可以帶給自己聲量，拓展自己被認識的機會。
而分享不應該是一種為了交差的事情，而應該是要變成一種持續性習慣，那麼，如何才能養成這種習慣呢？
既然是分享，那麼一定會有講的人和聽的人，但是，這種角色定位並不是固定的，兩者常常會互相調換。也就是說其實本質很單純，就是跟人交流，不論是在網路上還是在實體上。而要交流肯定是要彼此都感興趣才叫「交流」，不然都只是叫「應付」，所以有彼此能夠成長扶持討論的夥伴，會是一件很幸福的事情。那麼若要養成分享的習慣，首先要先找到對的地方和對的人，可以是社群、網路、工作空間，唯有如此才能踏出分享的第一步。
要變成厲害的人或要養成一個習慣，並不是一天做 24 個小時，而是 24 天每天都做一個小時，這就像是健身或儲蓄一樣，若持續每天累積一點，你絕對不會察覺到變化，但時間久了就是你的了。所以第二步，每天強迫自己去分享，不用多、不用深，但一定要做，重點不在你所分享的東西和內容，重點是在你持續做了這件事，慢慢的，慢慢的，這就會變成你的習慣。
當你找到了這樣的一群夥伴，當你開始有了每天持續一件事情的習慣，那麼接下來可以開始對自己嚴苛一點，給自己多點壓力，而要做到這件事情最容易的方式，就是「說出來」。當你預告了你要做的事情，那麼你就會感受到加給自己的壓力，因為那是你對別人的承諾和對自己的承諾，而因為你有了夥伴和習慣，這樣的壓力會變的是有宣洩的出口，會變成是成長的養分，入坑、推坑、被推坑、反推坑，坑坑相連到天邊，但這也就是持續成長的動力。
等等...這不就是鐵人賽的模式嗎!!
原來這樣就被推入坑了，快熱血參加吧
","['分享的重要性', '找到對的人和地方', '強迫自己每天都做一件事', '成長始終來自於壓力']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191128,自我挑戰組,1,用IT看世界系列,6,CCNA-vlan切割(1),allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1512817654000000000,757,"在這之前先來談談我跟思科的邂逅吧
以前在迷之網工班上過NA的課程，但因為年久失修
政府現在有3年7萬學習不斷
自費大約3xxx元,但開訓前繳足全額,要沒有『失格』後才能全額退款!
因為NA的課程外面都超貴5位數起跳,(貴貴貴!!!!)
我運氣很好公司好像被列為全額補助對象所以all for free
這個計畫其實5年前政府就有推動,我個同事跟我靠北薪水太少
我跟他說你去弄個NA應該會+薪，後來跑去上後來考上NA擺脫修pc的日子
########來回歸正題吧########
子網路切割計算的題目跟解法
題目一

題目二

當然實務上~~~你覺得客戶請您規劃網路圖,你要當場算給他看嗎???
我想恐怕沒這麼多時間，再加上我也很懶得去算那些東西>""<(好孩子不要學)
子網路切割器
手機APP下回週六分享^^待續",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191023,Security,0,IT安全稽核系列,6,1.6是否確保文件之保護、分發、傳送、儲存以及作廢，均依據所適用的分類程序處理？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1512816575000000000,626,"做事有辦法能100%能夠達到的？
N年前我去面試一家很大的公司，面試是該部門的主管，他問我，給你一筆經費，目標訂在那裏，你有辦法100%達到嗎？雖然我不是第一年工作了，但是，我知道這種目標，就算給你再多經費，你也無法達到100%，這個不是經費的問題，而是在於要達成這個目標，需要天時、地利、人和，依目前我有的籌碼而言，至多只能達到80%，另外20%要靠運氣了。
我很坦白地跟他分析狀況，沒想到對方的面試主管，非常生氣的說，你沒辦法達到100%，你來面試做甚麼?
我也沒說甚麼，笑一笑我就離開了，後來聽說那主管半年不到也被解職了。
別以為有錢就好辦事，事前的分析，也不過是種簡單的評估，做了之後才知道困難重重。100%的結果誰都想達到，可是，回頭去想想，當100%達成，你能確定，最後結果，跟你原先設想的都一樣嗎？
很清楚的告訴大家，沒有，因為過程中太多複雜的因素影響你的決策，絕對不是只有錢的問題。
所以，當時，我就決定這個面試的主管被我Fire了!
根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，繼續1.6的分析。
一、資訊安全管理系統 （管理階層、資訊安全組織）
1.6是否確保文件之保護、分發、傳送、儲存以及作廢，均依據所適用的分類程序處理？
說明：此項說明在於兩個重點：1. 確保。2.分類程序處理。
資訊安全這塊，保護、分發、傳送、儲存以及作廢這些都是必要保護的重點，從過往的經驗告訴我，台灣的上市櫃公司，乃至於一般中小企業，對於這五項作業，很少有做到很完整的，原因不是在於經費的問題，也不在於制度的問題，最大的問題是「人」的問題。
然而，到底來說，人的惰性還是超越組織的規定，試想，考過駕照後，開車上路，除了會注意到路旁的超速速限標誌，有多少人會去注意其他的號制，有多少人還記得考試時所背的法令，正常情況下，也就只有在發生事故，或者接到罰單那刻，才開始注意到法令，而且還一臉疑惑的問，有這樣子的規定嗎?
從上述的情況，我們不難想像，不管如何要求組織內員工如何去保護、分發、傳送、儲存以及作廢，組織花了多少經費建構，不遵守還是不遵守，甚至引發組織內部抱怨。由此可知，並非組織內每件事情都歸咎於，**「公司不肯出錢。」**
過往，本人所服務的公司，資訊安全做得非常嚴謹，出門有專用的USB，筆電USB插槽也不准外部的USB插入使用，甚至連使用外網都必須先連回內網認證後才得使用，Mail server也有傳輸量管制，檔案要刪除，也必須經過再三的確認…等等，但對於每個單位而言，需求都不同，要求越多，越是罄竹難書。原本是良善的資安管理，公司也願意花錢建置，結果卻變成惡法，變成各部門的夢靨。因此，不得以的情況下，公司為了某些部門需要，只好廣開後門，後門一開，所有的資安管理，漏洞馬上出現，結果資訊人員又疲於奔命了。
到底要如何做才好呢？ 誠如本人所遇到的實例而言，所有的資安人員，在執行資安防護之時，並沒有做好組織的調查。一般的資訊人員，就是強制發佈公司公告，然後，限時一到，立刻執行，這樣就認為，可以達到有效的控管。結果往往跟預設的結果相反，那麼問題在哪裡？關鍵在於，「最前端的溝通」並沒有做好，也許資安人員覺得很煩，我才領多少薪水，還要跟他們溝甚麼通？我光忙就忙不來了，哪有時間去溝通，本人在此強調，前端工作本來就是比較繁瑣，兩個思考給你選，資安人員是要前端規劃比較忙？還是要省略前端，到執行之後亂成一團，忙到不知所已，又一直重來的狀況比較好？注意，前端「人」的因素影響較小，每一種管理只要越多人進來，問題會比原來的棘手數十倍以上的。
其實，前端規劃做好了，這五項作業一定能確保「基本」的能做到，我不敢說，能「完整」的做到，但有基本才能繼續要求深入，才能更有效的將程序做好分類，讓組織朝向後續完整的作業水準。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191038,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,6,1-5.監控工具之一:ZabbixTriggers,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1512812216000000000,657,"Triggers是用來做觸發動作，可以告警或自動化動作
點進Template Module ICMP Ping => Triggers =>High ICMP ping loss
Expression裡面是Trigger的規則

我們先把規則複製到筆記本，試著重新建立一個新的
點選Add會出現選單 =>在點選 Item右邊的select可以選擇要設定規則的項目，選ICMP loss。

Function下拉選擇Minimum value for period T is >N，Last of (T)輸入5m，N輸入20。
規則的意思是最近5分鐘內pingloss的最小值大於10，則進到PROBLEM狀態
預設範例是{$ICMP_LOSS_WARN}，可以進到Macros查看，值為20，與上面寫的規則是同樣的意思

Expression constructor點下可以展開規則，這裡可以看出是A跟B條件皆成立才會執行

點Test可以輸入值做測試用，從下圖可以看出，當我們ping loss 100時滿足A條件成立，但B條件不成立，AND後為FALSE所以不會觸發。

那當斷線時ping loss 100 斷線時這條規則不會出發囉?
是的因為還有其他規則Unavailable by ICMP ping，點下Dependencies可以看到，用這種方式可以減少同質性的訊息。

應用:假設監控一台路由器跟底下的一百台設備，ping一百台設備的Dependencies可以設在ping路由器上，上層網路斷線底下設備也斷線是很合理的，就不會一下收到上百台訊息查不出問題所在。
預設為Problem expression正常即恢復，可以額外設定恢復條件避免""抖動""情況發生(不穩定，一會好一會壞)，點Recovery expression設定更嚴格條件連續五分鐘pingloss皆為0才恢復。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191125,SoftwareDevelopment,1,Kotlin30天，通過每天一個小demo學習Android開發系列,6,Kotlin開發第6天ImageList(RecyclerView),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1512808977000000000,787,"
今天做一個這樣的練習，可以通過畫面滾動的方式來瀏覽 15 張圖片以及對應的描述。
類似 iOS 開發中會用到的 UITableView / UICollectionView。
類似於 UICollectionView，只是使用起來不太一樣。
我們需要為 RecyclerView 提供一個 Adapter，並且給他設定一個 layoutManager。
在 MainActivity 中，看起來就是下面這樣而已，而像是多少數量、將資料呈現在 View 上等動作，都是交給 Adapter。
這裡的 Adapter 有點像 UICollectionView 的 Datasource & Delegate 方法提供者。
我們建立了一個 ImageListAdapter ，定義 ImageListAdapter 可以：
在 Android 中，各種資源的都會有一個對應的 ID 來進行存取，比如 R.drawable.img_1 這不像 iOS 中可以直接根據圖片名稱來進行存取。
下面在 Adapter 中，我們通過圖片名稱轉換成對應的 Resource ID （這樣做是因為一開始沒注意到 R.drawable.img_1 是 Int）
就像 iOS 的 UICollectionViewCell 一樣，我們想要為 RecyclerView 的 Item 定義自己想要的 Layout。
比如說，我們想要每一個 item 上面是一張長條的圖片，下面是一些描述。

我們在 Layout 中建立一個 layout_image_list_item.xml 的檔案，用來定義上面的 Layout。

這裡和 iOS 中的 Storyboard 很不一樣的是，
雖然我們定義了一個 item 設定圖片高度 220dp 描述背景 40dp ，合起來260dp。
但實際上在 Design 介面中看到的還是一個完整的手機樣式，不像 iOS 的 Storyboard 只會顯示 cell 的大小。
我一開始以為這樣就可以了，但結果到手機上跑的時候，一開始只有看到一個 Item，
結果發現一個 Item 就像 Design 介面一樣占滿了整個畫面。
後來就去 Text 下手動修改了高度。
這次我想要為資料建立兩個 Model。
ImageModel 用來定義一張圖片資料會有圖片名、描述兩個字段。
ImageListModel 用來定義一個 list 當中存的會是 ImageModel類型的資料。
在 Android Studio 中，在 Project 中建立 Folder 會有分類，我這裡為 Model 建立了一個叫做 Package 的 Folder
在 Android Studio 中，在 Project 中建立 Folder 會有分類，我這裡為 Model 建立了一個叫做 Package 的 Folder

在 iOS 開發過程中，我通常用 Struct 來定義 Model，但 Github 上逛了一下，看到通常用 data class 來定義
ImageModel
ImageListModel
通過 model 封裝數據後傳值
這邊用 Adapter 舉一個例子，這邊定義了 ListAdapter() 並且會回傳一個 ViewHolder。
然後我們在 ListAdapter() 這邊按下，Option + Enter（Mac 系統），就會看到 Implement Members 的選項。

接著就可以選擇想要補全的方法。

Android Studio 就會幫我們都補上了。","['RecyclerView', '建立 Model', 'IDE 自動補全方法', '參考']","['Adapter', '建立Layout', '建立 Model 資料夾', '定義 Model']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191123,AI&MachineLearning,0,讓我們一起來見見歐美語音助理界的當紅炸子雞-Alexa吧!系列,6,[Day6]Alexa的深度學習基礎框架,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512804179000000000,638,"再來跟大家簡述一下Amazon的首席科學家Nikko Strom今年3月在由西雅圖的美中技術與創先協會(ATI)舉辦的第一屆AI NEXT大會揭密Alexa是怎麼練成的。
一開始，先跟大家提一下，人耳並非隨時都在蒐集語音資訊，真正在聽的時間大約只佔了10%的時間，所以說到了16歲時，一個人大語音訓練時間大概是14,016個小時。

回到了Alexa， Amazon的這個專案團隊將數千個小時的語音訓練儲存資料存到亞馬遜網路服務系統AWS的亞馬遜簡易儲存服務S3並使用彈性雲端運算EC2雲上的分散式GPU集群來訓練深度學習模型。因為數據量太大，該團隊只能採用分散式訓練法（Distributed training），有多台GPU同時運行。

在這過程當中，每個執行序（Worker）都要和其它執行序同步更新幾百兆數據，一秒鐘之內這個過程要發生多次。問題是，這種方法產生了瓶頸，同步更新的數據量太大，限制了訓練無法進一步提升。

這時候Amazon解決方案是：使用逼近演算法（approximations）減少更新規模，壓縮了3個量級。隨著GPU執行續的增加，訓練速度加快。80個GPU執行續對應著大約55萬幀/秒，每秒語音大約包含100幀，也就是說現在這一秒可以處理大約90分鐘的語言。

所以說1個人要要花16年的時間來學習1.4萬小時的語音， Amazon 的系統3小時可學完。
此為Alexa大概的深度學習架構
資料來源: Deep Learning in Alexa at AI NEXT conference",,,['深度學習的基礎框架'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191122,SoftwareDevelopment,1,每天Racket3分鐘系列,6,"(ifday-05""來杯咖啡談是非—Racket的其他型態""(void))",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1512802521000000000,603,"Racket 的 true 與 false 不若 Java、C# 與 Python，是以完整的字來表示，從字元那節開始，我們已經開始接觸 Racket 的一些特殊表示方式，現在所談的布林值，也是如此。Racket 以 #t 當作 true，#f 當作 false。而像 C 語言那樣，非布林的值也有布林含意。但 Racket 裡，只有 #f 可以代表 false，其他非 #f 的任何值，與 #t 皆為 true。當然這是一項不太好的設計，但每個語言多少有個一兩項讓人扼腕的地方，這是很正常的事。換句話說，你可以把 '() （空 list）帶進 if  區塊中，這在 Racket 是合理的，但在 Java 與 C# 裡，會連 compiler 都過不了。
因此，我們可以回到之前所說的型別判斷：
我們在大多數語言裡，都可以把 String 轉換成 byte array，有時候比較麻煩，像 C# 要呼叫 Encoding，Java 直接 getBytes()。然而在 Racket 裡頭，另有一種 String，稱為 Byte String，不若 String 是以字元 list 的形式儲存，Byte String 是以 byte list 的形式儲存，因此它可以處理更底層的 String 內容。Byte String 的表示法，就是在 String 前方加上 #。
我們在 CJK 字集的國家裡，處理文字時長度時，通常需要先區別要處理的是 字數 還是 位元組數 這兩種不同的長度。因此 Racket 的 Byte String 提供了一個轉換機制：
然而，不只處理文字。在 Racket 裡，表示二進位資料也是用 bytes 的形式（對比 Scheme 則是使用 Byte Vector），後續有機會說到一些實務應用與 IO 時，會再回頭與它相遇。
至此，所談到的資料型態，都是很基本的型態，不管是數值、字串、布林、bytes。現在我們要進入的是這門語言資料型態較為抽象的一層。Racket 裡有兩種相當抽象的資料型態 — Symbol 與 Keyword。
Symbol 中文翻作符號，這像什麼呢？如果各位有 Java 或 C# 之類高階物件導向語言的經驗，它類似 Java 裡的 enum 型態。Symbol 使用單引號來表示：'a-symbol。
根據 Racket Guide [1]，Symbol 是一種 interned 的資料，什麼是 interned？我查了字典，可作實習生（當然，怎麼可能！），亦可做拘押；Racket Guide 所給的提示實在有限；或許看看規格書怎麼說，Scheme 規格書僅僅簡單地描述了 Symbol 在比較時的特性：當兩個 Symbol 的字母拼法完全一致時，這兩個可謂完全相等 [2]；最後，我參考了 Scheme 最權威的教科書之一：TSPL4，其中題到了非常重要的關鍵：Symbol 在實作時，是一種查表對應的機制，名字相同的 Symbol，其實作上，就是參考到同一個記憶體物件，因此在進行比較時，可以非常迅速。相較起來， String（字串）比較，則需逐一巡訪字串裡每一個字，效率並不高。 [3]因此，我們可以知道，在 Racket 的 interned 這個字，應該就是指 Symbol 在建立時，會被 ""關"" 在某個表裡。
因為在 Racket 可以做以下操作，將 String 轉換為 Symbol（將 String 關起來）：
當然，你可以把它轉回來，但 Symbol 不等於 String：
然而，Racket 有個 Scheme 沒有的特殊型態：Keyword。這個可以看一下範例：
我們先定義一個長字串，然後分割它，在大多數語言裡，string splitting 是很平常的事。然而，假設 Java 有這樣的 method，string splitting 時，還要把每個字串的前後空白都 trim 掉，method 會怎麼宣告呢？
但在 Racket 裡頭，提供了一種為參數命名的機制，就是使用 Keyword 型態，它在記憶體裡也是以一個字串的形式來儲存，但字面表達上是在前方加上：#:。Keyword 型態很少單獨使用，絕大多數是拿來當作函式呼叫的參數別名使用，我們便不在此深入討論。
註解在 Racket 裡頭有兩種形式，其一就是常常在我們範例程式出現的，以 ; 為首的單行註解，類似 Java、C/C++/C# 的 //。另外還有整段文字式的：#| 註解內容 |#，這個就可以進行多行的註解，類似 Java、C/C++/C# 的 /* */。
因此，各位在以上、以下的範例程式裡，會看見我使用註解以表達輸出訊息或進一步的說明。",,"['1. 是非無關對錯', '2. String 的另一個形式', '3. 來點抽象符號思考', '4. 看不見，可是依舊存在的註解']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191121,ModernWeb,1,認識Chrome開發者工具系列,6,開發者工具快捷鍵跟設定,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1512801047000000000,659,"在這裡我想分享幾個我最常用到的快捷鍵，強迫自己使用快捷鍵可以讓自己的工作速度提昇，強列建議大家可以把你常用的快捷鍵背起來。如果你想要找特定的快捷鍵，官方文件有所有可用快捷鍵的列表。而在開發者工具裡也有快捷鍵的列表，我們下面會提到。
我們今天介紹的快捷鍵是全域 (Global) 的，有些快捷鍵是在特定的面版才有，這些快捷鍵我們會留著等在介紹各別面版時一起介紹
打開 Chrome 開發者工具 ( 打開後的面版會是上一次你離開開發者工具時正在使用的的那個面版 )： Mac 使用 Cmmand+Option+I， Windows 使用 F12 或 Control+Shift+I
一個小技巧：打開開發者工具後，在任何面版，只要使用 Esc 鍵就可以打開開發者工具下的抽屜 (Drawer)，我通常使用這個指令來打控制台面版 (Console panel)
進入元素面版 (Elements panel)，並檢查頁面上的元素： Mac 使用 Command+Shift+C， Windows 使用 Control+Shift+C
搜尋面版： 我最常用於元素面版 (Elements panel) 及原始碼面版 (Sources panel)： Mac 使用 Command+F， Windows 使用 Control+F
這個指令有幾個面版不支援：審查 (Audits) ，應用 (Application) 及安全性 (Security panels)
進入偏好設定頁面：Mac 使用 ? or Function+F1， Windows 使用 ? or F1

在這頁面中你可以調整很多設定來符合你個人的偏好，我會說明幾個我自己常用的，開啟設定頁面的方式：在使用開發者工具的右上角的三點小點圖示上  用滑鼠左鍵點擊一下打開下拉選單，然後再從選單中選擇 Settings。
眼尖的朋友應該也有看到，除了 Settings 外，這個下拉選單裡還有一些其他選項，下面我們就來介紹一下：

下面我們就開始介紹設定的部份：
快觀 (Appearance)：
原始碼 (Sources)：
元素 (Elements)：
網路 (Network)
控制台 (Console)
除錯 (Debugger)
今天我們簡單的介紹幾個常用的快捷鍵跟開發者工具的偏好設定，要記得我們介紹的這幾項功能都只是筆者常用的，還有很多的快捷鍵跟偏好設定是你可以自行設定的。好，接下來我們就要開始詳細的介紹各個面版，明天我們要介紹的是元素面版 (Elements panel)",,"['幾個常用的快捷鍵', '偏好設定', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191120,SoftwareDevelopment,1,每天Racket3分鐘系列,5,"(defineday-04""""Helloworld!""怎麼這時候才出現！—Racket的字串型態"")",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1512800947000000000,611,"不小心一忙，就錯過了發文時間，但我還是會繼續把內容補完。
Racket 與 Scheme 雖然是很老牌的語言，然而它們對 Unicode 的支援度很高，這意思是說，它在使用 Unicode 內容，或說寬位元字串時，不需要使用特別的字面表示法。
在 Racket 的字串表示很單純，就是雙引號括起來的內容：
此處的 displayln 等同以下效果：
若你有寫過一些文字處理的程式，例如跟 CNS11643 轉碼器奮戰過，會大量接觸 Unicode 編碼。當下，需要直接寫 Unicode 進字串呢？就在 Unicode 編碼前加上 \u 即可：
今年各行各業各有其代表字，Racket 的代表字永遠是 λ，而 λ 在 DrRacket 裡有其特殊含意，甚至有快速鍵。但這是一個什麼字？它是一個希臘文字母，你無法在鍵盤上直接打出來，因此，除非用 DrRacket 的 ctrl+\，要打出 λ 最快的就是用它的 Unicode 編碼 \u03BB。在 Racket 裡，要直接表示單一字元，與其他語言不太一樣，必須用 #\ 來表示。如下：
套用上一節談到的 Unicode 表示法：
這樣，你已經可以在這個語言裡呈現各樣的文字。
當然，只是知道字串如何呈現，一定無法滿足各位頂尖工程師的胃口。我們在此介紹一些簡單的字串小應用，開始熟練 Racket 的函式呼叫吧。
之前提到，PostgreSQL 與 Haskell 字串相接的語法，在 Racket 裡頭怎麼做呢？在 Racket 裡，沒有特殊的語法來對應，要拼接、組合文字，就是直接呼叫：string-append 函式，如下：
在這個地方，你或許會以為 Racket 裡，資料與數值是一類，函式又是另一類。本質上不是如此，但我們談函式時會說到。唯切記一件事：參數是用空白分隔。
在往下看之前，你先想想，字串長度的函式應該叫什麼名字？
(string-append ""==============="" ""我是分隔線"" ""==============="")
而當我們知道字串長度時，便能來做字串的提取（substring）：
Racket 提供幾個不同的字串比較函式，在此不會全部介紹，各位可以參考 Racket Guide [1] 的說明。字串相等的比較，可以這麼寫：",,"['1. 文字不簡單', '2. 2017 年年度代表字', '3. 一些小應用']","['拼接文字', '字串長度與提取', '字串比較']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191119,DataTechnology,1,Python學習筆記系列,6,[Day6]Strings字串介紹,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512800548000000000,629,"舉例來說，python以特殊排序方式讀取hello這個字串裡的字母





值得注意的是，字串有個重要特性是”不變性”，意思是說當你創造一個字串後，在裡面的元素不可以被改變獲取帶，如以下例子

Python裡的物件通常有內建字串函數，這個方法是將物件放在函數當中讓物件可以執行指令
請詳以下範例

參考資料來源: Go from zero to hero in Python ",,,"['字串用來記錄文字資訊，像是名字。在python裡，字串是一個序列，意思是說python持續在字串裡追蹤自傳裡每個元素。', '1.\t首先，我們先來創造字串並印出字串', '2.\t字串索引', '** 3.\t字串特性**', '4.\t內建字串函數']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191118,ModernWeb,1,每日文章推薦系列,6,Day6自知之明,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1512793056000000000,682,"每個人有適合做的事情
也有不適合做的事情
像我就不適合做跟視覺設計有關的事情
所以我會前端 但是看了css我還是弄不出能看的網站
自從bootstrap出來以後稍微好一點
不過只會用那些東西去組合出我覺得看得順眼的東西
通常其他人還是覺得不好看
至此我就放棄了做一個網站視覺相關的事情了
畢竟要學的東西還很多 沒天分的事情就不如找人幫忙了吧
有自知之明才知道需不需要尋求幫助
有些問題不是自己想著想著就能有解決方案出現的
就算想到了可能也不是最好的解決方案
多尋找跟累積資訊也是一種幫助
雖然重造輪子是工程師的爛漫
但如果做成三角形也是會蠻慘烈的
技術是一直在更新演進的
不能以為以前是對的 就會一定對
所以要持續更新自己的資訊
全栈测试实战：用Jest测试Vue+Koa全栈应用 | MARKSZのBlog
教學文 能看就看 看不完就留著晚點看
翻译 | 调整JavaScript抽象的迭代方案
抽象化是一門藝術
弄得好可以省下自己很多的麻煩
弄得不好大概就連自己都搞不懂自己在幹嘛了
看看別人為何這麼做 跟怎麼做也是可以參考的
系统设计的万能解法：SNAKE原则
這個整理我覺得挺不錯的
空想有時候會過度設計
將數字整理出來也比較不會沒有頭緒
如何在 PhpStorm 使用 Refactoring (重構)? | 點燈坊
其實我以前看過了
但是看到有網站把這篇文章推出來我就順便再看一次
畢竟是天天用的東西
複習一下沒啥壞處
漫画：什么是动态规划？ - 掘金
很長
這個作者已經算是講的簡單易懂了.....吧?
微服务架构的优势与不足 - 掘金
很多技術不能因為想用而用
了解優缺點再去取捨 會比較好
PHP Security Advent Calendar 2017
今天看到蠻有趣的東西
留著慢慢看
今天看的文章",,"['放棄', '尋求幫助', '自信但是不自滿', '技術文章']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191117,SoftwareDevelopment,1,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,3,Day03-透過SpringData操作資料庫,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1512791628000000000,656,"雖然標題是寫 Spring Data, 但其實底下細分很多套件如
上面大致列一下比較常聽到的，如果你想用的我沒列到可以去 Spring Data 官方網站 看看
透過 Spring Data 這個共用的架構，你可以在不同的資料庫跟 NoSQL 間用很相近的方式來開發, 不用像以前各種 NoSQL 各自的套件各種 API 都要看怎麼用, 是不是聽起來很不錯呢?
這篇還是先介紹一下 Spring Data JPA 怎麼用, 因為後面的範例都是用資料庫, 所以 NoSQL 的話也許之後再補
開始呢我們一樣可以到 http://start.spring.io/ 去勾選套件來產生初始專案
現在選這幾項 Lombok、Web、H2、JPA 就可以了
好了之後我們 dependencies 如下
然後把我們專案內的 application.properties 改名為 application.yml
application.yml 的內容如下
然後在 resources 建立 schema.sql 檔案 內容如下
再建立一個 import.sql 用來做初始化測試用資料
這樣一來 Spring 在啟動的時候會去幫我執行 schema.sql 的內容，
方便我們實驗的時候資料乾淨跟一直去管理 DB 的瑣碎事
接下來我們建立資料庫的實體物件
Book.java
建立操作資料物件的 Repository
這個就是透過 Spring Data JPA 提供的功能, 我們不必真的寫一堆配置跟Dao物件就可以進行操作了
寫一個控制器來輸出資料庫的資料
BookController.java
好了之後呢, 我們測試一下可不可以取得資料
像下圖這樣可以取得資料表示資料庫跟JPA都正常工作啦

這這樣子比起傳統光配置就要搞個一兩天真是方便太多啦
基本上只要不是太特殊的需求, Spring Data JPA 都可以滿足你的使用情境
其他 NoSQL 類的你可以大概參考一下我以前的文章範例
使用Spring-Boot整合Spring-Data操作ElasticSearch
SpringBoot Data Set Multiple MongoDB",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191116,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",6,Day6-Hadoop指令介紹-HDFS篇,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1512786361000000000,683,"本篇將介紹昨天所提到HDFS相關指令的參數。如果想知道更多的說明，可以使用hadoop fs -help指令查看更多。[]內的參數可選擇性使用，並非一定要加入指令內。
hadoop fs -put [-f] [-p] [-l] [-d] <localsrc> ... <dst>
此指令可以同時從本地文件系統複製多個檔案/資料夾到HDFS。
hadoop fs -copyFromLocal [-f] [-p] [-l] [-d] <localsrc> URI",['Hadoop HDFS Usage'],,"['複製檔案至HDFS', '查詢檔案清單', '顯示檔案內容', '建立資料夾', '移動檔案/資料夾與重新命名', '複製檔案/資料夾', '複製檔案/資料夾回本機電腦', '刪除HDFS上的檔案/資料夾']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191111,SoftwareDevelopment,0,那些年八歲到八十歲都可以一起寫的程式系列,1,<DAY1>Introduce----什麼是GoogleBlockly？,MichaelHuang,https://ithelp.ithome.com.tw/users/20107642/ironman,1512784330000000000,698,"介紹Blockly
Blockly是一套視覺化開發函式庫，可用Website、Android、IOS上，Blockly是用拼圖的方式來表示程式的概念，希望藉此可以讓更多非資訊背景相關的可以學習基本的程式邏輯，例如：迴圈、變數.....等。
參考文獻：
維基百科：https://en.wikipedia.org/wiki/Blockly
Google Github:https://github.com/google/blockly/wiki
Google for Eduction: https://developers.google.com/edu/",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191101,ModernWeb,1,PixiJS，方便好用的WebGL內容產生工具系列,6,[PixiJS-Day-06]起手式：View與Renderer,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1512783645000000000,736,"PixiJS 在建立後會產生幾個成員：
本篇會提到的是 renderer 與 view
PixiJS 會將運算後的內容畫在 HTMLCanvasElement 上，
因此一個PixiJS 在初始時會生成一個 HTMLCanvasElement，也就是 view
初始化如下:
來源：官方範例
一個 PixiJS 實體對應一個 HTMLCanvasElement
頁面上可以有多個 PixiJS 實體；
對於在頁面上使用複數 PixiJS 按鈕的情況很方便
(如附圖， canvas 標籤為各個 PixiJS 實體)

由於PixiJS是操作那個 canvas ，對於不支援 canvas 的瀏覽器，可操作 canvas 外層或臨層的DOM方式來做頁面的向下相容 (後續文章會提到)
所以那個 Renderer 呢?
PixiJS 的 Renderer 有兩種，
一種是 PIXI.WebGLRenderer，使用 WebGL 運算畫面
一種是 PIXI.CanvasRenderer，使用 canvas 運算畫面
目前版本的 PIXI 在初始化的時候會把參數都帶進 autoDetectRenderer() 的方法裡
當頁面支援 WebGL 時，使用 WebGLRenderer 運算畫面，不支援WebGL時改成使用 CanvasRenderer
詳見 PIXI.Application 原始碼
與 autoDetectRenderer 原始碼
補充說明：
檢查目前 PixiJS 是在哪個模式下，最快的方法是開 console，會直接寫在 PixiJS 版本資訊旁

用程式判斷的方式如下：
幾個常用到與 Renderer 相關的方法：
antialias：
反鋸齒，預設 false
很常調整的設定，單純設定是否要反鋸齒
preserveDrawingBuffer：
預設 false
因為PixiJS 畫在 HTMLCanvasElement 上，
若想把整個 PixiJS 產生的內容繪製出來時(存成圖片上傳或下載)，
使用 HTMLCanvasElement.toDataURL() 很方便，但使用預設設定時這麼做會黑黑一片沒有畫面
如果需要這個功能時，要設定 preserveDrawingBuffer: true;
註：在手機上繪製整張PixiJS 的內容時，在iPhone 上會有問題，後續文章會提到
backgroundColor：
PixiJS 的背景顏色，0x000000~0xffffff 數字
transparent：
預設 false
設定 PixiJS背景透明，
若在 canvas 後方有其他HTML 元素，又希望使用HTML 的內容時，可設定為true
官方範例：

範例中格子背景是外層 Div 裡的 CSS
使用情境：

再次舉這個例子：由於這類型的PixiJS用法是把 PixiJS 當作元件使用，
如果是半透明或是非矩形形狀的按鈕時，可能就會用到這個屬性

Renderer 的寬高與 Resize 事件有關，會一起寫在後文，
目前介紹的是我常使用 Renderer 的方法
完整 Renderer 方法則參考官網了",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191036,自我挑戰組,0,2017挨踢人生大事紀系列,6,串場文章之一,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1512782554000000000,693,"題目顯露了意圖...
牛哥我呢~是企圖任性不只一回，想隨便寫寫矇混幾篇過去。
上回2017iT邦鐵人參賽過程中。
也同樣是在週末期間，插科打諢寫了不少廢文。
相信若曾受過PTT洗禮的邦友，應該會認同一項鄉民文化吧？！
那就是：『廢文可以舒壓~』
這回參賽，我也想用啦D賽的文章風格...
再寫它幾回...
題目可能就會是：
『週末來哈啦、週五放輕鬆、週一別緊繃、週二稍放鬆、週三小輕鬆、週四預備放鬆...』
邦友也許FOLLOW之後會發現！！
「更~沒一篇正經的！」
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191100,自我挑戰組,0,數位遊牧民族（DigitalNomad）系列,6,第六天-Starworkcoworkingspace,alincode,https://ithelp.ithome.com.tw/users/20092025/ironman,1512781281000000000,680,"Starwork 是我在清邁造訪的第一個 coworking space。
日票是 299 THD
月票是 2,490 THD
營業時間：09:00 ~ 18:00
裡面的設施





附近設施

Starwork 位於比較郊區的地點，但靠近清邁最大的 Central Festival，六點打烊後剛好可以去逛百貨公司。
環境算蠻安靜的，我喜歡面窗的位子，可以一邊工作一邊看外面景色逐漸變暗。

裡面的常客似乎都是當地的設計師居多，偶而看到一些西方臉孔，其實 Starwork 腹地廣大，除了主建築物之外，有很多小 vila 建築租給小團隊，不少外商租用這樣的空間，Vila 有獨立的門禁系統，所以待多晚都沒關係，目前泰國的 grabTaxi 團隊目前進駐在這。

Start Work 官網
遠距工作者在台灣",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190989,自我挑戰組,0,iflen(learning.python)==30:系列,6,Day6-String-宣告,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1512780624000000000,615,"單引號(')或雙引號("")都可以，官方文件提到差別只有用其中一個時不需對另一個標示為逃脫字元
The only difference between the two is that within single quotes you don’t need to escape "" (but you have to escape ') and vice versa.
可以使用反斜號(\)逃脫某些字元。官方逃脫字元列表在這裡
使用三個單引號(''')或是三個雙引號("""""")。可以使用反斜號(\)達到不換行的效果。
針對單行宣告，PEP8並無特別推薦使用單引號或雙引號。對於多行，PEP8建議使用三個雙引號("""""")
This PEP does not make a recommendation for this.
For triple-quoted strings, always use double quote characters to be consistent with the docstring convention in PEP 257.
https://www.python.org/dev/peps/pep-0008/#string-quotes
immutable。宣告後就沒辦法修改。",,"['使用String literals宣告', '特性', '參考']","['單行', '多行', '其他']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191103,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,6,[Round6]真・外出取材ing,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1512780413000000000,632,"趁假日的桌遊團，認真當個觀察家...
本次田野調查
12月逢聖誕節的交換禮物,下回合將插撥diy 禮物這款桌遊",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191098,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,6,[Day6]EasyFlowGP--系統設計工具(二)簽核流程設計師:服務任務SessionBean,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1512778248000000000,680,"[服務任務]另一個常用的類型就是Session Bean 也可以說他就是Java Bean
((當初為了讓EFGP和TipTop的整合，花了很長的時間苦思、研究、也在""IT邦幫忙""詢問...
最後...還是請了鼎新EFGP顧問來技轉SessionBean，才打通任督二脈。
而我也成了JAVA半路出身的工程師。))
EFGP和TipTop整合，鼎新有提供標準的SessionBean設定，但當公司有客製TipTop
的WSDL，而需要引用時，就要用JAVA客製Session Bean，把TipTop的WSDL包在
Session Bean當中，這樣才能在服務任務中被使用。
今天我們先來講鼎新標準的Session Bean，若你看了我的分享還是不太明白，可以
詢問鼎新EFGP的客服，他們都會很親切回覆問題，也會提供文件說明喔。
一、將表單內容寫入EFGP資料庫的Session Bean
Step1.首先要先建立兩個流程變數
變數:processSerialNumber 流程序號     基本型態-STRING  預設值-
變數:isSeparateByVerNo 是否分版號匯入  基本型態-BOOLEAN 預設值-false

Step2.新增服務任務，類型選SessionBean，請按下 [+] 按鈕

Step3.填寫SessionBean設定
名稱:	自由命名ex:表單內容寫進資料庫	
伺服器種類:	JBOSS	
伺服器IP:	localhost	
伺服器Port:	1099	
JNDI Name:	WorkflowEngine	
函式名稱:	exportFormInstOfProc	
Home Class Name:	com.dsc.nana.services.engine.WorkflowEngineHome
以上設定請務必照著填寫，這是鼎新標準的設定值。
傳入Java Bean參數有兩個，請留意先後順序，pProcessInstanceSN 先，再來才是pSeparateByVerNo		
請新增兩個		
ID:pProcessInstanceSN		對應流程變數:processSerialNumber
ID:pSeparateByVerNo		對應流程變數:isSeparateByVerNo

變數細節設定，再次注意pSeparateByVerNo對應的型態為Boolean


Step3.流程設計時，請將此SessionBean放在第二關之後，當系統執行到此關時，會依據
表單名稱建立一個新的資料表。若有明細(Grid)，則系統也會自動新增一個明細資料表以Grid
命名。
EX: 會議表單的表單名稱為Cus_Meeting，存進資料庫如下圖

欄位名稱則為表單的欄位名

以上就是鼎新標準SessionBean，表單存入EFGP資料庫的做法。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191097,ModernWeb,0,Expo---跨平台App開發從零到上架系列,5,"ExpoDAY5---WritingComments,OpenProject&Snack",iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1512778110000000000,638,"
Expo Snack 是一個類似於 Codepen and JSFiddle 的服務，
首先打開你的 Expo XDE，找到閃電按鈕，點選 New Project。

隨之會出現視窗，詢問你要是否要使用專案模板建立新專案，以及該專案要存在哪裡。上次的[]中，我們選過右邊的 tab 模板，這次我們要使用左邊的空白專案。
選取左邊的 Blank，並且取名為 expo-tour-day6。

幾分鐘後會看到如下畫面，表示一切順利。如果有問題，歡迎回文留言或到 React Native Taiwan 發問。

最後，選取 Open in Editor 會自動使用 VSCode 打開專案。

直接點擊 Snack 連結，Snack 會自動為你產生一組模板專案。關閉彈出的 QRCode 畫面後會出現以下畫面：

你可以按照需要刪掉或新增左邊的 File 視窗中的檔案，以及依據上圖關閉不需要的視窗。是不是很簡單？
由於 Expo 是擴充 React Native 而來，所以它也是以 .jsx 的方式撰寫。由於 jsx 的每一層都是一個物件，所以它的註解比較特別，是以下這種寫法：
","['Expo DAY5 --- Writing Comments, Open Project & Snack']","['前言', '目標', 'Expo ""Snack""？', '開新專案', '如何註解程式碼', '現在就做看看', '恭喜', 'Refs']","['XDE', 'Snack']",,,['tags: day5 iThome鐵人賽2018 ReactNative Expo Comment Snack Project'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10191082,ModernWeb,1,三十哩路，我的前端學習路程系列,6,Day06::我所知道的CSS設計模式和架構之OOCSS,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1512778095000000000,702,"從開始切版，我最容易遇到的問題就是⋯ 扣很髒很亂
今天打的程式碼睡一覺醒來後就完全看不懂程式碼在寫些什麼
切版都用不一樣的標籤，今天用header明天用top後天用up
別人打開自己的版想參考參考卻完全看不懂哪些class是做什麼用的
讓我深深覺得，再這樣下去不行！一定要想個辦法才行！
在GOOGLE上頭東搜西查，找到了有關設計模式與架構化
架構化就是制定一套規範，讓大家照著規範來進行撰寫與編輯
可是⋯為什麼要這麼做呢？
這麼做可以維持CSS樣式的可維護性、可讀性、延展性
只要保持這樣的撰寫習慣，隔天早上醒來就不會看不懂自己在寫什麼啦！
這邊使用的是OOCSS跟BEM的規範
簡單的介紹一下這兩個
OOCSS
他的兩個O分別是
O=>Object
O=>Oriented
又被稱為物件導向
OOCSS有兩個大原則
結構(Structure)與樣式(Skin)分離
容器(Container)與內容(Content)分離
把東西全部都寫在一起的話會像這個樣子
把結構與外觀分離
容器與內容分離
這樣的做法好處是可以增加CSS的複用性，相同樣式東西只要套用同一個CSS就可以很輕鬆簡單的做樣式修改
Bootstarp就是個很棒的OOCSS例子，樣式都寫在CSS上面讓你自行套用
讓你編寫網頁的時候就像點菜一樣！
我要這個跟這個，不管是哪個廚師甚至不進廚房的人都能端出一模模一樣樣的菜色！
可是過度使用就會像Bootstarp一樣讓HTML的長度大幅增加也讓閱讀跟管理難度增加！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191094,ModernWeb,0,JavaScript基礎二三事系列,6,Day06　JS是同步還是非同步?,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1512777928000000000,641,"今天來看看JS，非同步背後的原理，在課程影片中提到：
JavaScript是一個單執行緒、同步的程式，它逐行執行程式碼，並不會非同步的執行程式。
等等，同步?
JS的特色之一不就是非同步嗎?
繼續看下去：
　
撇開node.js先不說，JS在瀏覽器執行時依賴引擎來驅動，而瀏覽器不是只有JavaScript引擎的存在，還有其他引擎在處理瀏覽器的其他狀態、程式。有可以呈現東西到瀏覽器畫面上的渲染引擎(Rendering Engine)，也有其他專門處理http請求的東西存在。
　
JS引擎可以和瀏覽器的其他引擎、處理器互動，這個互動行為是非同步的，但JS引擎自己在運作JavaScript是同步的。如果有非同步的操作，那會發生什麼事呢?
JS引擎內的等待列稱為事件佇列Event Queue，如果有事件發生，如滑鼠點擊事件，JS引擎會先將事件放在事件佇列Event Queue，當執行環境的程式都執行完成後，JS才會開始注意事件佇列，此時檢查是否有函式被事件觸發，當有事件發生如點擊事件，它會創造執行環境給這個對應的函式執行。
JS在瀏覽器的非同步行為，其實是指將非同步事件放到事件佇列，而自己執行同步程式結束後，才處理事件。如果事件觸發函式，就創造執行環境給對應函式，所以說，當瀏覽器的其他引擎或處理器有事件、狀態發生並與JS引擎互動時，這些事件就會被註冊進事件佇列裡。
看看影片中的程式碼範例
說明：
function waitThreeSeconds()
呼叫它會在3秒後印出finished function
function clickHandler()
對應下面的document.addEventListener('click', clickHandler);
當瀏覽器監聽到點擊事件，執行clickHandler()，印出click event!
waitThreeSeconds();
呼叫函式waitThreeSeconds
console.log('finished execution');
印出finished execution
當在影片聽到function waitThreeSeconds()的3000 + new Date().getTime();3秒說明時，瞬間想了一下，為何這裡不使用常見的setTimeout來處理?
...下一秒瞬間回神，阿setTimeout也是非同步的(敲頭)，作者是簡化例子中的同步、非同步判斷，好讓觀眾能易懂，如此一來上述程式中只有click點擊事件是非同步的。
拉回來，當瀏覽器載入後，顯示印出的東西順序會是如何?
點擊事件印出的內容，有辦法比waitThreeSeconds(3秒後才印出東西)或最下面的console.log('finished execution')更早印出來嗎?
執行程式，在網頁載入後快速點擊頁面，結果為：

3是我猛按的結果，不要理這個數字...
說明：
在waitThreeSeconds()執行完成、全域的console.log('finished execution');也執行完成，點擊事件才執行其對應函式clickHandler()，因為JS會先把執行時期的同步程式都執行完，才處理事件。
也就是說執行時間太長的同步程式可以干擾非同步事件的處理時間，在開發時得注意這點。
　
　
　
小結
同步與非同步是JS中極為重要的一環，當初學習AJAX時，常在書上或聽人說JS會註冊非同步事件，向誰註冊呢?就是事件佇列Event Queue啦。
　
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分2-13、2-18",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191006,DataTechnology,1,MicrosoftBotFramework30天上手系列,3,WhyNode.js,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1512777896000000000,625,"開發botframework可以選擇c#或nodejs.
選nodejs的好處就是用javascript開發，
如果對javascript有一定熟悉度的話，
可以省去學習成本。
但Node.js
今年真的蠻困擾的，
例如 分支事件 (https://technews.tw/2017/09/07/node-js-leaders-fight-for-its-survival/)
node.js之父 公開說golang比nodejs好(https://www.mappingthejourney.com/single-post/2017/08/31/episode-8-interview-with-ryan-dahl-creator-of-nodejs/)
主要原因是 大家發現 Node.js 當網站訪問量大時，效能難以調挍等問題。
不過其實還是可以再雲上針對這些問題做一些優化，
例如: AWS 可以用cloudfront針對網頁做cache等設計,或是動態增生instance等.
But，我就是不想管更後端的事情，才會從nodejs開始啊!!!!!!
算了，不管，總之，
nodejs的生態系統完善，
幾乎要什麼有什麼!
而golang應該還有很長一段路要走。
所以，
還是先用nodejs吧!
而且在botframwork
https://github.com/Microsoft/BotBuilder
已經有提供許多相關範例，
大家可以參考使用。",,['因故重發'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191027,ModernWeb,3,前端工程師養成手冊系列,6,盡早培養「自主解決問題」的能力,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1512777735000000000,1152,"在講這個主題前，我要來分享個人經歷，在創立高雄前端社群後，常會有人敲我訊息說對前端有興趣，想瞭解要到什麼程度才有辦法滿足職場需求。
當然在業界久了，自然可以推薦一些學習資源與方向，也協助幾位朋友投入前端，但過沒幾個月，他們不約而同出現以下對話。
朋友A：「洧杰問你一下，主管要我研究前端的 xxx，但都沒有頭緒怎麼辦？」
我：「哦，這在網路上有蠻多教學資源的，有先搜尋嗎？」
朋友A：「有啊，但都好難....怎麼辦壓力好大」
朋友B：「老闆要我用一個 HTML5 JS API 搭配 Google Map 開發一個東西，你那裡有 CODE 可以參考嗎？」
我：「那段整合我沒碰過，你有看下 Github 有沒有相似的專案？」
朋友B：「你找比較快啦，之前都你提供資源給我的，給我個範例後面的我會再自己搞定啦 >”<」
我：「...囧」
此時才意識到自己反而害了他們，以前都習慣幫他們找適當的教學資源方便他們消化，但並沒有培養他們自行尋找學習資源，並內化成知識的能力。用常見的俗語就是「只給他們魚，但並沒有給他們釣竿」。
也因如此，在協助學生轉職前端時，我都會請他們做以下事項：
我在六角學院協助學生轉職前端時，當我覺得對方學到一個深度後，就會開始幫助對方去試著自主學習新語法。例如你會 HTML、CSS 基礎排版後，接下來就會請他去研究什麼是 transition，接著試著用 animation 設計一個動畫效果。如果是 JavaScript ，懂陣列、函數、物件操作後，就會再進一步投入中階語法以提升他們對程式的掌握度。
接著他們就會依照我前面章節提到的「如何有效率地 Google 尋找問題與解法」開始自主搜尋答案，畢竟我並不能幫學生培養搜尋關鍵字敏銳度，因為大腦是他自己的，我沒那麼強可以幫他的大腦升級。
在你吸收一個問題時，你該下什麼關鍵字可以找到最接近的答案，成功與失敗數千次後，大腦就會自動建立專屬於你自己的搜尋流程引擎，遇到問題時，直覺就知道到某個技術論壇會比你到 Google 大海撈針有效，或是印象曾經有在 youtube 找過豐富資源等等，當你這流程優化到個極致後，自然能幫助你在找問題能夠更聚焦地找出答案。
我在幫學生培訓時，也會出一些題目，讓學生們能夠培養「自主解決問題」的能力，並實作出前端功能提昇技術廣度，這裡也釋出部分題目，提供各位朋友參考與學習。
你需要有個認知，當你進入公司開發產品時，實作一個功能絕對會是很多個技術組合起來。舉例來說有個頁面要有好幾個時鐘，並即時顯示各時區的時分秒資訊。你可能知道 JavaScript 已經可以產生時間，但為了要顯示各時區，就還必須瞭解 UTC、GMT 是什麼，那些國家的時區要如何歸類，以及 JS 與 CSS 該如何控制，才有辦法做出一個動態時鐘出來。這在程式世界是家常便飯，因為你不是「學程式」，而是「設計程式做出人們可以用的服務」。
當主管在問你是否能實作出一個產品的重要功能時，你是否有辦法評估技術複雜性？
只知道七八成，其它兩成你完全沒聽過，不過曾經從網路或朋友得知早已有實作方案，自然當下回應這部分是可行。
只知道五成，另外五成你當下沒把握，雖然沒辦法即時回應主管是否能做到，所以告知給你兩三天研究，嘗試在最短的時間內做出一個最小可行性產品確保 ok，以回應主管這功能核心的技術都能達成，讓主管回應上層此技術的可行性。
如果是完全不懂的東西，主管只好給你個時限去研究，那你有沒有辦法將複雜的問題細分化，投入過程中瞭解自己距離目標還有多遠。假使如實交付，你能夠肯定自己，如果需要延期，也絕對不要拖到最後一天才告知主管，這樣他也沒辦法向客戶交代。
人在遇到未知會感到惶恐是理所當然，在程式世界上，更是家常便飯。所以會建議各位面對它，並善用番茄鐘來瞭解自己的投入狀況，當你將這個循環投入數百數千次後，自然就離資深工程路也不遠矣。
以前我在實作一個主管交辦的功能時，會在網路上搜尋各種教學，有時候我會發現某個東西就是我要的，不過還是需要改一些內容才能放在我的專案上，但卻搞了很久都弄不出來。我甚至會亂下一些語法，自己也不知道自己在幹嘛，只求其中一行程式碼可以動，我就可以準時下班。想當然爾最後都沒搞出來，只留一肚子鳥氣回家。
這問題也是出在於技術債欠得太多，明明這功能你會有兩三個核心原理必須先搞懂觀念，但是你視而不見，試圖硬改現成的 CODE 期待奇蹟發生，這本來就是很天真的想法。
欲速則不達，先找自己可以吸收的程式碼，等到觀念融會貫通後，做出自己想要的功能還不難嗎？
在我的前端生涯中， ctrl+c、ctrl+v 算是排名前五名的熱鍵，例如要引用別人的動畫效果、一段複雜的正規表達式不知道怎麼寫，於是上網找解法。你要瞭解任何事情都要自己從零寫到有，自然是不可能的事情。
例如我是後端工程師，因為專案都必須處理複雜的商業資料庫邏輯，但剛好前端缺人手，所以只好自己用 Bootstrap 框架處理前端問題，自己不用寫太多 CSS，也能夠排出堪用的版型。或是顧客想要一個比較炫的轉場效果，你沒有 idea，只好去 codepen 尋找靈感，並看是否有適合的效果。
工程師其中一個重要工作是在「整合」，一個中大型專案上絕對會是用了好幾個套件、部分邏輯不懂所以複製 stackflow 投票數高的程式碼，同時也包含你自己為產品寫的商業邏輯程式碼。
你也不用覺得一直複製貼上很丟臉，覺得自己沒做啥事，在持續複製貼上過程中也會貼出一種感覺，提升你對 CODE 的敏感度，但要記得自己是「有意識的貼上」，而不是死馬當活馬醫亂貼而完全不懂原理，如果程式碼有太多部分是你不懂的東西，最後專案爆炸的機會也會跟著變高。
在網路上找的東西不要全然相信，例如我常遇到學生請我 code review，發現一段程式碼是錯的，詢問他才得知那段 code 是複製某個部落格工程師上的 CODE。結果才發現因為程式版本變更，CODE 也跟著不兼容了。
也呼籲在搜尋問題時，都要抱有「持疑」的心態，吸收到的知識就大膽假設小心求證。寫程式沒有正確答案，今天可以跑的程式碼，明天瀏覽器版本可能就不能用了，你無法找出「最完美」的程式碼，但至少你能找出「當下適合情境」的程式碼。
以我上面的貼的題目連結，你會發現前端不單純是做網頁開發，現在的 JavaScript 可以做的事情相當多，那為了要培養解決問題的思維，就必須深耕自己的能力，很多人都會喜歡拿「投入一萬個小時才有辦法成為專家」的話來講，這裡我想說所謂個一萬的小時，不是你已經會的東西重複做一萬個小時，而是知道自己哪裡不足，刻意去補上你不懂的前端領域知識，除了提昇技術深度外，同時也在加強你遇到問題時解決問題的能力，如此一來遇到任何事情時都能依照自身的一套心法去解決問題。",,"['培養關鍵字搜尋的敏銳度', '評估技術複雜性', '先找出自己可以吸收的內容', '複製貼上是家常便飯', '判斷問題對錯，不要全盤盡信', '提升解决問題的思維和方法']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190996,SoftwareDevelopment,1,爬蟲始終來自於墮性系列,8,好想工作室與他的參賽者們,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512777723000000000,788,"這次好想工作室大概有二十多位夥伴參加鐵人賽，為此我們也拉了一個 slack channel 來討論和分享彼此的心得，除了互相取暖外，我們也互相激勵。比賽也進入了第六天，每天看看其他人發的文章狀況也就成了每個人的 daily mission，但每次都要打開十多個人的主題也是挺煩人的，既然有麻煩事，當個網頁工程師自幹個爬蟲也是挺理所當然的，那我們今天的任務就是寫個爬蟲來抓取所有工作是參賽者的狀況吧！
要看一位參賽主題，肯定要先有 url，而這個 url 會長這樣 https://ithelp.ithome.com.tw/users/20107159/ironman/1325 ，接著我們進去參賽主題的網頁就能看到一系列相關數字，這個任務看起來挺簡單的，在一個頁面就能得到所有資訊。
在這個頁面裡面，會有興趣的大概是以下幾項：

只需要一個 get request，那就不需要打開 postman 了，看來這個難度在於 dom 的選擇器上，我們必須在這個頁面裡面把我們需要的資選出來。用 dev tool 檢測一下參賽主題，發現他的 class 是 qa-list__title qa-list__title--ironman，看起來用的 class 都是具有辨識性的。

接下來再觀察一下其他的相關項目，每個都具有辨識性的 class，這樣很便利於我們抓取資料，看起來稍微複雜一點的大概會是在文章列表。那我們就直接使用 dev tool 的 console 來測試選擇看看這些物件吧。

文章列表的部分看起來會需要一個 loop 來抓取 class 為 qa-list profile-list ir-profile-list 的物件們，然後每個再去抓他們各自的文章相關資訊，來試試看能不能順利選擇文章列表。

接下來看文章的資訊，這邊比較特別一點，文章的 like、留言、瀏覽並不是有個別的 class name，而是一起使用 qa-condition__count class 來放這些數字，但我們應該可以用第幾個來辨識他們。
困難的都研究完了，接下來就像組裝積木把它組起來爾已。
首先我們先來寫個抓取單一 url 的 function，因為這個 function 會用到 request，所以肯定會是一個非同步的 function，因此，我們除了要給 url 外，還要傳個 callback 進去。
接下來我們用 cheerio 來模擬 jQuery 的選擇器去選取我們要抓的資料，最後將拿到的資訊傳到 callback 裡面，那麼 getInfo function 就完成了。
接著我們會需要一個 array 來裝所有參賽者的主題網址。
最後我們使用 async 的 map 來跑 ironmans，並讓 array 裡面的每個物件去呼叫剛剛寫的 getInfo function，這樣整體就完成了。
既然已經可以抓取資料了，那麼我們可以找個地方放，讓他變成是一個 api service，可以選擇放在 aws lambda、google function、heroku，那麼就可以讓其他人直接取得資訊加以應用了。
http://ironmans.goodideas-studio.com/
這邊是好想工作室所有參賽者的主題資訊，也歡迎各位點閱追蹤。","['定義目標', '實際探訪', '分解研究', '實作程式碼', '衍生應用']",,"['觀察頁面', '測試每個抓取的物件', '取得文章列表', '取得文章內容', '取得一個主題內容', '列表所有主題', '跑 loop', '完整程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191093,自我挑戰組,0,"Let's""Go""系列",3,Day03　InstallGo,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1512777232000000000,593,"本篇接續上一篇提到的安裝過程，給予一個詳細的操作流程
從官網下載安裝檔",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191089,自我挑戰組,0,數位遊牧民族（DigitalNomad）系列,5,第五天-尋找coworkingspace或cafeshop之二,alincode,https://ithelp.ithome.com.tw/users/20092025/ironman,1512777101000000000,570,"繼上次推薦的找優質工作地點的 app 後，從其他 DN 得知另一個類似的 app 叫 WHA，大家也可以玩玩看。
WHA by Work Hard Anywhere - WiFi Cafes and Spaces",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191092,ModernWeb,1,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,5,Wireframe,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1512777054000000000,590,"前面三個階段是在確定產品的功能，一旦產品的核心不會有太大變動之後，就可以開始做畫面設計，這邊也是有三個階段- wireframing, mockup, prototyping.
Wireframe 中文叫線框稿，依精細度從粗糙的低擬真到詳細的高擬真，wireframe 也不可能一次到位，一定會反覆修改，所以一開始不用想得完美，再度拿出紙筆把你心目中的畫面畫在紙上，記住只要用一種顏色就好，頂多用其他顏色做註解，每一個功能畫一系列的 wireframe，然後和同事主管討論可行性。依照回饋修改 wireframe，增加其真實度。
當要設計畫面細節時，就可以使用電腦軟體如 Photoshop, Illustrator等等，我是用 Sketch，該軟體有附帶 iOS 及 Material Design 的 UI template，我只需要複製我要的元件到頁面上就可以了。網路上也有許多類似的 template 素材。
這邊提供一些製作 wireframe 的關鍵點：",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191079,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,4,【Day4】第一個UnitTest,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1512776168000000000,583,"今天要開始簡單的入門Unit Test，範例於書本第二章（參考第一天的書籍）。
這邊我們有一個功能，判斷取得的檔案是log檔。而我們要如何判斷是log檔呢？最簡單的方式就是判斷他的附檔名，也就是.log作為結尾。所以我們來判斷檔案是否為.log，如果不是的話就表示錯誤。
所以我們測試內容就是「判斷是否為log檔」這個功能是可以正常運作，因此我們要準備兩個測試條件，一個是正確的副檔名，我們預期它會回傳true；同樣的，我們準備一個錯誤的附檔名，我們期望他會回傳false。
以上兩個檔案寫完後，就是進行測試囉！
點擊 執行，然後點擊 所有測試，就會自動啟動測試工具，進行Unit Test。
當回報顯示成功（亮綠燈），表示這個功能通過測試，恭喜！！

明天將會說明測試內容，以及這個範例的精神",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191077,DevOps,0,大型敏捷專案的DevOps系列,3,[鐵人賽Day3]簡單介紹微軟給工程師的Scrum「教戰守則」,AkitoSun,https://ithelp.ithome.com.tw/users/20094400/ironman,1512776073000000000,577,"在這篇，我的目標是介紹微軟的Scrum原則，還不會介紹到DevOps的實作，對於已經對Scrum已經很了解的人，這篇文章或許對於你來說可能只是小菜一疊，但我想我能在之後幾篇分享以下幾點問題(這篇會來不及介紹到，但以下幾個問題我想在之後幾篇分享給各位)
在一開始，我想先介紹一下微軟執行Scrum的教戰守則
執行專案的方式有千百種方式，同樣都是Scrum，可能每間有導入的企業運行的方式也不太一樣，微軟在實作Scrum時，有列出以下的基本原則必須要遵守
簡單的介紹先介紹到這邊，雖然前面要花比較多的時間再辛苦講DevOps無關的東西，但我希望能夠傳達到，DevOps並不只是一個技術，他是一個企業的文化、一個開發的方法，所以我想多花點時間在前面講這些基礎",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191086,AI&MachineLearning,1,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,5,05.BotFramework應用:Slack機器人,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1512775821000000000,555,"使用 MS Bot Framework 迷人之處，就是可以整合多種不同的通訊軟體，雖然只要通訊軟體系統有提供 API ，工程師們能嘗試進行介接，但透過設定的方式可以讓我們省了不少工夫。如 Microsoft 自家的 Skype，幾乎是無痛銜接，相當方便。
這一篇文章將簡單介紹如何新增 Bot 到您的 Slack。
Step 1. 開啟 https://api.slack.com/applications/new ，並登入您的 Slack 帳號 → 點選 Create an App

Step 2. 輸入 App Name 與出現的環境

Step 3. 選擇 OAuth & Permission → Add  a new Redirect URL → 輸入網址：https://slack.botframework.com → Add → Save URL

Step 4. 選擇 Bot User → Add a Bot User → Add Bot User


Step 5.  接下來，點選 Event Subscriptions → Enable Event 的開關打開 → 輸入網址https://slack.botframework.com/api/Events/{BotHandle}，這個 BotHandle 值，是在機器人註冊網頁內的 setting，可以找到。


Step 6. 往下拉找到 Subscribe to Bot Event 這一欄 → 點選 Add Bot User Event，選擇加入：
完成後，點選 Save Change


Step 7.  點選 Basic Information，這邊有些資訊我們會用到

Step 1. 開啟機器人設定畫面 → Channels → Slack

Step 2. 輸入相關資訊 → Save ，即完成我們的設定工作。

Step 3. 選擇 Authorize

Step 4.  左下角APP 部分點選 + 的按鈕

Step 5. 選擇您的機器人

Step 6. 與你的機器人互動 :)
","['前言', 'Slack 設置', 'Bot 設置', '參考資料']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191087,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,5,[Round5]喜歡、不喜歡，dochi?,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1512775735000000000,550,"可惡，越整理越想補齊，連續一個禮拜的挑戰賽補完分類與機制會被揍嗎...
使用 BGG填寫以下表格時，有幾點可以注意一下:",,['喜歡的遊戲'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191085,自我挑戰組,1,30天的切版日記系列,5,Day5:預覽效果,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1512774523000000000,582,"今天來做一個即時預覽的效果。
使用html5 blob 、iframe
demo
demo裡面的聖誕卡是codepen上找到的這個
demo中按下按鈕就會執行github gist裡面嵌入的內容。
步驟 1 ：建立
步驟 2 :  html、css字符串轉為blob
步驟 3 ：用URL.createObjectURL() 將blob轉為URL並給src屬性
這個要用在哪裡...大概是在網頁中內容想穿插一個即時的效果展示，但又不想因此多新增一頁的時候。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191072,ModernWeb,0,Confluence線上協同作業之平台系列,4,plugin的市場,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1512773446000000000,567,"有時候可以把confluence想像成windows的作業系統，而有很多的軟體公司會開發各自的軟體，也包含著微軟自家的軟體，來安裝在Windows的作業系統上，也因為windows有多個版本，從一開始的windows3.1,windows95,windows98,windowsme,windowsxp,windows2000,.....一直到現在的win8,win10等作業系統，當我們要將軟體安裝在作業系統上的時候，就需要確認此軟體支援那些作業系統及需要哪些的執行環境，例如它可能需要framework4.0以上才可以執行；同樣的confluence也有多個版本，例如我剛開始接觸的4.1.2，5.8.2及目前最新的版本6點多的版本，而它也有很多plugin在support它的功能，當然每個plugin有其所支援的版本，也因為他有這樣的特性，當我對某個問題遇到無法解決的時候，在plugin的store中可以碰碰運氣(官方位址在https://marketplace.atlassian.com ，而我是把它當成一個軟體市場，裏頭有各家各式的功能，端看您找軟體的的關鍵字應用來找出您想要的)，看看有沒有找到類似的plugin或是它對應的support服務，或許可透過這樣的方式來解決我工作上所遇到的問題。
我以我曾經遇過的幾個情況來整理分享，例如要如何在confluence建立投票系統來給使用者使用呢？而通常第一個反應會是輸入關鍵字：survey or feedback，結果有找到一個Multivote for Confluence的plugin (https://marketplace.atlassian.com/plugins/com.tngtech.confluence.plugin.multivote/server/overview)，也可以看出此PLUGIN所支援的版本、是否需要費用、有哪家公司來開發.....等資訊。

而這之間當我看到免費的plugin，當下第一個反應會覺得開心，但當我看到下列的幾個地方，更讓我可以用興奮來形容，其一是線上討論區，而如果您發現最近的幾篇討論日期在最近1-2個月內，或許可以推論此PLUGIN有一定的使用者及support團隊在維護

而當您在support頁籤下有看到Email vendor / Submit a support request這樣的字眼時，這簡直就是棒透了，只要跟投票有關的應用，像是page的評比應用 (給幾個燈來判斷這篇文章的火紅程度)，雖然不一定有答案，當我一定會試的寄信給元件作者，或是開個ticket來追問下去，這樣免費可以問得資源得來不易，需要妥善地來應用，而如果有所回應且有不一樣收穫的時候，只能說是自己賺到了，這個服務我是強力推薦的。

而至於開發元件的公司，則是可以看出這家公司有哪些的PLUGIN可以使用，以TNG Technology Consulting GmbH來說，則是有下列的plugin可以研究，而我們可以善用每家plugin對應的support email，或許我們可以透過這樣的聯繫
問到額外的應用資源來幫助自己更加成長
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191081,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,4,(Day4)重要物件DataFrame說明,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1512772922000000000,604,"Data Frame是一個特殊的變數類型，跟矩陣類似，用以存放類似Excel表格資料，常用來當大量資料集；匯出檔案與讀取資料庫之用．
不過，跟矩陣不同的是，Data Frame每個欄位可用來存放不同變數類型的資料．也可搭配其他物件如向量等．
以下列程式碼為例：
第1~3行:直接使用c函數給定字元向量
第4行:
-用<-給定data 是一個data.frame
-用既有的letters指定字元常數 (詳見?letters或?LETTERS)
-直接給定欄名為cletters 最後一欄給定為NO
-用View來檢視物件(注意: V大寫)
得出結果為:

欄位提示:

結果:

head：取得資料框架前六比資料(預設是 6)。
names：修改或查詢 column 名稱。
colnames：設定 column 名稱。
row.names：修改或查詢 row 名稱。
rownames：設定 row 的名稱
summary：顯示資料基本資訊。

df架構: 共計9列5欄

DataFrame這部分，用處極廣。需要好好多確認跟習作。
針對DataFrame的異動部分，後面有專章會陳述!
R 教學- G. T. Wang
資料科學與R語言",,"['建立Data Frame', '透過指標與名稱提取資料', 'Data Frame 基本相關函數', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191080,自我挑戰組,0,Vuex學習筆記系列,3,[Vue.js]Vuex學習筆記(3)-簡單應用,NomiSu,https://ithelp.ithome.com.tw/users/20107601/ironman,1512772572000000000,618,"當我們用 vue-cli 建立好專案後，我們在 src/main.js 內修改程式碼：
建立好後打開瀏覽器的DevTools，可以在 Console中查看到數據的變化，這樣一個簡單的 Vuex 應用就實現了

雖然這樣的方式仍然可以修改，但非常不建議這樣使用，不通過 mutation 來改變 state ，狀態不會被同步。
由於 store 中的 state 是響應式的，在組件中調用 store 中的狀態僅需要在 computed 屬性中返回即可。觸發變化也僅僅是在組件的 methods 中提交 mutation。
這邊 Vue 官方提供了一個計數範例，參考一下就可以知道 Vuex 的運作方式。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191021,ModernWeb,1,TypeScript-初學之路系列,2,Day02-變數,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512772208000000000,579,"每一種程式語言的第一步都是從宣告變數開始
但是 TypeScript 其實最後編譯結果還是 Javascript
我們還是以 Javascript 的宣告變數基礎來談談
而類型控制之後再說吧
let 和 const 是兩種 Javascript 新的宣告方式， let 和 var 比較類似
const 則是定義之後禁止之後修改(常數)
TypeScript 也有提供 let 和 const 的宣告方式，下個部分將會解釋為什麼會推薦使用 let 和 const
在 Javascript 中宣告一個變數常用的方式是
在上面的例子之中，你宣告了一個變數 a 為 10
你也可以再 Function 中宣告
也可以允許相同的變數在不同的 Function scope
在上方的範例中 g() 中可以取得變數 a 得值
使用 var 宣告會有一些區域的規則問題
因為 var 是在 if裡面，所以當 shouldInitialize 是 false 的話就部會執行 if裡面的程式碼
所以 x 並未宣告過，就會造成 undefined
而結果是 undefined 的原因是 Javascript 的特性
當 Javascript 執行程式之前會先將所有使用的變數宣告為 undefined
來佔住記憶體空間
如上述範例中 真正在 Javascript 執行的結果應該是
所以當我們在宣告 f 之前執行的話就會得到一個錯誤訊息
f is undefined not a  funciton
這個規則可能會造成壹些不同種類型的錯誤，其中一種就是當你重複宣告同樣名稱的變數的時候彼此會互相覆蓋
上述範例就可以發現因為 i 變數在雙迴圈中會被互相覆蓋造成程式執行上的錯誤，不會依據我們預想的去執行
但是結過卻是
但是我們希望的是
因為每次呼叫 setTimeout 會延遲一段時間後才開始執行 Function但是迴圈會不斷覆蓋掉 i 這個變數，而在延遲時間之後呼叫到的 i 則是最後覆蓋成 10 的 i
最常見要解決這件事情的方式如下
這個看起來有點奇怪的解決方式在 javascript 中卻是常見解決這個問題的方式
現在你已經知道 var 會有一些問題，所以會有一些問題，所以為什麼需要介紹 let.let 和 var 的使用方式依樣
使用 let 宣告的時候，它的作用域市 blocking-scope。和 var 宣告的作用域不一樣，他是用大括號來做區隔
上述範例中有 a 和 b 兩個變數， a 的變數範圍在整個 f() Function 之中，而 b 只會存在 if之中
而變數使用 try catch 宣告的範例如下
另外一個很重要的 blocking-scope 變數不能在宣告之前做任何動作
在 TypeScript 中對這樣的提前宣告較為寬鬆，你需要使用 try catch 來取得錯誤訊息
若是沒有使用 try catch TypeScrtip 並不會顯示這個訊息，若是在 ES2015 則會顯示這個錯誤訊息
若是使用 var 的方式來宣告的話，他不會在意你宣告過幾次
使用 let 宣告在同一個 scope 中只能宣告一次
只要是在不同的 blocking-scope 就可以做同名的宣告
宣告一個新的名稱在另外一個內嵌的 block-scoping 這個行為叫做 shadowing，但是這樣的行為會造成一些 bugs
例如：
shadowing 在攥寫程式碼的時候應該要避免的狀況之一
當我們在一個作用域中宣告一個變數與 Function ，而 Function 也是其中一個作用域，在這個 Function 使用已宣告的變數的時候，即使脫離了那個作用域，也是依舊可以使用該變數
因為 city 雖然是在 if 的作用域宣告的，但是可以透過 Function 記住他的指標即使脫離作用域之後也可以透過該 Function 做呼叫使用
回憶之前 setTimeout 的範例， let 有相當大程度的不同
結果為
const 是另外一種不同的宣告
雖然看起來跟 let 宣告一樣，雖然他們有相同的 block-scoping 規則，但是還是有些不同
const 宣告的變數是 immutable 的
除非你要整個複寫整個物件，否則還是可以修改參數值得，
也就是此物件性質為 唯讀 的，詳情參閱
為什麼需要兩個不同的語意卻擁有相同的 block-scoping 的宣告方式呢？
基於 最小權限原則
若之後變數都不需要修改或是物件僅僅提供修改參數的權限時，則使用 const，換句話說若是變數之後有可能會被覆寫則使用 let 來宣告",['變數'],['宣告變數'],"['Var 宣告', '為什麼不要使用 Var', '奇怪的問題', 'Const 和 Let', 'Block-scoped variable capturing', 'let vs. const']","['Hoisting', 'let', 'const']","['Block-scoping', '重複宣告和 shadowing']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191075,自我挑戰組,0,迷路還是繼續往前走的菜鳥工程師日常系列,4,[Day04]菜鳥初入社會第一次求職經驗,overflow,https://ithelp.ithome.com.tw/users/20107577/ironman,1512772135000000000,631,"今天就來介紹一些我第一次求職的狀況吧！
首先在這之前我完全分不清楚什麼是前端、後端，他們分別在做什麼事情，我其實也不懂，以為做一個網站就是包含版面程式，反正看到Keyword關於網站，我就通通投了，在履歷就只放上大學ASP.NET的學習成果作業和Java視窗程式設計專題的畫面，甚至自傳還很87分的以為是要相親自我介紹的內容。
當時自傳範例
天吶～到底哪來的勇氣寫這種87自傳去面試，你是不是也很想笑
結果總共有大概有4家公司有消息，但我什麼專業問題都沒有準備，以為跟面試服務業一樣，就去大家聊聊天打個招呼，就可以了XD(大概都是後端的職缺)
先打來簡單詢問一下問題，說避免浪費雙方寶貴的時間，但之後就沒下文了。
面試改了2~3次時間，我就直接拒絕了。(什麼都不會還敢拒絕寶貴的機會XD)
面試就像我講的以為是面試服務業一樣聊聊天，看看我這個人O不OK，面談過程重點放在看你排不排斥寫程式拉，而且也沒有考試，完全就是如果你不排斥寫程式也願意來上班，那就從頭教你也沒關係。（當時心想這會不會是個雷
一進去先是寫考卷，下面是我印象的考卷內容，主要專注在SQL的部分
寫完考卷，一次來了3位，分別是主管、人資、工程師，馬上嚇到屁股尿流，想說也太大陣仗。面試過程中，就請我打開我做的網站做一點介紹，你做了什麼，用了什麼技術(O.S. 我整個傻住！然後我一臉87樣就亂講一通)，不過講完可以看到對面三個面試官，面有難色，後面就開始放棄狀態但還是看一下這個新鮮人可以多新所以還是亂聊，人資當然就一堆狀況題，「你怎麼面對你的困難」「如果今天要交付專案你生不出來要如何應對」......，主管則表示「你什麼都沒準備就來面試嗎？」，我說我也不知道要準備什麼，總要面試過才知道會發生什麼事......，還好當時他沒很用力洗我臉
這就是我第一次面試的經驗......",,,,"['A公司', 'B公司', 'C公司', 'D公司']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191076,ModernWeb,0,TypeScript初學之路系列,5,Day05-TypeScriptwithGulp,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512771833000000000,595,"此篇是使用 TypeScript 和 Gulp 並且利用 Gulp 的 pipeline增加 Browserify
uglify 或 watchify 以及 Babelify等等功能
在此範例中建立一個資料夾  proj 但是你可以建立一個你希望的名字的資料夾
先簡單建立資料結構
在 src 中建立一個新的 main.ts
在 proj 中建立一個 tsconfig.json
建立一個 gulpfile.js
建立一個新的檔案 src/greet.ts
然後再修改 src/main.ts
最後再修改 tsconfig.json 將 src/greet.ts 加入編譯
然後就可以看到編譯後執行的結果
Note: 雖然我們使用 ES2015 但是 TypeScript 使用 commonJS 模組，但是你也可以在 options 中設定 module 來改變它
我們開始寫前端的程式
我們希望可以把所有 modules 打包到一個 Javascript 檔案
而這些事情就是 browserify 所做的事情，而這會使用到 CommonJS 模組，而這也正好是 TypeScript 預設使用的，也就是我們可以在 TypeScript 直接使用 browserify
先安裝 browserify, tsify, vinyl-source-stream
tsify 是 browserify 的 plugin 做的事情就像是 gulp-typescript 一樣，而vinyl-source-stream 則是提供一種方便我們了解的檔案輸出格式
在 src 中建立一個 index.html 的檔案
然後修改 main.ts
接著再修改 gulpfile.js
增加一個 copy-html 的task 並且將其加入在 default 的 task中，也就是代表當 default執行的時候會先執行 copy-html 並且也修改 default 的 function 加入呼叫 Browserify 和 tsify 的 plugin，將 tsify 取代 gulp-typescript 也丟入一些參數在 Browserify 之中, 在 bundle 之後 再利用 vinyl-source-stream 輸出檔案 bundle.js
然後我們可以執行之後再用瀏覽器開啟 dist/index.html來觀看結果
Note: 設定 debug: true 是因為 在打包成為一個檔案之後， SourceMap 可以對照你打包後的檔案，當你發生錯誤的時候，就可以找到相關錯誤位置，提高 debug 的效率
現在我們已經有 tsify, browserify 我們還可以再加入一些套件
Watcherify 利用 gulp 啟動，可以保證程式持續執行，並且在修改後同步修改重啟，你的瀏覽器也可以立即 refresh 觀看結果
Babel 是一個大型並且彈性的編譯 Lib 可以將 ES2015 轉回 ES5 和 ES3，可以自行增加擴充編譯套件，而這些是 typescript 沒有支援的
Uglify 則是將你的程式最小化，讓你下載的時間可以大大減少下載的時間
安裝 watchify和 gulp-util
再修改 gulpfile.js
gulpfile.js做了三個改變
綜合以上 1, 2 的步驟我們將 browserify 移出了 default task 放到了 function bundle裡然後透過 監聽 update 的 Event 來隨時重新編譯程式
而 3 則是會列印出過程的訊息方便我們開發程式的時候查閱
然後我們開始啟動則會看到下方的訊息
並且當你修改 main.ts 時會自動重新編譯
也就是當你重新 refresh 網頁的時候
就可以看到最新的更新狀態
因為 Uglify 會打亂你的程式碼
所以需要安裝 vinyl-buffer 和 gulp-sourcemaps 讓 sourcemaps 持續動作
gulpfile.js修改為
`Note: Uglify 只需要做一次
buffer和 sourcemaps 會產生一個獨立的檔案 bundle.map.js
你也可以確認 bundle.js 中的程式是不是已經最小化了`",['Gulp'],['Minimal project'],"['初始化', '安裝相關的套件', 'Example']","['測試 App', '增加模組', '執行', 'Browserify', 'watchify, Babel and Uglify', 'Uglify']",['Watcher'],,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191063,SoftwareDevelopment,0,30天iOSAPP開發系列,3,[Day03]UI更新,d3764291,https://ithelp.ithome.com.tw/users/20107588/ironman,1512770251000000000,601,"點選ViewController.swift，若有要更新ＵＩ的程式碼碼寫在這邊即可。

預計程式流程如下：使用者按下按鈕->呼叫按鈕的function(@IBAction func change())->若按下送出則呼叫改變label的function(func changeLabel())。
建立一個變數用來控制畫面中的label，但此時該變數尚未與實際畫面中的label連結
變數與實際畫面元件連結請參閱最後一段
利用alertController建立一個彈出視窗，並且新增兩個UIAlertAction分別為取消及送出
其中UIAlertAction的handler為按下後要呼叫的function
將變數label與實際元件連結
可以選擇在Xcode中右上方的兩個小圈圈，將畫面分割為左右兩邊，並且將另一編設為Main.storyboard

在@IBOutlet weak var labelTitle: UILabel!的左方有一個空心的圈圈，拉住該圈圈至想要連結的label即可

同上，要將IBAction連結至畫面中的按鈕，連結後按下按鈕即可執行該function

(不知為何轉成GIF一直失敗...只好放上youtube連結)
成果影片
UI變更
新增提示框
IBOutlet and IBAction",['參考資料'],['實際成果'],"['第一步', '建立一個label變數', '建立一個按鈕按下後的function', '建立changeLabel()', '連結IBOutlet', '連結IBAction', '最終程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191045,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,5,"[Day5]CSSAnimation,讓網頁動起來",dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1512769545000000000,613,"CSS Animation(動畫)可以讓你的HTML區塊增加動畫. Animation 可以讓你的網站更有互動, 會讓你的網頁更屌, 像這樣.

但是你不會css animation不用怕, 哥教你. CSS Animation 有三種 transition, transform, 跟keyframe.
順便分享一下, 這兩個很屌的網站的動畫是用css animation 處理的. 連結1 連結2
Transition 可以讓你改變屬性在一個時間內. 廢話少說, 馬上來看例子. 以下的例子就是當滑鼠hover 過去的時候 width 這個屬性會從100px 變 300px, 然後持續時間是2s. CSS transition 我認為是最簡單的animation. 比較常在用的時候是用在button上, 當使用者hover 的時候執行一些animation.
Transform 可以讓你改變, 轉動, 調正大小, 歪斜你的元件. Transform 有這些方法可以用
這是個skew 的例子.

keyframe 是css 動畫的時間軸. 我們可以結合transition跟transform然後用keyframe然決定執行的時間. 那我們馬上來看個範例, codepen sunrise. 這是我用css animation 做出一個日出.
這整個動畫我定義兩個animation: sunmotion, cycleskycolors. sunmotion 來管理太陽的位子, 然後再 0%, 25%, 50%, 100%在不一樣的位子. cycleskycolors來管理天空的顏色,在不同時刻顯示黑,粉紅, 藍.",,"['transition', 'transform', 'keyframe', '參考連結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191066,自我挑戰組,0,ArasPLM開發練功30天系列,5,[Day5]RelationShips-寫一個簡單的表單關聯頁籤檢查,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1512769538000000000,570,"到了第5天，我想應該正式來提升程式難度，看得越多範例程式碼，才能體會出Aras真正的好處。
就讓我先新增 Work Order，並且在下方的Part頁籤Create Related的方式建立4筆資料。

然後在work order的ItemType Server Event新增事件

程式碼內容

Aras中，關聯表會自動產生source_id去記錄父親物件ID，related_id則記住子階物件或關聯物件。
因此程式上先用source_id條件篩選與此物件ID相同的關聯表物件，再來用迴圈執行自己所需要的功能，如驗證、修改資料等等，還有一個重點，關聯物件剛新增的時候，是不存在於資料庫上的，所以把程式放到onBeforeUpdate會讀取不到關聯表(此時還未建立)，初學者可以自行嘗試看看。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190784,自我挑戰組,0,iflen(learning.python)==30:系列,5,Day5-List-常用方式,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1512767907000000000,582,"利用set的元素不能重複的性質
利用移除重複資料和count的方式計算list中資料出現的次數",,"['list和其他資料型態的轉換', '移除重複資料', '計算資料出現數量', '參考']","['list <-> string', 'list <-> tuple', 'list <-> set', 'list <-> dict']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191024,SoftwareDevelopment,2,爬蟲始終來自於墮性系列,7,小插曲#2-www-form-urlencoded的space,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512767502000000000,669,"小魚今天在聊天室裡面提到，希望爬一下台彩的銷售地點那一頁，我就花了點時間去爬了一下。直接先講結論，過幾天再補上一篇文章針對這個主題，基本上爬取是成功的，不過要用 source 的 data string 去送 post，因為在 application/x-www-form-urlencoded 的時候空白會變成加(+)號，但 postman 會把它變成 %20，而台彩的網頁的鄉鎮市區後面竟然多了兩個空白。

然後再解決這個的過程當中，發現了一個好東西
https://curl.trillworks.com/#node
他能直接把 chrome 發出去的 request 變成 node 程式碼，這樣一來又大大的提升我們開發的便利性了。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191059,自我挑戰組,1,用laravel尻出自己形狀的linebot，還要撐三十天！系列,3,【第三天】今天星期五，就來說故事吧！,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1512766479000000000,672,"【第三天】今天星期五，就說故事吧！
來說說我打算要做些什麼好了。
我打算做一個可以通知我今天我追蹤的＿＿出新一集的功能！
這個＿＿可以是巴哈動漫、可以是日劇、可以是我持續追了十年UP的海賊王！
但不能是追了十天的某臉書女孩，這樣會被雞鴨！
今天也聽說到有些線上交易所有開出API，所以...好像簡單的小理財也可以做到！
所以理所當然的，我們除了做對話機器人，勢必還要做一個簡單的小爬蟲！
但要怎麼做我也還沒有頭緒！就等明後天假日再來看看吧！
好了，今天分享到這邊結束，謝謝大家的瀏覽，我們明日再來！
今天就來說說一些專案配置的基礎建設好了
其實這塊東西我也是進到現在的公司才開始接觸，如果理解沒錯誤的話就是大家常說的CI/CD。
到底什麼是CI/CD咧？
就是可以讓你自動化部署和建置的機制，最早我們一開始接觸的寫程式和FileZilla就是很單純的把東西放到伺服器上，然後再開啟瀏覽器確定他有沒有正常執行，當你的網頁只有少少的三頁，這樣手動部署和測試看起來很妥！但當你今天變成一百種頁面，兩百種可能性，三百壯士的時候，你就會起笑了！
一天的工作都浪費在測試和部署身上，所以說～這時候就可以試試看TravisCI了！當然，自己也要養成寫測試的習慣！
以上是我自己的個人見解啦～接不接受是另外一回事，真愛並非不來，他只是被無預警地惡意的延遲！
如果您有什麼不一樣的看法歡迎在下面分享喔！
網路上也有許多比我介紹更詳細的文章，在這裡我推薦一系列文章，我覺得很詳細且內容好理解的三十天課程！
那麼我們三十天後再進入Day4囉！
PSR是什麼咧？我也是在找第三份工作才聽到有面試官願意跟我這菜比八分享這個機制的！實在太佛啦～
對！你沒猜錯，我24歲，當完兵出社會剛滿一年，單身，人很好，老家在新竹，現在台北流浪，要不要加個賴。
但老實說我也不記得到底詳細內容有哪些，大家就自己看官網連結吧！
我記得好像在春秋戰國時期，各種勢力互相角力，有一群自詡為PSR的戰士眼看這天下民不聊生、雜草亂生、宵小大聲的，就決定為這天下貢獻一份心力，制定一系列的標準來maintain這天下！
以上都是我某一天夢到的，這個天下可以把它當成PHP就是了。
針對上面提到的PSR，那有什麼套件可以幫忙讓自己的程式碼跟大家一樣呢？跟韓國人整形一樣呢？
這邊推薦幾個
看看那些精彩的安裝數量，我想就不需多說了吧！
安裝完後看看文件，然後就在專案根目錄底下輸入這些吧！
然後遵守他說的話去做調整就對了～
後面兩個套件好像在安裝laravel就會一起裝上了，都是拿來寫測試很好用的工具！
faker可以無腦產出隨機的假資料
mockery可以把你想做假的function給mock起來(各種呼叫外部API之類的不可控份子)
為了讓第一點提到的TraviCI可以發揮得淋漓盡致，所以我們一定要把測試寫好啊！這對你對我對天下蒼生都是很正確的道路啊！
好吧～今天是星期五所以就到此為止囉！送大家一首歌，週末愉快！
",['【第三天】今天星期五，就說故事吧！'],"['TravisCI', 'PSR', '還有一些開發用的套件']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191061,自我挑戰組,0,D3.JS網頁視覺化學習系列,5,Day5圖表簡介-圓餅圖（程式）,linonedollar,https://ithelp.ithome.com.tw/users/20107135/ironman,1512765347000000000,602,"今天來把昨天學到的圓餅圖來寫一個程式看看
上網找了一下適合的素材如下圖

那找好了屬性之後我們就開始撰寫程式碼吧！
第一步，跟前天一樣先在網頁上建立一個畫布
第二步，讓我們從0~360根據不同比例做出區塊分別
第三步，建立一個弧產生器，讓我們來當作我們圓圈的內外形狀
第四步，把我們的圓餅著色，並且給與他們外骨架的屬性
完成圖
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191054,自我挑戰組,0,資訊技術解戈迪安繩結系列,1,IT｜軟體｜分散式運算｜Hadoop介紹,ntausr4,https://ithelp.ithome.com.tw/users/20107621/ironman,1512764476000000000,610,"Hadoop 介紹資料
Hadoop 2.x和1.x已經大不相同了，應該說對於存儲計算都更加通用了。Hadoop 2.x實現了用來管理集群資源的YARN框架，可以面向任何需要使用基於HDFS存儲來計算的需要，當然MapReduce現在已經作為外圍的插件式的計算框架，你可以根據需要開發或者選擇合適的計算框架。目前，貌似對MapReduce支持還是比較好的，畢竟MapReduce框架已經還算成熟。其他一些基於YARN框架的標準也在開發中。
YARN框架的核心是資源的管理和分配調度，它比Hadoop 1.x中的資源分配的粒度更細了，也更加靈活了，它的前景應該不錯。由於極大地靈活性，所以在使用過程中由於這些配置的靈活性，可能使用的難度也加大了一些。另外，我個人覺得，YARN畢竟還在發展之中，也有很多不成熟的地方，各種問題頻頻出現，資料也相對較少，官方文檔有時更新也不是很及時，如果我選擇做海量數據處理，可能YARN還不能滿足生產環境的需要。如果完全使用MapReduce來做計算，還是選擇相對更加成熟的Hadoop 1.x版本用於生產環境。
MapReduce 概念
數錢幣故事來解釋MapReduce
MapReduce的基本概念其實不難懂，用一個真實的數錢幣故事來解釋。有位企業主為了刁難銀行，用50元硬幣和10元硬幣償還316萬元的貸款，數萬枚硬幣重達1公噸，還得找來吊車才能送到銀行，幾位行員七手八腳花了好幾個小時才清點完畢。銀行只要不斷加派人手，就能縮短清點時間，例如能立即找到100個人手，10分鐘內就能完成，不會影響到正常銀行運作。
就像這個不斷加派人手來清點錢幣的做法一樣，MapReduce可以不斷增加更多伺服器來提高運算能力，增加可承載的運算量。透過Map程式將資料切割成不相關的區塊，分配給大量電腦處理，再透過Reduce程式將結果彙整，輸出開發者需要的結果。
1.Map程式將資料切割成不相關的區塊，分配給大量電腦處理
2.透過Reduce程式將結果彙整
網路資源
Hadoop Map Reduce 程式設計(內含 Eclipse plugin 整合 p37 )",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190949,自我挑戰組,0,如何用電商一個月從0賺到100萬系列,4,day4.申請個粉絲團來幹大事,ocom,https://ithelp.ithome.com.tw/users/20107558/ironman,1512764176000000000,1040,"操他媽！每天都能在這個it鐵人賽氣爆，我要改個密碼點下去給我出現“Whoops, looks like something went wrong.”幹，真他媽的諷刺，一個以寫code為主題的比賽，網站能夠出現這麼多錯誤跟違反人性的問題，真他媽的飽了。
算了！反正你們老闆能接受這種的就好。
有產品有頁面，再來就是要申請個粉絲團，在台灣沒個粉絲團都不要說你在做電商的，粉絲團是用來幹嘛的，用來賺信任感的，跟紅利點數一樣，讓客人買東西不會怕，你說什麼他就買什麼，有信任感他們超乖的，你媽的，現在在台灣做電商沒幾隻貓在專心經營粉絲團，有經營粉絲團的都是大咖，小咖都賺快錢，頂你個肺肺，市場都被大陸詐騙集團還有爛電商搞爛了，操。
對了昨天那篇，有人留言說只能給我一個X，操，我也只能給你ＸＸＸＸＸＸＸ，不爽滾留個屁言
還有人留言是神串，大師等等..我只能說你真內行
不打嘴砲只打真砲，申請個很屌的粉絲團，名字記得住就好，但你千萬不要取什麼XX家居、ＸＸ精品，不是不好是碰杜短命的大陸詐騙集團，都取差不多這樣的名字，最好離他們遠一點，重點是記得住就是好貓。
我一般喜歡「顏色＋動物」或是「動作＋動物」，為什麼是動物，幹！關你屁事。
藍色雞巴毛，甩牆垂頭鳥，嗯嗯不錯不錯！方便畫吉祥物，人家好記住！單押
你問我說我的粉絲團叫什麼名字，你頭腦有病吧，你以為我會跟你說，就跟你說這一切都是假的，他媽的欠罵，不爽Ｘ我啊，滾。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191062,ModernWeb,0,PHPlaravel的邂逅系列,5,DAY05-laravel架構介紹,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1512763655000000000,617,,['DAY05-laravel架構介紹'],,,"['今天先來介紹laravel的目錄架構，讓大家對於laravel後續開發，才知道某個檔案要從哪裡開起來。', '維護模式']","['app目錄', 'bootstrap', 'config', 'database', 'public', 'resources', 'lang', 'controllers', 'models', 'views']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190994,AI&MachineLearning,1,玩轉資料與機器學習-以自然語言處理為例系列,3,網路爬蟲Day1-概述,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1512763215000000000,752,"原本規畫這個部分可以寫個十天左右。不過，因為我之前就有寫過爬蟲文章，所以為了不讓自己太偷懶(笑)，所以可能會縮短一點。另外，再加上，早上亂逛別人文章的時候，發現了一位Howard大也在寫爬蟲的相關文章，而且看了一下他的文章，我覺得他的文章寫得也不錯，還好沒有過來AI這組跟我競爭(噓!你們甚麼都沒看到!)。
不過，這也不代表我的文章沒有了價值。人家寫爬蟲寫30天不是沒有它的道理，一定會挖得比較深去寫，也會寫盡各種可能的情況，我則比較希望，直接單刀直入，避免架構性的去說明整個爬蟲前後運作的原理，會直接把遇到的問題跟解決的方案列出來，另外，他實作的語言似乎是node.js，我則是用python實作，我還是有點價值的，嘿嘿~
對不起，我再多嘴一下。再爬蟲方面，node.js跟python有個最大的差別，就是node.js本身預設的發送request的方法就是非同步的，也就是它會在cpu允許的情況底下，盡可能的在等待對方server回應時，發出下一個request。而python中的request則不是如此預設，也就是發出一個request後，它會等待server回應後再發出下一個request。如果你看不懂request是什麼，不用擔心，後面就會慢慢介紹了。
總而言之，就爬蟲的領域來說，nodejs預設的速度會快一點，而python也可以達到同樣的效果，要多寫幾行程式碼就是了(另外也有爬蟲框架特別在解決這個問題)。但是出了爬蟲領域，nodejs也整天在處理怎麼變成同步啦，ㄎㄎ。
這篇文章主要是寫給剛開始學習Python爬蟲的初學者，由於自己剛開始學習這部分知識時，所有的套件名詞猶如雪片般飛來，有時會錯誤的理解一個套件的使用方式，有時則對某個套件期待過高，學成時總覺得不過爾爾，有種失落感。因此著述。
為了避免概念混淆，先打個預防針，我接下來要介紹的爬蟲，並非大規模的、地毯式的爬取任何可以取得的網頁，而是有針對性的爬蟲。也就是說，我在進行網頁爬取時，一般都會在同一個domain之內(網址中”http:/ /“後，第一個”/“符號之前的字串)，同時會先鎖定我要爬取的幾個頁面，並進一步鎖定每一個頁面中我要取得的資訊，然後最後會用相對精準的方式整理資料存入資料庫。
Python爬蟲，主要是透過以下幾個套件達成:","['前言MurMur...', '撰文動機', '本篇文章的「爬蟲」', '套件簡介', '之後幾天的文章規劃']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191058,自我挑戰組,0,,5,DevOps：「開發團隊與運營團隊之間更具協作性、更高效的關係」,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1512762943000000000,609,"比較新的團隊，或是有跟著時代進步的開發團隊應該都知道 DevOps 是指什麼，但是應該還是有很多工程師或是新手們不知道這到底是什麼吧
根據 維基百科 的解釋，這是一整套溝通合作的文化、運動或慣例。
我自己倒是比較喜歡稱之為是 開發團隊 跟 營運團隊 的協作規則、或是協作流程。
這邊比較多都是跟持續整合(Continuous Integration)、持續部屬(Continuous Delivery)、自動化測試(Test Automation)、設定自動化(Configuration Automation)，其中很多都跟自動化執行有關，我覺得重點是放在用自動化執行簡化人員使用，畢竟這些階段的工作，都是重複性高的執行內容，非常適合自動化。
其他部分就是，容器的相關技術，畢竟開發環境容器化，也可以簡化部屬難度。加快測試環境的建置與部屬。
當然敏捷開發相關的內容也都有被列入這塊主題之中，畢竟 敏捷開發才是 Devops 誕生的來源啊 引用來源
接著解釋一些我比較不熟悉的字眼：
ChatOps：透過Chatbot協助營運團隊
NoOps：DevOps是透過自動化腳本去進行運維。NoOps則是透過AI自動化來進行運維。這是2017的新趨勢。參考資料來源
SecDevOps：把安全開發最佳實踐和方法融入 DevOps。簡單說就是將 Security也融入 DevOps，也就是字面上的意思。參考
Infrastructure as Code(IAC)：其實，就是透過程式碼與預先定義好的組態檔，自動產生（provision）與管理IT基礎架構。
而且，這裡的IT基礎架構，並不只是針對虛擬機器，還包含Container，甚至是裸機（實體伺服器）的管理與部署。參考來源
Server & Network Automation：應該是指server跟網路設備的自動化建置。
IT Orchestration：這個有點難解釋，主要應該是說明協作中的自動化部分。還有跟管理控制有關的整合。
Containerization：其實就是容器化。wiki上面講 ，指的是作業系統層的虛擬化，現在大部分IT產業的容器化也都是指這件事情。
Docker、Kubernetes、Ansible：這些都是容器工具，大家就自己研究了",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191057,ModernWeb,3,重新認識JavaScript系列,5,重新認識JavaScript:Day05JavaScript是「傳值」或「傳址」？,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1512761389000000000,1018,"在介紹完變數與資料型別之後，本來想再繼續往運算式寫去，但我昨晚 人中之龍極二打到一半 突然想起有個很重要的部分遺漏了，那就在今天用一篇文章的篇幅來說明吧。
在前面幾天的文章當中，我們一直強調在 JavaScript 的資料可以分成「基本型別」(Primitives) 與「物件型別」(Object) 兩大類。
基本型別內的資料，會是以純值的形式存在 ( string、number、boolean、null、undefined )，而物件型別指的是可能由零或多種不同型別 (包括純值與物件) 所組合成的物件。
當我們今天要給變數資料的時候，假設我們給兩個變數分別設定為 10：
在基本型別的時候，會認為這兩個變數的「值」是相等的。 這應該不難理解，因為兩個變數的數值都是 10。
同樣地，在字串的情況下也是：
所以在基本型別，當我們判斷這兩個變數是否相等，看的是裡面的內容，也就是「值」。
在物件型別的狀況下就不同了。
這裡我們分別宣告兩個物件，也都有個 value 的屬性。
猜猜看， obj1 === obj2 的結果會是？
.
.
.
答案會是 false 。  想當然如果是 true 我就不用另外寫這篇了
剛接觸 JavaScript 的朋友可能無法理解這點，沒關係，我們繼續往下看。
在 JavaScript 的物件，我們可以把它看作是一個「實體 (instance)」，什麼意思呢，這裡我舉個例子。
假設我口袋裡有十塊錢，你口袋裡也有十塊錢。
這樣我們就有二十塊錢（不是
那麼在正常情況下，我們各自的十塊錢可以買到的東西應該是一樣多的對吧？
這個時候，我可以說我們各自的十塊錢是「等值」的。 用程式碼來說，就像這樣：
那麼在「物件」的情況下呢？
剛剛說 JavaScript 的物件都應該看作是一個「實體」。
以「實體」的前提下，假設我在我口袋裡的十塊錢用麥克筆上面打個 X，除非我是劉謙，此時你口袋的十塊錢應該是不可能有 X 的記號對吧？
當然 JavaScript 的物件沒這麼單純，這裡暫時用極簡化的例子幫助各位理解。
既然大家都知道，「變數」裡面的內容是可以被變動，那麼在理解了「基本型別」與「物件型別」在比較時的不同後，接著就來聊聊變數的更新與傳遞，這部分我們一樣分成「基本型別」與「物件型別」兩種來看。
還記得十塊錢的範例嗎，如同稍早所說，在基本型別的變數中，我們看的是變數裡頭的「值」。 換言之，我們在複製變數的時候，複製的也是那個變數的「值」：
可以看到，變數 b 的值是透過複製變數 a 的值而來。
但並不代表當變數 a 更新之後，會去影響變數 b 的數值：
簡單來說， var b = a; 表面上看起來變數 b 的內容是透過複製變數 a 而來，但此時若變數 a 的內容為基本型別時，實際上變數 b 是去建立了一個新的值，然後將變數 a 的內容複製了一份過來。
這時候 a 與 b 各自是獨立的。
所以當變數 a 的內容後來經過更新變成 100 之後，變數 b 的內容依舊保持原來的 10 而不受影響。
像這種情況，我們通常會稱作「傳值」 (pass by value)。
那麼換成了物件型別呢？
讓我們回到剛剛 coin 的例子，並且稍微修改一下：
乍看之下與前面基本型別 (純值) 的情況沒什麼不同，但是：
當 coin1.value 的內容被更新了之後，連帶著 coin2.value 卻也跟著更新了。
而且此時，你透過 === 去檢查兩者實體時，會發現 coin1 與 coin2 實際上是同一個實體！
聰明的你應該已經猜到，其實「物件」這類資料型態，在 JavaScript 中是透過「引用」的方式傳遞資料的。
什麼意思？ 這裡我用兩張圖來表示：

首先我們建立起一個新的物件的時候，JavaScript 會在記憶體的某處建立起一個物件 (圖右側)，然後再將這個 coin1 變數指向新生成的物件。

接著，當我們宣告了第二個變數 coin2 之後，並且透過 = 將 coin2 指向 coin1 的位置。
接著當我們更新了 coin1.value 的內容後， coin2.value 的內容也理所當然地被更新了。
所以實際上可以看出，coin1 與 coin2 這兩個變數是指向同一個實體的。
像這種透過引用的方式來傳遞資料，接收的其實是引用的「參考」而不是值的副本時，
我們通常會稱作「傳址」 (pass by reference)。
所以我說那個 JavaScript 是「傳值」或「傳址」呢？
在大多數的情況下，基本型別是「傳值」，而物件型別會是「傳址」的方式，但凡事都有例外。
我們來看看下面這個例子：
猜猜看，經過 changeValue(coin1) 操作後的 coin1 會是什麼？
答案仍是 { value: 10 } 。
剛剛說過，物件型別會是「傳址」的方式來更新資料，那應該會是 { value: 123 } 才對，為什麼依然不變？
事實上，JavaScript 不屬於單純的傳值或傳址。
更準確一點來說，JavaScript 應該屬於透過 pass by sharing (還沒找到合適的中文翻譯) 來傳遞資料。
「傳值」或「傳址」對大多數的開發者來說應該都不陌生，那麼「pass by sharing」又是什麼呢？
「Pass by sharing」的特點在於，當 function 的參數，如 function changeValue(obj){ ... } 中的 obj 被重新賦值的時候，外部變數的內容是不會被影響的。
如果不是重新賦值的情況，則又會回到大家所熟悉的狀況：
所以 JavaScript 到底屬於何種策略？
我認為 JavaScript 應該更屬於 Pass by sharing 的形式。
參考 ECMA-262-3 in detail. Chapter 8. Evaluation strategy 所說：
Regardless of usage concept of reference in this case, this strategy should not be confused with the “call by reference” discussed above. The value of the argument is not a direct alias, but the copy of the address.
由於在 JavaScript 的物件類型是可變的 (mutable)，當物件更新時，會影響到所有引用這個物件的變數與其副本，修改時會變動到原本的參考，但當賦與新值時，會產生新的實體參考。
而基本型別則是不可變的 (immutable)，當你更新了某個基本型別的值時，與那個值的副本完全無關：
這個時候在基本型別的操作下，以 Pass by sharing 的行為來說，與 Pass by value 的結果是完全一樣的，修改時永遠只能賦與新值。
那麼以上就是今天分享的主題，感謝各位看到這裡，我要回去打電動了，明天見，掰。",,"['基本型別', '物件型別', '變數的更新與傳遞', '「傳值」或「傳址」？', 'Pass by sharing', 'Pass by value、 Pass by reference 、Pass by sharing']","['基本型別的更新與傳遞', '物件型別的更新與傳遞']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191055,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,5,什麼是Boilerplate?使用Vue-Cli來創建你的第一個Project!(MessengerExtension第五天),"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1512756107000000000,634,"cli 這個詞的是代表 command line(終端)
也就是 Vue 所提供的一套 command line 工具
提供你在終端的環境使用

(在你的終端輸入 Vue 就可以使用)
後續將會講解功能、安裝方式
基本上在 google 搜尋 vue cli install 就可以找到相關的安裝教學
我們這邊就直接參考 vue-cli 在 npm 上提供的教學 (連結)
先裝好 npm 和 node
接下來在終端輸入 npm install -g vue-cli

就完成了
在終端輸入 vue 就可以測試是否有安裝成功(還會跳出相關用法)

基本上 Vue-cli 這個工具唯一的用途就是幫你創建 boilerplate
如果不知道 boilerplate 的意思，他就是一種樣板
意思是我們在使用不同程式語言時，常常會有一些基本設定，或是常常需要你重複寫的 code
舉例來說，像是每次都要寫的 html

如果每次重新開啟一個專案時，都要手動輸入這些內容
肯定會很枯燥乏味
所以就出現了不少工具，可以根據你的需求產生不同的樣板，也就是 boilerplate
舉例來說，像是許多編輯器都會支援的一個工具 - emmet

就提供了像是，輸入 html:5 後按 
就能自動產出 html boilerplate 的功能
[維基百科: boilerplate code]
[What is boilerplate in programming] - Stackoverflow
[Emmet 官網]
就舉跟 JavaScript 比較相關的 express, vue, react, angular
Express Generator - 自動產生 express 這個後端框架的 boilerplate

Create-React-App - 自動產生 React 開發的 boilerplate
Angular-Cli - 自動產生 Angular 開發的 boilerplate
Vue-Cli - 自動產生 Vue 開發的 boilerplate
開始使用 vue-cli，可以先輸入 vue list 來查看 vue-cli 支援哪幾種 template

★  browserify - 使用 browserify 作為打包工具，附加 hot-reload, lint, 單元測試
★  browserify-simple - 輕量版 browserify 樣板
★  pwa - 使用 webpack 作為打包工具，附加 Progressive Web App 的相關支援
★  simple - 最輕量的 Vue 樣板，幾乎沒有附加任何工具
★  webpack - 使用 webpack 作為打包工具，附加 hot-reload, lint, 單元測試, css 編譯
★  webpack-simple - 輕量版的 webpack 樣板
這邊我們將使用 webpack 樣板，讓我們能夠盡可能了解 Vue-Cli 的各種功能
(除了 PWA 以外，webpack 樣板提供了最多設定)
這邊我們就實際來初始化(init)一次吧！

這邊就一步一步的介紹
接下來他就會創一個資料夾了，裡面會有滿滿的 boilerplate code
cd 進入我們的資料夾後
可以先使用 npm install 把該裝的套件都裝好
使用你偏好的編輯器打開，可以看見許多奇妙的檔案

這我們會在後續花篇幅一一介紹，我們明天見！","['什麼是 Vue-cli', 'Vue-cli 的安裝方式', '什麼是 Vue-cli', '常見的 boilerplate 套件', 'Vue-cli 包含了什麼', 'vue-cli 初始化']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190944,ModernWeb,0,30天串接30個GoogleAPIs的服務應用系列,5,[day5]-創造自己的地圖服務應用，GoogleMapsAPI的自訂標記應用（已補齊,KingTzeng,https://ithelp.ithome.com.tw/users/20103130/ironman,1512755731000000000,692,"假日在寫進階一點的應用....Sorry....
昨兒做出我們基本的地圖之後 傳送門
如果覺得很無聊、單調，這些Maps API都可以做的到你想要的樣子～
那今天就來做自訂的Marker練習吧～
如果沒有另外設定的話，呼叫google.maps.Marker的API
基本google提供的地圖Marker(標記)就長這樣↓

那你一定想：
當然可以囉～今天就把Marker換成我們想要的樣子～
提供一個可以下載Free ICON的網站，雖然好像只能下載72px的，但拿來當文章素材應該還蠻夠用的～
iconshock https://www.iconshock.com/
想練習的話可以先下載幾個來，我先下載了4個ICON待會來做示範

昨天沒有講到Marker這個API，今天來講一下～
具 Google Maps API 所簡介的
所以標記是可以增加使用者體驗的(UX)，譬如：點擊標記顯示訊息、拖曳標記得到地方訊息等...
30天的應用會慢慢的一步一步實現這些功能，今天我們先來改變標記的樣式！
沿用上一篇的JS繼續實作Here
看到Marker的部分
可以看到reference Marker class的部分，google.maps.Marker這樣就代表你有呼叫一個marker的API。
想要Marker做什麼，下面有一些Methods可以看看他可以作一些什麼事情，初學者可以這樣練習看看...

了解Marker後，我們就可以來自訂他的樣式～
一樣是呼叫Marker API，Marker的性質是Object，在建構式裡新增一個icon的屬性
那Google的範例是設了幾個經緯度，用陣列的方式依序用forEach印出來位置
我就不這麼做了，用笨笨的方法寫XD
練習Time
我是設定一個初始位置，因為icon我抓了四個，那我們迴圈就跑四次就好了～
初始位置
Lat：25.046891
Lng：121.516602
Marker：
第一次迴圈
Lat：25.051891
Lng：121.521602
Marker：
第二次迴圈
Lat：25.056891
Lng：121.526602
Marker：
第三次迴圈
Lat：25.061891
Lng：121.531602
Marker：
第四次迴圈
Lat：25.066891
Lng：121.536602
Marker：
我們的成品～

giphy大圖連結 http://gph.is/2B8l2He
現在我們做到多個Marker的功能、Marker變成我們自訂的樣式了～
下一次來賦予Marker實質的互動吧～
先在此斷尾囉.....
附上完整程式碼
Demo連結：https://tinatyc.github.io/King-Ironman-30Day-Challenge/page/day5/
這樣寫程式好笨重喔....下次我會改進的....
實作Demo目錄 on GitHub
同步刊登於King 學習前端之人生
[ 著作權為King Tzeng所有，請勿抄襲或致敬＝口＝]",,"['上班一個禮拜，終於到星期五了Orz 做一些小東西好了....', '文後-']",,"['起始式', '大家都這樣很無聊啊～我可不可以換我自己的圖或Icon上去啊？', '你有Free Style嗎？']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190891,自我挑戰組,2,自我挑戰日記系列,3,CSS：background漸層的單位,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1512755725000000000,607,"上篇文章所說的線性漸層，指定方向的值可以是關鍵字及度數以外，
還可以使用 grad 百分比、rad 弧度、turn圈數 為單位
度數 deg ： 繞一圈為 360deg
百分比 grad ： 繞一圈為 400grad
弧度 rad ： 繞一圈為 6.2832rad
圈數 turn ： 繞一圈為 1turn
這4個單位實作一次 ""完整一圈"" 看起來效果是一樣的，
也可以使用負數。
但在轉 1/4 圓時，
就是 90deg = 100grad = 1.5708rad = 0.25turn
發現到 90deg = 100grad = 0.25turn 是一樣的，
1.5708rad 居然不到 90度 !!??
查了好久相關的資料，
都是 90deg = 100grad = 0.25turn ≈ 1.5708rad
也就是 約等於 90度，
真是有趣，先記下了!!
--- 明日待續。",,,['大家好 '],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191047,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,5,比較Phoenix之前，先來聊聊Elixir,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1512755398000000000,642,"這幾天陸續比較了Sinatra、Laravel、Django
接下來自然是輪到Phoenix
如果有人擔心在前五天就比較完所有框架，那接下來的二十幾天要寫什麼怎麼辦？
不用擔心
接下來我會依照新手指引（確實我也是新手）
一個一個陸續完成環境設定與建置
利用每一個框架實做一個基本的CRUD網站
我想在實作的過程中，應該會有更多的發現
可以提供給猶豫不知該選哪個入門的人參考
在正式進入之前，我想先談談怎樣算是一個好的框架，以及各種取捨
坦白說這樣的討論應該擺在很前面
畢竟沒有標準，就無從比較
但我希望我看過更多可能之後，再來選擇我想要的標準
在有關框架的討論之中，常常被提出來比較的是：
「開發效能」(Productivity)與「執行效能」(Performance)
比方說我最愛的Rails在開發效能這點上相當傑出
但同時執行效能就常常為人所詬病
最知名的就是Twitter的案例
當產品爆紅到某個程度的時候，需要用java或其他效能更高的語言改寫
來降低機器成本
儘管Ruby本身也時時更新想要提升執行速度（事實上確實加快了許多）
而且坦白說，不是每個團隊都會遇到Twitter障礙
但這件事終究成為Ruby使用者心中一個硬傷
畢竟每個開發者都會擔心
要是自己的團隊不小成為下一個Twitter，
整個專案需要重新改寫一遍那豈不是很麻煩嗎？（跟中樂透的理財規劃有異曲同工之妙）
我以前聽過一句話：
新的語言之所以能取代舊的語言成為流行，正是因為它能解決舊語言的問題
這句話說得鏗鏘有力
Elixir就是產生來解決開發與執行效能不能兩全的問題！
（至少他是這麼宣稱啦）
要介紹Elixir，首先要先從Erlang開始講起：
Erlang是一個相當古老的語言，1987年由瑞典的愛立信公司所發表
一開始是私有軟體，在1998年才開放原始碼
長期運用在電信交換業務上，經過時間證明是相當可靠而且容易擴充的語言
他的特點是支持熱插拔，運作中也可以更新
在一般機器上一萬連線視為考驗的情況下，單一機器的Erlang可以支持兩百萬的連線
缺點是不太好寫（ＸＤ）
在2013年誕生的Elixir繼承了Erlang所有的優點
同時擷取了Ruby等現代語言的優點，簡潔好寫
這是因為Elixir的創作者 José Valim(葡萄牙文，巴西人)他同時也是Ruby on Rails的核心團隊成員
所以在許多地方都會讓Rails工程師感到相當親切（這也是為什麼這麼多Rails工程師感興趣的原因）
也有人說Elixir是Erlang與Ruby的小孩
接下來簡單介紹一下 Elixir 的特色：
當我們在一開始認識一個語言的時候，都會很想知道有哪些公司是使用它的
比較知名的有WhatsApp與Pinterest（更多名單）
其中Pinterest運用在「通知系統」一秒可以傳送 14,000 筆訊息只需要15台主機
原本用 JAVA 的舊架構則需要 30台主機
而且程式碼檔案大小僅有原本的 1/10 ！
聽起來是不是威力相當強大，而且吸引人呢？
前面講了這個多，都還沒正式進入Phoenix
在我安裝完環境讀了一下教學後
我決定多開幾篇繼續深入
今天的篇幅就先到介紹到這邊囉～
參考資料：
https://zh.wikipedia.org/wiki/Erlang
http://bobochen.com/elixir/introduction_to_Elixir/
http://www.infoq.com/cn/news/2015/04/elixir-web-erlang","['Productivity vs Performance', 'Son of Erlang and Ruby', 'Power of Elixir']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191051,ModernWeb,0,跟著網頁動ㄘ動系列,5,DAY5-使用CCS3動ㄘ動Part4,EllenK,https://ithelp.ithome.com.tw/users/20107540/ironman,1512751999000000000,633,"昨天說好要來介紹 animation-fill-mode: 動畫播放前後的狀態 這個屬性。
none ：回到動畫尚未撥放時的狀態。
forwards ：停在動畫的最後一個狀態。
backwards ：停在動畫的第一個狀態。
both ：停在 animation-direction播放方向結束的狀態上。
在與animation-direction的搭配上會呈現不同的結果，細節其實蠻多的，但今天好忙(毆
決定先卡位。
先放上一個覺得蠻仔細的教學
https://www.w3cplus.com/css3/css-animation-fill-mode-property.html
有緣再來補齊。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191052,ModernWeb,1,三十哩路，我的前端學習路程系列,5,Day05::CSS畫圖好好玩,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1512751593000000000,701,"之前在CodePen上面有看見許多使用CSS製作圖案的Pen
當時看到覺得很神奇也很佩服，沒想到可以使用CSS做到這樣的事情
用CSS進行製作時，我們會需要使用到
position、border-radius、outline
方形由div本身的寬跟高去製作
圓形是使用border-radius
可以只設定一個值讓四個角同時套用
也可以寫在一起，寫在一起後數值定位順序為順時針
第一個數字是左上、第二個數字是右上、第三個數字是右下、第四個數字是左下。
也可以對單一個角做設定
只要使用上面這些屬性就可以畫出一些簡單可愛的小東西囉！
codepen - CSS繪圖簡易小車車
codepen - CSS繪圖雲朵",,"['定位 position', '圓角 border-radius']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190899,SoftwareDevelopment,1,保持前進、持續優化程式碼內涵系列,4,04.攻城獅最討厭的、但又必需作的事情～命名規則,依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1512744390000000000,757,"各位看倌還記得02. 看的懂的程式碼，才是好的程式碼看到的程式嗎？
造成程式碼不易閱讀的因素有很多，但最常見的就是命名行為不確實。下面，我們將前文出現的程式碼，擷取一小段落於下方，讓我們來 code review 有那些問題是因為命名行為不確實造成的。
接著將上面程式碼，所使用的函數 _RRR(...) 的宣告也找出來。
在看到變數 k 的當下，很難知道它所代表意思。所以只好再回頭查看 k 這個物件，它儲存了什麼資訊、它有什麼用途。
花費在查詢無意義命名的變數的用途與資訊的時間，就是變向的浪費寶貴的開發時間。
接著，我們從程式碼中，可以得知 a1, a2 儲存的內容是一組亂數資料，這樣的寫法很正常。
但配合變數 k 使用時，在閱讀性上並沒有那麼直覺。
所有的變數名稱，識別性太低，而且無法明確的表示該變數的意義。
另外，ggg 其實是類別的成員，在本來的程式碼中，無法直接辨識變數的屬於區域變數、或是類別成員。
若是類別成員與區域變數無法區分，可能會導致開發時，非預期的 BUG。
變數 rrr 代表的意思？函數 _RRR(...) 的功能為何？
不明確的函數名稱，會導致無法從函數名稱直接得知回傳物件的意義。
其實這跟第一點是相同的，無法直接經由參數的名稱，進一步瞭解到參數的意義，可能會造成需要額外的說明文件或註解。
當我們review 完這段程式碼後，發現 k 是一組長度為 ggg 的二維陣列，實際上它的用途是儲存基因演算法中，所使用的樣本資料。ggg 代表的取樣的數量。
若是將上方的程式碼改為下面的寫法。
這樣的閱讀性是是不是高了一點。
函數 _RRR(...) 的功能，主要是為了找出兩張影像在特定座標位置的誤差量。但是在原本的函數名稱中，很難去表示出該函數的功能目標。
若是將上方的程式碼改為下面的寫法。
使用 CalcImgeOverlapError 是否更能快速了解函數的功能與目標。
其實，上面將變數名稱、函數名稱更改為有意義名稱的動作，就是重構的一種行為。",,"['Code review', '優化方向', '重點滙整']","['1. 不具代表性的變數名稱', '2. 難以判讀的函數名稱', '3. 不具代表性的函數參數名稱', '1. 使用有代表性意義的變數名稱', '2. 可描述功能的函數名稱', '補充']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191037,ModernWeb,0,認識Chrome開發者工具系列,5,開發者工具面版簡介3-記憶體面版、行動裝置工具欄及其他工具,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1512738585000000000,823,"到目前為止我們已經看過幾個主要的面版，今天要介紹剩下的一個面版：記憶體面版。但是除了這些面版外，其實 Chrome 開發者工具裡還有提供一些方便的工具來協助工程師們開發及除錯。今天我也會花一點時間來簡單介紹，然而一些比較冷門或是我沒用過的工具就不會介紹了。

這個面版做的事就像這個面版的名稱一樣，讓你來檢查及修正頁面記憶體問題，它可以在任一個頁面產生一個快照，而這個快照 (Heap snapshot) 可以讓你知道當前這個頁面的記憶體使用狀態，而通常在這邊要注意的就是這個頁面是不是有記憶體洩露 (Memory leak) 的問題。我們在接下來的篇幅中會再來介紹這個面版。

因為這幾年行動裝置的快速增加，很多使用者不再是使用傳統的桌上行電腦來瀏覽網頁，甚至很多使用者大部份時間是只用行動裝置來瀏覽網頁的。所以測試自己的網站是否可以正常的在行動裝置上顯示就是一件很重要的事了。而 Chrome 開發者工具提供的這一個工具就是讓你可以模擬特定的行動裝置，在上面開發及除錯。你可以模擬某個特定裝置的螢幕尺寸，是直立 (Portrait mode) 的瀏覽或是橫式 (Landscape mode)，然後它也會把滑鼠指標轉換成觸控 ( 因為在行動裝置上，是沒有像 element:hover 這類的效果 )，你也可以模擬網路的速度像是 3G 或是 4G 等等方便的功能。但要這裡要注意的是，這只是 "" 模擬 "" 並不是真的使用這個行動裝置來瀏覽你的頁面，所以在你的網站上線前最好還是使用真實的裝置來測試，我以前就曾遇過使用模擬的方式來測沒有問題的功能，在真的裝置來使用時這個功能卻是有問題的情況。雖然說這個模擬有它的方便性 ( 你不可能有辦法把市面上所有的裝置都買來測一遍吧 …) 及參考價值，但是使用真實的裝置來測才有可能會有百分之百的準確度。
其他的工具沒有在預設的面版當中，你可以在開發者工具的右上角的三點小點圖示上  用滑鼠左鍵點擊一下打開下拉選單，然後再打開 More tools ，我們要介紹的這邊工具就會在這選單裡

這一個選單也可以在控制台抽屜 (Console drawer) 左上角找到，並且打開一樣的選單

開發者工具會在頁面上動態顯示目前頁面渲染所使用的資源及其他狀態
我們花了三天的時間很快速的把所有面版走過一遍，讓大家對 Chrome 開發者工具有一個基本的概念，接下來我們要開始針對各個面版做詳細的介紹，但在那之前，我們先簡單的介紹一下開發者工具的一些常用設定。",,"['記憶體面版 Memory panel', '行動裝置工具欄 Device toolbar', '其他工具', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190945,Security,0,CEH之越挫越勇系列,3,[Day03]滲透概論&專有名詞,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1512738051000000000,1533,"未看先猜我用一個天數解決不完概論章節…
因為是認證考試，重點零零散散重點摘要…
讀起來會比較辛苦，所以直接列出分類會比較好記(？)
//粗體單字考古題都有出現過
資訊安全是一個恐嚇產業 (？)
所以課程的開始就是會貼幾則資安事件的案例，然後嚇嚇你說什麼才是資安這樣…
舉例：平均一秒內，大家使用 APP 的網路頻率
(1) E-Mail (含詐騙及垃圾信件)
(2) 娛樂媒體(社交平台)
(3) 其他
=> 所以這個例子是跟我們說，做社交工程最快了 //而且不需要太高深的技術…
原廠教材是給了五個要素，但我在考試的時候出現的是三要素… (咦？
資安三要素：機密性、完整性、可用性。
功能(Functionality) <-> 方便(Usability) <-> 安全(Security)
課文中提到想要設計一個兼具功能 & 方便 & 安全的應用程式… 很難 XDDDD
攻擊(Attacks) = 動機(Motive) + 方法(Method) + 弱點(Vulnerability)
細項未來有機會在其他章節提到… 以後有空再更新連結吧 XD
全部放行 -> 黑名單 -> 白名單 -> 例外清單
其實我準備課程的時候，老師有一段很長的時候都在講課外的民俗風情…
然後快下課才快快用畫單字的方式去補完課程進度…
所以沒有意外的話，每個主題都會有專有名詞的補充…
就給大家練練對英文的敏感度了，歡迎補充+指教 XDDD
據說是資安的最後一道防線(？)
**- 攻擊切面(Attack Vectors) **
如果有興趣也可以參考林維展前輩的筆記：
http://w1a2d3s4q5e6.blogspot.tw/2015/12/ceh-v9-certifed-ethical-hacker.html","['先嚇嚇你', '資安要素', '矛盾三角', '風險公式', '攻擊切入點', '攻擊分類', '駭客分類', '滲透類型', '資安政策', '專有名詞', '資安設備', '資安法令', '弱點分類']",,"['網路', '主機', '應用程式', '作業系統']",['[課程補充] E-Mail'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191035,自我挑戰組,0,網頁學習日誌系列,5,Git:基礎操作-新增檔案和資料夾,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1512737982000000000,766,"以前不懂git時候，只會把靜態網頁放在google硬碟並開放共用給外界瀏覽，後來學到git並上傳到github才知道除了放網頁，另外有編輯紀錄(commits)，可與團隊共同編輯並能清楚釐清責任歸屬。
git聽起來很高深，
實際上如果有在windos利用DOSBox玩過金庸群俠傳(野球拳最高!!!)的人

玩過再使用git會覺得很親切啊~~!!

cd legend 就是進入該資料夾(legend),如果你要到點選進入資料夾就輸入 cd 資料夾名稱，後面的play為遊戲啟動的檔名。
不過不管是git 還是dosBox 輸入上面一定要到該資料夾的上層，在上面案例中也就是c槽，他才會正確執行。
輸入 cd + 空白鍵 + c:   輸入完按enter

後面出現 /c 就表示進入c槽了
現在把上面的指令套在git，首先到官網下載(https://git-scm.com/)
看到右下方的download點擊下載，官網會自動辨識電腦是windows 還是 mac，會出現相對應的載點，所以只要點擊下載就可以了

開啟資料夾，執行Git Bash (mac 資料夾執行 「終端機」的檔案 )

1.先在桌面新增資料夾git_test
2.在git Bash 找到 git_test
直接輸入 cd+空白鍵
左鍵拖曳資料夾git_test 到git Bash 裡的 cd 空白鍵 那一行並放開

結果如下：

按enter 就進入資料夾了

3.新增index.html
輸入
輸入後，資料夾出現index.html

輸入後，資料夾出現css 資料夾

進入css資料夾則是直接輸入cd +空白鍵 +css
結果如下圖

回上一層就輸入cd+空白鍵+ ..
結果如下圖

想知道所在的git_test的資料夾有哪些資料夾和檔案，可以輸入 ls
下圖可看到他只會顯示git_test資料夾中有那些檔案和資料夾

總結目前的指令如下:",,,"['其中有個指令 輸入cd+空白鍵+legend接著是play，', '到c槽方法：', '利用git bash 新增檔案和資料夾']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191031,DataTechnology,2,GraphQL+ApolloData入門系列,2,GraphQLServer&ApolloDataServer,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512737530000000000,867,"介紹
在開始玩 GraphQL 之前先來架設一個SERVER,這時候可以選用官方提供的 GraphQL Server 或是  ApolloData 提供的 Server 也可以選用一些 雲端服務 例如 https://www.graph.cool/ 來代理 Server part部分
比較 官方的 GraphQL VS  ApolloData Server 安裝
官方的 GraphQL
server.js
ApolloData Server
server.js
以上都是透過一個 EndPoint  來解析 Json payload 資料，接下來來看一下如果在 Server Part 要如何些寫
Schema
官方 Schema 如下 的所有的種類都要從 graphql/lib/type抽出來 各種形態然後使用 GraphQLSchema 去組合 Query 與 Mutation  不過可以看得出來這樣其實滿不方便的而且程式碼寫的很冗長
schema.js
ApolloData Server  可以先不用  import  直接如下方的方式定義 並使用  ApolloData 提供的 Tools (graphql-tools) 裡面有個 makeExecutableSchema 可以用來組裝 Schema 與 Resolver 後還原原生的 Schema ，在撰寫上的風格比較利於理解程式碼也會少很多
schema.js
總結
這篇主要是想介紹 官方與 ApolloData 之間的比較,個人覺得 ApolloData 程式碼可以少寫很多，也易於管理 推一個， day3 再來介紹一下SERVER端的架構與  schema 與 Resolver 之間的關係",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191032,SoftwareDevelopment,0,認識scala系列,5,Scaladay5(functionliteral),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1512736757000000000,787,"function literal 由於沒有 function 名稱所以又可稱為匿名函式(anonymous function)，又有另外一個名稱 lambda expressions．之前有提到 val 是在定義變數，但這邊因為匿名函式(anonymous function) 的關係，所以可以把它綁定到一個變數上 :
使用 underscore (_) 簡化 lambda expressions :
或著這樣寫
再來看下面例子，如果參數只有一個的話，省略到最後會變成只要一個 _ ，且不用指定型態就可代表傳入的參數 :
function literal 運用在迴圈上 :
lambda 函數的運用，function countResult 定義了一個參數 counter 是 (Int,Int) => Int 型態的:
上面的例子其實把 plus , times , minus , divided 改成用 def 宣告其實也可以 :
那這樣lambda expressions 跟用 def 的差異在哪呢 ? 下面例子可以很明顯看出差異 :
定義一個 val 及 def 的 function，會隨機印出一個亂數
會發現 printMsg1 印出的亂數都會一樣，代表說定義好就只會 new 一次 function :
printMsg2 則每次呼叫都會產生一個新的亂數，所以每次呼叫都會 new 一次 function :
一開始看到這符號也真的是滿頭問號了，scala 的符號真的很多種．
??? 的意思就是可以先定義一個尚未實作的方法，就是已確定會有這個方法，但還不知道這方法的細節時可以先使用 ??? 先定義該方法，但尚未實作，這時候如果呼叫他會丟出一個NotImplementedError 的錯誤訊息 :
這邊稍微額外補充一下上面有提到使用 val 及 def 的差異，其實另外還有一種寫法是使用 lazy val 宣告．像上面的 printMsg1 會出現錯誤是因為，前面有提到使用 val 定義好就只會 new 一次 function，所以它在定義時就會產生了．那如果前面加的 lazy 代表說等真的使用到時再來產生 function ，所以下面的 printMsg3 compiler 會成功 :
假設你需要 extends 一個抽象類別，但裡面需要實作抽象方法，但也許你還沒拿到規格，還不確定裡面的細節該如何實作，這時候可以先用 ???．而且別人如果不小心呼叫到，會有 NotImplementedError 這訊息提示對方該方法尚未實作完成．",,"[""scala's function literal""]","['???', '總結']","['function literal 語法例子 :', '傳遞 lambda expressions 到 function']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190624,ModernWeb,2,Next.js+各種套件組合系列,5,Next.JS&FirebaseAuth,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512734150000000000,900,"介紹
在各種前後端分離的驗證方式常見的有Jwt+Passport，基層以Jwt為基礎結合各家快速登入驗證的可以少寫很多程式碼， Friebase Auth 與 DATABASE並具有即時通知功能
Google 為範例

進入 Friebase 控制台後 直接打開 Authentication  的登入方式 Google Friebase 因為已經是Google的產品所以設定只要打開就可以用了
再引入一個 Client 端與 Friebase 的連結設定檔，這邊是以 Web 為範例所以選第三個

開始寫一個 index.js (可以參考最底下的範例)
先 import Friebase 以及上方的認證設定檔(以下程式碼為 clientCredentials )，並在元件 DiDMount 後開始初始化 Friebase，程式碼中的 onAuthStateChanged 可以監聽登出登入狀況，所以這邊就可以改變登出登入 State 狀況
index.js
這樣就完成基本的設定了接下來在程式碼中設定一個登入按鈕觸發以下的程式碼就可以完成 SPA 的登入，與上方程式碼會監聽下面按下後的登入狀況
加入其他登入
因為是策略模式所以如果要趕成 Twitter 或 Facebook 如圖中有提供的登入方式只要改對應的 AuthProvider()
例如
除了在 Friebase Authentication 要打開才能使用,登入方法再打開都有附上說明都只要到各家 console 對應欄位填入資訊即可
Next.js with Friebase  SSR介紹
後端準備工作 需要先記錄已登入狀況,使用 Sesson 來記錄已登入最適合,使用 Express 搭配 connect-redis,Friebase 也要用後端使用的lib firebase-admin 跟 後端的驗證
Server Part 引入以下設定檔
Server Part 可以參考前幾篇介紹的 Next.js & Server 這邊多了一些 Session Part
server.js 設定一下 REDIS MIDDLEWAVE
如果 Client SPA 有偵測到異動也要同步更新後端 Session ,這邊修改一下ComponentDidMount的
firebase.auth().onAuthStateChanged 的,加入前後端同步的 Code
server.js 同步後端 Session 登出登入
這樣如果有需要在 SSR 的時候就可以 getInitialProps 直接抓 USER 資料加快速度
總結
導入 Firebase Auth 程式碼可以少寫很多,設定上也簡化許多,之後如果還有要用 Firebase Database 或 Firebase 各項服務也很容易結合，在 Next.js PART 部分也是SSR的部分要比較注意， SPA有onAuthStateChanged 的時候記得後端要同步一下，範例使用的 File  Session 這邊建議使用 Redis 會比較快
Firebase Auth 還有提供免費的 SMS 與 EMAIL 也有客製化登入 都是打開就可以使用的非常容易
https://www.youtube.com/watch?v=zWm7KgXceNU&t=130s (SMS 可以參考)
官方範例連結 (注意本次解說把範例中的 Database Part 抽掉 方便更容易理解)
https://github.com/zeit/Next.js/tree/canary/examples/with-firebase-authentication",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191019,SoftwareDevelopment,1,初探Kotlin系列,3,[Day3]KotlinIdioms,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1512733964000000000,783,"今天介紹Kotlin常用的語法
在Java中要生成一個POJO類別常見如下:
在Kotlin可用以下方式生成:
或者更簡潔的寫法
類似Java中的instanceof
在Kotlin中使用is關鍵字
參考資料
有些內容後續會詳細的解釋 所以就先沒放上","['產生POJO/POCO', '給定Function參數的初始值', '過濾LIST中的內容', 'Instance Checks', '遍訪map/list', '唯讀list/mpa']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191025,SoftwareDevelopment,1,Kotlin30天，通過每天一個小demo學習Android開發系列,5,Kotlin開發第5天WebviewSearch(WebView+Keyboard),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1512733746000000000,792,"
今天練習一下使用 WebView。
1、使用者可以通過輸入框打入關鍵詞跳到 Google 畫面進行搜尋。
2、也可以在輸入完關鍵詞以後，點鍵盤上的 Search 來進行搜尋。
3、在搜尋的時候將鍵盤收起來。
通過 WebView 去瀏覽網頁，需要有 internet 使用的權限。

我們可以在 AndroidManifest.xml 中加入請求。
使用起來沒什麼問題，和 iOS 的 UIWebView 使用起來很像，沒什麼問題。
比較特別的是，初始化的時候需要餵一個 WebViewClient 進去，然後通過 loadUrl 讀取頁面。
比 iOS 輕鬆的地方應該是，可以直接通過 String 來 loadUrl 而不用像 iOS 需要先轉成 URL 類型。
和 iOS 中的 UITextField 類似，可以對 EdidView 設定鍵盤類型，包括 return 按鈕的類型，比如 Done / Search / Return 等等。
不知道有沒有更容易的收鍵盤方式，目前來案收鍵盤
EditView 也是通過 TextView.OnEditorActionListener 來監聽事件，比如鍵盤點下了 Done / Search 等等。
有一個現象，如果一開始放了安裝好 App之後即使拿掉了也沒出現問題。
可能要了解一下這方面的機制。","['隱私權設定', '紀錄', '參考']","['WebView', 'EditView / Keyboard', '收鍵盤', 'TextView 事件監聽']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191022,ModernWeb,1,邁向JavaScript勇者之路系列,5,動態型別的JavaScript,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1512732063000000000,816,"JavaScript 是屬於動態型別，它定義了七種資料型別，分別為六種原始型別 (ES6 新增一種原始型別)及 Object 型別。在開始之前先用小明來說明一下型別是怎樣的東西。
承先前故事，小明每天早上醒來都會忘記所有事物，但會在睡覺前把要做的事情先記錄下來，筆記本上會分門別類寫出要做的事情。
小明有時會將要詢問的事情留空白，等到知道結果後再填上數值，像是某一個商品的價格如果再詢問前無法得知，就會先定義變數，等到有值後寫入：
小明也不是嚴謹的人，常常在筆記本上塗抹修改的地方，像是亂加漂亮阿姨的姓名、年齡等。
以上僅是說明動態型別，請不要學小明這樣做。
如果要查看型別，可以使用 typeof auntie 來驗證型別，可以透過 typeof 看看以下變數分別屬於哪些型別，其中會發現有趣的事情。
原始型別分別為以下六種：
除此之外還有一個 物件型別。
這兩個就翻譯上會有點接近，但實際上會有一些差異，首先建議：""不要將變數手動設為 undefined，這可能會造成未預期的結果。
為什麼 null 是 Object，自從有 JavaScript 開始就是這樣了，而這個錯誤不能修正，他會導致不可預期的錯誤 (來源：The history of “typeof null”)。
另外原本也預期在未來會給予 typeof null === 'null' 的正確結果，但後來也被拒絕。
數字型別是一種 [浮點數](雙精度浮點數 - 維基百科，自由的百科全書)，這種數值在極大值時會有精準度的問題，範例：
所以有些文章會提到不要用 JavaScript 來算錢，可是也要先有這麼多錢再說啊 QQQQ。另外還有以下三種都屬於此 Number 型別。
除了上述的六種原始型別，其餘都是物件型別，包含很常使用的 ""陣列""、""函式"" 都屬於物件型別。
下一個章節會開始來介紹 JavaScript 的物件，了解物件的概念有助於了解整個 JavaScript 的架構及運作喔 :)",,"['故事說明：', '六種原始型別', '物件型別']","['Undefined 與 Null', 'Number']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190964,自我挑戰組,1,服務桌從開始到進入資安領域系列,4,[Day4]服務桌的修業:常見的通訊Port與強制關閉指令,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512730585000000000,701,"===常見的通訊Port與通訊協定===
21 : FTP (File Transfer Protocol) 檔傳輸協定服務
23 : Telnet  遠端登錄服務
22 : SSH ( Secure Shell ) 服務
25 : SMTP ( Simple Mail Transfer Protocol ) 簡單郵件傳輸協議，大多數郵件伺服器都用著個協定
53 : DNS ( Domain Name Server ) 功能變數名稱伺服器，網址名稱解析
80 : HTTP ( HyperText Transport Protocol ) 超文本傳輸協定，用於WWW ( World Wide Web) 服務上傳輸資訊的協定。
109 : POP2 ( Post Office Protocol Version 2 ) 接收郵件
110 : POP3 ( Post Office Protocol Version 3 ) 接收郵件
113：Windows的Authentication Service驗證服務
119：NNTP ( Network News Transfer Protocol ) 網路新聞組傳輸協定
135：RPC ( Remote Procedure Call )遠端程序呼叫
137：NetBIOS名稱服務 ( NetBIOS Name Service )
139：NetBIOS Session Service，Windows檔、印表機、Samba
143：IMAP ( Internet Message Access Protocol v2 )
161：SNMP ( Simple Network Management Protocol )
443：Https
554：RTSP ( Real Time Streaming Protocol ) 即時流協議
3306 : MySQL 資料庫服務
3389 : 遠端桌面
8080：跟80Port用途一樣，需要另外開。
===windows===
查看網路port
netstat

參數
-a  顯示所有連接和偵聽連接阜。伺服器連接通常不顯示。
-n  以數位格式顯示位址和連接阜號（而不是嘗試搜尋名稱）。

查看正在listening的port
netstat -an | find ""LISTENING""

用指令強關使用中的port
使用指令netstat -o找出對應的PID，再用taskkill關閉。

===Linux===
netstat
找出要關閉的Port process

找出對應的PID process關閉
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191012,自我挑戰組,1,打雜人生-腦容量不夠用就筆記筆記唄系列,2,[Day2]Python自習手札:生出HelloWorld腳本~,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512728834000000000,710,"繼續哈囉臥倒 ~
打開文字編輯器，生出第一個腳本吧~
輸入
另存為helloworld.py


打開終端機，跑看看執行結果吧~

切換到腳本資料夾，執行腳本並顯示結果~

ps:退出Ctrl+D",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190927,Security,1,資安的學習心得及分享系列,5,DAY5電腦病毒,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1512727773000000000,749,"相信大家的電腦都有中毒的經驗，但是什麼是電腦病毒?
其實簡單來講，電腦病毒就是我們常見的程式。為什麼要說他是程式?因為他跟我們平常光碟灌的程式是一樣的，能夠執行一段行為，只是用途不同。
而電腦病毒通常是有心人士設計出來的，主要目的就是要去破壞電腦軟體，讓你的電腦或者電腦上的工作無法正常的運作。

有人會問世界上的第一支病毒是誰寫出來的?又為什麼要發明出來?
告訴大家，其實世上第一支病毒他『不具有破壞性』，並且他還是一個15歲的國中生所撰寫出來的。

是的!當時念國中的Richard Skrenta，他最喜歡做的事情就是寫程式，然後用程式去惡搞他朋友的電腦。並且可以在不碰到對方電腦的情況下去使用，就像是USB插到中毒的電腦，USB就會中毒，之後你也可能把中毒的USB帶給其他台電腦。而這樣的程式，在後來就演變出我們常見的開機型病毒。
病毒大概分成三大類:開機型病毒、檔案型病毒和複合式病毒。
開機型病毒
傳統的開機型病毒可能是磁碟傳染，因為我們電腦只要一啟動，病毒就會跑去侵害你的硬碟或者別的系統軟體。
檔案型病毒
通常檔案型病毒就是寄生在可執行檔(.COM,.EXE,SYS,BAY之類的檔案中)他就跟他名子一樣，只要執行他的檔案，程式就可能會跟著中毒，前提是這些執行檔有被感染到病毒。
複合式病毒
複合式病毒就是他同時擁有開機型和檔案型兩種的病毒特徵，簡單來說他擁有磁碟傳染這類的病毒，同時也擁有執行檔.COM,.EXE病毒這類的攻擊程式，破壞程度跟其他兩個相比起來，也強很多。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191018,DataTechnology,2,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",5,Day5-HadoopEcosystem之HadoopHDFS操作教學,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1512726997000000000,674,"在安裝完了Hadoop，並且正常啟動service後，接著我們要來進行HDFS使用教學。與一般的檔案系統一樣，HDFS可以新增、複製、刪除、與查看檔案，使用的指令也與Linux非常類似，接下來將會對這些指令進行介紹。
Hadoop平台剛建置好的時候，HDFS除了系統log或是暫存檔案外，是沒有任何使用者的資料。接下來會經過一連串的操作來介紹HDFS指令。
首先，先產生一個內文寫著Hello Wrold的檔案test.txt存儲在本機內：
接著將test.txt存放到HDFS根目錄/：
也可以使用copyFromLocal儲存，差別在於檔案來源只限定在local host：
透過下列指令確認test.txt是成功儲存到HDFS上：
查詢HDFS上的test.txt內容是否為Hello Wrold:
在HDFS根目錄建立testFolder資料夾：
將test.txt檔案由根目錄移動至testFolder內：
重新命名檔案/資料夾一樣是使用mv
在HDFS上複製/testFolder/test_rename.txt至根目錄/
將test_rename.txt複製回本機電腦路徑/tmp：
也可以使用copyToLocal儲存，差別在於複製目的地只限定在local host：
刪除/testFolder資料夾：
刪除/test_rename.txt檔案：
使用rm或rmr指令移除檔案或是資料夾時，會先將檔案搬移到垃圾桶資料夾(trash directory)內，並紀錄該檔案的刪除時間，等經過某段時間後才會真正從HDFS上移除檔案。如果想手動清空垃圾桶，可使用下列指令：
若想直接刪除，而不經過垃圾桶的保存機制，可以再刪除時增加skipTrash參數：
經過一連串的介紹，相信大家一定對HDFS的操作有基本的了解，如果想看這些指令的完整介紹，可以等待下一篇文章！",['最後'],['使用情境'],"['複製檔案至HDFS', '查詢檔案清單', '顯示檔案內容', '建立資料夾', '移動檔案/資料夾與重新命名', '複製檔案/資料夾', '複製檔案/資料夾回本機電腦', '刪除HDFS上的檔案/資料夾']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191016,DevOps,1,用30天來介紹和使用Docker系列,5,Day5:實作撰寫第一個Dockerfile,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1512726872000000000,773,"昨天已經體驗過使用 Docker 的指令，把 Docker Image Pull 到 local，並且執行 container，然後在 container 上安裝 HTTP Service，就類似是在使用 VM。
但是直接進入 Docker Container 裡面下一些指令安裝程式和改設定檔，不夠自動化，可能需要常常的重覆在做同一件事，這樣會很沒效率。所以今天就來寫 Dockerfile，只要下 docker build 的指令就可以把 Docker Image 建構起來，末來要使用就直接 Run 此 Image。
今天的實作目標是要做到在 Dockerfile 裡面，撰寫安裝 Java 和 Tomcat 的指令，包成 Docker Image， 之後只要呼叫到 docker run 指令，就可以把 Tomcat Service 啟動起來，主要目的用來體驗如何撰寫 Dockerfile 和 Build Image 以及執行 Docker container。
建立寫 Dockerfile 會用到的資料夾，指令如下
下載JDK 的安裝檔放在 docker-test資料夾裡，使用的版本是 jdk-8u152
撰寫Dockerfile
Dockerfile 的內容如下
以上的 Dockerfile 主要有用到的指令說明如下
FROM： 使用到的 Docker Image 名稱，今天使用 CentOS
MAINTAINER： 用來說明，撰寫和維護這個 Dockerfile 的人是誰，也可以給 E-mail的資訊
RUN： RUN 指令後面放 Linux 指令，用來執行安裝和設定這個 Image 需要的東西
ADD： 把 Local 的檔案複製到 Image 裡，如果是 tar.gz 檔複製進去 Image 時會順便自動解壓縮。Dockerfile 另外還有一個複製檔案的指令 COPY 未來還會再介紹
ENV： 用來設定環境變數
CMD： 在指行 docker run 的指令時會直接呼叫開啟 Tomcat Service
使用 --no-cache 的主要原因，是避免在 Build Docker image 時被 cache 住，而造成沒有 build 到修改過的 Dockerfile。
Build 完的結果如下圖：

Tomcat Service 會被執行起來的主要原因是在 Dockerfile 裡面有寫 CMD 指令，呼叫啟動 Tomcat Service
要使用 docker exec 指令之前需要先知道 Container 的 ID 所以需要先使用 docker ps 指令查詢 Container ID，如下圖：

前面直接進入 Docker Container 去看 IP 的位址其實有點麻煩，會故意這樣 Daemon 主要的原因，是讓大家了解到我們把 Docker Container 執行啟來時並不會知道它的 IP 位址在哪，這需要透過設定有關於 Docker 的 Network 來解決這個問題。目前使用最簡單的方法，就是在run docker container 時用 Port 的 Mapping 來解決此問題，重新再一次 run docker container，指令如下：
Container 的 8080 port mapping到 localhost 的 8080 port ，這樣只要輸入
http://localhost:8080 就可以看到 tomcat service 的 WebUI 畫面了。

今天已經寫了一個簡單的 Dockerfile 了，也把 Image Build 起來了。有關於 Dockerfile 的撰寫指令還有很多東西還沒被介紹到，未來都還會繼續的說明。
明天的目標是把今天建立好的 Docker Image Push 到 Docker Hub上。",,,,"['一. 建立 Dockerfile', '二. Build Docker Image', '三. 在 Build 完 Docker Image 之後就可以執行 Docker Container，這時Tomcat 的 Service 也會跟者被執行起來，指令如下', '四.\t打開 Browser 確認']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191015,ModernWeb,0,挑戰CSS30天系列,5,day5_float&clear,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1512724908000000000,638,"float (浮動) 屬性可達成文字繞著一個圖案顯現，可能的值為：left、right、和 none。
float:left; 使圖案浮動於左邊。
float:right; 使圖案浮動於右邊。
float:none; 使圖案不浮動。
clear (清除) 屬性可用來抵銷 float 屬性的作用。可能的值為：
left：消除左邊的浮動。
right：消除右邊的浮動。
both：消除左邊及右邊的浮動。
none：不消除任何一邊的浮動。
範例如下：
成果如下圖：",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191014,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,5,[Day5]EasyFlowGP--系統設計工具(二)簽核流程設計師:服務任務呼叫WebService,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1512724141000000000,735,"先和大家說一聲: Happy Friday !! 天寒留意保暖喔!!
續昨天的流程變數範例，今天要和大家提到流程設計師的服務任務
這工具通常是應用在要執行外掛程式或功能時。
系統提供四種選項(Web Application、Web SERVICE、Session Bean 和 Mail Delivery)
昨天例子提到:我要將表單上填寫的員工基本資料，傳給服務任務當傳入值，以新增員工基本資料
現在我們就來設定服務任務。
Step1.選擇[服務任務]的類型:Web SERVICE，請按下 [+] 按鈕。
自行定義此任務的名稱。ex:新增員工到EFGP

WSDL URL: 請寫上要呼叫的WSDL網址，此範例是呼叫EFGP內建的WSDL	
http://X.X.X.X:8086/NaNaWeb/services/WorkflowService?wsdl 
注意!! URL後面要加上 ?wsdl
填寫完URL後，請按下讀取，等系統跳出 ""wsdl is NOT null""和
成功讀取WSDL http://X.X.X.X:8086/NaNa….."" 才算成功!!	


Step2.選擇Prot
這個步驟就是點選反白後，按下一步。

Step3.選擇Operation
選擇要呼叫的Operation。
在本文的例子是寫進員工資料，所以呼叫importOrganizationData(string pXMLData)

Step4.Request設定
指定此Operation要傳入的流程變數。AddUserInfo就是昨天介紹的流程變數。

Step5.Respone設定
指定此Operation回傳的流程變數，此變數請應用昨天的分享，先行新增好流程變數以承接此Operation回傳的值，作為流程走向。

以上步驟1~5完成後，就可以按下完成，這樣就完成[服務任務]呼叫Web Service的操作。
後續在流程線上設定流程變數(回傳值)的分流，當[服務任務]新增員工成功，將繼續走下一關卡，反之則設定通知系統管理員。

",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191013,Security,0,IT安全稽核系列,5,1.5是否識別文件與紀錄的變更與最新修訂狀況？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1512722788000000000,673,"我不太喜歡探討技術面的東西，年輕的時候，我很專注於這塊，但是，資安管理，不是資安「技術」，有了技術，還是要應用於實務，最終還是要「管理」，我想如果一個工程師提升到資訊長以上的階段，就不是只停留在冷冰冰的機器後面，或者是躲在機器後，來面對人或組織的管理。基本上，管理的東西，就是一門哲學，需要實際經驗的累積，如果一個人的思維模式，不能隨著經驗累積而提升，始終停留在工程師的階段，那麼終將無法擺脫窠臼，始終在技術層面打轉，無法進化到「管理面」，那就真的很可惜了!
我的工作已經是到了管理的層級了，過往我對技術的投入，轉化到管理面，我有更深一層的體驗，參加鐵人賽是個意外，美好的意外，也跟大家分享我對於資安的想法。
本人繼續昨天內容做出說明及分析，並根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，繼續1.5項之探討。
一、資訊安全管理系統 （管理階層、資訊安全組織）
1.5是否識別文件與紀錄的變更與最新修訂狀況？
說明：此項說明在於兩個重點：1.文件。2.紀錄。
何謂文件？ 何謂紀錄?
所謂文件，就是可以依據不同情況，更改內容，簡單說，「隨時可以改變的。」
所謂紀錄，就是不能隨便修改的文件，簡單說，「歷史是不能隨便改變的。」
本人舉個簡單的例子來說明，首先，您為了期末報告，所以到圖書館找相關新聞報導來佐證您的報告，此時，您除了找期刊雜誌，就是進到檔案室，看投影、縮影的報紙或新聞資料。而這些期刊雜誌、縮影、新聞報導，都是某個時間底下的紀錄，這個紀錄是無法更改的，除非您有辦法穿越時空，回到過去，改變歷史，可是，您ㄧ回到過去，改變了一切，整個歷史就全部改寫了。因此，請記住，(歷史)紀錄是不可變的。
接著，我再來解釋-->文件，文件就像您在寫報告一樣，你會根據的資料蒐集，蒐集越多，你的文件就會產生不同的樣貌，在寫報告時，我們常會遇到一個狀況，今天告一段落，明天突然又看到別的資料，這時，又得要修改內容，所以很多人，便會在報告存檔時，加上不同的日期或者編號，讓自己能夠知道，我到底修正了多少版本，同時，也可以隨時拿出來比對前後內容，加加減減之後完成定稿存稿。
把以上這兩種情況應用到資訊系統上，大家可以很快了解這兩者之間的差別，舉個簡單的例子，windows檔案更新，正常的情況下，windows會紀錄下每次更新的軌跡，但這些更新，我們不能去更動，一更動，整個系統很容易就不能在執行，因為您誤觸了開啟了改變時光之鑰，這時，整個系統停滯，無法運作，此時，就只一切歸零，不然就是恢復預設，在不然復原成原始系統狀態，因為歷史(紀錄)是不容許改變的。請參考下圖。

解釋完紀錄，在來解釋文件，就相對容易，你按下開始，然後移到word，旁邊會跳出很多不同的文件，隨時都可以點進去修改，這在清楚不過了，可以參考下圖。

以上定義清楚之後，我們在提升到企業管理層面，我們做了很多文件，承襲1.3所說的文件化，加諸1.4的適切性之後，文件變成制度，制度就隨著時間產生紀錄，讓企業隨時審視，如果出現問題，隨時調閱紀錄，然後找出文件，重新創造文件，重新設定制度，重新創造紀錄，注意「重新」這兩個字，當今的宇宙，歷史是不可能逆的(至少在地球是這樣)，歷史告訴我們很多經驗，但是人類是很容易健忘的，因為健忘，所以很容易發生大災難，應用到資安系統裡面，其實也是一樣的，因此，紀錄的審視，也是避免資安潰堤的重要方式之一。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190854,自我挑戰組,0,用IT看世界系列,5,暗黑料理的啟示,allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1512719964000000000,760,"#暗黑料理的啟示#
終於在這星期完成99個小時的異國美食的烹飪課程(灑花)，除了全勤以外我還獲得老師青睞得到積極勤奮獎。(跟我要做電子食譜有關??)

###########那烹飪跟IT到底有什麼關聯性????################
首先來聊聊一個做菜的經驗，由於之前在袋鼠國的一個義大利室友
某天的下班我看他拿Mission WRAPS他在那邊用皮底鍋慢慢地夯，不久我就聞到一股燒焦味.......後來聽到他在譙WTF，沒錯這事情就結束了。
後來在我離開墨城要到雪梨時，我們辦了一個小home part交換著食物跟喝啤酒，我吃到一種捲餅，裡面有培根包起司，我從來沒吃過這麼好吃的捲餅!!!!

Sofien：Nice too meet u ,this wrap for u
Allen： Thanks man ,when I arrived Sydney i will ring u
sofien： yes pls
~後來這傢伙也沒接我電話ˋˊ可惡，居然他說他在睡覺.......~
~我心想我突然想到這傢伙上次不是才搞到燒焦???怎這麼厲害???~
在我學烹飪課的初期，大致上老師都會講解要示範的菜色跟材料，很快的我會將老師所示範的重點寫在一個雜紀本上，回來後再整理一次筆記，遇到簡單的菜大概都沒啥問題，甚至只要看著老師的成品就可以依樣畫葫蘆~好不好吃其次?~
所以也玩得很開心^^
不過奇妙的事情發生了!!!!
像寧波年糕這道菜還有迷迭香雞腿
請參考Allen的異國料理奇遇記~工商時間~
回家我看著食譜做，有時候腦筋會一片空白.....甚至做不出來.....
這個跟Linux或者Cisco的指令很久沒下，就連最簡單的scp或者 show running-config 打不出來的感覺很像
######後來######
幾次的經驗告訴我，~可能年紀大~可能要做一些文件或者sop，這樣才有辦法順利完成
非常感謝現任主管在推動sop重點工作上，我們有相同的共識
他曾經問我這樣會不會有壓力?將依些技術性的東西書面化
我的回答是，這樣其實很好，有些東西久沒設定，真的會忘記，甚至怎操作，雖然他不了解技術的東西，但我認為操之在己，你可複製貼上或者草草了事，也可以圖文並茂，甚至解說詳細，我認為這是一種態度，而我另外一位同事也有做筆記的習慣，只是我們呈現的方式不同。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190912,AI&MachineLearning,0,讓我們一起來見見歐美語音助理界的當紅炸子雞-Alexa吧!系列,5,[Day5]購買Echo後如何做使用?,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512719702000000000,684,"本篇將分享當你取得Alexa這個語音助理時，要如何將硬體設備Echo做設定，讓它可以滿足你的需求~
當你收到Echo時，裡面會有Echo本人和USB及電源，首次開機時，必須放置在離牆或玻璃至少8英呎(20.32公分)，將Echo第一次啟動及設定時會呈現橘色光圈(之後為藍色光圈)，並等連上網路，此時Alexa會跟你打招呼

可以用手機或平板下載app，不過僅限Amazon echo有在販售的地區才能直接下載
間接的方式為
a)	若你有android手機，下載app步驟如下(iphone在台灣地區目前無法下載)
步驟->
b)	也可以用使用網頁版Safari, Chrome, Firefox, Microsoft Edge, 或 Internet Explorer (10 or higher) 皆可使用


首先，你要將該智慧家電設備介紹給Alexa，讓Alexa控制她們。大部分的案例是，你只需要說 “Alexa, discover new devices.” 經過10幾秒的設定，她會把她所搜尋到的智慧家電設備顯示在app裡，然後你就可以開始叫Alexa控制他們

要注意的是這些智慧家電產品大部分要購買以下幾間公司等的智慧電燈、開關或電視等等聯網後Alexa才能找的到它們。

每當你想要請Alexa開啟你的智慧家電，你可以運用以下詞句等，要注意的是，每次要請她做事時一定要先叫她的名字Alexa (Wake Word)，要不然她會不知道你叫她做事窩!

參考資料:amazon, cnet",,,"['1.\t下載Alexa app，用來管理設定和管理你的設備及帳戶偏好', '2.\t接下來就是要到Setting裡做設定，此時請確保wifi打開且echo開機閃橘色光圈做預備，這樣app才有辦法連到你的echo', '3.\t要如何讓Alexa控制你的智慧家電呢?']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190981,ModernWeb,1,Nest.jsframework30天初探系列,5,Nestjsframework30天初探:Day05Middlewares,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1512718037000000000,687,"
Middlewares相信用Express框架開發的朋友對這名詞不會太陌生，很多時候我們會透過Middlewares，在router收到請求前就先做些處理，Nestjs在這方面有不少的著墨，可以讓我們在使用Middlewares時有更細緻的處理。
核心概念其實跟Express的Middleware相差無幾。
LoggerMiddleware有正常執行。
src/modules/Shared/Middlewares/logger.middleware.ts
console結果如下。
middleware確實有收到來自根模組傳過來的參數。
Middlewares執行是有順序性的，consumer.apply([xxx,ooo])，會依據陣列順序下去執行，藉由next()進行下個Middware。
程式在github",,['Middlewares'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191011,DataTechnology,0,Python學習筆記系列,5,[Day5]Numbers簡易數值運算,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512709556000000000,667,"數值包含以下兩種形式
1.	Integers整數
2.	Floating Point Numbers浮點數
a)	整數包含正數和負數，
b)	浮點數包含小數，也可以用指數(e or E)去定義數字
ex. 2.0, -2.1, 4E2 ( 代表4倍的10的2次方)
*運算子
•	指定運算子""=""
以等號表示，等號右邊的值先運算，再將結果指定給左邊的變數
Ex. a = 5 + 8，
相當於左邊變數a的標籤貼到右邊的數值13上
•	算數運算子
+(加) ,-(減), * (乘), **(次方) , //(求商數), %(求餘數)
注意 -> Python2 整數在做相除時，餘數不會被保留，故要
Python3 整數在做相除時，餘數會被保留
以下就舉一些exmaples給各位做參考
1.加減乘除基本運算

2.	指數運算及運算順序

3.	變數設定
必須遵守以下變數命名原則
1.名稱不能以數字開頭
2.變數名稱不可有空白，用_做替代
3.不可以用以下特殊字元來命名 : ' "" , <> / ? | \ () !@#$%^&~-+

4.	變數運算

參考資料來源: Go from zero to hero in Python ",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190914,SoftwareDevelopment,1,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,2,Day02-SpringBoot起手式,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1512702014000000000,690,"今天開始寫程式吧~!!
首先先到 http://start.spring.io/ 頁面，這邊有 Spring 提供的快速套件的選擇器，簡單勾一下，就可以產生專案結構來下載哦
第一個項目我們就勾選最簡單的 Web 然後按下載就可以
(Gradle 跟 Maven 隨個人喜好，不過我這邊都會用 Gradle 當示範)
解壓縮完呢再用你慣用的 IDE 來開啟(我這邊是用 IntelliJ 當示範)
開啟後的專案結構

接下來建立一個 Controller
接下來對著 WebApplication.java 右鍵 Run
服務起來的話預設是 8080 port
就可以透過 http://localhost:8080/
取得 {""say"":""hello""} 的資料
到這邊沒問題的話環境基本上是 OK 了
明天就直接進資料庫操作吧",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191007,ModernWeb,1,每日文章推薦系列,5,Day5怎麼判斷一個技術能不能用,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1512701819000000000,792,"如果是在前端界超過幾年的人
大概都可以體驗到技術更迭的速度
幾年前大家都還在用JQuery
後來開始有人玩MV* 出現backbone angular ember knockout等技術
到現在的angular vs react vs vue的大亂鬥
其實我個人的概念 都是只有當下最適合的工具 沒有最好的工具
JQuery可以幫助你解決問題就繼續用
不要因為有新技術出來就覺得某個技術會被取代
PHP也被鄙視了一大段時間 現在也又爬回來了
我相信鄙視鏈還是存在XD
知道用一個技術的代價 跟判斷代價是否可以接受
這才是選擇技術的重點
沒有技術是完美的
star人數
其實最不重要
但是最好判斷
假如有幾千人star一個專案
通常不是他很有用 至少也很有趣
是否能解決問題
如果他不能解決你的問題
那你選擇幹嘛?
維護團隊是否穩定
我想你不想選用一個孤兒專案在自己的系統裡面吧?
到時候還要自己維護
是不是會有大的變化
有如當初angular官方公告說下一版會建議使用atscript來開發一樣
光看到就使人卻步了
另外是有太多的破壞性更新也會讓人卻步
雖然現在大家用TypeScript用得很開心XD
是否有寫測試
我想現在有沒有寫測是算是判斷一個套件有沒有認真維護的基本條件?
團隊接受度
如果不只自己在用 那就要考慮別人
又假如你要離職要找人來交接
偏偏你又老愛玩新東西 一個專案就用一個新技術
到時候要找交接的人應該會想死
因為大量看文章的關係 邊看其實也是會對一個新技術持續觀察
從文章的數量也能了解目前技術的穩定程度
跟有多少人在使用
有時候看到有很多人在問問題 倒也不是代表這個技術很差
反而是因為他很多人用 才會有人問問題
因為之前玩過angular
覺得angular在弄大型一點的專案的時候會有點繁瑣
而且在跟jquery整合的方面會比較麻煩
所以vue一出來就讓我覺得很驚艷
可大可小 入手簡單 所以還沒正式板就已經開始關注了
不過也是等快到正式版才開始用在專案裡面
其實很早就看到laravel的消息
但是當時我的需求都靠codeigniter就可以滿足
所以當時反而覺得laravel太繁瑣 不大想玩
但是持續觀察到5.1板之後 就覺得他開始穩定
而且台灣社群開始蓬勃發展
另外也覺得團隊合作應該要有一個有架構的framework來做參考
所以就跳坑了 到現在也還在摸索
這個一出來到是毫無懸念的馬上跳坑
畢竟對於愛玩新技術的人來說
這玩意可是可以讓你玩更多新技術的基礎XD
比VM簡單 又不用像VM一樣把系統資源吃死
大學時期使用notepad++
後來用sublime text
這一兩年開始看到有人推坑phpstorm
就覺得可以省下不少時間
一年兩三千還算是可以負擔的支出
所以也就進坑了
內建功能讓我省下裝一堆軟體的功夫 划算
到現在還在摸索怎麼更有效率的使用他
因為懶得每次都做差不多的操作
所以尋找可以把動作標準化且重複運作的工具
自己寫shellscript雖然可以達到類似的功能
但是每個人寫的方式又會不大一樣
所以在交接上會有額外的成本
然後看到有自動化組態的工具 就開始研究啦
挑ansible主要是因為他不用額外裝angent
ansible galaxy也有很多東西可以參考跟運用
所以就挑這款了
最後還是回歸昨天的主題
要有知識基礎才能讓選擇用最小的代價得到最大的回報
MySQL入门学习笔记——七周数据分析师实战作业 - 后端 - 掘金
這類文章說明的很少
要看的很多
不過如果看懂就可以得到很多東西
PS 在寫這篇文章的時候我還沒看完這篇Orz
Javascript将html转成pdf,下载（html2canvas 和 jsPDF） | NoBB开发圈
工具加經驗文
有看過就多一項武器可以備用
【译】React 应用性能调优 - 掘金
我沒用react 但是我覺得這類文章都不會只講react
所以也都會點開來看
才會看到這篇標題打react 結果主要概念是前端優化的文章
其實用途很廣 所以不能被標題騙到XD
temme：优雅地从 HTML 提取 JSON 数据 - 前端 - 掘金
一樣是工具文
之前看過jq 現在再看到這個
就覺得組合起來威力會很大
在 Docker 中使用 Laravel schedule | Laravel China 社区 - 高品质的 Laravel 开发者社区 - Powered by PHPHub
這篇其實是看來驗證自己想的作法對不對的
看完回應也會覺得大家想的差不多XD
今天看的文章",,"['新東西出來的太快了', '舊東西沒用?', '選擇重點', '自己的經驗', '最近做的幾個技術選擇', '結論']","['vue', 'laravel', 'docker', 'phpstorm', 'ansible', '技術文章分享']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190988,ModernWeb,1,30天使用Node.js在AWS上開發後端系列,4,30-4Node.js開發後台之會員相關規劃,neilwang,https://ithelp.ithome.com.tw/users/20107336/ironman,1512697273000000000,753,"現在要開始一些比較枯燥的地方了
要規劃會員系統免不了要稍微講解資料庫
其實資料庫可以很簡單的想成是一個圖書館
裡面存放的資料可以想成是圖書館的書
如果要快速可以找到書(資料), 一定要為書(資料)建立對應的區域(對應表)
要在對應的區域可以快速找到書, 我們需要建立對應表(索引)
資料庫就是這樣
要可以把資料新增/刪除/查詢/修改/建立索引
接下來稍微分析一下一個會員大概需要什麼

可以從上圖看到會員大概需要帳號, 姓名, 文章數, 追蹤與被追蹤人數
但是有些是在其他地方用得到的, 所以簡單歸納幾個
以上是大概規劃出一個會員的結構
結構就是所謂的schema!
稍微介紹一下MongoDB的用法
MongoDB主要有幾個比較需要知道的
簡單介紹幾個常用的MongoDB指令
用程式碼來說明應該更快
以下連接MongoDB, 是使用 MongoDB Native Driver, 也就是MongoDB公司自己出的函式庫
專門讓Node.js跟MongoDB可以連接的函式庫!
如果有點似懂非懂的
我超級推薦去看馬克大大的系列文
其實後端大部分的工作就是新增刪除查詢修改資料庫 (簡單看起來是這樣)
所以看完範例程式碼, 應該沒有想像中困難吧!
明天就是要準備把這些轉成更詳細的程式碼
絕大部分會是用程式碼來講解
我覺得與其抽象的去想像, 不如直接從程式碼看著學最快!
如果有哪部分看不懂的, 歡迎留言, 我會再努力修改
畢竟我還是希望這是給有興趣入門但是非本科系的人看!
感謝 <(_ _)>
30天要學這麼多肯定會很辛苦的
所以如果有時間, 真心希望去看馬克大大的MongoDB好文
我主要的重心都還是放在比較從程式碼去教學
不會講太多細部的東西
下一篇會介紹如何使用Node.js老牌的框架- Express
並且利用 Express Generator 產生專案
並且將資料庫的部分整合進去專案中
到時候會把code放上github
註: github是目前最多人用的線上版本控制的軟體原始碼代管服務",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190797,ModernWeb,0,重新學習網頁設計系列,5,DAY5.CSS選擇器Selector(三),CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1512694814000000000,711,"屬性選擇器：屬性值完全相等
html
selector
說明
此範例只會改變帶有屬性foo且值等於bar的元素，因此I love HTML
即便符合屬性foo但依然不會改變顏色
屬性選擇器：屬性值包含
html
selector
說明
此範例只會改變屬性foo且帶有bar值的元素
I love HTML 帶有屬性foo但沒有屬性值bla因此不生效
I love CSS 值為barbar而不是bar所以不會被改變樣式
I love JavaScript 值有bar與bla因此符合規則
屬性值開頭配對
html
css
說明
配對屬性href值為https開頭的元素，將其改為綠色
範例中第一個連結為https, 因此文字顏色會變為綠色
但二個連結為http開頭, 因此文字顏色不變
屬性值結尾配對
html
css
說明
配對屬性src值為.png開頭的元素，將其改為綠色
範例中第一個src值為.jpg結尾, 因此文字顏色會變為綠色
但二個src值為.png結尾, 因此文字顏色不變
範例中src值為隨意輸入因此並不存在, 實際執行測試回得到帶有alt值的文字。
但依然能夠看到src結尾為**.png**元素外誆變為綠色。
以訪問的連結
html
css
說明
現在網站內被訪問過的連結將會呈現為綠色
正在被執行時的樣式, 例如被點擊時
html
css
說明
現在當網站的button被點擊時的當下button會縮小。
當滑鼠移動至該元素上方時套用
html
css
說明
現在當滑鼠移動到網站的元素a上方時，該a的背景顏色將會改變。
焦點元素的樣式
html
css
說明
現在當我們要輸入文字到該input時，背景色會變為黃色
符合選擇器且帶有checked屬性的元素
html
css
說明
當元素被選取時, 改變樣式。
範例中的input被選取時將會有往右移動1rem的效果
符合選擇器的元素且沒有disabled屬性的元素
html
css
說明
範例中的p元素雖然沒有disabled但p元素本身就沒有disabled屬性的差異性
因此p元素文字顏色不變。
接著兩個input元素就如預期的帶有disabled屬性的input顏色不變
而沒有disabled屬性的input文字則變成綠色。
將元素屬性disabled=""false""是不會使偽類別:enabled生效。
符合選擇器的元素且沒有disabled屬性的元素
html
css
說明
範例中的p元素雖然有disabled但p元素本身就沒有disabled屬性的差異性
因此p元素文字顏色不變。
接著兩個input元素就如預期的帶有disabled屬性的input顏色改變
而沒有disabled屬性的input文字顏色不變
將元素屬性disabled=""false""是不會使偽類別:enabled生效。
選取符合選擇器元素中的第一個字元
html
css
說明
範例中的p元素的第一個字元E將會變為綠色
選取符合選擇器元素中的第一行文字
html
css
說明
範例中的p元素的第一行文字顏色將會變為綠色
但並不是遇到br元素才變色，如果容器寬度較小導致提早換行
一樣會變動第一行的文字顏色，而不是遇到br才變色。
選取符合選擇器元素但排除:not中所設定的selector
html
css
說明
範例中的CSS選擇器首先選取所有p元素
接著套用偽類別:not(:nth-child(2))表示不選第二個p元素
因此範例中的p元素只有第一個與第二個顏色變成綠色。
選取符合選擇器元素中的第一個元素
html
css
說明
改變p元素在父元素中第一個子元素且元素必須是p的p元素的背景色為黃色
選取符合選擇器元素中的最後一個元素
html
css
說明
改變p元素在父元素中最後一個子元素且元素必須是p的p元素的背景色為黃色
選取符合選擇器元素中的第一個元素
html
css
說明
改變p元素在父元素中第一個子元素p的背景色為黃色
html
css
說明
改變p元素在父元素中最後一個子元素p的背景色為黃色
額外補充
first-child與first-of-type, last-child與last-of-type在定義上非常相近
但差異其實很大，若讀者有興趣可以複製我的範例並且在div元素中改變第一個元素為其他元素
這時可以發現若是使用first-child不會有任何p元素的背景色發生改變
但若是使用first-of-type，就可以發現到第一個p元素依然被景色發生改變
而這就是其中的差異。
實務上在目前網站功能需求中其實早就大大的依賴這些CSS3 selector
當然還有更多我在此尚未提及的相關偽類別、偽元素
礙於時間我無法一一列舉出所有的資訊，更完整的內容大家可以參考w3school",,"['[attribute=""value""]', '[attribute~=value]', '[attribute^=value]', '[attribute$=value]', 'selector:visited', 'selector:active', 'selector:hover', 'selector:focus', 'selector:checked', 'selector:enabled', 'selector:disabled', 'selector:first-letter', 'selector:first-line', 'selector:not', 'selector:first-child', 'selector:last-child', 'selector:first-of-type', 'selector:last-of-type']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191000,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,5,[PixiJS-Day-05]我，與PixiJS,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1512694180000000000,683,"作為第一部份的最後一篇，我回到介紹自己，以及我使用 PixiJS 的情形
我的 GitHub:
https://eia.github.io

除了 PixiJS 外，我也喜歡玩各種有趣的技術
有時看看 three.js，有時看看 IoT，有時則是混用了不同類型的技術
試玩過的專案不少，有時是想到看到就想試試看
2016年玩 three.js 金字塔投影，一開始是同事問我金字塔投影的原理（當時的案例是在手機上放透明塑膠片放全息投影的影片），最後做成了 RFID 感應的金字塔投影互動

這個案例與 PixiJS 無關，系列文章不會提到
有興趣的話可以看看我在 Modern Web 2016 的 分享
近期的話，則是某次看到手機版網頁蓋印章 / 蓋卡片的互動，雖然不知道各廠商實作的方式，倒是用想像的方法用 PixiJS 實作了一個:

系列文章後期會有這個範例的實作，敬請期待(?)
關於我：
我是數位代理商的前端工程師，會試著使用各種技術製作網站，也喜歡觀察不同網站使用各類技術的方法。
客戶或不同部門的同事，有時看到沒看過的網站或技術時會提問：
""這是怎麼做的！""
很多情況是別人家的網站好像就不會壞掉，自己家做的偏偏就會壞掉，別人家放的乖乖比較大包膩?
這個問題很有趣，還包含了幾個部分：
1.	 這網站看起來正常，我們做不做的到
告訴我這個網站的成本，如果是自製，需要多少時間可以做出來
如果研究有風險，是否在某段時間內設定停損點，尋找外援或是其他解決方法
2.	 這網站看起來正常，但我沒有用舊瀏覽器、不同手機系統與版本的 APP 測試
如果這網站在某些情況會壞掉，要跟我說網站會怎麼壞掉，什麼但書都沒說，就當做是不會壞掉。
我們做的也就不能壞掉喔!
3.	 我喜歡這個網站的功能，想要加上某些想法
想把各種功能混在一起，這樣的思考方式本身沒有問題
但某些功能放在一起是會爆炸的，沒有但書的情況就當做不會壞掉。
4.	 有時候並不是非得要所有瀏覽器都 100% 支援，但總要說哪些可以或哪些不行
慶幸的是，使用者的行為是可以分析與預測的
-	如果使用者是從社群平台來的，是否更需要針對社群平台自己的瀏覽器測試
-	如果是現場活動，是否需要考量 QR Code 瀏覽器
-	如果是官網，是否應以瀏覽器支援度為優先考量
我喜歡研究技術，也喜歡分享我的心得。
覺得把同事當作都聽得懂，或是把關鍵部份用非程式的說法表達出來，也是前端工程師可以練習的方向。
如果各方都理解情形，各種但書也先條列好
那就GO吧！
下一篇開始為第二部分：PixiJS 功能與方法說明
起手式：Renderer",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190987,ModernWeb,0,Expo---跨平台App開發從零到上架系列,4,ExpoDAY4---HelloExpo!,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1512693197000000000,687,"
本篇的首要目標是盡快地建立並執行第一個 Exp App。
在這個階段，我們應該要有一個已經安裝好 XDE 的環境，以及一組安裝有 Exponent 客戶端 app 的 iOS / Android 實體機或是虛擬機 / 模擬器。
初次執行 XDE 之後，你會看到一個詢問使用者名稱及密碼的提示。不要猶疑，請填上任何你想要的使用者名稱/密碼，然後按下繼續 — 如果該使用者名稱沒有重複，我們會自動為你建立該帳號。
按下 Project 並且選擇 New Project，然後選擇 Tab Navigation 選項 — 這個樣板帶給我們一個好的開始 — 然後輸入你想要的專案名稱。因為我正在寫教學，所以我決定要叫做 expo-tutorial。

接下來 Expo XDE 就會替你打理好一切，包含該死的 node_module。
這種重新奪回主動權的感覺，很不錯吧？你終於知道它在幹什麼了。這就像你高舉雙手，告訴那堆由液晶面板、金屬、PCB、一些矽晶片、鈔票，以及可能還有一塊電池構成的聚合物，誰才是主人。真不錯。

接下來，決定你的專案要存在哪裡。我個人會把所有我的酷玩意兒通通放在 /coding，所以我選擇該路徑，並且按下打開。
XDE 現在會在你所選取的目錄初始化一個新專案，包含：一份複製過來的基本樣板，以及安裝 react，react-native 與 exponent。
當專案初始化準備好之後，你會看到 XDE 的 Logs 視窗出現 React packager ready. 字句。這個 React packager 是一個簡單 HTTP Server，它使用 Babel <https://babeljs.io/>_ 替你編譯 app 所需要的 Javascript 程式碼，並且提供給你的 Exponent app 使用。
你會在 XDE 上看到類似 exp://jv-8wr.iamcxa.my-new-project.exp.direct:80 般的網址，請把 exp 換成 http 後直接使用瀏覽器開啟它。
你將會看到一些 JSON 格式的內容。這個 JSON 就是 Exponent Manifest，它讓我們可以透過開啟 Exponent app 並且在 address bar 貼上該網址來開啟自己的 app。

或是試試另外一個很狂的方式：點選 Send Link，輸入你的手機號碼（包含國碼如 +886912345678）或 Email，然後再次按下 Send Link。
隨後點擊收到的簡訊中的連結，你的 app 就會透過 Exponent app 開啟。你可以分享這個連結給任何已經安裝 Exponent app 的朋友使用 — 但要注意的是，它將只在你的 XDE 正在執行中且有開啟對應專案時有效。
要在 iOS 模擬器中開啟 app，你可以點擊 Device 按鈕，然後選取 Open on iOS Simulator（macOS 限定）。要在 Android 模擬器中開啟 app，你需要先啟動模擬器，再按下 Open on Android。

在你的專案中開啟 screens/HomeScreen.js，然後修改 render() 函式中的任何文字字串。你應該會在你的 app 重新載入後看到你所做的變更。

預設 Live reload 就是啟用的，但我們還是來看一次如何啟用的步驟吧！有時候事情就是不會隨著你所希望的那樣運作。
首先，確保 XDE 的 development-mode 已經啟用。
關閉 app 然後重新開啟。
當 app ㄧ經重啟，搖動你的裝置以開啟 Developer Menu。如果你用的是模擬器，iOS 請按下 ⌘+d、Android 請按 Ctrl+M。
如果你看到 Enable Live Reload，你的 app 會在你按下它後隨即重啟。如果，你看到的是 Disable Live Reload，那麼請離開 Developer Menu 然後試著做出其他變更。

終於，你已經完成建立一個新的 Exponent 專案，同時做出程式碼變動、而且看見你的 app 動態更新。恭喜你！",['Expo DAY4 --- Hello Expo!'],"['前言', '建立帳號', '建立專案', '在你的手機或是模擬器上開啟 App', '作出你自己的變更', '恭喜！', '現在就做看看', 'Refs']",['沒有變化嗎？'],,,['tags: iThome鐵人賽2018 ReactNative Expo day4'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10191002,DataTechnology,2,MicrosoftBotFramework30天上手系列,2,WhyTypeScript,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1512693100000000000,683,"因故重新撰寫發文
開發Botframework 可以選c# 或node.js
而node.js是用JavaScript語法。
故可以使用type script ,
但主要是講botframework,
故 Type script 的部份，
讓我一章帶過吧。
https://code.visualstudio.com/docs/languages/typescript
https://www.gitbook.com/book/zhongsp/typescript-handbook/details
TypeScript具有类型系统，且是JavaScript的超集。 它可以编译成普通的JavaScript代码。 TypeScript支持任意浏览器，任意环境，任意系统并且是开源的。
閉人在從 andorid 轉到開發 node.js應用時，
最大的困擾就是，
js無法再開發階段就可以偵錯。
例如
let a = i=>i+1;
我想要的得到的是 數字 相加的結果。
可是當我誤輸入 a(""a"")，也是會回傳 ""a1""，也是不會報錯，
這可是天與地一般的差距啊。
用 typescript
let a =(i:int)=>i+1
若我輸入 a(""a"") 就會先報紅，
而不用等到最後輸出結果時，
才會發現這不是我要的，
這是其中一個最基本的好處。
*註 botframework 本身就是使用 type script 做開發。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10191001,ModernWeb,7,前端工程師養成手冊系列,5,要掌握一個技能，將自己丟在對的環境超重要,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1512693010000000000,1244,"雖然進公司已經有段時間，但還是打從心底對我的工作充滿疑惑，在 2007 年時根本沒有所謂「前端工程師」的職稱，再加上那時軟體社群也沒那麼蓬勃發展，周遭也沒有任何同業朋友可以問，以致於我會不停地問自己，自己寫的 CODE 有跟上業界標準嗎？我到底該做到什麼程度才可以稱得上自己是一名資深工程師？現在領的薪水跟其它人比起來算高嗎？會不會過了明年，老闆就會嫌我的技術都沒進步而炒了我？
那時多希望有問題時，周遭就有同行可以一起交流，一定有人比我厲害一百倍以上的大神，就算看不到他的車尾燈，至少有前人的經驗讓我追隨。我想要變得更強，但我好孤獨，身邊沒有夥伴共同研究程式，多麼希望有人可以和我並肩作戰，一塊變強，就算天塌下來我們也能聯手出擊突破困難。
這種忐忑不安的心情一直困擾我許久，我希望能夠找到一個歸屬，大家都是同行能夠互相討論。為了打破現況，於是決定自己去找尋前端夥伴們。拜現在網路發達所賜，現在要投入新技術，並進入一個充滿互相學習研究的環境與夥伴也好找多了，也分享些方法給你。
以學英文當例子來說好了，當你在台灣時，大家都講母語，你自然不會覺得英文是很重要的事情，但如果哪天把你丟在國外一年呢？你如果不大膽說英文的話，可能連吃飯點餐都有問題，在馬斯洛的需求層次理論中提到，基本需求最強的是「生理需求」，若你不會講英文，有可能你就會餓死，就算英文再怎麼破，你一定會試圖逼自己講，逼自己英文進步。
同理可證，當你有意轉職前端時，你自然要把自己丟在一個環境上。最好那個環境每個人都在瘋狂地學前端，就連前端大神每天就像有用不完的時間般學新技術，在那種情況下你會覺得自己再不努力就會被甩在後頭，你永遠也追不上他們。
要在自己的生活圈找到夥伴相對困難，並不是那麼多人對程式有興趣。但在網路上找就真的一把抓。尤其在台灣 FB 社群盛行下，每一個興趣都可以組成粉絲團、社團共通交流討論，以前端來說較為盛行的是以下社團，其中高雄前端社群則是我 2013 年所創立。
每天都有許多新中老手交流前端趨勢、技術討論、職缺交換、深度軟文、線上線下聚會等等，讓你幾乎無時無刻都能掌握前端潮流，追蹤一兩個月自然能對前端產業有更深入的瞭解，而且不時就會有人在社團裡開線上讀書會、技術討論會，就可以藉機加入，跟和你程度差不多的夥伴線上學前端，豈不妙哉？
FB 社團上動輒就是數千、數萬人在群裡，有時候你想發問，但又感到壓力覺得好多人看著自己，不敢舉手時實在感到可惜，但如果你本身已經找了很多資料，真的走投無路時還是會鼓勵你發問，假使擔心採到別人的雷，會相當推薦你看這個提問的智慧，當你都將裡面的細節都顧慮到再行發問時，相信大家會對你很友善的。
另外一個方向就是可以在社團上尋找別人創的 @line、slack，像以高雄前端社群也有自己的 slack，在比較私密的聊天環境也能大膽發問與請教。
以目前實體聚會活躍性來說，台北、台中、高雄都有許多的前端聚會，加入實體聚會好處多多，例如可以多認識些前端同行，交換職缺訊息、聊八卦、聊技術，如果你生性害羞可以替自己下一個小小的目標，只要能深入認識兩三個同行就不錯了，有聊得來的對象也可以加通訊好友保持聯繫，如果找不到話題給你不讓人尷尬也能聊得很熱絡的抬槓懶人包：
「你也有寫前端嗎？(廢話」
「最近有在摸什麼新技術、項目嗎？」
「這聚會你常來嗎？有沒有推薦的聚會或線上群組？」
「想要在這裡附近找前端工作，但還在尋覓中(交換職缺情報」
「有沒有推薦工程師必備的軟硬體或裝備」
「最近自己在學XXX，但找不到好的投入方式」
那如果你並不是在這些縣市的話呢？線上技術討論會除了一直程式直播社團外，我尤其推薦線上讀書會，他們是一群使用 ZOOM 會議軟體來線上交流的熱血開發者們，每一天都會開好多場線上聚會分享技術，尤其前端也不在話下，不信的話你去看他們誇張的 youtube 影片就知道了，當他們在舉辦線上前端聚會時，就可不需參加，所有參與費用皆是免費的。
現在線上聚會也越來越盛行，以我來說，我創立的六角學院也有許多協助就業的 @line 群組，就算我不在學生身邊，我也能透過遠端協助他們。同時將差不多程度的學生拉入相同群組，不同縣市的學生也會因此覺得有些夥伴在線上一塊努力投入前端，無形間也給了他們一個能夠自主學習的競爭環境。

稍微解釋一下共用工作空間，就是一個單位擁有開放空間，讓各行各業的人都可以來辦公，會提到「共用」就表示有些東西不是你個人專屬，例如「咖啡機」、「白板」等都是共用，收費方式大部分有一天、一個禮拜或是一個月都有。
你可能會想說這跟前端有什麼關係？Coworking Space 不單純只是開放空間這麼簡單，舉例來說你旁邊做了個設計師，你是工程師，後面又做了一個後端工程師，那偶爾你們就可以互相認識組隊去拿下一個案子或做些有趣的項目。或是你想學習一個技能，就能請教裡面擅長此技能的朋友以達到技能交換。如果你是南部人，我尤其推薦你去台南的好想工作室看看，創辦人 Howard 是名非常熱血的開發者，同時也無償免費培訓軟體工程師。更重要的是「交流氛圍」強到爆炸，每位學員都會自主找東西學習，當有人卡關時，周遭就會聚集人潮一起討論細節，在這種環境彷彿進入精神時光屋，待一天的時間勝過你單獨學一週。
今年台中也有 Monospace，個人也非常期待他們的發展。
有時候在投入一項技能時，你會發現在 Google 資料或在社團上常會看到幾位開發者發文或部落格，那就代表他們或許在業界已經有段時間，或者是已經是講師等級。你也可以使用社交服務上的「追蹤」，雖然平常時間都會分享些與技術不相干的東西，但如果是前端時勢、技術走向等東西，往往都可以從他們的貼文得知最新趨勢。
如果這些有經驗的開發者又有在授課，那就很值得去參加，一來可以認識講師、二來可以從他們的業界實戰談獲得寶貴經驗。
希望這些方法能夠適用在你身上，讓你能夠浸淫在前端領域當中，學習效率自然能夠倍速提升，那如果還是不得其門而入的話呢？那就不要害羞來找我吧，能看到這篇文章表示我倆有緣，提供方向我也是相當樂意的 :D ，能推更多的前端同行入坑在所不辭啊~ (喂
",,"['為什麼說環境很重要？', '線上找學習夥伴', '不好意思發問，你還有即時通訊軟體', '加入線上線下前端聚會', 'Coworking Space 共用工作空間', 'Follow 前端開發者臉書', '結語']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190998,ModernWeb,1,JavaScript基礎二三事系列,5,Day05　變數與函式環境、外部參照,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1512692785000000000,687,"執行JavaScript時，接收到翻譯的電腦會先創造一個全域執行環境。當程式呼叫函式，就會在全域環境中創造該函式的(區域)執行環境。而每個執行環境不論全域或區域，都有屬於自己的變數作用域存在。
來看看以下程式碼：
這樣會顯示什麼呢?

在創造與執行階段，發生了什麼事?我們按照順序來看：
所以雖然myVar被宣告了3次，但因為它都在不同的執行環境中，所以這3個其實是不同的變數。
如果我們在剛剛的程式a(); 下面再加一行console.log(myVar);
執行後回發現重新印出myVar仍然顯示1，因為這個myVar就是原本全域的變數myVar，代表其實他沒有被覆蓋掉。
如果函式裡的變數宣告沒有使用var呢?
看看以下程式碼
執行 結果是

console.log(myVar);這段程式碼是在function b中
b這個函式中根本沒有宣告變數
那為何會印出1而非undefined?
當函式中使用到沒有定義的變數時，JS會接著到外部環境尋找(外部參照)，注意這裡的外部環境不是指呼叫這個函式的執行環境，而是指定義宣告這個函式的外部環境。
函式b是在全域環境定義，在函式a中呼叫執行，既然是向定義環境找，所以函數b的外部環境就是全域環境，而不是函式a，故它就找到全域環境的變數myVar，最後印出1。
再看看以下程式碼
這樣會顯示什麼呢?

為何b會報錯?
因為全域執行環境找不到function b，function b是被定義在function a的環境之中，而全域執行環境只有看到function a的定義存在。
那為何一開始又會先顯示2呢?
當外部環境呼叫執行function a，a裏頭宣告了變數myVar賦值2，再呼叫執行function b，此時執行function b裡的console.log(myVar)，因為b裡面沒有宣告myVar這個變數存在，於是便往外部環境查找，也就是外部定義的環境，b是定義在function a中，所以找到的自然是function a的myVar，顯示印出2囉。
上述筆記了這麼多，那有沒有強調區域性的宣告方式?
讓變數在使用不會這麼複雜，沒宣告就會報錯，而不是外部查找。
還是有的!那就是使用ES6新增的let宣告!
let具有區塊範圍(block scoping)特性，用let宣告的相同變數名稱，在全域、區域、不同執行環境彼此互不影響。
　
　
　
小結
今天我們知道全域執行環境就有全域變數、區域執行環境就有區域變數，並且知道當區域內找不到變數時會向外查找，向外查找的外部環境是指外部定義的環境，不能直接認定就是全域環境與呼叫的環境。
　
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分2-14~2-16",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190999,自我挑戰組,0,2017挨踢人生大事紀系列,5,挨踢鳥事滿天飛-點陣式印表機無法正常列印時！,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1512692135000000000,756,"挨踢鳥事滿天飛...真的寫不完！
今天來道選擇題好了，也許比較簡單一點。
[選擇題]
點陣式印表機無法正常列印報表時，問題可能是：
(1.) 點陣式印表機故障。
(2.) 電腦驅動程式異常。
(3.) 印製報表的系統異常。
(4.) 點陣式印表機連接埠線路脫落。
看到這題目，邦友一定會有異議，答案怎麼沒有：「(5.) 以上皆是！」
其實，要認真來說，答案還會有：
(6.) 電腦網路不通，無法傳送列印佇列。
(7.) 點陣式印表機連接埠安裝的網路裝置沒正常運作。
(8.) 點陣式印表機進紙方式誤觸成前方進紙。
(9.) 點陣式印表機色帶損毀！
感謝M$，如今又多了一個選項：
(10.)系統更新造成點陣式印表機異常！
也許選項還有(11.)、(12.)、(13.)...
沒想到吧~點陣式印表機的管理學問居然這麼大？
若是再納入碳粉式電射印表機、噴墨式印表機。
真的是很令挨踢頭大~
每次只要接到電話來求救：
「挨踢~印表機好像沒反應，可以幫忙一下嗎？」
上面的那些選項馬上就會在腦海裡轉轉轉...
到底是那一個選項，造成使用者的困擾呢？
搞不好答案不只單選？！而是複選！！
唉~好想找外包...",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190939,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,5,1-4.監控工具之一:ZabbixTemplates,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1512691933000000000,739,"
大概介紹一下Zabbix流程
1.建立Host時會要求選擇Group，可以有多個Group，分組可以用來做告警發給特定人士或儀表板等用途。
2.接著Link templates，templates可以增加監控項目 EX.ping，加速監控設定，當然也可以不用templates，直接在host建立專屬的items。
3.Triger監控items收集到的data，運算後觸發規則，轉換狀態從正常到告警
4.Action可以設定某個group或host，狀態變成告警，發送訊息給那些人
在1-3的時候有設定Template Module ICMP Ping跟Template OS Linux是已經預設好要監控什麼服務(item)

點進Template OS Linux裡面有許多items

Type:Zabbix agent 表示要裝agent才能收資料，其他還有IPMI(實體server)Snmp(網通設備)和simple check (ping or tenlet)...
Key: 旁邊有select 可以跑出功能選單
Type: 整數or浮點數
units: 單位，如果是回應時間這裡就是s
update: 更新監控時間，越短越頻繁
history:紀錄保持時間
Trend:超過紀錄保持時間會將數據依時間合併ex. 1小時的數值合併成最大、最小、平均值，減少空間消耗
在拉儀錶板數值時會因此產生誤差
Show Value: 假設收到資料為1/0可以轉換成up/down訊息

Linux CPU,Memory監控
預設沒有百分比顯示，自己對資料在做計算
Type選擇Calculated可以做數值運算
https://www.zabbix.com/documentation/3.4/zh/manual/config/items/itemtypes/calculated
假設100%-CPU idle% 為 CPU使用率

Memory預設使用使用量跟最大量，運用Calculated算出使用率
ping監控
zabbix icmp是使用fping做監控
https://www.zabbix.com/documentation/3.0/manual/config/items/itemtypes/simple_checks
icmppingloss[,,,,]
預設是60秒觸發一次 fping每1秒檢查一次共檢查三次
這個監控方式只能拿來偵測網路是否斷了，我們可以改設定為每2秒檢查一次共檢查30次
或者是10秒觸發一次，fping每1秒檢查一次共十次(很耗效能)",,"['從Template出發開始講', '用System uptime介紹一下', '進階應用']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190997,ModernWeb,2,ZerotoherowithReact.js系列,2,【Day2React】React環境設定採用Webpack和Babel,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1512691658000000000,732,"一個 React 的專案中我們需要什麼樣的函式庫？
這次不僅學習 React ，還要學習 Modular 的 coding style，所以這次就選用 webpack 來操作
在新專案裡面下指令
輸入 package.json 相關初步設定，跑完之後便會產生一個 json 檔案，紀錄你剛剛所輸入的資訊。
接著安裝 React 和 React-DOM
--save 說明這是 production dependencies（產品依賴模塊），可以省掉你手動修改package.json文件的步驟
接下來安裝 webpack，同時我要用 Babel 開發，因此也一併載了所有 Babel 需要的進來
webpack-dev-server 是一個小型的 Node.js Express 服務器,它使用 webpack-dev-middleware 來服務於 webpack
babel-loader 是將 Babel 裡的 ES6 語法轉換成 ES5 語法的 transpilier。
babel-preset-es2015 定義你可以使用的 ES6 commands，它定義了 transpilier 需要的邏輯，因此要一併載入
另外，React 也有在 Babel 中的專屬邏輯，因此要載 babel-preset-react
當我們把需要用到的工具都架設完畢之後，就是開始整理資料夾結構的時刻了！
先在你的專案下新增一個 src 資料夾，再新增一個 app 資料夾，之後 ReactJS code 就是放在這邊囉～
接著在 app 資料夾中新增一個檔案

在 src 裡面新增一個 webpack.config.js 的資料夾，我們可以在這個資料夾裡面設定 config webpack
path 是 Node.js 的預設 library
這行表示複製所有東西到 dist 這個資料夾，雖然這個資料夾還不存在，不過之後他會自動產生。
但是你要怎麼知道被 compile 前的原始碼長怎麼樣？這時就要定義
OK! 設定完畢之後我們需要再定義一個變數 config 指定 webpack 的配置
2.設定 output
定義 webpack 產出 output 之後要放的路徑、檔案名稱
這個定義的 JS 物件會被 exports，webpack 就會進到 config 變數裡面，讀取我們在裡面所定義的 config
完整的 webpack.config.js
設定完 webpack config 之後，我們就可以來操作應用程式啦！",,,"['安裝 React', '安裝 Webpack', '初始設定']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190861,SoftwareDevelopment,3,爬蟲始終來自於墮性系列,6,牛刀小試-IT鐵人瀏覽數,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512691305000000000,908,"好的，經過幾天的基礎建設，想必大家也都躍躍欲試了，我們今天正式進入實作部分。在每次實作，我們都會分為幾個步驟：
在最一開始，我們一定要知道為什麼要寫著個爬蟲，和目標是什麼。因為在研究爬蟲的過程當中，會產生很多資料，很容易令人眼花撩亂，有些資料對我們有用，但更多的資料是在我們這次的範疇當中無用的，若我們花太多心思在枝節上面，反而會讓我們更難找到核心道路。所以在實作的過程當中，只留下必要的路徑和程式碼，其他東西，不知道的、不必要的，一概不放進我們的 code。
當我們有了明確的目標之後，我們需要人工手動走一次最正式的流程，例如我今天要爬取 FB 的個人文章頁面，那我會開啟無痕視窗，包含我輸入某個網址、點了某個按鈕、送了某個 request，這些都必須一步一步走，走的過程當中，同時腦袋會開始思考「這個動作有沒有難度」。
在我們走完整個流程後，我們會針對整個流程下去分解，分成若干個小步驟，亦即說，若我每個步驟都完成了，那麼這個完整的流程就可以確保沒有問題。分解完後，打開 postman 一步一步去模擬每個步驟的 request。在模擬 request 的時候，我們也必須清楚 request 要送出的參數是否都能在我們的掌控之中。
最後，我們會開始實作程式碼，在這個階段，我會建議各位把每個步驟都當成是一個 function 來撰寫，一個一個完成。在完成所有 function 之後，我們再將整個邏輯像是樂高積木一樣組合起來。
那就讓我們來開始牛刀小試吧！
在參賽的過程當中，我都有觀察到訂閱數和瀏覽數，似乎是一種人氣，那我能不能為自己增加點人氣滿足自己小小的虛榮心？如何增加瀏覽數是我這次的目標。

我發現我只要點擊文章，瀏覽數就會增加，看起來好像有點眉目，我猜測可能只是文章網址開啟時候的 counter。

如此一來，我直接 refreh 文章頁面，觀察看看瀏覽數是否有變化，果然如我所預料。

接下來為確保不會受其他因素影響，我打開無痕視窗，再重新 refresh 文章頁面。瀏覽數持續有變化，這個時候嘴角就開始上揚了。
在這探訪的過程，大概已經確定只需要送一個 get request 到該頁面，我就能模擬這個動作，那直接使用 postman 來測測看吧。

確定模擬試成功的，就能進入程式撰寫階段了。
只有一個 request 的 get method 發送，那麼程式碼就非常的單純
實作之後確認可以增加瀏覽數，那就來跑個迴圈吧！
既然知道了他只收 get request 就會增加，那麼殺雞其實不用牛刀，我們直接對他做 ab 就好了XD
https://httpd.apache.org/docs/2.4/programs/ab.html
ab -n 100 https://ithelp.ithome.com.tw/articles/10190796
好的，滿足了小小虛榮心，那我們下回再見...
ps. 請工作人員不要砍我的文章QQ","['定義目標', '實際探訪', '分解研究', '實作程式碼']",,"['1. 起源，定義目標', '2. 實際探訪', '3. 分解研究', '4. 實作程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190995,SoftwareDevelopment,0,30天iOSAPP開發系列,2,[Day02]UI處理,d3764291,https://ithelp.ithome.com.tw/users/20107588/ironman,1512690974000000000,658,"打開Xcode後會有幾個專案分別為『Get started with a playground』、『Create a new Xcode project』、『Clone an existing project』。


建立單一頁面的APP


許多檔案中Main.storyboard為layout的檔案，本次將以此檔案為主

在整個Xcode的右方有許多元件可以直接拉入Layout
並且可以切換List view以及Icon View

本次會用到的僅有Label(用於顯示文字)、Button（用於顯示按鈕）

任意的將label及button拉入畫面中
點選拉入的元件後可以在右方看到該元件的屬性

在向下滑之後可以看到更多的設定

在畫面下方可以任意的切換Device，確認該Layout在不同的手機中所呈現的樣子

因此可以發現目前的排版排好後僅在其中一種Device可以較佳的體驗，換到其他裝置後會覺得排版很奇怪！因此需要Auto Layout的幫忙
可以在畫面中下方找到該按鈕，將『Horizontally in Container』、『Vertically in Container』點選後接著按下『Add 2 Constraints』即可將該元件水平置中以及垂直置中

如果是希望距離邊界多少點則可以使用另一個按鈕，例如希望與右邊界及下邊界個相距20點，則如圖輸入後按下『Add 2 Constraints』即可。

設定完後在不同裝置看到的結果如下：




swift playgrounds","['專案建立', '元件使用', 'Auto Layout']","['iPad Pro 12.9', 'iPhone X', 'iPhone X(橫)', 'iPad Pro 9.7(橫)']",['參考資料'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190859,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,2,資料分析師的學習之路(續),GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1512690902000000000,742,"資料處理部分最重要的有三個部分，「標記資料」、「資料清理」以及「特徵值篩選」。
標記資料的工作關注在訓練出模型之後想要預測的結果(也稱為Y或是被解釋變數)，訓練資料集當中必須要有這個結果，也就是正確答案(ground truth)，由於這些結果並不必然在原本的訓練資料集當中就存在，可能必須要事先標記好，才能夠讓模型在訓練的過程中學習。當然，標註資料並不是一個必然的工作，有兩種情況事不必另外標注資料的，第一狀況是你本身的訓練資料集已經事先或自動標註好，第二種狀況是，你所做的訓練並是非監督式的學習(unsupervised learning)。
而所謂非監督式的學習，如上所述，不需要有事先標註好的正確解答，當然希望達成的結果也不在預測，而是給出一個可能相對較好的解決方案。舉例來說，機器學習中的分群演算法即是如此，假設你手上有一堆新聞文字，你希望可以把它自動分進去「社會類」、「國際類」、「體育類」......但是你手上並沒有分類好的資料去訓練分類器，那麼你可能就可以用分群演算法去把項近的文章分在同一個群組當中。
雖然整個機器學習領域當中最迷人的部分是演算法，不過根據某一份調查矽谷資料科學家的研究表明，絕大多數的資料科學家最討厭的作業其實就是資料清理，但是命運弄人，他們花最多時間的部分也就在這個部分。雖然這部分很無聊，也沒什麼技術，不過很多時候卻扮演著極為重要的角色，俗話說garbage in, garbage out!所以這個部分可能也會花一點時間說明。
所謂的特徵值，也稱屬性，在表格上面通常是column的header，在統計學上叫做解釋變數。舉例來說，我們有一張資料表如下:
假設我們透過這張資料表進行訓練，希望訓練好的模型，可以在得到某位會員資料後，就可以預測出他會不會買電腦。而這裡所謂的特徵值也就是「名稱」、「是學生」、「年紀」、「收入」這些欄位，會不會買電腦，也就是上面我們所說需要被標註的資料，不過因為這已經北記錄在電腦中，也就無須被另外標註。
至於特徵值的篩選，則是機器學習領域當中極度重要、也極具藝術性的環節，這個部分就留待相關章節說明啦。
訓練資料目前比較常被討論的方法有三個: 機器學習、深度學習、迴歸分析。迴歸分析一般用來處理練續變數的參數估計與結果預測，所謂連續型變數指的是可以加減且具有倍數關係的變數，像是價格、身高或是重量，通常社會課學領域中比較喜歡使用，因為他們大多時候比較關注某一解釋變數對於被解釋變數的影響，而相對不在意預測的結果，好玩的是，依但你希望預測的準，很多時候解釋變數之間的關係已經複雜到很難被用文字的方式表達出來了；
而所謂深的學習，則是汲取數學、統計以及資訊三大領域的智慧所打造出的技術，這門技術最性感的地方莫過於一樣樣值得讚嘆感恩的演算法；至於最近最火紅的深度學習，則是透過極度複雜的函式，做出最多種可能的預測，並透過逐步挑整函式中每個變數的權重，逼近最準預測的可能，當然深度學習的運用已經遠遠超出純粹的預測，很多創造性的工作，寫文章、產生圖片、玩遊戲等等，不過這就不再這個文章集討論的範疇了。
總體來說，我想這會是這整個資料集中最精化的部分，不過因為篇幅因素，我想我只會交代機器學習中的分類演算法，至於回歸分析、深度學習，就請各位客觀發揮各位的求知慾，上網顧狗吧。","['資料處理', '資料訓練', '本文集架構安排']","['標記資料', '資料清理', '特徵值篩選']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190990,自我挑戰組,0,"Let's""Go""系列",2,Day02　Go,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1512690702000000000,641,"Go 是 Google 於2009年11月10日正式推出的程式語言
Go 相對於其他程式語言，提供了容易使用的 Goroutine 方法，透過 Goroutine 可以讓程式並行處理
到官方網站下載 https://golang.org/
後一章我們將有更仔細的說明",,,"['Go?', 'Why Go?', 'How Go?']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190991,自我挑戰組,0,,4,大數據跟小數據，到底數據在忙什麼？,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1512690610000000000,642,"Data，資料，也稱為數據
這幾年也是默默地紅起來，因為產業資訊化，很多環節的資料可以被更容易地收集跟分析
資料越多，也需要更多不同的方法來進行整理與歸納。才能找出可能有用的資訊，或是某些深藏在資料中的東西
資料工程師(Data Engineering)、資料科學(Data Science)、資料分析(Data Analytics)、資料挖掘(Data Mining)
這些都是跟資料有關的子主題。
預測分析(Predictive Analytics)：從過去資料進而分析未來的架設情況。
資料視覺化(Data Visualization)：使用容易理解的圖像去進行資料的說明與解釋。
目前資料科學也是近20年新興的一門工作，畢竟大量資料產生雖然很久以前就有，
但是自從網路跟現在智慧型手機普及，資料的產生已經是指數性的爆炸成長了
自然就更需要各種大量數據分析的人員與對應工具或是技術。
目前為止，這個主題只有九個人報名
Hadoop ecosystem 工具簡介, 安裝教學與各種情境使用 - 5/30
Python學習筆記 - 5/30
職場老鳥的資料科學初體驗-R語言專案實作紀錄 - 3/30
R的學習心得 - 0/30
R x Shiny x Visualization - 0/30
自動化可擴展式Spark教學 - 0/30
你都在公司都在幹啥R？ R語言資料分析經驗分享 - 0/30
使用Python進行資料分析 - 0/30
藝術X性別X資料科學 - 0/30",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190992,ModernWeb,0,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,4,FlowChart&UIFlow,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1512690441000000000,621,"前面 functional map 在做發散思考，這裡的二個工具則是用來做功能的組織及收斂思考。
Flow chart 是流程圖，通常由SA製作，不過各位工程師在構思功能時應該會畫過功能的決策流程。Flow chart 則是使用者在完成他的任務的過程中，會經過的步驟以及做的決定。
UI Flow 是畫面流程，使用者在操作任務的過程當中，會經過的頁面，由 UI 設計師製作。並不是只將二個頁面用箭頭連起來就行了，重點在於，需要標註是按了哪個UI元件才換到下一個頁面。
Functional map 裡每一個功能最好都有一個 flow chart 和 UI flow，這有助於我們在還沒有動工前先安排好前因後果。二種工具沒有哪一種要先做的規定，如果案子已經有舊的畫面，可以先從 UI flow 做起。在A公司案子裡我有偷懶沒有畫 flow chart，只有做 UI flow，又因為是新案子，沒有舊畫面，我仍然是參考 Akene 設計師的經驗，用文字來代替各個畫面，並且加上數字，方便等一下畫 mockup 時分類。

我是用 macOS 內建的 Keynote 簡報軟體畫圖，因此 Power Point 或是 Google Docs 的 Slides 也可以。
如果想要畫得更好看，可以找 ""sitemap template"" 這類的資源，有別人畫好的頁面圖示，你只要排成自己的流程就可以了。推薦 Ant design 的 sitemap template。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190993,AI&MachineLearning,1,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,4,04.BotTemplate說明與發佈於Azurewebapplication,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1512690326000000000,634,"上一篇我們註冊了一個新的機器人、下載 Bot Template、建立了第一個機器人程式與了解模擬器如何使用，跨出了一大步。雖然實際操作部分仍屬順利，但避免對於系統流程一頭霧水，這一篇我們介紹整體流程、簡單說明程式與如何發佈程式到 Azure Web Application。
如果有看過第一篇文章，應該對於下面這張圖不陌生。上一篇我們的操作在於紫色的 Bot Connector 作業(部分設定) 與 黃色機器人程式作業。而後續幾篇篇會開始進行更多 Bot Connector 的設定 (如加入 Skype、Slack與 Facebook Message Channel) 與建立更多服務在機器人程式上。

理所當然，每個區塊的介接都需要有些方法。比方像是我們的機器人程式是一隻 Web Application，提供了一個介接位置提供服務，當你用正確方法(HttpPost)、授權(ID 與 Password)與傳入參數，就可以與機器人互動。
模擬器免除了組裝參數的工作：若你還有印象，當我們啟動機器人程式後，於模擬器輸入介接位置與授權，就開始了與機器人的互動。

Bot Template 的範本所提供的範例，似乎是回傳你送出的內容與字元數。

這是一個 ASP.NET MVC WebAPI 的應用程式，仔細WebApiConfig.cs 與MessagesController.cs你會發現它提供了 api/Messages 位置、HttpPost 方法、與 Activity 傳入參數的服務。 Controller 內還有一個私有方法。

初步看見傳入訊息的類型為 ActivityTypes.Message 時進行某些動作，否則則呼叫私有方法，最後回傳狀態碼 200 表示成功。

私有方法是對於不同的 ActivityTypes 進行處理。

這段有點複雜，但似乎透過 factory 方法產生新對話方法(MessageReceivedAsync)並初始化，然後這個對話狀態等待下一次收到訊息時恢復並執行方法。不幸中的大幸是我們很明確的邏輯(計算字數與回傳)在哪，方便我們未來開發程式。

Step 1. 對專案點選右鍵 → 發行

Step 2. 選擇 Azure App Service → 建立新的 → 發行。

Step 3. 輸入相關資訊 (App Service 可以選擇免費層) → 建立

Step 4. 發佈完成，請記下這個位置

Step 5. 回到 Bot 設定，輸入endpoint 位置 → 儲存
註：記得將 http 改成 https

Step 6. 點選右上角測試，輸入資料，可以發現機器人成功回話

Step 1.  輸入 endpoint 、ID 與 Password

Step 2. 前往 ngrok 下載 ngrok 並解壓縮

Step 3. 開啟 App Setting

Step 4. 瀏覽 → 選擇 ngrok.exe → Save

Step 5 .測試成功
","['前言', '系統流程', '簡單程式說明', '上傳機器人程式到 Azure Web Application', '透過模擬器遠端連線 Azure Web Application']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190974,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,3,(Day3)HelloWorld!,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1512689534000000000,628,"Step1: 開一個新的RScript

Step2: 輸入下列文字
Step3:執行程式，執行方式有：

單行：移動游標並停留在欲執行的那行",,"['R注意事項', 'Hello World@R語言']","['善用提示功能 無需死記', 'R相關注意事項']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190986,自我挑戰組,1,數位遊牧民族（DigitalNomad）系列,4,第四天-尋找coworkingspace或cafeshop,alincode,https://ithelp.ithome.com.tw/users/20092025/ironman,1512689215000000000,614,"相信大家都已經順利抵達清邁了，一號出口有公定價的計程車服務站，雖然貴一點點，但是至少不是被騙，之後再介紹更便宜的交通方式。

在清邁市區大概五家店，就有一間是咖啡廳，而且每間店一定都有提供 wifi，所以身為一個 DN 這裡簡直是天堂啊。
這怎麼找適合的工作地點呢？推薦大家一個 App 叫 workfrom，它會列出附近對於 DN 工作者友善的咖啡廳或 coworking space 地點，除了網頁版之外，也有 ios 跟 android app 可以裝歐。
遠距工作者在台灣 FB 社團",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190977,自我挑戰組,0,delphi菜鳥入門日記系列,4,delphi菜鳥入門日記-Day4計算機補充說明,getfree84419,https://ithelp.ithome.com.tw/users/20107544/ironman,1512688983000000000,589,"大家好!我是Kiang很高興又見到大家，
不過我要先跟大家講一個不好的消息，我確定要進去軍中盡我應當的義務QQ
也有看到網友留言，一中斷就重算....
不過想我還是會盡量撥空找時間更新的，
就算我事情多到必須要加班嗚嗚
由於今天我加班比較晚下班，沒有時間準備我的東西，
所以我就來講解一下昨天的計算機我後來發現的BUG吧!!(趕工出來的東西...看來我還差的遠呢)
不知道認真的各位有沒有發現呢?
其實昨天的計算機沒辦法算小數點、在特定情況時按下 = 時會刪除運算元!?
OK!首先小數點就請幫我建立一個新的按鍵事件
然後改一下我們計算的公式
好現在大家一定有疑惑，為什麼不直接宣告成Float就好了呢!!?
因為
不要問我為什麼，我也很疑惑!!
然後下面型態轉換還使用StrToFloat.....WTF
既然沒有那我們只好使用Double，可是卻沒有StrToDouble...
總之這樣就可以算有小數點的數值了!!
再來就是 = 按鍵事件
TryStrToInt(字串,存值得變數)
Copy(字串,起始位置,取幾位)
這樣就可以避免在沒有第二數值時刪除運算元囉!!
再來還有一個很重要的事!!
除數不得為0，所以我們必須把她擋起來~
然後你就會發現，挖 ~ / 越按越多(恩..bug就是這樣越來越多哈哈哈哈
所以
今天就到這裡，有想到甚麼要補充的東西會再回來補充，
總之我會盡力維持PO文習慣，就算我不能連續30天，
那我們下次見囉!!~睡覺去~","['delphi沒有float型態', 'delphi你TM在耍人嗎!!!!']",['這樣就可以確定部會一值新增 / 了'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190984,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,3,【Day3】安裝NUnit,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1512688842000000000,568,"本日要說明如何安裝NUnit
範例的執行環境：Visual Studio 2017 (VS 2017)
安裝版本：
於套件管理主控台中輸入Install-package Nunit

然後看到安裝完成的相關訊息就是完成了
（這邊僅示範安裝NUnit，其他工具也是相同的語法）
這是比較方便的安裝方式，可以快速搜尋到自己想要的套件，而且可以看到套件內容與版本。建議可以使用這個快速工具。
首先搜尋NUnit，找到NUnit 3.9版，然後點擊安裝。

接著會跳出，相關的版本訊息。確認後，按下「確定」。

順利安裝完成會顯示「已完成」。

在同一個畫面，可以看到下方有NUnit.Runners，就直接選擇安裝吧！

由於這是跑執行Unit Test的環境，所以此工具包底下，會有很多工具。看到這個也別怕，直接按下去就對了，VS會幫忙一起下載。

當出現已完成，就是好囉！

在更下面有一個套件，叫做NUnit3TestAdater，就直接按下「安裝」吧。

一樣跳出安裝訊息，就確認繼續。

看到「已完成」，就表示安裝好囉。

註：如果是使用NUnit2，則要選擇Adater2版的，也就是NUnitTestAdater。如下圖

以上三個套件都安裝完的話，表示可以開始玩Unit Test囉～
下一篇將會開始我們的第一個Unit Test，展開Unit Test的Hello world",,,"['方法一：使用console', '方法二：使用「NuGet封裝管理員」']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190975,ModernWeb,0,PHPlaravel的邂逅系列,4,DAY04-建立第一個laravel專案,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1512688658000000000,596,"第一步當然是開啟終端機囉
step.1 先到XAMPP底下的htdocs資料夾

step.2 新增專案，指令打完按enter，就會開始安裝了，專案名後面也可以接版號，如果不打就是最新的版本

step.3 移動到專案目錄底下
step.4 啟動專案，打完指令按enter

step.5 測試是否成功，網頁出現laravel就是成功啦，終端機中可以按著command點選網址也可以直接開啟
",,,['我們的前置作業都已經完成了，現在就可以來建立第一個專案囉'],,['內容都以mac為主喔，有疑問都歡迎留言一起討論。'],,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190783,自我挑戰組,0,iflen(learning.python)==30:系列,4,Day4-List-特性,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1512688016000000000,596,"list有mutable的特性，意即該物件在創建後可以被修改。要如何確認呢?使用id()，物件內容會變但id不會變。與之對應的概念是immutable，意即該物件在創建後不能被修改。
有點類似Java當中String和StringBuffer
在創建字串時可以用+連結或是利用list mutable的特點減少資源，但感覺python有針對+連結字串優化，在第一次+後，第二次開始所對應到的物件id看起來是同一個。
利用=指定list到另一個變數，原變數和新變數所對應到的list物件為同一個",,"['Mutable', 'Assignment', '參考']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190985,ModernWeb,1,TypeScript-初學之路系列,1,Day01-InstallTypeScript,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512687394000000000,610,"寫了 Javascript 一段時間
Nodejs 與 Javascript 前後端之亂
出現了 browserify 來統一了前後端
近幾年的 ES5 ， ES6， ES7 大亂鬥
也需要由 babel 來緩和三個世代的戰鬥
但是快速發展的同時
版本之亂也是一個很大的問題
之前就有聽說過 TypeScript
直到近幾個月才有空開始玩了一下
也有它存在的優勢
所以就開始跳下來學習
趁著這三十天整理一下心得
有兩個主要的安裝方式
Visual Studio 2017 和 Visual Studio 2015 預設已經有使用 TypeScript ，但若是你不希望安裝 Visual Studio 你也可以安裝 TypeScript
helloword.ts
寫完之後要經過編譯才能執行
同一個資料夾中會多一個 helloworld.js","['緣起', 'Hello world']",['第一天當然就是要安裝啊'],"['Visual Studio', 'NPM', '哈囉 世界', '哈囉 TypeScript']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190908,DevOps,0,大型敏捷專案的DevOps系列,2,[鐵人賽Day2]簡單介紹微軟的Scrum「精神篇」,AkitoSun,https://ithelp.ithome.com.tw/users/20094400/ironman,1512687148000000000,722,"第二天的內容，我覺得應該先講一下微軟「做專案」獨特的Scrum精神
首先先來附上敏捷宣言:
藉著親自並協助他人進行軟體開發，
我們正致力於發掘更優良的軟體開發方法。
透過這樣的努力，我們已建立以下價值觀:
個人與互動 重於 流程與工具
可用的軟體 重於 詳盡的文件
與客戶合作 重於 合約協商
 回應變化 重於 遵循計劃
也就是說，雖然右側項目有其價值，
但我們更重視左側項目。
微軟的Scrum在做專案時，是「以用戶為中心的敏捷」，也就是User-Centric Agile Scrum
我們會讓客戶跟我們合作，但並非予取予求，而是真正的合在一起，變成一個One Team，
在此前提下，我們Developer不分彼此是來自微軟或是來自客戶，大家聚在一起都是以一個目標為導向去努力，
在進行開發時，我們甚至直接進到客戶公司，陪客戶一起開發，建立團隊時，也絕對不分客戶或微軟，不會有的Team都是客戶的人，有的Team都是微軟的人。
這樣做的好處是什麼?
微軟要求每個工程師都必須是Full-Stack Engineer，但每個人一定都有不會的技術，畢竟技術永遠都學不完的，但這並不是問題，問題是你有沒有以下三點
開放性思維的反例就是封閉性思維(Fixed Mindset)
當你常常思考「I am not good at that......」，看到有困難有挑戰時就想逃避，那你就是屬於封閉性思維
開放性思維就是當你遇到挑戰時，你所思考的是「I am not good at that......Yet!」
開放思維的思考是:訂定目標=>從他人身上學習=>加以改善
像這樣的循序漸進的持續學習，不斷地提升自己
最後達到兩個目標:
想寫得太多了，先在這邊告個段落，下一篇要開始寫實踐Scrum了","['以用戶為中心的敏捷', 'Open Mindset(開放思維)', 'Common Behaviors(基本認知):']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190980,ModernWeb,0,TypeScript初學之路系列,4,Day04-BasicType,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512685571000000000,595,"為了要讓更清楚的使用 TypeScript 會從最基本的元件 numbers, strings, structures, boolean, values 這類的動作， TypeScript 支援宣告這類型的 types
宣告最基本的 true/false 在 TypeScript 中稱為 boolean
和 Javascript 一樣，在 TypeScript 中預設的是浮點數
而這個類別統一為 number 也支援
另外一種工程師常用的類型是字串
這種形態使用 string 來做宣告，在 TypeScript 中都允許使用單引號(') 或是 雙引號("") 來做字串的宣告
你也可以使用 template strings，宣告使用 backtick/backquote(`)
這個 template strings 也可以寫成
TypeString 和 Javascirpt依樣允許你使用 Array， 宣告時使用 [] 來做類型宣告
Tuple 允許你宣告每一個參數的類型
好處就是當你明確的定義類型的時候，使用的時候就會有明確的錯誤訊息
另外一種特別的型別是 enum 你可以定義哪些允許的類型列表
你也可以設定 enum 得值
也可以直接定義 key值
我們要描述一個變數
但是在攥寫程式的當下不知道他的類型
這個值是屬於動態的內容
所以可以利用 any 來做宣告
any 類型相當的彈性
你也許會期望 object 也會有一樣的情況
但是 object 並不允許你呼叫任意的函式
即使他真的存在
void 有一點像 any
他並沒有任何類型
你可以在沒有回傳的函式中使用它
當你宣告變數為 void 的時候
你只能 assign undefined 或是 null
在 TypeScript 中 undefined 和 null 有他的類型就叫做 undefined 和 null
就像 void
他們沒瞎小路用
預設 null 和 undefined 是各種類型的亞類型
也就是你可以 assign null 或是 undefined 給 number 類型的變數
然而若是你在 tsconfig.json 中的選項 strictNullChecks 設定為 true 則 null 和 undefined 只能 assign 給 void 和他們的各自類型。
若是一個變數有多重可能
你也可以利用 union  類型
never 類型代表永遠不會發生
例如你的函式確認永遠都不會回傳任何值
那麼你就可以利用 never 類型
或是某一個變數永遠都是 false 你也可以設定他為 never",['Introduction'],"['Boolean', 'Number', 'String', 'Array', 'Tuple', 'Enum', 'Any', 'Void', 'Null 和 Undefined', 'Never']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190978,自我挑戰組,0,D3.JS網頁視覺化學習系列,4,Day4圖表簡介-圓餅圖（前述）,linonedollar,https://ithelp.ithome.com.tw/users/20107135/ironman,1512685542000000000,609,"圓餅圖，或稱餅狀圖，是一個劃分為幾個扇形的圓形統計圖表，用於描述量、頻率或百分比之間的相對關係。
今天要來分享學習的圖形是圓餅圖，這個圖常常用在表示各部分統計資料佔所有資料的百分比部分
但要注意的是如果資料過於相近，或者因人視覺上的差異容易造成認知上的錯誤。
如果要製作圓餅圖的話，我們會用到一個叫做**弧產生器(Arc Generator)**的東西
它主要包含了四個屬性，分別如下，以及對應的存取器
彼此之間在圓中的關係如下圖

今天的程式碼還沒打出來",,"['圓餅圖(pie chart)', '開始製作']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190979,自我挑戰組,1,30天的切版日記系列,4,Day4:人人都說Sass好，所以我來參一腳,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1512684729000000000,627,"都說Sass消除樣式表冗余、還有變數跟繼承的概念等等的，說有多好用就有多好用...
馬上來安裝步驟123....456
首先裝ruby然後裝sass
npm install gulp-sass --save-dev
外表看似簡單..突然發現似乎裝個gulp會更好
網路上七大姑八大爺，各有各的習慣，看來看去反正我的安裝步驟變成這樣
npm install -g gulp
npm init
npm install gulp -save-dev
npm install gulp-webserver -save-dev
var gulp = require('gulp');
var webserver = require('gulp-webserver');
gulp.task('webserver', function() {
gulp.src('./app/')
.pipe(webserver({
port:1234,
livereload: true,
directoryListing: false,
open: true,
fallback: 'index.html'
}));
});
gulp.task('default',['webserver']);
npm install gulp-sass --save-dev
var gulp = require('gulp'),             // 載入 gulp
gulpSass = require('gulp-sass');    // 載入 gulp-sass
gulp.task('styles', function () {
gulp.src('sass/style.sass')    // 指定要處理的 Sass 檔案目錄
.pipe(gulpSass())         // 編譯 Sass
.pipe(gulp.dest('css'));  // 指定編譯後的 css 檔案目錄
});
工欲善其事，必先利其器。 第一次安裝花了我6個小時（很容易卡在開發環境建置的人），總之慶幸自己沒放棄。
嘗試運用在一個網頁上，點這個
從需要寫這些

變成只要寫這些

先到這個階段",,,"['先gulp', '然後Sass']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190972,自我挑戰組,0,迷路還是繼續往前走的菜鳥工程師日常系列,3,[Day03]我在大學學了什麼東西？,overflow,https://ithelp.ithome.com.tw/users/20107577/ironman,1512684248000000000,675,"今天就來寫一些大學的作業跟心得吧！
資管系歸類在管理類別，所以大一課程就是那三個核心，管理學，經濟學，統計學，當時我是黑人問號，奇怪為什麼跟我想的不一樣！電腦相關的技術課程在哪裡～
大二之後比較有相關的課程，像是FLASH動畫設計、C語言、vb視窗程式設計、Java程式設計等等.....，這些課程上完，都可以實際看到東西，上起來總會有成就感一點，機率、統計、演算法.....那些雖然也是重要核心，但沒實際用上，就會覺得這是什麼為什麼要學？不過因為我目前用不到所以暫時感受不到他們的重要性，前輩曰「告錫你丟災！」
系上有二門課程是「ASP.NET」的網頁課程，主要是教你用webform的控制項去操作網站，進階課程則是教你會使用他的datalist、gridview、formview控制項去做跟資料庫的互動，完全不用寫一行程式碼，就可以做到新增、刪除、修改完全就是我這個沒天分的人的救星軟體阿！，當時接觸到就燃起了希望與熱忱，終於是我想學的東西了！所以學完後你可以擁有一個會員註冊登入和下訂單功能的網站

上面完全都是跟著軟體點一點就產生出來了，按下新增資料就會加到中間的表單，表單按選取後就可以編輯該筆資料，真的完全只要你會按下一步下一步就寫好程式了（神奇吧！
如果你對他有興趣 可以到Google下關鍵字asp.net webform 教學大概跳出來的第一個就有相關介紹了，不過這東西對大家來說可能已經不適合現在的需求了吧？有興趣還是可以去看看吧XD
小事件分享，因為老師有在外面授課，當時看到自己的學生來報名跟他說「這跟我在學校上的課一模一樣，你怎麼還來報名？」，老師分享的這故事告訴我，當你有資源可以好好利用的時候，何不用點心思在上面，到時候要付出更大成本的時候才來後悔。不過我想每個人都會這樣吧（我就是其中一個XD
但是只會這個東西，沒辦法活下去阿......，畢竟還是要會寫程式比較重要 
雖然有學了一堆程式邏輯的課程，但我真的沒天分，考試都考很爛，只求不要被當掉就好了 QQ",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190965,自我挑戰組,1,用laravel尻出自己形狀的linebot，還要撐三十天！系列,2,【第二天】蛤!?怎麼這麼麻煩!,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1512683960000000000,696,"一個起手就離題
今天才發現昨天沒跟大家自我介紹一下報名動機，今天補上一張人權圖。

相信大家在昨天精簡扼要的說明之下已經佈署好自己的專案環境了，如果失敗的話可以再第一天的文章底下留言喔！
或著有什麼你踩到比較特別的雷，也解好願意分享給大家的都可以分享在底下！
進入今天正題之前咧，先吃我的文件連彈吧！
首先你要先辦一個 LINE的官方帳號，這種瑣碎的事情不難，但要講好很難，所以就看這裡吧！
應該不難申請，有一些簡單的小功能也可以直接在後台的介面玩玩看！
這好像是不付費者的詛咒之一吧！
如果你已經辦好你的帳號，那就可以打開你的專案，來開始研究吧！
我們先從 推送訊息 開始看起，看我的影子模仿術！
看！我把這頁面模仿出來了ㄝ

來自己去尋寶看看吧！順便看看文件熟悉下他在幹嘛！

解答在這

剩下兩個就一樣用ctrl F 搜尋 Channel access token、Channel secret、Your user ID
然後在你專案的 .env 貼上去，千萬不要貼在 .env.example 喔！不然就傻傻把東西送上火星github了！
也要記得在 heroku的專案設定裡加入喔！

接下來我們可以看一下LINEBot.php到底在賣什麼挖溝！
靠這麼多東西我是要看什麼！
沒關係，先從這裡看起
LINEBot.php
接著可以知道他要塞一個 HTTPClient 的介面給他！
LINEBot.php
有想法了嗎？沒有的話在回頭看一下文件吧！

啊！想出來了！
原來是要這樣子組合的！
所以我們就可以繃出這樣子的 provider
連結
這樣之後就可以直接透過IOC的方式把它拿來用了 參考一 參考二
好吧～今天時間不夠了，明天星期五，就來點輕鬆的小話題吧！
下個主題就講講我想要做些什麼好了！","['【第二天】蛤!? 怎麼這麼麻煩!', '別慌！', '傳說～只要一個月發送訊息超過１０００，第１００１封開始訊息就會被馬爾札哈養的小怪獸吃掉再也收不到！']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190969,自我挑戰組,0,ArasPLM開發練功30天系列,4,[Day4]AML是什麼?那能幹嘛?,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1512683488000000000,584,"在Aras世界中，物件傳遞給資料庫都是透過AML完成，在前幾次的簡易程式碼中，是否能看出一些端倪呢?
先來看幾個例子
新增一支空白Method

設定Method

新增程式碼

跳出結果畫面

透過第一行程式碼，會組串一段AML的文字，action=""get""表示讀取，並且第二行apply將AML送給後端處理，回傳結果如上圖有兩筆資料，之後便可以使用迴圈把兩筆資料依序讀取。
同樣地，現在把程式換一個方式來讀取兩筆資料，而且要利用AML的方式來達成
Edit和Update做的事情一樣是修改，但是有個差別點，Update必須執行前讓物件成為上鎖狀態，修改後再執行解鎖，保護資料修改的當下沒有其他人正在操作。
上面是舉例了簡單的部分，比較一下AML與C#的寫法，理解Aras是如何對資料庫存取，不少人剛學習的時候對於XML完全不了解，所以也不懂AML到底在處理什麼，因此Aras提供一個C#、VB、JavaScript的函式庫，讓工程師不用在意AML就能開始對資料庫進行操作。
還有一個applySQL(""SQL語法"")這是可以直接使用SQL語法存取資料，但是回傳值Item物件，這個API也常常使用到串表上，因為真的很方便!!不過只能限定在C#與VB才能使用，JavaScript在前端機制上是不採用的，要注意一下。
最後放上Aras AML的類別大概有哪些

下一回 用迴圈讀取關聯頁籤物件",,"['AML Get', 'AML Add', 'AML Edit']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190976,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,4,打造MessengerExtension-Day4-Vue.js基本介紹+優缺點,"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1512683213000000000,599,"接下來幾天，我會把目標使用 Vue.js 來創建一個簡單的小網頁
試著使用一個 Proxy 讓這個 app 能在 Messenger 的環境中做測試
並且加入「Messenger SDK」，讓我們的 app 可以真正使用到在 Messenger Extension 中
特有的一些功能，像是分享訊息、獲得使用者資訊
最後，為了讓這個 app 可以之後公開使用
我們會試著自己寫個簡單的 web server，把我們的小網頁部署到 heroku 上去
就讓我們開始吧！
介紹 Vue.js
我們這邊要使用的是最近逐漸崛起的一套 JS 函式庫 Vue.js

基本上比起最早的 Angular、React
Vue.js 不但是這幾年才開始比較紅的新函式庫，他現在使用的份額也較前面兩個前輩少
原因是 Angular 及 React 分別是 Google 及 React 兩大公司用資金在支援

而 Vue 早期不是從公司內部主導的，直到最近因為中國的開發者增加
才開始有些公司參與維護 Vue 這樣的開源專案
實際上在開源的世界裡，許多世界級的 Project，維護者都有半數以上是有大公司在背後付錢的員工
因為主導一個受歡迎框架的走向，可以順便推廣現在自己公司的新技術
同時比起自幹一套內部系統，開源出來的專案支援度會更好
Vue, React, Angular 都有個共同理念
那就是，比起我們早期前端使用 jQuery 原生語法來操作 DOM
他們更想要讓我們以 組件/物件 這樣的方式來思考整個網頁的模樣

至於 Component 的寫法，React 和 Vue 的差別比較大
React 使用較接近原生 JavaScript 的寫法，jsx

特色是可以把 <Button></Button> 這樣的標籤直接寫在 JavaScript 裡(不用雙引號包)
並且當作物件來回傳、組合，最後由 React 幫你把這些物件實際渲染出來
而 Vue 的語法就跟原生 JavaScript 差別很大了

基本上的寫法很接近以前後端的樣板(template)
有許多方便的語法可以使用
實際看一些範例比較容易體會出他們的差別，假設今天我們想要根據某個變數
來決定某個元素是否要顯示
Vue

我們可以善用像是 v-if、v-else 的寫法來宣告一個 div 是否要顯示
React

而 React 的語法，就非常接近原生
要顯示哪個元素，必須手動地寫回傳的值
並且把他套在 render function 上
假設想要根據某個陣列渲染出數個 list item 的話
Vue

使用 Vue 的樣板式語法，只要把 v-for 加在某個元素上
他就會產生跟陣列同數量的元素
React

從這個範例就可以看出來，React 跟 Vue 設計上的差別
在 React 裡，基本上不會有太多除了原生函式以外的語法糖
你想要產生一串 <li>{number}</li>，基本上得自己寫個 .map() 來包裝
從這兩個範例來看，我們可以清楚的比較出 Vue 和 React 開發介面的差別
Vue 的優點
如果就這幾點來看，Vue 似乎比 React 開發上方便許多，近期發展也非常火熱
但是開發一段時間後，也有些要注意的環節
Vue 的短處
想了解更多可以參考我很常看的一位 Youtuber - Fun Fun Function
Templating languages: The hidden costs - Fun Fun Function
我們大致介紹了幾個函式庫的差異
我們往後將會使用 Vue.js 來開發我們的 app
原因為他的簡單易用性，並且我們不需要考慮後續維護 & 測試
在明天，我們會為大家實際 demo 使用 Vue cli 來創建你的 Vue 專案
並且介紹現在 Vue cli 這樣的 boilerplate (開發樣板)
到底包含了哪些東西
我們明天見！","['前言', '目標', 'Vue', 'Vue 的特性', 'Component - React', 'Component - Vue', '比較 - if else', '比較 for - loop', '比較 - 小結', '明天']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190967,ModernWeb,0,Confluence線上協同作業之平台系列,3,資源的應用,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1512682878000000000,569,"如果使用像是confluence這類的套裝系統 (我是用這個名稱來定義它)，這樣要付錢來購買使用的license及維護合約(可以享受升級及線上開ticket的support支援)，在有限的資源下如何找到其可以應用的學習方式，或許每個人摸索的過程與結果不盡相同，但多少都會受益到彼此，以我們公司一開始的2000個人的license，我記得它的費用就要50多萬元，可以說是一筆很大的金額，當您購買後就會在server端看到類似下列的資訊 (下圖為試用版的範例圖)

而這代表著您可以在官網的 https://support.atlassian.com/ ，可以線上開ticket來問問題，而這個我覺得滿實用的，雖然都要使用英文來問問題，但是原廠得答覆通常不會超過2天就會有結果(雖然還是會經過一些確認過程，即確認您的問題需求及測試)，而我也的確滿常使用這個功能，因為在我還在了解它的階段，照著正規的方式來對它有所深入了解，這樣的學習方式是必須的，當然我知道，任何一個系統、程式都有所謂的暗黑版(或著有人稱它為密技)的解決方式，但以我來講可能不適合一開始就使用這樣的方式來進行。而除了回應速度快以外，原廠在有需要的時候，他們會打電話來與您確認您當下所遇到的問題，也可以連線過來看您的畫面 (他們是使用https://global.gotomeeting.com/join/534474077 ，且您必須要有對外的網路才可以)，這個我覺得是很棒的服務，但還是回到剛才所說的，你要會講英文及聽得懂原廠的對話，這樣的服務才會深的您所愛。
我曾經為了一個相簿的應用問題，與原廠確認要如何來解決？問題點如下：當我想把照片以 34(列寬) 的呈現方式來顯示在一個頁面中，且它的長與寬要一致，這要如何來達成呢？這個問題原廠有打電話與我確認，並且曾經連線過來看我的畫面， 以我來講，我的英文聽的部分不OK，但也因為這樣更要將您的問題透過講的方式來補足它，也可以透過直接看原廠trouble-shooting的技巧馬上學起來，當您有購買維護合約的情況下，這個部分的確是深的我喜歡。以這個問題來說，原廠最後有提到是無法達成，但可以列入之後版本的改善項目，可參考此網址：https://jira.atlassian.com/browse/CONFSERVER-39991 ，即如果這個功能很多人給予comment的話，原廠會將它列入改善功能之一。但如果這個功能很少人給予comment的話，那麼原廠將不會列入改善項目之一

而如果當公司沒有購買維護合約的時候，那麼就要善加利用官網討論區的功能：https://community.atlassian.com ，這個雖然沒有像原廠support ticket那麼有支援度，也不見的有人會回答您的問題，但我所知道的confluence原廠有人員會在上面協助回答，只不過並不是每個問題都一定有人會回答您，但此部分可以列入輔助功能之一，它會在你實在沒有人問的時候，有時候會出現一道曙光來幫助您，我以我現在的情況來說，因為目前公司已經沒有購買維護合約了，像今年我遇到一個我找不到解決方式的問題，結果是在討論去這裡有人員給予我回覆，讓我有了方向可以進行 (雖然有方向不一定就是解決方式)
印象中在去年的時候，confluence有提供最少10個人的license可以購買，而這個starter版本是可以在support ticket來問問題，而我曾經也使用此替代方式來問我當前遇到的幾個問題(將會補上此部分的說明)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190970,SoftwareDevelopment,0,每天Racket3分鐘系列,4,(defineday-0.30000000000000004(+0.10.2));;Racket的數值系統,cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1512681620000000000,576,"Racket 的數值系統，核心架構仍然是以 Scheme 的為基礎。在 Scheme 的規格書 [1] 裡頭，列舉了以下的數值類型，其範圍由上到下限縮：
最上方的 number 是最廣的，以集合論來說，就是下面四項的宇集。因此，你在任何地方，問 Racket 一個數字是否是 number 時，一定會得到 true，不管它是什麼樣的數字。
接下來，可以說是這門從學術界發展出來的語言的特色：可以直接進行複數操作，不必透過特殊的函式庫。
複數以降，就是實數，數學上來看，這範圍包含有理數與無理數，或正數與負數。無理數就是無法算至小數點下某一位開始循環的數字，例如圓周率、黃金分割、根號 2。有理數就是會在某一位小數開始循環，並能轉成分數的數字。因此，實數可以是無理數、複數、有理數、正數。
實數之下便是有理數，在 Racket 裡的有理數，真的就是分數，不信的話，你可以執行看看：
最後，是整數，整數包含了正整數與負整數
我們來試著算算看圓面積，用 高解析度圓周率，取到小數點以下 25 位數（到第三行），然後用半徑為 5 來算圓周看看：
最後運算產生結果時，理論上來說，至少應該要到小數點以下 25 位，但你會看到小數位數在某個地方就停了：
這是因為，在電腦裡面，浮點數小數位數會因為實作機制可容許的數值空間有限，使得小數位數無法想到幾位就到幾位。不管是在 Racket、Scheme、Lisp、Python、Java 都會如此。
然而，在 Racket/Scheme 裡頭，有一種特殊的數值型態，稱為 exact，這不是說在上述的數值類別之外還有一個類別，它是一種精確度表示法，相反地，也有個 inexact。exact 可以用以下方式來呈現：
改寫了這程式，重新運行後，你會發現結果變成如下：
Racket 會以有理數來呈現計算結果，若直接印出 pi 的話，會是這樣的值：
換句話說，它會把你給它不論多少位數的小數，完整地用有理數保存下來，好使你在計算時，可以精準到你要的程度。那另一個角度來說，inexact 就不是如此，它是 Racket 裡頭浮點數的預設操作與表示方式（雖然也可以用 #i 的方式來指定）。inexact 的操作就像原本的圓面積計算一樣，不會精準到你給的小數位數。

這張圖它在表示只有機器人能答對這個問題：0.1 + 0.2，你可以在 Racket 裡試試：
為何若用 inexact 無法進行精準的小數點處理呢？甚至 0.1 + 0.2 這個值沒辦法得到一個正確的結果呢？這是計算機概論書本一定會談到的電腦浮點運算所使用的 IEEE 754 系統 [2]，簡單來說，因為電腦是用二進位資料進行數值資料儲存，在從十進位轉換到二進位時，會產生無法完整轉換的問題。因此在進行 0.1 + 0.2 時，會發生從二進位轉十進位的精確度誤差。
這時候，你可以想見，或許用上方的 exact 型態來處理就可以了：
是的，雖然這可以算出正確值，還是必須說明：這是用計算效能得來的結果。inexact 的計算只需要透過底層原有的計算機制來進行，而exact 的計算卻需要對數值進行一層包裝，好使得數值不會受到小數位數與整數位數的影響。這當然就需要相當的效能作為代價。 然而，我們在這不完美的世界解決各項問題，本來就需要針對不同的處境權衡解決之道。
除了以上談到的常用數值型態，Racket 像 Python、Ruby 之類的語言，支援了無限長度的整數位數，例如你可以把 pi 的小數點拿掉：
這樣仍然可以得到一個正確的結果，這是因為一旦整數位數超過了平台提供的長度，它會自動轉為 bignum 型態，這點倒是不用像 exact 與 inexact 那樣用外在的字面方式來區別。
回到前頭，Racket 也支援複數運算，複數的表示用 i，如下：",,"['1. Scheme 規格書說了什麼', '2. Racket 的精準度', '3. 0.1 + 0.2 檢查你是不是機器人', '4. 豐富的數值系統']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190565,ModernWeb,3,ZerotoherowithReact.js系列,1,【Day1React】WhatthehellisReact?,anniesnoopymd,https://ithelp.ithome.com.tw/users/20107150/ironman,1512679260000000000,782,"鼓起勇氣挑一個沒有接觸過的 ReactJS 來挑戰
希望在這30天內可以盡最大所能挖掘 React 的奧秘！
作品懶人包
由於我喜歡嘗試各種新的可能
因此在這30天內我規劃透過 React 寫出10個練習
(不知道真的寫得出來的有幾個XD 也很有可能做到一半又蹦出新的idea說不定。。。)
30天的學習歷程大致規劃：
A JavaScript library for building user interface.
React JS 是 facebook 開發的一個 JS 函式庫，負責產生與管理前端的 UI，方便使用者重複使用網頁上的 Components。當資料更新的時候，React 可以自動控制 UI 的更新，只知道只要更新有修改的部分。React 是透過把介面拆解成一個個 component 的方式來組織使用者介面。
React 不是一個框架，它大約只能稱為函式庫
（愚蠢的我一直以為它是框架）
React 專注在 MVC 的 VIEW 層級。
Virtual DOM
以往要更新 web DOM 的話，是直接操作更新的。而 React 想盡可能減低對 DOM 的操作來提高效能，因此提供了另一種不同於傳統的更新 DOM 方式，就是虛擬 DOM。
這個虛擬 DOM 記錄真實 DOM 該有的五官與長相，最後透過虛擬 DOM 來更新真實的 DOM。而 React 透過diff 算法，來控制什麼時候要更新真實 DOM，所以 DOM 並非時時刻刻更新，而是 React 在事件循環結束之後，重新計算 diff，參照現有的 DOM，計算出最少的步驟更新真實的 DOM。

透過 React，我們就不需要再跟 Server 溝通，從後端產生 HTML。簡單來說， React 就是只專注於呈現 MVC 中的 View，React 是一個用來產生使用者介面的 JavaScript 函式庫。
Angular
- Angular 可以做 Single Web Page
-  有 Router
-  表單驗證機制
-  Angular 控制完整的用戶體驗、控制不同頁面的切換、控制所有使用者的行為
Angular 是 Server 只傳送一個 View
相反的，你如果要透過 React 實作 Single Web Page 你必須擴增其他 package，因為 React 最核心的價值是剛剛所提到的「建立 Views 或是單一組件」。
當我們要製作一個大型網站，舉 Facebook 為例，這個頁面就包含了粉絲專頁名稱、sidebar、navbar、貼文、紛絲頁資訊、聊天室⋯⋯等。當網站越來越多，程式就會越來越冗長而不易閱讀，我們要避免義大利麵般ㄍㄡˊㄍㄡˊ迪的程式碼，因此。React 就是用來產生 User Interface 的最佳利器。
React 沒做的事就是 Store data，資料可能是從資料庫來或者是從 api 呼叫，React 則是負責 View laywer，它只負責前端樣式以及產生介面",['什麼是 React? React 是什麼？'],,"['React 的簡介', 'React 的真面目', 'React 原理', 'React 特色', '用 React 操作 View 層級的優點', 'Angular v.s React', '使用 React 的網頁', 'React 沒做的事']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190966,DataTechnology,0,Python學習筆記系列,4,[Day4]學習Python時好用的資源,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512678011000000000,649,"今天來介紹一些好用的Python網站資源

我這次上課教材，在Complete-Python-Bootcamp可以取得
搜尋jmportilla -> Complete-Python-Bootcamp -> 想學習的內容(這裡以 Numbers.ipnb為例)

點選右上方螢光筆畫起來的部分即可下載此檔案
是一個可以詢問問題和回答問題的地方，對於初學者和專業人士而言，都是相當好用的一個網站
當你有問題時，在搜尋處先打你想要查詢的問題，通常你可選擇比較多人回答的問題，若你想要詢問的問題都沒有在搜尋結果出現時，你可以點選右上方的""Ask Question""，若你有到別人的疑問想為他們解答的，也可以在上面回答(不過都要先註冊帳號)
初學者如我和你都建議直接搜尋想問的問題，大部分都能獲得滿意的答案

這裡提供了python3和python2的資源和文件，
想更深入了解詳細內容，可以點選documentation ->Library Reference-> 選擇你想知道的文件
請參考以下步驟
!
https://ithelp.ithome.com.tw/upload/images/20171207/20107290J56mqi2UzK.jpg!
https://ithelp.ithome.com.tw/upload/images/20171207/2010729085D1l9RuWf.jpg
Git是一個免費開源的分散式版本，專為提升各種類型的專案效率和速度
Google, facebook, linux和microsoft等公司都有使用它

想知道要如何使用Git，可以點這裡做參考

Git Hub是一個你可以公開git上與別人共同做的專案的網站，是一個專門為git設計的一條龍服務
想知道要project如何在Git Hub運作，可以點這裡做參考
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190956,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,4,Django與Rails比較,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1512674194000000000,708,"其實今天原本是要寫安裝Laravel的介紹
但是因故卡關（上一次安裝已經是好久以前）
怕時間來不及所以果斷擱置，趕緊挖一個新坑
說到Django與Rails的比較，最常被拿出來討論的就是他的MTV架構
與我們熟知的MVC略有不同（如果你是先接觸Django，當然可能會有相反的認知）
一般來說我們會做以下的對照：
這也是MTV的由來（Model-Template-View）
不用特別觀察也可以發現這邊兩種不同架構view的角色不同
而model則是一致
但也有另外一種說法
認為view與template事實上都是對應視圖，而控制器應該是django本身
所以對照圖如下：
但我個人基本上是不能接受這種說法的
先不說這樣無法算是MVT而應該是MVTD
如果我們看看一個傳統的Django view的例子：
會發現與Rails的controller基本上是做一樣的事情
在安裝完環境，開始創建第一個Django專案的時候
我注意到一個很少人比較的差異
就是Django有Project and apps的概念，也就是一個專案(project)下可能多有個apps
但rails專案下就是一個app，很少有聽人實作過複數以上apps的案例
按照django的說法，例如Facebook依照功能有以下的apps：
如果我們未來要追加購物功能，accounts這個app就可以重複使用。
當這樣的情境在rails之下，我們依然會視其為同一個app
只是不同部分的功能區塊
第一次看到這種區分方式覺得很貼心，但是轉念一想
九成以上的專案其實沒有這種需求
按照rails「慣例優先於設定」的精神，自然會不喜歡這種設計
如果我們比較創建專案的指令：
在rails，我們只需要：
就可以建立一個名為railsapp的專案
我覺得從產生一個新專案開始，就可以知道為什麼rails這麼迷人
如果一行可解決問題，那就不要兩行
我都還沒提到Django在startapp以後，還需要到settings.py去手動註冊新app
我敢打賭一定很多Django的新手忘記這步，然後奇怪server打開怎麼沒有東西
接續著對開發者的友善程度（或稱開發的簡便程度）
講嚴格一點，我認為光是CLI之前還需要強調語言才能用就已經很冗余了（不過這一點Laravel也相同）
比方說一些常見的指令：
而在rails 相對應的指令為：
長度只有一半，輸入的時間就節省一半
我當然知道Django也會有些套件可以做到類似的事情，例如django-shortcuts
但當這件事還需要考慮套件時，先天上就已經輸了
rails會在下一版成為預設（好吧，也或許我被rails寵壞了）
除了CLI以外，我還觀察到新建app與Template資料夾以後
都需要到settings.py修改設定
其中的DIR預設為[]，
要改為[os.path.join(BASE_DIR, 'templates').replace('\\', '/')]
既然創建app與新增Template資料夾是每個專案幾乎固定的動作
環境根本就可以主動先去確認約定的檔案名稱是否存在
少數特例再使用設定就好
況且，九成九以上的專案都會用到Template資料夾
為什麼不乾脆一開始就新增好成為預設
還要讓使用者自己新增？
倒數第二點
我發現Rails有一個很方便的工具，但是Django沒有（或是我目前沒有在教學文件上找到）
就是關於動態路由的對應，Django需要一條一條寫，例如：
但是在rails我們有個方便的工具Resoruce
只要短短一行，就產生了七種常用的路由，還可以用only或except去做調整
甚至可以做套疊
不僅大大節省了開發時間，也讓程式碼顯得更簡潔
黑了Django這麼多，在最後一點試圖平反一下
我還是有發現一點我覺得很不錯，而Rails沒有的
就是Django預設內建的Admin page
雖然我不知道實務上專案常不常用到
但至少有這個開發工具我覺得是相當方便的
雖然Rails要寫出類似的東西或是使用Gem也不會很麻煩
但這點確實是Django比較貼心的地方
除此之外
Rails慣例優於設定的精神簡直大勝！
這是我的觀察啦，理性勿戰","['MVC & MTV', 'Project and apps', 'CLI', 'Settings.py', 'Resources for urls.py', 'Admin page']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190962,ModernWeb,2,重新認識JavaScript系列,4,重新認識JavaScript:Day04物件、陣列以及型別判斷,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1512671029000000000,943,"在上篇文章中，我們提到 JavaScript 內建的型別主要可以分成基本型別 (Primitives) 與物件型別 (Object) 兩大類。 而基本型別又分成 string、number、boolean、null、undefined 幾種，除了以上幾種之外，其他都可以歸類至物件型別 (Object)。
那麼這篇文章中，我們就來聊聊「物件型別」。
所有基本型別 (Primitives) 以外的值都是物件。
那麼物件是什麼呢？ 在大多數的情況下，JavaScript 的物件與其他程式語言的物件行為類似。
從 ECMA 262 標準中來看物件的定義：
「An object is a collection of properties and has a single prototype object.」
一個物件可以是個零至多種屬性的集合，而屬性是鍵 (key) 與值 (value) 之間的關聯。 一個屬性的「值」可以是某個基本型別，也可以是另一個物件，甚至可以是一個函數。
物件可以是瀏覽器預先定義好的，當然也可以是由自己定義物件的屬性與內容。
在早期，要建立一個自定義的物件可能會透過 new 關鍵字來建立一個物件實體，再替這個物件新增屬性與方法：
後來，另一種建立物件的方式更為簡便，也是目前最常見的：
像這樣，按照字面上的意思直接用大括號 { }，即可建立起一個新的物件，並且在建立物件的同時直接指定屬性至該物件內。
這種建立物件的方式稱為「物件實字 (Object literal)」，同時也是 JSON 格式的核心語法。
物件的屬性可以透過 . 來進行存取：
或是可以透過 [ ] 來進行存取，如：
後者的好處是，當物件的索引鍵剛好是不合法的 JavaScript 的識別字 (如帶有空白的字串或是數字) 時，執行就會出現錯誤：
若想為物件新增屬性的話，直接用 = 指定就可以了：
要是想刪除屬性，則是透過 delete 關鍵字來刪除：
當我們試著去存取物件中不存在的屬性，此時會回傳 undefined，所以若是我們想要判斷屬性是否存在，最簡單的方式就是檢查該屬性是不是 undefined。
但這麼做會有個例外，就是當該屬性剛好就是 undefined 時，這招就沒用了。
除了檢查 undefined 之外，還有 in 運算子 與 hasOwnProperty() 方法，
雖然兩者都可以檢查物件的屬性是否存在，但 hasOwnProperty() 方法不會往上檢查物件的原型鏈 (prototype chain)，只會檢查物件本身是否存在這個屬性，而 in 運算子則會繼續往物件原型鏈上檢查：
這部分比較複雜，之後會另外寫一篇關於 prototype 的詳細解說，目前只要知道 in 與  hasOwnProperty() 的差異即可。
那麼，以上是關於 JavaScript 物件的簡單介紹。
物件在 JavaScript 是個相當重要的部分，未來我們還會有很多關於物件的討論。
介紹過物件，接著來看看陣列。
JavaScript 的陣列可以看作是一種特別的「物件」，同樣是零至多個元素的集合，且並沒有規定它能放什麼東西進去。 陣列內可以是原始的資料類型、其他陣列、函式等等。 要注意的是，陣列是個有順序性的集合，且只能透過 [] 來存取。
建立陣列同樣也可以透過 new 關鍵字來建立：
但現在實務上更常見的是陣列實字 (Array literal)：
或是：
而陣列的長度可以由 ARRAY.length 來取得，而且 length 這個屬性的值是可以被覆寫的。
像上面的例子中，陣列 a 原本的長度為 3，後來透過 a.length = 1; 設定成 1 之後，後面的元素就被移除了。
即使之後再度修改成 a.length = 3;，後面的兩個元素也只會被 undefined 所填補。
所以聰明的你應該發現了一件事，既然陣列的內容可以由 undefined 所填補，代表 JavaScript 在同一個陣列中可以使用多種資料類型。  但相信我，你不會想這樣做的，往後講到迴圈、迭代 (如 for loop、forEach 等) 我們會再次說明。
陣列的長度隨時可以增加或減少，就算指定索引元素時也不一定要連續指定：
另外要注意的是，陣列的索引是由 0 開始計算的，也就是說一個 array = ['a', 'b', 'c']; 陣列的第一個元素，實際上要用 array[0] 來取得。
若是想要在陣列末端新增元素時，可以透過 ARRAY.push() 方法：
當然除了 ARRAY.push() 之外，陣列還有其他的增減方法，如 ARRAY.pop() 、 ARRAY.shift() 、 ARRAY.unshift() 等等，
這裡就不贅述，有興趣的朋友可至 MDN Array 查看有關 ARRAY 提供的各種方法。
上回在介紹資料型別的時候有提到，若要在 JavaScript 內檢查變數型別 (正確來講應該是值，變數沒有型別，值才有)，可以透過 typeof 運算子來處理：
要注意的是，透過 typeof 運算子回傳的東西都是「字串」。
另外，在上面的各種範例中，你可能會發現有幾個結果跟預期的不太一樣，不是說型別只有基本類型與物件嗎？
怎麼會出現 function？ typeof null 為什麼是 object ?
確實前面說過，除了基本型別以外的都是物件。
當我們透過 typeof 去檢查一個「函式 (function) 」的時候，
雖然你會得到 ""function"" 的結果，讓你以為 function 也是 JavaScript 定義的一種型別，但實際上它仍屬於 Object 的一種，你可以把它想像成是一種可以被呼叫 (be invoked) 的特殊物件。
來看看 ECMAScript 的定義：

來源
以及 MDN 對 function 的定義：

來源
針對 function 的部分，我打算在後面另外寫一篇專文介紹，這裡大家只要知道雖然 typeof function(){ } 回傳的是 ""function""，但實際上仍然是屬於「物件」的型別。
「其實這只是一個 Bug !」 (完)
如果只寫這樣的話我應該會被噓到 XX。
這又要從 JavaScript 的歷史講起了。 還記得前面強調過的嗎？
「變數沒有型別，值才有」
在 JavaScript 初期的實作中，JavaScript 的值是由一個表示「型別」的標籤，與實際內容的「值」所組合成的。
由於物件 (Object) 這個型別的標籤是「0」，而且 null 代表的是空值 (NULL pointer，慣例上會以 0x00 來表示)，於是代表 null 的標籤就與物件的標籤搞混，而有著這樣錯誤的結果。 簡單來說就是前人留下的屎。
在 ES6，Brendan Eich (JS 老爸) 曾經想要提出修正提案，將 typeof null 修正成 ""null""，但 Douglas Crockford (JSON 老爸) 持保留意見：
I think it is too late to fix typeof. The change proposed for typeof null will break existing code.
因為修改這樣的問題，會影響到太多舊有的程式，因此最後還是被 reject 了。
最後，雖然現在大家都知道，當我們利用 typeof 去檢查一個「陣列」時，會得到 ""object"" 的結果，但如果在實務上仍會有需要判斷某變數是否為一個陣列而非物件的時候，該怎麼處理呢？
好在自從 ES5 之後， Array 定義了 isArray() 方法，
那麼以上，就是今天為各位介紹的物件、陣列以及型別判斷部分。
在未來後續的文章當中，我們會繼續來介紹 JavaScript 型別的轉換、運算子/式、流程判斷，歡迎對此有興趣的朋友持續關注。",,"['物件 Object', '陣列 Array', 'typeof: 型別判斷']","['物件及屬性', '屬性存取', '屬性新增', '屬性刪除', '判斷屬性是否存在', 'typeof function(){} 為什麼是 ""function"" 不是 ""object"" ?', 'typeof null 為什麼是 ""object"" ?', '如何判別是否為陣列']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190867,自我挑戰組,1,自我挑戰日記系列,2,CSS：background雙色漸層,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1512669657000000000,652,"今天要來做個有雙色或多色的漸層背景
想要有漸層但又不想使用圖檔時，可以就用 linear-gradient 來做線性漸層
這最大的好處應該是很快就看到效果
又不會因為顏色錯誤、白邊...等因素又要開繪圖程式重新製作存檔了吧
這時使用
就可以做出有 方向漸層、角度漸層以及線條和格子 的效果了，下面試作了範例。
在 linear-gradient(angle, color 1, color 2, ...); 中
angle 可以用關鍵字 top/right/bottom/left 決定漸層方向，
在前面一定要加上 to 才能看到效果，
如果沒設定方向則會是使用預設的向下漸層，
color 1, color 2, ... 可以使用 2 種顏色以上，
效果就會依方向使用 color 1 → color 2 → ...
範例

除了 上右下左 外
也可以使用 上右、上左、下右、下左
範例

但都是 0、45、90、135、 ...的固定角度
要其他的角度就要用 角度漸層
angle 用角度 度 = deg 為單位就可以作出像37度的效果了
範例：

漸層的顏色還可以使用多色漸層，像範例的彩虹七彩顏色
使用 2 種顏色以上只需要用 "", "" 分隔每個顏色，
範例：

利用 linear-gradient 漸層作出來的背景快速又漂亮，
就可避免圖片背景可能會出現在漸層中的模糊和馬賽克了。
--- 明日待續。",,,"['大家好 ', '方向漸層：', '角度漸層：', '多色漸層：']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190894,自我挑戰組,0,Vuex學習筆記系列,2,[Vue.js]Vuex學習筆記(2)-Vuex安裝方式,NomiSu,https://ithelp.ithome.com.tw/users/20107601/ironman,1512668556000000000,671,"以下列出幾種安裝 Vuex 的方式：
使用vue-cli模組的話，安裝後記得使用 Vue.use() 來安裝 Vuex
同步收錄與部落格",,"['直接下載或是使用CDN', 'NPM / Yarn']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190958,自我挑戰組,0,2017挨踢人生大事紀系列,4,挨踢鳥事滿天飛-電話、傳真機是MIS要維護的範圍嗎？,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1512668541000000000,764,"今天要請邦友們動動腦！
[申論題]
企業對外通訊之電話、傳真...歸屬資訊中心維護管理範圍。
試申論之~
答：
1.) 因為對外的電話線路和連外網路一樣，都是找中華電信處理的業務性質？！
2.) 電話總機系統有主控台主機，類似伺服器維護管理，故屬於資訊中心負責維護？！
3.) 電話線和網路線的線路都屬弱電，資訊中心應負責查修維護？！
4.) 傳真機印不出資料的異常狀況，和電腦列印資料的異常相似？！
5.) 電話話機、傳真機是3C產品，屬資訊中心專業項目。
以上五點，足證電話、傳真的維護管理，應由資訊中心負責。
TMD~!@#$%...
我是挨踢~我認了~
但電話廣播故障，因為和電話有關。也要找資訊中心處理？！
廣播的喇叭、音響...故障了，也來找資訊中心...
甚至消防警報系統有了異常反應，也找資訊中心...
太扯了吧~
BUT~因為我是挨踢~
林北認了~
再追加一項！
監控系統主控台主機，建置於資訊中心機房，
因此，整個監控系統的維護也應由資訊中心負責！ORZ...>_<|||
反而有正事的時候...
「那個ERP的需求什麼時候會處理好啊？」
『啊栽？』
(OS：MD！林北上午在找人修鐘聲喇叭~下午還要調監視器畫面給XXX...)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190941,ModernWeb,1,Nest.jsframework30天初探系列,4,Nestjsframework30天初探:Day04Modules,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1512667067000000000,696,"
Module是帶有@Module()裝飾器的class，@Module()裝飾器提供metadata，Nestjs用其來構建整個程式架構，使用Nestjs可以將專案的架構寫成Module Tree(模組樹)，架構會更顯分明清楚，在後面的示範，會看到專案架構最終變成模組樹的架構。
默認情況下，Module會封裝好Component和Controller的依賴關係，故Module無法直接去使用另一個Module底下的Component和Controller，必須import該Module，才能使用其底下的Component和Controller，在後續示範會演示給大家看。
符合先前所看到的結果，代表UsersModule有正常的load進去。
這邊大家就已經學會了分拆Module，構建Module Tree了XDDDD
-----------------經過一番敲打----------------------------
console結果如下:
nestjs無法解決UserController和ProductsService的依賴關係，因為ProductsService是在ProductsModule裡。
注意:不能export Controller!
處理一下依賴關係，將ProductModule傳入UserModule。
程式碼在github",,['Modules'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190947,自我挑戰組,1,如何成為工程師?(從工地到前端工程師)系列,4,[Day4]CSSRWD||AdaptiveDesign,dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1512664964000000000,779,"
現在做網站不只要兼顧電腦, 還要兼顧平板跟手機. 那為了解決這個問題有兩個方法, Responsive Web Design (RWD) 或 獨立的手機網頁(譬如m.youtube.com)

首先What is RWD?  RWD是用CSS 把網站縮小或變大. 所以css會依照瀏覽器的寬度來執行那個寬度的CSS. 所以你的網站會在所有設備都很好看. 那就RWD 網站就一定要用css media query. 基本上以下是我個人會用的media query, 歡迎大家來用(其實我好像也是抄bootstrap)
那你會覺得說有RWD就好了幹嘛要獨立做一個mobile網頁 這個是因為如果網站功能很多的話RWD有時候不好維護. 比如說, 架設你的網站有一個很長的清單, 你電腦版是用切頁來區隔手機板是用無限滾動 或者架設你的連結點下去電腦版是彈窗, 手機板是換頁. 這時候如果用RWD, 你就會發現

所以這個時候我就會建議做一個獨立的手機網頁.
像youtube, facebook 就是有獨立的手機網頁, 不然功能太多了

以下我來分享一個簡單javascript的方法來做獨立的手機網頁. 如果監測到screen 寬度低於699 就換到mobile.html
mobile vs desktop web traffic
w3c html responsive",,"['稱適應性網頁 Responsive Web Design (RWD)', 'Adaptive Design', '參考文件']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190953,自我挑戰組,1,勇者不冒險，嘴一回桌遊系列,4,[Round4]桌遊的分類與機制,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1512664856000000000,651,"鐵人賽的新挑戰，用 markdown 排表格...
說好的填遊戲表格，結果一看到資料就忍不住整理起來...
這一回合依 BGG 的分類與機制，配合先前網友翻譯過的文章，
主分類:  http://raining0909.blogspot.tw/2014/02/bgg_28.html
子分類:http://mj9981168.pixnet.net/blog/post/140204272-bgg%E6%A1%8C%E9%81%8A%E5%B1%AC%E6%80%A7%E4%B8%BB%E9%A1%8C
機制: http://mj9981168.pixnet.net/blog/post/140550182-bgg%E6%A1%8C%E9%81%8A%E6%A9%9F%E5%88%B6
數量如下:主分類8種、子分類81種、機制51種。",,"['有東西燒起來了，是整理魂...', '主分類', '子分類', '機制']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190943,DataTechnology,2,GraphQL+ApolloData入門系列,1,GraphQL與ApolloData介紹,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512663352000000000,814,"介紹
Facebook 公司 推出的 GraphQL，相對於一般的 Restful 會開很多 EndPoint 來提供使用者查詢資料，在 GraphQL 基本只開放一個 EndPoint 透過  Json payload 組合查詢 對單一 EndPoint 去請求  Request ， 這樣的好處是因為使用 Json 在撰寫 Next 巢狀 Query 非常容易，也可以組合多個查詢 只要發一次 Request 就可以達到原本多個 Request 的效果.另外 GraphQL 的 Schema 定義即文件，後端寫好程式碼的時候，前端馬上查詢哪些 API 可以使用，非常的方便

GraphQL 也是分成前端請 payload 語法 與後端  Server Schema 語法.在前端通常可以透過 fetch Curl 這類就可以請求並打回資料，後端的部分可以使用 GraphQL官網出的 Server或是使用 ApolloData  提供的  Server(支援多種 Koa Express， Hapi...多種). ApolloData 也提供了多種  支援不同 CLIENT 框架(Angular ，React ，Vue) 包含手機的(Swift , Android)使用

原生的 GraphQL 語法較為攏長在開發上建議可以使用 ApolloData 這個 framework 來加速開發，可以參考一下 ApolloData.COM 官方網站 ， ApolloData 是 meteor.io 團隊開發的, 之前METEOR團隊對於UX體驗包裝了樂觀UI(直接先提供成功狀態,在同時進行連線UPDATE),這次在 ApolloData framework也提供了樂觀ＵI的使用也有對CACHE 優化等等 另外在 ApolloData2.0  版更提供了一個 apollo engine來分析所有的GraphQL 請求的分析 非常的不錯 不管是手機網頁 對 GraphQL 有興趣的朋友都一起來玩玩吧",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190952,自我挑戰組,1,軟體工程漫談系列,4,什麼是hotfix？Kuma老師的英語教學時間,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1512662910000000000,782,"所謂的hotfix
是一個典型的複合式單詞
他代表的是
hot: 緊急，現在不做會死掉
fix: 修理，沒有要加新功能
所以，hotfix指的是：
這個錯誤現在就要修，我完全不新增功能，只是修好這個舊功能而已。
所以，
你把hotfix當成feature用，
代表你把客戶當QA用。
以上，Kuma老師的英語教學時間。
我教的是英文，不是工作。
我教的是英文，不是工作。
我教的是英文，不是工作。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190951,自我挑戰組,2,打雜人生-腦容量不夠用就筆記筆記唄系列,1,[Day1]Python自習手札:來個HelloWorld先~,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512662022000000000,718,"好吧...老實說，是自已懶惰，能用原生的，就不想花時間自已另外安裝就是了。
另外，追求穩定的人，也會使用非最新的版本。
開啟終端機輸入python，進入python shell (command line)，顯示linux已內建v2.7版本。
來個Hello World先~~~
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190889,自我挑戰組,0,如何用電商一個月從0賺到100萬系列,3,day3.用google表單就打趴你乾,ocom,https://ithelp.ithome.com.tw/users/20107558/ironman,1512661656000000000,1318,"昨天太累了睡著了中斷了，上面文章寫說好可惜，但～i don't care fk off，你以為連續寫30天就會有人看嗎，幹你小學生唷，有肉才會有人看，沒肉寫一堆屎也沒人看。
首先我要先幹樵一下留言回覆機制，人家留言我回覆，居然跟我講我他媽是新手村的人，新手訓練期間不能進行沒資格留言，完全看不起新手村的人，真的有夠xo@#$%，你們舉辦這個活動，主要目的不就是讓人家交流討論，靠北留言還要資格是三小四小五小，老子我就是不要這個資格，頂多不貼圖不留言，再說一次科技是人性的工具，程式是解決問題的武器，你他媽不要來製造問題，一早就被留言機制氣到飽了，幹有夠爛。
day2選了產品，day3現在要找個地方賣東西，我就隨便挑一個google表單，夠隨便了吧，沒辦法再隨便了，誰都可以申請沒藉口了吧，阮爸就是這麼隨便的人，隨便用個表單就幹死你們。
不服氣！就給我滾
問題不是工具，是用工具的人，機八人用什麼結果都很機八，帥死人用什麼都帥死人，就算我沒個購物平台賣東西，我都還是能夠賣的出去，阮爸就是他媽的屌打你們，啪啪啪的打。
在表單上上傳圖片，寫一些字叫人家來買，三四個頁面就做好了，誰管你什麼html css php sql iso pubg，他媽的那些都不重要好嗎，重要的是人家想買，操一堆人什麼都不懂，就拿個幾百萬寫個爛網站，給你阿嬤都比較划算，你啊罵還會說你很乖，乾
最爛的就是爛人想挖你錢，知道你有幾百萬，就挖坑給你跳，東說幾十萬西說幾十萬，上一堆雞巴毛大師的課，然後學沒半根毛，一堂幾千幾萬，真為你爸媽感到難過，說著整個歸藍趴火都著了。
操你媽google表單就打趴這些人
三個產品三個google表單，一小時狂賀架站成功，
幹",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190621,ModernWeb,1,Next.js+各種套件組合系列,4,Next.js&ReduxandMobx,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512660246000000000,694,"介紹
這兩套都是在React上常看見的 Global State Management，在REACT 因為是透過組件在拼裝，使用state與 props 在取值 ，如果有跨三層以上的拼裝在取值會變得非常不容易，所以需要 Global State Management 來管理，也方便每個元件都可以快速的溝通
next with redux
Redux 起手式就是創建一個 Store，以下就是一個基本的 createStore 起手式
crateStrore 顧名思義 就是創建 Store 的方法，他需要基本一個 Reducer(State) 跟 REDUCER 的 Init 預設值
(REDUCER就是這個 STATE長的樣子，多個的話要用COMBINE組成一個)
composeWithDevTools 則是分析 applyMiddleware
目前看到的是使用最簡單的是 ThunkMiddleware，之後進階可以使用 Redux-Saga，Redux-Observable 等等的 MIDDLEWARE
這些 MiddleWare 都是為了處理 Side Effect，目前推薦  Redux-Observable 的原因是 Thunk 只能發 Request 並不能處理比較進階例如取消的動作，Redux-Saga 提供了許多的 Effect 去管理這些 Request 與 Dispatch 等等 但是資料夾以及流程上要撰寫許多程式碼維護起來比較大，目前進化到REDUX-OBSERVABLE 可以使用 Rx.js 去管理這些 Side Eeffect 程式碼短好維護 可讀性高
這是 MiddleWare 的選擇建議，如果是初學 Redux 可以先使用 Thunk 入門
以上為  Redux  基本的 Store 設定
接下來看一下 Reducer  的樣貌,基本上Reducer 可以有多個但是最終都要透過 COMBINER 結合放在 Store 底下
action 跟 dispatch的作用，在 Redux 中也常會看到這兩個名詞，來解說一下
1.action 在 Reducer 裡看到 switch action.type 符合的  action 準備對STATE做動作，單純就只是FITER使用
2.dispatch 就是先定義好一個準備被觸發的FUNCTION 裡面就包含 action 種類以及通常還有 payload (要傳送的資料)在對應到 switch action.type ，通常SIDE EFFECT middlewave 也會在這裡根據 action 來處理
action 定義 長的樣子
dispatch 定義 會長這個樣子 不立即觸發
Next.js 中使用 redux 因為有 Server Side Render  (SSR) 如果需要在SERVER 端先跑 Render 的話可以先定義 Server 的 Dispatch ,也可以共用 Dispatch 再由參數判斷是否是 SSR 再去動作前後端
在  Next.js 的 GgetInitialProps 判斷是否需要 SSR 先 dispatch
在 Next.js 中要注意的是 import withRedux from 'next-redux-wrapper'
這個因為他有幫忙做到 Singleton Store 前後端一致 其他在使用跟一般都差不多
next with mobx
Mobx 使用 ES7的 Decorators  使用前要先安裝一下 Babel  先新增一個.babelrc
Mobx 使用裝飾子 @observable宣告 是透過觀察變數
action 也是使用裝飾子 @action 定義 如下範例
@就是裝飾子 (就是透過HIGT ORDER COMPONENT HOC 增加一些 Props )
如果在子元件要使用 action 只需要 @inject('store') 就可以透過 Props 使用
Next.js server.js部分 如果是要用 Mobx
const mobxReact = require('mobx-react')
mobxReact.useStaticRendering(true) 這個要設定為true
Next.js & Mobx SSR 因為生命週期渲染得原因避免一些問題 要記得 Server Part要用 mobxReact.useStaticRendering(true)
https://github.com/mobxjs/mobx-react
參考文章
When using server side rendering, normal lifecycle hooks of React components are not fired, as the components are rendered only once. Since components are never unmounted, observer components would in this case leak memory when being rendered server side. To avoid leaking memory, call useStaticRendering(true) when using server side rendering. This makes sure the component won't try to react to any future data changes.
總結
Redux 比 Mobx 設定比較多且複雜 action dispatch Reducer store middleware 但架構比較嚴僅
反之Mobx 比較容易使用
在 Next.js 之中 Redux 使用上也並無差異太多 主要都在 getInitialProps Redux 要決定是 SSR 時是否 dispatch  另外要使有前後端 store Singleton 記得要用 next-redux-wrapper
Mobx 基本上真的很簡單使用 定義好注入就可以用了 SSR 要注意 設定 useStaticRendering 為 true
官方參考 github
https://github.com/zeit/next.js/tree/canary/examples/with-redux
https://github.com/zeit/next.js/tree/canary/examples/with-mobx",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190905,ModernWeb,1,30天串接30個GoogleAPIs的服務應用系列,4,[day4]-創造自己的地圖服務應用，GoogleMapsAPI的基礎實作篇,KingTzeng,https://ithelp.ithome.com.tw/users/20103130/ironman,1512659510000000000,857,"有了API Key之後，在Day2時有說到Google Maps API頁面有一些範例可以搭配使用傳送門
今天就來創建一個有Marker的地圖吧～
終於啊
參照Day2結尾的程式碼，我們要先引入Google API的網址，接著把API Key嵌入到網址key參數裡~
即key=""API金鑰""
Google提供了簡單的範例，那我們就用範例稍微作修改，凡是從複製開始學習嘛～
我的程式練習方法是假設自己是客戶，**練習給自己訂一個需求目標來實作練習**：
假設K客戶的需求是：
那我們來搭配範例來Coding K客戶的需求～
1.網頁裡要一個Title ""King Tzeng的鐵人地圖""
這個需求超簡單，就是在Html寫一個H1的標題即
2.地圖要寬要滿版、高佔網頁的四分之三
Day2有說到一定要給地圖一個高度和寬度，所以我們就寫在CSS裡面
3.網頁的下半部顯示地圖
這一點的話就要使用到CSS的定位了，因為現在工作比較少寫CSS，有錯請鞭一下...
如果是我的話會先在外層包一個div命名為body，用相對定位(position: relative;)
先設定好頁面的寬高
父層是div id=body接下來把h1和#map包進去成為子層，使用絕對定位(position: absolute;)來定位。
html部分即
CSS部分
這邊就不深入討論CSS了，如果想學CSS3我推薦我的師父AMOS老師～
一聽觀念就秒懂啊
好啦～我們重點放在API應用上XD
4.初始地圖位置顯示台北車站的位置
在API呼叫地圖初始化時，一定要給Google一組經緯度，他才能正常的顯示！
到Google地圖搜尋你要的位置，網址列就有經緯度囉～

JavaScript部分
一個動態的地圖就出現啦～ (本來要錄gif，可是我的軟體怪怪的...Orz

這是最基本的地圖示範，當然還可以在裝飾一下頁面讓變好看一點～
地圖還有很多很好玩的東西可以操作，大家可以先作一個出來玩玩看～
待下回我們再來實作別的項目吧～今天先到此結束囉～（傳說中的又要斷尾了...
附上完整程式碼
Demo連結：https://tinatyc.github.io/King-Ironman-30Day-Challenge/page/Day_2/
可能還有很多東西還沒講到，小妹之後會陸續補上的！！
實作以後都會放在我的GitHub上面喔～第一次用GitHub Page請多多指教～
https://tinatyc.github.io/King-Ironman-30Day-Challenge/
同步刊登於King 學習前端之人生
[ 著作權為King Tzeng所有，請勿抄襲或致敬＝口＝]",,"['今天終於要來Coding啦～', '文後-']",,"['起始式', 'Hello Maps', '結果呈現：']",['小Tip:特定位置的經緯度要怎麼找呢？'],,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190942,DataTechnology,1,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",4,Day4-HadoopEcosystem之Hadoop安裝篇,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1512654766000000000,670,"Hadoop有三種安裝模式：
其中獨立模式(Standalone)與偽分佈模式(Pseudo-Distributed)只需要一台host即可，多機安裝模式(Fully-Distributed)則需要多個host來達到分散(Distributed)的效果，接下來這篇文章會介紹這三種安裝方法。
基本上Hadoop預設的模式就是Standalone，只要完成事前準備步驟1-5即可使用。Standalone僅供測試與體驗用途，若要執行大量運算或是儲存大量資料有可能就會撐不住啦。
讓我們來測試一下Standalone是否可以正常運作。
透過上面的指令，會把$HADOOP_HOME/etc/hadoop/*.xml路徑下所有.xml的檔案複製到~/input內，並使用hadoop-mapreduce-examples-2.8.2.jar執行MapReduce Job，會把~/input內所有檔案有關 dfs 開頭的字串撈出來。
可以看到符合條件的字串內容：
Standalone的File System會直接使用本機的檔案系統，而非分散式的HDFS，這一點要特別注意。
如果已經做好事前準備，完成解壓縮Hadoop tar檔案，接著就可以開始進行偽分佈安教步驟。
加入JAVA_HOME設定，{path of your jdk7}為本機JAVA_HOME路徑：
基本上與偽分佈模式 (Pseudo-Distributed)的安裝方法幾乎一模ㄧ樣，只需要多設定幾個檔案即可。強烈建議要啟動hadoop service的所有機器一定要設定免密碼ssh，否則輸入密碼就非常頭大！
下列的步驟需要在每一台hadoop cluster的機器上設定：
設定完畢後，多機安裝模式 (Fully-Distributed)啟動與停止的指令都與偽分佈模式 (Pseudo-Distributed)相同。啟動成功後，你就已經有一個真正的分散式儲存與運算的平台了！
下一篇要來介紹Hadoop平台上的指令！",,"['獨立模式 Standalone', '偽分佈模式 Pseudo-Distributed', '多機安裝模式 Fully-Distributed']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190940,ModernWeb,1,挑戰CSS30天系列,4,day4_border其他樣式,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1512653321000000000,644,"此篇介紹關於 border 的其他樣式，包含：
border：若四個邊框屬性一樣，可用 border 屬性來描述(一行即可宣佈所有邊框的屬性)。
border-color：用來設定邊框的顏色。
border-width：用來設定邊框的寬度。
border-top-, border-left-, border-bottom-, border-right-：用來設定邊框方向 (top - 上、bottom - 下、left - 左、right - 右) 的樣式、寬度、與顏色。
範例如下：
成果如下圖：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190938,ModernWeb,0,認識Chrome開發者工具系列,4,開發者工具面版簡介2-原始碼、安全性、應用及審查面版,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1512652565000000000,716,"今天我們會再簡單的介紹幾個面版：原始碼、安全性、應用還有審查。好，廢話不多說，就讓我們開始吧！

這個面版是在進行 JS 除錯時最常用到的面版之一，以前我們除錯時是用 console ，並且在控制台面版檢查輸出的值。但是如果我們使用功能更強大的 debugger 時，程式的中斷點 (Breakpoint) 就會顯示在原始碼面版中。除此之外，你在面版的左邊樹狀結構中可以看到整個頁面所用到的原始碼，像是 JS 或是 CSS 等等。在面版的右邊會有一些搭配中斷點可以使用的功能，像是讓你可以追蹤某個變數的狀態，還有目前程式的呼叫堆疊 (Callstack) 等等。另外一個重要的功能就是當中斷點設置後，你還可以使用 step through debugging, 像是走進某個方法裡或是跳過等可以讓你更方便除錯的功能。這些我們在後續的篇幅會再詳細的介紹。

這個面版算是一個很簡單的面版，它可以讓你知道這個網站是否安全，而這邊的安全指的是：這個網站是否有使用 HTTPS, 如果這個網站有使用 HTTPS 並且是有效的，那你就可以看到：這是一個安全的頁面 ( 有效的 HTTPS) ""This page is secure (valid HTTPS)""，然後在下面的有效憑證 (Valid certificate) 裡看這個網站所用的憑證發行機構的及憑證的類型。如果要看更詳細的內容就可以點查看憑證 (View certificate)，這個面版的主要功能就是這樣，因為這個面版實在太簡單的，我們接下來就不會再花時間介紹它。

查看憑證頁面，這是 IT 邦幫忙的憑證

應用面版讓你可以查看及編輯及清除在前端應用的儲存方式及快取，像是：LocalStorage, sessionStorage, IndexedDB 及 cookies 等。在左邊 sidebar 中它也提供一個查看靜態資源的地方叫做 Frames ( 在網路面版或是原始碼也都有存取這些靜態資源的位置 )，最後它也提供一個除錯漸進式網頁應用程式 (progressive web apps, PWA) 的功能。

審查面版做的事很有趣，它其實是有點像 Google 的PageSpeed Insigts
的功能，它會讓你知道你的網頁是不是有效能上的問題，有哪些最佳實踐 (Best practices) 是你可以做的，並告訴你實作的方法。算是一個網頁健檢的地方吧 XD
今天我們很快的帶過了幾個面版，這些面版都是很重要的主要面版之一，除了安全性面版之外，其他的幾個面版我們在後面都會再花時間更進一步的說明如何來使用。",,"['原始碼面版 Sources panel', '安全性面版 Security panel', '應用面版 Application panel', '審查面版 Audits panel', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190931,Security,1,CEH之越挫越勇系列,2,[Day02]章節主題,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1512652201000000000,1168,"目前大概訂定的主題如下，依狀況再來調整吧 XDDDD
[Day01]何謂CEH？不可不知的資安證照
[Day02]章節主題
[Day03]滲透概論 & 專有名詞
[Day04]滲透流程
[Day05]資訊蒐集-概念篇
[Day06]資訊蒐集-實作篇
[Day07]網路掃瞄-概念篇
[Day08]網路掃瞄-實作篇
有興趣的話也可以參考原廠課程的章節：
Introduction to Ethical Hacking(介紹何謂道德入侵)
Footprinting and Reconnaissance(蒐集蛛絲馬跡與網路勘查)
Scanning Networks(網路服務與弱點掃描)
Enumeration(列舉系統資訊)
System Hacking(入侵電腦系統)
Malware Threats(惡意程式威脅)
Sniffers(網路監聽與攻擊)
Social Engineering(社交工程)
Denial-of-Service(阻斷服務攻擊與傀儡網路)
Session Hijacking(連線劫持)
Hacking Webservers(入侵網站)
Hacking Web Application(入侵網站程式)
SQL Injection(資料隱碼攻擊)
Hacking Wireless Network(入侵無線網路)
Hacking Mobile Platforms(入侵行動平台)
Evading IDS, Firewalls and Honeypots(規避入侵偵測/防火牆與誘捕系統)
Cloud Computing(雲端運算)
Cryptography(密碼學)
或可以直接參考坊間業者的課程內容：https://www.uuu.com.tw/Course/Show/300/EC-Council-CEH-7-駭客技術專家認證課程","['章節主題', '原廠章節']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190930,ModernWeb,0,跟著網頁動ㄘ動系列,4,DAY4-使用CCS3動ㄘ動Part3,EllenK,https://ithelp.ithome.com.tw/users/20107540/ironman,1512650853000000000,667,"一不小心就寫到Part3...
今天介紹兩個！
animation-delay: 多久以後再開始執行動畫
animation-direction: 動畫的播放方向
以下設定了3s，動畫就會不動3秒之後再開始執行。
以下就可以看出，3秒後才開始動。

normal ：每次播放都是從頭開始，例如0%到100%
reverse ：每次播放都是從尾開始，例如100%到0%
alternate ：來回播放，0%到100%再從100%到0%，所以播放次數要設定2次以上，才會有來回效果。
alternate-reverse ：來回播放，100%到0%再從0%到100%，所以播放次數要設定2次以上，才會有來回效果。
這樣同一個劇本就能出現不同的效果了！

明天，再來介紹animation-fill-mode: 動畫播放前後的狀態！
下台一鞠躬",,,"['animation-delay 可以讓動畫不要一載入網頁後就開始播放，或是讓各個動畫依序開始播放。', 'animation-direction 指的是從哪裡開始播放影片。']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190933,自我挑戰組,0,網頁學習日誌系列,4,CSS:網頁排版要注意的BoxModel（盒模型）,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1512649831000000000,667,"「開發人員工具」檢測網頁是網頁排版的重要流程，工具右方裡面有個Box Model，主要是看排版範圍數據，如下圖：


上面的粉紅色區塊，裡面設定寬高都是300px。
如果裡面放一張寬高都是290px的圖片

上圖想要讓內距變寬，就增加box的padding:10px;

發現粉紅色區塊寬高度都變成320px

原因在下圖的box就可看出，padding四邊都加10所以
寬度= 300px+10px(左)+10px(右)=320px
高度= 300px+10px(上)+10px(下)=320px

同樣如果加上外框線border也是
寬度= 300px+2px(左)+2px(右)=304px
高度= 300px+2px(上)+2px(下)=304px

如果是外距(margin)則不會影響寬高，只會影響位置


結論:
padding、border：影響元素寬高
margin：影響元素位置",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190924,SoftwareDevelopment,0,認識scala系列,4,Scaladay4(BasicTypes),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1512648041000000000,654,"Literals 想翻成中文還真模糊，看了一堆資料感覺還是不知道該怎麼解釋比較好，但可以透過一些例子來了解一下它的觀念．目前了解 literals 的概念大概是指的是指說可以直接寫一個常數值在程式碼裡，編譯器會根據程式寫的常數對應到該對應的型態．
轉成 Long 或 Double，Long 在後面加上 Ｌ 或 l ，Double 在後面加上 D 或 d．0x 開頭是16進位．
Byte 及 Short 在宣告變數時加上型態，compiler 時會檢查 value 是否超過大小 :
像 Byte 的範圍是 -2^7 ~ 2^7 - 1
16進位(hexadecimal)，開頭要寫 0x 或 0X，內容為數字1~9、大小寫字母a~f．
順便複習一下16進位轉10進位的算法 :
1AF(16進位)
-> 1 * 16^2 + 10 * 16^1 + 15 * 16^0
-> 1 * 16 * 16 + 10 * 16 + 15 * 1 = 256 + 160 + 15 = 431(10進位)
這裡使用的 scala 版本是 2.12.4，所以已經將 8 進位(octal)的 literals 移掉了．
Remove octal number literals : SI-7618
要轉8進位時，scala 有提供一個 BigInt 的物件，可以轉任何進位 :
用單引號包起來的 Unicode 字元 :
要用 unicode 來表示會有一些規則要注意，真的要用到時再查一下，這邊先列幾個例子 :
用雙引號包多個字元組成的字串 :
Scala 還提供了一個很方便的功能叫 raw strings，是使用三個雙引號包起來的字串，
裡面的字串都會被當成純文字，不會被跳脫字元影響 :
就是 true 跟 false
scala 還有一個比較特別的是 Symbol literals，可以用 .name 取出內容 :",,"['Basic Types', 'Literals']","['Integer literals', '總結']","['Long、Double', 'Byte、Short', 'hexadecimal literals', 'octal literals', 'Character literals', '跳脫字元', 'String literals', 'Boolean literals', 'Symbol literals']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190928,ModernWeb,0,Expo---跨平台App開發從零到上架系列,3,ExpoDAY3---Installation,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1512646504000000000,700,"
經過了簡單的分析，想必你已經下定了決心，我們一起硬起來，導入 Expo。今天要來給新人好好上一課 --- 怎麼安裝 Expo 的開發環境。
我們會告訴新人，『斯斯有兩種，一種治鼻塞，一種治喉嚨痛。』，而 Expo 也有兩組工具，一組管理開發，一組專職部署。
Expo XDE 是一套基於 Electron（又是 JavaScript）開發的整合型專案管理工具，它有漂亮的圖形介面，同時與 Expo Cli 提供幾乎一樣的功能。
雖然 Expo Cli 也很不錯，但本文會先以介紹 XDE 為主。
這裡的的 Expo Client（Android / iOS / Github） 指的是兩個平台的同款 App，提供一模一樣的功能與服務。Expo Client 主要負責即時接收由 XDE or 透過 Expo Cli 所部署（deploy）來的程式碼。
Expo 框架本身會把你辛苦撰寫的樣式、功能、你灌注於 App 中的感情，以及你成為百萬富翁的機會打包成某種格式，透過 Wifi 或是雲端傳送到這套 Expo Client 上，再由它轉譯成你想呈現的東西。
這也就是為什麼 Expo 會比較肥大、又可以不透過 USB 部署程式到手機上，同時也不需要 Mac 或是 Xcode/Android Studio 就能夠開發 App；因為實際上所有的 Expo SDK 功能幾乎都在 Expo Client 內實作了。

嗯，什麼？新人說現在斯斯有三種？不，不。請記得，你才是前輩，你才是要導入 Expo 的那個人。況且，在你的年代，斯斯就是只有兩種。
請直接連線到 https://expo.io/tools，會發現它指引我們點擊 Download from Github 進行下載。
請參照自己電腦所使用的平台下載。XDE 有自我更新的功能，往後只消打開就會檢查更新。


請打開手機，直接掃描以下 QRCode。
如果不能使用，請點這裡：Android。

如果不能使用，請點這裡：iOS。

說 VSCode 是近來最火紅的編輯器也不為過，在美國老爸（哪個不是美國老爸？）微軟的加持之下，在前輩 Sublime 以至 Atom 的夾擊中穩健成長，甚至直接支援與 Expo 連動的除錯模式（Using ExponentJS with VSCode - React Native at Microsoft），一舉一動都牽引眾人眼球。2017 年下半年的 Logo 換色事件更是讓它的聲量突破天際，為什麼？因為醜。
你會覺得奇怪，怎麼工程師諸君一夕之間有了美感？我想，這也許是微軟的一場社會實驗，它成功證明了二點：其一，我們工程師也是擁有對美的鑑別力；其二，當你面前有兩大競爭對手，而你們表現持平時，最醜的人會率先出線，拔得頭籌。
你說新人覺的不醜？不，不。這不是因為你們有了代溝，是因為新人太菜。請記得你是要導入 Expo 的那個人，用來撰寫 Expo 的編輯器的美與醜，你說了算。",['Expo DAY3 --- Installation'],"['前言', 'XDE', '安裝 Expo XDE', '安裝 Expo Client', 'VSCode', '現在就做看看', 'Refs']","['Expo Client', 'Android', 'iOS']",,,['tags: iThome鐵人賽2018 ReactNative Expo day3'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10190906,ModernWeb,1,三十哩路，我的前端學習路程系列,4,Day04::Bootstrap學習心得,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1512645825000000000,775,"剛開始接觸Bootstrap的時候剛好處於3跟4版本交替的時候
3的資料才看沒多久4就出來了
文件資料有看沒有懂，知道的會用的也只有row跟col，而且還用得很落漆(台語）
其他的不管怎麼看都看不懂也不知道要怎麼使用，想試著尋求幫助又不知道該怎麼問問題才對⋯⋯
整個版切下來只用到Bootstrap的5%而已
當時就覺得BS怎麼這麼難用？為什麼大家都說BS簡單好上手？
為了瞭解RWD的運作方法，我決定重新學習Bootstrap
很多人都說去看官方文件就夠了，官方文件寫的非常清楚
但是我真的是看不懂，尤其是在看到文件上面海量的資料跟不懂的詞句
我感受到的只有滿滿的害怕與畏懼，況且文件還是中文文件
連中文都看不懂了真的讓我深深的對不起自己從以前到現在的國文老師⋯
在這樣的狀況下我試著列出自己的問題點
諸多的不明白都是從youtube上搜尋Bootstrap的教學影片慢慢看才看懂該怎麼使用
當時學習的時候是靠下面幾樣東西慢慢摸索的
網站架設基礎課程 HTML + CSS 10 Bootstrap版面佈局-youtube
codecademy bootstrap
Bootstrap 4 超詳盡解析-ppt
後來對於Bootstrap的理解就是把CSS的內容挪到HTML上面
像是margin-right和margin-left如果要同時放在HTML上面就會變成class=""mx-尺寸""(x是水平)
col要在row裡面、row要在container裡面這樣col才會有效
瞭解之後要馬上實際運用也會有些障礙與困難
我會先把CSS刻好，在一個個把CSS挪到HTML上
像display:flex就是d-flex
displey:block就是d-block
Width:100%就是w-100
不知道要怎麼寫的話就把關鍵字拿去官方文件上面查詢
從完全不懂到現在能使用Bootstrap完成一個版型，如果也像我一樣完全看不懂文件在寫什麼
你可以試試看：
來試著做做看吧
以上是我在學習Bootstrap時遇到的困難與解決方法，分享給大家",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190925,ModernWeb,0,邁向JavaScript勇者之路系列,4,一次只能做一件事情的JavaScript，解釋Eventqueue怎能不用動畫呢,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1512645445000000000,929,"在 JavaScript 中，一次只會執行一段程式碼，相信看到這段大家心中都會有所疑惑，我們實作中可以大量發出許多事件，並重複執行不同的函式，這樣為何還是單執行緒 (single threaded) 的程式語言呢？
這段如果用純文字解釋較為困難，所以本篇會加入動畫讓大家更容易了解原理。
小明故事：
小明在完成早上的事情後，他會準備做以下事情：
接下來他會有以下動作
小明並沒有再打給阿姨後就守在電話旁，而是先去做其他事情等待，並且把漂亮阿姨回電這件事情先放在心中，等待回電後再去接聽。
像小明先把事情擱置在心中，等待條件觸發在 JavaScript 稱為 Event queue。像是 setTimeout, addEventListener, XMLHttpRequest 等等，這些方法在執行時會先將事件放到這地方，並將所有的事件堆疊完成後，才會開始讓 event queue 內的事件被觸發。
我們透過以下的短影片來了解一下 event queue 是怎麼樣概念 (影片下方是時間軸，用來解釋事件堆疊)。

影片中我們可以看到
這裡將 setTimeout 修改成 0 試試看，確認是不是所有事件堆疊都完成後，才會執行 event queue 的事件。
他一樣會將所有事件完成後，再讓 setTimeout 完成，以上這段程式碼也可以貼在 Chrome  開發者工具內試試看。
在所有非同步事件如 click、setTimeout、ajax...，都不會立即執行這些行為，而是將這些行為放到 event queue 中，等待事件觸發後再回來執行。
文章同時發表於:https://wcc723.github.io/javascript/2017/12/07/javascript-event-queue/",,"['故事說明', 'Event queue (事件佇列)']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190919,SoftwareDevelopment,1,初探Kotlin系列,2,[Day2]Kotlin基本語法,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1512645111000000000,652,"今天介紹Kotlin一些基本的語法
package應在檔案的最上方處
宣告一個function
上述function可簡化為
不可變variables 使用val宣告
可變variables 使用var宣告
取代switch
與Java相比 省略new關鍵字
參考資料","['packages', 'functions', 'variables', 'Comments', 'When Expression', 'Creating basic classes and their instances']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190921,DevOps,2,用30天來介紹和使用Docker系列,4,Day4：用簡單的例子來說明如何使用Docker指令,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1512642725000000000,758,"昨天我們已經把 Docker 安裝完成，並且也把 Service 執行起來了，今天就用一個簡單的例子來體驗 Docker 的command line要如何操作。
實作目標就是先從 Docker Hub 上把 Ubuntu OS 的 image pull 到 local，有了 image 之後就可以把 Docker container 執行起來，然後進入到 container 裡面安裝和啟動 Apache 的 HTTP Service，並且寫一個有 HelloWorld 字串的 HTML 檔案。最後使用 Browser 連到 Docker Container 裡面的 HTTP Service，確認 HelloWorld 的字串能正常的顯示出來。
一.從 Docker Hub下載 Ubuntu 的 Docker Image 到 local
1.要下載 Docker Image 之前需要先搜尋一下，Docker Image 的 Name 是什麼，指令如下：
指令如下：
is-official=true 表示要搜尋是官方的 Docker image
搜尋結果如下圖

就選擇星星數最多的 Name 為 ubuntu
2.找到了 ubuntu 的 Docker Image Name 之後，就可以把此 image pull 下來，指令如下：
執行結果如下圖

3.要再一次確認 ubuntu 的docker image有沒有下載下來，可以使用以下的指令
如下圖

二. 有了 Docker Image 之後就可以把 container 執行起來了並且進入 Docker Container 的 terminal 裡面，指令如下
使用以上的指令就可以進入了docker container 裡面的 terminal

可以再打開另外一個terminal視窗，輸入以下指令
確認 docker container 有正常的執行，如下圖：

在要離開 docker container 的 terminal 時有一個坑。就是如果輸入 exit 指令時，container 會被關閉，如下圖：

如果不要停止 container 而要退出 docker container 的terminal 需要輸入ctrl + p之後再輸入 ctrl + q 的按鍵，就不會把 container 關閉。
三. 在 docker container 裡面安裝和啟動 apache 的 http service ，指令如下
簡單寫一個 hellowolrd.html檔案放在 /var/www/html 的路徑下，指令如下
使用cat /etc/hosts指令查看 docker container 的 IP 如下圖：

如果想要使用 ifconfig指令，需要安裝 net-tools工具指令如下
**四. 使用 browser 輸入 http://172.17.0.2/helloworld.html 的 URL 查看 helloworld.html 的檔案是否能正常的顯示，畫面如下： **

整理一下今天有使用到的 Docker 指令如下：
docker search 搜尋 Docker Image 有哪些的指令
docker pull  指 Docker Image 下載回 local
docker images 顯示出在 local 下載了哪些 Docker Image
docker run 使用 Docker Image 啟動執行 Docker Container
docker ps 顯示了啟動了哪些的 Docker Container
今天主要的目的是要讓大家簡單的來體驗一下 Docker 指令要如何的使用，其實這之間還有很多的細節還沒有被提到，像是要如何撰寫Dockerfile 讓操作更自動化、如何Build image、 container 的網路設定……等等的內容，在未來都還會再提到。",,,,"['我簡單的整理一下，今天要實作的流程如下：', '實作如下：']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190920,Security,1,資安的學習心得及分享系列,4,DAY4NetworkIntrusionDetectionSystem,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1512642079000000000,697,"網路偵測系統(NIDS)顧名思義的就是在網路端監測網路的流量，尋找可疑的封包，可能是一些未授權或是攻擊的封包。
NIDS目的是在監視著網路或互聯網所選定的一些流量，基於這些流量他會做一些分析，類似檢查封包頭這類的工作，NIDS會即時把偵測到的封包流量做一些處理，將試圖入侵的流量阻擋。基於網路，NIDS通常介於傳輸和應用程序級別的協議活動。
典型的NIDS，會有感測器來監測數據包資料或其他管理功能的服務器。

(網路上的sensor)
HIDS和NIDS差別?
我們拿主機的IDS來對比:
NIDS通常是針對網絡上的一些存在漏洞系統做一些檢查，主要還是檢查數據包流量。

(IDS的流程)

(NIDS的流程)
而HIDS則是檢查主機上可疑的用戶和軟件活動。

(HIDS端。以上圖片僅提供參考)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190917,SoftwareDevelopment,2,Kotlin30天，通過每天一個小demo學習Android開發系列,4,Kotlin開發第4天ScalableImageView(MotionEvent),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1512640715000000000,1282,"
這次做一個會用到手勢的應用，在 App 中放入一個 ImageView 通過手勢來拖動和縮放。
我通過在 MainActivity 同一個資料夾下建立一個 MovableImageView，然後在 activity_main.xml 中引用他。
和直接在 xml 的 Design 介面放入 component 的方式一樣，在 xml 中可以對其設定 layout，比如：
其中通過 android:src=""圖片路徑"" 設定了 ImageView 的圖片。
ImageView 本身有提供幾個 init 的方法：
和 iOS 一樣的地方是，左上角為 (0,0)，最右下角為 (max, max)，還有除了 ViewController 有自己的座標系以外，所有的 View 都會有一個自身的座標系，也就是會有子 View 在 父 View 座標系中的相對位置之類的概念。
通過 onTouchEvent 來獲取手勢事件，不只是 Activity 可以 override ， View 也有這個方法可以 override。
MotionEvent 下，有定義幾個手勢類型，其中需要注意的是 action_pointer_down 這樣的方法，是多指操作的定義，比如：
在拖動或者縮放的時候，通過 setFrame 來改變 ImageView 的座標和大小。
ImageView 中圖片大小的問題，一開始我隨手下載來一張 5341 x 3561 大小的圖片，在 Design 中可以正常顯示，但是啟動 App 的時候就會直接 crash，後來手動把圖片縮小到 512 x 342 就沒問題了，所以可能有限制圖片大小，又或者有記憶體問題。","['Custom ImageView', '座標體系', '手勢', 'ImageView 操作', '思考', '參考']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190918,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,4,[Day4]EasyFlowGP--系統設計工具(二)簽核流程設計師:流程變數,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1512640597000000000,721,"今天要談系統設計工具的另一個工具，簽核流程設計師。
是否還記得第一天有提到簽核流程設計師 和流程設計師的功用是相同，差別只在於新舊版本。
印象中EFGP 5.4.X.X系列是舊版本的流程設計師。新版本就是5.5.X.X以上。
本次分享的版本是5.6.X.X，所以就帶大家看新版的畫面

簽核流程設計師主要是讓開發者自行設計流程走向、定義關卡和設定核決層級...等。
進階應用會使用到""服務任務""這個工具，這我們將在明後天和大家分享。
今天主要介紹基本的部份-->流程變數
流程變數:顧名思義，他就是一個變數，而這個變數應用在流程上，當變數值改變時就會有不同走向。
因此叫他流程變數。EX:在服務任務中呼叫WS，當服務任務傳回值為N通知系統管理員，傳回值為Y則走下一流程

也可以說這變數是流程實際發生時，才會有的變數。EX:流程序號
明後天我會以此定義講流程變數的兩個應用。(SessionBean，Invoick服務任務)
今天先講如何透過表單語法來變更流程變數。
例如:我要將表單上填寫的員工基本資料，傳給服務任務當傳入值，以新增員工基本資料
Step1.新增變數

輸入變數ID和變數名稱，定義型態為XML (這個例子是需要XML型態)

Step2.賦予變數值
在表單的Javascript引用ajax_ProcessAccessor.assignRelevantData 這個ajax。
系統文件的說明

我的應用為以下，將工號(gNewEmpCode)、姓名(gNewEmpName)、密碼(gNewEmpCode)、電郵(gEmailAdress)、手機(gCallNumber)和LDAP(gNewEmpCode)組成字串，再套用成xml格式，以應用在此WebService的傳入值。
這樣就可以將值賦予到此流程變數，當Invoick呼叫WebService時，就可將此流程變數傳入到此WebService當傳入值。
而Invoick如何呼叫WebService，將放在明天進一步說明。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190916,DataTechnology,1,MicrosoftBotFramework30天上手系列,1,WhyBotframework,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1512639363000000000,680,"因故 重新挑戰
所以看過這篇 就不用再看囉
假設你是要開發FB的chatbot，
且不具有程式背景(或懶得code)，
但邏況能力還行的話，
那建議你可以直接採用 chatfuel ，
chatfuel 聽說是台灣團隊所開發，
且直接被FB給投資。
重點是，
Chatfuel有UI介面，
你只要拉一拉 連一連，就可以完成大部分的需求了，幾乎用不到任何code，但如果你想寫，也是有部分的支援。
而且，
chatfuel權限是直接被FB開啟的，
你不需要去跟FB要權限就可以做很多事，
例如 取得user profile...(申請fb權限，要審核，真的很麻煩!)
而且!!! 台灣某大銀行的FB chatbot是用企畫人員 chatfuel 拉出來，
然後該銀行就發新聞稿，自已站在潮流之上了，而且運作的還ok!。(廢話，chatfuel這麼多人在maintain 怎麼可能會差)
但是，
相對的，當然也會受限於Chatfuel的UI介面，
而使你的Chat bot 無法靈活開發，
達到一些，你所希望的功能，
另外，因為A.I.是採取chatfuel所訓練好的，
所以每個Bot 可能會交談起來都是固定的模式。
假設你有跨平臺的需求slack telegram Skype...
也是不能直接套用的。
如果你會 c# 或 node js，
那你就可以試一試 botframework，
botframework其實就是一套腳本+狀態的機制。
採用的好處就是你直接可以依照這個框架，來撰寫你的整個chatbot流程，
而不用從 message api 開始作一系列的發展。
但目前為止，最大的壞處，就是m$因為該公司有Cloud的產品，
為了帶動該Cloud的發展，
硬是綁在一起，
導致這麼好的一個框架，
得先連到美國作轉發，
所以整個就會慢。
*註：因為 Line不被 dev.botframework.com 所支持，
所以我自幹line builder 時，
就順便把轉發這個問題給幹掉了。
不過我FB messenger 的部分還是先採用 dev.botframework.com ，因為 npm 上的 FB builder都沒在做更新。
而FB又很愛改，所以先採用好了，以後再看看要不要幫忙 maintain FB builder.",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190913,Security,0,IT安全稽核系列,4,1.4資訊安全管理系統文件與紀錄發行前，是否核准其適切性？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1512636980000000000,688,"承接昨日所談的文件化管理，我們在根據行政院所提供的「資通安全稽核外部稽核(自我評審)表」之內容，繼續1.4項之探討。
一、資訊安全管理系統 （管理階層、資訊安全組織）
1.4資訊安全管理系統文件與紀錄發行前，是否核准其適切性？
說明：此項說明在於ㄧ個重點：1.適切性。
我們在此先定義，何謂適切性(appropriateness)?
所謂的適切性，就是在沒有標準的情況下，如何將習慣轉變成書面規定。
通常一般公司，不管是資安管理或整體組織管理，通常會依照習慣來進行管理，很多組織的員工也常會說，
「我們沒有任何規定，業務不是一樣在進行？」
這就是過度依賴慣性，所呈現出來的說法，在公司草創初期，的確是要依靠慣性來執行業務，但重點在於，習慣這樣執行，並非在流程上沒有問題，有些時候，掩蓋問題，看不見問題才是最大關鍵。組織在小規模之時，或許有些隱藏的問題，不成為大問題，但是隨規模擴大，隱藏的問題慢慢浮現，依照慣性不能解決時，就要靠制度的訂定來討論及解決。
誠如我們所知的，大部分管理學都會提到「永續經營」的觀念，想要永續，就要建立制度、執行制度、調整制度，唯有透過訂定制度才能讓公司永續經營下去。在此本人強調，每個人都會有離開組織的一天，不管是轉職、退休、生病等等，這些因素都會迫使員工離開組織，員工離開時，也會帶走習慣，如此，習慣就會消失，而「習慣的」業務執行該如何延續下去？這就變成一個很重要的問題了。組織無法ㄧ直重新找尋習慣，因此，建立制度成為一種最有效的方法。
在此，我們探討資安的制度建立的步驟，也就是如何能夠達到適切性。我們可以分以下步驟處理：
1.	匯集資料：將資安的資料先行整理。
2.	分析資料：針對重點資料進行分析。
3.	資料歸類：將分析後的資料，歸類成數個細項。
4.	整合細項：分成大類，最好不要多於六大類。
5.	項目定義：將分好之大類別，予以定義。
我們以下圖實務上簡單的例子做說明。當資安負責人資料蒐集完成之後，可以考慮將所有文件，細分成數類，例如以機密層級分成：機密性、敏感性與一般性之後，將文件1~3歸入細分的小類別裡，在這三個小類別之上層，在架一個大類，如此便有依據，往後在查文件機密層級，可以直接透過系統蒐尋「文件安全控制」大項，逐步的往下過濾探詢，如此分類，就能很清楚的達到管控的目的，同時也能協助管理者迅速的查詢及提取資料。

(製圖為作者本人)
最後，本人還是要提醒一個觀念，制度是死的，人是活的，因此**制度並非不能調整**，過度強調制度，還是會產生組織僵化的情況，因此適切性達成後，也要定期的審視，是否符合時空、環境的需要？如果大環境有所變化，那麼「適切性」就要持續的運作，如此才會讓組織運作更有彈性。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190851,自我挑戰組,2,用IT看世界系列,4,IT人員的最後一道防線EventLog,allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1512634079000000000,883,"@@請看以下一則故事@@
去年我們公司SAP出現異常!!!!
 WTF
我接到電話就是如下
User：SAP怎登不進去??
MIS：目前有異常，查修中，版更造成的bug需要修正(我連登入權限都沒有)
User：幹嘛在上班時間更新?系統壞掉怎工作??
MIS：會請廠商在離峰更新(看看連user都懂得離峰更新......)
MIS：XXX分公司我是000您好
User：系統幾時會好?
MIS：目前還在了解問題原因
User：你SAP這樣我貨沒辦法出、東西沒辦法過站...你們系統若異常我沒辦法作業...
MIS：抱歉，我們再修正更新檔
一個與SAP產生有較多互動的生管副理直接告訴我，SAP異常導致我們全公司無法生產運作，你要不要問一下廠商什麼原因?
####對......都是IT的錯.....沒有on line Redundant######
###你們跟廠商版更的會都在開假的??###
我心裡在想
在沒有ERP系統的時代,你們怎做帳的??怎運作的???
難道你跟老闆說?抱歉沒有XX系統本單位無法作業?因為沒有XX料件無法生產?
當系統運作正常時，就像汽車行走在馬路上
那如果中途拋錨呢?
你是選擇繼續抱怨或者陳述事實，還是想辦法叫道路救援或者計程車?
我相信大多數人都是後者
很不幸職場上無所不在，陳述事實的還好，事不關緊就算了，最怕的是那種落井下石甚至....
就當我被逼著去詢問ERP廠商他們是否有作系統的更新?
對方的回應是說：因為貴司明日要版更，工程師在「自己」的環境做測試，間接地規避這問題
但是能Login DB跟VPN帳號，只有ERP廠商，因為我非domain admin，我的網域權限僅侷限在分公司這端的虛擬機器，總公司的SAP系統我無權限登入
後來透過自己部門的主管，得知，從AD 底下的Event log登入稽核時間點去查，廠商在異常發生的時間點，早上9點登入稽核成功
然後主管叫系統管理員把這相關Event log 匯出，並且CC給廠商及生產部門副理
大約20分鐘後
ERP廠商的PM跳出來說話了
Mail信中如下
致XX股份有限公司：
今天早上工程師因為版更在9點多時上了新版，也就是昨天測試完成沒問題的版本
但沒想到更新檔放上去後，與櫃公司現有的環境不相容，後來修正了一些程式檔，已無問題，並會要求工程師在離峰時段做版更，謝謝。
以下是我跟主管的對話
我：廠商他說他沒有連進來SAP
主：Event log會說話
我：可是我跟廠商問過好幾次??他都說沒有，並且跟生管副理講他並沒有登入DB去做修改
主：你如果是下錯指令的工程師，會不會把下過的command clear掉?
我：可能會，因為要整理畫面
主：告訴生管副理，這廠商回答有瑕疵，要特別留意，此事就告此段落
也許Event log是IT的最後一道防線，怎麼堅守?就端看企業賦予系統管理員多少資源跟權限，充足的資源可以把它打造的像銅牆鐵壁一般，也可以讓他如同虛設。
下一篇將會討論吃的，吃跟IT到底有什麼關聯???
待續 暗黑料理的啟示",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190910,AI&MachineLearning,0,讓我們一起來見見歐美語音助理界的當紅炸子雞-Alexa吧!系列,4,[Day4]Echo的硬體設備,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512630031000000000,692,"這次來介紹一下Amazon Echo和今年的Echo家族新產品的硬體設備!
**1. Echo **

1.	7個麥克風陣列，故能讓整個室內都聽得到你的聲音
2.	2.5”低音喇叭”和0.8”超高音喇叭
3.	內建智慧家庭中樞
4.	尺寸148mm x88mm x88mm，重量954克
資料來源: amazon

2. Echo Show

1.	8個麥克風
2.	7”觸控式螢幕可以，可以看電影，或查詢資訊，搭配Amazon的雲端攝影機監控家裡的各個角落
3.	擁有照相機功能，可以視訊通話
4.	尺寸187 mm x 187 mm x 90 mm，重量1170克
5.	Intel Atom x5-Z8350處理器
資料來源: amazon, TechChrunch

3. Echo Look

1.	一個內建1.6瓦的麥克風，可以接收使用者的要求，像是播報新聞、氣象預報等
2.	內建LED燈並搭配一個深度感測鏡頭，可以調節景深，拍照效果更好，為免觸控的照相機
3.	使用app並叫Alexa拍短片或照片，Alexa即可以運用機器學習演算法等技術為使用者評估穿著
4.	Intel Atom x5-Z8350處理器
5.	尺寸160mm x61mm x61mm

資料來源: amazon",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190909,SoftwareDevelopment,2,30天從零開始使用SpringBoot跟SpringCloud建構完整微服務架構系列,1,Day01-介紹Spring,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1512615468000000000,769,"先簡單自我介紹一下
英文名 Sam 主要都是寫 Java,志願就是想打造一個世界級的產品,
因此任何可以加強或改善的程式 軟體 架構 都非常有興趣.
這邊是我個人相關資訊 歡迎加我或是跟我聊聊一起學習
SAM的程式筆記
GitHub
Linkedin
twitter@samzhu0318
好...那簡單介紹一下 Spring
要說近幾年做 Java 開發的, 幾乎多多少少都會用到 Spring, 除了一些極特殊需求的無法使用以外.
但 Spring 的 Xml 配置地獄卻造成很多人學習上的困難.
但是大約在 2014 年左右, Pivotal 推出了 SpringBoot, 開箱即可用的特性大大改變開發流程.
隨後 2016 開始推出了 Spring Cloud, Spring 的微服務架構佈局就大致上已趨近完整了.
但 Spring Cloud 也不是橫空出世的一個全新項目推給白老鼠開發者用,
他大致上都是整合 Netflix 的微服務開源項目,並更加強符合近一兩年比較流行的套件來組合使用,
而 Netflix 算是世界是少數幾家很早就開始微服務化的公司(大約在 2012 年),
所以這套架構是已經被驗證可用的
好,大概了解一下怎麼來的
後面介紹一下整個 Spring Ecosystem, 其實整個 Spring 的生態是相當完整的,
只要不要是太特殊的需求, 大部分你都不需要重複造輪子, 其實挺值得投資時間下去學會的
沒有把全部列出來,把用過的或是一些之後會用到的列出來而已",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190907,ModernWeb,1,每日文章推薦系列,4,Day4做決定的基礎,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1512614188000000000,773,"其實我一開始只有把個人覺得值得分享的文章記錄下來而已
但有的時候會覺得某篇文章會有東西可以參考
只是程度還沒到值得分享
我自己就會卡在到底要不要分享糾結一段時間
不分享就不會記錄 到時候可能就找不到了
如果保留太多又會變成大家都看得很累
後來才想說可以找外掛來協助我把看過的文章都記錄到另外一個地方
這樣我既可以保持分享文章的數量
也可以記錄那些個人覺得分享價值不高的文章
所以我到了最後反而是沒有取捨
而是找到方法同時符合了我兩邊的需求
很難找到完美的解決方式
在選用技術跟解決方案的時候也經常要做這樣的取捨
但是可能就沒這麼好運可以不放棄一些東西了
像是一堆人會說用Framework會導致效能不夠好
但是不用的話可能會導致維護困難 訓練成本高 交接困難
要選擇哪個Framework又是另外一個問題了
我的解決方式還是靠累積知識
讓自己了解各個選項有何不同
有哪些優缺點 經由了解優缺點再去做最後的選擇
就算會產生技術債 也要讓他控制在自己及他人能控制的範圍之內
為了團隊發展可能還會把自己的喜好先放一邊
不用codeigniter 改用laravel
就個人來說還蠻愛codeigniter 的設計的
開箱即用 架構簡單好理解
不過感覺在多人團隊就需要一個有架構可以參考的Framework
codeigniter 很多東西還是要自己兜起來
另外還有台灣社群也只有laravel比較熱烈吧
感覺出問題也好找人
所以雖然當時還沒實際玩laravel玩的很深
也就跳坑跳進去了
開始用ansible
想說可以把操作過程完整記錄
並且分享給同事
雖然自己操作cli可能會比較開心
但就長期看來感覺還是搭配工具會方便一點
寫好一次要開新環境也不用重工了
用哪個系統開發程式
這點是故意放進來的
個人在家用win10
出外用mac
在公司用linux
讓自己在各個平台都知道怎麼處理工作也是一個不錯的經驗
不用過怎麼去做取捨?
我最常用的Intellij IDEA快捷键 | 程序猿DD
因為我使用phpstorm在開發
這些操作很多都是共通的
所以會看
服务化了，没想到耦合更加严重？
經由別人的經驗分享來避免自己做了錯誤選擇
13 个快速构建 Laravel 后台的扩展包 | Laravel China 社区 - 高品质的 Laravel 开发者社区 - Powered by PHPHub
看過備用 畢竟不知道哪天會用到 多幾個選項總是好的
关于 MySQL enum 类型的一些测试 | Laravel China 社区 - 高品质的 Laravel 开发者社区 - Powered by PHPHub
這篇文章其實之前我分享過了
但是因為回應內容有持續更新
也有可以參考的內容
所以我都會持續看討論
人人都是艺术家！谈谈那些奇怪的字符 - 掘金
小知識不嫌多
今天看過的文章",,"['為何取捨', '技術債也是取捨', '最近做的選擇', '文章分享']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190801,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,4,[PixiJS-Day-04]PixiJS的特性,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1512610116000000000,747,"本文列出一些官網上的英文說明，我會簡單翻譯並加上自己的心得
http://www.pixijs.com/#features-list
Fast
PixiJS' strength is speed. When it comes to 2D rendering, PixiJS is the fastest there is.
PixiJS 很快，而且用在2D運算上時，PixiJS真的很快。
很多時候在看 PixiJS 的效能表現時，會覺得效能比想像中的好上不少 (尤其是在手機上)
Flexible
Friendly, feature-rich API lets PixiJS take care of the fundamentals whilst you focus on producing incredible multiplatform experiences.
友善且豐富的 API，讓你可以更專注在作多裝置的互動體驗上。
在 canvas 或 WebGL 上要產生物件、讓物件動起來，使用原生的 canvas 或 WebGL 程式碼會是滿辛苦的一個過程，使用 PixiJS 時可以很方便且快速實作想要的效果。
Free
PixiJS is and always will be Open Source, with a large and supportive community pushing its growth and evolution.
PixiJS 是，而且一直會是開放原始碼的專案，而且有龐大的社群會讓 PixiJS 成長與進化。
因為 MIT License 的開源方式，使用上相當安心。我自己滿喜歡用 PixiJS，也會希望 PixiJS 本身能進化的更加好用。
MULTI-PLATFORM SUPPORT
Interactive, visually compelling content on desktop, mobile and beyond, all reached with a single codebase to deliver transferable experiences.
使用一套程式碼，能在桌機與手機等裝置上體會到相近的互動與視覺體驗。
對PixiJS 來說，不同裝置主要是尺寸大小不同，開發者可使用一套原始碼完成跨裝置的 PixiJS 專案
舉例來說，點物件的這個行為，就能分作
TINTING & BLENDING MODES
Designers and clients will be thrilled by Photoshop quality blending and colour modes.
PixiJS實作了 Photoshop 裡的混合模式與色彩模式
除了支援混合模式很厲害外，我也很常用 HSV 色彩模型 (色相 H、飽和度 S、明度 V) 來製作相同飽和度與明度的顏色變化
SPRITE SHEET SUPPORT
Pixi caters for a range of sprite sheet formats and includes advanced support for features like trimming and rotational packing.
PixiJS 有實作 Sprite Sheet 並增加了新的功能。
Sprite Sheet 是 CSS 動態技巧之一，與 CSS 的 Sprite Sheet 使用上有些不同，但基本原理是相同的
ASSET LOADER
Sprite-sheets, graphics, fonts, animation data (soon to have Adobe Animate support). All your incoming assets can be loaded and handled by PixiJS.
如 Sprite-sheets、圖像、文字、動態資料都可使用 PixiJS 的 Loader 處理並控制 (在後續版本會支援 Adobe Animate)
2017/12/15 補充：
Loader 處理了很多麻煩的部分：
PixiJS 是 JS 的類別庫，
平常習慣使用 HTML / CSS 的 Srite-sheets 圖片
在沒有 CSS background-size 與 background-position 的情況下，用 Loader 搭配 sprite 圖片的 JSON 檔，就能建立一個會動的 AnimatedSprite 物件
另外如 CSS 的字體也有在 PixiJS 裡實作．可以做到一些 HTML / CSS 做不到或比較不好做的字體呈現
EASY API
Designed to be intuitive and easy to pick up. Developers old and new will find themselves right at home with its simple yet powerful API.
直觀與方便使用，讓新開發者或熟練的開發者都能找到簡單到位的API。
PixiJS 的 API 使用上相當直覺，比使用原生 canvas 或 WebGL API 方便許多
之前曾研究過 WebGL 的 API，後來還是覺得目標是會看會寫，但要使用的話，還是使用第三方套件就好
WEBGL FILTERS
Use and create your own spectacular WebGL filters and shaders to give your projects next-level visual fidelity and performance.
可在 PixiJS 專案上再使用 WebGL 濾鏡。
ADVANCED TEXT RENDERING
Beautiful anti-aliased text at native and retina resolutions means that Pixi copy is as easy on the eye as it is on any other delivery method.
反鋸齒文字運算，讓 PixiJS 可輕易在 Retina 螢幕實現漂亮的文字。
PixiJS 支援文字運算，文字上可做的變化相當多
http://pixijs.io/examples/#/demos/text-demo.js

這是一個官方範例：包含文字漸層、多行、CSS Fonts、文字漸層、邊框等
後續會另有文章介紹
FULL SCENE GRAPH
Organise your objects in hierarchical trees, with parent-child relationships.
PixiJS 的物件為 parent-child 的親子關係。
後續會有一篇文章提到 PixiJS 裡物件的父子關係，並介紹在 PixiJS 裡取得與控制物件關係的方法。
RENDERER AUTO-DETECT
Certain, older platforms may not be able to use WebGL. Not a problem with Pixi as Canvas fallback is seamless and automated.
較舊的瀏覽器可能無法使用WebGL，PixiJS 可自動轉成 canvas 模式。
除了轉換 PixiJS 使用 WebGL 與 canvas 模式外， PixiJS 的 Renderer 也有許多功能與設定，後續也會有文章提到。
DEPLOY INTO APPS
Use technologies such as Cordova to rapidly deploy your Pixi project as an App. Superb for both concepting and full delivery.
PixiJS 可使用 Cordova 來佈署 App。
這個特色目前沒使用到，也許以後用到會補上，如果有使用過 Cordova 的開發心得，也歡迎互相交流了。
ACCESSIBILITY
Pixi is an inclusive technology and all content can be made to be screen reader accessible with ease. The only WebGL renderer out there that does.
PixiJS 裡所有的內容都可輕鬆的被 WebGL renderer 渲染出來。
MULTI TOUCH INTERACTIVITY
True multi-touch input and tracking means that you can create interactions such as pinch-to-scale that give audiences native feeling experiences.
支援多點輸入，代表可以實作雙指縮放這類原生事件。
在物件上設定監聽後，監聽裡收到的互動事件包含了互動的ID，可能是鍵盤，或是從0開始多點觸控的ID。
在介紹 PixiJS 官網提到的特色時，很多部分很有感覺
有些特色在我一開始列大綱的時候，也已經預計有篇幅會提到
下一篇會是系列第一部分的最後一篇：
簡單自我介紹與我用 PixiJS 做過的例子
用來銜接第二部分：PixiJS 功能與方法說明",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190837,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,4,2-1.監控工具之二:Grafana,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1512608257000000000,825,"這章先介紹一下Grafana這個好用的儀表板
Grafana有許多plugins，可以做許多服務的儀表板，例如Elasticsearch(收集log的好工具，後面會介紹)，用來替代Kibana顯示儀表
https://grafana.com/plugins
下載位置
https://grafana.com/grafana/download
預設開3000 port，網頁輸入ServerIP:3000 ,帳密admin/admin
zabbix插件要額外安裝，參考官網教學，安裝完後要至Plungs => APPS內選zabbix Enable
https://grafana.com/plugins/alexanderzobnin-zabbix-app/installation

登入後點選左上角Data Sources => Add data source (連接Zabbix的API)

驗證通過後點選左上角Dashboards => New => Graph

點下panel Title 位置出現選點，選擇Edit

Data Source 選擇之前建的
Group, Host, Application,item對應zabbix的分類 (皆可以下拉選擇)， /CPU/ 為正規表示式，顯示有CPU關鍵字
#zabbix的分類在下一章1-4章再說明

點選Axes => Unit 可選擇單位，我們知道CPU單位為percent 0~100，選擇後顯示單位了

點選Legend,As Table 顯示平均,最大值及目前值

滑鼠去點顏色線可以改顏色

Display 可以改成顯示點，Stack勾選甚至能產生堆疊圖

細部還有很多參數能調，進階應用可以參考以下連結，有很多Demo樣板，或去Google爬文
http://play.grafana-zabbix.org/dashboard/db/grafana-zabbix-demo?orgId=2",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190796,SoftwareDevelopment,6,爬蟲始終來自於墮性系列,5,爬蟲原則和技巧,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512606872000000000,2577,"在實作之前，我們必須了解一些關於玩爬蟲會用到的網頁基本原則和爬蟲技巧：
在大部分的狀況下，每個 request 應該將它當成是單一事件，他不會有前後 request 的影響。
舉個例子，常常有網站是需要登入才能取得使用者資料，假設登入是一個 request，取得使用者資料是一個 request，那麼正常的流程我們都會是先執行「登入 request」後，再執行「取得使用者 request」。但事實上，能正常執行「取得使用者 request」並非你必須先執行「登入 request」，而是在你發送「取得使用者 request」的時候，同時送出一個驗證過的 cookie。這代表說，無論任何人，在何時何地，只要透過任何方式擁有這個 cookie，那麼他不需要執行「登入 request」，只要付上這個 cookie，都能直接使用你的身份來成功送出「取得使用者 request」。
基本原則是，若是你能模擬出完全一樣的 request，那麼基本上所得到的回傳結果也應該是要一樣的，但若可能 server 那端有其他的驗證機制，例如鎖 IP 等，那麼以上就不見得成立。若我們送出一模一樣的 request 之後可以得到跟人為操作一模一樣的結果，那接下來我們的任務就很單純，就是將這個 request 所有要送出的主要條件一個一個把它搜集齊全。
可以設身處地的想一下，若是我們製作一個網站，但會做基本的使用者驗證，那麼我們會怎麼做？可能會有使用者帳號密碼的驗證，然後將資訊存在 session 裡面，在 client 使用 cookie 存放 session ID，或者單純地用 basic auth， 以上這些資訊，都必須看 request header 才會知道，尤其是 response header。這也表示，任何 header 裡面的資訊可能都是蛛絲馬跡，我們可以一個一個嘗試 header 的 key value 是不是 server 會檢查的，適時的用刪去法，一個一個 header 刪掉，若出現的結果不同，那我們就能很肯定的知道 server 有檢查這項 header。
在我們研究爬蟲的過程當中，很容易就造成攻擊 server 的狀況，例如一個迴圈沒寫好，就變成  ddos，所以通常 server 也都會有一些限制連線。像是 FB api 都有 rate limits，或是某些網站會將你的連線 ip 記錄在 session 裡面，然後在發出 request 的時候再反驗證 ip，有些會是去檢查 request 的 refer 是不是屬於同一個網域，這些都是在爬蟲過程當中我們必須注意的。當有遇到這類的限制狀況，我們在處理爬蟲的時候就會針對不同的限制有不同的機制。
目前的網頁製作方式可以分成前端 render、後端 render、和兩種混合模式。前端 render 就是由在 request 送出後，只拿到網頁的 template，然後會再透過 js 去產生真正的 html；後端 render 就在 request 送出後，就直接得到後端組好的 html；混合方式就是一開始使用後端 render，然後使用者在和網頁互動時，改成前端 render 的方式。
一般來說，爬蟲很容易去抓取後端 render 的資料，但若我們要抓取的網站是前端 render，那麼我們勢必要模擬 js 的執行才有可能組出正確的 html。解決辦法簡單分兩種，一種是我們真正的去 trace js 程式碼，這樣做會比較扎實，但相對來說會耗費許多時間在 research and testing，另一種就是模擬 browser 執行，我們可以使用上一篇所介紹的 high-level browser automation 套件 nightmare.js，可以快速的幫助我們抓取前端 render 的資料。
因為目前前端 render 的網站很多，很常網站是使用 api 作為與後端資料的交換，若我們能觀察到這些 api，那就能很輕鬆的直接抓取我們所需要的資料。在我們點擊網頁上任何互動時，都應該去想想看這個動作會不會是 ajax request，例如送出按鈕、換頁按鈕、讀取更多按鈕，在我們點擊這些按你的同時，都應該把 network 打開，同時觀察點擊的時候是不會會送出 ajax request 給後端，若有送出，那八九不離十肯定資料就在這個 response 裡面。
在實作爬蟲的過程當中，大致上都能透過模擬人類動作而爬取資料，但有一種事情是無法模擬的，那就是驗證碼。因為我們是玩爬蟲，不是玩影像識別，所以大部分遇到這種狀況也就只能摸摸鼻子找下一個主題。不過，並不全然都得放棄，有以下幾種做法可以突破：","['1. 任何 request 都是無狀態機制 (Stateless)', '2. header 裡的資訊', '3. Server 的限制', '4. 前端 render 與後端 render', '5. 留意 network，找尋 API', '6. captcha 是天敵']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190886,ModernWeb,1,30天使用Node.js在AWS上開發後端系列,3,30-3使用Node.js開發一個類似Instagram的後台吧(架構篇),neilwang,https://ithelp.ithome.com.tw/users/20107336/ironman,1512606175000000000,819,"由於想不太到要用什麼東西來當最終主題
只好先用做出類似Instagram功能的後台來展示吧!
這篇會先列出會使用到的工具與服務
並且簡單的分析架構
什麼是PM2?
Node.js在執行的時候, 假如程式碼有出錯, 沒有特別寫 try-catch 的時候
程式就會整個停止運行, 如果是要寫後端, 程式碼停止後必須馬上再重新啟動
這時候PM2就是一個功能強大的管理工具囉
在這一系列的文章, 我會使用AWS相關服務來介紹
原因只是因為相較於GCP, 我對AWS比較熟悉
要讓自己寫的後端服務可以給大家使用, 所以一定需要一台主機
但是自己去買一台太貴, 所以選用AWS EC2的雲端虛擬主機來建立服務囉
如果是新用戶, AWS第一年EC2的主機(t2.micro)的主機是免費的
存放圖片好用的服務!
資料庫的部分, 使用MongoDB
為何使用MongoDB呢? 因為MongoDB對於Node.js的相性非常好
基本上就是用Javascript就可以將資料儲存進去, 非常方便!
但是MongoDB並不是最好的選項, 但不多著墨在資料庫上
觀念大概都是相差不遠的!
篇幅太多, 請自行參考這裡
但是懶得看的話也沒關係, 會使用docker, 我覺得最直接的好處就是
開發環境與生產環境用的作業系統, Node.js的版本, 使用的套件等等
都會是一致的, 每次重新建立環境其實在複雜的系統中, 是蠻耗費時間的
所以身為開發人員, 我體會的好處就是我不需要花很多時間在重建環境
只要建立好 docker image, 環境那些都是在幾秒鐘產生完畢!
為甚麼要使用Docker
服務的結構大概可以從幾個功能去思考
以上的都會在之後一個部分一個部分的做出來
最後再組裝起來!
明天會介紹 MongoDB, 並且實作出會員登入!
如果對於 MongoDB 有興趣的人, 去年有一位大大寫的蠻好的
https://ithelp.ithome.com.tw/articles/10188054
從中受益匪淺啊! 懶得看的人, 我會用比較淺顯的例子去講
但是如果想要專精, 還是得看一些比較複雜的東西
例如 MongoDB 的索引該怎麼建立
什麼又是 index-cover query
索引的建立順序有差異 諸如此類的
有許多人會覺得 MongoDB 不好, 沒錯！
的確很多場景用起來不太好, 但是 MongoDB也有他自己的優勢
所以沒有最好或最壞, 只有合適或不合適
感覺好像有點多, 如果有對於初學者來說更好的主題
也請歡迎留言給我, 可以隨時修改 <(_ _)>","['工具', '服務', '架構初思考']",,,"['AWS EC2', 'AWS S3', 'MongoDB', 'Docker又是什麼呢?']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190903,ModernWeb,6,前端工程師養成手冊系列,4,番茄鐘工作法-設立短、中、長期里程碑,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1512606171000000000,2109,"
經過一年洗禮後，主管交辦下來的項目大部分都能如期完成，就算有困難，部門間彼此照應，倒也覺得沒太大問題，原本對自己能力開始洋洋得意時，周姐和主管竟然讓我自己去負責兩個專案，一個公司內部系統專案，另一個是公司官網改版，我當下就傻了。
周姐：「洧杰，這兩個東西就交給你了，你規劃一下，然後再把各期間的時程壓給我。」
我：「....(一臉傻逼樣)」
壓時程？但我只會網頁排版啊，代表我也要問下工程部、設計部時程，然後東西也要規劃 UI 介面、動線流程，而且又是公司門面，這麼多事情到底該怎麼想啊，而且又要壓時程，這不是企劃部該做的事嗎？
周姐可能也看出我的心思，一臉不耐煩地說：「現在企劃部門每位都在準備拉明年的案子，都沒時間做這件事。況且，你不要以為事情都是你一個人全部做完，你只是先將項目拉出來，問各部門時程，你只要幫忙控管專案就好！」
我：「喔...」
最後，我還是搞砸了，我比預期時間超出整整兩個月才交付項目，才意識到以前工作都是被動式接收小項目工作，當需要多人共事與專案控管時，才發現要去注意一大堆細節，除了自己的事情外，重要的是還要管「人」，除了同事還有客戶與第三方合作廠商。
所以東西只要一 delay 我就開始找各種藉口給自己。還不是工程部門拖拖拉拉的、還不是周姐不喜歡哪個版面設計一直改，後面也根本沒辦法動。時間那麼少我自己的東西都做不完還管得了別人？我只是進來做網頁排版的，為啥要我做企劃的事？更不好的是，該驗收的時程點我開始選擇裝死，上層問進度我會用盡各種理由去搪塞，最後就進入到一個很負面的死循環，每天上班壓力超大，又會覺得自己很菜，不敢向前輩催進度，所以整個進度大緩慢，我真的恨不得自己十項全能，都我一個人做就好，這樣我也知道我何時才做得好。最後開始逃避專案，故意去做自己擅長的工作內容，讓自己很忙，不正視自己真正該負責的內容。
就在那時我一直過得生不如死，罪惡感越來越重，直到有一次我拖延一個禮拜，上層跟周姐都沒再問我進度，我還天真以為他們終於不想管了而沾沾自喜。當然，事情沒有這麼簡單，又過一個禮拜後被叫去會議室被飆了超久，而我也是真的被罵醒了，才開始正視自己的問題。
所以這篇番茄鐘文章，也算是寫給八年前的自己，如果早點知道這些時間管理的心法，那段時期我也不會過得那麼痛苦，同時分享給各位。
番茄鐘是一個心法觀念，工作 25 分鐘後可以休息 5 分鐘，結束一個循環代表你嗑了一顆番茄。網路上其實也有不少文章可以參考。你可能會想說，那到底該如何運用呢？先不要急，我先分享一些心法給您。
還記得我 2012 年讀在職碩士準備論文時也很頭痛，光是上班就很累了，還要準備量化研究與準備論文，感覺好龐大，總有一股完全做不完的 fu，那時候教授就指導我說，你應該是要試著將困難的問題拆解成一個個小問題，再逐一攻略，先處理簡單的問題，再把一些困難的問題繼續拆解，每週固定產出進度，積沙成塔自然容易水到渠成。
雖然說起來很簡單，但做起來自然需要花時間習慣這樣的模式，所以當下就和指導教授約每週固定一次的 meeting 來解決問題，而這也讓我培養起將困難的問題簡單化的做事心法。
許多事情都有輕重緩急，但有些東西一定是你今天該完成的進度，我自己習慣將項目寫在紙或 trello上，工作項目大概會有 7~12 件，每當我做完一件事情時，我就會用筆把它劃掉，會有一股莫名的治癒成就感。
當一個大專案需要一個月時程做完時，我會在每週的週一規劃一個禮拜要做完哪些項目，週五當做一個小里程碑來進行小驗收，而且訂在週五的好處是隔天就放假了，你完成一個小里程碑，你和部門同事都會覺得事情向前邁進一大步，不會覺得事情都沒有做完，假放起來更爽。
有些人會習慣加班，這時候就要問問自己，是否是你自己效率不好，每次有比較多的工作，就會心裡安慰自己反正加班一下就完成了，而反而讓它變成常態？而且假使是常態性加班，主管其實也會質疑你是不是效率不好？與其如此，為什麼不找尋有效率的方式來完成工作，或找出自己的工作時間小偷，並正視問題加以解決呢？
我是用這套軟體，網路與 APP 也很多，找一個自己喜歡的就好，它會在我的電腦桌面上一直進行倒數，所以當我看著它倒數時，心裡也會不自覺地感到時間快到了，得盡快把任務做完。身體會不自覺地想要挑戰在時限內完成。
當一天規劃要做哪幾件事情，就會思考我今天預期要吃五顆番茄，第一顆番茄我想同時完成 A、B項，下午再花四顆番茄去完成 C、D、E 項。
所謂的心流模式就是你會進入一個相當專注的狀態，因為在番茄鐘督促你時限時，你自然會打起精神將事情做好。當在這狀態時有時候我預估要花九顆番茄才能寫好的程式，只要花三顆就做完了，相信你也曾經有過這樣的體驗，當然，要容易進入心流模式還需要一些工作上的心法，例如自己創造一個不被打擾的空間、把通訊軟體都關掉等等，有機會的話後面再繼續談。
另外工具是死的，人是活的，像是有時進入心流模式後，我就不繼續用番茄鐘了，讓自己持續專注享受這狀態快速完成工作。所以它有時候又會像是一種「儀式」，當我開啟表示要認真上班，在持續專注的情況下時間自然就過得很快。不過還是建議工作一段時間還是要多起身走走，身體循環才會好。
就像是我的故事一樣，以前我很菜，不敢向前輩壓時程催進度，時程 delay 被上層罵，也被同事抱怨，變得裡外不是人。公司要的是結果，就算你真的很努力了，但是用錯方法或是不尋求建議導致時程因此延宕，客戶對公司產生不信任感，對公司真的是好事嗎？
後來這觀念也影響我可以很正面地跟同事們溝通正事，厚著臉皮討論時程催進度，畢竟大家在同一條船幫忙賺錢，沒錢我們哪來的薪水呢？
當你想學習一個新技能時，也可以利用以上的心法，首先先訂立你學這個東西，希望能做出什麼成果？這個目標越具體越好，否則你自己也會不曉得學這技能到哪時才會結束，自然會想要偷懶。
這裡就以初學者學習 HTML、CSS 當做例子吧，學 HTML、CSS 可以做到哪些例子？自然是做出一個網站嘍！所以你的方向就可以寫說我要做出一個個人介紹的網站開發去列出你的學習項目，並將任務碎片化。
這裡我就列出一個學習階段項目出來：
從上面可以看出，做事情時先規劃大項目出來，越籠統也沒關係，然後再從大項目切成中項目，中項目如果太難再繼續切小項目，再來就從最簡單的開始實作，並規劃這一個小項目預期要幾顆番茄才可以完成小項目。每一週你可以訂立至少要完成一個大項目或中項目，然後再從每一天的零碎時間撥 1~2 顆番茄來達成你的目標，這樣才會是比較具體的學習方式。
最後，我相當建議你要有一個自己的線上筆記本，像是 quip 就還不錯，我找了之前我學 ionic 寫 APP 的線上筆記本給各位參考，你可以看得出來我將一些常用的指令與筆記寫了上去，另外該學習的項目也放上去。如果是別人整理的東西，那並不是你自己的，只有你整理自己的筆記，才會知道你做了哪些練習。時間一久忘記某某指令時還可以翻一下自己的筆記，彷彿時光機般紀錄著當時你的學習狀況，其實是很不錯的。
另外也可以將一些你雖然當下看不懂的文章，但你又覺得他是一個很重要的懶人包或原理解釋，我也習慣先放著，等到我對該技術越來越熟時，再去看艱澀原理文章，往往觀念就整個貫通了。
以上便是我個人一些工作流程的心法，也提供各位參考與學習，最後再附上以前我常用的 chrome 插件工具
",,"['什麼是番茄鐘？', '複雜的事情可以試著把它碎片化，先從簡單的事情下手', '每天上班時先列最重要的幾件事情出來', '不要習慣加班', '時間一直倒數，你會有時間壓迫感', '容易進入心流模式', '不要怕得罪人，做事要看結果', '不只用在工作，也能用在學習上', '結語']","['一、大項目 - 尋找資源', '二、大項目 - 找到線上課程開始上課(大項目)', '三、大項目 - 開始實作自己的個人網站']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190898,ModernWeb,1,重新學習網頁設計系列,4,DAY4.CSS選擇器Selector(二),CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1512606044000000000,682,"選取符合偽類別an+b規則的元素
an+b中的n為系統自動抓取值，無法人為控制，而a與b則為數字
使用範例說明會更加簡單
div p:nth-child(3)
HTML
說明
當:nth-child(an+b)我們只給單一數字b做為參數時，代表只會抓取第b個元素
選擇器 div p將會抓到範例中兩個div的所有p元素
接著套用偽類別:nth-child(3)抓取其中第三個p元素
因此兩個div元素中的第三個p元素的文字顏色都將變為紅色
div p:nth-child(2n)
HTML
CSS
說明
當:nth-child(an+b)我們只給an做為參數時，代表只會抓取第a * n個元素
選擇器 div p將會抓到範例中兩個div的所有p元素
接著套用偽類別:nth-child(2n)抓取其中符合2n元素
因此兩個div元素中的第2*0、2*1、2*2、2*3的p元素的文字顏色都將變為紅色
而由於2*0 = 0因此只會看到第2, 4, 6個p元素變色。
ol li:nth-child(3n+1)
HTML
CSS
說明
選擇器 ol li將會抓到範例中ol的所有li元素
接著套用偽類別:nth-child(3n+1)抓取其中第3n+1個li元素
因此ol元素中第3*0+1、3*1+1、3*2+1、3*3+1 .. 的li元素的文字顏色都將變為紅色
div p:nth-child(3n+1)
HTML
CSS
說明
我們設定第3n+1個p元素要變為紅色，但此時第4個元素剛好不是p元素時
這時的h5當然會式樣是設定中所定義的藍色，但該h5依然屬於an+b中的一個n
因此下一個變為紅色的p元素依然是子元素中的第7個元素p而不是第8個元素p。
偽類別:nth-child(an+b)給了我們很大的彈性去選取集合中的元素
在實務上是非常常見的，因此在此花了較多的篇幅來介紹它
希望能給還沒使用:nth-child(an+b)的朋友有所啟發",,['selector:nth-child(an+b)'],"['範例(一)', '範例(二)', '範例(三)', '範例(四)', '結語']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190904,ModernWeb,2,JavaScript基礎二三事系列,4,Day04　undefined與notdefined,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1512605395000000000,717,"昨天的筆記出現undefined與not defined，今天我們來看看兩者的差異。
undefined和not defined「字面上」來看都是未定義、無定義、沒有定義..之類的。
但對JavaScript(以下簡稱JS)而言，兩者的意涵完全不相同。在JS的世界裡，當我們宣告變數時，JS會給變數預設的值，就是undefined。
其實JS背後是這樣運作的，執行程式時，電腦先建立全域執行環境，接著創造階段把變數創造進記憶體。
創造階段結束後JS才把100賦值給a
那如果直接這樣寫：
沒宣告b就直接用console.log印出來，結果是：

這是怎麼一回事呢?
因為我們並沒有宣告b這個變數存在，在電腦或瀏覽器執行JS程式碼時，會先創造全域執行環境，然後創造我們宣告的變數進記憶體。
接著執行程式的運算敘述與判斷，因為我們沒宣告b，電腦執行console.log(b)這段時，發現找不到b這個變數。既然記憶體裡沒有變數b，那自然返回b is not defined，因為b這個東西並沒有被定義其存在。
若是
誠如昨天筆記，執行時建立全域執行環境，創造宣告的東西，於是變數a被創造了，並且JS預設這個a值是undefined，表示其值還未被定義，我們可以賦值、指向其他東西給a。
另外，undefined不代表什麼都沒有，在JS中undefined既是個型別，也是一個值，這個型別undefined的值就叫undefined，既然不代表什麼都沒有，那僅宣告變數自然也會佔據記憶體空間。
課程影片的最後，提到盡量避免這種寫法：
程式運行可以拆成這樣想
不要給變數手動賦值undefined，因為當JS創造變數時，預設就已經是undefined了。
不管是要debug還是預先宣告變數而不賦值，這樣多此一舉，可能會導致除錯時，分不清楚undefined是一開始執行時給的，還是自己賦值進去的。
若要先宣告變數又暫時不給值，或要表示後續程式碼才會用該變數時，可以先這樣寫：
或
null有空空如也的含意，它和undefined一樣，既是個值也是一個型別。
　
　
　
　
小結
undefined和not defined是不一樣的東西：
undefined則是建立後尚未賦值時，預設的值，而這個值表示值還沒被定義。
not defined是變數、函式..等未被宣告建立、定義，在電腦執行程式碼時找不到這個東西，可以想成在程式與記憶體中未被定義。
　
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分2-11",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190880,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,3,03.工欲善其事、必先利其器！英雄王，武器的儲備足夠嗎？,依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1512605024000000000,750,"今天己經是第三天了，各位看倌現在看的文章，都是利用當天下班時間，天天壓著 Dead Line 產出的新貨，寫的當下，可能會漏掉一些內容。假若那天看前面的文章，突然發現有增修一些內容，那表示小弟的記性還有救，記得起來漏寫的內容。或是小弟看不下自己的文筆，偷偷潤稿。
各位看倌還記得先前提到的，優質的程式碼，必需高閱讀性、簡單精實的註解，但是如果要開發的當下，就能達到這個目標，請讓小弟稱呼一聲神人。
想像一下，今天一早，帶著愉快的心情走過辦公室，才剛坐下來，椅子還沒有坐熱，就突然收到上面的大人，臨時告知要增加一個新的功能項目，而且後天早上的就要 DEMO。幹譙歸幹譙，還是認命的去趕工。
小偉是一個很怕麻煩，而且厭倦高重覆性且沒效率的做事方式，所以他熟記開發環境中常用的快捷鍵與好用的功能，並在使用的 IDE 中，安裝了許多便利的輔助工具。
小偉接受任務後，快速的評估了一下該項目的變動範圍，構想一下如何實作，開始撰寫程式碼後，除非是必需使用滑鼠的地方，否則小偉的手幾乎沒有離開鍵盤。
開發過程中，大量使用 IDE 的快捷鍵與輔助工具提供的功能。同時，針對程式內重要的區塊，撰寫對應的單元測試，當天下班前，就將功能雛形實作的差不多了。
隔天，小偉將匆忙完成的程式，進行最後的校調與測試。確定功能無誤後，將程式碼上版控。隨後，使用輔助工具，對程式碼進行快速的重構與整理，完成後，再上版控。
此時，中休鈴剛剛好響了起來，小偉伸了伸腰，心想又完成了一個任務。
小刀是一個很認真的人，但是從來沒有想過要去使用快捷鍵，只使用原生的 IDE 功能，未安裝任何的輔助工具。
同樣的情境，小刀接受任務後，快速的評估了一下該項目的變動範圍，構想一下如何實作，開始撰寫程式碼後，所有需要使用IDE的功能，都使用滑鼠去點擊。
相對的，開發的過程中，就看小刀的手不停的在鍵盤與滑鼠間移動，到了下班時間，發現進度只到一半，決定多留下來多寫一兩個小時。
隔天，小刀持續全心全力的趕工中，到了下班時間，發現還差一點，只好再留下來加班。到晚上八點，好不容易將項目完成，小刀拖著疲累的身體回家的路上，只想好好休息。
對使用的 IDE 有多熟、準備的工具有多少，完全可以反應在開發的效率與結果。
看倌們，不要以為上面的情境不可能發生，上面的例子都是小弟親自遇過的案例。做 SOHO 的期間，在拜訪客戶時，還曾經看過用記事本來寫韌體的強者(小弟大概一輩子都做不到)。這個世界很大，什麼事都可能發生。
如果看倌有機會看到高手寫程式，就只會看到他們的螢幕畫面切來切去，利用輔助工具來自動補齊或產生特定的程式碼區塊。程式碼撰寫的速度跟飛的一樣。
網路上，也有很多熱心的朋友，會推薦或開發好用的輔助工具，都可以去試用看看，找到屬於自己的秘寶。
懂得使用工具，才會減輕工作量，才有機會持續精進自己。",,"['前文回顧', '情境模擬', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190902,DevOps,0,大型敏捷專案的DevOps系列,1,[鐵人賽Day1]DevOps?What?How?Why?,AkitoSun,https://ithelp.ithome.com.tw/users/20094400/ironman,1512604740000000000,815,"第一次參賽，文筆大概沒有很好，望各位前輩不吝提供意見
首先，先簡單的提一下DevOps的概念: ""development"" and ""operations""這兩個單字的組合就是DevOps，但去查過後就會發現，DevOps其實並不是很簡單的一個概念，表面上它代表的是三個含意:
產品必須要能短期快速地完成發布
產品紀要能夠快速發布，又要有一定的品質，因此必須有自動化的測試
產品必須要能持續性的改善，並且要減少許多人工的作業，降低人為疏失的風險
以上三點老闆們看到一錠很高興，But...
要能夠做到DevOps，企業裡必須要有敏捷開發的精神，並且有辦法實踐(不管是Scrum還是其他流派的敏捷)，所有的主管、工程師都必須要學習並改變舊有的開發產品或專案的模式。
領導者也必須改變傳統的思維「接受創新並勇於嘗試失敗」(只會壓進度的老闆看到這可以先回家洗洗睡了)，改變整個公司內部文化並不容易，因此DevOps的導入對於現行的傳統開發模式的專案公司來說勢必是一個非常難的課題。
所有的工程師都必須具有一定高度的技術水平，但若不會也沒關係。
你不懂得單元測試? 學!!!就對了!
你不懂得整合測試? 學!!!就對了!
你不懂得UI測試? 學!!!就對了!
你不懂得Git Flow? 學!!!就對了!
你不懂得Docker? 學!!!就對了!
你不懂得CI/CD? 學!!!就對了!
......etc
要導入DevOps並不容易，但回歸一點，
還沒開始DevOps的工程師或領導者，可能看到中間就會覺得:
「唉喲!這麼難喔!我幹嘛冒這風險」、
「我們公司現在這樣子也是活得好好的阿，何必改變?」、
「我現在用的技術又還沒被淘汰，我幹嘛要學新的一堆沒看過奇怪的名詞」
「TDD是三小?CI/CD是啥?」
「反正一定是一堆學新技術的人在帶風向」
......etc
舊有的開發模式已經不符合現在這個User為中心導向的市場，舉個例子:
當你有了一個想法，你開始構思、找來專家評估可行性、開始做SA分析、SD文件、進入到開發階段，然後又改需求，開發不斷的Delay，最後，你公司所有的RD完成了，就會看到以下的圖

當你還在瀑布式的開發時，別人已經先行釋出了一版到市場上拔草測風向，且不斷的改良，不斷的釋出新版，而你的產品上線時，已經被User覺得過時，而且還一堆Bug，要修復時發現舊的RD已經離職了，新的RD看不懂之前RD的Code，找不到人維護(打到這裡相信很多人都有相同的血淚史)，最後打掉重做......
如果你是傳統IT產業或專案公司的老闆，你一定要知道:不是別人家的RD人數比你家的多，也不是對方都請的到神Carry的工程師，而是對方的企業文化跟你不一樣!
你如果想擁抱變化，你如果希望改變，那就請你放棄傳統的追殺進度的模式，好好的靜下心學習新的思維，因為
最後來個自我介紹，我是Akito，任職於Microsoft
接下來的29天，我會把我在微軟學到的DevOps分享給各位","['What is DevOps?', 'How?', 'Why?', '只有老闆願意支持，DevOps及敏捷式開發才能成功的導入']","['產品交付:', '測試:', '維運:', '要有敏捷開發的精神', '改變企業文化', '技術要求較高']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190901,ModernWeb,2,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,3,FunctionalMap,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1512604621000000000,969,"知道了使用者需求，我們就可以開始設計功能，有幾個工具能幫助我們，今天介紹第一種 Functional Map。
其實 functional map 也就是一個心智圖而已，每一個功能是一個節點，這個時候你就要以工程師的專業，事先預想有什麼檯面上以及背後運行的功能要建立，我需要得到什麼資訊才能讓功能運轉，方便事先告知後端工程師準備適當的API。同時也理清操作上的細節，有不清楚的地方趁開始做之前和客戶確認。
我是參考 Akene 設計師的文章來製作簡易的 functional map，在一個頁面上分「目標」、「功能」、「資訊」三個節點來發想。任何一套心智圖軟體都可以使用，我們的重點在有視覺化的圖案能和別人討論，這份心智圖大概也只有自己會編輯，網路上有許多免費的資源可以借來用，像是 Coggle 和 MindMeister，或者下載的軟體像是 XMind 及 MindNode。如果你的美術能力超群，甚至用筆畫也行。我自己是使用 MindNode.
「目標」其實就是前面的 user stories。我會把每一個使用者需求增加在「目標」下面，每個需求下是完成需求會經過的步驟。然後我會把這些使用者行為整合起來，增加在「功能」節點之下，大功能下面又拆成不等的小功能。要達到所有的功能，我們需要什麼資料，我會依照頁面或是元件來區分，用這個去和後端工程師說明，請他設計適合的API。

製作 functional map 的原則就是要「快」！因為我們的職稱是工程師，主管要看我們寫程式碼而不是畫圖，所以我只會用 15 到 30 分鐘快速的做出 functional map，順便理清我對網站的想法，然後拿著圖和主管討論。
我在A公司這個案子就畫了二份 functional map，在和主管討論的過程中，發現客戶並不需要有搜尋的功能，雖然他們一開始說「我們要像 Google Photo 那樣的東西！」而且他們伺服器並沒有串流系統，因此我不需要製作線上播放的功能。於是我再簡化成第二份 functional map。這時我就可以請後端的同事設計 API 了。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190897,自我挑戰組,0,"Let's""Go""系列",1,Day01　Overview,syiu,https://ithelp.ithome.com.tw/users/20107075/ironman,1512603730000000000,662,"這次的鐵人賽，我計畫以30天左右的時間來探索 Go 這門程式語言
Day 01　Overview",,,"['摘要', '進度表']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190663,Security,2,CEH之越挫越勇系列,1,[Day01]何謂CEH？不可不知的資安證照,虎虎,https://ithelp.ithome.com.tw/users/20103647/ironman,1512603174000000000,930,"=>然後就默默將CEH列為年度績效目標了…
=> 以上的選項錢包都會倒出沙 Q A Q""

希望寫完 30 天之後，可以順利考過 XDDD
對 CEH 這張證照有興趣的大家也可以一起有個方向可以準備 =v=+++
//沒錯！第一次考沒有過… 所以主題叫 CEH 越戰越勇哭哭…
我覺得難以取得的原因… 是原廠上課及考試的價格真的偏高…
所以這張證照一拖再拖，一延再延…
要不是我收了老公的訂婚的聘金，可能也沒辦法去參加上課… ((趁機斂財 =V=+
其實…我們公司也有多位 CEH 講師跟考過的前輩…
大家都說很簡單啦… 背題庫就好了叭啦叭啦…
//我原本就是這麼想的 Q A Q""
BUT！血淋淋的見證來了！…
孩子們！說「背題庫就好」跟「很簡單啦」，只用於神人…
像我們這種初學者還是好好穩紮穩打吧！
不然你會需要跟虎虎一樣存錢重考… ((默","['可以吃嗎', '準備動機', '取得資格', '主題期許', '取得難度', '考試方式', '課程資源']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190896,AI&MachineLearning,1,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,3,03.MicrosoftBotFramework介紹,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1512603069000000000,706,"去年至今，許許多多的聊天機器人問世，像是卡米狗、小歐與紳士狗…等，受到大眾歡迎。這些機器人以更貼近、接近人們溝通方式的提供服務，讓瑣碎的工作不需要透過制式指令，更具人性。
這一篇我們將簡單介紹如何註冊您的 Bot、設定通訊軟體介接、透過 Bot Framework 建構邏輯與使用模擬器測試您的 Bot。
Step 1. 前往 Bot Framework 網站 → 透過 Microsoft 帳號登入

Step 2. 登入後 → 點選 My Bots

Step 3. 點選 Create a bot → Create


Step 4. 可以選擇將你的 Bot 直接佈署於 Azure 或是 透過目前網頁流程建構 Bot。我們選擇第二個。

Step 5. 開始輸入您的 Bot Profile。

Step 6. 在 Configuration 部分，Messaging endpoint 可以先留空白；先點選 Create Microsoft App ID and password。

Step 7. 點選產生應用程式密碼以繼續，來產生你的密碼
註：密碼需要記錄下來，若遺忘就只能重新產生。
註：APP ID(識別碼) 與密碼需要記錄下來，後續實作會使用。


Step 8. 完成，返回 Bot Framework → 可以看見 configuration 已經填上識別碼

Step 9. 拉到頁尾，勾選同意條款後點選 Register，完成！

Step 10.在 Channels 這個頁籤，加入新的通訊軟體(Channel)。你可以看見 Skpe 已經被加入。 後續實作的時候會教學如何加入 Facebook Messages 與Slack。

Step 1. 前往 Create a bot with the Bot Builder SDK for .NET 頁面 → 在Prerequisites 章節下載 Bot Application, Bot Controller, Bot Dialog Zip 檔案。
Step 2. 如文件所描述：
將 Bot Application.zip 直接放到
%USERPROFILE%\Documents\Visual Studio 2017\Templates\ProjectTemplates\Visual C#
將 Bot Controller.zip 與 Bot Dialog.zip  直接放到
%USERPROFILE%\Documents\Visual Studio 2017\Templates\ItemTemplates\Visual C#


Step 2. 開啟 Visual Studio 2017 → 開新專案 → Bot Application → 確定

Step 3. 專案內找到 Web.config 檔案，將剛剛步驟申請的 Id 與 password，填上 value

Step 4. 啟動專案，我們的機器人即在自己電腦上運作了 !
註：請記得你的URL，等等模擬器會用到 :)

上一個步驟，我們透過範本程式，在自己的電腦上啟動了機器人程式。  因為還沒有佈署到 Azure 上，也尚未在 My Bot profile 上設定 Azure 的服務路徑，所以沒還有辦法透過偷訊軟體進行測試。
開發階段，我們能夠過 模擬器 (Bot Framework Emulator) 來幫助我們測試機器人。
Step 1. 前往 模擬器的 Github → 下載副檔名為 exe 檔案 → 左鍵點擊兩次開啟模擬器

Step 2. 開啟模擬器，我們先開啟設定按鈕 (右上角 ... 的按鈕) → App Settings

Step 3. 在service 的頁簽 → 勾選 Use version 1.0 authentication tokens

Step 4.  輸入 URL (我們啟動專案的URL + api/messages)

Step 5. 輸入前面步驟得到 ID 與 Password

Step 6. 輸入文字進行測試
Step 7.接下來就可以開始開發  :)
註：其實在開發過程中，可以將 Web.config 內的 Id 與 Password 保持空白，使用模擬器測試時 Id 與 Password 也保留空白，也能使用 (因為早晚都需要加上，這裡就先一併先說明)。
","['前言', '註冊您的 Bot', '下載 Bot 的 Project template 與 Item template', '透過模擬器測試您的 Bot']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190586,自我挑戰組,0,自我挑戰日記系列,1,挑戰第1天，加油！,bdp,https://ithelp.ithome.com.tw/users/20107496/ironman,1512602446000000000,662,"大家好，聽說 ""IT鐵人賽"" 是個能對自已作挑戰，又能加速成長的活動，覺得好像是滿難得的經驗，也滿有趣的!!
所以也想要挑戰自已是不是能做到每天學習並寫文章，就參加了!!
但30天內容要寫什麼呢? 目標是什麼呢?
感覺有點糟了，想到現在還沒個目標也沒頭緒，都報名參加就別多想了，來邊學邊寫個30天的學習筆記好了。
希望能和大家一起持續寫滿30天的文章，達成目標!!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190893,自我挑戰組,1,30天的切版日記系列,3,Day3:引入reset.css之後,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1512602001000000000,680,"從一些網站當中右鍵檢視網頁原始碼，會看到這麼一隻css - reset.css
<link type=""text/css"" rel=""stylesheet"" href=""css/reset.css"">
打開一看 :
reset.css的用途，就是讓各個瀏覽器統一css，讓其歸零。
在寫網頁的時候先引入reset.css然後再引入自己的css去覆蓋reset.css。
不是說程式越少越好嗎？為什麼要做這種“覆蓋”的動作？

嗯...喔..這網站還擺了normalize.css
這個margin:0; padding:0; 比如div這個標籤沒默認。估了一下，有人在stackoverflow整理了各家瀏覽器的default styles。
還未仔細鑽研，不過這reset.css 讓我想起引入資源的各種像是排序、彼此覆蓋、一大堆有用跟無用的 !important 、一大堆後來加入的class所造成的維護困難， 尤其像是維護前人或以前的自己所做的東西，或以原有架構跟資源再去新增的狀況。
不知道大家都用什麼好方法在處理這樣的狀況，
打開f12看到一堆槓槓真的是............. 使寒冷的冬天更冷了",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190890,自我挑戰組,1,服務桌從開始到進入資安領域系列,3,[Day3]服務桌的修業:認識網路架構,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512601822000000000,689,"網路架構是基礎中的基礎，務必要熟悉～
#TCP/IP模型，網路架構分為4層，分別是:
-鏈結層Link Layer: 實體層是網路的基本，0與1的傳送與接收。
-網路層Internet Layer: 定義IP/封包如何通過路由器
-傳輸層Transport Layer: 定義傳輸資料走TCP還是UDP，TCP:會檢查資料完整性，UDP:不會檢查資料完整性。
-應用層Application Layer: 定義Client和server的資料交換方法(Http,https,smtp,ftp)
傳送端的資料經過層層打包後，在由接收端反序拆解讀取。
#OSI模型，網路架構分為7層，分別是:
-實體層Physical Layer: 負責管理設備和網路媒體之間的溝通。(針腳,電壓,網卡,主機介面卡...最基底的硬體媒介)
-資料鏈結層Data Link Layer: 負責網路位址尋找、錯誤偵測和改善。當表頭和表尾被加至資料包時會形成影格。資料鏈表頭(DLH)包含有實體位址和錯誤偵測及改錯的方法。
-網路層Network Layer: 定義資料路徑和轉寄，將網路表頭(NH)加到資料包變成封包，網路表頭(NH)包含網路資料。(IP)
-傳輸層Transport Layer: 將轉輸表頭(TH)加到資料裡以形成資料包。表頭包含要用的通訊協定。(TCP)
-會議層Session Layer: 資料傳輸中設定和維護傳送端與接收端之間的通訊連接。
-表現層Presentation Layer: 資料轉換為接收端相容的格式
-應用層Application Layer: 定義與另一應用軟體之間的通訊(http,https,ftp,telnet,ssh,smtp,pop3)
網路分層，層層獨立分工處理資訊，彼此相亙依賴。
符合傳輸模型即可使用，相容性提高了，也更方便靈活運用。
媒介層-
實體層:位元(Bit)
資料連結層:資料訊框(Frame)
網路層:封包(Packet)
主機層-
傳輸層 : 資料段(Segment)
會議層、表現層、應用層 : 資料(Data)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190793,自我挑戰組,1,勇者不冒險，嘴一回桌遊系列,3,[Round3]桌遊...不就大富翁嗎,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1512601629000000000,676,"先在 google docs 再轉到這裡的 markdown 排程真是頭痛...
抄襲模仿是讓自己快速進步的其中一種方式。但別急著向經典作品致敬，先來了解桌遊的歷史，因為即使是樂趣也會隨著時代的變遷而不同。相信大家都不反對古老的桌遊真的沒那麼吸引人...再來是歸類桌遊的類型，也比較容易有方向可遵循。最後拆解機制的元素後，才能一一去去替換成自己的東西。
對了，發現桌遊的大寶庫 BoardGameGeek https://boardgamegeek.com/ ，註冊就對了。
桌遊是什麼東西? 採一個最寬鬆的定義，只要非電子類的遊戲都可能可以成為桌遊(WIKI:https://zh.wikipedia.org/zh-tw/%E6%A1%8C%E4%B8%8A%E9%81%8A%E6%88%B2) 。所以桌遊是大富翁，是撿紅點、是象棋，是麻將。不過這裡重點不在於怎麼定義桌遊，問題在於自己覺得好玩的桌遊是怎麼樣的?
大富翁好玩，因為他有許多道具，特別是玩具鈔有白花花銀子的感覺，選擇購買土地還能拿到小房子開心的蓋在自己的土地上，最後還有機會和命運這種驚喜。而象棋可就沒那麼有趣了，因為每次都輸給”聰明人”，但換個機制，暗棋卻很好玩，每次的翻開是未知數。三國棋就更好玩了，可以選擇魏、蜀、吳陣營，有角色扮演的感覺。所以一款桌遊好不好玩雖然因人而異，卻有決定性的因素存在，可以歸類如下:
這些元素的持續翻新也是近年來桌遊這麼好玩的緣故吧。
分類有很多種方式，還記得 BGG 網站嗎，藉由該網站我們可以更容易的拆解桌遊，首先是主分類為八種、再來的子分類 https://boardgamegeek.com/browse/boardgamecategory 現有80幾種，而機制 https://boardgamegeek.com/browse/boardgamemechanic 現有50幾種。
註: 中文的翻譯可參考:
主分類:http://raining0909.blogspot.tw/2014/02/bgg_28.html
子分類:(http://mj9981168.pixnet.net/blog/post/140204272-bgg%E6%A1%8C%E9%81%8A%E5%B1%AC%E6%80%A7%E4%B8%BB%E9%A1%8C)
機制:(http://mj9981168.pixnet.net/blog/post/140550182-bgg%E6%A1%8C%E9%81%8A%E6%A9%9F%E5%88%B6)
我們只有30天嘴炮的時間，可沒有功夫一一點進去看。在這裡我們採用的過去的經驗，先從玩過後覺得好玩、不好玩的遊戲，再回去網站找看看是怎麼被分類的。這樣有系統的記錄後，之後也能夠較”正式”描述桌遊的兩三事。
喜歡的遊戲
不喜歡的遊戲
下一回合即是填入喜歡與不喜歡的表格",,"['設計就像這樣的囉，他做什麼，你就做什麼', '桌遊背景', '桌遊回顧']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190881,自我挑戰組,0,Vuex學習筆記系列,1,[Vue.js]Vuex學習筆記(1)-基礎介紹,NomiSu,https://ithelp.ithome.com.tw/users/20107601/ironman,1512601426000000000,793,"Vuex 是一個專為 Vue.js 來做使用的狀態管理模式與文庫，它作為應用程序中所有組件的集中存儲區，並在規則下確保只能以可預測的方式對狀態進行變更。
以上程式碼有下列幾個部分：
下面是“單向數據流（one-way data flow）”概念的流程圖：

單個組件的狀態非常好管理，但當遇到多個組件共享state時，單向數據流的簡潔性就很容易被破壞，例如：
所以這個時候我們為什麼不把組件共享的狀態抽取出來，以一個全局的方式來管理，在這個方式下，我們的組件樹會變成一個巨大的view，任何時候任何的組件可以存取state或是觸發actions。
另外，通過定義和隔離狀態管理中的各種概念並強制遵守一定的規則，我們程式碼將會變得更結構化且易維護。
這就是Vuex背後的基本概念，借鑒了Flux、Redux和The Elm Architecture
Vuex 架構圖：

基本上我們在使用 Vue 時，使用 global event bus就足夠滿足開發的需求了，但如果今天要構建的是中大型的 SPA ，這樣就很可能需要如何好好的管理組件的外部state，所以自然而然 Vuex 就會是最好的選擇。
Vuex intro
同步收錄於部落格",['什麼是 Vuex ？'],"['狀態管理模式（State Management Pattern）是什麼？', '什麼時候需要使用Vuex？', '參考資料']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190887,自我挑戰組,0,D3.JS網頁視覺化學習系列,3,Day3圖表簡介-直條圖(程式碼研究),linonedollar,https://ithelp.ithome.com.tw/users/20107135/ironman,1512601323000000000,654,"趁著好不容易下課之後的時間來研究昨天寫的程式碼
以下是昨天的內容",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190879,自我挑戰組,0,delphi菜鳥入門日記系列,3,delphi菜鳥入門日記-Day3簡易計算機!?,getfree84419,https://ithelp.ithome.com.tw/users/20107544/ironman,1512598776000000000,643,"嗨~大家好!我是Kiang很抱歉這麼晚才PO文，因為上班有點忙碌，
所以回到家後才開始弄今天的東西，不過先預告一下~我可能會有一兩天中斷，
最近要出去玩、出差等等，事情有點多哈哈哈但我會盡量提前準備好內容的!!
繼昨天講解完三個小元件後，今天就是要來練習啦!!
總而言之挑了一個可以很難也可以很簡單的東西，
太久沒寫這種東西了，害我腦袋偶然間當機，
其實他還蠻考驗程式邏輯的，但我這裡只提供簡易的版本，
在此之後希望大家可以自行深入研究唷!!
總之先想辦法把介面拉出來(不知道要長怎樣的請拿出手機按出計算機)

然後把每按鍵事件先點出來，加上我們的程式碼
以此類推把你的1,2,3,4,5,6,7,8,9,0,+,-,x,/,通通加上去~
然後恭喜你完成了1/3的東西了
但接下來就是要考驗你的邏輯了!!
先幫我這樣做

OnShow那邊幫我點擊兩下，然後回到程式畫面

StringList是一個蠻好用的字串陣列，可以去網路上多多研究使用方法唷!!
涵式成後完，把我們+-x/的按鍵事件給打開來~
每個都給事件都補齊上去後!!
我們就大功告成啦!!!~
接下來就是F9去試試看你的簡易計算機囉!!
不曉得我這樣打和上註解有沒有人看不懂呢!?
如果看不懂的話~請在下方留言告訴我，我在添加更詳細的說明
那我們下次見囉!!See you Guys!",['計算機'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190884,AI&MachineLearning,0,讓我們一起來見見歐美語音助理界的當紅炸子雞-Alexa吧!系列,3,[Day3]語音助理PK擂台,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512598474000000000,637,"我們來看看市面上幾個有名的語音助理，各有多少技能可以讓使用者使用

資料來源: voicebot.ai
由這個圖可以看到，截至今年6月，Alexa已經有15,000多個技能可以下載使用，
Google home和Microsoft Cortana則分別是378和65
上個月的報導指出，Alexa的技能現在已經到達25,000多種!
以下為三大語音助理PK大賽

資料來源: techradar
以下為Echo和Google Home目前價格
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190874,ModernWeb,0,Nest.jsframework30天初探系列,3,Nestjsframework30天初探:Day03Components,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1512598454000000000,732,"
在nestjs世界裡，幾乎所有東西都是Component，像是Service, Repository, Factory, Helper ...，然後透過constructor可以注入到各個Component或Controller。在上一章節我們實作了Controller，但如我之前提到的，Controller只需要負責處理HTTP請求即可，商業邏輯、資料處理就交給Services，盡可能做到單一職責，程式要朝著符合SOLID原則去開發。
接下來的程式，寫過Angular的朋友應該會覺得有些地方蠻類似的，很有親切感。
接著使用Postman
成功取得資料。
成功取得資料。
成功新增一筆資料
到目前為止都很順利，nestjs不單單有Rx.js可以使用，還可以寫async/await，我們改寫一下UsersController，程式如下。
src/modules/Users/users.controller.ts
再進行一下第六點的檢查，一切都正常顯示，大功告成，已經學會怎樣寫Service了。
程式碼在github",,['Components'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190885,ModernWeb,0,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,3,"打造MessengerExtension-Day3-CORS,Same-originpolicy和iFrame","AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1512598381000000000,631,"在昨天的最後，我們成功地設定了我們粉專的 home_url 和 menu
但是打開過後卻發現，從手機版的 menu 是可以成功讀到 Hacker News 的
而瀏覽器版本卻不行，在開發者工具上我們讀到了一個似懂非懂的訊息
Refused to display 'URL' in a frame because it set 'X-Frame-Options' to 'deny'.
接下來，我們將花額外 1 ~ 2 個篇幅介紹一個常碰到的瀏覽器標準 - Same-origin policy(同源規範)
由於 Facebook 對於跑在自己環境的擴充套件，一定有許多安全上的考量
所以今天將會介紹 Same-origin policy, CORS, 和我們碰到的 iFrame 問題
如果你已經做前端一陣子了，並且有串接過別人開的 API
應該會對一個錯誤訊息不陌生

Failed to load https://github.com/alxtz: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'https://www.google.com.tw' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.
第一次見到這樣的訊息都會有點疑惑
通常後端開出來的 API，習慣上會使用 Postman 或 curl 先做些測試 (至少確定網址沒給錯)
但是自己進行 fetch 再抓的時候，卻怎麼樣都不成功，這是怎麼回事？
就舉自己的 GitHub 頁面 https://github.com/USER
使用 Postman 來抓取資料

(https://github.com/alxtz 正常地回傳一份 HTML)
使用 curl

(https://github.com/alxtz 正常地回傳一份 HTML)
試著在 www.google.com 開啟 devtool，用 fetch 來抓 GitHub 的資料

這樣卻失敗了！
如果是要 Debug 的話，通常會這樣去做猜想
直接在網址欄輸入 www.github.com，按下 enter
如果你這邊同時打開 devtool(開發者工具) 的  「Network」 觀察網路流向的話

可以看到，瀏覽器抓取網頁的方式跟你使用 Postman 來 GET 其實根本就一樣
如果不確定的話，可以連同瀏覽器自動幫你帶的 Headers 都加進 Postman或 curl 裡，但依然沒有影響

但是用這些參數去在 www.google.com 再呼叫一次 fetch ，卻還是失敗
在 github.com 下使用 fetch

這樣卻成功了？
這是為何呢
基本上為什麼會有這樣的現象，要從 Internet (網際網路) 的規範開始介紹
(盡量講的淺顯易懂)
我們為了讓一門技術(像是網路)能夠廣為流通，通常會做的方式是
把想實作的技術寫成一份比較抽象的「規範」，可以把它想成規格書
接下來所有的開發者或是公司，都可以去把它實作出來
其中一個例子就是瀏覽器，各家公司都會實作自己的瀏覽器(Chrome, Firefox, Opera)
而瀏覽器本身就是遵從各種規範所做出來的 (HTML, CSS, JavaScript, HTTP...)
現在世界上有許多組織致力於寫這些規範文件，舉例來說
W3C -> 包含 HTML, CSS, SVG, XML 比較和我們熟悉的 UI 及檔案格式相關
IETF -> 網路工程任務小組，主要負責 OSI 模型(由ISO提出的的網路架構)的第三 & 第四層。主要大家熟悉的有像是 HTTP 和這次討論主題的 CORS
IETF 所提出的備忘錄 RFC 6454 中有一段定義叫做 Same-origin policy
內容很簡單，那就是只要你在「網頁的環境中」發的任何請求(不管你是使用 fetch, $ajax)
都只能同個網域底下的資源做互動
所以在剛剛的範例裡面，由於 www.google.com 和 github.com 所在的網域不同
所以我們發的 fetch 都會失敗，只有在 github.com 這個網域下寫的 fetch 才會成功
但是你可以想見，只限制跟自己同網域的程式碼才可以請求是一件非常嚴格的事情
(當然，因為 CORS 只限制了「網頁的環境」，所以你對於想獲取的資源。你可以自己開一支 API ，來抓取這些資料)
但是這同樣不方便，我們平時使用的「第三方登入」、「CDN」似乎不受這類限制
當然 IETF 也有注意到這件事情，所以他們提出了另一套規範，那就是 CORS
根據同源政策，你向 API 撈到的資料
開啟開發者工具的 Network 可以看到正確的回傳資料
不過瀏覽器本身會限制，讓你的 JavaScript 讀不到這些內容
CORS 基本上在「同源政策」上加了一個例外條款
那就是，如果特別把你的加上一條 Header
Access-Control-Allow-Origin: http://www.google.com
那麼這個網址，不受 CORS 限制！它可以讓你指定的網域進行跨域請求
一般，如果我們想要架一個公共的 API，像是 CDN 好了
我們會讓這個 CDN 多回傳一個 Header
Access-Control-Allow-Origin: *
這樣任何網站才可以都存取到這個 CDN
舉例來說，今天我們去找一個 CDN
(註: 給不知道 CDN 的人，CDN 是一種線上幫你 host 一些函式庫的服務，可以免得你自己去載來使用)
我們這邊就拿 cdnjs.com 的 vue 來做範例好了

我們一樣在 www.google.com 做一個 fetch

可以看到，我們這次的 fetch 是成功的！但是 www.google.com 和 cdnjs.com 並不在同個網域下
我們再次打開 devtool 的 Network

可以看到從 https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.9/vue.js 來的回傳
果真包含了 Access-Control-Allow-Origin: *，而這就是我們可以對他進行 CORS 請求的的原因
在我們昨天的範例中
我們看到了 iFrame 也被類似的 Headers 擋住了
只是在規範中，iFrame 其實相反
iFrame 預設是支援不同網域下連線的，但是只要你回傳 X-Frame-Options: DENY
瀏覽器就會幫你阻擋想透過 iFrame 來請求你網站的 HTML
我們實際對 https://news.ycombinator.com/ 進行一個 fetch 來試試看
果真跟昨天的結果一樣

Messenger 網頁版開啟這個 URL 的方式是使用 iFrame，所以被 X-Frame-Options: DENY 阻擋了
而在 iOS 版的 Messenger，他使用的是 iOS 原生功能，叫做 WebView，而同源政策不會去限制「非網頁環境」的存取
這就是為什麼在 iOS 上可以開啟的原因
經過介紹後，應該對 CORS 以及 Extension 讀取我們網頁的方式有更深的認知了
我們後續將不會只顯示 https://news.ycombinator.com/ ，而是會自己實際 host 一個網站
並且接到我們的 Messenger 上，我們明天見！","['前言', 'Same-origin policy(同源規範)', '範例', '猜測', 'Internet 規範', '同源政策 Same-origin policy', '跨網域請求 CORS', '範例', '怎麼解決？', '明天']",,"['嘗試 1', '嘗試 2']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190875,ModernWeb,0,Confluence線上協同作業之平台系列,2,學習與進行的方式,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1512597653000000000,628,"以我來說，對confluence算是新手，且它主要的環境是需要架設在linux的環境，雖然我從帳面上的資歷來看從事資訊的工作已經10多年了，第一印象如果都不認識我這個人，想必第一個反應會是熟手，即熟悉某一塊的資訊領域的資訊人員，其實並不然，有些IT邦或者藍色小舖活絡的朋友可能與我有接觸 (網路上討論文章或者問問題)，而其實大部分我學習資訊技能的方法，都是透過google、網路上發文、或是同事之間的討論，再將這些所問到的資訊，整理在自己的BLOG；整體言之，我並不是擅長在快速的步調中學會某種資訊技能的人員，也因為這個特性，那要如何在公司的環境中，來了解及學習confluence呢？基本上就是用找出盟友的方式進行，我的救援投手會在哪？而這基本上也是透過不斷的問漸漸有成型的進行Confluence的方式。
這應該是職場上常會見到的情況，可能丟個任務、工作來給您，而您可能還不太熟悉所被交辦的任務，雖然是種嚴格的考驗，但我想也唯有這樣的方式，如果之後有撐過最難過的時間，您之後在學習相關領域或工作的時候，應該才會比較快找到學習另外技能的方式，這應該是屬於每個人獨一無二的成長過程，或是所謂的個人獨到之處吧。而同樣的，在接觸Confluence的一開始，帶我的師夫透過一堂課程，講述confluence在公司內的使用規定與注意事項，也就開始展開我認識confluence的學習之旅，而陸續接著開始進行幾次的上課訓練，這裡所說的上課訓練是我要開始教別人有關confluence的相關資訊，那一開始要怎麼教呢？基本上因為對於教學簡報的了解程度，可能不是很了解 (如果照字面上來念是可以了解簡報中所要表達的意思)，但是還不是很明白它如何來與工作中來做結合，可以用一知半解來形容一開始的階段。
教人上課是可以學到東西的，因為一開始在教confluence的階段，是教導剛進來員工的課程，而剛來的員工基本上課程的內容，是甚麼都敢問，也因為我跟他們彼此都有股菜鳥的氛圍，縱使只是單純地想像隨意問，也不一定問得有所依據，而作法上也不一定經過上面所允許，因為我跟它們當時的階段都還算是對公司了解的階段，但不可否認的，那樣的問法可以幫助自己多了點想像力及應用，這是好的開始。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190883,ModernWeb,0,TypeScript初學之路系列,3,Day03-Function,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512597266000000000,646,"Function 在 Javascript 中是很基本的型態，可以用在隱藏資訊，或攥寫模組等功用
Javascript 中基本的 Function 有兩種
在 Javascript 中的 Function 可以使用外部的變數，這個行為叫做 capture
使用 TypeScript 寫一個最基本的範例
完整的 Function Type 範例
上述範例中輸入的參數可以定義類別，同時也宣告 Function 回傳的類別，並且有兩個相同的宣告類別，
但是做事在一開始就宣告完整的 Function 類別，那之後就可以省略
範例
在 TypeScript 中指定每個參數不能是 null 或是 undefined
在 Javascript 中每一個 Function 都是非必要的，
當你沒有輸入的時候值都會是 undefined 在 TypeScript 有宣告的都是必要的，
但是也提供一個 ? 來宣告此參數為非必要
TypeScript 非必要參數必須要在 必要參數的後面， TypeScript 也可以提供預設值的設定
範例
上面的範例中可以看到，你可以先預設值給予預設值之後就不是必要參數，因為當你沒有輸入該參數的時候也會有預設輸入不會影響程式執行
在 ES6 也有一種特性 Rest
而這個特性在 TypeScript 也可以應用在 Function 之中，當你不知道之後輸入的參數值總共有幾個，可以利用這個特性將所有後面輸入的參數值組合成一個陣列
上述範例是可以編譯的，但是在執行的時候會有錯誤
因為在執行照 createCadrPicker 的時候會找不到 suits 這個 Function 因為這是 this的作用域的問題
因為對 Javascript 來說 Function 也是物件，所以在上述範例中的 createCadrPicker 中的 this 是指這個 createCadrPicker Function 本身，但是這個 Function 並沒有 suits 這個屬性，所以他會找到 undefeind 在後面 this.suits[pickedSuit] 的時候因為 undefined 在 Javascript 並不是物件，所以就會造成這個錯誤
所以我們可以把這個範例做一些修改
其實我們做的修改只是將 function(){} 修改為 () => {} 但是因為在 Javascript 中的 arrow function的特性 所以他找到的 this 是指 desk 這個物件，就可以指導 suits 這個屬性這個屬性
但是在上面範例中的 this 的型別依舊是 any 如果我們希望在 Function 定義 this 的型態就要將這個宣告放在 Function 的第一個參數
加上兩個 interface， Card 和 Deck
在 interface 中的 createCardPicker 有宣告了 this 的型態
是 Deck 而不是 any 所以 --noImplicitThis 不會有錯誤
你在 callback 中使用 this 的話
依舊會產生一些錯誤，因為 this 會是 undefine 你可以宣告一個 interface 來避免這種錯誤
this: void 代表 addClickListener 預計 onClick 是一個 Fucntion 並沒有 this 的類別
Javascript 是一個動態繼承的程式語言，一個函式藉由輸入值得到不同的回傳值是十分常見的
pickCard 會依據我們傳進去的參數不同，回傳不同的資訊這樣的話我們該如何去定義呢？
為了要讓 TypeScript 編譯的時候能夠選擇正確的型態會宣告兩個不同的 PickCard1
然後分別宣告不同的 parmeter 而產生的不同的 response
然後在最後真正宣告 function pickCard1():any 設定回傳值是 any
之後再真正使用 pickCard1 的時候就會依據不同的 parmeter 檢查不同的形態和 response",['Functions'],,"['Optional and Default Parameters', 'Rest Parameters', 'this', 'this parameters', 'Overloads']",['this parameters in callbacks'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190882,SoftwareDevelopment,0,每天Racket3分鐘系列,3,"(defineday-02""Racket不會咬人—defineandREPL"")",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1512596642000000000,627,"度過了兩天沒有程式碼的內容，從這一篇開始，我們寫下人生第一個 s 表示式。
我們先叫出 DrRacket，然後在上方的程式碼編輯區寫一些簡單的東西：
然後在右上方按下運行(Run)。有發現什麼嗎？下方的 REPL 出現了以下訊息：
奇怪了，1 + 1 不是等於 2 嗎？
要解釋這件事之前，我們先解釋一下，程式怎麼被解讀的。
假設我們剛剛的 1 + 1 要 assign 給一個變數 a：
然而，不管或大或小的程式，進到執行階段，都必須被轉變成為一種特殊的結構，它看起來像是一棵樹，像這樣子：

有的人的畫法是把操作動作放在另一側，像這樣：

再透過尋訪語法樹的過程，將值求出。因此，我們將上述的算式用小括號括起來：
然後，這步是重點：將操作子搬到前面：
最後，因為等號在早期的語言是一種比較兩個值的操作，因此把 = 換成 define 如下：
按下運行前，先再加一行：
這時你會看到下方 REPL 出現了正確的結果。
而每一種語言，都有它特殊的語法，例如 Perl 裡頭，正規表示式可以當作一般語法使用，或在 Ruby，任何一個元素都是物件，因此數字可以直接用 . 來呼叫物件內部的 method。甚至，PostgreSQL 的字串相連，使用 ||，但在 Haskell，卻是使用 ++。
但是，在 s 表示式裡，沒有這種東西！因為 s 表示式的語法，直接地對應到程式的語法樹，並且所有的操作全部都放在第一個位置，後面接的是參數或定義內容。因此，在閱讀這類語言時，你起初會覺得很痛苦，為什麼東西包了一層又一層，在寫的時候，會覺得很繞舌，為什麼每一個操作都要有相對應的 function。但是，一旦習慣以後，就像學會九陽神功，打通任督二脈的張無忌，你便能快速掌握每一個語言它語法與操作的背後對應到的思想。從語法、語義，到函式的各種轉換，再加上每種語言都有其特定的慣例用法，稍微了解後，就能夠快速轉換到其他語言。
Lisp 家族衍生出來的 s 表示式語言都有著這樣的特性：語法中沒有魔法，沒有約定俗成，沒有優先序。
稍微介紹完 s 表示式與程式語言的關係後，我們來介紹 define 的作用。Racket 要使用任何變數，一定要先宣告，而宣告的關鍵字，就是 define，如下：
define 的第一個參數，就是變數名稱，這是一個固定的用法。然而，在正規的程式語言詞彙裡，不叫變數名稱，叫識別子： identifier ，我們以下簡稱 id 。第二個參數，就是要賦予前面 id 的值。這個值可以是數字、字串、boolean 值，或者是函式。函式部份，我們後續會說明。
此外，Racket 是一個支援多回傳值的語言，這是我在 Java 寫這麼久以來，最想要的語法特性。回傳值目前還沒說到，但我們可以用這個機制，一次宣告多個 id。這回，是使用 define 的擴充形式：
使用 define-values，後面接 values，可以一次 assign 多個 id 的值。但在此必須注意，在 s 表示式語言裡，() 所含括起來的範圍，稱為 form ，每一個 form 所使用的 () 不能多，也不能少。例如不能這樣寫：
有個 C 語言的笑話說，當你的 C 程式無法執行時，在出錯的地方加上 * 或拿掉 *，或用 &，或許它就能執行了。
Lisp 家族的語言也是這樣，當你的 Racket 程式無法執行時，在出錯的地方加上 ) 或拿掉 )，或許它就能執行了。
DrRacket 下方所附的 REPL 很特別，跟你若用 Racket command line 工具所用的 REPL 不太一樣。最大的差別在於，DrRacket 的 REPL 可以讓你即時與上方寫的程式互動，但若這程式用 Racket 的 REPL 來開啟，就沒辦法這樣輕易地可以呼叫每個內部的元素。這是 DrRacket 的特點，這 REPL 會是你接下來使用這個語言的好朋友。例如當你上方已經這樣寫：
按下運行後，在下方 REPL 可以輸入：
可以直接得到：
如果需要即時驗證自己寫的程式，這是一個很方便的機制！",,"['1. 來吧，寫下你的第一個 Racket 程式', '2. 沒有魔法，只有 s 表示式', '3. 一個 define 走遍天下', '4. REPL 是你的好朋友']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190876,自我挑戰組,2,用laravel尻出自己形狀的linebot，還要撐三十天！系列,1,【第一天】萬事起頭難，這篇就來做環境吧！,太太,https://ithelp.ithome.com.tw/users/20107380/ironman,1512596633000000000,823,"要做一碗雜碎麵，你要先找到雜碎和麵，才能加湯！
今天要做一個自嗨用對話機器人，我決定用 laravel 5.5來做，佈署在heroku上。
為什麼是這樣的組合咧？因為方便又免費，對我這個隨時會選擇放棄的碼農來說，這樣的組合就像在台北街頭找到３０元滷肉飯一樣愛不釋手啊！
點我看官方文件！
好了，今天就這樣！
laravel 安裝相信大家都會，官方文件也比我講詳細一百倍，這篇的重點就不放在這了。
記得要先require最重要的LINE Bot SDK
再來是 Heroku，要如何把 github上的專案 Deploy在 Heroku上咧？
接圖！

再接！

看我手里劍！ 這邊 pipeline我是沒選，之後設定也可以。

看我月牙天衝！

伸縮伸縮自在的愛！

剪刀，石頭，石頭！

不截圖了好麻煩

有兩件事情要記得做
之後應該就可以順利看到熟悉的 laravel頁面了

如果有什麼問題或描述不清楚的話可以直接留言給我，github的連結在這邊，可供參考～
完蛋了光截圖寫步驟就快兩小時，電動都不夠打了","['【第一天】萬事起頭難，這篇就來做環境吧！', '點下去之後你應該會很順利的看到403，不要慌！']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190789,自我挑戰組,0,迷路還是繼續往前走的菜鳥工程師日常系列,2,[Day02]沒人想知道的起源與動機,overflow,https://ithelp.ithome.com.tw/users/20107577/ironman,1512596470000000000,690,"今天來寫一些起源和動機吧!! (O.S. 到底誰想管你這個Nobody的心得啊~~ 我就是要寫XD) 
我記得我第一次接觸到網站的製作是在國小3-4年級的時候，當然那時候說不上是一個網站，只能像你開小畫家隨便畫個圓圈圈，就以為自己會畫畫，當時接觸到FrontPage這軟體，畢竟所見所得，成就感指數百分百，那時候只覺得我自己對這個東西很有興趣，以後就是要往這方面發展。
小六那時好像流行班級網頁也流行資訊化教學，記得以前社會課還要自己做簡報上台報告！當時做簡報跟其他同學比起來，我做的簡報在老師眼中確實厲害一點點（自己誇...，於是就一點一滴建立起我的信心，老師也知道我對電腦的軟體操作很有興趣，也知道我喜歡做網頁，就把班級網頁交給我做拉，記得那時候流行的軟體叫做 Namo 的樣子，可以簡單產生個人網站，當時也很流行一堆閃亮亮奇特的語法特效，不管怎樣加進去網站就是「潮」。反正對做網頁的興趣就是在這時候建立起來的。
國中時記得好像有流行留言板，當時就也想自己做但是完全沒天分，看也看不懂！發現同年齡中的人已經有人很厲害了QQ，會自己改PHP程式，我完全無法理解，我還記為了學這東西買了一本叫做「如何設計PHP程式」，但怎麼看都看不懂，像是變數這個名詞整個超抽像，完全無法理解是什麼，所以就被我塵封了
還是要假掰一點，貼一點跟程式碼有關的東西（逃
光是為什麼要要用 $ 這就讓我思考了很久，反正背就對了！
我甚至覺得為什麼不要$c = 1 + 2; 就好了，所以當時完全是沒概念，還有 boolean 我當時一直覺得布林他一定是外國人 
很多程式書的書起頭就是 Hello World! 我也一直覺得為什麼要說「你好世界」，這樣做到底跟寫程式有什麼關聯？
不過現在真的起手式就是要先Hello World!阿，我大概也是在踏入社會後才了解這件事情的.....
開始流行無名小站的時候，也是因為自己的部落格樣式就是不想跟別人一樣，所以就接觸到了CSS，但是我一樣完全不懂，我只知道這段複製貼上會是我要的結果就好了，根本對CSS完全沒概念，也分不清楚什麼是相對定位、絕對定位，反正就是這樣一點一滴的矇到去年我上完相關課程，我才認真釐清CSS的觀念
那時候Dreamweaver非常盛行，可是門外漢的我，就是要持續朝自己的夢想與目標前進，所以這是高中的時候用FrontPage亂拖亂拉出來的網頁，現在看這個東西真的自己都被自己嚇到，這到底是什麼XD，怎麼有勇氣

好啦說了這麼多，只是要說從以前就由這些小事件建立起我要成為網頁工程師的目標，很早就大概抓到自己的方向與目標了，但自己總覺得欠栽培（自我感覺良好XD，那時候也不知道想要投入某個領域要選什麼科系，只覺得聽起來資管系好像跟電腦有關聯就一心想著我要念資管系，事實證明我想的東西和實際上的狀況好像不同，但還是有幫助拉XD",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190877,ModernWeb,0,PHPlaravel的邂逅系列,3,DAY03-xampp安裝,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1512594487000000000,655,"DAY03-xampp安裝教學
忘記自己電腦之前就有安裝xampp，應該先安裝這個才對，先到官網xampp下載
第二天中已經把composer安裝好了，接著就是要把laravel安裝起來，離建立專案越來越近了，大家有沒有很興奮阿XDD
step.1 點選該圖示安裝

step.2 下一步

step.3 下一步

step.4 預設打勾就好，下一步

step.5 把打勾取消下一步

step.6 下一步

step.7 就一直下一步就對了

step.8 你可以到瀏覽器網址列上打localhost，你一定是看到錯誤，因為還沒開啟服務ＸＤＤ

step.9 開啟xampp主程式，點選Manage Servers

step.10 把MYSQL Database和Apache Web Server都開起來，關閉時紅燈開啟時會變綠燈

step.11 再到瀏覽器打localhost就會出現東西啦，恭喜你安裝成功了

step.1 先到官網下載安裝檔，接著就是下一步了

step.2 選擇我們需要的就好(Apache,mysql,phpmyadmin)，你想全部選也可以的

step.3 這邊預設就可以了

step.4 把勾拿掉

step.5 下一步

step.6 開始安裝囉，安裝好還是下一步

step.7 記得打勾這樣會開啟主程式

step.8 選擇語言，只看得懂英文@@

step.9 終於看到主畫面了，把apache和mysql啟動(start)

step.10 在瀏覽器網址上面打localhost，有東西的話就代表成功啦 撒花
",,,"['MAC版本 底下還有windows版本', 'windows 版本']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190878,自我挑戰組,0,,3,人工智慧，大家都寫些什麼呢？,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1512594341000000000,645,"關於人工智慧的介紹，有空再來補文章或是內容吧
人工智慧這個主題的組別，到我文章撰寫時，有16個人參加這組
主題分別為：
只有三個主題開始寫文，看來大家都還在準備文章中呢
Ms Bot framework至少有三個人在寫
是挺有趣的，觀念的主題也有兩三個
希望這些主題的作者都能寫出很棒的分享文章",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190873,ModernWeb,1,重新認識JavaScript系列,3,重新認識JavaScript:Day03變數與資料型別,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1512591279000000000,1594,"上一篇文章我們簡單介紹了 JavaScript 的歷史，那麼從這篇開始將進入語法基礎篇。 JavaScript 的語法其實大量借鑒了 C 語言以及其他類似 C 語言 (如 Java) 的語法，所以過去如果你也寫過這種類語言的話，相信可以很快上手。
今天要介紹的主題就是 JavaScript 的變數與資料型別。
變數是用來儲存資料和進行運算的基本單位，可以將變數想像為一個盒子，用來存放資料。
在 JavaScript 中的變數宣告有其一定的規則，變數的第一個字母必須為英文字母、底線 _ 或是錢字號 $ ，後面可以是英文字母、底線 _ 或是錢字號 $ 以及數字。 變數名稱不可以是保留字 (Reserved Words) 與關鍵字 (keyword) [註1]。
需要注意的是，JavaScript 的語法是有區分大小寫的，也就是說，變數 app 與 App 在 JavaScript 會被認為是兩個不同的變數，而且自 JavaScript 1.3 之後開始支援 Unicode。
換句話說，你的變數名稱是可以用中文命名的，而且完全合法，但基於開發習慣還是盡量避免使用非英文字母、底線或是 $ 以外的字元來命名變數，用中文編碼的話，其他語言的系統開啟可能會變亂碼。
在 ES6 以前，變數在使用前，可以透過 var 這個關鍵字來宣告。
在 ES6 之後宣告「變數」與「常數」，除了 var 之外，還可以透過 let 與 const 做宣告，這部分我們之後講到 ES6 時再談。
由於 JavaScript 是個「弱型別」[註2] 的語言，變數本身無需宣告型別，型別的資訊只在值或物件本身，變數只用來作為取得值或物件的參考：
如果在沒有宣告變數的情況就要使用的話，就會出現 ReferenceError 的錯誤：
像這樣

但在開發的時候你可能會發現一件事，就是即便你的變數在事前沒有透過 var 做宣告的時候，仍然可以給定變數初始值，但強烈不建議這麼做。
要記得一句話，所有沒有透過 var 宣告的變數都會自動變成全域變數。
什麼是「全域變數」？ 之後在介紹變數的作用範圍會再詳細解說。
註1: 關鍵字指的是 ECMAScript 所規定具有特定用途的英文單字，不能用來作為變數名稱使用。 而保留字則是雖然目前在 JavaScript 還沒有特殊用途，但在未來有可能會被拿來當關鍵字來使用，所以也不能作為變數名稱。 請參考 MDN 關鍵字與保留字列表。
註2: 在程式語言中，會依照語言的型別系統 (Type system) 來分成「強型別語言」與「弱型別語言」兩種。 強型別指的是「程式所定義的變數型別等於變數在執行時期的型別」，也就是說，這類語言的變數在被宣告的時候，必須指定一種資料型別給它，如果對這個變數做了錯誤型別的運算時，就會出現錯誤，也可以利用編譯器提前做型別檢查，就可以減少在執行時期 (Runtime) 發生的錯誤。 弱型別語言則正好相反，雖然取得了語法簡潔的優點，但要注意型態轉換時產生非預期的問題。
剛剛說過，由於 JavaScript 是個「弱型別」的程式語言，嚴格來說，變數本身其實不帶有資料型別的資訊，其中的「值」或「物件」才有。 所以說在執行時期透過變數內容來參考至物件或值，才會得知此變數有什麼操作的方法。
變數沒有型別，值才有。
在 ES5.1，JavaScript 內建的型別主要可以分成基本型別 (Primitives) 與物件型別 (Object) 兩大類。
而基本型別又分成 string、number、boolean、null、undefined 幾種 [註1]，除了上述幾種之外，都可以歸類至物件型別 (Object)。
判斷型別的方式，可以透過 typeof 運算子來協助我們，但有時會有例外需要處理。

來源
JavaScript 沒有 char (字元) 的概念，只有字串。 字串會用 ' ' (單引號) 或 "" "" (雙引號) 包夾住，兩者不可混用，意即用單引號開頭的，就要用單引號收合，反過來說也是。 單引號與雙引號的使用在 JavaScript 沒有什麼差異，依習慣使用即可。
但是，倘若要在單引號內包覆單引號，或是雙引號內包覆雙引號就會出現問題：
如果改成這樣就可以：
但如果有非用不可的時候，可以透過 \ (跳脫字元, escape character) 來處理：
如果遇到了多組的字串時，你可以用 + (加號) 來連接字串：
甚至是多行字串時，可以透過 \ (反斜線) 來繼續：
要注意的是 \ 反斜線符號後面不能有任何東西，包括空白字元。
JavaScript 只有一種數值的型別，就是 number，不管整數或帶有小數點的數字都是：
除了常見的整數與小數點一類的數字外，另外還有幾種特殊的數字：
Infinity (無限大) 、 -Infinity (負無限大) ，以及 NaN (不是數值，Not a Number)。
Infinity 與 -Infinity 分別用來表示數學上的無限大與負無限大，一個正數除以 0，結果會得到是 Infinity，而任何負數除以 0 會得到 -Infinity。
咦？ 你問 0 / 0 嗎？ 結果會得到 NaN。
甚至是 Infinity / Infinity 或 -Infinity / -Infinity 同樣地也會得到 NaN。
NaN 在 JavaScript 當中是個有趣的存在，就字面上來說，它不是個數字，但你若用 typeof 運算子來判斷型態，它又會告訴你這是個 number。
NaN 與任何數字作數學運算，結果都是 NaN。 也就是說， NaN 並不等於任何的數字，甚至是自己。

既然這樣，那要怎麼檢查一個變數是否為 NaN 呢？ 這個時候可以透過 isNaN(value) 來幫助我們判斷。
值得一提的是，跟多數其他程式語言一樣的問題是，JavaScript 的 number 實作是基於「IEEE 754」二進位浮點數算術標準 [註2]，所以當你執行 0.1 + 0.2 === 0.3 的時候，你會得到 false 的結果。
這不是瀏覽器的問題，因為十進位的小數無法完美的用二進位的方式表示，只能用無限循環的位數來趨近於十進位的小數，若以 IEEE 754 規定的 24 位數為上限時，在儲存時就會省略一些位數，導致還原時的小數不夠精準。
0.1 以二進位表示會是 0.0001100110011001100110011001100110011001100110011001100... (無限循環)
0.2 以二進位表示會是 0.0011001100110011001100110011001100110011001100110011010
兩者相加後得到 0.0100110011001100110011001100110011001100110011001100111
再轉回十進位剛好就變成 0.30000000000000004

如果要求數字精準的話，簡單的處理方式可將小數點在運算前轉成整數，計算後再調整回來，但遇到大數會有例外或爆掉的問題。 目前看到最佳的解法應該是這個  number-precision，有興趣的朋友可以作為參考。
與其他類別相比，boolean 就顯得單純地多，boolean 的名字由發明的科學家 George Boole 命名，其中的值只有兩種：true 以及 false。
布林值通常用在判斷式，作為控制程式流程的用途。
在 JavaScript 判斷比較的運算式中，所有東西都可以隱含轉換為布林值，這個部分留待下篇型別轉換時再詳細介紹。
在大多數的程式語言中，都有 null 或是類似空值類型的設定，而 JavaScript 又多了一個 undefined，這裡就把它們放在一起比較。
這兩個類型的共通點是，null 型別只有一種值，就是 null ，而 undefined 類型也只有一種值，就是 undefined。
其實可以看出，當變數 a 被宣告時，在沒有給變數任何數值的情況下，變數的預設值會是 undefined，而變數 b 則是直接被明確地設定為 null 。
雖然這兩種值透過 Boolean() 強制轉型成 boolean 時，都會代表 false 的意思，但兩者間仍然有意義上的差別。
我想這點在透過 Number() 強制為兩者轉型的時候多少可以看出點什麼：
除此之外，另外一個 有趣 討人厭的地方是，在非全域作用範圍下， undefined 允許被當成變數名稱，而且變數的值是可以被修改的：
甚至是作為參數使用：
雖然這樣都是合法的，但為了身心健康，請不要惡搞你的程式碼。
但是同事的可以 (大誤)
註1: ES6 之後多了新的型別：Symbol。
註2: IEEE 754 是 「IEEE 二進位浮點數算術標準」，有興趣的朋友可至維基百科 IEEE 754 查閱。
以上是今天針對變數與資料型別(基本型別)的介紹，在後續文章中，會繼續介紹「物件型別」以及型別之間的自動/指定轉換，歡迎有興趣的朋友繼續關注。",,"['變數', '變數的資料型別 (1)']","['string 字串', 'number 數字', 'boolean 布林值', 'null 與 undefined']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190773,自我挑戰組,0,iflen(learning.python)==30:系列,3,Day3-List-操作,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1512591212000000000,625,"操作層面分為取出資料、如何走訪和如何異動資料
可以取出list中的某一個資料和部分資料，分別為indexed和sliced
這兩種操作都可以使用正向和反向的順序取出list，正向從0開始，反向從-1開始，超過索引範圍的話會丟出IndexError，索引值不是整數或slice表示法會丟出TypeError。
sliced會回傳新的list，範圍是包含起始但不包含結尾
All slice operations return a new list containing the requested elements. This means that the following slice returns a new (shallow) copy of the list
使用for加上in或是while走訪list",,"['取出資料', '走訪', '異動資料', '參考']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190871,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",3,Day3-HadoopEcosystem之Hadoop安裝-事前準備篇,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1512589810000000000,662,"前面的簡介中有提到，Hadoop是個分散式儲存及運算的架構，所以安裝基本上需要多台電腦以達到分散的目標（使用VM或是Container技術，如VirtualBox、Docker、K8s等，在大型叢集上會產生另外的問題，故暫時不列入討論）。但Hadoop為了讓使用者可以快速地開始使用，提供單一主機的安裝模式共有兩種模式：獨立模式(Standalone)與偽分佈模式(Pseudo-Distributed)。多機安裝模式則稱為Fully-Distributed。
Ubuntu:
並加入下列參數
下一篇要進入安裝Hadoop囉！",,['在安裝之前需要先做好下列的事前準備：'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190868,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,2,(Day2)RStudio安裝與介紹,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1512588668000000000,710,"RStudio 是R語言的IDE的開發平台，如同其他程式的整合性平台，除提供了視覺化操作介面之外，相關工具與環境，更是大幅的提升了開發的工作效率．
是時候來下載並安裝RStudio，以利進行後續開發囉！！
Mac版設定位置：
RStudio>> Preference 或 Tools >> Global Options
Windows版設定位置：
	Tools >> Global Options
Options
操作介面共計有四大區，操作的位置與內容，請參考前述Option相關設定方法．
下一篇，就即將說明RStudio操作與實作一小例子．","['安裝Ｒ', '安裝 RStudio', 'RStudio環境設定(Options)', 'RStudio操作介面說明']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190852,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,3,Laravel與Rails比較,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1512587198000000000,712,"在各個不同語言的網頁框架之中
講Laravel參考Rails是比較沒有爭議的事實
如果你先學過Rails，你會在Laravel到處都看見熟悉的影子
事實上，當我在兩三年前為java感到厭煩時
當時的兩個選項是分別就是laravel與rails
而我後來的選擇是後者
選擇的原因也很簡單，既然Laravel是參考Rails而設計
那想必Rails是做對了什麼
既然如此我學原版就好，為什麼要學跟隨者呢？（引戰）
加上對PHP的印象不是太好（一些過去恐怖的傳聞）
所以毅然決然走上了不同的道路。
跟我介紹的幾種語言相比
PHP算是相當老派且傳統的網頁語言
但也因為老且傳統，容易成為新語言成長學習的養分（也就是避開那些傳統的問題）
PHP自己也發現了那些問題，而發展了不少框架
按照特性不同可以分為四類：
但考量到社群數量與使用人數
近年來幾乎是Laravel一面倒的佔優勢
畢竟成王敗寇這點在框架上也適用
越多人使用社群越活躍，所以也有更多人送pull request或contribution
所以版本更新頻繁、框架越來越好
大者恆大、小者更小
(離題了)
PHP 5以後開始支援物件導向（Object Oriented Programming），讓大型專案更容易維護。但也並不是說網路框架非得要使用物件導向才是比較好或是比較正規，例如後面會介紹到的Elixir就是函式導向程式語言（functional programming）一樣相當優秀。有關物件導向與函式導向之間的比較，或許後面有機會會談到。
傳統的PHP就是單純用來生成HTML碼的，加上早期的專案並沒有MVC的概念，所以資料、邏輯與視覺的區塊常常混雜在一起，或是一個頁面一個檔案，造成專案管理維護上的困擾。為了解決這樣的問題，有人提出了將專案切分為三個區塊：Modle、View、Controller，可以理解為 model 放資料邏輯，view 放視覺邏輯，而 controller放商業邏輯。但資料邏輯與商業邏輯坦白說很難用一條明確的界線一刀切，更多時候是仰賴經驗與團隊默契。
以Rails工程師的角度來理解：
比方說在laravel想要創建一個user的migration
在rails專案我們會這樣寫
類似Rails的erb，可以使用php code動態產生html等前端程式碼，但是又盡力不讓前端顯得雜亂。可以繼承、複寫、擴充等彈性組合頁面元件，增加前端的可維護性。
參考資料：
http://oomusou.io/laravel/laravel-for-newbie/
https://www.slideshare.net/shengyou/laravel-43453376","['物件導向', 'MVC', 'Artisan & Composer', 'ORM & Migration', 'Blade']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190862,ModernWeb,1,跟著網頁動ㄘ動系列,3,DAY3-使用CCS3動ㄘ動Part2,EllenK,https://ithelp.ithome.com.tw/users/20107540/ironman,1512584416000000000,653,"在昨天介紹了初步的CSS3 Animations之後，今天要來進階的屬性。
昨天的範例中，動畫都只會跑一次就結束。
如果想要動畫多撥放幾次的話該怎麼辦呢？
在角色的CSS中寫上 animation-iteration-count 屬性。
例如以下寫了3，這樣動畫就會重複播放3次。
如果要讓動畫不停地播下去，則可以使用 animation-iteration-count: infinite 。
動畫執行之後，會發現動畫的每一個階段的速度有快有慢。
想要調整的話，可以使用 animation-timing-function 屬性。
此屬性有幾個值可以填寫。
linear：從頭到尾都是相同速度。
ease：默認值。慢速開始，接著加快，結束前變慢。
ease-in：以慢速作為開始。
ease-out：以慢速作為結束。
ease-in-out：以慢速作為開始和結束。
cubic-bezier(n,n,n,n)：n為0~1的數值。
cubic-bezier這個函數，可以使用這個網站 http://cubic-bezier.com/ 來實際測試你想要的數值是多少。
可以減少自己測試的時間，很方便使用。
以下可看出他們的不同。

添加上這些屬性，動畫就可以增添不同的變化跟感覺。
這時你會發現，這些動畫屬性需要寫好多行來處理。
以上這些屬性，都可以縮減成一個。
例如：
這樣就可以讓CSS看起來比較簡潔了！
以上是今天的部分，其他明天繼續XDDDD",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190863,ModernWeb,0,改良版JS30系列,2,Day2.JSandCSSClock,raindot,https://ithelp.ithome.com.tw/users/20107375/ironman,1512582235000000000,622,"DEMO
為了避免到360度時突然閃一下的問題，修改了部分程式碼
1.取得初始時間
2.計算每一秒要走的度數",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190771,自我挑戰組,1,如何成為工程師?(從工地到前端工程師)系列,3,[Day3]CSSBoxModel區塊模型,dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1512582084000000000,735,"CSS 區塊模型是CSS 必學的基本觀念. 但是很可惜現在很多框架的輔助, 很多人都不知道這個基本觀念. But don't worry, 我現在來幫你複習.


CSS 區塊有兩個屬性border-box 跟 content-box. Border-Box代表這個區塊padding 跟 border 都含在區塊裡面. Content-box 代表這個區塊padding 跟 border 不包含在區塊裡面. 在古早的時候(IE8以前)區塊是只有content-box, 所以以前切版很可憐, 必須把每一個區塊的padding 跟border 算好, 不然就會跑版. 現在有border-box 就不會有這個問題了.
分享一個小配步, 我會在我的css stylesheet 把所有的元件改成border-box屬性. 這樣就不用擔心content-box 的問題.
這是w3cschool的demo 這可以看到一樣的height跟width 但是用了不同屬性, size 就差那麼多.連結
每個元件都會有一個display 屬性, 大部分都是 block 或 inline. Block 會以區塊方式呈現 , 並盡可能的撐滿容器. Inline均不換行, 同一行的意思. 有Block預設的元件有 , , , . 有inline預設的元件有, , 
如果inline屬性需要block 的特質譬如 width, height, margin (除了margin: auto 不行)
比如你如果要一個佔整行的button,你需要把inline-block 改成 block. 你可以來這裡玩玩看. 連結",,"['Border-Box vs Content-Box', 'Block vs inline', '參考連結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190864,自我挑戰組,0,台灣動漫創作平台開發實錄系列,2,Day2.初步Wireframe,raindot,https://ithelp.ithome.com.tw/users/20107375/ironman,1512581900000000000,603,"初步Wireframe
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190866,ModernWeb,0,挑戰CSS30天系列,3,day3_border-style,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1512581896000000000,624,"border-style 可以用來指定邊框的樣式。
如以下範例：
成果如下圖：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190830,SoftwareDevelopment,0,30天iOSAPP開發系列,1,[Day01]iOSAPP開發介紹,d3764291,https://ithelp.ithome.com.tw/users/20107588/ironman,1512580929000000000,673,"希望藉由鐵人挑戰強迫自己每天都有一點進度。
本次預期開發地震預警的APP，除地震預警外希望包含地震資訊視覺化的部分。
因為開發經驗多為Javascript、PHP、Python、C++，對於swift完全沒有經驗，希望透過本次開發學習新的語言！
大部分將以筆記的形式呈現。","['緣起', '預期進度', '文章內容']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190860,SoftwareDevelopment,1,【UnitTest】UnitTestwithC#系列,2,【Day2】優秀的UnitTest&簡介TDD,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1512580300000000000,729,"優秀的Unit Test（UT）和優秀的程式碼一樣，不外乎清楚簡潔。
本書的作者，偏好在方法的命名上下重點，讓UT可以從字面就知道要測試什麼。例如：TestReturnsZeroWhenEmptyString()，表示這是一個測試，並且當是空的字串會回傳0。
不過他有提到幾個特性非常重要：
意思是當我的程式碼過了兩天，兩週，兩個月，我還是知道這個UT是要執行什麼動作，回傳值是什麼，當發生問題可以很快找到原因。而且這個測試是很容易操作，很快得到答案（畢竟測試是一個小單元，又不是很多功能）。
但是當產生出來的結果無法控制，或是無法清楚我們這個測試的內容是什麼的時候，有可能是「集成測試」（Integration Testing）。也就是我們測試的項目太多，就像是我們一次測試很多程式碼，只知道最後結果是錯誤，但不知道哪編出問題。如同手機壞掉了，但是我們只知道他壞了，無法開機（沒錯！我們的測試就只是開機看能不能開啟），但是不知道哪邊出問題，是電池沒電，還是螢幕壞掉，主機板燒掉.....。
這樣的測試範圍太大，不適合在程式開發的時候執行，因為程式要保證每個地方都可以順利進行，而不是「看起來」、「應該」可以過。
TDD是測試驅動開發（Test-Driven Development），是為一種開發方式。
簡單來說就是先設計好測試的方法，根據這個方法再進行開發。例如，我先做好100公尺的測試距離，當我做好腳踏車的時候，看能不能騎到100公尺，如果可以表示我的腳踏車做成功，不行的話代表這個這根本不能叫做腳踏車！！所以當我每錯出一次成品的時候，就可以試騎，如果失敗，就回去做，如果成功，我就可以進行下一步。
可是這樣不就僅要寫我們的主要功能，還要寫測試功能，要寫很多程式碼呢！TDD有什麼好處呢？有人提到可以增加個人的開發速度。但我覺得能提昇作業品質是最重要的XDDD（完全跟TDD沒關係）
不管怎樣，做得好的TDD可以減少開發時間，和增加程式碼的品質。",,"['優秀的Unit Test', 'TDD']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190853,ModernWeb,0,Expo---跨平台App開發從零到上架系列,2,ExpoDAY2---Prosv.sCons,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1512580265000000000,652,,['Expo DAY2 --- Pros v.s Cons'],"['前言', '現在就做看看', '結論', 'Refs', 'Related Repos', 'Expo Links']",,,,['tags: iThome鐵人賽2018 ReactNative Expo day2'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10190849,AI&MachineLearning,0,玩轉資料與機器學習-以自然語言處理為例系列,1,資料分析師的學習之路,GoatWang,https://ithelp.ithome.com.tw/users/20107576/ironman,1512578343000000000,771,"今天來跟大家說說身為資料分析者，你應該學習那些技能，以及這些技能大約需要花多久時間可以習得。首先，讓我們先來看看，資料的分析流程，從以下流程中，我將逐一介紹，每一個階段你可會需要使用到的技能。

要玩轉資料，首先你必須取得資料。誠然，在練習的過程中，你可以很輕易地取得各種各樣的資料，如Kaggle上任一比賽的資料就是很好的練習工具。但是如果很不幸的你想解決的問題，無法輕易地找到資料，那麼你可能需要一些技巧來蒐集資料，如建構網站蒐集使用者資料、網路爬蟲汲取資料或是任何感應裝置接入資料。當然這一切的一切，都取決於你想解決的問題以及你對各種技術的興趣，不過因為時間(反正在這邊的大家對架網站也不會太有興趣喇ㄎㄎ)以及個人能力因素(我完全不懂IOT...囧)，接下來的文章僅針對網路爬蟲做介紹，除了基礎教學之外，也會放一些進階的技巧。
資料庫又分為SQL(唸西闊)關聯式資料庫以及NOSQL(Not Only SQL)非關聯式資料庫。關聯式資料庫講求的是資料的管理功能，因為有建立關聯的關係，所以可以透過更改源頭的table自動更新關聯過去的Table，相關的知識可以搜索資料庫正規化，目前關聯式資料庫最大的供應商為Oracle SQL及MS SQL，不過因為其價格並非凡人可以隨意接進，所以目前無產階級最常使用的關聯是資料庫為MySQL(不過也已經被Oracle買下，不知何年何月會開始收錢)。另外，聽說也滿多人在使用PostgreSQL，似乎是因為全文檢索的功能很好用，如果有相關需求也可以可考慮。
非關聯式資料庫則不需經過正規化，直接將所有的資料用一張表儲存起來。如果大家對詳細的關聯式跟非關聯式資料庫的差異有興趣，直接Google即可，會有很多文章滿足你求知的慾望的，鳩咪。至於非關聯式資料庫的種類，iThome有文章寫得很清楚，不過我個人只有使用過MongoDB以及Elasticsearch，MongoDB我覺得就已經滿好用，如果只是要做初步的資料分析，絕對已經足夠，而之所以會關注到Elasticsearch，則是因為其全文檢索功能非常完備，不過因為它網路上的server(Elasticsearch Cloud)比較貴，之後就沒有繼續使用了。
而在接下來的文章中，由於我們分析資料的特性，不太需要使用到資料管理的功能，所以只會使用非關聯式資料庫，並以MongoDB作為示範、mlab作為雲端MongoDB的server，然後透過Python與其互動(新增、刪除以及查詢)。
做上面那圖太累了，明日待續....","['預防針', '前言', '資料來源', '資料庫']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190856,自我挑戰組,0,軟體工程漫談系列,3,用數學方法說明增量與迭代的力量,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1512577059000000000,681,"敏捷開發過程中，『增量』與『迭代』是最常被人拿來談的內容之一。很多人都會問，到底為什麼非得做增量與迭代不可？這裡，我想要簡短地用數學的方法來顯示他的好處。
首先，在軟體開發過程中，開發人員的『工時』應該是主要成本之一，然而，隨著產品成長，模組和模組之間的相依性也會越來越重。雖然我們都知道，『解耦合』是很重要的工作，但在現實層面，你還是無法完全避免他。於是，當產品越大，一個功能的棄用或修正，就會或多或少影響到另外一個功能。
我們來做一個非常非常假的假設。這是為了讓數據看起來容易懂。
假設整合或創建模組的難度，隨著時間x的經過，呈現線性成長，那麼也許每日的開發成本可以非常粗略地表示成：
要知道，人不能通靈，再精細縝密的規劃也有出錯的一天，就算不出錯，客戶也有可能因為任何原因而要求重做或修正。這時，被浪費掉的沈沒成本就是他的積分了：
如果，我們能夠定期（譬如每兩週）回顧審視並演示，隨著客戶的需求而修正，假設我們有夠笨拙，每次demo客戶都不喜歡，都要求砍掉重做（當然，這是很極端的例子，世上也許不會有這種客戶），那麼，我們一整年下來，被丟掉的沈沒成本就是
萬一你採取瀑布式開發，最後一年後又不幸的被要求重做呢？答案是
到這裡，您可以自己計算了吧？
當然，這是因為我們用了很簡化的模型來模擬複雜的軟體開發流程，但是您還是可以從數字上看到兩種方式可能對您的成本造成的影響。
路怎麼走，您可以自己決定了 :)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190840,ModernWeb,1,30天串接30個GoogleAPIs的服務應用系列,3,[day3]-創造自己的地圖服務應用，GoogleMapsAPI申請流程,KingTzeng,https://ithelp.ithome.com.tw/users/20103130/ironman,1512576225000000000,793,"接續上一篇解說到一些串接地圖時必須注意的事項，今天繼續創造我們人生的地圖XD
昨天說到使用Google APIs的請求不是免費的，都有一定的配額給你使用，每個API配額也都不一樣
使用前請詳閱公開說明書(被打XD
那今天的目標來一步一步申請API，創造一個地圖出來！
要用Google的服務，前提是要有Google的帳號
想必現代人都一定有一個以上的帳號，沒有的話快去辦一個吧～
登入Google後，請先到這邊(https://console.developers.google.com/)

這是我們未來可以監控API使用狀況的主控台，舉凡監控流量、更換金鑰、查看請求額度等動作都可以在這裡做操作~
如果沒有專案的人，請先建立新專案，我這邊也用鐵人賽當範例來創造一個專案～
建立專案 -> 建立

請填入專案名稱
在此注意專案名稱日後是可以更改的，但是專案ID建立專案成功後就無法更變了
如果有用到專案id的人，這邊需要多注意一下！（目前我是沒有用到啦～）

按建立之後，Google會跑一下，你就可以看到你的專案建立成功的畫面了～
框框裡是你的專案，要注意一點就是每個專案啟用的金鑰都是獨立的金鑰，請求配額也是各自算各自算的。

現在要來申請Google Maps JavaScript API的服務，到剛剛的dashboard按下[ 啟用API和服務 ]
Google會連結到眾多功能的API程式庫頁面，而我們需要用到地圖的功能所以點擊Google Maps JavaScript API
下一頁是解說頁面按下啟用，Google便幫你開通這項功能~
不過還有幾點需要設定的，繼續GOGO~


啟用服務後，還需要建立憑證也就是API金鑰(重要)，拿著這把鑰匙你才能去開啟世界的地圖啊～
點選建立憑證之後，因為接下來就是一直點下一步，所以我就用截圖來說明了～




完成後，Google就會給你一組API金鑰，就是我有馬賽克的地方，那這組鑰匙要自己保存好不要外洩～
你總不會把你家的鑰匙丟在外面，這樣別人就可以拿你家的鑰匙去開你家的門啊～
（這要報警處理了XD
好吧～萬一不幸你發現你明明沒用服務，但為什麼還是一直有請求數或者請求數爆高....
那就按下金鑰旁邊的那一枝筆吧！
重新產生一組金鑰，記得你程式端的金鑰也要換成重新產生的這組，不然服務是起不來的喔！
關於金鑰的安全性，可以到剛剛的編輯金鑰頁面來設定金鑰的限制
像Web服務的話你又有Domain就可以設定HTTP 參照網址 (網站)這項限制，之後會我們部屬到網站上的時候會舉例說明。
那就有看這篇文章的看官們，想練習的話可以先去申請看看喔～哈哈
我們明天見了～(ㆆᴗㆆ)
這個進度這樣要什麼時候才有地圖出現(;´༎ຶД༎ຶ`)
同步刊登於King 學習前端之人生
[ 著作權為King Tzeng所有，請勿抄襲或致敬＝口＝]",,"['上篇講述一些Google Maps APIs的概念', '文後-']",,"['創立專案', '申請API啟用服務', '設定服務以及建立憑證', '今天想偷懶到此斷尾了XD (謎之音：蝦咪....ಠ_ಠ)']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190804,ModernWeb,1,三十哩路，我的前端學習路程系列,3,Day03::我所知道的CSS選擇器,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1512575509000000000,722,"CSS的選擇器種類非常多，它們到底有哪些功能呢？
剛開始學切版的時候因為實在搞不懂選擇器的用法和功能
所以我的選擇器全部都是使用#ID ... class是什麼？跟ID有什麼差別？
完全不知道哇！
今天就簡單分享一下我目前有在使用的CSS選擇器吧！
*符號為全域選擇器，他會選取頁面上所有元素
我很喜歡用這個方法移除多餘的margin跟padding
可是這個做法還是盡量不要用比較好...!!
#符號為ID選擇器，他會選取頁面上相符的ID名稱
在網頁中ID名稱是唯一的，僅能使用一次，不能被重複使用
.符號為類別選擇器，他會選擇頁面上相符的class名稱
跟id不一樣，class可以不斷地重複使用
用來選擇HTML標籤的選擇器
偽類可以對指定的選擇器增加特殊的效果
冒號前面為指定的選擇器像是a:hover{hover後的樣式}
偽元素要使用兩個冒號來表示，雖然用一個冒號也能正常運作
可是為了方便區分，還是使用兩個冒號會比較好！
偽元素也會繼承原本元素的屬性，如果原本屬性的文字是黑色
那麼偽元素的文字也會是黑色的
同時對一個以上的元素套用樣式就可以這樣使用
假如我想選擇a跟p
選擇器有好多好多，目前使用的只有其中的一小部分而已
還有很多沒使用過的選擇器，希望以後有機會可以玩玩看！
學習資料
MIS腳印 記錄 IT 學習的軌跡-CSS 選擇器（Selectors）
w3school",,"['全域選擇器', 'ID選擇器 ID selectors', '類別選擇器 Class selectors', '類型選擇器、標籤選擇器 Type selectors', '偽類選擇器、虛擬類別選擇器 Pseudo-classes', '偽元素選擇器、虛擬元素選擇器 Pseudo-elements', '群組選擇器 Group of selectors']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190702,自我挑戰組,0,2017挨踢人生大事紀系列,3,挨踢鳥事滿天飛-系統更新到底要幹嘛？！,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1512572988000000000,763,"約莫在iT邦鐵人賽開賽前兩週前，
M$又爆出更新出包~
因為某個更新影響了ESPON點陣式印表機驅動，
造成不少需要印製報表的使用者作業無法進行。
當然，受害的末端還是可憐的挨踢人！>_<|||
「又是你們挨踢幹的好事！！」「我們電腦都印不出報表！！SHIT~」
上回勒贖病毒，中了『萬惡魁(WannaCry)』是因為沒更新？！
「又是你們挨踢幹的好事！！」「我電腦裡的資料~嗚~SHIT~」
唉~這回更新搞得公司點陣式印表機不能動。
那到底挨踢要不要進行更新？！
M$，你搞得我好亂啊~

補充：
萬惡魁(WannaCry)又名『想哭』，肆虐一時。
比特幣因為被做為贖金，因而更加火紅！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190772,自我挑戰組,0,網頁學習日誌系列,3,CSS:display屬性-區塊和行內元素差異,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1512570074000000000,675,"






",['diplay區塊和行內屬性表格分析：'],"['block: 區塊將整行空間占滿，後面元素往下行排', 'inline：同行排列']","['display屬性 最常用在 ul li 清單項目，ul li預設都為block所以都會分行排列', '所以如果要讓li並排，只要設定li為display:inline 或是 inline-block，ul 和 li都可在同行顯示，但是ul仍然還是區塊元素(block)。']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190850,ModernWeb,0,認識Chrome開發者工具系列,3,開發者工具面版簡介1-元素、控制台、網路及效能面版,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1512566813000000000,772,"接下來的幾天我們會很快的把所有的 Chrome 開發者工具的面版走過一遍，並且有一點簡單的介紹，讓大家對這些面版有些基本的認識，之後我們會針對幾個我認為比較重要的面版做詳細的介紹。
關於翻譯：
在我們的文章中，Panel 我把他翻成 "" 面版 ""； Pane 則是翻成 "" 控制版 """"，然而在有
些中文文件的翻譯是翻成 "" 窗格 ""。

元素面版是一個非常重要的面版，也是 Chrome 開發者工具很早期的時候就加入的面版之一。通常在你一打開開發者工具之後 ( 在 Windows 可以用 F12 或 Control+Shift+I ，如果是在 Mac 可以用 Command+Option+I 來打開 )，元素面版讓你可以：

控制台面版是一個有點像是 REPL 的一個面版，你可以在這邊使用絕大部份的 JavaScript 語法，並且可以立即看到執行後的效果。除此之外它也可以輸出程式中 console.log 的內容，是除錯的好幫手，也可以搭配元素面版及原始碼面版 (Sources panel) 一起使用。

網路面版可以讓你查看所有透過 HTTP 上傳及下載的要求，也可以看到頁面整體的載入所花的時間，甚至詳細的知道每一個資源載入的時間點。所以透過網路面版你可以輕易解你的頁面與伺服器的互動狀況。

效能面版之前原本叫做 Timeline，但是在一次的改版中改掉了。這一個面版應該是所有面版中最複雜、功能最多的一個面版。簡單的來說，它是一個可以讓你檢查及了解頁面渲染效能的工具。你可以查看頁面是不是有記憶體洩漏，CUP 的使用狀況，甚至什麼時候有GC(Garbage collection) 它都知道。所以當你想要調校你的網頁效能時，這會是一個很方便的工具。
今天我們很簡略的介紹了幾個面版，但其實這每一個面版都可以花上好幾天的時間來討論，在這系列的文章中，我們會特別並且深入了解的會有元素面版、控制台還有網路面版。而效能面版的部份因為我本身的理解有限，所以雖然也會花時間討論，但就會是以目前我比較常用的功能為主。",,"['元素面版 Elements panel', '控制台面版 Console panel', '網路面版 Network panel', '效能面版 Performance panel', '小結']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190835,自我挑戰組,0,ArasPLM開發練功30天系列,3,[Day3]ServerEvent-OnAfterUpdate&this物件,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1512565454000000000,649,"延續上一篇的內容在實作另一個OnAfter的功能
新增一支Method，並加入到Work Order，設定OnAfterUpdate

這次來看看同樣的程式在修改後觸發會發生什麼
測試結果

再改寫cost值
發現存檔後居然沒有改變cost值

這是因為OnAfter事件是已經將物件資料存進資料庫後才觸發，因此通常OnAfter只會用來驗證資料，尤其是關聯資料的最常使用，這會在之後的章節說明，那讓我們研究一下this這個物件究竟是什麼?
我們將上述的程式碼改寫，返回一個錯誤訊息是this.ToString()
結果

我把這段XML訊息重整一下
當資料物件已經完成CRUD時，回傳資料透過這個this物件給後端程式，並且CRUD所回應的this內容各有不同。
這個this物件隸屬於Item類別，是Aras把資料轉換成XML的形式打包成物件，這種方式稱呼為AML，
所以對Item物件進行欄位讀取或修改皆是透過AML後，Aras替我們完成SQL的語法命令，之後會有更多的範例來解釋AML",,['this'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190846,自我挑戰組,1,hexo-從初學到入門系列,1,建立一個hexo環境-day1,josephwu,https://ithelp.ithome.com.tw/users/20107307/ironman,1512563414000000000,675,"緣由: 在最近受到六角學院志誠老師和洧杰老師的激勵,同時為了增加自己對於學習前端新技能的掌握度和學習效率,所以挑選hexo這個相較其他前端技能比較好上手,且能夠幫助自己撰寫blog上有幫助的套件來學習,並挑戰自己養成持之以恆學習新技術的習慣。
筆者利用windows8.1和vscode編輯器來開發
此過程可以搭配hexo官網文件使用
https://hexo.io/zh-tw/docs/
安裝node https://nodejs.org/en/
安裝git https://git-scm.com/
安裝完後可以在命令提示字元輸入以下命令,檢查是否安裝成功
node -v 檢查node版本
npm -v  檢查npm版本

確認node和git安裝成功,接下來就可以開始hexo專案了
因為習慣關係,這邊之後筆者都會改用vscode的終端機來建置
以下的程式碼皆須在終端機中輸入
使用npm指令安裝hexo
npm install -g hexo-cli
-g為全域安裝的意思

建立一個hexo專案
$ hexo init <folder>

移到hexo專案
$ cd <folder>

安裝npm套件
$npm install
套件會安裝到node_modules資料夾


參考資料:
GitHub+Hexo 搭建個人網站詳細教程
hexo官網
使用 Hexo + github 建立Blog",,['開發環境'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190832,SoftwareDevelopment,1,爬蟲始終來自於墮性系列,4,小插曲#1-chromev62踩中地雷QQ,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512562134000000000,755,"剛剛在研究 IT 鐵人賽刪文的 request 的時候，依照 chrome network 的 request 看來，只需要送一個空白的 from 表單到該文章 url 就好，很開心的就用 postman 測試，但結果卻都得到 error 405 method not allow。

想當然爾，懷疑到 header 身上，但在經過一連串的時間，發現 hearder 不管再怎麼送、怎麼模擬，都是同樣的狀況。這過程還嘗試改變了 method，把 option、delete 都世過了，其中比較有趣的是 delete，換成 method delete 會跟我說 csrf-token validation error。
然後還去檢查了 cookie 機制，接著順便踩到了 chrome extension 「EditThisCookie」在近期 chrome 版本有問題的雷，目前這個 extension 只有第一個開啟的視窗會有 cookie 顯示。
最後眉頭一皺，突然想到縱使是空的 post，也應該會顯示 form data，就以這個方向在網路上 search 看看，也就看到了 https://stackoverflow.com/questions/34015735/http-post-payload-not-visible-in-chrome-debugger ，才確認是 chrome 在 v63 以前的 bug，若 post method 有被 redirect 那麼 post data 就會看不到，最後升級到 v64 dev 才順利看到 post data。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190819,自我挑戰組,1,用IT看世界系列,3,檔案稽核(下),allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1512561730000000000,719,"接續上一篇文章
這大概也是發生在公司不久前的例子
經理：「可不可以知道幾月幾號哪個檔案被read/write，關於這點其實我很保留，或許研究的不透徹??因為在不久前，公司主管想要知道某個時間點的excel表是否有被下載或者修改??
我打開事件檢視器
####發現，有成千上萬筆的log######我的老天鵝呀.............
即使我把過濾條件放進去，要針對單一檔案去做分析，執行起來還是心有餘而力不足....
畢竟當初這個任務在交付的時候，是沒有給予任何資源以及協助，因為檔案軌跡這種要花錢的解決方案外面好幾家在做例如ALog，索性就抱著姑且一試的心態下去做看看，但我發現光要先改這產生的路徑就有些障礙..後來相當感謝又碩科技工程師的協助，如圖2

所以我就把他複製過去就結束???當然沒這幸運不過萬事起頭難，如果將檔案路經找出，然後寫排程跟調閱規則，在寶他打包，或許應該可以成功，感謝一切順利，也對自己有個交代了。
下一篇將會提到event log的故事，是發生在前公司真實例子，靈感來自於wkpeng大大
待續，IT人員的最後一道防線",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190841,SoftwareDevelopment,1,初探Kotlin系列,1,[Day1]未來30天的文章規劃,randy,https://ithelp.ithome.com.tw/users/20107591/ironman,1512560600000000000,690,"以往並沒有寫文章的習慣，這次決定花費時間來寫點東西並做為學習紀錄
本文章為初探Kotlin 著重在Kotlin的基礎語法上 所以並沒有在Android上的開發
內容將會是Kotlin官網上的文件學習心得 大致規劃如下:",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190839,ModernWeb,2,邁向JavaScript勇者之路系列,3,JavaScript變數的宣告與他的作用域,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1512559402000000000,966,"變數分為全域與區域變數，差異點在於宣告 (var) 的方式，就 MSDN 上的說明 在函式定義之外宣告的變數就是全域變數，其值可在整個程式中存取和修改。 所以我們可以使用函式來做兩個的分隔點，函式之內宣告的稱為區域，函式以外宣告的稱為全域。
在函數外宣告的變數則是具有全域性(或是包含全域物件之內)，在瀏覽器下的全域物件是 window，有以下方式所產生的變數都會在 window 內。
以上方式都可以在 console.log(window); 後找到 `mom 這個變數，這個變數也屬於 全域物件，因此所有函式也都能取用此變數。

另外，也可以直接產生在 window 物件下。
這幾種方式都會在 window 物件下產生 mom，並且所有函示都能取用，但還是有些差異 (後面會介紹)，但就實際使用來說，建議無論如何都宣告你的變數。
每個變數在宣告時，都只會在執行環境內建立記憶體，這個就是他的作用域，單如果此作用域內沒有可用的變數時，他則會參照外圍的。
回到上一集的故事：
小明會將每一天的要做的事情寫在記事本內，並且記錄著許多工作內容。小明在  doMorningWork() 工作下建立了 mom 變數，這個 mom 就僅屬於 doMorningWork() 內，其它外部的函式都無法取用這個函式。 (旁白：小明出門後就可以不認這個媽媽了!?)

其中內層沒有 mom 的變數，他就會向外層尋找，找到有相同名稱的就直接拿來使用。(旁白：小明啊，你應該把媽設為全域啊!?)
使用 var 宣告一個變數時，記憶體會先準備一個空間給予此變數，所以在實際運行前調用此變數並不會出現錯誤，只會出現 undefined (已經有記憶體空間，但沒有值)。
故事：
小明本身記性就不好，他會採取先整個看一次的方式，將整個印象存在腦中 (開啟記憶體空間)，實際開始後再把實際把當天人、事、物整個記在腦內。
MDN 文中提到 其中差異在於, 已宣告的變數是全域物件裡的一個無法變更 (non-configurable) 的屬性, 而未宣告的變數則是可變更的 (configurable) ，可以嘗試刪除產生的變數，觀察其差異。
案例：
如果使用 var 則會先在記憶體準備一個空間給他，所以執行以前使用這個變數還不至於跳錯。
但如果沒有使用 var，則會跳出錯誤。
所以無論你的變數或函式是否要使用全域，都盡可能地去宣告它。至於 Let、Const 請容許我到後面 ES6 章節再來介紹它 :)。
文章同時發表於：https://wcc723.github.io/javascript/2017/12/06/javascript-variables/",,"['全域性的變數', '變數與他的作用域', '變數與記憶體關係', '宣告與不宣告']",,['提醒'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190838,SoftwareDevelopment,1,認識scala系列,3,Scaladay3(Definesomething),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1512558896000000000,671,"定義一個變數的基本內容 :
由於 scala 的編譯器有 type inference 可以推測型別，所以宣告時可省略變數型態由編譯器判斷．
scala 有 2 種定義變數的keywords，var 及 val :
scala 定義方法是使用 def．
定義一個方法的基本內容 :
方法可以省略return，所以可以很簡潔 :
scala function 的參數都是 val 不可改變．
沒傳參數的話，方法看起來會很像是變數，所以要注意 :
像下面其實是一個 msg 方法，不用傳參數，然後 return 一個字串．
如果不需要回傳值，則使用 Unit
如果方法參數數目不確定的話，可以在變數型態後面加上*，就可以傳入多個參數，該變數其實是 scala.Seq[S] 物件：",,['Define something in scala'],['總結'],"['定義變數', 'type inference', 'val', 'var', '定義方法', 'def']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190620,ModernWeb,1,Next.js+各種套件組合系列,3,Next.js&Layout,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512557516000000000,757,"架構介紹
在 Next.js 架構中 pages 目錄(File-System) 即 Route，pages 底下的檔案就是一個Router Container，可以用Share Component 來組成 Container，放在 pages 以外的自定義目錄大概會長下面這個樣子，除了 pages 與 statc 是約定目錄其他可以自定義
/pages
/components/layout
/components/更多元件..
/static
1.傳入children的方式來製作layout
利用 React 在 Tag 之中會把內容當作 children,並使用props參數,傳入元件之中以下方為例
在下面layout.js 可以看到在 StateLess Function 傳入 children 參數，Render 中的 { children } 就是上面傳入包在 Layout TAG 中的內容(   製作一個具有Layout的網站吧  ) ，利用這樣傳資料的方式就可以製作一個共用的 Layout 在把每一頁的內容都加上 Layout  Tag 就完成了
這邊用 Head 是因為 Layout 無法改變 Document 的 Meta或是Title  Tag 只能修改在 React Render Dom 節點內容
，所以 Next.js 提供了Head供可以修改 Document 的內容，使用時候記得引入 import Head from 'next/head'
layout.js
2.利用HIGH ORDER COMPONENT HOC來製作Layout
HOC 在 React 中最常看到的範例就是 Redux 的 connect ,HOC 可以把目前的物件 當作 Function 的參數傳入 ,然後在 Function 之中可以把目前傳入的物件經過加工 props 或是 states 或是改變 Render 形態 ，讓原來的物件可以被擴充或是加工,範例如下 有各PageA 利用 HOC 包起來就具備有 Layout 的效果,這個比起 children  方式可以有更多彈性
這時候的Layout.js會是這樣
在ES7 新的語法之中有 Decorator 裝飾子可以使用可以使用下面 @layout 置於class上方比較好閱讀
( decorator 使用時 是屬於新功能 https://babeljs.io/docs/plugins/transform-decorators/ 設定參考)這樣等同於 HOC 的寫法
以上是常用在製作 Layout 的兩個方法
心得
在 Next.js 製作 Layout 與一般 React 並無差異 要注意的是 Head 的使用 如果需要更多彈性可以考慮使用 HOC 來製作 Layout 層",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190834,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,3,[Day3]EasyFlowGP--系統設計工具(一)系統管理員:TipTop整合的設定,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1512556045000000000,736,"系統管理員中另一個重要的整合設定就是與TipTop的整合設定。

若你沒發現這個[TipTop(Workflow)系統整合設定]的頁面。
還請你先檢查，EFGP主機的NaNaIntSys.properties設定
(路徑:\BPM\jboss-4.2.3.GA\NaNa\conf)
設定值 Tiptop=true 才算開啟整合。

此properties設定還有TipTop其他重要的相關部分

任何一個設定值有異動時，請務必重新啟動EFGP的JBOSS服務。
回到系統管理員的畫面，點下[TipTop(Workflow)系統整合設定]。
會彈出一個設定頁面。

要和大家分享的是[對映索引設定]
主要是設定TipTop的程式對應EFGP的表單 EX:apmt420 對應 EFGP請購單。
基本上這部份設定在安裝工程師時已經協助設定好標準程式的設定。
但若是TipTop自行開發的客製程式要執行EFGP簽核。
那就要在此地方新增對映索引。
操作步驟請看下方。
先新增索引鍵的(ProgramID、TargetSheetNo) 新增到對映索引，再執行存檔和重新載入。

依照步驟1->6這樣操作後，才會新增或更新。若TipTop執行簽核有問題，要先確認是否代號沒有寫進去系統。
這部分操作我曾經搞混很多次過...
順帶一提，若有整合TipTop的備註。
其中一個要設定的部份就是在對映索引中的[Edit Mapping Property]

請留意!!! 設定的格式為以下設定喔，因為我發現鼎新給客戶的講義中此段格式有錯誤...
當初我在這邊也是摸索一陣子才整合成功。
請大家將apmt420 換成你要設定的程式代號就可以。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190824,DevOps,1,用30天來介紹和使用Docker系列,3,Day3:如何安裝和啟動Docker,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1512555602000000000,829,"前二天主要是在介紹 Docker 的一些基本概念，今天要介紹如何把 Docker 安裝並且執行起來。
安裝 Docker 使用的作業系統是 CentOS 7.3， Kernel 使用預設的 3.10.0-514
這裡要注意的一點是 Docker 會呼叫到 Linux Kernel 的 Namespace 和 Cgroup 所以需要選擇正確版本的 Linux Kerenel，不然 Docker 的 service 會啟動不起來。像是之前我就用 CentOS 6.1 的作業系統，預設 Kerenel 版本是 2.6.32-131，安裝 Docker結果Docker 的 service一直都沒辦法啟動，後來換了 CentOS 7 才成功的把 Docker service執行起來。
如果找不到 lsb_release 指令，就需要使用以下指令安裝套件
執行結果如下圖：

方法一： 直接使用CentOS 7 預設的 yum 安裝
安裝完 docker 之後使用 docker version，確認安裝的版本

方法二： 如果要使用較新版本的Docker，就需要從網路上找 Docker rpm 安裝檔，來安裝
可以到以下網站去選擇符合自已需求的 docker 版本：
https://yum.dockerproject.org/repo/main/centos/7/Packages/
如下圖

啟動 docker service 的指令上面已經有介紹到了，如下
如果下次重新開機，需要能自動啟動 docker service，使用以下指令設定
在使用 root 使用者權限時可以順利的執行 docker images 指令，但是換到一般的使用者執行 docker images 指令時就會收到錯誤訊息，如下圖：

這個問題主要是在執行 docker service 時，會有一個檔案 /var/run/docker.sock，它的權限不能給一般使用者執行，如下圖：

要解決這個問題，主要有二個方法：
方法一： 使用偷吃步的方式，直接把 /var/run/docker.sock 檔案的權限開到最大，如下指令：
但是使用這種方式會有一種缺點，就是下一次重新啟動 docker service 時，這個檔案的權限要會被改回之前的狀態，所以還是會沒有把問題撤底解決。
方法二： 做以下幾個步驟的設定
檔案內容如下：
{
""live-restore"": true,
""group"": ""dockerroot""
}
JSON的逗號要記得加不然重新啟動 Docker Service 會啟動不起來
之後我所介紹使用的 docker 版本如果沒有特別說明，都是使用 1.12.6。今天已經把docker 安裝完成了，明天就可以開始把 docker image pull 下來使用。
https://coderleaf.wordpress.com/2017/02/10/run-docker-as-user-on-centos7/",,,,"['一.安裝前準備', '二. 安裝 Docker', '三. 如何把安裝完的 Docker 解安裝', '四. 啟動 Docker service 指令如下', '五. 遇到的問題', '參考網站：']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190825,Security,1,資安的學習心得及分享系列,3,DAY3HIDS(Host-basedintrusiondetectionsystem),Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1512554940000000000,720,"今天來講基於主機端的偵測系統HIDS。

沒錯如果你要說他是IDS的後代也可以，但是比較不太一樣。因為HIDS只是屬於IDS的其中一種偵測系統，這篇來簡單的告訴大家什麼是HIDS，基於主機端的偵測系統。

主機型的偵測系統(HIDS)，通常偵測系統通常只觀察、稽核系統日誌檔是否出現惡意行為。
HIDS通常在Window NT環境下觀察系統、事件、安全日誌。在UNIX環境下監測系統日誌。
HIDS的好處
1.	可以確認駭客是否成功入侵
2.	用來監控特定主機系統的活動
3.	達到即時性的偵測
4.	不用額外增加硬體設備
HIDS的問題
1.	靈活性不高：所有的主機可能安裝不同的作業平台，每個作業系統各有不同的稽核紀錄檔，因此必須針對不同主機安裝各種HIDS。
2.	不能用來監測與掃描主機所在的整個網域：HIDS僅能看到經由該主機所接收到的網路封包資訊。
3.	會額外消耗系統資源：在監測狀態時會消耗被監測主機的系統資源，將影響主機本身的效能。
HIDS主要的目的還是幫助一些容易受到攻擊的軟件添加一道安全機制而以，就如同我們前一篇所描述的，IDS可以在發生破壞之前先暫停攻擊，這就是IDS的優點，但是IDS的主要目的還是在於它可以檢察入侵這個功能，並把可疑的紀錄以警報方式傳送給我們使用者。
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190818,Security,2,IT安全稽核系列,3,1.3資訊安全管理系統(含管理決策過程)所需之文件及紀錄，是否予以文件化及受到適當之保護與管制？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1512549629000000000,740,"以下為行政院資通安全稽核服務團歸類第一大項1.3，本人接續1.1及1.2之內容繼續做出說明及分析，
一、資訊安全管理系統 （管理階層、資訊安全組織）
1.3 資訊安全管理系統(含管理決策過程)所需之文件及紀錄，是否予以文件化及受到適當之保護與管制？
說明：此項說明在於兩個重點：1.文件化。2.適當之保護與管制。
我們在此先定義，何謂文件化?
所謂的文件化，除了政策的宣示、制訂作業程序規範及表單之外，還包括了管理階層針對資訊安全相關活動，進行各項決策所產生的記錄。
ㄧ般公司，在制定好政策之後，都要進行各項內部稽核，以確定各項的資案辦法、政策是否有依照辦法及政策執行，同時也紀錄下，管理階層在甚麼時間點做出甚麼樣的決策，而這些就必須要留下軌跡，這些軌跡，基本上都只能單一呈現，不可能重複的產生，管理者有沒有在執行業務，我們只需從文件就能有效的控管其作業情況。
再來談到上市櫃公司的情況，上市櫃公司一定會定出資訊安全管理制度(Information Security Management System)，也就是所謂的ISMS，定義上就是以營運風險方案為基礎，用以建立、實施、操作、監督、審查、維持及改進資訊安全。然而一般中小企業，正常來說，通常是不會注意到ISMS的重要性，更遑論注意到server裡的事件檢視，如下圖。

因此，本人依企業規模，概分成兩部分，提供以下建議，以達成上述說明的第二項重點「保護與管制」。
(1)	中小企業：台灣中小企業，正常的情況下，不會訂定ISMS的制度，有些公司會建立ㄧ些非常簡易的ERP系統，實際上只是文件處理系統，有些公司甚至於只用EXCEL做資料管理，幾乎是毫無章法的在執行資訊安全管理，此時，建議資安人員，需要定期的傳送各項資安簡報給全體員工參考，先從觀念建起，不必急於馬上建立組織整體系統建制，將重點放在「觀念」的傳遞，也許短期內無法獲得回應。之後，隨著時間拉長，當組織逐漸擴大之時，很多問題便會開始出現的情況下，此時，組織裡的員工也已建立基本概念的前題下，逐步加強各單位建立書面說明或會議紀錄等等，以Word、excel、outlook等等紀錄皆可，重點是在於導正並養成紀錄習慣，並且慢慢釐清權責劃分，該由組織誰負責，就要依據每次事件發生之事實，逐步釐清相關權責。不管合不合理，只要觀念對了，配合上資料保護與管制之後，未來當某類似事件發生時，都可以從檔案中調閱出來討論，長時間下來，可以依靠這些紀錄，隨時做出應變，等到公司組織規模夠大，並且準備建立制度的情況下，必能得心應手，而不至於太手忙腳亂。
(2)	上市櫃、興櫃公司：當公司到達一定規模之後，不管導入ISO或在進行股票上市櫃的過程中，都會有明確的制度定出，此時，也會要求管理階層，定期提供紀錄給予稽查人員稽核，此時重點，要放在文件流程是否適當，流程中的每個流程之核准是由哪個單位主管核定，只要權責分明，掌握序時、序號、核決權限，基本上，就是最有效的控管。此外，在有制度的公司，都會做好文件專責控管，資安人員在控管資安文件時，除了控管，更要注意資安漏洞是否有架設足夠的防火牆等等防範措施。
最後，提醒一點，文件適當的管控固然很重要，但是，有效的分類更重要，文件是ㄧ個組織經驗的累積，也能當做審視公司歷史的重要參考資料，有效的分類，也是幫助組織能夠隨時取閱資料，由此可知文件化及適當的管控之重要性。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190762,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,3,1-3.監控工具之一:ZabbixAgent,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1512548499000000000,783,"Zabbix CEO 簡報，架構如下，Client Server端裝Agent或者開啟Snmp收集資料
https://www.slideshare.net/pundir5/zabbix-51457845

Server架好後，開始收集Client的資訊
到Google Cloud Platform 架設一台Server
#下載安裝zabbix-agent
#zabbix_agentd.conf內修改ServerIP，後面填入自己之前建的Server外部IP
啟動agent
#如有firewall需開啟10050,10051
回到Zabbix Web，配置=>主機 =>創建主機

輸入主機名稱，群組名稱及Client IP

選擇模板

成功ZBX會亮綠燈

*Cloud注意事項兩端防火牆要記得開啟
Client 對外IP需開10050 (額外功能看需求10051)

Server端防火牆也需要開

====進階應用====
官方的Agent功能介紹
https://www.zabbix.com/zabbix_agent
zabbix_agentd.conf
Windows 安裝Agent
https://www.zabbix.com/documentation/2.4/manual/appendix/install/windows_agent?s[]=agent
官網下載 =>Zabbix pre-compiled agents => Windows (All)
解壓縮後兩個資料夾bin裡面有win32和win64，64位元選擇win64
將conf資料夾內的zabbix_agentd.win.conf複製到win64資料夾內
我自己方式將win64複製到C:\Program Files (x86)底下，並改名為zabbix
zabbix_agentd.win.conf與linux設定相同，LogFile路徑改成自己好用的地方
管理員模式開啟CMD
指令意思
=>切換到資料夾
=>安裝zabbix agentd 到Services使用zabbix_agentd.win.conf設定檔
=>執行service
停止zabbix agent
移除zabbix agent
可以直接去Services內做操作
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190812,SoftwareDevelopment,2,Kotlin30天，通過每天一個小demo學習Android開發系列,3,Kotlin開發第3天imagepicker(Intent+ImageView),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1512548385000000000,1162,"
這一次想了解讀取 Camera / Album 的部分，還有 ImageView 相關的設定。
自定義圓角按鈕，通過在 /res/drawable 下，建立一個檔案設定圓角樣式 shape.xml
通過對  設定 background 來繼承圓角樣式
和 iOS 的 UIImageView 一樣，圖片可以設定填充模式，控制圖片是否完整顯示，或者是否允許變形。
在 /res/mipmap-* 這類資料夾裡面，負責放 icon
在 /res/drawable  當中放入其它素材。
資源的命名有規範，比如說不能用「-」而是英文大小寫、數字、底線。

這裡有點像 iOS 開發過程通過 Storyboard 做的 AutoLayout，只是多了些蠻有趣的設定。
在 Android Studio 中，將 xml 對應的 Design 標籤下，可以看到可視化的佈局情況。
每一個元件的四邊都會有圓形的點，可以通過拖拉圓點來設定相對其他元件的距離。

而右側可以看到這樣的設定，中間部分的線條像彈簧一樣，其實就是如果設定好了邊界距離，剩下的部分就會平均分配。
除非去設定了左邊或下面的滑桿，目前就是上圖顯示的 50/50，也就是平均分配。

有點像 iOS 的 Segue / URL Scheme，我們可以將值傳送到別的頁面/App上，而在 Android 上甚至可以跟系統說，我需要用相機，然後就跳出一個選項，讓我們選要用哪一個 App 的相機，然後再取得照片回來用。
在 iOS 系統中，我們通常要用到的 Album/Camera，都會是由系統提供的（原生的），而在使用前都會需向使用者請求同意。
而 Android 不太一樣的地方是，我們可以通過 Intent 方法去打開別的相機、相冊 App，這時候會跳到別的 App 上，
在拿到圖片以後可以返回到原本的 App 上做接收，在這種情況下，只需要相機、相冊 App 有允許權限就可以了。
一個請求使用 Camera 的例子，
這裡的 ACTION_CAMERA_REQUEST_CODE，是自己定義的一個數字，用來在後面接受請求結果。
接收 intent 結果的方法：
類似於 iOS 中的 info.plist，Android 在 main folder 底下有個 AndroidManifest.xml 。
我們可以在這裡定義想要取得的權限，比如相機的使用。
通過 Contextcompat 類提供的方法來進行檢查，比如檢查 Camera 的使用權限","['Layout', 'Resource', 'Constraint Layout', 'Intent', 'Permission', '參考']","['ScaleType', '使用其他 App 獲取圖片', '原生的 Album/Camera 使用權限', '檢查使用權限']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190806,SoftwareDevelopment,0,30天從零開始到使用SpringCloud建立完整微服務架構系列,3,Day3-透過SpringData操作資料庫,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1512544935000000000,690,"雖然標題是寫 Spring Data, 但其實底下細分很多套件如
上面大致列一下比較常聽到的，如果你想用的我沒列到可以去 Spring Data 官方網站 看看
透過 Spring Data 這個共用的架構，你可以在不同的資料庫跟 NoSQL 間用很相近的方式來開發, 不用像以前各種 NoSQL 各自的套件各種 API 都要看怎麼用, 是不是聽起來很不錯呢?
這篇還是先介紹一下 Spring Data JPA 怎麼用, 因為後面的範例都是用資料庫, 所以 NoSQL 的話也許之後再補
開始呢我們一樣可以到 http://start.spring.io/ 去勾選套件來產生初始專案
現在選這幾項 Lombok、Web、H2、JPA 就可以了
好了之後我們 dependencies 如下
然後把我們專案內的 application.properties 改名為 application.yml
application.yml 的內容如下
然後在 resources 建立 schema.sql 檔案 內容如下
這樣一來 Spring 在啟動的時候會去幫我執行 schema.sql 的內容，
方便我們實驗的時候資料乾淨跟一直去管理 DB 的瑣碎事
先待補...免得忘記發XD",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190805,DataTechnology,0,Python學習筆記系列,3,[Day3]JupyterNotebook的簡介,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512538680000000000,761,"有2種以上的方式可以讓你開啟Jupyter Notebook。
1.	你可以點選這裡進入Jupyter Notebook的線上網站。

*點選右手邊的New按鍵，並選擇python3
2.	Anaconda Command Prompt或CMD也是另一種開啟Jupyter Notebook的方式，以下我用CMD來打開Jupyter Notebook。

一開始，在電腦裡你想儲存檔案的目錄下打Jupyter Notebook在CMD裡，也就是說你可以在CMD裡cd到其他目錄去儲存檔案。一旦你輸入完成後，請按enter鍵。Jupyter Notebook即可在本機上執行，這時，你複製一份圖中產生的URL，然後將URL貼在你的瀏覽器上。請確保你是用google chrome或是mozilla firefox開啟。
Jupyter Note的port是8888，所以如果在電腦上在CMD上重覆下命令，在不同CMD開啟Jupyter Notebook，port就會出現8888 ->然後8889->8890等如同這個例子的狀況
*複製CMD跑出來的token並貼入你想開啟的Jupyter Notebook的瀏覽器中
在這裡，我的檔案會儲存在C槽的user\Nick目錄中
C:\User\nick

*檔案會存在當時你指定的目錄下
現在來打開瀏覽器上python3的編輯環境

接下來，讓我們來更加了解Jupyter Notebook的環境吧用細節
(可以在這裡下載Jupyter Notebook User Manual去了解更多)
2.	首先，你可以將此notebook命名，在這而點選Jupyter logo旁邊的Untitled即可命名

3.	簡單介紹一下File, Cell, Kernal, Help等標籤的功用

(1) File裡的New Notebook是用來開啟一個新的Notebook分頁
(2) File裡的Downdload as-> 將你做的檔案下載到本機並儲存成.py檔案，notebook預設為.ipynb
(3) Edit則可以用來copy, cut, delete,etc. Cell 等
(4) Kernal-當你在執行你的程式的時候，可以中斷、重啟和重新連結。當你覺得你的code有問題時，可以check這部      分
(5) Help包含各式各樣的library 像是 (Python, iPython…)
(6) 如果你想要印出code, 語法為""print('String')""
a. 打 ""print('Hello World')"" 在cell裡然後按""Shift+Enter"" 去執行cell裡的code.
b. “Tab"" 鍵會彈出提示字元
ex. l+""Tab""鍵
c. 將資料 [1,2,3] 在cell裡設定為 “l” 。在另一個cell打I並打Tab鍵
ex. l+. +""Tab""鍵會彈出該物件的方法

d.打l+""Shift+Tab""鍵會秀出該變數資訊

e. help() 的語法為 ""help(object)""，這時help(object)會打開list操作方法

f. 當你選擇""Markdown""然後打字在cell裡時，將不會執行該文字檔的程式碼

g. 要寫註解的話，在句子前打""#"" ，當你在執行程式碼時，會略過這部分
h. 若要寫多行註解的話，請打入如下圖的範例的引號
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190799,ModernWeb,0,PixiJS，方便好用的WebGL內容產生工具系列,3,[PixiJS-Day-03]使用PixiJS製作的網站，也許並不少,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1512525131000000000,749,"本文介紹一些使用 PixiJS 製作的網站：
FLASH VS HTML
http://flashvhtml.com/

2013年為 HTML5 與 Flash 大戰的年代。
這個網站分別用 HTML5(PixiJS) 與Flash 各做了同一個射擊遊戲，
讓網友投票選擇自己喜歡的版本。
雖然 HTML5 與Flash 大戰的結果大家都知道了，
但還是為當時HTML5能做到的效果感到神奇。
Google Doodles: oskar-fischingers-117th-birthday
https://www.google.com/doodles/oskar-fischingers-117th-birthday


Google Doodle 是為慶祝節日、紀念日、成就以及紀念傑出人物等
而對Google首頁商標的一種特殊的臨時變更 (本段取自 wiki )
這是2017年6月22日 Google Doodle
紀念奧斯卡費辛格 117 歲冥誕的混音互動網站，
也是使用 PixiJS 製作的作品
PixiJS 官網上也有各個使用PixiJS 製作網站的連結
http://www.pixijs.com/gallery

(截圖我有調整過方便在文章裡預覽)
也可以將自己使用 PixiJS 的網站刊登在 PixiJS 官網上
如果平常有在逛一些網站蒐集的網站如 FWA 等，有時會看到一些 PixiJS 的網站
辨識也相容易:
方法1:

在 console 裡會先跳出一行 PixiJS 與版本的訊息
方法2:

在 console 裡打 PIXI，也會跳出 Pixi 套件
舊版 PixiJS 不會一開 console 就跳出套件資訊，
可用這個方法測試
如同之前提到，每種表現頁面視覺動態的方式都不同，
我在看網站時也不一定會以使用 PixiJS 實作當作參考
有時可以用 PixiJS 實作的角度看使用 three.js、canvas動態的網站；
或者在看使用 PixiJS 製作的網站時，也從使用 CSS 或是其他實作方式製作，
都是相當有意思的思考方向。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190800,ModernWeb,1,每日文章推薦系列,3,Day3為何是看中文的為主,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1512524903000000000,821,"同樣長度 中文的我可能看五分鐘 英文的可能要花上三倍時間
這麼多的文章要看我當然也只能有中文的先看中文
我一天大概是看三四十篇文章
只認真看一半的話 一篇五分鐘也一兩個小時跑不掉了
看英文只會更久
我只能說最近的翻譯速度真的很誇張
看到原文被推上來
大概也就知道這篇文章這兩天應該就會有中文版出現了
資訊落差也不會到太大
分享文章的目的是讓周圍的人可以一起看
不夠吸引人他們怎麼會點進來呢XD
當然技術文件之類的英文還是跑不掉
不要以為不用練英文欸
学习如何学习 | 王辉的博客
這篇就跟我看文章的原因差不多
知識是累積出來的
看過自然會用到
用到就會練習
練習久了就是你的
知識再成為你進步的踏腳石
如果根本不知道 或者只知道皮毛就將一個東西放棄
長期看來會變成很大一個洞
知識的累積與更新 是需要持續做下去的
在 PHP 中养成 7 个面向对象的好习惯 - 后端 - 掘金
這類文章其實經常出現
內容也大同小異
不過每次看就都當作複習
可以想想最近用到那些
哪邊可以用上這些東西
或者相互比較之前看過的概念有沒有哪裡是錯的
[翻译]JavaScript的成本 - 掘金
這篇我這幾天看過好幾次原文被推出來
就想說中文版也該出來了
雖然原文不是看不懂
但是看中文真的會比較好吸收
如何提高你的 React 应用的性能 - 掘金
其實我不用react(vue大好)
所以我看的是Debug的做法
另外很多東西其實可以互相套用
所以我也會看一些我覺得可能會有用的東西
定时任务高效触发 - 前端 - 掘金
有些文章看到回應都會抖一下
這篇就蠻經典的
看完還馬上寫成套件推到github上面
看到別人這麼努力 總是會有點怕怕的
不求甚解 - VUE实践 - 掘金
大家會撞到的牆都差不多
所以裡面很多東西其實也看過了
會看的原因其實也是看有沒有更好的做法
跟避免自己撞到別人撞過的牆
分布式领域架构师要掌握的技术 - 掘金
這篇可以說是沒重點 但也可以說很多重點
基本上就是提供了一堆關鍵字讓你自己去找
有興趣自然會去補完他講的是那些東西
nginx从入门到实践 - 掘金
這類文章算是官方文件加上個人心得
就是邊看邊注意有沒有自己遺漏過的東西
跟從別人心得去找出以後可能用得到的東西
Web自适应布局你需要知道的所有事儿 - 掘金
其實我對網頁的長相很沒Sense
但是作法的東西還是加減看
至少會知道最近用哪個做法會比較好
雖然我做不出""能看""的東西 還是要知道技術在哪裡
微信朋友圈：应对春节千亿访问量背后的故事 - 掘金
參考別人的架構 來思考哪部分是自己可以用的
閱讀紀錄",,"['原因', '今日文章分享']","['閱讀速度', '數量', '翻譯速度', '標題比較吸引人']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190787,ModernWeb,1,30天使用Node.js在AWS上開發後端系列,2,"30-2Node.js環境安裝,基本語法與有趣應用",neilwang,https://ithelp.ithome.com.tw/users/20107336/ironman,1512523643000000000,965,"由於我剛剛寫的洋洋灑灑兩千多字的學習心得與介紹因為重新整理消失了
非常想棄賽QQ
但是還是先把重點寫一下好了
這一系列的文章都是想要寫給非相關科系的人看的
所以不會講很多很底層, 歷史的東西
我希望從應用開始慢慢介紹 Node.js
我依然還記得我大一剛接觸程式的時候, 連 for 迴圈都不會寫
也不知道學了物件, 多型, pass by reference到底能幹嘛
直到我自學網頁後才開始發現, 原來可以用的地方很多
只是學校的教法, 讓許多人卻步, 希望我的文章能引起想入門的人興趣
有興趣之後, 再來學最快!
Mac
Ubuntu
變數的宣告有比較常見的幾種: var, let, const
var 是最一般宣告變數的方式, let 可以視為跟 var 很像
差異是在被用 let 宣告的變數比較不會污染到其他變數
看不懂? 沒關係! 以後慢慢才會有感覺 XD
至於 const (Constant), 就是宣告一個變數為常數
常數就是這個數字是不可被改變得, ex: PI = 3.1415
被宣告成 const 的變數, 是無法被修改的!
想知道更詳細請參考底下網址 這裡
Node.js 大部分的語法都跟 Javascript 一樣, 關於陣列這塊, 在開發肯定會很常遇到
陣列你可以想像成把一堆機車放在一個一個的機車格, 每個格子上都有編號
可以方便你去使用跟管理!
陣列裡面可以不用裝同型態的東西, ex: [1, ""2"", {name:3}]
但是通常開發的時候都會盡量放一樣的型態
就像把會員資料放到陣列裡面, 丟到網頁上去顯示
或著是管理機車格內的機車這樣
基本上在開發時, 陣列內通常都會裝一堆 物件
例如
其實我這裡談得很粗淺, 如果真的想要的理解更多的, 可以參考這裡
很多常用的例如 ``` shift, sort, slice, splice, map, forEach ````
https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Working_with_Objects
其實以前我在接觸程式的時候, 常常不知道學這些東西到底能怎樣應用在生活上
學了變數宣告, 記憶體位置, 物件參考等等, 我都不知道能幹嗎
所以我其實很能體會為甚麼有些人討厭寫程式, 因為一開始的學校教育
真的很難從其中獲得成就感! 所以真心推薦用 Node.js
使用別人建立好的輪子, 快速建立一個小東西! 先有興趣, 學起來就快!
這裡使用facebook-chat-api
先在桌面建立一個目錄 day1
然後進到該目錄底下, 建立一個 test.js 的檔案
使用編輯器去編輯 test.js
推薦使用vscode, 至於怎麼使用就不多說了!
或是使用 terminal.app
建立好檔案後, 先用 terminal.app 在 day1 目錄底下輸入
然後找別人密你, 然後就可以看到你就像鸚鵡一樣
他說什麼你就說什麼回應給他
我個人覺得這是一個可以快速引起興趣的小程式
做了馬上就有一個 feedback
有沒有覺得 Node.js 比起 Java, C, ..etc 其他程式語言來說更簡單好玩XD?","['環境安裝', '基本語法 (明天再補更多常用的介紹)', '有趣應用']",,"['宣告變數', '陣列', '物件']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190700,ModernWeb,1,JavaScript基礎二三事系列,3,Day03　執行環境:創造與提升,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1512520478000000000,771,"JavaScript在電腦上要執行時，會經過創造階段，這會對我們的程式碼造成什麼影響?
　
來看看以下程式碼：
用瀏覽器Console來看

嗯!很正常
那這樣呢?下面這種寫法，有些程式語言會報錯，但JS可不會呦
用瀏覽器Console來看

Called b!正常被印出來，代表函式b有正常執行，但是undefined呢?
當我們在編輯器存檔，並在網頁重新整理(執行時)，我們寫的JS在執行前會先經過一個階段：
創造(creation)：直譯器將我們程式所寫的變數與函式創造並設定到電腦的記憶體裡。
實際上語法解析器將我們的程式碼轉換給電腦時，它會知道我們在程式的哪裡宣告變數與函式，在創造(給電腦)階段會先將變數與函式的定義按順序設定在記憶體裡，然後才會執行我們其他的程式。
　
那為什麼變數a會是undefined?
在轉換給電腦執行的創造階段時，函數與其函數內容(定義)會先存至記憶體，所以可以正確的呼叫，呼叫後建立這個函式的執行環境，印出Called b!
　
而變數雖然也會被創造存至記憶體，但其賦值內容並沒有再創造時跟著被進去，這邊可以把創造變數與賦值給變數當成兩件事，所以呼叫變數a才會印出undefined
　
上面的一樣的程式碼，電腦執行時可以想像成是這樣的順序：
結果會是一樣的
　
　
再看看以下程式碼
結果會是怎麼樣?
用瀏覽器Console來看

和變數有點不一樣，function是呼叫才創造執行環境並在裏頭創造他的區域變數，故可以正常顯示出來。
那如果是這樣呢?
好像差不多，結果是?
用瀏覽器Console來看

執行時可以這樣想：
var boy先被提升到最上面(創造變數boy並設定進記憶體)
接著呼叫執行boy函式
給變數boy賦值(指向)函式
呼叫執行boy函式時報錯，是因為變數boy這個時候根本沒有被賦值，何況是指向函式呼叫呢？所以自然報錯boy is not a function，可以想像成是這樣：
結果會是一樣的
　
　
當然這不代表我們寫在編輯器或IDE上的JS程式被竄寫成這樣，而是電腦執行JS的順序變成這樣，這種乍看變數與函式被拉到作用域最前面的現象稱為Hoisting
這裡也可以參考MDN與W3C
　
　
　
小結
今天複習了執行環境的創造與Hoisting，Hoisting是JS奇妙的特性之一，也是初級前端工程師面試常考的題目之一，實際開發時最好注意宣告變數與定義函式的部分，可以降低雷點的發生。
　
今天的筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分2-10",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190782,ModernWeb,0,重新學習網頁設計系列,3,DAY3.CSS選擇器Selector(一),CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1512520356000000000,747,"對於後端程式起家的我, 以前我對CSS的選擇器selector大概就只知道id、class、*，一直到前17年初我真正踏入前端的領域後才知道原來選擇器可以有這麼多的使用方式。
資料來源：w3cschol
類別選擇器
html
selector
補充說明
以上範例最終Hello CSS將會呈現藍色，特別注意.foo與.bar在css裡我刻意地將他們連在一起
這意義代表通時擁有.foo與.bar類的元素顏色才會被定義於藍色。
而如果我們將CSS範例改成以下
其差異只在於.foo與.bar的定義用空白隔開，但實際意義去大大不同
當這兩個類使用空白分開時代表CSS將會定義其.bar類屬於.foo類的子元素時才改變顏色
所以由於以上html範例標籤div雖然帶有.bar類，但與.foo類屬於同一層級，並不符合父子關係
所以color: blue並不會對這個div生效。
這個定義對於當初不熟悉的我來說覺得有點繞，搞不太清楚為甚麼要這樣解釋。
原因在於這句話同時解釋了CSS的運作
CSS將會從選擇器的最右邊開始往左邊解讀
當CSS看到.foo .bar這樣的定義時，會先找出文件裡帶有.bar類的element元素，然後如果左邊沒有其他類的定義，就會套用定義，但！如果左邊還有其他選擇器就會在近一步的搜尋是否屬於.foo類，依此類推依序向文件頂點html做查找，由此可知若把選擇器寫的越詳細、越深，其實效能越是低下
html
selector
補充說明
.id選擇器其特定度相當高僅次於!important與行內定義
以這個範例來說，雖然.bar類定義於id#bar之後，但由於類特定度低於id，因此.bar類的color雖然成功定義但不會被瀏覽器所使用。
更多特定度的解釋歡迎大家查看我在鐵人邦Day 2. CSS 特定度 Specificity這篇文章。
html
selector
補充說明
使用逗號可以將選擇器分隔，使定義對每個選擇器都生效
html
selector
補充說明
>符號代表定義該選擇器的第一層子元素且符合選擇器規則的對象樣式
以上範例 I love HTML 會是黑色， I love CSS會是紅色，而I love JavaScript會是藍色
定義樣式於緊接在selector1之後的selector2
html
selector
補充說明
在這個範例中只有符合緊接在div元素之後的p元素會改變顏色，因此只有I love CSS變成了紅色。
屬性選擇器
html
selector
補充說明
在這個範例中首先選擇器[foo]將帶有foo屬性的元素改變文字顏色為藍色
不管該屬性的值為何，甚至是沒有值，所以此範例的兩個I love HTM都會變為藍色！
接著將帶有type屬性且屬性值為text的元素文字改變成紅色
因此雖然第二個input帶有屬性type但值不符合text所以文字顏色不會被改變",,"['.class', '.id', 'selector, selector', 'selector > selector', 'selectot1 + selector2', '[attribute]']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190795,自我挑戰組,0,數位遊牧民族（DigitalNomad）系列,3,第三天-前往朝聖DN大城準備項目(清邁),alincode,https://ithelp.ithome.com.tw/users/20092025/ironman,1512520121000000000,810,"
建議可以先在台灣換 3000 ~ 4000 的泰幣，其他帶台幣去(提醒一個人不能帶超過10萬台幣現鈔，如果要帶超過 10萬，可把超額的部份先換成美金。)，不用特別換美金匯率更差(最近美金一直貶值阿)，唯一的好處是不用特別找能換台幣的換匯所，帶其實到市區大部分都可以換台幣。
我是外食族而且不挑食，所以準備錢跟胃藥，就好了。",,,"['換泰幣', '食', '衣', '簽證', '交通', '網路 + 電話', '住：(暫時略過，之後會有一篇來說這塊)']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190794,ModernWeb,4,前端工程師養成手冊系列,3,如何有效率地Google尋找問題並學習新技術,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1512519834000000000,1495,"當我就任三、四個月後，設計部專門負責網頁切版的大前輩離開了，知道這消息實在晴天霹靂，代表著這重責大任要落在我身上了。那時候我切出來的版型常被工程部吐槽，都會被碎念「啊你這版型不行啦，我程式沒辦法接」、「我這裡要跑重複資料，要 repate 的話 HTML 標籤要從哪裡 copy 到哪裡？」、「你這 Layout 是要抓哪啊？你寫得真得很”巢”耶...我真的完全看不懂」。所以那時候每次將版型丟給後端那幾個小時都會如座針氈，深怕下一秒又被召喚過去吐槽。
我們公司大部分都承接系統開發，幾乎所有的網頁都會接成動態應用程式，程式語言跟資料庫是用 .NET + MSSQL，後端工程師的嘴雖然很會碎念，但對我這新人還是會耐著性子和我討論，那時常和我配合的工程師叫做阿杜，進來已經三四年了，整個就是一隻老鳥。
我：「所以你會切版嗎？要不然你教我幾招啊，你都會 .NET 了，HTML、CSS 應該還可以吧？」
阿杜：「金拍謝...我會得還沒你多，你可能要自己多研究，以後公司靠你了，你是未來的棟梁。」
我：「真的假的啊...哩賣騙肖..」
阿杜：「真的，我在公司只負責動態程式跟資料庫邏輯而已，之前都設計部在負責，排版整個忘光！Google 有很多資料你多參考啦，我不會也是自己 Google 的！」
實在太哭爸了，我真的超級無言，每次阿杜要我自立自強解決問題時，都會靠北一句「以後公司靠你了，你是未來的棟梁，你可以的!!」來敷衍我，我就會很無言地回到座位上繼續解 IE6、7、8 的 BUG，彷彿大海撈針般從 Gogle 老師探索我想要找尋的答案。
講完我的故事，接下來就來分享一下自己如何用 Google 來解決問題吧。
我一開始在學習 HTML、CSS 時，基本的語法概念是有的，當我想要學得更深入時，去網路上看別人部落格，絕大部分都發現到會要你去 W3C 好好看過一遍再來開始學網頁排版。後來我也是照做了，但越做越想睡，雖然基礎知識有了，但我到底該如何運用這些標籤來設計出我要的網頁版型出來，整個就是毫無頭緒。而在當我學 jQuery、JS 時也有這樣的想法。
但一直重複地 Google 撞牆後，還是有發現到一些有用的學習方式。其中一個就是去看別人寫的範例程式碼，網路上不乏會有很多開發者分享自己做網頁版型的範例，裡頭的語法已經讓我有大概的印象，只要瞭解裡頭的語法，我也可以跟他做到一樣的事情，而這種方法也讓我開始改變學習方式，在一開始學新技術前，我會先去學一點基礎的語法，甚至買書來看。等到稍微有些小成後，就開始去搜尋關鍵字找一些簡單的範例來吸收，有看不懂的語法就回頭翻書或 Google 加深觀念。那時我也會 關鍵字打「website template」、「網頁版型」之類的關鍵字，將別人做得很完整的範例整個看過一遍加深觀念。
沒有人天生就是天才，就像是給你關刀，你知道怎麼亂揮舞，但是刀是拿來斬人的，人會亂移動，你要有效率的斬人一開始是絕對沒譜的，自然就會想去看關公施展招式的過程中學個一招半式，然後自己再去練習怎麼斬，進而內化成自己的武功心法。
所以才會說一開始學新技術時，先瞭解一些基礎語法後，就從網路上尋找各種範例來練習吧。
既然要找範例，也記得要找自己稍微看得懂得東西來看。絕對不要找那種跟自己層次差太多的文章，只會讓自己的學習曲線變高，挫折感變重。
這觀念就有點像是高中在上微積分，老師在台上口沫橫飛，你完全聽不懂，舉手問老師，老師重新講解還是丈二金剛摸不著頭緒，於是只好請教隔壁的同學。同學因為和你的背景相似，比較瞭解你的程度，所以在口語解釋上你比較能聽懂他在講啥。
除了透過網路搜尋別人的開發部落格外，Github 搜尋也是個好方法，它目前已經是世界最大的程式碼集聚地，例如說你想用 JavaScript 寫一個 todolist，就會看到下圖畫面。

步驟一：像是你打了 todolist 關鍵字， Rspositories 是別人的專案名稱、Code 則是觀看別人的片段程式碼，像我很喜歡看 Code，例如我學會了一個 JavaScript 的 forEach，但想要多找些範例加深自己觀念時，輸入關鍵字就有很多 code 可以參考。
步驟二~四：我自己比較習慣用「Best Match(關鍵字吻合度)」、「Most stars(星等排序)」來下拉尋找，當我在學新技術時，我會反其道而行找星星最少的，因為現在的我剛學會某個程式，想要更進一步瞭解更多，所以我自然要找我的「同學」，或是比我厲害一點的，通常星星多表示他寫的 code 很漂亮，或整合了許多功能，這樣反而會阻礙我只是想學一個觀念的途徑。除非是說我要找一個熱門的套件，例如網頁動態日曆、燈箱效果時，自然是去找星星最多且有持續在更新的專案會比較 ok。
所以請記得在學程式時，你應該找的學習資源是「比你厲害一點的同學」，而不是大神，當你吸收了同學的養分越變越強，看的 star 越高也都看得懂得時候，恭喜你，你慢慢掌握這技術了。
有的時候你還是會遇到看了別人部落格，但自己在練習時還是無法做出一樣的功能，有可能是部落格寫錯、少貼一些 code、環境不一樣等諸多原因，所以我也會習慣用 youtube 來下關鍵字，看是否有人有教學錄影。另外 udemy 也是一個不錯的線上課程平台，主要也以程式課程居多，同時也有許多免費程式課程，優惠期間也長有特價 300 優惠，雖然大部分都是英文課程，但幾乎都有支援字幕，甚至透過 Google 翻譯軟體即時翻譯。
這樣好處在於至少照著影片上的講師一起做，或下載他的範例程式碼，也有助於你學習程式上會比較順利，想什麼時候上課就自己安排時間學習。
技術更新快速，假使你在找解法是三四年前的文章時就要保持懷疑猜測態度，不要盡信，較好的方式可以用 Google  搜尋的下方的功能列。 像是如果你英文不好，也可以先搜尋繁體中文，若還是不行就搜尋「所有中文網頁」，可以進階找到簡體教學，時間區間抓一年以內其實資訊就還蠻新的了。
經由過濾和交叉比對後，找的文章自然也就比較新，或是到目前最大的 程式論壇 stackflow 下關鍵字，找投票贊成數多的文章來觀看也 ok。

我在學新技術的時候，還蠻常會去能夠上傳簡報的服務網站看看的，通常有人整理技術簡報並上傳，往往都是講師級的 level，簡報品質自然壞不到哪裡去。我自己最常去的則是 SlideShare 與 speakerdeck
有時候在找靈感時，也會用圖片搜尋的方式，舉例來說我要找一個 jQuery slider 的效果，就可以先初步過濾哪些 slider 做得不錯再點擊觀看文章，像是一些動畫效果的關鍵字，之前我也有整理一份起來，也提供連結給各位參考。
希望以上這些方式能夠打通你對 Google 關鍵字的想像搜尋空間，除了單純文字吸收，其實還是有不少可以幫助學習的管道。
--
阿杜：「阿你是 Google 到了沒辣!!」
我：「還沒啊，你這麼會估你來估啊。」
阿杜：「我等到要度估了啦怎麼估!!」
我：「......」
",,"['學任何技能都是從模仿開始', '先從自己看得懂得程式碼下手', '看不懂程式碼，線上影音教學是你的好朋友', '不要尋找過時的文章', '簡報網站都會有意想不到的乾貨', '圖片搜尋', '結尾']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190790,SoftwareDevelopment,1,保持前進、持續優化程式碼內涵系列,2,02.看的懂的程式碼，才是好的程式碼,依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1512519126000000000,854,"在開發時，為了快速或是避免麻煩，可能會用簡單的代號，例如 aa 這種名稱，來暫時做為變數的名稱。這無可厚非，但是...假若在完成該功能當下，沒有進行最基本的重構—改名。
也許三個月後，也許一年後的某一天，突然發現程式有需求變動，不管你是要修改自己開發的程式，還是要維護前人遺留下來的軟體。這時，你將程式專案開啟，花費了一番苦戰，好不容易找到要修改變動的程式區塊。
看著程式碼中，各種無意義的命名，苦苦的思考，為什麼當初會這樣寫？這個變數是什麼意義？邊改寫程式，邊幹譙當初寫下這段程式的人。
上面的經驗，想必有許多人都有過這種經驗。
下面，我將以前接手，研究所學弟的原始碼分享給大家看，後面幾篇文章，都會做為範例操作。
老實說，當時，第一眼看到下面的程式碼時，只有傻眼二個字
中略
上面的程式碼，簡單來說，是使用基因演算法(Genetic Algorithm, GA)，找出兩張影像的最佳疉合點。
若是要對這段程式進行維護或修改，其實花費額外的時間，在了解程式碼本身所代表的意義。
不易閱讀的因素，大致上包含
為了持續精進程式可讀性，我訂下了一些遊戲規則（原則）",,"['這是天書嗎?', '問題點', '遊戲規則']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190688,SoftwareDevelopment,2,MsBotframework30天上手系列,3,Node.js,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1512518575000000000,739,"因為 所以
系列文章請改到這裡來喔!
Microsoft Bot Framework 30天上手 ",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190761,SoftwareDevelopment,2,爬蟲始終來自於墮性系列,3,工欲善其事，必先利其器(下),Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512518415000000000,979,"postman 絕對是最好用的測試工具之一，除了可以記錄我們傳送過的內容，也能便利的直接 bulk edit 我們要傳送的參數，可以直接從 chrome 複製參數，然後完全無縫的貼上使用。
使用 postman，我們可以非常容易的模擬傳送各種 request，在製作 request 的時候，重點會放在四件事情上面：

當傳送 request 成功後，我們除了要觀察這個 request 的回傳結果外，我們也必須觀察這個 request 回傳的 header 和 cookie。另外，我們也能選用不同的顯示方式，讓我們在觀察的時候更加直覺。

除此之外，postman 也能自動產生 request 程式碼，幫助我們在實作過程中更加快速。這個功能很方便沒錯，但千萬記得一點，你看不懂的程式碼，請弄懂後再使用。
這次主題都會以 node.js 來實作，所以在實作前必須先具備一些條件：
在 node.js 有著強大的 npm 作為後盾，所以我們在實作過程中，會直接使用適合的套件。
https://www.npmjs.com/package/request
在模擬 request 的部分，我們會使用 request 來作為實作的套件。request 他有著許多可以客製化的設定，除此之外，postman 也是以 request 當作預設的程式碼所使用的套件。
在實作過程中，很多的網站會使用 cookie，所以我們也會需要在傳送 request 的時候有處理 cookie 的方式。
https://www.npmjs.com/package/cheerio
當我們收到 response 的時候，會使用 cheerio 來當作 dom 操作的工具。cheerio 是使用類 jQuery 的方式來解析網頁物件，所以當我們在選擇要抓取的資料時，可以用類似 jQuery 的 selector 來選擇我們要的 dom。
https://caolan.github.io/async/
在爬蟲抓取資料的過程當中，可能會是一個很大量且攏長的過程，我們若使用同步的寫法，那麼會大幅增加執行的時間，所以在一些抓取伺服器允許的狀況下，我們會使用非同步的方法，在這邊我們會使用 async 這個套件當作我們的流程管理工具，它提供了許多方便的函式，讓我們能更便利的控制執行順序。
在 async 所提供的函式裡面，我們常用的有：
https://github.com/segmentio/nightmare
當我們遇到透過 js 所渲染畫面的網站時，最原始的方法就是去解析他的 js 程式碼，但如此一來會耗費太多精力。我們可以透過高階的 browser 自動化工具來取得 js 執行後的結果，在這邊我們會使用 nightmare.js 這個套件來實作，他可以很輕易的模擬人工在網頁的操作流程。
https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md
跟上面 nightmare.js 一樣是 high-level browser animation，是由 chrome 自家提供 Node API 的 headless Chrome，想必在支援上肯定會跟 chrome 更加 match。不過我自己還沒實用過，所以也感謝 Wolke 推坑，這次就以 Puppetter 來實作過程。
ps. Puppeteer 還有提供 playground https://try-puppeteer.appspot.com/","['測試工具', '實作工具']","['Postman', 'Request', 'Cookie', 'Cheerio', 'Async', 'Nightmare.js', 'Puppeteer.js - 感謝 Wolke 補充']","['模擬 request', '產生程式碼']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190678,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,2,[Round2]遊戲，人生的試煉場,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1512517979000000000,730,"一個契機有可能是一個人，一句話或一本書，
「先問，為什麼？啟動你的感召領導力」，就用這本書裡的黃金圈理論「莫忘初衷」來思考幾個問題:
Why? 為什麼要設計一款桌遊? 因為喜歡遊戲，遊戲就像是人生的試煉場。你可以在每次遊玩中學到某些東西。只想輕鬆的遊玩? 沒問題，最少你也會、也該獲得樂趣。最棒的是，你永遠有再一次的機會...Continue? Yes (投幣)，遊戲也該是人生的遊戲場。
How? 怎麼做到? 桌遊本身的設計就是答案，利用其互動性，強迫大家放下手機、平板，增加人與人的互動，一種親身體驗有”溫度”的遊戲。
What? 做什麼? 實際的作品還不明確。這裡先想到的是希望加入興趣中具有地方特色的元素。另一個反面思考，有些強迫、硬性的”默契”是容易擦槍走火的主因，在設計規則時要特別注意這點。
以上三點是中心思想，是核心價值。往後在過程中有任何取捨時提醒自己常常回顧這裡。
先按照一般學術論文的結構順序，待進行至介紹桌遊時，再來抄襲致敬一下正確的流程:
大綱: 雖說是放在最前面，但其實這是最終完成後，再用濃縮所有精華而成。然而先下筆寫下，當做未來作品的介紹也是不錯。
緒論: 最雜的一個章節，包括背景、動機、目的等。這裡只會著重幾個重點: 介紹桌遊、桌遊的回顧，界定問題與解決。
架構/方法: 只出一張嘴時，可想而知這是最面臨挑戰的地方。鉅細靡遺的寫下完整的架構與遊玩流程。寫完此章節也許以後就不敢再亂嘴了?
結論: 不管最終一款作品有多糞，都必須糞的有價值。與上一節相反，本章節和下一章節都是出一張嘴的最佳表演舞台。
檢討/展望: 嘴別人之前也別忘了嘴別人，號稱最具有未來性與無用性的章節...
嗯，這樣的規畫沒問題...吧!...嗎?
下一回合，認真的先研究桌遊這玩意吧",,"['中心思想', '流程規劃']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190788,自我挑戰組,0,,2,人工智慧當道，稍微瞭解一下也沒什麼不好,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1512517886000000000,721,"這次第一大主題就是人工智慧(AI)&機器學習(Machine Learning)
主題範圍包含：
人工智慧 (AI)
機器學習 (Machine Learning)
深度學習 (Deep Learning)
類神經網路 (Recurrent Neural Network)
強化學習 (Reinforcement Learning)
自然語言處理 (Natural Language Processing)
電腦視覺 (Computer Vision)
語音識別 (Voice Recognition)
圖像識別 (Image Recognition)
全自動機器人程式 (Bot)
對談式全自動機器人程式(Chatbot)
光這 11 個項目還不足以完全涵蓋AI的所有範圍
AI的全名是 Artificial Intelligence
基於維基百科的 條目解釋 以及我自己的理解
人工智慧應該是涵蓋範圍最大的名詞定義
人工智慧的研究分成了多個子領域，根據應該具有的能力做了分類：
演繹、推理和解決問題
這方面比較重要應該就是類神經網路的研究
知識表示法
這方面沒有比較明確的研究項目
規劃
這點在目前的研究似乎也沒有比較明確的方向
學習
從這次主題範圍中比較有關的就是 機器學習、深度學習、跟強化學習，這三個主題
自然語言處理
自然是這次的主題之一，畢竟要讓電腦能夠讀懂人類的語言
運動和控制
這部分應該是大家熟知的機械機器人的部分，有硬體也有軟體研究
軟體方面比較重要應該都是姿勢控制跟重心運算，跟物理比較相關的
知覺
這部分對應這次的主題應該是 電腦視覺、語音識別、圖像識別。
社交
我覺得Chatbot很適合這部分的領域主題。
創造力
本次主題也許沒有對應的研究，但是關於 人工直覺 和 人工想像，這兩項研究算是比較相關度高的
其他部分先不多說明，等明天文章再繼續看吧
相關資料都可以參考Google大神跟維基百科
應該會多花幾篇文章介紹各個子主題的內容
感覺這個主題的知識含量很高啊
也歡迎高手多多指教
這邊也只是小小搜尋小小分享而已",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190786,ModernWeb,1,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,2,UserStories,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1512517797000000000,720,"使用者為什麼要用你的產品呢？當然是他想完成某件事情，他不一定需要知道背後運作的原理。好比說人類一直有在夜間照明的需求，所以就有電燈的發明，從一開始的鎢絲燈泡進化到現在的LED燈泡，我們不必知道為什麼燈泡會亮，只要懂得放進燈座，打開開關燈就會亮了，要怎麼製作燈泡，那是科學家的工作。
所以在一開始的時候，請先放下工程師的身份，我們現在要做的是一位導師，我們的責任是帶領迷途的使用者通過重重關卡，最後完成他們的心願。請離開你的電腦，拿出筆記本和一隻好寫的筆，和使用者面對面，用「問問題」的方式來探索他的需求。
這個時候你不再只是工程師，你就是設計師，你也是經理、sales, CEO, 甚至你也是使用者。所以你的問題不限於功能方面，可以問產品的外觀，問產品在整個市場中的定位，問產品在日常生活中的角色。
這個時候你就拿起筆狂記錄，有聽不懂的地方請對方再說得更詳細些，如果能有範例或譬喻更好。
提供一些問題範例：
我們現在的客戶A，是一間有著幾千名員工的大公司，現在他們的資訊處要將公司內的媒體中心網站改版，以符合在行動裝置上瀏覽。於是我們就問了上面的問題，由於是企業內部的網站，不需要營利，所以有關商業的問題就可以省略。
然後我們要從訪談記錄中拼湊出 user story。一個 story 是使用者在執行一項功能時從頭到結束的過程，以「主詞」＋「動詞」＋「結果」的結構來描述，幾句話就可以寫完。
在客戶A的案子裡，我們的 user stories 會是：
我是A公司的一般員工，我可以...
或許你有聽過 Persona 人物誌，也是用在撰寫 user story 時能更精確的具現化使用者形象，不過這是使用者經驗研究員的工作了。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190781,自我挑戰組,0,如何用電商一個月從0賺到100萬系列,2,day2.挑幾個能屌打所有人的產品,ocom,https://ithelp.ithome.com.tw/users/20107558/ironman,1512517322000000000,1543,"一開始我他媽按照我之前講的，一定要罵髒話！上班累死了還要寫文章，幹！
做生意就三個原則，1.要賣什麼2.要在哪賣3.客人怎麼知道你，就這三點，你他媽知道這三點就天下無敵，能夠過得爽歪歪，不再是22k的臭新鮮肝，也不是熬夜熬到爆，過得很慘得熬夜工，懂三點者得天下，你最好給我記清楚，我佛心大發的告訴你，你懂這三點，就能用你的""屌""屌打所有人。
你說這是it鐵人賽，這個一點都不程式，你他媽知不知道，所有的code都是為了解決人性的問題，然後用code賺超大錢，讓下半輩子能夠過得爽爽的，任何程式都是用來滿足獲得利益的工具，所有的道理都是通的，你懂人性懂生意，你寫的code就是他媽的神屌。
day2操他媽的要來選產品，我隨便花個半小時，選了幾個產品，貼在下面，睜大你的小雞眼，看好這幾個產品，就是能屌打所有人，能夠賺到翻的產品，你問我說如果賣不出去呢，我操那就賣不出去，我一點都不負責任，這一系列全都是我唬爛的，你相信你白癡，不想看的滾。
第一個產品：女士手拿皮夾
這個編輯器不能貼上傳圖片，我真他媽飽了，我一點都不想找外面的圖床貼給你們看，選個圖片出現“！[](http://” 這他媽的是三小，懂不懂什麼叫人性化，貼圖一點都不人性，我一用就真的飽了，這樣的編輯器要跟人家走跳，然後還一堆人傻傻的去找圖床，乾，有夠白爛，跟人家比技術，第一關人性就輸到海邊去了，我真他媽的鄙視這個編輯器。
第二個產品：傳說對決遙控器
有玩傳說對決就知道這是什麼東西，左邊拇指控制器，就說到這邊，看不懂我也不想理你。
第三個產品：金邊高檔耳機
白牌的蘋果耳機，然後加上金邊，有白色黑色，看起來就很高級，一看就很多人喜歡。
先選這三個產品，為什麼要選這三個產品，偶不告訴膩勒，你他媽看就對了，也沒看你在上學的時候問老師這麼多問題，看完跪下就對了，媽的逼。
你說會不會賣，我最好知道，反正有沒有賣掉我不痛不癢，我完全不負責任，不爽就給我滾，幹。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190780,SoftwareDevelopment,0,【UnitTest】UnitTestwithC#系列,1,【Day1】開始-目標概述,eyelash,https://ithelp.ithome.com.tw/users/20103826/ironman,1512516457000000000,745,"Unit Test，簡稱UT，中文常翻譯「單元測試」，又稱為模組測試。為何會這樣稱呼呢？這是把程式劃分成一個一個小區塊，然後每個區塊都個別測試。每次修改，或是開發檢查程式是否有正常運作，就會執行一次Unit Test。
就像是要檢查每個螺絲都有拴緊，才會讓飛機起飛，如果沒有拴緊，可能機翼在空中解體。同樣的道理，如果沒有檢測過的程式，我們敢稱這個程式沒有問題嗎？因此在上線之前，程式都會進行測試，而其中在開發過程中的測試方法之一，就是Unit Test，確保每個功能都可以正常運作，如同Wiki上面寫的「單元測試通常由軟體開發人員編寫，用於確保他們所寫的代碼符合軟體需求和遵循開發目標。」
學程式到真的開始寫，深深覺得博大精深。當學會如何寫程式，可以解決問題後，就會開始想：如何更精進，如何更有效率。就有人建議「模組化」、「Unit Test」。然而這兩者又無法很快速的學習其竅門，藉由這鐵人賽，學期如何切割程式碼，並且把Unit Test放在裡面。
將會按照這本書的順序：The Art of Unit Testing: with examples in C#, 2/e，進行學習與分享。
前面先是熟悉Visual Studio，以及如何安裝Unit Test相關的工具，接著模擬開發，建立UT的Case。到最後能建立出一些Unit Test，及其他運用。
本系列的程式將會放在Github上，屆時需要的人可以去Github取得source code。
參考：Github","['什麼是Unit Test', '目標']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190777,自我挑戰組,2,服務桌從開始到進入資安領域系列,2,[Day2]服務桌的日常:常用指令,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512516146000000000,809,"windows常用指令
ping	查詢網路狀態
ping -a IP -t	查詢電腦名稱
ipconfig 	顯示資訊
ipconfig/all	顯示祥細資訊(win98之前的:winipcfg)
ipconfig/release	釋出IP
ipconfig/renew	取得IP
ipconfig/flushdns	清除DNS cache
ipconfig/displaydns	顯示DNS cache
nslookup		查詢IP或電腦名稱
netstat -a [電腦名稱] -c		用電腦名稱查IP
netstat -A [IP位址]	用IP查電腦名稱 (比ping的方式更完整)
netstat -s -e		更祥細的網路資料
net user 帳號 / domain	查詢網域內的帳號
net time %logonserver% /set /y	設定網路時間為登入server
net start dnscache	啟用dns cache
net stop dnscache	停用dns cache
net share 	顯示共享資源
sfc / scannow		掃瞄錯誤並復原
mstsc		遠端桌面
devmgmt.msc		裝置管理員
taskmgr	工作管理器
eventvwr	事件檢視器
regedit.exe	註冊表
chkdsk		檢查磁碟
gpupdate/force強制遠端群組更新
exit 退出
Linux常用指令
cat 顯示檔案內容 (cat 檔案或目錄)
cd 改變位置 (cd路徑=前往路徑、cd ..=回到上一層資料夾)
cd前往資料夾 (cd ..回到上一層資料夾)
clear 清除目前的顯示內容
cp復製
exit退出
grep 尋找 (grep 字串 檔案名稱)
grep查詢字串
gzip 檔案壓縮 (壓縮檔案:gzip檔案、解壓縮:gunzip檔案)
history顯示已輸入的歷史記錄
kill 強制關閉程序 (kill PID)
killall 強制關閉程序 (killall程序名稱)
ls 列出目錄中的內容
ls顯示目錄內容
man 求助 (man 指令 (與cmd的/?或help用法相同))
mkdir 建立目錄 (語法:mkdir目錄路徑與資料夾名稱。在Linux的環境架構中未建立指定的資料夾，跑腳本的時侯會因為沒有指定的資料夾而無法順利丟資料，無法像windows執行批次檔一樣強制建立指定的資料夾並丟檔案進去。)
mkdir建立資料夾
mv移動
ps -1顯示此次登入的PID
ps aux顯示所有記憶體中的程序
ps -ef|gerp ssh|grep -v grep查找指定的程序並濾掉自已
ps -ef顯示所有使用中的程序
rm -rf刪除目錄
tail顯示檔案 (tail -f 顯示並寫入)
vim 程式編輯器 (vim 路徑檔案名稱。esc退出編輯模式、:w寫入、:wq寫入後退出、:q!強制退出)
vi文件編輯(esc退出編輯模式、:w寫入、:wq寫入後退出、:q!強制退出，跟linux大同小異...)
PS:
(1).  Putty無法用鍵盤Ctrl C/Ctrl V復製貼上，要改用滑鼠:復製(左鍵選取)、貼上(右鍵)
(2).  在linux環境使用vim編輯文件的時侯，無法使用鍵盤復製貼上，要改用滑鼠呦~
to:逮丸逮丸
目前新手無法回應留言，在此感謝您的回饋資訊~
putty整合linux，在putty使用的指令與linux大同小異，先匯整在一起囉^^",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190759,ModernWeb,2,Nest.jsframework30天初探系列,2,Nestjsframework30天初探:Day02Controllers,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1512514930000000000,889,"
說明: 主要是接收從Client發出的HTTP Request，Controllers作為路由層，商業邏輯盡量別在Controllers裡撰寫，讓Controllers專心處理HTTP Request，接下來我們來實際寫程式。
說明: UsersController是一個帶有裝飾器(Decorator)的類，裝飾器(Decorator)會把metadata連接到controller上，我們定義好了上述/users、/users/:id，但ApplicationModule(根模組)，尚未引用UsersController，程式會完全沒變化，所以要去src/modules/app.module.ts改寫程式碼。
說明: 如此ApplicationModule就知道有UsersController的存在，程式也會去執行它。
postman畫面

說明: 觀察到Console畫面，UserController有load進去、路徑也有map，且Postman的結果會得到200狀態碼，代表Controller已經有被運行成功。

說明: 結果符合預期。
說明: 程式碼精簡許多，適合寫Restful API。

對http://localhost:3000/user 發出GET請求

說明:可以看出來HttpStatus.OK等於200狀態碼。
對http://localhost:3000/user/2 發出GET請求

說明:確認有捕捉到params。
使用Postman，向http://localhost:3000/users 發出POST請求，如下圖:

console顯示如下圖:
說明:接收到POST請求的body。
接著，透過Postman 往http://localhost:3000/users POST 一組資料，如下圖所示。

POST 部分大功告成，可以收到POST過來的參數物件，且已經map到DTO 的class屬性，之後就可以對這組資料做物件操作，console畫面如下。
程式碼在github",,['Controllers'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190779,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,2,02.MicrosoftAzure服務介紹,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1512514652000000000,726,"自己第一次使用 Azure 約在兩年前，起因是某一個專案開發過程中，在陰錯陽差的情況下，沒有伺服器可以提供客戶進行測試，轉而佈署至 Azure Web Application 讓專案順利進行。回想過去研究所時期，實驗室內維護多台伺服器，不但平日需要進行系統安裝、網路設定與硬體汰舊等工作，也讓我們在做研究過程中倍受溫暖 (室內溫度+1~2度)。這種隨用隨付費的服務確實讓我省了些工夫：不需要花費過多心力在維護實體機器上。
這一系列的文章將透過 Azure 服務實作(無論是發佈聊天機器人或使用 Cognitive service )，所以我們需要在這一篇文章將簡單介紹如何註冊與使用 Azure 服務，後續的流程才得以進行。
Step 1. 前往 Microsoft Azure 網站 → 點選我的帳戶

Step 2. 若您第一次使用，可以點選免費帳戶(有免費額度可以使用)；或者你可以選擇使用量與計費開始消費使用Azure。
注：實作過程中，Azure 許多服務可以選擇免費層進行開發與測試

Step 3. 登入您的 Microsoft 帳戶

Step 4. 若您直接購買，必須先行選擇您要的方案，再進入購買畫面填寫資料；若您是免費試用帳戶，會直接進入購買畫面，完成相關資料後即可進行免費額度試用。
註：無論是不是免費試用，皆需要信用卡資訊


Step 5. 接下來我們點選入口網站，進入我們的 Azure 儀表板


Step 6. 您可以透過左邊選單選擇你要的服務，如點選新增，即會出現分類讓您參考。我們在這系列文章中應該會用到 Web Application (for bot) 與 AI + Cognitive service 等服務。

Step 7. 許多服務都有提供免費層使用，對於開發時期相當友善。您可以依據需求決定定價層。
註：理所當然，不同的服務在設定方面都有些許差異
註：後續文章會詳細說明需要使用哪一種服務
註：再一次提醒，若沒有用到的服務務必進行刪除，避免操作失誤產生額外費用

Step 8. 新增服務可以顯示在儀表板上，您可以隨心所欲的拖拉方格，佈置專屬於自己儀表板。

Step 9. 當然您也可以設定你的入口網站

前面幾個步驟簡單介紹如何購買 Azure 服務與簡單操作，第一次使用可能對於某些服務的設定有些疑惑，但大致上不算太困難。若你對於每個服務的費用好奇，可以參考 Azure 價格 。
蠻有趣的，看看吧 :)
How Microsoft Azure helping JYP Entertainment of Twice be famous through
","['前言', '設定']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190675,ModernWeb,0,Confluence線上協同作業之平台系列,1,confluence是什麼,ektrontek,https://ithelp.ithome.com.tw/users/20003705/ironman,1512513717000000000,676,"我大約是在3年多前認識Confluence，就我看到它官網(https://www.atlassian.com/software/confluence)上的定義：Confluence is content collaboration software that changes how modern teams work，第一個反應想到的應該就是它是協同作業平台，主要是要達成team的成員可以透過它來傳遞訊息、交換意見及協同作業。而我想可能有人也會跟我一樣，看到它會想到BLOG，而它也的確有blog的功能，但此功能並不是在我們公司上最大的應用，但是如果一開始要學它，倒是可以用學blog的方式來切入，因為在它建立PAGE(頁面)的主要畫面，就非常像是在寫BLOG一樣，主要輸入內容的地方，一樣會有類似html元件編輯器來讓我們輸入資料，如下畫面所示

在SERVER版本上，它有雲端版及自架主機的方式，但都是要費用的，而使用人數最少是10個人，而它官網上也提供試用版來給大家下載練習，每一次的試用序號可以使用30天(從安裝那一天開始算，當您貼上試用序號後，它會顯示還可以使用29天)，而最多可以連續展延到90天的試用時間 (以一個SERVER ID來看)，也因為它有試用版可以使用，當您要模擬或測試PLUGIN功能的時候，您會覺得試用版很好用。

而因為它主要強調的是在線上的協同作業，例如線上傳遞訊息、編輯OFFICE文件、專案進度的管理、comment評論回覆等，都可以透過外掛PLUGIN的方式來達成，但這些功能並非全然都是免費的，因為它可能是由各家相關的公司來開發類似的功能，而當然您也可以將您所需要的功能反應給confluence原廠，如果這個功能很多人給予comment/feedback的話，其原廠將會把它列入之後版本可能會改善的功能，有些自由軟體的運作方式跟他也有些類似。
而為什麼會選擇這個題目呢？在我的想法中，只要跟網站或系統有關聯的，應該都可以列入屬於Modern Web的範疇內，而雖然我比較少在confluence程式開發的部分(它其實也可以自行開發自己想要的功能plugin，但目前此部分我的領悟力還不足)，而目前我也花比較多的時間來了解它，包含它運作、SERVER架設、升級、功能的研究等，覺得會有較多的分享資訊給大家，也因此選擇此題目來參加今年的ithome鐵人比賽。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190778,自我挑戰組,0,迷路還是繼續往前走的菜鳥工程師日常系列,1,[Day01]未來３０天的文章主題與方向,overflow,https://ithelp.ithome.com.tw/users/20107577/ironman,1512513517000000000,749,"大家好，很高興你點進來看了我第一篇的文章，如果可以沒有意外的話，這30天的30篇文章，主題我沒有特別規劃，自己就草草的大概列了可以湊30篇文章的主題（喂~也太隨便，主要會從我役畢後，開始準備求職、轉職、學習，這一年來的心得，不論是學習了某一項技術或是某一件在職發生事，都會成為我的文章內容。以下大概列幾個主題給大家參考參考
鐵人競賽這個活動，一直覺得自己沾不上邊，畢竟技術性的東西，大家一定都比我厲害，看來看去我可能會的技術主題都已經有前輩寫得很棒了，好啦！因為我也沒信心（汗，但由於受到一些啟發，在加上這一路走來我覺得幫助我最多以及啟發的就是接觸到 六角學院 的課程，幫助我釐清很多我不懂的觀念，我也是從什麼都不會到目前可以進入前端領域就職，所以決定不論自己文筆再爛或是寫的文章會讓人傻眼，還是來分享一下心得，如果你問我為什麼，我一樣會跟你說前輩跟我說過的話「想做，那就做吧！」
最後思考後我選擇了「自我挑戰組」，選擇的主題就大概如同前面所述，分享我這一年來的點點滴滴或許可以幫到或遇到跟我相同問題的人？因為我本身就很喜歡聽別人的經驗談，所以讓大家知道這世界上還有比你更弱的人都願意站出來了！那你願意嗎？(無限內心小劇場)
最後畢竟這是一個神聖厲害的地方，我相信很多工程師都會來這裡看文章，如果之後的故事如有雷同或是很像你認識的誰，我跟你說「純屬巧合，你認錯了」（逃...
很開心我開啟了第一天！希望後面可以持續努力的發廢文來煩大家 ",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190765,自我挑戰組,0,ArasPLM開發練功30天系列,2,[Day2]新增第一個ServerEvent-OnBefore,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1512513343000000000,666,"藉由上一篇建置完成的 Work Order派工單，這一篇我們新增ItemType的Server Event，並稍微理解一下Server Event到底做了些什麼，以及如何撰寫基本的Aras API。
在Aras Innovator中開發只需要在Method的ItemType新增物件，選擇自己的語言後可以開始撰寫，最後存檔並加入至自己的ItemType，或是其他功能上，就可以實現各種邏輯驗證、防呆、資料修正等等。
Method存放位置

Method介面

Aras事件相當多種，在官方11.0 SP9 Programmers Guide.pdf中 4.4.3節說到Server Event可用的事件處理如下清單，用途在於對資料表存取時的動作。
在這裡要注意到Aras的事件有個特色，就是OnBefore與OnAfter的差異，以及On的用途，下方圖解

舉例，當物件資料進行新增時，新增進入資料表Table前會執行一段事件，反之，完成新增後會執行一段事件，而且同一個事件區段內，可能會有多個Method執行。
當有越多Method執行相同邏輯迴圈時，可能要考慮到效能問題，降低Server的負擔。
新增方法

設定Event事件

輸入方法名稱後存檔

開啟方法輸入程式碼後存檔

驗證物件cost值是否在範圍之內
新增一筆資料，並在Cost輸入1001存檔

Cost輸入1001存檔提示錯誤訊息

Cost輸入15存檔完成

修改此筆資料
下一篇介紹 Server Event-OnAfter 以及基本的API使用解說",,"['Aras事件處理-Server Event', '開始實作']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190776,自我挑戰組,0,數位遊牧民族（DigitalNomad）系列,2,第二天-DN城市排行榜,alincode,https://ithelp.ithome.com.tw/users/20092025/ironman,1512513024000000000,714,"DN 大本營在哪呢？
讓我們來看看 DN 城市排行榜：

歐、美洲生活成本太高，又有時區問題，先從 wish list 移除。俗話說擒賊先擒王，那我們的朝聖目標首選，當然就是清邁囉。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190767,自我挑戰組,1,D3.JS網頁視覺化學習系列,2,Day2圖表簡介-直條圖,linonedollar,https://ithelp.ithome.com.tw/users/20107135/ironman,1512512545000000000,727,"一種對數據分布情況的圖形表示，是一種二維統計圖表，
它的兩個坐標分別是統計樣本和該樣本對應的某個屬性的度量。
直條圖，是一種最常見也最容易了解的圖表
使用矩形的長短來表示資料的大小，我們今天以到目前為止的鐵人賽文章數量為例來做一張長條圖
目前統計的數字如上，可能會有點誤差(O
那我們現在就來開始建構長條圖

個人筆記：
整個過程並沒有想像中的簡單，很多的設定都不如我預期所想的樣子，光是環境的設定就有很大的疑惑點，以及一些相關的D3內建的函式用法很多部分都還要再去翻閱技術文件，且思考如何使用。
給自己安排三個小時的時間去下筆時間還是不太夠，很多地方都沒有寫的相當清楚，希望之後透過越來越了解D3之後再補充更多",,['直條圖（英語：Histogram）'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190775,ModernWeb,1,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,2,"打造MessengerExtension-Day2-設定whitelisted_domains,home_url,persistent_menu","AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1512511210000000000,677,"在昨天，我們基本介紹了創建 Messenger Extension 的過程
不過在最後，由於沒有使用真正的 token，我們呼叫 API 是失敗的，今天我們要嘗試使用 token 來設定 home_url

要拿到粉專 token 很簡單，回到昨天 Facebook App 的頁面，點進 「Messenger」 底下的 「Setting」

找到 Token Generation 這個欄位
選擇你剛剛創的粉專，就可以複製 Token 來用了

有了剛剛的 token 之後，我們就可以實際帶進剛剛的 curl 裡面試試

我們可以注意到回傳的結果不太一樣，我們的 token 應該是正確的
這段回傳的訊息告訴我們的是，我們想試著設為 home_url 的網址並沒有在白名單上
如果我們回去看 home_url 的文件 (連結)

可以發現，設定 home_url 時帶的 url 有兩個條件
基本上我們剛剛貼的網址是 HTTPS 的，那應該就是白名單的問題了
點進去剛剛「whitelist」的文件 (連結)
基本上 Messenger Extension 還滿嚴格的
你所有在視窗裡打開的連結都必須要先被白名單過，不然連不進去
基本上設定的方法也很簡單
首先找到官方範例的格式

然後跟之前一樣，使用 Messenger Profile API 來實際做設定
要帶的格式大概會長的像

看來我們已經成功地設定 whitelisted_domains 了
如果想要確認的話，可以使用 Messenger Profile API 的另一個呼叫方法 GET ，來獲得現在已經設定的值 (連結)
使用方法為
curl -X GET ""https://graph.facebook.com/v2.6/me/messenger_profile?fields=<想確認的欄位>&access_token=<粉專TOKEN>""
結果:

這些都處理完後，我們設定 home_url 應該就可以成功了！

(成功設定 home_url 的畫面)
接下來要能在手機版 Messenger，或是 Messenger.com 使用這個 app
一般是在手機版的 Messenger 左下角的 (+) 點開
可以看到不少 app，可是卻沒有剛剛我們創的「Hacker Reader」
這個原因是，要讓你的 app 可以在這個列表出現
Facebook 規定你必須和粉專互動過，讓該粉專獲得跟你對話的權限
這樣才能讓你的 app 顯示
其實詳細過程是有點麻煩的，我們這邊使用一個相較簡單的方式
在你的粉專上加上按鈕
所謂的 persistent_menu 就是現在 facebook 允許你去自訂和粉專互動時出現的按鈕
格式就不贅述了(文件)

(設定格式)
完成後，從網頁版的 Messenger 連上你的粉絲專頁(可以使用搜尋欄來找)
可以看到現在多了一個小小的 menu

點開來後，恭喜你，你已經成功讓你第一個 Messenger Extension 跑起來了！
如果你多測試幾遍的話，你會發現，從 Messenger.com 上打開的網頁竟然是空白的！

打開你的開發者工具後，你可以注意到一則錯誤訊息
Refused to display 'https://news.ycombinator.com/?fb_iframe_origin=https%3A%2F%2Fwww.messenger.com' in a frame because it set 'X-Frame-Options' to 'deny'.
但是，從 iOS 版 Messenger 上打開的 Extension，卻是正常的！

而且到現在，我們還沒辦法點左下角的 icon，就打開 Extension
在明天，我們會花點時間介紹 RFC 6545，也就是常碰到的 CORS 規範
這可以解釋為什麼我們剛剛在瀏覽器打不開這個網址，卻能從 Messenger 打開","['目標', '獲得粉專 token', '實際創建 home_url', '設定白名單', '實際開啟 Messenger 進行測試', '為粉專加上 persistent_menu 按鈕', '但是', '下集']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190774,自我挑戰組,0,資安學習分享系列,2,第二天,abspsp5600,https://ithelp.ithome.com.tw/users/20107449/ironman,1512511003000000000,651,"在網路上瀏覽網站是非常方便的事，
網路能提供我們查詢到很多的知識，
而瀏覽的網頁是否安全也是我們需要注意的，
剛好有看到這一篇文章，
http://ccc.technews.tw/2017/11/27/firefox-cooperate-with-have-i-been-pwned/
文章裡寫到：
Mozilla 正在和 HIBP 合作開發一項新功能，
利用被駭過的網站名單，在連結時跳出題示告訴你，
告知正在瀏覽的網站曾被駭客攻陷，讓使用者知道這個網站的安全性有疑慮。
透過這項功能讓更多人知道哪些網站被駭過，進而給予被駭的網站改善網站安全性的壓力。
希望這功能能夠早日完成，
對於使用者瀏覽網路更有安全感，
也會使那些被駭過的網站，更重視網頁安全，
在瀏覽網路時能更有安全上的保障。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190737,自我挑戰組,0,如何成為工程師?(從工地到前端工程師)系列,2,[Day2]HTML5&SemanticHTML,dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1512509937000000000,743,"在2014從 World Wide Web Consortium (W3C)正式推出HTML5. HTML5添加了很多新的語法特徵, 比如, , . HTML也有增加一些針對排版有更詳細的語法, 比如, , , . 在HTML4 的時候只有div, 導致做好一個layout 結果一大推. 在HTML5就比較不會這個問題了.
Semantic HTML的意思就是比較清楚, 或有意義的HTML. 請看以下的code.
經過這兩個例子可以清楚的看到, 第二個是有標題(header)跟導覽列(nav). 當然在網頁顯示出來, 是沒有差異的. 但是用semantic HTML還會有以下好處.
SEO
雖然code 的架構對我們來說沒有差, 但是對GOOGlE就有了. 如果沒有照最佳實踐(best practice), 你的搜尋排行就不會那麼高. 所以還是乖乖的照規定來, 不要跟Google大, 過意不去.
下載速度
好維護
這個不用多說, 你就想一大推比較好維護 還是, , 
無障礙網頁
對眼睛不方便的人， 他們會有聲音來聽網頁， 那有semantic html 會對他們來說會更有幫助。",,['參考連結'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190768,AI&MachineLearning,0,讓我們一起來見見歐美語音助理界的當紅炸子雞-Alexa吧!系列,2,[Day2]AmazonEcho家族簡介和功用,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512509265000000000,668,"首先來與大家介紹Amazon的Echo家族
以下圖表為Echo設備的比較圖

希望各位能找到屬於適合自己的Echo囉~
不知道各位還記得上一篇有介紹Echo的名稱叫做Alexa。
那麼Alexa能幫我們做什麼呢?

最近有個有趣的新聞就是英國有個家庭，家裡有一隻非洲鸚鵡叫Buddy的，利用主人不在家時模仿主人的聲音，在Amazon買了10塊英鎊的商品。也有一個德州小女孩跟Alexa提出了想要一個娃娃屋和一大箱餅乾的需求，結果意外地買了一堆商品~
以上這些都是Alexa可以幫我們做的事噢，各位有沒有開始感受到她有點厲害了呢?
手邊也沒有Amazon Echo又想要跟它玩一下怎麼辦? 這裡我們介紹一個Alexa技能模擬器，你可以申請一個Amazon的帳號，並點進去跟Alexa聊天一下，相信可以對她更加了解。
點這裡(請用Chrome打開)

跟Alexa模擬器交談時，要用英文噢! 現在還沒有中文版本QQ
明天來做個語音助理們的PK比較大賽，感謝大家收看這集 :)",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190763,自我挑戰組,0,delphi菜鳥入門日記系列,2,delphi菜鳥入門日記-Day2簡單的小元件,getfree84419,https://ithelp.ithome.com.tw/users/20107544/ironman,1512509250000000000,654,"大家好我是Kiang!由於很怕忘記PO文所以今天一下班後，
就趕緊把要PO的東西整理截圖，
希望我在30後還是能保有這種熱情哈哈哈哈
今天要來簡單的講一下幾個很常用到的元件，
Button(觸發事件用)
Edit(資料輸入、顯示資料)
Lable(只是存文字方塊)
但在此之前我們先來建立一個專案吧!!



範例圖^

總而言之先把元件都先拉上來吧!!接著就是寫事件囉!!

這是code畫面，下方頁籤可以切換或者是F12切換

回到設計畫面點選其中一個按鍵，你會看到屬性欄位旁邊的EVENT，點開後再OnClick點擊兩下，
或者在按鍵點擊兩下也可以唷!
然後
在按下F9去執行，或者點擊上方綠色的箭頭，
點擊你剛剛設定的案件就會觸發我們剛剛所打的程式，
接著按下紅色的方形來停止程式運行。
然後把剩下的按鍵事件補齊
大家可以在這段程式碼中看到，我們可以透過這些事件給予其他元件值或是更改他的屬性，
所以在屬性的部分可能要去自行了解它的功能。

然後新增一個Lable和按鍵
大家一定會有疑惑，edit為什麼是用text而lable則是用caption呢?
text是可以給人輸入值的，而caption只是單單顯示標題而已，不能給人輸入值
今天就先到這裡(天冷手指快凍僵了QQ)，可以的話就自己多玩玩看，目前我所寫的程式，
八九不離這些元件，所以能更熟悉他們對未來再做東西會比較順手，
那我們下次見囉!",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190770,ModernWeb,0,PHPlaravel的邂逅系列,2,DAY02-composer安裝教學,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1512508924000000000,769,"DAY02-composer安裝教學
Composer是由Jordi Boggiano和Nils Aderman所開發的一個命令列工具，它的目的就是幫你為項目自動安裝所需要的library。
composer 只能在PHP5.3.2以上的版本執行
首先到Composer的官網下載(安裝內容以mac為主)，終端機操作都在用戶的家目錄底下～(波浪符號)。
step.1 先開啟你的終端機，把下面這段code貼上去按enter
step.2 再接著把下面這段code貼上去按enter
step.3 接著貼下面這段code按enter，會跑個安裝畫面。
step.4 接著貼下面的code按enter
step.5 在終端機中打ls按enter，會看到一個composer.phar的檔案，確認有以後，在打下面的code按enter，會看到一長串的說明，代表你已經快完成了。
step.6 在家目錄底下打ls -al(ls後面要空白)應該會有個.bash_profile的檔案，如果沒有就新增一個，下面指令打完按enter
step.7 進入編輯器後，接著輸入以下的指令，輸入完以後打:wq存檔離開。
step.8 回到家目錄後，接著打入下面的指令按enter，你就完成安裝composer了。
step.9 再輸入下面的指令，如果跑出composer的字樣，就確認安裝完成。
windows 版本
step.1 windows上面終端機建議使用cmder，在終端機打composer會出現錯誤，因為還沒安裝

step.2 到composer官網下載主程式，不用打勾

step.3 預設就可以了

step.4 不用打勾也不用打url，下一步就對了ＸＤＤ

step.5 開始安裝囉

step.6 下一步，快完成囉

step.7 不用打勾，完成囉

step.8 安裝後記得重開機，接著在終端機上面打composer就有東西啦

當laravel的專案建立起來，在目錄中會有composer.json的檔案，
packagist有很多套件可以安裝，你想要手刻功能也可以ＸＤＤ。
安裝單一個library，套件後面沒接版號就會安裝最新版本，有的話就安裝特定版本
更新單個library",,,"['※※※安裝composer之前請先到DAY03安裝xampp，我漏掉了不好意思。', '教學有看不懂的都歡迎留言討論。']",,"['系統要求', '安裝步驟 MAC版本 下面還有windows版']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190769,SoftwareDevelopment,1,每天Racket3分鐘系列,2,"(defineday-01""起手式—Racket安裝與編輯環境"")",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1512508106000000000,643,"今天份量不多，但我們明天就會開始進入程式內容。
Racket 可以說是 Scheme 實作中，生態系最完整的一環。甚至具有相當水準的 IDE 與套件管理機制。因此，我們上 Racket 的網站 可以下載各類平台的完整安裝程式。安裝完畢之後，你會看到新出現一個軟體：DrRacket。
啟動 DrRacket 之後，你會看到這樣的畫面：

上方是編輯程式碼的環境，下方是即時的互動介面（REPL）。如果你是第一次啟動，還需要先設定使用的語言，雖然你可能不知道其他的選項是什麼，但選擇第一項 Racket 就是了！
Racket 除了具有一個完整版的開發環境之外，還有一個迷你版的執行環境，若你只是希望執行它的程式，那麼只需要使用 minimal 版的即可。
當然，在這一系列的操作中，建議你使用完整版的 Racket 安裝，我們會使用 DrRacket 進行開發。因此我們簡短地說明一下 DrRacket 的幾個設定，好讓你在輸入程式時可以更順利。
首先，DrRacket 在輸入括號時，是不會自動補齊結束的右括號的。所以我們需要開啟這項設定：
進入 編輯 -> 首選項 -> 編輯 -> General Editing 可以看到以下畫面：

確定 自動關括號 這一項是有勾選起來的即可。
當然，更進一步設定，你必須安裝 paredit 才行，然而，這是比較進階的工具，建議你先熟悉這個語言與其環境後，再來操作。",,"['1. Racket 與它的編輯環境', '2. mini 版的 Racket', '3. DrRacket 的設定']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190757,自我挑戰組,0,iflen(learning.python)==30:系列,2,Day2-List-宣告,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1512507904000000000,652,"list是sequence type的一種，有可異動(mutable)的特性，雖然可以放不同型態的資料，但通常用來存放同質性(homogeneou)的資料。
可以取出其中某一個資料(indexed)或其中某一段資料(sliced)
以下從宣告、操作、特性、常用方式做個紀錄。
宣告list有幾種手法
list comprehensions類似數學上宣告集合的手法",,"['概觀(Overview)', '宣告(Declaration)', '參考資源']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190766,自我挑戰組,1,30天的切版日記系列,2,Day2:RWD斷點,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1512507635000000000,720,"因為前陣子客戶找了外包的設計公司做網頁設計稿，該設計公司主要是做平面設計的，問起了""這網頁可以用手機看嗎? 現在很多人都用手機瀏覽網頁""，""設計的話像素要怎麼訂呢?""
用了公司常用框架bootstrap斷點來回答, 資料如下:


當時反正大概請他給桌機、平板、手機想要設計成什麼樣的設計稿，心想不就是瀏覽器寬度在哪個範圍就會吃什麼css這類的回答嗎...哪有辦法給個什麼精確的平面設計用的像素...另外，通常設斷點不外乎就是找最常見的解析度來處理，像是iPad、iPhone。
接著，想看看其他人怎麼說，就在google下了這搜尋字眼

就取第一個來看看 Defining Breakpoints | Responsive Web Design ,其中一點，他大概是說響應式網站該由手機版出發，從最小寬度開始設計，不斷擴大直到你開始覺得醜了就是一個斷點了，用這個方法好處是，一開始就能在小寬度思考什麼是網頁中最重要的內容。
不過實務上，比較常先從pc開始做，且大多數客戶通常是喜歡網頁豐富、內容繁多，甚至有可能之後還想加東西，要討論出什麼是最重要的內容......嗯...都很重要，但這就是另一個問題了。
做個簡單的整理：",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190764,自我挑戰組,0,軟體工程漫談系列,2,打孔機與現代方法,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1512507397000000000,685,"筆者雖然是個年輕人(心虛)，但也聽師長說過，在很早很早的年代，寫出一段程式要debug有多麼的困難。在那個年代，寫出一段程式，要使用打孔機，很像現在大考依然常用的那種電腦閱卷卡，到計中排隊submit，過段時間去領結果，萬一錯了，就再拿張紙，修正錯誤後再去提交，再等結果...，一直到結果正確為止。

你可以想像，在那樣的年代，事前做好完整的規畫有多麼的重要！你也許需要把所有流程完整的畫出來，何時if，else時要幹啥，你甚至連print出變數內容來debug都要事前規劃，並且考慮再三。這也就難怪我們讀書時，老師們都會叫我們一定要經過充分完整規畫後再動手寫程式了。
我必須要先說，這樣的習慣是非常好的。有了好的規劃，可以檢哨走歪路的機會，也可以幫助程式設計員釐清思路與邏輯。然而，當你的產品越長越大，大到了單一專案再也容納不下，一個人也無法獨力完成時，你要怎麼辦？你還是能像以前那樣做出完整又細節的規劃嗎？以現代軟體發展的速度，也許當你規劃完，商機已經失去，那你也不用真的實作了。
現代的軟體開發，探索式的功能開發，成本已經大大降低。git幫助你錯誤時及時回頭，CI工具幫助你隨時做好完整測試與上版準備，容器技術幫助你隨時在任何環境架設一模一樣的新服務。當然，規劃還是得規劃的，但是，有需要到每個case每個邏輯轉折都要想通才能動工嗎？那倒未必...
敏捷開發，以scrum為例，有規律週期性的產出、檢討、與方向調整的過程。我們每個sprint只做目前最重要的幾件事，同時為其做出邏輯規劃，也只規畫這些，未來的功能，我們等需求更明朗時再作決定即可。同時，當有一個新功能或是新技術，你不確定是否要真的投入大量心力去實現時，你也可以花一個sprint的時間研究或是做一個prototype來看看成果如何。
敏捷流程不是快，是有彈性。我們每一到兩周就會檢討並調整方向與內容，同時產生出一個幾乎可以直接上線的商品。在這強敵環伺，弱肉強食的激烈市場，您有什麼理由不接受敏捷開發流程？",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190755,DataTechnology,0,Python學習筆記系列,2,[Day2]Python的整合式開發環境(IDE)選擇,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512503618000000000,742,"當我們裝完Anaconda Python大補包後在哪些地方可以執行Python程式呢? 有好幾個方式可以去執行它，像是用命令提示視窗(CMD)、Anaconda Command Prompt、PyCharm、Spyder、Jupyter Notebook等。
以下的範例秀出如何在Anaconda Command Prompt裡執行python。
1.	先打開Anaconda Command Prompt，然後輸入python
2.	在>>>後面寫下print(‘hello there’)
3.	要離開python僅需打""quit()""即可結束

如果一開始沒先打python，Anaconda Command Prompt就無法執行python的指令

如果你一次想跑好幾行code，那麼文字編輯器將是一個很好用的工具，你可以用""Notepad""，不過也可以使用更好的文字編輯器，像是Notepad++, Sublime Text。
1.	將你想跑的code打在文字編輯器裡面

2.	當你要儲存檔案時，將檔案類型改為”所有檔案類型” 並儲存成”xxx.py” 然後找一個路徑儲存檔案

3.	最後，在Anaconda Command Prompt裡打 ""python xxx.py""執行程式

以上的範例可以執行Python程式，不過，有更好的方式。
Jupyter支援R、Python、Ruby、Scala等程式，是一個很棒的選擇。
Jupyter Notebook是一個對Python初學者而言很棒的地方，可以輕易地在Jupyter Notebook分享code。在處理資料科學、資料分析、專案分析等效果也很好。
然而，如果你想處理大量資料，""PyCharm"" 將會是更好的選擇，Jupyter Notebook無法處理大量資料。
明天就來談談Jupyter Notebook的python環境~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190756,DataTechnology,0,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",2,Day2-HadoopEcosystem之Hadoop介紹,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1512503143000000000,709,"Hadoop 是一個集儲存、運算、資源管理於一身的分散式 Big Data 處理平臺，分別為三大模組提供服務：
HDFS為 Hadoop Distributed File System 的縮寫，分散式檔案系統。
大家可以想像一下，有一個超大檔案容量為1TB，該台機器的硬碟大小只剩下500GB，該如何把這檔案儲存起來？
如果只是單純儲存，以上的方法的確是選項之一，但若主機的硬碟已經無法再擴充時，這時候就頭大了！
一般而言現行的儲存架構會考量故碟故障發生時，降低損害資料的完整性，通常會使用磁碟陣列 (RAID)，但是在容量擴充上就受到限制。
使用HDFS就可以輕易的解決上面的問題。HDFS是個可擴充(scalable)且可靠(reliable)的分散式檔案系統，由一台NameNode與至少一台的DataNode所組成。
儲存檔案到HDFS前，檔案會被拆開成數等分小區塊，稱之block，並且會將同一個block複製成數等分(replication, 預設值是3份)再將這些block分散儲存到各個DataNode，同時會產生一份清單，記載著這份檔案所屬的block與散落在哪幾台DataNode，這份清單會被記錄在NameNode上，而相同的block不會同時存在於同一個DataNode上。當某個Hadoop client需要讀取這個檔案時，會先跟NameNode發出請求，NameNode會根據這份清單回覆檔案的block位於哪幾台DataNode，Hadoop client再根據這份清單將各個block讀取出來，還原成一個完整個檔案。
由以上的流程可以了解NameNode與DataNode的用途：
用圖書館的藏書來比喻，如果有一種藏書機制，新進一本書要加入館藏時，會先將這本書拆成10份後再拿去影印成3份（這例子只是比喻，未必與實際案例相同，最後請注重智慧財產權），最後在館藏筆記本內紀錄這30份的內容分別放在哪些書櫃，而且相同的部分不可放在同一個書櫃上。如果要查詢某本書，就要先到館藏筆記本查詢書本的block位於哪個書櫃，載到個書櫃把block取出組成一本完整的書。
在上述的例子中，書櫃的角色等同於DataNode，館藏筆記本等同於NameNode，當某個書櫃已經無法裝任何書時，只要再新增一個書櫃就可以繼續裝書，也不用重新整理舊書櫃的書或是重新歸檔。假若不幸某個書櫃都被白蟻吃光，書本資料可以由其他的影印的副本還原成一本完整的書籍。新增書櫃就是一種可擴充性(scalable)，而副本機制就是可靠性(reliable)。

From:https://hadoop.apache.org/docs/r2.8.2/hadoop-project-dist/hadoop-hdfs/images/hdfsarchitecture.png
Yarn為 Yet Another Resource Negotiator 的縮寫，是一個資源管理系統，用來管理各種分散式運算應用程式所使用的資源，在Hadoop平台上執行MapReduce的應用程式，必須藉由Yarn監控與分配資源來確保Job可正常運作完畢。
Yarn主要由兩大service組成：
每個Hadoop叢集內具有一個ResourceManager，與一台或以上的NodeManager，數量預設會與DataNode相同。ResourceManager主要是用來管理與裁決Hadoop叢集內資源的使用權，而NodeManager是負責監控Hadoop叢集內每台機器的資源使用情況，例如memory, cpu, disk, network等，並且將資訊回報給ResourceManager。
當某個分散式運算的Job/Application 被submit至Yarn上面運行時，這個Job/Application會被拆成數個tasks並且產生一個ApplicationMaster (AM)，AM會負責與ResourceManager請求需要運算的資源，這時候ResourceManager會根據NodeManager回報的消息，告知AM哪幾台機器有空閑的資源可以使用，此時這些tasks會以一種抽象的資源概念:Container 被分配到這些機器上進行運算。

From:https://hadoop.apache.org/docs/r2.8.2/hadoop-yarn/hadoop-yarn-site/yarn_architecture.gif
MapReduce是用來在撰寫分散式計算大量資料的 framework，主要分為Map與Reduce兩個步驟。Map工作階段會把需要運算的資料拆分為多個獨立區塊(chunk)，平行運算完後第一階段的運算結果儲存於檔案系統上(通常會是在HDFS內)，進入Reduce階段會把Map運算的結果進行第二次的運算，運算出最後的結果。並非所有的MapReduce都會經歷過Map與Reduce這兩階段的步驟，有些Job只有Map，而有些只有Reduce，端看運算的邏輯為何。
由於MapReduce所有運算的過程都會讀寫檔案，運算效能相較之下就比較慢。運算的功能慢慢的被後起之秀Apache Spark所取代，但目前並非所有的運算情景都可使用Spark執行，故MapReduce還有其存在的價值！
介紹完了Hadoop後，下一篇接著要來介紹如何安裝Hadoop囉！",,"['HDFS', 'Yarn', 'MapReduce', '最後']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190754,DataTechnology,0,職場老鳥的資料科學初體驗-R語言專案實作紀錄系列,1,(Day1)開工前的MurMur,Kimi0,https://ithelp.ithome.com.tw/users/20107033/ironman,1512500535000000000,760,"有鑑於近年熱門的資料科學熱潮持續發燒，與其擔心被邊緣化與環境淘汰，職場老鳥也不得不調整步調與心態，主動出擊，重新下海學習全新知識。也利用這平台給自己點小壓力，能持續堅持30天的發文，並且試圖留下一些努力的軌跡與紀錄。
回到正題，本文將以R語言直接實作一個簡易專案，用以粗淺的理解R語言開發與在資料科學的應用。
相關說明如下。
以公共政策網路參與平台，進行人事時地物相關資料的搜集
誤按發文的第一天就先這樣囉。","['專案實作的方向: (預計也是文章安排的順序)', '開發軟硬體環境:']","['1. 資料蒐集:用R爬出所需資料', '2. 文字探勘:分析最常被使用的關鍵字。', '3. 資料清理/資料整理', '4. 資料視覺化: 根據前述資料，以視覺化效果呈現結果。']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190751,ModernWeb,0,改良版JS30系列,1,Day1.JSDrumKit,raindot,https://ithelp.ithome.com.tw/users/20107375/ironman,1512493605000000000,720,"Demo:
https://raindot.github.io/Javascript30/01-JavaScriptDrumKit/myindex.html
把Event Listener掛在window上
按下按鍵時會執行的動作
讓按下去發光的效果隨著放開鍵盤(結束事件)而消失，達成閃一下的效果",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190685,ModernWeb,2,重新認識JavaScript系列,2,重新認識JavaScript:Day02JavaScript簡介,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1512492913000000000,1202,"JavaScript 是一門既簡單又複雜的程式語言，為什麼這麼說呢，簡單是因為它容易上手，打開編輯器敲敲鍵盤，到瀏覽器一刷新頁面，馬上就可以看到結果了; 說它複雜，是因為若是想要真正掌握這門語言的特性 (a.k.a 坑) ，不花時間研究是不可能的。
想要真正掌握 JavaScript，也許該從這門語言如何從最初的表單基本驗證器，發展至今成為 Web 領域不可或缺的存在，也許可以從它的歷史去理解這門語言的沿革與發展。
豆知識：JavaScript 昨天 (12/04) 剛過 22 歲生日!
http://tech-insider.org/java/research/1995/1204.html
早期那個 Web 還沒有 JavaScript 的年代，大部分的使用者都還在透過 28.8 kbit/s 的速率上網，但網頁的內容與複雜度日漸增加。那個時期，網頁的表單驗證完全依賴伺服器端的語言來驗證，如果只是打錯字，送出檢查後再被踢回來，來來回回也許就要花掉幾分鐘。
於是，Netscape (網景公司，當時知名瀏覽器廠商) 就決定著手開發一門在瀏覽器上執行的語言系統，專門用來處理這類簡單的驗證。這門語言就是 JavaScript 的前身，由 Brendan Eich 負責設計實作，據說第一個版本只花了十天時間。
最初的版本 (netscape2.0 beta1) 並沒有 <script> 標籤的設定，而是在表單元素中插入 onclick 的形式：
這類現今仍可執行的 inline-script 方式，直到 beta2 開始才加入了 <script> 標籤的設定。
JavaScript 1.0 的設計目標，說穿了就是「讓網頁動起來」，最主要目的是讓網頁的元素可以透過程式語言來操作它們。所以像是表單之類的元素，如果你給它一個「id」屬性，那麼在網頁解析完成之後，它就會變成一個全域變數了：
像上面這段 code，直到今日依然可以執行，而且完全相容，所以說因為 HTML 內的 id 屬性具有唯一性，且會自動變成全域變數，好處是 selector 的效率極佳，但請慎重使用。
這門剛誕生的程式語言，最初的名字其實並不是 JavaScript。
最初這個語言的專案名稱被取名叫「Mocha」，後來 Netscape 宣布要在 LiveWire (伺服器端環境) 啟用某個程式語言，於是這門程式語言就被叫做「LiveScript」，也就是我們後來所熟知的「JavaScript」。
但有趣的是，早在命名叫「LiveScript」之前，由於當時 Netscape 與 Sun (昇陽) 合作密切，且新誕生的這門程式語言其實有不少特性是由當時很火紅的 Java 借鑑而來，基於行銷考量，當時的 Netscape 高層其實早已決定要把這門語言命名叫「JavaScript」，但卻不小心把「LiveScript」這個開發者內部所訂定的名字公開了。直到同年 12 月，Netscape 與 Sun 發布聲明，正式啟用了「JavaScript」這個名字，就此沿用至今。
所以，Java 跟 JavaScript 到底有沒有關係？
大概就像是「臘腸」跟「臘腸狗」的關係吧，只是兩者的樣子有「一點點」類似，就把名字借來用了。
由於 JavaScript 的發行獲得了成功，使得微軟在 1996 年發布 IE 3.0 的時候，也開始加入了腳本語言的支援，分別是 VBScript 與 JScript。
VBScript 是微軟自家開發的腳本型程式語言，可以把它看作是 VB 語言的簡化版，長久以來都只有 IE 可以執行，但自 IE11 起已不再支援 VBScript 了。
而 JScript 雖然同樣是由微軟自家開發，類似於 JavaScript。
早期的 JScript 可以當作是微軟想要與 Netscape 的 JavaScript 打對台的產品，但考量到相容性與市場 (開發者不會願意為不同的瀏覽器寫好幾份 code，而當時 Netscape 市佔比 IE 高)，於是微軟、網景雙方(就網頁標準上)漸漸靠攏。
所以早期 如果你有看過類似網站建置百寶箱之類的網站 你可能會看到 <script language=""javascript""> 與 <script language=""jscript""> 不同版本，但現在 <script> 其實都無需再加入 language 屬性。
由於 Netscape 在 1996 年對 JavaScript 提出了標準化，第一個標準化版本 ECMA-262 在 1997 年就此誕生，也因為 Java 名稱上具有商標問題，ECMA-262 採用了 ECMAScript 作為語言名稱，JavaScript 此後成為了 ECMA-262 標準的實作語言，也變成瀏覽器唯一指定內建程式語言。

至於微軟與網景的第一次瀏覽器大戰，與網景的沒落又是後話了
註：實際上在 IE 執行的 JavaScript 仍為 JScript，只是實作上依循 ECMAScript 標準。
註2：網站建置百寶箱 ( http://dob.tnc.edu.tw ) 現今已關站，算是我孩童時代的啟蒙網站之一。

網站建置百寶箱

剛剛提到 ECMAScript 是 Javascript 的標準，換成通俗點的說法，ECMA-262 標準是規格書，而 JavaScript、JScript 這類語言，就是依循這份規格書所實作出來的產品了。
ECMA-262 標準在 1997 年提出第一個版本，而目前最廣為人知的應該是 1999 年底所提出的 ECMA-262 第三版，現在的瀏覽器，幾乎都能支援這個版本，又稱 ECMAScript 3，對應的實作為 JavaScript 1.5。
由於各方對 ECMAScript 第四版意見發生嚴重分岐，後來決定終止開發，只針對原有規範中一小部份的現有功能作改進，並發布為 ECMAScript 3.1，後來乾脆改名為 ECMAScript 5。
而那些爭議與比較激進的功能，則被加入一個叫 Harmony (和諧) 的專案中之後再議。
看來老外也挺懂和諧之道
2009 年 ECMAScript 5 正式發佈。
代號 Harmony 的專案被一分為二，將可行性較高的部分定名為「ES Next」繼續開發，後來演變成現在的 ECMAScript 6。 而另一個部分則定為「ES Next」的 next ，也許在未來的某天會有機會實作加入標準。
自 ECMAScript 6 開始，負責制定 ECMAScript 標準的委員會 (TC39) 決定將新標準改為一年一修。因此包括 ES6 開始往後的版本都會定為 ECMAScript 2015 (ES6)、ECMAScript 2016、ECMAScript 2017 持續下去。
目前最新的版本是 ECMAScript 2017，在 2017 年的六月發佈。
註：已知唯一將 ECMAScript 第四版草案實作的程式語言是 Adobe 的 ActionScript 3.0。
註2：關於 ECMAScript v4 的八卦其實還滿精彩的，有機會也許可以寫一篇聊聊
講古時間就到此為止，下一篇開始正式來介紹 Javascript 基礎 (1): 「變數、型別、值與運算子」。",,"['JavaScript 的誕生與設計目標', 'JavaScript 的名字由來', '為何成為瀏覽器唯一指定內建程式語言？', 'ECMAScript 與 JavaScript 的關係']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190752,自我挑戰組,0,台灣動漫創作平台開發實錄系列,1,Day1.相似網站功能彙整,raindot,https://ithelp.ithome.com.tw/users/20107375/ironman,1512492233000000000,714,"知己知彼，百戰百勝，先大略列出臺、日、大陸三地的代表性創作平台的首頁功能，已歸納本站所需的功能
參考對象：Pixiv、二維秀、半次元
初期功能規劃：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190718,ModernWeb,0,30天串接30個GoogleAPIs的服務應用系列,2,[day2]-創造自己的地圖服務應用，GoogleMapsAPI的概念篇,KingTzeng,https://ithelp.ithome.com.tw/users/20103130/ironman,1512491735000000000,911,"因為在工作上需要撰寫一些與地圖相關的應用（詳情請看上一篇的結尾XD，
所以學會了大量的Google Map的各種應用方法，此篇主要講述申請API KEY的流程與Map基本的串接應用
就搬張板凳坐下來慢慢看吧～
首先我們要先到 https://developers.google.com/maps/
選擇我們需要什麼平台的api，做申請api key的動作～
如果用錯了api key服務就會起不來，啟用api key扮演重要的角色，這邊需要注意一下～
那我們這次就選擇用Web來作開發，所以在頁面選擇Web後，Google會讓你選擇需要的相關API集～
個人我是用JS在做開發故選擇Google Maps JavaScript API


今天的目標～先把基本的地圖先做出來就好，選擇任一個範例，就不截圖囉XD（好懶XD
我是選擇新增含標記的 Google 地圖到您的網站的這個範例
因為是最基本的，所以Google其實也寫的蠻仔細的～step by step教你從零到有一個地圖出來
那程式要好基本功要打好，我也再做一次放上來給大家鞭一下XD

有些範例要到英文版的MAP的頁面去看，應用與講解的比較多（經驗談~
由於Google教的蠻仔細了，我說一些比較需要注意的！可以搭配Google範例一起觀看～
1.&2.建立HTML頁面並嵌入JS
直接看第二步的程式碼
需要注意的有
CSS一定要給地圖一個寬度和高度，不然他會不知道要給你多大張的地圖~
html裡，<div id=""map""></div>是必要的元素！
<script async defer src=""https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap""> </script>
一定要掛載於你要讓地圖出現的頁面中！並置入你申請回來的API Key也就是金鑰！(稍候解說)
initMap()函式代表初始化地圖，地圖在初始化的過程中一定要給一組經緯度，讓他來作初始化的動作！
掛載的JS裡有一個函數callback=initMap，原理是他先去請求你的API Key也就是金鑰
因為想講解很多東西，結果講不完....(被打)
同步刊登於King 學習前端之人生
[ 著作權為King Tzeng所有，請勿抄襲或致敬＝口＝]",,"['開始講述一些Google Maps APIs的串接應用', '文後 -']",['平台先以Web來作示範'],"['來圖解一下頁面', '那就不廢話了XD，開始實作', '以上幾個概念和該注意的事項，和大家分享～', '今天先這樣斷尾好了，本來想實作一個地圖的，發現我好碎念喔XD']",,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190727,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,2,Sinatra與Rails比較,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1512491226000000000,839,"網路上介紹Sinatra與比較兩者之間的文章並不少見，但作為系列文這部分的基礎介紹不能省。
說來慚愧，我寫了rails將近兩年，還是為了這次鐵人賽蒐集資料才發現Sinatra，可說是發現的非常之晚。大部份網路上的中文資料都出產在2012年左右，如果你跟我一樣之前沒聽過Sinatra，現在讓你看看：
所有第一次接觸的人，想必都會對這點印象深刻（事實上還可以更短）。
首先在環境內安裝Sinatra這個gem
接著建立一個檔案，假設你用vim
然後貼上下面的程式碼，儲存退出:wq
接著在command line執行這個檔案
沒錯！見證奇蹟的時刻，當你用瀏覽器訪問 http://localhost:4567 時，就會發現一個簡易的伺服器已經跑起來了。
扣除掉命令不算，檔案本身是不是剛好四行呢？
事實上如果我們利用ruby block的特性，還可以改寫如下：
這樣的話只有兩行！（好啦其實差別不大）
雖然伺服器是跑起來了，但光是這樣沒辦法滿足任何需求
所以接下來介紹一些實務常用的搭配
ruby專案無可避免地會用到其他gem，為了讓gem更好管理
所以bundler是不可或缺的
首先在環境中安裝bundler
接著在目錄內新增一個檔案命名為Gemfile
完成後執行bundle install，就會將所有Gem一次安裝
看到這邊，熟悉Rails的朋友應該會覺得相當眼熟
因為bundler是rails內建的gem，而且還會預先產生Gemfile
光是從這一點上，就可以觀察出Rails與Sinatra設計理念上的差異：
如果七成的專案都有這個需求，那我假設你也會有這個需求（設計對白）
彷彿可以聽到Rails設計團隊這樣宣示，但根據rails的設計理念「慣例重於設定」
其實是可以推導出這樣的精神
不僅是如此，當最佳實踐出現的同時，也會被收錄在新版的Rails當中
也就是跟著rails的更新走，就是跟著技術趨勢
這對開發者而言，自然是省去了大量的時間，也指引了方向
但是假如你對預設的內容不滿意，當然也有很大的自由度去調整
比方說幾乎沒有人用的內建test測試，大家都習慣性地使用rspec
或許在未來的某個版本，會將rspec改為預設
這就是rails的風格
只有開發者自己最懂得專案的需要（設計對白）
Sinatra只提供將伺服器跑起來的最低標準
除此之外，都讓開發者可以自由選擇，好處是擁有極高的自由度
壞處就是需要設定安裝所有需要的元件
而且需要做好功課，選擇什麼才好（相較於rails預先幫你選擇）
如果你對專案的需求掌握度很高，相當確定只會用到少數的功能
那或許Sinatra是可以考慮的選擇
但為了達成現代網站架構的標準而安裝一個又一個Gem以後
我懷疑這樣的專案與Rails其實相去不遠
說到底框架沒有絕對的好壞，只有合適的使用情境與開發風格
了解不同的工具，是為了在情境來臨時有選項可供選擇
參考連結：
http://www.infoq.com/cn/articles/sinatra-intro
https://ithelp.ithome.com.tw/articles/10102707","['四行完成一個伺服器', 'Bundler']","['Rails 最佳實踐的懶人包', 'Sinatra 極簡風格的自助餐']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190619,ModernWeb,3,Next.js+各種套件組合系列,2,Next.js&Server,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512490779000000000,931,"安裝設定介紹
Next.js 在 Node 環境下安裝 react react-dom 以及 next 就可已開始使用了
接下來設定 package.json檔案
以上重點是在scipts的部分 直接執行 npm run dev 就可以在 localhost:3000 啟動 Next.js 專案
npm run start 是給 Production 發佈用 執行前先跑 npm run build
一般在DEV開發階段的時候會有 Hot Module Replacement (HMR) 只要在程式碼有變更就會自動幫你動更新網頁但是在產品發佈的時候就不需要這個功能
製作一個起手式
Next.js 為約定目錄所以開發時起始位置是在 pages 的這個目錄
在pages目錄下新增一個 index.js檔案
寫好後就CLI下執行 npm run dev 網址打上 localhost:3000 看到第一個Next.js網頁了，在檢視網頁模式下也可以看到HMR模式

這時候可以在剛剛的index.js 檔案中改文字後再存檔，會發現到馬上同步更新，之前要做到這樣HMR就要設定滿多的，這個部分Next.js都幫你完成了
接下來做一個分頁來熟習一下 PAGES 感受一下目錄(File-Systme即Route)，另外也在pages層下開一個about.js檔案
並在 index.js 也加上 (注意新版的NEXT建議在link中再放一個 a tag標籤)
這樣就完成了頁面 Route 的切換了 ,另外值得一提的是這個Link元件有個不錯的功能 就是 prefetch 只要加上這個關鍵字,就會同時幫你把 about 的頁面也順便預先加載,到時候在切換頁面的時候會增加Ux使用者體驗
另外有時候情境是在 Function 中去切換 Route 也想要有預先加載的功能的時候就使用
import Router from 'next/router' 配合 Router.prefetch 使用
以上是起手式 接下來進入 With Server 的部分
Next.js 可以搭配許多 不同的 Server 目前官方範例有 Koa Express Fastify Hapi Micro Nodemon 也可以客製化 Custom Server  ，套用方法都大同小異，這裡使用EXPRESS來說明
修改一下 package.json 檔案
在根目錄設定一隻server.js的檔案
所有Server套用範例都差不多,例如上方範例 Express 都包在這個 NEXT 提供的APP裡面
const app = next({ dev })之中，其他 Route 設定 Middlewave 的設定方式都跟原先的使用方式一樣
如果沒有其他特定指定的 Router 要做的工作事項，前後端同步SSR基本會在 server.get('*', (req, res) 這個ROUTER完成
這邊也會透過getRequestHandler 這個方法把 req ,res 跟前端 static getinitialprops 做同步溝通
另外 Server 部分如果要把 Routers 分散管理 以下面範例為例可以使用next-routes
routes.js
Routers 的部分要記得加上  routes.getRequestHandler(app) 並使用 use  加上Middleware
配合前端的 Router 元件使用:
route - 顯示目前的位置
pathname - 要前往連結的位置
query - 傳參數用,預設值{}
asPath - 瀏覽器實際顯示的路徑但非實際連結位置
push(url, as=url) - 執行呼叫
好了直接在CLI底下 npm run dev 開心的跑起一個喜歡的 Server 吧
總結
Next.js 大大降低了設定的入門門檻，但有些流程跟一般的React多了 getinitialprops 的部分要特別去理解
Server 部分 大同小異 模式都是一樣 都會用next({dev})包起來再透過 handle 傳送 其他寫作方式就跟用什麼框架的 Server 照原先的方法撰寫即可 特別注意的是 handle , server.get('*', (req, res) 要記得使用當預設",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190746,ModernWeb,1,三十哩路，我的前端學習路程系列,2,Day02::方便又好用的SCSS,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1512490752000000000,805,"SCSS是個能用更有效率的方法來編寫CSS的程式語言
語法跟CSS大同小異，但是比CSS來得好寫且更容易閱讀
個人覺得這兩者最明顯的差異在於
SCSS用大括號跟分號來區分段落
SASS則是使用排縮跟斷行來區分
兩者並沒有好壞之分，只有使用的順不順手而已
像我先用過SASS之後在使用SCSS就回不去了…
兩者都使用過後覺得SCSS比較順手，因為SCSS更貼近原本在寫的CSS
(不使用SASS的主要原因是因為他的縮排真的太刁了⋯⋯)
愛上SCSS的主要功能之一，這個功能可以大幅減少編寫重複的開頭
透過巢狀式的結構也可以清楚的知道元素上下層的關聯性。
編譯成CSS就會變成
這個功能也可以使用在相同的屬性上面
還有一個方便的功能是使用 & 符號來代替父層
$ 來表示變數
變數可以用來儲存值，方便重複利用
變數也能拿來做運算
函式可以使用在重複多行的樣式上面，像是CSS的一些新屬性就可能需要加上瀏覽器前綴，這個部分就可以透過函式來完成
要特別注意的是@mixin需要配合@include來使用
@mixin來設定要使用的樣式、@include則是套用樣式
函式也可以搭配參數使用讓使用上更加靈活。
在檔案中加入其他SCSS或CSS檔案，最後編譯時會一併編譯。
假如我想在某個SCSS檔案裡面匯入head、main、footer等scss的檔案就可以使用下面這段程式碼
@extend主要是用在合併相同程式碼，假如有很多段相同的程式碼
就可以使用@extend進行合併
只要加上站位符號 % 就能讓被繼承的CSS類消失
SCSS中也有@function可以使用，像是@if、@for
不過我還不太熟這些...
有興趣的朋友可以查看內建函式的清單
只要在程式碼開頭加上兩條斜線//就可以加入註解。",,"['什麼是SCSS', 'SASS跟SCSS差別在那?', '巢狀(Nesting)', '變數(Variables)', '混入(Mixins)', '引入、匯入(Import)', '繼承(Extend)', '函式(Functions)', '註解(Comment)']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190731,ModernWeb,0,TypeScript初學之路系列,2,Day02-Variable,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512483863000000000,726,"每一種程式語言的第一步都是從宣告變數開始
但是 TypeScript 其實最後編譯結果還是 Javascript
我們還是以 Javascript 的宣告變數基礎來談談
而類型控制之後再說吧
let 和 const 是兩種 Javascript 新的宣告方式， let 和 var 比較類似
const 則是定義之後禁止之後修改(常數)
TypeScript 也有提供 let 和 const 的宣告方式，下個部分將會解釋為什麼會推薦使用 let 和 const
在 Javascript 中宣告一個變數常用的方式是
在上面的例子之中，你宣告了一個變數 a 為 10
你也可以再 Function 中宣告
也可以允許相同的變數在不同的 Function scope
在上方的範例中 g() 中可以取得變數 a 得值
使用 var 宣告會有一些區域的規則問題
因為 var 是在 if裡面，所以當 shouldInitialize 是 false 的話就部會執行 if裡面的程式碼
所以 x 並未宣告過，就會造成 undefined
而結果是 undefined 的原因是 Javascript 的特性
當 Javascript 執行程式之前會先將所有使用的變數宣告為 undefined
來佔住記憶體空間
如上述範例中 真正在 Javascript 執行的結果應該是
所以當我們在宣告 f 之前執行的話就會得到一個錯誤訊息
f is undefined not a  funciton
這個規則可能會造成壹些不同種類型的錯誤，其中一種就是當你重複宣告同樣名稱的變數的時候彼此會互相覆蓋
上述範例就可以發現因為 i 變數在雙迴圈中會被互相覆蓋造成程式執行上的錯誤，不會依據我們預想的去執行
但是結過卻是
但是我們希望的是
因為每次呼叫 setTimeout 會延遲一段時間後才開始執行 Function但是迴圈會不斷覆蓋掉 i 這個變數，而在延遲時間之後呼叫到的 i 則是最後覆蓋成 10 的 i
最常見要解決這件事情的方式如下
這個看起來有點奇怪的解決方式在 javascript 中卻是常見解決這個問題的方式
現在你已經知道 var 會有一些問題，所以會有一些問題，所以為什麼需要介紹 let.let 和 var 的使用方式依樣
使用 let 宣告的時候，它的作用域市 blocking-scope。和 var 宣告的作用域不一樣，他是用大括號來做區隔
上述範例中有 a 和 b 兩個變數， a 的變數範圍在整個 f() Function 之中，而 b 只會存在 if之中
而變數使用 try catch 宣告的範例如下
另外一個很重要的 blocking-scope 變數不能在宣告之前做任何動作
在 TypeScript 中對這樣的提前宣告較為寬鬆，你需要使用 try catch 來取得錯誤訊息
若是沒有使用 try catch TypeScrtip 並不會顯示這個訊息，若是在 ES2015 則會顯示這個錯誤訊息
若是使用 var 的方式來宣告的話，他不會在意你宣告過幾次
使用 let 宣告在同一個 scope 中只能宣告一次
只要是在不同的 blocking-scope 就可以做同名的宣告
宣告一個新的名稱在另外一個內嵌的 block-scoping 這個行為叫做 shadowing，但是這樣的行為會造成一些 bugs
例如：
shadowing 在攥寫程式碼的時候應該要避免的狀況之一
當我們在一個作用域中宣告一個變數與 Function ，而 Function 也是其中一個作用域，在這個 Function 使用已宣告的變數的時候，即使脫離了那個作用域，也是依舊可以使用該變數
因為 city 雖然是在 if 的作用域宣告的，但是可以透過 Function 記住他的指標即使脫離作用域之後也可以透過該 Function 做呼叫使用
回憶之前 setTimeout 的範例， let 有相當大程度的不同
結果為
const 是另外一種不同的宣告
雖然看起來跟 let 宣告一樣，雖然他們有相同的 block-scoping 規則，但是還是有些不同
const 宣告的變數是 immutable 的
除非你要整個複寫整個物件，否則還是可以修改參數值得，
也就是此物件性質為 唯讀 的，詳情參閱
為什麼需要兩個不同的語意卻擁有相同的 block-scoping 的宣告方式呢？
基於 最小權限原則
若之後變數都不需要修改或是物件僅僅提供修改參數的權限時，則使用 const，換句話說若是變數之後有可能會被覆寫則使用 let 來宣告",['變數'],['宣告變數'],"['Var 宣告', '為什麼不要使用 Var', '奇怪的問題', 'Const 和 Let', 'Block-scoped variable capturing', 'let vs. const']","['Hoisting', 'let', 'const']","['Block-scoping', '重複宣告和 shadowing']",,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190728,DevOps,2,用30天來介紹和使用Docker系列,2,Day2：認識Docker基本概念,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1512483074000000000,932,"在使用 Docker 之前需要先簡單的了解一些基本的概念，這樣會比較容易上手。
今天就來介紹 Docker的底層實作技術、Docker的系統架構、一些常看到的名詞，這幾個部份。
一. Docker 底層實作技術
Docker 的底層是使用 Linux Kernel的 Namespace 和 Cgroup 組合而成的。因此在安裝 Docker 之前要先確認 Linux Kernel的版本是否有支援被 Docker 使用。以下就分別來簡單介紹 Namespace 和 Cgroup
Namespace：用來做環境隔離使用的，像是把Process ID、User ID、Network…等等的環境執行狀態隔離開來。舉個例子來說在一台實體機器上，有 2個 Namespace，Namespace 1 和 Namepsace2。Namespace 1 裡面的 PID 有 1，Namespace 2的PID 也可以有 1 的 PID，這樣就做到執行環境上PID 的隔離。如下圖：

Cgroup：用來做系統資源的管理，如：CPU、Memory、I/O…等等，資源做有效的隔離和做使用上的限制。
有了 Namespace 和 Cgroup 後，就可以做到在同一個 Kernel的系統環境下，有效的隔離資源的使用。
二. Docker 系統架構
Docker 的系統的架構主要是 Client-Server 的架構，Client 的部份稱為 Docker Client，然後 Server 的部份稱為 Docker Daemon，介紹如下：
Docker Daemon：用來執行管理 Docker image、啟動 container、停止 container 的 service，它是一個 long time service。並且有提供 Restful API 給使用者做操作或是顯示一些 Docker container 的狀態訊息。在 Docker 1.11 之後將 Docker Daemo 的元件拆分為 containerd、docker-containerd-shim、docker-runc…  等等的元件。因為這有點的複雜，所以對 Docker 底層想要再做進一步研究的人，可以上網查詢這些元件的關鍵字。
Docker Client： 使用 Restful API 連到 Docker daemon，並且提供 command line 的方式讓使用者可以操作 docker。
三. 使用 Docker常看到的名詞介紹
上圖是一個 Docker image 堆積出來大概的示意圖，在寫 Dockerfile 時會比較有感覺。
Docker Image 要從哪裡來？
Docker container 和 Docker container 之間的環境是隔離開離來的，不會發生 container1 開 8080 的 port，container2 開 8080 的 port 有衝到的問題。
可以使用網路上公開的 Docker Hub，或是在自已的內部環境下架設一個私有的Docker Hub 又被稱為 Docker Registry。
以上介紹到 Docker image、Docker Container、Docker Hub 在未來 30 天都會看到。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190589,ModernWeb,1,認識Chrome開發者工具系列,2,一點點前端除錯的歷史,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1512480121000000000,754,"
在早期電腦中發現真正的臭蟲
今天要來談談一點前端除錯的歷史。在開發者工具出來前，比較常見用來除錯的JavaScript 工具有 alert ，其實我猜就算到現在， alert 還是很多人在使用，但是用 alert 來除錯的效率是很差的，因為你的程式會一直需要中斷，而且你只能手動去把alert 關掉。想像一下，如果你有一個巢狀迴圈，然後你在第二層迴圈裡放了一個alert ，當迴圈每跑一次，你就需要去把它手動關掉直到迴圈完全跑完 XD。
另一個使用 alert 的問題在於，它無法顯示 JS 裡的物件，比如說：
你如果嘗試著顯示這個物件在 alert 中，你會得到 [object object]。所以使用alert 來除錯很顯然是效率差且協助不大的方法。但是 alert 算是在 console 出現前，瀏覽器支援度最好的除錯方式，甚在 IE6, IE7 中都可以使用。

alert 沒辦法顯示物件裡的內容
另一個除錯可以用到的工具，就是查看頁面的原始碼。這個頁面的原始碼其實就是你的瀏覽器從伺服器拿回來的頁面原始碼，但是還沒有經過瀏覽器解析過的，所以其實並不是真正的文件物件模型 (Document Object Model, DOM)，你看不到 JS 跑過後的內容，甚至樣式。因此這一個功能對於除錯來說，幫助也不大，更不要提早期在 IE 中，查看頁面原始碼是用筆記本打開的 ! 對，沒錯！你沒有看錯，真的是用筆記本打開的，所有的 HTML 原始碼都會變成沒有排版跟語法突顯 (Syntax highlighting) 的原始碼 … 這叫人怎麼看呢 XD

IE 沒有內建原始碼預覽工具

Firebug logo
之後，在 Firefox 上面出現了一個完全改變開發者除錯甚至開發方式的插件 (Add-ons)，那就是 Firebug ， Firebug 提供一個類似現在開發者工具的介面，你可以在上面動態 (Live) 修改 HTML, CSS, 甚至 JS ，還記得那時候我跟同事們的開發方式從原本用編輯器來寫 CSS 然後再重整瀏覽器來看樣式套用後的效果改成直接寫在 Firebug 的編輯器裡，在看到樣子套用上去的效果之後，再把程式貼回編輯器裡，因為這樣的工作流程更快而且更準確，不需要去猜說，樣式套上去後會長怎樣。
在 Firebug 之後就是 Chrome 的開發者工具的出現。從此之後，開發者工具就一直演進到現在，除了可以動態修改原始碼之外，也多了很多更強大的開發工具，比如：動畫(Animation) 的狀態查看、網路面版 (Network panel)，讓你可以看到所有資源透過 HTTP 傳送的狀態，效能面版 (Performace)，讓你可以檢查記憶體跟 CPU 的使用狀態等，這些功能我們會陸續在這系列中介紹。
好了，現在我們對整個前端的除錯歷史已經有一點了解，讓我們開始進入開發者工具的介紹吧！",,"['較早期的除錯方式', 'Firebug 的出現', '現代開發者工具']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190723,ModernWeb,1,「放下屠龍刀！論開發者如何與設計師打交道」系列,1,「先說結論」我們在台中開了間設計師與開發者共生社群空間-Monospace,riven,https://ithelp.ithome.com.tw/users/20107565/ironman,1512477070000000000,1457,"
我是Riven，原本是個到處接設計案的打工仔，工作關係常在各地流浪，講好聽點是旅行，但想像一下背著放了2KG重的Macbook pro 15""走在街邊上，感覺非常狼狽XD
今年初與朋友在台北成立 RAR Design ，初衷只是我們一起接好玩的案子，陸續接到不少洽談機會，就暫時停下我原本常要出差越南、日本等的那份工作，駐點台北市。

工作室位址在中山國中捷運站附近。
出乎意料地，工作室主要客戶都是台灣新創公司，我們協助其數位產品的UX/UI設計，因此參與了幾個滿滿的大平台網站開發過程，這種網頁跟以前接觸的一些工司形象網站、企業活動頁等不同，光是跑一個註冊流程畫面就需要好幾張設計稿。

還在持續擴張的sketch
從這些案子當中，我們跟幾間資訊公司合作，有走瀑布流開發的、跑敏捷開發的、做一做流局的（？這邊不多談。
在每次與工程團隊合作時都有一些有趣的摩擦，包括我與幾位女性Designer友人都認真地給大部分工程師下一個標籤 ＃宅的很可愛 ，但常常會聽到像是 靠北工程師 上常會提到的被妹子當工具人等回饋，我想，除了學習、工作之外，人際關係也是工程師們需要學習的，除了團隊協作上、交友也是個point。工程背景的人講話重邏輯、直接，工作效率100分；但在人際溝通上會很失敗，第一句話就得罪對方就不會有下一步溝通了。於專案上可能會讓PM、設計覺得難搞，然後設計、PM同時也覺得他們麻煩。
鐵人賽系列簡介==================
2014年參加了Hackathon Taiwan，那是我第一次接觸團隊協作，以設計系大學生的身份。去吃便當。
2015年到了韓國釜山參加了中・日・韓 Fashion Wearable Makeathon，兩個月後又到首爾參加決賽，拿到冠軍(Grand Prize)。
2016年自己組了個涵蓋軟硬體及設計整合的團隊，到上海參加海峽兩岸青年創客大賽，在48小時內我們從概念發想、原型製作，設計與影像，最後pitch得到一等獎。
2017年，我與朋友在台中創業經營「設計師與開發者共生社群空間」Monospace，實驗將這兩種不同思考模式、行為的種族，以更緊密交流的方式・交朋友
這30天的鐵人挑戰賽中我預計嘗試從先講結論(經營個不會賺錢的空間)到回顧個人的Web UX/UI學習歷程、參展參賽經驗、與工程師合作專案及跨國語言障礙的團隊溝通心得⋯等著手，並寫入在這個空間中，我們嘗試「教設計師寫code」的一些小實驗分享，以及促進設計師與開發者交流的體驗活動觀察。
=============我是工商分隔線================
Monospace秉持「為社群而生」理念創辦的共同工作空間，與用私心打造而成的工作環境，在2017年11月開幕了。
Monospace擁有眺望大台中景觀的高樓視野，舒適靜謐的工作環境、嚴選的電動升降桌、療癒的綠色植物盆栽、...，現場配置極速網路、咖啡機、與頂級Herman Miller人體工學椅等，提供舒適、友善與專注的工作環境。
=============我是工商分隔線================
我們是一群熱愛工作的同好組成的團隊，有享受生活的設計師、技術狂熱的工程師⋯等，起初聊到這個空間有人想開咖啡店、有人喜歡養貓，有人喜歡採光好View好的座位，有人對工作的環境、網速很要求，網路一卡就會焦慮尷尬癌上身；有人自己坐的電腦椅就花了5.6萬元；有人只在喜歡的咖啡店工作，對氣味、音樂非常講究。
但同樣的是，我們期許自己能用「設計」發揮社會影響力、透過「Coding」改變世界，不求大富大貴賺大錢。

小弟自組的網站設計見習團，協助沒基礎的同學自學Web UI
現在，我們把這些嚴峻的自我要求，打造成理想工作空間的藍圖、並付諸行動。
花費數月找了個可以望向中央山脈、大台中區市景的高樓空間；籌了百萬自己設計了室內規劃、從頭開始研究了裝潢眉角；用Hack精神改造軟硬體設施、能自動化就交給機器人，並組裝了自用機房，提供1000MB極速網路與高規格Ruckus AP；到彰化田尾翻了喜歡的多肉、蕨類回來看心情擺放；引進私心超愛的國外設計師燈款、懶得洗杯子再噴幾萬買洗碗機、一起矇著眼睛刷了快二十張Herman Miller人體工學椅；因為受不了外面出租投影設備太差就透支裝了5500超高流明投影機與135吋電動螢幕，會議室準備了55"" 4K Sony電視就順便放一台PS4 PRO吧XD
許多人會問像是「為什麼要來台中？」「幹嘛做這個？」「所以你的商業模式是？」等問題，我想透過這次鐵人挑戰賽反思自己的創業歷程，同時也是個記錄吧！有興趣的朋友們歡迎追蹤、或是在下面留言告訴我您的想法 :)","['起點', '願景', '為什麼']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190721,自我挑戰組,0,網頁學習日誌系列,2,CSS:position絕對定位與相對定位,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1512474441000000000,737,"
上面商品圖片的hot可以跟圖片重疊，這是float絕對做不到的事情，需要透過絕對定位來處理
原理：
HTML:
CSS:
結果如下：

就算把圖片刪除，新增div 背景設為綠色也是同樣
結果如下：

z-index也是搭配絕對定位的重要語法，上面的例子再加上本日推薦的區塊
未加上前效果如下：

HTML：
CSS：新增本日推薦css
如果想要讓本日推薦藍色區塊移到hot上面可在這兩個css加入z-index，後面數字越大則越在上面
CSS：
結果如下：
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190720,ModernWeb,0,Expo---跨平台App開發從零到上架系列,1,ExpoDAY1---Introduction,iamcxa,https://ithelp.ithome.com.tw/users/20103342/ironman,1512472982000000000,828,"
本系列文章都會具備 現在就做看看 小節，以便各位練習；最後會有一個 結論 小節，簡單總結本篇包含哪些重點資訊。最後，也會包含 Refs 小節，以便各位查看參考資料。
如果不幸我在 30 天前陣亡了，請移駕至我的 Medium，我會把這系列連載完。
現在，就讓我們開始吧。希望每天都能夠見到各位。
如果你在公司負責自己寫而且還帶新人寫 React Native，而你的公司還沒有導入 Expo，那你應該要導入，而且馬上就要。
一來，Expo 與 React Native 類似，都提供了抽象的 API 讓我們可以只專注在撰寫 JavaScript 程式碼，不用管太多底層 App 原生語言的部分 --- 但是，Expo 走得更遠，大幅縮短了從開始到第一次 Hello World 的時間。什麼 npm install 啦、什麼 Android Studio 啦、Xcode 啦，你都不用管了，你只需要打開 Expo App，QRCode 一掃，新人立刻見證到 React Native Write once Running anywhere 的威力，前輩（也就是你）先前的冷言冷語通通春風化雨，從此對 JavaScript 死心踏地。
什麼？新人說 Write once Running anywhere 是用來指 Java 的？不，不。請記得你才是前輩，你是那個要導入 Expo 的人，要怎麼形容，你來決定。
其次，Expo 解決了很多前端開發者想做 App 的問題，它內建的一些 UI 與模組如果都只靠你自己刻，夠你做上一兩個月了。因為你的老闆，或是老闆的老闆總是有『前端工程師學了 React Native 就不用再請 App 開發者了』的想法，但那簡直就是毒瘤。笨蛋！問題是時間，時間根本就不夠，對吧？幸好，Expo 解決了幾乎所有跟 JavaScript 無關的問題，你可以先學好怎麼寫 Expo(React Native)，再來煩惱接下來開始怎麼從零設定環境。
同時，如果你有需要教會別人使用 JavaScript 寫 App ，或是你的 App 需要快速迭代，又或是短期需要展示、驗證的需求大於立刻商品化，例如參加黑客松 ... 那就導入 Expo 吧，而且馬上就要。
最後，也是最重要的部分，Expo 提供了幾乎無痛的 React Native 版本升級機制，你只需要按時更新自己的 Expo SDK 版本就可以了，Expo 都替你整合好了。有問題？沒關係，每次更新都有升級教學可以照做。
如果你有嘗試升級過自己的 React Native 專案，你就會知道我的意思 --- 說是『NO PAIN, NO GAIN』算是運氣好了。又或者，如果你有嘗試過自己安裝 react-native-maps，那你大概也會體會那種感覺，... 你試過了，但它就是不會動，你能怎麼辦呢？
不僅如此，它還提供了迅速的 App OTA 更新機制，讓你的使用者絕對不會錯過你剛剛才新增的、精心封裝的一定會按到廣告系統，而且這個機制還免費。這一切，你都只需要按下 Publish 按鈕，唾手可得。
Expo 是一套包含工具、函式庫、服務、客戶端 App 的集合體，讓你只需要撰寫 JavaScript 就能打造自己的 Android/iOS 應用程式。
看到這裡，你就會想：『那它跟 React Native 有什麼不一樣？』我們來看看以下的圖解。

你可以這樣想：
React Native 提供了使用 JavaScript 與原生 App 環境之間的基礎，你只要想辦法 connect the dot，就可以到達充滿內購的 App 天堂。是的，成功要靠自己爭取，終點只有靠你自己才可以到達 ---- 除了 JS，你只再需要學會使用 Android Studio/Xcode，偶爾再寫點 Native Code，你就可以使用了。一點也不辛苦，對吧？
而 Expo 則替你在地基上搭好橋樑，提供你一個整合好的懶人包，只要使用它的開發工具搭配 Client App 就可以直接使用 JavaScript 控制大多數的 Native 功能，例如相機/聯絡人/local storage，甚至是部份硬體功能。
而這些都只需要打開 XDE，然後按一下 Create a New Project。
同時，Expo 提供一鍵分享功能，讓你在不用額外安裝任何 App 的情況下，透過掃描 QRCode 即刻把你腦中最酷炫的點子分享給剛才認識的私募基金代表，在他的手機上即刻展示下一個超越 17 直播的商業模式，擺脫你的老闆，即刻提升台灣人平均薪資水平。
也許你還想要更多 --- 是的，人都是貪心的，而我們就是上輩子太貪心，這輩子才會成為開發者 --- 如果你想要能夠自己撰寫 Natie Code 讓 Expo 專案使用，例如搭配硬體，開發自己專用的靜脈識別系統 ... 沒問題，你可以使用 ExpoKit 實現你的夢想。
如果你還在猶豫，那表示你應該要導入 Expo，而且馬上就要。

Expo 基本上擴充了原先 React Native 不足的地方，也提供了大多數 App 都會用到，但 Facebook 就是不想把它們包進 React Native 的 UI 元件，例如：icons/blur views/etc...。有些東西他們就是不想加進去，對吧？
除此之外，Expo 也包含了一些非常實用的工具，例如能夠在同一個介面管理各個不同 App 專案與其連線方式（透過 USB/VPN/LAN 連接手機）的開發工具 XDE。

你可以使用它以無線連結的方式部署 App 到手機上、可以讓你快速建立 App 專案。
以及可以讓你無論是想現場秀 code 裝酷、聚會教妹子們學 React Native，或是想立刻展示你高強的 coding 功力給對此一竅不通的股東看都無往不利的線上編輯器 Snack。

同時，這套 Snack 也提供了對應 SDK 讓開發者（也就是你）能夠自訂介面
本文往後會再另闢篇幅提及 Create React Native App（CRNA） 與 Snack。
那麼，Expo 真的是萬能的嗎？不，還差一點。如果你對以下這些情境抵觸，那 2017 年底的 Expo 還不適合你：
打開 Snack 連結，照著螢幕指示安裝 Android/iOS 的 Expo App，然後掃描 QRCode，看看會發生什麼事。

讓我們做一個簡單的小結，所以 Expo 是：
覺得意猶未盡嗎？沒關係，很好，這樣後續的文章才有人看。
我們明天再見，繼續聊聊 Expo 與 React Native。",['Expo DAY1 --- Introduction'],"['前言', '為什麼要用 Expo', 'Expo 與 React Native 有什麼不同？', 'Expo 包含哪些服務？', 'Expo 不能做什麼？', '現在就做看看', '結論', 'Refs', 'Related Repos']",,,,['tags: iThome鐵人賽2018 ReactNative Expo day1'],1513814115190786000
https://ithelp.ithome.com.tw/articles/10190717,SoftwareDevelopment,1,認識scala系列,2,Scaladay2(CompileScala),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1512472859000000000,690,"寫一隻 HelloWorld.scala
使用 scalac compile scala 程式，會出現可以在JVM執行的class檔．
執行java HelloWorld，卻出現錯誤．
上網查了一下說是少了scala-library.jar，所以改成這樣執行：
執行成功～因為沒有設classpath=. (當前目錄)，所以-cp時要自己加.
另外上面的例子 compiler 後會產生兩個.class 檔的原因是因為 HelloWorld.scala 是 objcet 的關係．object HelloWorld 會轉成 HelloWorld$.class，但由於 sacala 的 object 都是 singleton 的，在 JVM 裡類似 static 的物件，所以會產生一個 HelloWorld.class 裡面放的都是 static 一些成員．
如果是 class 的話只會產生一個class檔．寫一隻 Student class :
然後再 compiler 看看，就只會產生一個 class 檔了 :
https://stackoverflow.com/questions/16821828/classnotfoundexceptionscala-predef-issue
https://stackoverflow.com/questions/30731414/why-there-are-two-class-files-generated-after-compiling-scala-code",,['Use scalac Compile Scala：'],"['總結', '參考資料']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190567,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,2,[Day2]EasyFlowGP--系統設計工具(一)系統管理員:講整合的設定,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1512472184000000000,749,"大家好~
今天會一連串開始和大家分享系統的功能，預計分享10天，10天之後就會分享細部開發的語法。
EFGP的系統設計工具主要是給開發者(administrator)使用，當然也可以設定權限開放給其他
帳號使用喔。

系統設計工具有4個主要功能(系統管理員、(簽核)流程設計師、Web表單設計師和組織設計師)
1.系統管理員:設定系統權限和系統對外整合的細節，整合有問題這是先來這地方檢查。
2.流程設計師:設計流程的走向，這部分有分新、舊版本工具，而兩邊設計出來的流程是不可以通用。簽核流程設計師是新版本。
3.Web表單設計師:表單畫面的設計，表單語法的撰寫。
4.組織設計師:建立組織基本資料，人員、部門、核決層級、角色等重要的基本資料。
=========================================
系統管理員: 在此分享中，只談整合部分，因為這部分我摸索很久才知道一些""梅梅咖咖""。(呵~)
開啟頁面後，請看下方的資料來源設定，這是EFGP對資料庫的連結設定。
這地方至少會有一筆資料列，就是EFGP自己本身的資料庫自訂，基本上鼎新安裝的工程師會協助設定這部份。
當公司有整合異質系統時，異質系統的資料庫設定，就是在這邊填寫細節喔。

設定方式很單純，請照字面的標題輸入值。

ID:  自行編碼
名稱:自行命名
資料庫名稱:請設定和資料庫名相同!
資料庫類型:就選你的資料庫是那一型囉。EX:MSSQL、ORACLE...
服務名稱:若為MSSQL，此部分可以空白。若為ORACLE請填入SERVER NAME喔(如上上圖)
伺服器名稱:請填入IP值
連接埠:就是PORT，鼎新的TipTop資料庫是1521。
使用者名稱:讀取資料庫的權限帳號，通常為sa
密碼:就是帳號對應的密碼啦。
填寫完後，請按下測試。等系統出現""測試成功""字樣。 才能算通過喔! 就可以按下[套用]->[關閉]。

這部分的設定會應用在後續許多功能上。
例如:SQL註冊器的資料庫代號

表單語法在關聯資料庫時，只要指定資料庫ID值即可。

後續當資料庫有移機轉換新的IP，就只要維護資料庫設定的IP值，那麼所有的表單就會更著對應新的IP值。
省去一張表單一張表單改的麻煩。
這樣是不是很方便阿!! ^^",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190630,ModernWeb,2,跟著網頁動ㄘ動系列,2,DAY2-使用CCS3動ㄘ動,EllenK,https://ithelp.ithome.com.tw/users/20107540/ironman,1512471405000000000,770,"把整個過程設想成這是一齣戲，而你是一名導演及編劇，這樣會比較好理解。
將動畫要走的整個劇本使用 @keyframes 撰寫。
當寫完想要的一個劇本之後，在希望動起來的角色裡寫上劇本的名稱 animation-name 。
還要寫上你希望他可以動多久喔！ animation-duration 的單位通常使用s(秒)。
出現的結果會是：

如果你發現，劇本只寫了要演員從這裡(from)走到那裏(to)太過大略了，你希望你的演員能演得細緻一點，情感戲多一點，，那麼可以換一個方式來撰寫你的劇本。
出現的結果會是：

使用%來寫，可以寫出在一個指定的時間內更多變化及更細緻的動作。
這些都成功了之後，你會發現動畫執行完你所指定的時間就會停止了，如果我希望他能重複撥放，或是能有快有慢的話該怎麼辦呢？
我們下集待續(毆)",['今天先從最常使用的CCS3 Animations開始！'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190715,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,2,1-2.監控工具之一:ZabbixServeratCloud,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1512470809000000000,766,"為了後面的Demo，建立一個架構: AWS上建立Zabbix Server 收集各Cloud Server資訊
*大部分的情況雲端上是建立Zabbix Proxy將資料收集並帶回本地Zabbix Server

AWS上架設

安裝完後需注意
1.安全組

2.第一次使用可能會在pem金鑰卡住，可依照官網步驟使用puttygen設定
依照前一章教學建立Zabbix
ec2的公有IP/zabbix　連上網頁
選右上小人頭修改語言及背景

配置=>主機

把預設zabbix Server自己狀態的監控啟動

過一段時間後觀看監控數值
監測=>最新數據=>主機選擇zabbix Server

即可觀察目前機器使用狀態
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190712,自我挑戰組,0,標案系列,1,第一次處理公司標案,丹尼,https://ithelp.ithome.com.tw/users/20058145/ironman,1512469021000000000,696,"第一次處理公司標案，既期待又非常害怕，上級長官一句話必須奉命執行
熱血青年從何開始呢? 讓我們繼續看下去
找尋一堆廠商，開會 開會 在開會
廠商運用各種招數來接洽此案子
1.親切的微笑與天天來電
2.三寸不爛之舌，洗刷你的大腦
3.請你吃飯喝茶玩遊戲
4.給你一堆文件與技術推廣
未完待續",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190571,Security,1,資安的學習心得及分享系列,2,DAY2IDS、IPS,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1512468269000000000,714,"常常有人講說IDS、IPS，但兩者差在哪裡?
簡單來講，如果IDS是一般的偵測系統，那麼IPS就是加強版的偵測系統。
IPS不僅只有發出警訊(日誌)的功能，他本身還有一個重要的功能，就是會主動地阻擋攻擊，他會自己判斷，並且做出最適當的反應。
簡單來說，IPS的優勢就是當攻擊還沒達到他的目的時就先跳出來阻擋。

相較之下IDS，他只會單純的發送警訊，並且單純地用日誌方式提醒使用者，例如透過日誌的方式告訴你有危險的意思。

然而現今的網域並非我們想的這麼容易，因為網路的頻寬已經越來越大了，所以偵測系統也會出現誤判。如過要在短的時間去判斷大量的攻擊，是不可能不會出錯的。
在使用上 IDS與IPS之間存在一些爭議，因為講到IPS他會主動地把偵測到的攻擊選擇性隔離，所以IPS也可能會把一些正常的流量阻擋，例如本來是正常的流量，但是被誤判成危險的流量，所以被擋掉，這樣通常會影響到內部的運作。
在判斷正確和錯誤的攻擊，就足以讓管理者頭痛了，所以之後也提出了一些技術，像是延長攻擊的反應時間、用機器判斷攻擊..等",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190684,ModernWeb,1,30天使用Node.js在AWS上開發後端系列,1,30-1為何我選擇Node.js?,neilwang,https://ithelp.ithome.com.tw/users/20107336/ironman,1512468116000000000,754,"由於個人比較習慣在Mac/Ubuntu上開發
所以環境基本上就只會依照Mac/Ubuntu為主
在眾多的語言內, 為何會選擇Node.js呢?
Go是現在的當紅炸子雞, 為什麼會選擇Node.js呢?
我覺得目前Node.js有幾個好處是
如果要挑跑得快的語言, 沒有人跑得比組語快吧XD
如果要寫稍微高階, 肯定沒有比C更快的吧
但是寫C就是不大方便
寫Go嘛, 以後肯定也是要學的, 但是假如是在新創人力不足的情況下
如果會寫Javascript就可以包前後端, 的確是會比較省資源的!
再來, 如果連MVP都做不出來了, 後端調得再好也沒用
其實Node.js也沒很慢
可以參考以下網址
https://www.nearform.com/blog/node-js-is-getting-a-new-v8-with-turbofan/
我對於Node.js的定位比較像是初期公司要快速產出一個產品可以用的最方便的語言
Node.js有豐富的第三方module, 又可以包前後端
cluster mode有啟用的話, 速度也是穩贏許多語言
會想寫此篇的目的是希望能幫助自己的朋友, 因為他們對程式很有興趣
但卻不是本科系的, 我覺得比起其他語言, Node.js蠻適合他們入門",['為何會選擇Node.js'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190564,ModernWeb,6,邁向JavaScript勇者之路系列,2,JavaScript執行環境與堆疊,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1512467857000000000,1802,"JavaScript 一次只能做一件事情，他會依據 執行環境 (Execution Context) 來一一執行工作內容，本篇系列文會用舉例的方式，讓大家用簡單的方式瞭解這些艱深詞彙。
在一開始會登記一個函式在全域環境下(global context)，然後這個全域環境下可以登記其他函式，然後每一段執行環境下會有屬於他的變數以及物件，如果找不到該執行環境的變數或物件，則會向外層尋找。
故事說明：小明是本作的主角，早上時固定會做幾件事情，一個是與老媽說早安，另一個則是吃早餐，老媽與早餐可能會換(?)，所以他是可能會變動的，但大致上來說是說完早安，再去吃早餐。於是會在紙上紀錄下早上要做的事情。
早上要做的事情：
這個地方我們得到了三個執行環境(Execution Context)，其中一個是 (global context)，另外兩個則是在 global 下的 doMorningWork 內。
故事說明：小明得了一個症狀，每天早上都是全新的一天，他會忘記先前的人事物(簡直電影故事劇情，細節不重要)，他會將每天該做的事情記錄下來，也分為主要任務及主要任務下的次要任務，並且把任務的相關人等寫下，並且一件一件事情完成它 (小明只有一個，一次只能做一件事情)。
他會依序將工作完成：
要做的事情往後會越來越多，小明會把要做的事情存在腦內，然後依據順序來執行。
糟糕的事情是，遇到他不知道該怎麼做下去的事情，他會卡在那邊一整天 (xxx is not defined)。

小明的筆記本與 JavaScript 有著接近的邏輯，有著一件一件要做的事情等待他去完成。
在這個故事中也可以說明 JavaScript 的執行堆疊，一開始會先進入 global 執行環境，接下來再進入內層的環境，執行完的堆疊就會被釋放掉 (function 內的 return 即是完成)，然後逐步地完成所有堆疊，最後將控制權交還給 Global。

每個執行堆疊都會一層一層地向內執行，等到都執行完以後才會回到外層執行下一個任務。

這段概念影響了什麼？
另外，變數的作用域也與此有很大的關係，我們到下一章節來繼續介紹關於作用域 :)。
文章同時發表於：https://wcc723.github.io/javascript/2017/12/05/ironman-2017/",,"['全域執行環境與函式', '執行堆疊']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190600,Security,0,IT安全稽核系列,2,1.2規劃之資訊安全管理系統是否考量組織之整體業務活動及其相關風險？,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1512467302000000000,689,"以下為行政院資通安全稽核服務團歸類第一大項1.2，本人繼續昨天內容做出說明及分析，
一、資訊安全管理系統 （管理階層、資訊安全組織）
1.2規劃之資訊安全管理系統是否考量組織之整體業務活動及其相關風險？
說明：此項說明在於兩個重點：1.整體業務活動。2.風險。
一般公司的資訊人員，普遍都只偏重於技術層面，比較缺乏其他部門的相關知識，例如，公司到底如何進行銷貨？如何進貨？存貨如何管控？會計系統如何入帳？等等，諸如此類業務，大部分是無法全部了解；反之，其他部門對於資訊安全了解的也是一樣膚淺，甚至於只要一出問題，就推給資訊單位，要求資訊單位要加強，但，到底要加強甚麼？其他單位也不了解。因此，資訊人員往往就得依照個人見解，下去做資安管控，簡單舉例，USB插槽之管控(如下圖所示)，有時控管USB插槽，是為了避免資料外洩，或者病毒散播的控管，這也是保護組織業務，降低風險的重要步驟之一。但力度一拿捏不穩，反而造成更大的抱怨，甚至讓自己疲於奔命。

(圖為USB之控管)
基本上，我們無法要求所有人皆能了解組織各部門業務的性質以及需求，此時會建議資訊人員採取以下的方式來解決以上的之問題，並且從以下的方法找出相關風險：
A.     問卷：組織內部分成很多部門，並不容易掌握所有部門情況，此時，就要設計問卷，然而問卷之內容設計，就相對重要，正常的情況，第一次通常無法得到所要之資訊，此時就要不厭其煩的詢問，以釐清正確的業務內容，再經過數次往返之後，將詢問的內容做成結論，最後與被詢問之單位達成共識，完成第一步驟。
B.     除錯：當有共識之後，接著就要分析風險，實際上，此時並未結束第一步驟，依共識去執行資安，在試行之時，往往會出現bug，此時，通常仍要請相關單位，協助支援除錯，除錯這步驟，通常會引發被詢問單位的反彈，畢竟，有時確實資訊系統無法支援到被詢問單位之需求，故不停的彈性調整為除錯最重要的關鍵，如果不具備彈性，事實上，到此步驟就已經無法再進行。
C.     上述兩個步驟完成之後，最後就得評估風險，在此，我們所說的風險，就需要資安的技術，大部分的公司，基本上都不願意花錢在這方面的問題上，簡單說，公司所有問題都得要考量到成本，因此，若是公司規模未到水準，又或者處於草創階段，最好的方式，就是多運用系統上有限的資源，簡易的加密，或是密碼複雜化，都有助於控管風險。做好基本的控制項目，其實已經相當不容易了，諸位負責資安的人員都了解，一下子完成整體佈建，反彈會更大，如果能先初略的布局，讓每個組織人員自然明瞭其控管之目的後，再逐次加強，循序漸進，相信假以時日，必能達到一定的風險控管水準。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190667,SoftwareDevelopment,1,Kotlin30天，通過每天一個小demo學習Android開發系列,2,Kotlin開發第2天Discount(Seekbar+Keyboard),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1512464202000000000,1459,"
這是練習寫 Android App 的第二天。
這個應用是讓使用者先輸入一個價格，然後通過拖動 Seekbar 的方式來計算打折情況。
SeekBar 通過加入 setOnSeekBarChangeListener，來達到監聽值改變的情況，這裡不確定用到的是不是「匿名內部類」的概念。
改變 format
String 中插入值「$Variable」
通過 .text 我以為已經拿到內容了，結果是一個 Editable 對象，然後要 .toString() 才是真的取到其中的值。",,"['Component', '事件監聽', '顯示帶小數的值', '筆記', '參考']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190711,自我挑戰組,1,用IT看世界系列,2,檔案稽核(上),allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1512463202000000000,819,"隨著科技的進步，透過資訊科技(Information Technology，簡稱IT)來處理資料成為趨勢，而且越來越深入和複雜。內部稽核人員面對電腦化如何對內部控制結構造成衝擊，以及如何利用電腦輔助工具，甚至透過電腦查核資訊之可靠性，均應有充分的認識。
日前針對台灣企業用戶進行檔案存取安全調查，發現台灣企業最在意的檔案存取安全需求，77%的受訪者想瞭解是否有人異常的登入存取檔案，其次是想瞭解是否有異常的修改檔案(近六成的需求)，可見檢核人員登入後是否有異常操作檔案的行為，已成為台灣企業進行記錄稽核的第一要務。
IT人員常常面臨到的情境，在有限甚至無預算的情況要肩負起公司資訊安全
的重大任務，透過內部教育訓練、資安宣導，這都是較容易著手的。當然，若
公司有編列預算在這塊當然是再好不過。如果公司年度編列將其納入考量，相
對地就可以開始蒐集一些解決方案，不論是系統整合廠商、原廠，這邊就不多
做論述。但往往，您可能跟我面對處境跟我相同，在有限的資源底下規劃可因
應公司內部控制及外部稽核的解決方案出符合公司內部稽核的解決方案。
過去在微軟windows記錄其中兩項「應用程式」、「安全性」，預設都是將事
件做為「覆寫」，這也意謂著我們將無法蒐集完整的資料，但對較有經驗的內部
稽核人員「抽閱」是認為可靠度較高的一種方式，過往的歷史紀錄『安全性』
無法像「應用程式」裡面可直覺式可以看出過去的事件，因為windows記錄下
『安全性』記錄累積快速，例如筆者此次實際觀察內部正常使用的系統，一日就會產生高達285,230 KB，相當於278 MB的資料，如圖一，而且這還是壓縮過後的檔案大小。
(圖一)每日記錄檔約產生278MB 的壓縮檔資料量。

我們不可能放任這些平常我們用不到的資料佔據我們儲存設備(storage)，將
其每日所產生的事件紀錄加以歸檔，是較理想的方式，這也是為何在此採取將事件紀錄(Event log) 歸檔(Archiving)完後，再搭配系統內建的排程功能去刪除這些事件(Event ID)。
目前微軟(Microsoft)也是目前台灣較為普遍的Infra Base，而各版本的物件存取的Event ID不盡相同，例如在Windows Server2012環境底下，物件存取的事件代碼為4656及4663（如表一）。
Windows 	Windows server2012 事件 ID	事件類型	描述
事件 ID			
560, 562, 563, 564, 565, 566, 567, 568	4656, 4658, 4659, 4660, 4661, 4662, 4663, 4664	對象訪問	當訪問一給定的對象（文件，目錄等） 訪問的類型(例如讀，寫，刪除) ，訪問 是否成功或失敗，誰實施了這一行為
(表一)微軟事件代碼

批次檔程式
首先撰寫兩支批次檔程式，一支為打包event log至 Archiving，另外一支則用來例行刪除因不複寫所產生的event log。
程式檔名：事件壓縮.bat
程式說明：按照日期產生壓縮檔
set xday=%date:~0,4%%date:~5,2%%date:~8,2%
set xtime=%time:~0,2%%time:~3,2%
path C:\Program Files\7-Zip
set backup_path1=E:\Logs
set upload_path1=E:\Archiving
7z a -t7z  %upload_path1%bbup%xday%_%xtime%.7zaa  %backup_path1%
程式檔名：事件刪除.bat
程式說明：刪除event檔案
Event log刪除
del /F /S E:\Logs*.evtx
操作流程
操作流程相當簡易：<1>先建立E:\Logs 資料夾
<2>再去修改記錄檔存放路徑為:\Logs\Security.evtx。做法是從系統的[開始]功能表中開啟[事件檢視器]，接著在其左側樹狀目錄中展開[Windows紀錄]，在其下的[安全性]項目上點擊滑鼠右鍵，並於隨後出現的快顯選單中選擇[內容]。此時便可於[記錄檔路徑]欄位中，將路徑修改為「E:\Logs\Security.evtx」。（參見圖二）
(圖二)windows記錄下的安全性設定

路徑修改完成後自然會產生一個Security.evtx檔案，但須注意資料夾名稱是否輸入正確，如果資料夾名稱錯誤，檔案將不會抄過去。
兩個批次檔撰寫完成後，在系統的[工作排程器]中，設定每日下午9點做Archiving，間隔2小時確保時間足夠完成後，於每日下午11點刪除event log。如圖三。
(圖三)排程時間間隔2小時

在排程系統中，記得要將安全性選項變更為「不論使用者登入與否均執行」。如圖四。
(圖四)安全性選項

需要調閱特定日期的紀錄檔時，只須到E:\Archiving找到欲查核日期的壓縮檔，並解壓縮到E:\Logs，接著便可在[事件檢視器]中查看已儲存的記錄。如果需要尋找特定類型的事件，可在右鍵快顯選單中點擊[篩選目前的記錄]（如圖五），輸入事件識別碼（如：4556,4663）即可過濾出包含這些事件ID的紀錄（如圖六），並且進一步查看其細節。
(圖五)檢視並篩選已儲存的記錄

(圖六)指定事件識別碼來篩選檢視的記錄檔

結語
資料軌跡向來都是各公司常會被歸類在資訊安全或者稽核的重點，在windows server2012 裡面4656,4663被歸類在物件存取裡面，而實務上常常會遇到使用者誤刪檔案，或者變更資料夾內容，此時就可以從這地方去循線找出。
對於公司的稽核任務需要調閱檔案伺服器的event log,本文藉由將安全性event log設定為不覆寫，再透過批次檔撰寫排程，便能完成歷史調閱的需求。
下一篇將會討論，筆者如何在公司操作實現，待續。
感謝網管人141期",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190709,SoftwareDevelopment,0,30天從零開始到使用SpringCloud建立完整微服務架構系列,2,Day2-SpringBoot起手式,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1512450489000000000,701,"今天開始寫程式吧~!!
首先先到 http://start.spring.io/ 頁面，這邊有 Spring 提供的快速套件的選擇器，簡單勾一下，就可以產生專案結構來下載哦
第一個項目我們就勾選最簡單的 Web 然後按下載就可以
(Gradle 跟 Maven 隨個人喜好，不過我這邊都會用 Gradle 當示範)
解壓縮完呢再用你慣用的 IDE 來開啟(我這邊是用 IntelliJ 當示範)
開啟後的專案結構

接下來建立一個 Controller
接下來對著 WebApplication.java 右鍵 Run
服務起來的話預設是 8080 port
就可以透過 http://localhost:8080/
取得 {""say"":""hello""} 的資料
到這邊沒問題的話環境基本上是 OK 了
明天就直接進資料庫操作吧",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190707,ModernWeb,1,每日文章推薦系列,2,Day2怎麼看,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1512438264000000000,817,"標題有關鍵字就看
有些文章標題很爛 但是內容很好
還有的文章不知道為啥標題會跟別的文章很像
如果以為是同一篇文章就會少看一篇 很不方便
有回應就要看回應
回應可以看到其他人對文章的反饋
有時候也會補充重點
或者舉出作者哪裡有不對的地方
眼睛快速掃過文章
要看的太多了 不如看關鍵字吧
先初期判斷整篇文章要講的東西是啥就好
發現沒興趣就放棄
因為要看的文章太多
勉強自己看下去反而是浪費時間
好看就回頭重新看
因為剛剛只看關鍵字
如果覺得文章有價值就回頭仔細看
如果一時看不完 就先記錄 晚點再仔細看
其實就是一些小技巧
不過小技巧有時候要適可而止
太過炫技有時候只會造成其他人的困擾
例如 ~~
這類常用的凾式一般不會想這麼多
所以看到這類文章會覺得特別有趣
看過先有個印象 到時候如果真的遇到問題也會先知道點可能在哪
就我個人而言看文章 也是為了避免在哪產生了不知道的技術債
但就是能避免就避免
在不能避免的狀況就控制他會影響的範圍
可以的話就留下註解或文件說明為何會有這個技術債
讓自己或同事事後能知道要往哪個方向去還債
這類文章勝在簡單易懂又不用花太多時間看
分享這種文章給不知道的人慢慢入坑最好了
但是對高手來說就是會搔不到癢處XD
也就不要計較太多啦
今天掃過的文章",,"['閱讀技巧', '今日分享']","['JavaScript hacks for ES6 hipsters', '遭遇php的in_array低性能问题', '技术债务与程序员的信用', '5分钟学会 CSS Grid 布局']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190706,ModernWeb,1,挑戰CSS30天系列,2,day2_background,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1512438202000000000,716,"挑戰 CSS 第二天，練習基本與重要的背景屬性：
background-color 和 background-image
範例如下：
成果如下圖：

我的發文內容可能比較偏向基本，因是第一次參賽，目的希望在挑戰連續發文的30天中，更重要的是能從中學習並累積自己的前端技術。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190637,ModernWeb,0,JavaScript基礎二三事系列,2,Day02　幾個名詞小觀念,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1512436994000000000,814,"今天的筆記比較偏觀念性質，畢竟是克服JS的奇怪部分這堂課開頭的部分，但對我這個非資訊本科的人來說也很受用了。
語法解析器(Syntax Parser)
程式、電腦科學的世界中，電腦並不會直接看懂JavaScript在(以下簡稱JS)寫什麼，而是會將JS轉譯成電腦看得懂的語言，可以這樣想：
當我們寫好JS程式時，在執行時，我們宣告的變數、函式，就會呈現在記憶體中，由電腦去運作使用。而中間負責將我們寫的JS轉換給電腦的，就是 ""直譯器、轉譯器""。
它會逐字閱讀，當讀到var、let、const時，他就會知道我們要宣告個什麼東西，當讀到function，它會知道這是一個函式，只要我們在撰寫時遵守JS語法規則，執行時直譯器、轉譯器就會依照規則將其轉換成電腦認識的語言，而這個中介的引擎被稱為直譯、轉譯器。
　
　
詞彙環境(Lexical Environment)
代表程式碼在程式中的實際所在位置
蛤?什麼意思?
Lexical代表的是和程式的語法有關，特定的程式寫在哪裡是很重要的，例如：
當我們撰寫出一段宣告變數的JS語法
它被寫在哪呢?它在一個函數中嗎?
它的周圍的環境是什麼?它被包在物件、陣列中嗎?
當我們在編輯器存檔，在瀏覽器重新整理時，JS不會給電腦直接執行，而是透過引擎和語法解析器轉譯、翻譯給電腦執行，而程式語法所寫在的位置，可以影響執行階段時，它對應的記憶體位置，也能影響它和其他變數函式的互動。
所以談到詞彙環境(Lexical Environment)就是指開發環境中的程式位置。
　
　
執行環境(Execution Context)
JS在執行時，其實並不會完全照我們開發時期寫的JS逐字逐行去執行。
是的，解析器、直譯器會逐行逐字讀我們寫的code去讀，但轉譯給電腦時並不會逐行逐字按順序丟給電腦記憶體和執行。
我們的程式碼會在執行時，會先依照詞彙環境(Lexical Environment)被解析器轉換，在電腦中被創造並擺到該放的記憶體位置去，最後電腦才執行。尤其JS某些特性(例如提升)就是在創造階段產生，因此理解JS在執行環境中的狀態是很重要的一件事。
　
　
名稱/值的配對(Name/Value pair)
名稱/值的配對，代表一個名稱會對應到一個值。
在執行時期(執行環境中)一段正在運行的程式碼，同樣的名稱只會有一個。
一個名稱只能被一個值定義，而這個值可以是更多名稱/值的配對，這是什麼意思呢?
例如：
var       ->宣告
ithome    ->變數名
""30day""   ->值(字串)
這就是一個名稱/值的配對
而討論到物件時也可以用一樣的概念，物件也是名稱與值配對的組合，值可以是字串、數值、陣列、函式、另一個物件，可以這樣想：
Superman也是名稱/值的組合，名子是Superman，值是物件，往內看：
gender是名稱，'男'是gender的值；color是名稱，'blue'是color的值；superPower是名稱，值則是另外一個名稱/值的配對。
反過來看，Superman也可以被包在某個名稱/值組合裡，是另外一個名稱/值的配對(好饒口)。
現在JusticeLeague的值也是個物件，裏頭有名稱Superman、Batman、Wonderwoman...等等，而Superman還可以在往下看，它的值裡又有其他名稱/值的組合，可以瞭解就算這樣一層一層的往下衍生，在JS中，物件本質還是名稱/值的配對組合。
　
　
全域環境與全域物件
不論何時執行JS程式，JS都會在執行環境(execution context)裡執行，而全域環境就是指在執行時，把我們的程式碼包在裏頭執行的環境(像個包裹一樣)。JS在執行時都會創造一個基礎執行環境作為他的全域環境，以網頁來說全域通常就是瀏覽器window，而Node.js就是Global。
在電腦執行JS時(執行時期)，全域環境被創造時也會跟著產生全域物件(Global Object)和「this」。
「全域」指的是我們在程式的任何地方都可以取用、呼叫它，可以想像成「公共」比較好理解，舉個例子：
我在公司上班，公司對於我就是全域環境。
我可以自由的使用茶水間的飲水機，飲水機對我來說就是全域物件，公共都可以使用，不只我可以用，別的部門也可以用。以此概念來發想，即便函式寫得再複雜，一層包一層，在裏頭也是可以取用全域的變數與物件的。
　
　
小結
今天認識、複習到了幾個觀念與名詞(慘了好像都在打中文字比較多....)
筆記內容可以參照Udemy課程：JavaScript 全攻略：克服JS 的奇怪部分2-6至2-9",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190687,自我挑戰組,0,2017挨踢人生大事紀系列,2,綱舉而目張！,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1512434662000000000,770,"寫書都嘛要來段序文！就我這系列的第一篇起個頭先那篇。
(據說其實序文都是書寫好之後，最後才加上去的。更多是找名人寫推薦序！)
接著要有目錄，把你全部想敍述的全文內容，
用一大段又一大段的主題，切出至少八個題目出來。
(八這數字是我蝦扯的，沒憑沒據的，請邦友們別太往心底去。)
這回自我挑戰！
牛哥我大概是會回憶一下這年來，經歷了那些心酸事，遭受了那些苦，吃了那些鱉...
衝著還算靈光的記憶力，娓娓報上來，給邦友們當成閒暇時間的笑話好材料。
誰叫咱們幹了『挨踢』這差事呢！
把每回鐵人賽，當成一個年結的回憶錄來寫，感覺也滿有意思的。
大致上目錄會如下：
嗯！應該够寫的了~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190690,ModernWeb,1,PixiJS，方便好用的WebGL內容產生工具系列,2,[PixiJS-Day-02]關於PixiJS,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1512434419000000000,767,"本篇提一些 PixiJS 的官方資料
PixiJS 官網：
http://www.pixijs.com/
由 goodboy 公司開發的 2D WebGL Renderer
PixiJS GitHub：
https://github.com/pixijs/pixi.js
License: MIT
PixiJS is and always will be Open Source
http://www.pixijs.com/#features-list
Tutorials 教學：
http://www.pixijs.com/tutorials

列表下方灰字的 ADDED APRIAL 20 2013 指的應該是文章收錄的時間
但內容有更新到新的版本，可安心閱讀
第一篇
https://github.com/kittykatattack/learningPixi
相當詳盡
Docs
http://pixijs.download/release/docs/index.html

也有一些教學與連結，內容與 PixiJS GitHub 首頁相同
Examples
http://pixijs.io/examples/

範例數量並不大，但相當清楚的把功能與特性做成範例
在初期觀察 PixiJS 可以做到什麼效果時，
相當好用
需注意的是，
一些功能的寫法可能會根據不同 PixiJS 的版本有所不同 (或者失效)
例如：一些滑鼠事件，若使用舊版的 PixiJS，可能就無法運作",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190596,ModernWeb,0,重新學習網頁設計系列,2,DAY2.CSS特定度Specificity,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1512434300000000000,737,"很抱歉 Day 2 並沒有承接著Day 1的內容
原因是我在思考內容時總會聯想到許多東西, 而那些東西都讓我想好好地複習、更新
且該篇核心內容並不足以成為一篇文章，比較適合在提及@media一同講解
因此暫且先跳過。
一個特別重要卻常被忽視的概念。
如果對特定度specificity沒深刻的了解, 那就會寫CSS的時候突然發現明明設定了樣式但樣式卻改變不了的狀況, 然後花很多時間去處理它, 最慘的是有些人甚至為了方便直接硬加!important來強制覆寫, 造成日後維護上的困難。
其實特定度specificity是個簡單的規則邏輯, 這次趁著自己複習的時候順便再做個筆記與大家分享。
首先來看這個順序 (a, b, c, d), 越左邊的字母代表權重越大
而且是後者永遠蓋不過前者, 意思是指 a 永遠大過 nb + nc + nd (n代表任意數)
知道此概念後接著看看a, b, c, d個代表什麼
在了解特定度後, 要記住另一個最簡單的規則：
相同的特定度下, 後者的設定會蓋過前者
另外 !important 關鍵字, 作為救星的同時也是大家最痛恨的關鍵字
有兩點點需要注意
在特定度specificity觀念清楚的情況下一般來說不太會用到!important
通常!important適合出現在工具類別
考慮以下範例：
這種工具類別雖然有時好用, 但過度使用也會在成維護上的困難, 使用時請務必多加思考是否由其必要性。",['CSS特定度specificity'],,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190672,SoftwareDevelopment,0,保持前進、持續優化程式碼內涵系列,1,01.精進程式碼永遠不嫌晚，千裡之行，始於足下。,依恩,https://ithelp.ithome.com.tw/users/20107551/ironman,1512433220000000000,956,"小弟年年都坐在台下，看著各位神人在鐵人賽上大顯身手，也沒有想要參加鐵人賽。
今年絕對是那根神經搭錯線，才會跳出來，挑戰自己的極限。
歡迎大家，謝謝各位看倌賞臉，進來看小弟的文章。
這個系列的文章，彙整筆者在軟體業這幾年來，一路走過來的實務經驗。礙於歷練不足，分享的內容，一定還有其改善與進步的空間，還請各位看倌多多指教。
　　這個系列的文章，包括實務上遇到的狀況、觀念的建立、常用的技巧等內容，所以文章內文的深度會有所不足，但別擔心，在文章的最後面，會附上覺得值得一看的書藉或網頁的連結，提供進一步的深入。
筆者平常的開發環境，使用 C# 做為主要的開發語言，在後面的文章所使用的範例，均使用 C# 撰寫。
　　關於這此要說明的主題，己經簡單的列表於下方。不過，實際文章內容，會依情況而有所增減。",,"['前言', '主題大綱', '文章索引']","['觀念篇', '物件導向設計篇 (Object-oriented)', '單元測試篇', '軟體架構篇', '設計模式篇']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190653,SoftwareDevelopment,2,爬蟲始終來自於墮性系列,2,工欲善其事，必先利其器(上),Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512432843000000000,1105,"玩爬蟲我們必須借重很多工具來觀察和測試，有適合的工具才能夠幫助我們快速釐清線索，有了線索之後，我們也必須先快速測試，解決 key part，再把整給流程釐清之後，最後才會開始實作程式部分。
基本上網頁都是給人走的，所以我們要做爬蟲，有很大的部分是模擬人走的路線。觀察我們所送出的 request 是爬蟲的基本功，我們一定要很清楚我們送出的是什麼、拿到的是什麼，而 chrome developer tool 就是一個功能強大且隨手可得的好工具。

爬蟲要抓取網頁上的資料，就必須知道他是如何產生、產生在哪個位置，我們可以透過 chrome 的 elements tab 來了解該資料在網頁上的位置，進而用選擇器去選取到我們想要的資料。

在使用 dev tool 觀察 request 的時候，要將 tab 切到 network，邊執行網頁動作邊觀察 request 傳送的狀況，觀察時重點在於以下幾項：

使用 dev tool 時，也能做篩選和適時地清空，能讓我們更方便的找到我們該專注的目標。另外，在某些頁面跳轉時，dev tool 會清除掉原本的 request，所以建議在觀察的過程當中，要把 Preserve log 打勾。

在目前的網頁技術，常常有用前端做 render 和計算的方式，所以我們也必須觀察目標網站的 js 程式碼。在 dev tool 把 tab 切換到 source，可以看到目前網站的所有 js 程式碼，也能善用 break point 來幫助我們釐清 js 的執行狀況。

在我們需要測試的時候，可以直接在 console tab 做操作，驗證我們是否能夠正確的選擇到資料，在任何 tab 按 esc 也能呼叫半個螢幕的 console，更便利我們作業。

用 esc 打開的 console 的 tabs，裡面有個 search，也是一個很好用的功能，他能讓我們在所有 script 中搜尋我們想要的關鍵字，大幅降低我們查找 script 的時間。",['觀察工具'],['第一號工具 - Chrome Developer Tool (以下簡稱 deve tool)'],"['dev tool 開啟', 'Network tab', 'Source tab', '打開 console', '快速 search js']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190578,SoftwareDevelopment,1,MsBotframework30天上手系列,2,Typescript,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1512432569000000000,738,"因為 所以
系列文章請改到這裡來喔!
Microsoft Bot Framework 30天上手 ",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190552,ModernWeb,5,前端工程師養成手冊系列,2,資訊爆炸的年代，周遭的人總要你多學一項技能,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1512432282000000000,1537,"當我進入公司以後，公司組成可略分為企劃、工程、美術、行政部門，假使你有工作經驗的話，其實很清楚如果你是以「助理」身份進去的話，基本上每個事情你都會碰到一些，所以公司大大小小的事情都有涉獵，我在那時候的心態其實就是盡量讓自己抱持著開放吸收各種事物，因為原本我進來的主要原因就是希望從中找到我自己有興趣的方向。
當然，如果你在看這本書的讀書已經有意打算投入前端工程師，而你找的職缺是前端工程師，也被公司錄取時，假使公司要你做本業以外的事情時，就要特別小心。像是最常見的案例是公司本身是應徵前端工程師，但沒過幾個月前端的 loading 變少時，可能就會希望你轉後端工程師。所以在面試時請盡量要詢問清楚前端工程在該公司的工作內容與項目，以避免雙方產生不必要的誤會。
我在那時還是比較喜歡寫程式，所以就一直窩在美術部門，那為什麼不是工程師部門呢？因為那時候還沒有專職的前端工程師，甚至連這個名稱都還沒有出現。所以通常「網頁排版」的工作就看設計部門跟工程部門誰對這領域強，誰就領去做。那就剛好公司的設計部門是負責到這段，所以我就跟在美術部門的大前輩學網頁排版，雖然我進來沒幾個月她就辭職了，但硬著頭皮看著前人的網站專案，還是有摸出一點東西的。但我那時還是無法理解發明網頁瀏覽器的開發者是不是白癡，為什麼相同的程式碼會在 IE6、7、8 會有不同的結果，還必須針對瀏覽器寫特殊語法去除錯，那一段時間真的是我不堪回首的過去。
我們回歸主題，前幾年在公司期間大家可能看我菜吧，或多或少都會給我一些建議，例如說：
工程部門知道我的狀況後，聊天時都會開玩笑吐槽我說「蛤你只會 HTML、CSS 哦，這樣不夠啦，要不然你也寫後端好了」、「你寫網頁要再多學個 xx 語言會比較好」，當他們提到的技術名詞，我都會把他記錄起來，然後自己去嘗試在下班時間去摸索。但就業前半年真的是一個學習死循環，當我還在吸收他們昨天講的技術，而且也買書來看時。隔天又會再提了好多技術名詞。搞得我非常焦慮，我那時候每天上班都在想我一定是瘋了才會跑來寫網頁。
到最後我才發現這是一個必經的過程，因為寫網頁只是專案中的一個小項目，當你要將你的網頁部署到伺服器上，中間過程有很多的眉角需要注意。例如 MIS 問你網址、DNS、IIS、遠端主機設定有沒有跟對方要到？我的網頁圖片跟 CSS 路徑寫相對定位，後端抱怨資料都抓不到？周姐抱怨我做的網頁太肥，伺服器 loading 太久。雖然這些東西沒有和網頁有正面的相關，但卻都是為了讓專案網站能如期上線，各部門都會顧慮到的的細節。
所以假使你也是一樣在這個階段，前半年到一年會有這樣想法其實還蠻正常的，業界會稱做這東西叫做「技術債」，因為你瞭解開發一個系統或網站的原理太少，導致跨部門溝通容易不順利，所以這些債你遲早還是得還的。我自己也是跟工程部門合作兩三個專案後才覺得自己聽到的火星技術名詞有逐漸減少的趨勢。
我相信你在這條道路上一定會有很多人給你意見，但你要記得我說的話，自己的方向要自己決定，他們無法幫您走完人生道路。
不論是已經走在這條路上的前輩，比你早一點就業的同輩，甚至你的家人、情侶，他們都會依照自己在社會上的經歷，提供給妳較好走的方向，但真的適合你嗎？他們又不是你，怎麼會知道這樣的方向確實正確呢？
就很像是說你問 PHP 開發者，要挑選哪個語言來學後端，他也會依照自己的經驗較為主觀推薦你 PHP，因為他在這領域夠久，知道哪裡學習資源多，自己也有足夠的開發經驗，所以才敢給你這建議。
你發現到了嗎？所有人都會因為自己的價值觀跟經歷提供給你各種建議。就連你在看這篇文章時，也是依照我在前端領域的主觀經驗談。
當然你可以多問各種前端領域朋友問意見，但是要記得，你還是必須依照你的想法，摒除掉主觀意識過強的立場內容，萃取出適合你自己的方向。不要隨波逐流，別人說什麼你就信什麼，否則容易淪落為多頭馬車，做任何事情都無法有成。
我還記得我剛進公司時，一開始和美術設計的摩擦還蠻多的，舉個切圖的例子來說吧，當設計師設計好介面後，都會幫我順便切圖。但有時候設計師因為對網頁 UI 的掌握度不夠時，就容易切錯。例如背景可以用 background-repeat 延伸，沒有考慮內容資料變多時，介面需要進行調整。
雖然溝通了兩三個專案，但一直沒有好轉。
我：「這樣不是辦法，我明天下班前沒把他搞出來，工程部沒打爆我的頭才怪」
設計：「我也沒辦法啊...我又不懂網頁，要不然你學 photoshop 好了？」
我：「蛤？？我又不會設計，哩賣鬧啊」
設計：「又沒要你學全部...你只要學怎麼切出你要的圖片就好啦」
我：「哦....」
於是乎設計幫我安裝好 photoshop ，花了三小時教我基本操作跟切圖的細節後，自己也能開開心心的切出自己想要的圖片啦，雖然切圖也會增加我的工作時間，但總比設計切出不能用的圖片來回溝通的時間還好多了。
從這個事件也讓我挖掘到自己的一個盲點，當我一聽到要學新東西就會感到恐懼，好像要學得多麼博大精深，非要成為大師才是真的學完。但其實並不是那麼回事，人一天也只有 24 小時，你一定會有自己的本業在身上，那為了要提升你對技術的廣度，你勢必要試著主動學習能夠讓你跨部門溝通流暢的額外基礎技能。
就像我的案例一樣，我學 Photoshop 不代表我要成為一名設計師，我只想學到的廣度只是方便我可以切圖而已。
我主動學後端語言，不代表我未來就要成為後端工程師了，我只打算之後我跟任何後端工程師溝通時，可以瞭解他們的後端與資料庫邏輯，減少重複鬼打牆所浪費的時間。
但做這些事時，我還是會以我是一名前端工程師自居，我學習其它技能只是提昇技術的廣度，讓我能夠更加順暢地與其它部門合作，未來能跟團隊共同設計出一個成功的產品，共勉之。
",,"['公司希望你什麼都摸一點', '你問一百個人意見，就會獲得一百個不同的答案', '學技能不代表要你就得成為該領域的專家']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190686,自我挑戰組,1,數位遊牧民族（DigitalNomad）系列,1,第一天-數位遊牧民族啟程,alincode,https://ithelp.ithome.com.tw/users/20092025/ironman,1512431830000000000,783,"我是一個 Coder，從事遠距工作已經三年了，遊走在各咖啡廳及 coworking space 工作，但大多的時間在家裡遠距工作，曾經嘗試過比較特別的地點有日月潭、台東、沖繩、大阪、新加坡、清邁，最近剛完成了 DN 最大聚落的朝聖之旅，帶我有很深的體悟，這系列的文章，將圍繞在這個旅程的點點滴滴。
讓我們啟程吧

歡迎大家加入遠距工作者在台灣 社團一起交流。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190605,自我挑戰組,1,自己動手實作新創空間系列,1,在宜居城市尋找有趣的新創空間（一）,Kyle,https://ithelp.ithome.com.tw/users/20006680/ironman,1512431780000000000,784,"去年CNN的一則報導，將台中列為「台灣最宜居城市」，因為擁有宜人的氣候、藝文與美食。對於出身雲林鄉下地方的我來說，儘管有些不服氣，但還是在2013年決定移居台中，成為台中新鮮人。
由於很早就開始當SOHO接案，學生時代就很嚮往能打造自己專屬的工作空間，剛畢業那年我將打工存下的一筆積蓄，用來裝修自己的小小工作室，自得其樂過了幾年慢活時光，只是在鄉下地方選擇並不多，幾年後還是必須面對，是不是要北上找更好的發展機會。
如果選擇跟許多南部人一樣，到北部地區工作，也許會是一個理想的選擇，更多的升遷管道與創業發展機會，著實是迷人的選擇，讓我在28歲那年難以做出選擇。
偶然的機會，我與台中結下不解之緣。原本只是陪著需要買房子的朋友，在週末到處看看預售屋，而一次本來只是鬧著玩的「團購」，最後居然成真，開始了揹貸款的苦逼人生。但是那幾年，在台中太原路一帶的重劃區（那時還是一片荒蕪之地），大約四、五百萬可以找到二或三房格局的預售屋，雖然一點都不便宜，但還是辛苦節儉過日還能勉強負擔的範圍。
於是我放棄了北上發展的念頭，在交屋後把工作室遷到台中新宅，再一次享受打造全新工作空間的樂趣，這次花了更多的預算，但也擁有了自己的小小書房、視聽室與工作狂專屬電腦空間，以及一套 Herman Miller Embody 與 Envelop 人體工學桌椅。
每個人心中認定的宜居也許不同，但是我喜歡台中的生活。剛搬來台中的那頭一年，空氣品質還沒有那麼糟，可以經常在夜晚和週末沿著河堤騎單車到大坑運動，經常有新開幕的美食餐廳與咖啡店而且價格親民，也能繼續過著對鄉下人來說比較熟悉的慢生活。
於是，我決定在台中多住幾年，更深地參與這個城市的發展。
Kyle",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190683,AI&MachineLearning,0,利用MSBotframework與CognitiveService建構自用智慧小秘書系列,1,01.為什麼要寫這個題目與系統架構說明,DuranHsieh,https://ithelp.ithome.com.tw/users/20091494/ironman,1512431751000000000,773,"每天早上進入辦公室，總是會先檢查信箱， 開啟行事曆與工作清單，來作為一整天工作的開始， 避免自己遺忘了那些工作、教材、約會、進修、聚餐、出遊、社群活動...等； 有時候為了申請出差或其他補助費用， 翻遍電腦尋找公司統一編號； 阿... 又忘了公司地址， 翻遍了背包， 還好從名片上找到了； 氣溫突然下降， 空氣品質又變差， 沒注意氣象資訊的我， 一路發抖一邊碎碎念地騎車回家。
這些瑣碎的事情不困難， 但每一次皆需要花費時間與力氣才得以完成，而且不斷的重複上演。  這段期間， 我嘗試許多不同的工具來幫助自己， 像是 trello, one note, dropbox paper, google keep..等， 處理繁雜事務的過程有改善不少。  但每一次的整理與搜尋(資訊越來越多) 仍不是很方便， 總是覺得還有精進的空間。
去年年底， 想要改善持續整合流程開始接觸 MS Bot framework， 透過 Skype Bot 做了一個自動壓力測試與產生報表的小專案； 而今年， 聽了小白在社群關於 Cognitive Service 的分享， 加上 openhack 活動曾經動手介接的經驗， 決定嘗試寫些東西來看看能不能做些應用， 改善自身處理瑣碎事的效率。
身為一名生活忙碌的工程師， 這次嘗試盡可能使用已有的軟體、套件與服務來達到需求，而不要求每個功能都要純手工完成。
綜合以上幾點， 初步我們有了下面的架構/流程圖。 (因為後續延伸的服務不同， 可能流程會有些微差異， 屆時再個別補充)

我們有些資訊需要透過機器人主動通知我們， 或許我們會透過現有的排程套件或服務，在某個特定時間提醒我們必要的資訊。 雖然目前未決定會使用何種方式， 但應該會希望採取服務的方式來進行， 減少寫程式開發的時間。

使用某些特定 Cognitive Service， 必須匯入相關資料後讓系統進行訓練。 目前預計執行的時候盡可能透過程式進行匯入工作， 一方面可以提供自己未來使用，另一方也可以範例程式給有興趣的朋友參考。
最後透過給予機器人相關命令後， 傳送結果給自己。

目前構想的流程與架構如上所述，因為很臨時才決定參加鐵人賽， 沒有像去年一樣有幾篇備份或許多已經實做過的程式， 所以本篇文章的系統架構在比賽達陣前會持續的更新。
另外，這次的家犬機器人是 雪納瑞 。因為很可愛，所以讓你看一下

使用服務：
資料來源：
開發相關：
Study4TW 12月活動(台中) - Study4.TW-Dec-2017
http://study4.tw/Activity/Details/13
前端大型系統的基石 TypeScript - Gelis Wu
一位資深.NET開發人員的口袋Visual Studio 2017擴充套件的敗家筆記 - Bruce Chen
Study4TW 01月活動(台北) - Study4Love 與大師對談
http://study4.tw/Activity/Details/12
15 位講師，分享他們的專業知識和經驗，在一整天的議程中，您將可以盡情地享受 IT Infrastructure、Dev、Agile、DevOps、Azure、Database、AI...等相關的議題
本系列文章將同步分享於個人部落格與點部落
http://dog0416.blogspot.tw/
https://dotblogs.com.tw/dog0416","['前言', '系統架構 (持續更新)', '系列文章相關資訊', '社群活動推薦', '其他']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190681,ModernWeb,2,如何在前端開發流程中加入使用者經驗設計-以線上相簿為例系列,1,前端工程師需不需要會UX？,yowlonglee,https://ithelp.ithome.com.tw/users/20091606/ironman,1512431386000000000,738,"當然可以不用，如果你的團隊裡有非常靠得住的設計師或 UX 研究員，你的工作只需要依照他們給的規格和靜態圖來開發就好了。
然而事情有時並不能盡如己意，我們不能選擇隊友，卻可以選擇要不要受制於隊友。如果你的工作只是在滿足架空的需求，不會覺得時間都浪費了很可惜嗎？這個時候就是要把主導權拿到自己手上。
產品不是做給自己爽的，是要做給使用者，或者是給客戶用，他們覺得好用，才是好產品。所以愈早摸清他們的需求，等於增加開發的成功率。
開發案在沒有找使用者測試情況下，工程師用自己的常識來通靈，做好後才給客戶看，頭都洗下去了客戶也就勉強接受。事實上他們也不清楚自己要的是什麼，但是他們會根據看到的東西做評論，於是工程師只好根據客戶意見修改和加功能，這個狀況跑個幾次，最後整個產品像是個拼湊起來的結果。
學UX很難嗎？
這裡提供幾個範本和工具教你如何做使用者訪談，以及工作項目。
本系列分成三部分
第一部分教你如何在一開始就探索出使用者需求，使用者訪談的方法、問題範本。UX 三要件：User story, prototyping, mockup.
第二部分是即使在沒有設計師支援下，也可以用 Material Design 及 8 point grid system 製作出好看的 RWD 佈局。
第三部分開始進入開發，介紹 ES6 語法，建立 React 開發環境，撰寫元件，做出功能。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190677,自我挑戰組,0,如何用電商一個月從0賺到100萬系列,1,day1.我他媽為什麼要寫這個主題,ocom,https://ithelp.ithome.com.tw/users/20107558/ironman,1512431001000000000,2559,"第一天先說我為什麼要寫這個主題，起源是我們公司一群工程師討論說要參加這個比賽，我一時嘴賤說我隨便寫寫都能打趴他們，他們居然敢頂嘴，說輸的人請牛排，媽的逼為了一餐牛排，我給自己挖個坑跳了進來，所以我就來參加這個鐵人賽了，所以我會懷抱著滿滿的怨氣來寫這篇主題，說在前你他媽看不慣髒話的，就給我快點滾，不能接受我風格的，也給我滾，老子不缺這點瀏覽數。
如果是自以為是的高尚臭偽君子，我勸你不要看，因為我這30天會滿滿的都是髒話，你會被我幹到懷疑自己的人生，幹到不能自己，但如果你是個真誠的君子，看完後你就會看爽到飛天，你會想跪下來叫我大神，然後跟你身邊的人說你神功大成，叫身邊的人都跟你跪舔。
廢話不多說，這個主題我會實踐我這幾年來做電商的經驗，用實況的方式來實現怎麼一個月從0賺到100萬，但我不保證能做到，因為這他媽實在是太難了，你以為說說就能做到，你就是個白癡，還有如果你是來看笑話的，現在可以滾了，我是完全不負責任的在寫這篇文章，完不完成我根本不在乎，因為寫完我他媽的只會得到一塊牛排，然後還要教你們這些人賺錢，真是幹到死。
老話ㄧ句，不想看髒話的滾，想看笑話的滾，想來學賺大錢的也他媽給我滾，老子沒義務教你們，我他媽就是為了一塊牛排，我他媽就是狂，操。
第一天是用來給我自己抒發情緒的，我最近的紀錄是兩天賺50萬，你可以當我唬爛，我也真的是唬爛，信不信隨便你。
明天開始就是正式的開始了！
最後我還要罵一下髒話，幹！我他媽沒事找事做，為了一塊牛排，我操要寫30天，我真是大傻逼，乾！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190674,自我挑戰組,0,勇者不冒險，嘴一回桌遊系列,1,[Round1]題目就決定是你了,魯大常,https://ithelp.ithome.com.tw/users/20103688/ironman,1512430265000000000,720,"自從去年光榮的斷賽後，就打定主意今年一定要再次參賽再斷賽，
至於題目的選擇以一個正常人類來說，當以中規中矩的總結今年的學習旅程...
但，創新一直是 IT 界引以為傲的精神，
每年、每年、甚至每日都要版更一下 。
因此，對! 沒錯! 今年要挑戰的的創新鐵人賽目標就是不・談・技・術
(這樣就有希望完賽了吧...)
那麼如何選擇出一張嘴的題目呢，有幾個方向如下:
衡量相關性與難度之下，想起玩遊戲、嘴遊戲的日子，
也常常覺得這款遊戲如果來讓我設計的話，好玩度x100。
再著也曾有遊戲開發者建議想開發遊戲的人，可以先試試看設計一款桌遊，
畢境桌遊的成本小，也可以快速驗証核心的機制好不好玩。
所以，題目就決定是你了! 30天嘴出一款桌遊。
由於是30天的鐵人賽，除了本篇較雜亂的寫下思緒，
後續的回合會盡量的以有順序、結構式的方式撰寫。
而這個題目最終的目，在於驗証幾個議題
下一回合要上場的是，如何規劃流程...",,['題目: 勇者不冒險，嘴一回桌遊'],,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190617,自我挑戰組,0,資安學習分享系列,1,第一天,abspsp5600,https://ithelp.ithome.com.tw/users/20107449/ironman,1512430201000000000,664,"現代科技發展迅速手機或智能手錶等配帶型智慧裝置，
在未來可能會成為各項電子設備間的橋梁，
通過網路，便能連結上所想要使用的電子產品，
現今虛擬貨幣更加方便，
手機小額的付款，電子錢包都是正在快速的普及，
資訊安全則是越發重要。
希望透過著個活動讓自己更加了解一些相關知識，
讓我們一起加油吧~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190641,自我挑戰組,0,從無到有建置一個網站過程byC#mssqlhtml5+javascript系列,1,Day1-緣起為什麼要參加這個活動,qsc811022,https://ithelp.ithome.com.tw/users/20091338/ironman,1512428274000000000,679,"Day1
當初為什麼要參加這個活動，因為我要告訴我自己能夠持續三十天寫文章
我大學到研究所沒有用程式語言寫出一個東西來，這次要靠這個活動寫出個東西
http://finepoet.myweb.hinet.net/
我將會改寫以上網址的內容,後台將會以C# mssql 做撰寫
開始想明天要怎麼寫完",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190583,自我挑戰組,0,軟體工程漫談系列,1,<前言>懶惰的工程師萬歲粗談DevOps與軟體工程,Kuma,https://ithelp.ithome.com.tw/users/20107429/ironman,1512428109000000000,731,"在IT鐵人賽，選擇非技術主題，其實只有一個原因，這裡老司機太多了。你要聊Docker，還是要聊Java，這樣的技術主題在平常ithelp就已經很多了。看了一看，好像聊軟體工程的文章相對少了一點，那，我就來身先士卒囉！
一直以來，我都認為軟體工程和軟體設計是兩回事。要寫出好的軟體，首先你要有好的技術，精準地時做出正確的功能。然而，軟體工程在台灣，則不管在業界或是學界，都是最被忽略的一塊。
軟體工程是什麼？把程式寫好，QA測完，放上線賺錢，這不就是最棒的軟體工程了嗎？哪有什麼比這更好的？非也，非也。軟體工程包含工作流程、團隊組成、程式設計、測試流程、驗收標準、版本控制、部署流程、品質管控等，內容包羅萬象，要精通全部實在是太難了。
偏偏，做了好的軟體工程，代表公司就能賺錢嗎？也不見得。在公司發展初期，光是要拚功能就已經很喘了，誰有時間跟你在那邊管流程與精實？久而久之，當這套老方法深植大家心中，但程式與功能都已經大到人類無法handle的地步時，技術債就出現了。怎麼辦？大幅度重構囉！大幅度重構對公司與員工的傷害有多大，不用我說，你也懂的。
但我必須說，軟體工程是一件沒有績效的事，對於台灣絕大多數的企業來說。他充其量就是讓你的生活好過一點而已。要鑽研，就要犧牲一點績效，你要嗎？如果您也有這份決心，想要踏上優良軟體工程的不歸路，那，我們用接下來的30天，一天一主題，看看身為工程師，你要怎麼簡化工作，減少出錯，提高效率吧！
明天見！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190611,自我挑戰組,0,成長型維運平台-單人新手到多人團隊都適用的工具系列,1,1-1.監控工具之一:ZabbixServer,etsaycood,https://ithelp.ithome.com.tw/users/20077752/ironman,1512427562000000000,1002,"說到監控，最基本就是看看CPU、Memory等基本狀態，再來Ping一下目的看網路有沒有通，因此第一步先找尋能幫助我們做這些工作的工具。
選工具的方式很簡單，第一先去看該類商用工具，第二查相同類型是否有opensoft工具。
需求
(功能面)
基本監控,能顯示圖表
(擴充面)
有API接口,能夠建立Cluster
這裡我選擇使用Zabbix搭配Grafana(產生儀錶板)

架設:
快速的方式可選擇(.vmdk)或(.iso)直接試玩 https://www.zabbix.com/download
以下作業系統CentOS7依照Documentation架設
https://www.zabbix.com/documentation/3.4/manual/installation/install_from_packages/rhel_centos
#selinux關掉
#安裝apache , mysql
#安裝Zabbix Server (3.4版本需添加)
sudo yum-config-manager --enable rhui-REGION-rhel-server-optional
#設定Zabbix SQL (mysql>別複製，代表在SQL下的指令，'zabbix'DB密碼可自行修改，zcat後面路徑不同系統可能路徑不同，Enter password:輸入DB密碼)
#設定Zabbix Server (zabbix_server.conf>不要複製，DBPassword改成之前設定的)
#設定時區(zabbix.conf>不要複製)
#firewall(10050,10051 Zabbix Agent的服務port, 80網頁)
#服務全部重啟及設定開機啟動
#補充mysql建失敗重作
#補充刪除rpm，版本升級時需要，
#補充安裝功能相依插件
Zabbix儀錶板，美觀方面可以接grafana,後面會介紹。特別好用功能為Maps功能，方便做故障排查用

Linux 指令可參考
https://ithelp.ithome.com.tw/articles/10077313
一些zabbix介紹
Google Cloud Platform monitoring with Zabbix
https://www.slideshare.net/maxkuzkin/google-cloud-platform-monitoring-with-zabbix

Zabbixとjob scheduler連携による運用システムoss化の実現
https://www.slideshare.net/ikedai/zabbixjob-scheduleross
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190638,自我挑戰組,2,D3.JS網頁視覺化學習系列,1,Day1學習目標與個人札記,linonedollar,https://ithelp.ithome.com.tw/users/20107135/ironman,1512427540000000000,725,"關於這次鐵人賽其實思考了很久，才終於下定決心要參加。
簡單介紹一下自己，是個接觸程式兩年多的學生，對於很多程式的理解遠遠沒有其他同時進行鐵人賽的前輩來得深。
對於動筆的想法一開始也是放棄，是後來看到回文的大大的鼓勵留言才嘗試來做做看，變成更好的自己。
也是給未來的自己，希望在五年、十年後，回頭看見這三十貼的文章，會感謝現在踏出這一步的自己
這次我所選定的主題是最近很很多人使用的視覺化套件-D3.js
這是一個JavaScript函數庫用於操作資料數據的應用程式
可以用來使我們網頁上的數據資料更直覺化讓大家了解你想傳達的訊息
對於現在資訊爆炸的時代而言，一張好的圖片價值千""字""
假設同樣傳遞的相同資訊，用圖片來讓大家產生興趣的效果遠大於文字
如台灣空汙的狀況非常嚴重，PM2.5指數高達70
和同樣一張圖來傳達資訊（圖片來源：零時政府）

相信大家就能感受到其中的差距了",,"['緣起', '關於D3', '進度表']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190670,ModernWeb,1,平時沒注意的JavaScript-JS生態系及週邊工具整理系列,1,打造MessengerExtension-Day1,"AlexTzeng,曾苔眠",https://ithelp.ithome.com.tw/users/20107440/ironman,1512426928000000000,1823,"在你的 Facebook 粉絲專頁上加入一個「使用 Extension」的按鈕
並且打開後可以顯示一個你指定的網址
以及以後，你在手機版 Messenger 左下角按 (+) 時，都能跳出你指定的網頁
要能使用 Messenger Extension，因為這個功能跟粉專是綁在一起的
你必須先創一個粉專，點擊 https://www.facebook.com/pages/create/ 就行了

這邊不用太計較細節，隨性選個類別和名字就可以了
我這邊創了一個粉專叫做 Hacker Reader
因為我打算使用 https://news.ycombinator.com/ 來當作首頁的網址
並且放了一個相對應的 Logo

接下來，我們要去做額外的設定，才能為你的粉專加上 Messenger Extension
現在打開 https://developers.facebook.com/

基本上這是 Facebook 專門開給想使用 Facebook 周邊功能來建 app 的開發者用的文件
其中包含了如何使用 Facebook 做第三方登入、分享至 Facebook、使用 Messenger 的相關 API
基本上每年關注 Facebook 開發者大會「F8」就可以知道今年又多了什麼新功能
https://www.f8.com/
這邊我們要做的事情很簡單，右上角按「My Apps」
選擇「Add a New App」

填入相關資料

之後我們會把這個 Facebook App 綁到我們的粉專上，如果你想要有更多的 Messenger Extension，只要多創幾個就好了
點選左邊「Add Product」

按下 「Set Up」

接下來左邊應該就會多一個 Messenger 了

Google 搜尋 Messenger Extension / Chat Extension
可以找到一篇 Facebook 寫關於如何設定的文件
https://developers.facebook.com/docs/messenger-platform/guides/chat-extensions

其中我們要做的第一步，就是設定 home_url
就是我們把 Messenger Extension 點開，應該出現什麼網頁
找到 「Configuring the Drawer Entry Point」

這篇文件就是在介紹 home_url 的用途，以及如何設定

不過這邊文件寫的比較不清楚的是，他沒告訴你怎麼 Call 這個 API
仔細查詢之後，可以發現原來所有的設定都得要透過呼叫 Facebook 的「Messenger Profile API」

https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/
實際閱讀了文件後
可以看到 API 會使用一個 URL
https://graph.facebook.com/v2.6/me/messenger_profile?access_token=<粉專的token>
並且 Headers 能帶的欄位有很多種，包含 account_linking_url、get_started、whitelisted_domains、home_url
我們在這邊只在乎 home_url，我們來看看 Facebook 給的範例應該怎麼做

他這邊的範例是使用 Shell 上的一個指令 curl，來呼叫這個 API
我們這邊打開一個常用的編輯器，整理一下設定 home_url 的指令應該是什麼格式

接下來就可以直接貼到你的終端，按下 Enter 了

這邊如我們預期的會回傳一個錯誤，因為我們現在還沒使用正確的 token
我們必須要去拿你粉專的 token 來才能設置 home_url，token 裡面會包含了該設定哪個粉專 & 驗證身份
到目前為止的 code 我上傳在 GitHub，是第一個 commit
https://github.com/alxtz/Iron-Man/commit/b0e5d55
今天就到此結束了，明天我們將會介紹使用 token 來設定 home_url，並且讓 Messenger Extension 實際跑起來","['目標', '直接開始吧！', '打開 Facebook 開發者網頁', '開始設定 Messenger Extension', '設定你的 home_url (Extension 開啟的網址)', '「Messenger Profile API 文件」', 'Set/Update Properties']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190659,ModernWeb,1,Nest.jsframework30天初探系列,1,Nestjsframework30天初探:Day01攻略行前說明,Michael,https://ithelp.ithome.com.tw/users/20107195/ironman,1512426312000000000,1456,"NodeJS 後端框架眾多，唯獨Nestjs 這框架最吸引我，雖然今年三月底出爐，還算蠻新的框架，網路上資源不多，但我相信日後它會有一席之地，因為我在努力推廣XDDDD，阿不是，是因為它架構嚴謹，能寫出高品質的程式。
JavaScript是弱型別語言，型態轉換很自由，型態檢查也沒那麼嚴謹，這可搞死很多工程師，近幾年雖然有ES6、ES7、ES8的出現(ES9正在擬稿)，可以幫助工程師提高程式品質，但跟強型別語言還是有些差距，於是出現了TypeScript，可以用TypeScript寫出強型別風格的程式碼，再透過Babel轉換成指定版本的JavaScript(ECMAScript版本)。
Nestjs的官網建議使用TypeScript，後續的示範都會以TypeScript去撰寫，如果要寫一般JavaScript也是可行的，不過官網有提到，有些Nestjs的API無法用JavaScript去呼叫使用，所以使用TypeScript作為開發語言會比較好。
基於上述幾個特點，Nestjs做了很多抽象層，程式如果是用Nestjs開發，會較接近低藕合架構，甚至開發速度也會有大幅提升;另一方面，Nestjs的底層是Express框架，在使用Nestjs開發時，也可以呼叫Express的API，而且Express作為最多人使用的NodeJS後端框架，是有潛力吸收廣大使用Express開發的工程師，建立龐大活躍的社群。
筆者文筆拙劣，程式功力薄弱，說明解釋不佳或程式有問題之地方，請不吝指教。
專案架構圖

console結果
console結果
程式碼都在github",,"['筆者廢話時間', '前言', 'Nestjs Framework幾個特點:', '筆者30天規劃', '歡迎大家討論指教', '準備環境(筆者環境)', 'Nestjs專案準備步驟']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190666,自我挑戰組,0,30天自我挑戰系列,1,DAY-1從IT想到AI,claire689,https://ithelp.ithome.com.tw/users/20091382/ironman,1512426136000000000,679,"挑戰第一天
身處IT資訊科技社會中充斥再次成為熱門話題的AI人工智慧
如今看來魔鬼終結者~銀翼殺手~攻殼機動隊等電影中的電腦複製人話題越來越不是遙不可及的夢想
不禁想到了數十年前的一部電影中的一段非常發人醒思的片段
值得身處IT世界的我們借鏡
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190615,自我挑戰組,1,30天的切版日記系列,1,Day1:起個頭,Yu-Ning,https://ithelp.ithome.com.tw/users/20092794/ironman,1512425328000000000,725,"這次是第一次參加，就只希望能夠堅持下去完成30天的任務。
主題是訂30天的切版日記，內容大概是紀錄這30天工作上或做自己想做的東西時，做了什麼、遇到什麼問題、如何解決或是心得。
我不是本科系，這幾年當中完成任務的方法大多是買書來學著做、google 、看網路上的教學資源 ; 然而，越做就越發現需要有系統的學習、需要基本功，與其急著讓自己看似完成什麼高大上的任務，不如冷靜地找個老師學習，於是就報名了六角學院的課程。
算起來大概有4年的時間做著網頁相關的工作，今年開始有想往前端工程師去前進(應該說是開始認真面對此想法)。
目前工作上是html、css、bootstrap、jquery做頁面ajax套資料的日子，不過要成為前端工程師，就需要再學會套件框架之類的，眼看任務艱鉅，打算就先跟著六角學院的課程一步步向前。
既然認真地想成為前端工程師，就得幫自己弄個github帳號 , 其實很早就申請了，放著長草跟fork別人，希望以後能活躍一點...另外，實在太邊緣了，git的使用技能一直在自己開repo自己commit自己push的狀況，繼續邊緣下去，自我""衝突""和解決的能力也是需要具備的。
明天來寫關於工作上製作RWD網頁的隨筆好了。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190632,自我挑戰組,0,30天的IT大小事系列,1,[D-1]iT邦幫忙的鐵人挑戰賽第一天!GO!,KYOMAX,https://ithelp.ithome.com.tw/users/20066863/ironman,1512425191000000000,672,"    
印象中已經是第N次參加iT邦幫忙的鐵人挑戰賽了!
中間有失敗也有挑戰成功的
雖然只是參加自我挑戰組
但是絲毫馬乎不得
因為一旦開始
接下來的三十天無論風吹雨打太陽曬
絕不能半途而廢 
否則前功盡棄
[為山九仞，功虧一簣]這成語似乎在鐵人賽中可以做最好的發揮
應用在瞬息萬變的IT產業應該也是如此
撐到最後的才有機會享受豐碩甜美的果實
謹這一首MV替自己也替與鐵人賽的朋友加油!
   
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190662,自我挑戰組,0,ArasPLM開發練功30天系列,1,[Day1]開發前資料表建置-派工單,panda0909,https://ithelp.ithome.com.tw/users/20106503/ironman,1512424633000000000,699,"前言
本人開始接觸Aras PLM至今滿1年，也算是第一次學習PLM行業，整體上PLM整合是一個很辛苦的工作，不管使用哪一種PLM核心系統，都需要與客戶的ERP、MES、Excel，甚至是獨立資料庫做整合內容，因此客製化是不可避免的。在新手上路時，總是會碰壁連連的是客製化本身，所以新手只需要有基本的開發能力，很快就能適應ArasPLM這套管理系統。
本系列不包含安裝說明與如何管理這套系統，內容較偏重程式與系統本身的應用，由於第一次撰寫文章，功力不足的部分還請各位多多指教。
Aras版本 11 SP9
開始進入攻略Aras PLM產品生命週期管理系統，首先對於Aras快速的理解一下，說穿了其實Aras就是一套完整的資料庫系統，並且內建開發模組與完整的CRUD模組，全部操作皆透過資料表存取的方式完成，而對於Aras的資料表(Table)都稱呼ItemType，關聯資料表稱呼為RelationShip ItemType
讓我們快速的建置一張派工單


ItemType 新增屬性
item number
start date
finish_date
cost

RelationShip頁籤

View

TOC Access

TOC View

Can Add

Permissions

完成後的結果如下
TOC畫面多出Work Order

新增物件

完成後即可操作CRUD功能，這是透過Permission預設權限設定而來，因此不同情境也會對應不同的權限操作，接下來會開始進入Coding，利用Server Event來執行驗證與修改資料。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190656,自我挑戰組,1,,1,從第一天開始記錄,幻幽,https://ithelp.ithome.com.tw/users/20000558/ironman,1512423771000000000,1002,"其實原本是想說從開始報名的第一天開始寫文章的，
結果還是拖到開賽才開始寫文。
今年同時寫四個主題，也是累死自己的感覺。
不廢話了，這邊的主題小幫手前面10篇會整理：
本次六大主題中，比較新穎、比較艱深、比較流行的主體來做說明，
搞不好30天都在寫這些主題的介紹跟分析。
想順便穿插每天最後的比賽現況，
應該是看發文時間來決定怎麼發表比賽現況吧。
原本是打算寫個parser來抓資料分析的，但是今天開賽的時候看到官方頁面有統計
開賽天數
累計文章數
參賽組數
團隊組數
應該會改成抓資料進來就好
其他詳細會寫parser來抓吧，看看第十篇文章前能不能寫好parser
上面說明各主題的時候，也會帶入現在有在寫鐵人賽的文章推薦
至於好壞就看大家評斷了，我也是個小小工程師而已
自由心得分享還請大家多多指教就是
以下列出這次的六大主題與各主題的參考小主題：
AI & Machine Learning
AI、Machine Learning、Deep Learning、Recurrent Neural Network、Reinforcement Learning、Natural Language Processing、Computer Vision、Voice Recognition、Image Recognition、Bot、Chatbot ...
Data Technology
Data Engineering、Data Science、Big Data、Data Analytics、Data Visualization、Data Mining、Predictive Analytics、Statistics、R、Hadoop、Spark ...
DevOps
DevOps、ChatOps、NoOps、SecDevOps、Infrastructure as Code、Continuous Integration、Continuous Delivery、Test Automation、Configuration Automation、Server & Network Automation、IT Orchestration、Containerization、Docker、Kubernetes、Ansible、Agile、Scrum、Cloud、Serverless、DevOps Culture ...
Modern Web
Web Development、Front-End Framework、Web Programming Language、Web Back-End、Web Design、UI/UX、Information Architecture、JavaScript、Angular、React、PHP、CSS ...
Security
Cybersecurity、Network Security、Endpoint Security、Platform Security、Web Security、Application Security、Mobile Security、Data Security、Cryptography、Malware、Exploit、Hacking、Incident Respond、Forensics、Threat Intelligence、IoT Security、CIIP、Policy、Compliance ...
Software Development
Software Programming、Software Architecture、Software Engineering、Software Develop Methodology、Programming Language、Software Project Management、Software Quality、Algorithms ...",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190658,ModernWeb,0,PHPlaravel的邂逅系列,1,DAY01-意外遇上laravel,oliver,https://ithelp.ithome.com.tw/users/20107335/ironman,1512423720000000000,717,"在之前寫php都只是寫很單純的語法，頁面上出現各種sql、js、html，很不好維護，連一些驗證都要寫很多程式碼，才可以確保網站不會被攻擊，因為是新手難免會寫出一些危險又很髒的程式碼，導致過一段時間，自己寫的程式碼都不看懂ＸＤＤ。
剛好上網找資料，找到了laravel這個東東，看完文件後，覺得好神奇啊！很多驗證都寫好了，也有基本的安全維護。看了目錄架構，相關的東西都已經放在特定的檔案裡面了，那麼維護起來一定容易得多了，也不會造成接手的人有太大的困擾。
為什麼選擇laravel做開發呢？看了各種php的框架後，laravel生態最大、在github上面也是最熱門的框架，因為是最熱門的，那相關的第三套件一定也是最多的，而laravel本身相關的功能也最齊全，身份驗證、表單驗證或是mail的服務，安全上的防護也是相當完整的。
這30天是我的學習laravel的過程，希望能讓更多人了解程式的優點，對程式有瞭解，進而產生興趣，寫些有趣的東西。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190644,自我挑戰組,0,iflen(learning.python)==30:系列,1,Day1-列出想要熟悉的範圍,j2hongming,https://ithelp.ithome.com.tw/users/20091827/ironman,1512423255000000000,667,"最近在Udemy買了一門課程: The Python Workbook: Solve 100 Exercises，課程內容以解決題目為導向，從實際練習中去學習。因此，透過這個機會搭配鐵人賽做個練習心得和紀錄
以python3為主
以如何宣告、怎麼操作、有什麼特性、常用的手法是什麼來思考以上的東西。透過找資料、直接動手、在過程中自我對話並做練習紀錄放在github。",,"['緣起', '範圍', '參考資源']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190649,自我挑戰組,0,2017挨踢人生大事紀系列,1,起個頭先~,牛哥,https://ithelp.ithome.com.tw/users/20022541/ironman,1512422422000000000,733,"Hello, 我是牛哥！
偶而客串回文，擾亂你的挨踢人生。
呃~不抄下去了~
怕小生吉我！！
2017年裡，牛哥也自學了一些技術：docker、node.js、arduino、raspberrypi...
自M$推出了WIN10以來，也和這個新OS奮戰了好幾回合。
加上現有的公司ERP維護的種種新議題......
還有換了NAS當檔案伺服器，還另外接手了一些奇奇怪怪的任務......
應該有些材料，可以和邦友說說笑笑一番才是。
加油！！共勉之~
咦！這篇內容不就是簡介嗎？
簡介也是一篇文章，對吧~
厚顏如我，重複利用拿來當首篇，邦友們就別深究啦。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190590,ModernWeb,1,三十哩路，我的前端學習路程系列,1,Day01::開場與自介,米荳(mido),https://ithelp.ithome.com.tw/users/20106699/ironman,1512422351000000000,866,"哈囉，我是米荳(Mido)
2017/06 離開大學溫暖的懷抱
2017/08 開始學習網頁前端技術
興趣是畫圖，可以一整天抱著電繪版畫圖！
最喜歡的繪師是秋貓
在大二、大三的時候有個認識蠻久的朋友突然在FB上私訊我
「妳除了繪圖外還會哪部份?程式or前端or ?」
「再加上妳有繪圖的底子，如果再會這個應該就很吃香」
聊著聊著就知道了網頁前端這個職稱，朋友也建議我可以朝這個方面發展
高職跟大學時期都學過點HTML跟CSS但是只有應付學分的程度而已。
當時因為還在迷網，自己也找到跟本科系相關的實習機會所以就沒有特別考慮這塊…
一直到大四快畢業的前兩個月，不管怎麼找都找不到跟本科系相關的工作，老師、學長、同學甚至連朋友也不看好我
心灰意冷又無助的狀態下才突然想到朋友提過的事情
五月底，畢業展覽完美落幕
我開始著手收集與前端工程師相關的資料還有需要學的技能
看了各大求職網站的就業資訊後問題一個個冒出來...
該怎麼開始？該怎麼學？
在茫然中找到了六角學院 - 邁向前端工程師之路！
仔細翻看文章的內容之後，心中還是有許多疑問
我還是不知道我該怎麼開始⋯⋯
學生時期沒有太多積蓄，怕自己其實不喜歡而不敢花錢買課程
於是我寫了封信到文章上提供的Email想尋求些解答
本來以為信件會石沉大海，沒想到隔天就收到回覆
目標明確後開始一個個列出自己應該要學習的技能清單
然後抱著工欲善其事必先利其器的想法，在畢業典禮前一個禮拜用學生證分期買了一台MacBookPro 來切斷自己的後路
(明年七月才繳的完(ˊ;ω;ˋ)
學習初期是由Codecademy的線上學習課程慢慢開始學習
除了線上課程以外還買了HTML & CSS : 網站設計建置優化之道搭配著看
現在我在好想工作室學習網頁前端的技術，時間也來到五個月的時間了說長不長說短不短
藉由參賽來把自己所學過的東西整理成一篇篇的文章，希望能獲得更多回饋與交流
接下來會試著發表與CSS相關的東西
像是SCSS的功能用法、CSS繪圖、動畫、結構化與自己在學習上碰到的一些問題等等⋯⋯
第一次參賽，還請多多指教！
",,"['簡短介紹', '主因', '方向']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190575,自我挑戰組,2,如何成為工程師?(從工地到前端工程師)系列,1,[Day1]一開始，#100dayscodechallenge,dannyhuang,https://ithelp.ithome.com.tw/users/20107433/ironman,1512422218000000000,940,"今年是我第一次參加鐵人賽。我想藉由這次活動把我今年的轉變紀錄起來。 今年一開始的時候我其實不是在web development 這個行業。 我是在建築業在工地監工。 但是我一直對寫程式有一份熱情。 我覺得可以透過程式語言就可以做出一個產品是非常的酷。
其實我以前都有試過想要學programming, 但是每一次都是因為懶散或碰到挫折而放棄。 我在某一個網站看到有一個活動叫 #100dayscodechallenge, 基本上就是每天不管怎樣都要寫程式。
那我在2017/2/4 開始了我的挑戰。 那我答應我自己不管這樣，我這一次一定要完成挑戰就算最後還是不會寫程式也沒關係。 當然這個挑戰改變我的生活，我也成功在挑戰玩 順利轉職成為前端工程師。
這是我100天挑戰的時間線 詳細100的log
1-30天 做程式相關的教程， 看書
36天 完成freecodecamp 前端認證
45天 完成第一個react app， react markdown app[github] [demo]
48天 完成第一個react&redux app. Finish React+Redux Recipe+Box App[github] [demo]
50-60天 玩D3
60-75天 練習CSS切版， 也認識build tool, gulp
83天 完成netflix clone app [github] [demo]
85-95天 開始投履歷， 面試
97天 獲得第一份offer
接下來的文章 我會針對我在這一年學到的不同的技術(html, css, javascript, react, ...)來寫個技術文章。
這是我的GitHub github
這是我的freecodecamp 前端認證 link
這是我自己的blog link",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190643,SoftwareDevelopment,1,每天Racket3分鐘系列,1,"(defineday-00""以史為鏡，可以知興替—從Lisp到Racket"")",cchuang0425,https://ithelp.ithome.com.tw/users/20085418/ironman,1512420619000000000,661,"這一系列，是以一個相當有歷史典故的程式語言家族為主角，從它的故事，到語言特性，到實務應用。每一篇盡量控制在各位三分鐘以內可以閱讀完畢的篇幅。
我不是程式語言專家，我只是個喜歡寫程式的人。
之前聽過一個笑話，那笑話是這麼說的。
美蘇冷戰時期，有個蘇聯間諜費盡千辛萬苦地從美國偷來一個 Lisp 程式碼片段，結果因為偷到的是最後一頁，只有成堆的右括號 ))))))))))))))))))))))))))))))))))))))))
在人類開始用機器進行運算時，便一直有個夢想，那就是機器可以與人同等。第一個正式提出人工智慧的，是一名叫 John McCarthy 的電腦科學家[1]。他不只提出人工智慧這個想法，還著手設計了一個語言，希望可以讓機器像人類一樣思考。那時，電腦是大型主機，程式要寫，必須使用組合語言來進行，在 John Backus 設計出 Fortran 的後一年（1958年），John McCarthy 設計出了 LISP 語言[2]。
起初，他希望可以設計一個語言，來進行 Alonzo Church 的 Lambda 演算[3] 處理，一時之間，對語法沒有太多的想法，起先是用 FUN[PARAM] 之類的語法，後來演變成為 (FUN PARAM) 這樣的語法，簡稱 s-exp（s 表示式）。最後，Lisp 的開發人員發現這樣的語法簡潔而有效率，便使用至今。
Lisp 在電腦界很紅，可是它有個缺點，它使用了 dynamic scoping[4] 的機制，這個字暫無中文翻譯，所以我們使用原文。它的意思是說，當你的函數呼叫了一個不存在它內部定義的變數時，這時語言會到函數被呼叫時的那個區塊裡找尋這個變數，這導致了程式常常發生出乎意料的事情。
到了 1975 年，MIT 有兩位教授 — Guy L. Steele 與 Gerald Jay Sussman 提出 Scheme 語言 [5]，使用了 lexical scoping [4]，並簡化了 Lisp 的設計後，使得這樣子的一門語言，穩定性與嚴謹度得到相當大的提昇。
Gerald Jay Sussman 並為這門語言寫了一部曠世鉅作 — Structure and Interpretation of Computer Programs，簡稱 SICP [6]。本系列文章，偶爾會拿 SICP 的基本範例來說明。
Scheme 其實不算是一門具有特定實作的語言，像 C# 完全由 Microsoft 實作與維護那樣。Scheme 的設計者們透過標準的制定，使得外界各個學術與開源團體可以自行實作，最新的版本已經到了 R7RS。而在漫長的發展過程中，有另一支來自 Northeast University 與 Brown University，以 Matthias Felleisen 與 Mattew Flatt 教授為首的 PLT 團隊開發了自己的 Scheme 實作 — PLT Scheme。顧名思義，那時的 PLT Scheme 主要的語言特性是由 Scheme 規範而來。
於 2010 年，PLT Scheme 改名為 Racket [7]，從名字與 Scheme 開始分道揚鑣，也有了些自己的語言特性。原本是兄弟，但現在或許稱朋友倒是比較合適。",,"['1. 從前有個間諜的故事', '2. 最古老的高階語言 - LISt Processer', '3. 法師與他的咒語 - SICP 與 Scheme', '4. 是兄弟還是朋友 - Racket']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190642,DataTechnology,0,Python學習筆記系列,1,[Day1]要如何在電腦上安裝Python?,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512420154000000000,763,"最近加入一個Udemy的線上課程，課程名稱叫做""Complete Python Bootcamp: Go from zero to hero in Python""，是由Jose Portilla講師授課。
在這裡想分享有用的上課知識給各位，並邊督促自己在Python上的學習 :)
本身也是剛開始學習Python語言的新手，若有不足處，不吝指教。
那我們就來進入這篇文章的主題，來談談該如何安裝Python。
在Jupyter這個平台上面我們可以跑很多種程式語言像是Python、R和Ruby等等，不過安裝Python是先決條件，對初學者來說，最簡易的方式是直接到 ""Anaconda"" 去下載這些軟體。
Anaconda可以稱之為Python的大補帖，它不僅僅包含Python、Jupyter、也包含許多流行的資料科學、科學計算的套件。
以下就讓我們一步步地來安裝Python所需要的套件
Step1 : 下載“Anaconda”(你可以選擇Python3.6版64_Bit或Python2.7版64_Bit(2020年後將不再支援2.7版)安裝檔

1.選擇你想下載的版本
Step2 : 安裝你下載的版本
你可以點這裡去取得如何安裝Anaconda的資訊，點選。
]
1.按下一步

2.點選 I Agree

3.如果你不是管理員，請點選“Just Me”

4.你可以按Next

Step3 : 安裝完後，確認Anaconda Navigator(包含在Anaconda裡)是否可以執行，如果可以執行，那Anaconda及安裝成功

Step 4: 現在我們要將Python放入Windows的環境變數裡




一旦你將環境變數設定好，到命令提示字元並打ipython，如果電腦成功辨識並可以開始編輯Python code，那整個設定就完成了~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190639,自我挑戰組,1,服務桌從開始到進入資安領域系列,1,[Day1]服務桌的日常:方便看一下問題和操作流程嗎?,doraemon,https://ithelp.ithome.com.tw/users/20107398/ironman,1512420132000000000,729,"人往往在敘述問題時，會用自已當下所見聞的來反應問題。
你以為、我以為，2者有可能是不一樣的東東...
遠端桌面的工具很多，可以選用系統或應用程式內建的、亦或是第三方工具。如果可以，個人偏好選擇使用者已安裝的系統、應用程式內建的遠端連線功能，把改變使用者電腦環境的機率降到最低。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190636,自我挑戰組,1,delphi菜鳥入門日記系列,1,delphi菜鳥入門日記-Day1簡單的自我介紹,getfree84419,https://ithelp.ithome.com.tw/users/20107544/ironman,1512420012000000000,691,"大家好，我是Kiang是一個菜鳥新鮮人，
為什麼我會接觸到這個delphi語言呢?
這是我的第一份工作所使用的語言，
雖然並不是什麼主流的語言，
但我希望我可以從這裡開始磨練自己的邏輯、想法，
所以未來我有甚麼講錯的地方也麻煩大神們不吝赐教，
再接來的日子裡我也期望我可以堅持下去(包括這裡(汗))，
那麼今天就簡單說一下我學習的方法。

完。
.
.
.
.
.
沒錯!!在我學習的過程中，不管有什麼不懂的東西，通通往Google找就對了!!
不過還是會有一部分的用法在網路上寫得讓人不是看得很懂(畢竟我是菜鳥ㄚㄚㄚㄚ)，
這時候就是要戴上120%的笑容(疑?)跑向前輩那裡去問(我相信各位身邊一定有人可以詢問的)，
沒辦法，不懂、不會就是要問，不然你在那邊想破頭殼也只是看著時光飛逝而已。
然後
實作>看
一定要自己動手做做看阿!!
再來，就自行去網路上找安裝方法囉!
CodeGear.Rad.Studio.2009<--我使用的版本
大家不一定要跟我用一樣的版本(畢竟我這是公司提供的)
安裝好之後
第一件事
打進去就對了
然後
我們下次見吧哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈
PS.我這裡不會教太多軟體的操作，所以請花點時間去研究一下吧~~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190634,ModernWeb,0,JavaScript基礎二三事系列,1,Day01　前言-克服JS的奇怪部分,Simon,https://ithelp.ithome.com.tw/users/20104221/ironman,1512418828000000000,861,"JavaScript，一種高階程式語言，通過解釋執行，是一門動態型別，物件導向（基於原型）的直譯語言。它經由ECMA（歐洲電腦製造商協會）通過ECMAScript實現語言的標準化。它被世界上的絕大多數網站所使用，也被世界主流瀏覽器（Chrome、IE、FireFox、Safari、Opera）支援。
//引述自維基百科
大家好，我是Simon，目前是一位菜鳥F2E。
有多菜呢？前端工程師任職不到三個月(第一份正職工作)。
開始工作後，有感於(下班後)學習力降低，決定配合鐵人賽30天，有計畫地看一個線上課程影片，每天看一點，30天也是能累積不少知識的，這裡也感謝六角學院的活動推坑。
在網頁後端的世界中，程式有很多種可供選擇；而在網頁前端的世界，稱霸這領域的就是JavaScript了。身為一個Junior碼農(笑)，工具怎麼用是一回事，了解這工具的特性又是另一回事，比起特意去摸JS框架，好好摸一摸JS的特性對我還比較有幫助。既然是筆記型式，主要目標課程則是Udemy上，不少前端工程師推薦的克服JS的奇怪部分這堂課，至少要能看完第六、七章節。
希望透過鐵人賽這活動，在30天好好複習JavaScript，專注在語言本身上。
預計涵蓋""克服JS的奇怪部分""的章節有：
實際上會涵蓋的內容大綱有：
文章內容會偏向筆記複習與紀錄，還請各位前輩不吝指教囉。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190635,ModernWeb,0,TypeScript初學之路系列,1,Day01-InstallTypeScript,TomasLin,https://ithelp.ithome.com.tw/users/20103639/ironman,1512418640000000000,679,"寫了 Javascript 一段時間
Nodejs 與 Javascript 前後端之亂
出現了 browserify 來統一了前後端
近幾年的 ES5 ， ES6， ES7 大亂鬥
也需要由 babel 來緩和三個世代的戰鬥
但是快速發展的同時
版本之亂也是一個很大的問題
之前就有聽說過 TypeScript
直到近幾個月才有空開始玩了一下
也有它存在的優勢
所以就開始跳下來學習
趁著這三十天整理一下心得
有兩個主要的安裝方式
Visual Studio 2017 和 Visual Studio 2015 預設已經有使用 TypeScript ，但若是你不希望安裝 Visual Studio 你也可以安裝 TypeScript
helloword.ts
寫完之後要經過編譯才能執行
同一個資料夾中會多一個 helloworld.js","['緣起', 'Hello world']",['第一天當然就是要安裝啊'],"['Visual Studio', 'NPM', '哈囉 世界', '哈囉 TypeScript']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190633,ModernWeb,0,重新認識JavaScript系列,1,重新認識JavaScript:Day01前言,KuroHsu,https://ithelp.ithome.com.tw/users/20065504/ironman,1512415865000000000,1569,"第一篇好像大家都會寫寫緣起、總綱之類的介紹，那我也來寫一下好了。
其實我想介紹的主題一點都不 Modern，但主辦單位也沒有 Old-school Web 讓我選，只好選 Modern Web 了。
身為前端開發者，挑選 JavaScript 作為主題也是相當合理的。
其實最主要的原因在於前端領域在最近幾年來突飛猛進，各種前端工具、框架百家爭鳴。看了很多初入門的朋友也許拿了工具會用，照著 tutorial 走一次也會動，但想自己改卻怎麼樣都改不動，好不容易試出來，卻不知道為什麼會動，這是最可怕的。

(來源)
作為這個世代最友善(?)的程式語言，似乎很容易抄起範例改一改就會動了 (大誤)
但是寫錯也就直接掛掉不囉唆 (無誤)
既然是「重新認識 JavaScript」，那麼預計會分成幾個部分：
JavaScript 歷史與基礎篇
這個部分，主要會來介紹 JavaScript 的簡介與語言的基礎，期望能讓初學 JavaScript 的朋友快速上手。
瀏覽器裡的 JavaScript: BOM 與 DOM 篇
有了基本的理解之後，接著來介紹 JavaScript 的主戰場「瀏覽器」，到底 JavaScript 是怎麼操作我們的網頁？那些人家說的 DOM 、事件又是怎麼一回事？ jQuery 真的再戰十年嗎？ 在這個部分都會詳細的介紹。
深入理解 JavaScript 核心篇
如果跟著系列文看到這裡，相信你對 JavaScript 已經有相當程度的理解了。
接著我們要來深入理解 JavaScript 語言的核心概念: 函式、物件、原型鍊，以及開發時會 爆的各種粗口 遇到的各種坑。
JavaScript 的現在與未來: ES20XX、前端框架與開發生態圈篇
近年前端框架與開發生態圈的發展快速，究竟工具怎麼挑選？ 模組化？ SPA 與 SSR 又是什麼？ CSS 的管理、前端語言的預編譯？ 在系列文的最後，我想花點時間來簡單聊聊 JavaScript 生態圈的過去、現在與未來。
我將主題定為「重新認識 JavaScript」，就是希望能在這個主題當中，以 30 篇文章的內容與各位一起重新認識 JavaScript：這個號稱「世界上最被人誤解的程式語言」。",,"['為什麼是這個主題？', '預計的內容']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190587,ModernWeb,1,新時代的網頁框架比較--淺談Rails、Django、Phoenix、Laravel系列,1,動態網站框架：Rails、Django、Laravel、Phoenix、Sinatra,bater,https://ithelp.ithome.com.tw/users/20103651/ironman,1512414778000000000,937,"作為三十天鐵人挑戰賽的第一篇，我想先說明一下系列選題的緣起。標題中除了前三種常見熱門框架之外，Phoenix （Elixir）目前還非常罕見，Sinatra（Ruby）則是鋒芒完全被rails掩蓋。這邊我說明一下選擇框架的原因：
之所以想寫這個系列的緣起是前陣子在學Elixir，當我知道居然沒有迭代器時我實在相當震驚，震驚到當下立馬發臉書動態：
這個週末利用 Code School Free weekend學 #Elixir，得知一個驚嚇到想要馬上來分享的事實：（雖然大部份人可能不懂驚嚇的點）
「Elixir居然沒有for each方法！！！」
在Elixir 裡面要利用recursion方法（自我呼叫），寫兩個條件不同的同名函式來實作loop的效果。雖說之前就知道不同語言實際上蘊含著不一樣的思考模式，但第一次遇到這樣的差異還是覺得很吃驚。
Elixir的特性是效能與高度可取用性，可能就是因為for each是效能殺手，所以先天就不支援吧（？）。雖然還是可以自己寫類似的方法就是。 link
這件事引發我很大的興趣，在我心中視為現代程式語言基本元素之一的迭代器，居然在一個新的程式語言內會沒有，也激起我對其他語言的好奇心。我是不是在不知不覺之間把Ruby on Rails視為標準答案，而忽略了其他可能，希望這樣的比較可以讓我揭開過去的盲點。
作者按：感謝網友指正，Elixir是有each與for方法的，看來這系列是出於一個誤會ＸＤ
接下來簡單簡介一下這幾種網頁框架：
http://rubyonrails.org/
沒想到我也有需要介紹rails的一天。
直接引用別人的介紹：
Ruby on Rails 是一個已經被許多公司採用的 Web 框架，是 Ruby 程式語言中 Web 框架的鼻祖，獲得了大量開發者的採用。DHH（Rails 的創始人）曾用它15分鐘左右創建一個博客。Rails 的一大特點是約定優於配置（convention over configuration）。這意味著，它比較模式化、標準化和「約定化」，開發者通常做的是相同的事情，可以讓代碼寫到最少。Rails 還使用了 MVC（Model-View-Controller），讓架構更有組織性，更周密。
https://www.djangoproject.com/
就我先接觸rails的理解，Django就像是運作在python上的rails框架，一樣有 MVC架構（但稱為MVT Model-View-Template）。
https://laravel.com/
PHP算是相當知名且成熟的網路語言，但也長期被詬病為「義大利麵」（意指寫得一團混亂）。但這些問題在引入框架後就可以得到顯著的改善。大部份的介紹都不諱言Laravel參考了Rails的概念，因此也可以理解為運作在PHP上的rails。
http://phoenixframework.org/
不光是框架，這個語言本身知名度都還相當不足。Elixir 是架構一個在古老語言(Erlang)，2013年才誕生，是一種函式導向的程式語言（有別於物件導向諸如Java、Ruby）。語法相當接近Ruby，因為語言的作者是Rails的核心團隊成員之一（又是一個像Rails致敬的產物？！），所以有相當多的Rails工程師來學。號稱善於處理 concurrency 問題，利於開發分散式/雲端運算平台。而Phoenix是Elixir的網頁框架。
http://sinatrarb.com/
本身是Ruby的一個Gem。最引人注目就是四行程式碼將伺服器跑起來，相信所有第一次接觸的人都會大為驚嘆他的簡潔性。但對我來說最大的疑惑就是，如果按照需求把最今實踐都跑起來，會不會跟rails有九成像？目前看到比較多的使用情境是API server之類的輕量服務。
至於各框架的優點、缺點，詳細比較，就留待這三十天中娓娓道來。","['Rails (Ruby)', 'Django (Python)', 'Laravel (PHP)', 'Phoenix (Elixir)', 'Sinatra (Ruby)']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190559,AI&MachineLearning,0,讓我們一起來見見歐美語音助理界的當紅炸子雞-Alexa吧!系列,1,[Day1]讓我們會會厲害的語音助理Alexa!,Bonny,https://ithelp.ithome.com.tw/users/20107290/ironman,1512413989000000000,679,"歡迎各位來到語音機器人的世界~
我今天要跟大家介紹的是亞馬遜的Echo這個語音助理
這個Amazon Echo語音助理的名字叫做Alexa!
Amazon的語音助理，Alexa現在在美國很火紅，很多美國人家裡都有一台這樣的語音機器人，能聲控就把很多事情處理好真的分常方便。
根據TechChrunch的一篇報導，Amazon執行長Bezos指出，這個語音助理於2014年首次推出，截至今年Q3為止，Amazon已經賣出2000多萬台Echo，這個數字有多多?
大概就快要跟台灣人口一樣多了吧!
目前哪兒可以買的到Alexa Echo呢? 僅有美國、英國、一些歐洲國家和日本
以下是Amazon到現今推出的相關語音助理的產品
在2015年我在美國唸完研究所畢業後，去到親友家，發現家裡多了一個語音助理，那位就是Alexa，那時候只是覺得，哇，Alexa蠻不錯的，可以讓我聲控開燈關燈、幫我撥放音樂和早上叫我起床。結果今年年中時當我去美國拜訪親友，發現他們又買了好多語音助理，Alexa echo dot和Google home assistance。不只親友們對這些語音盒子很沉迷，許多美國人家裡也有語音盒子，那以上那麼多種產品，我們到底要買哪一種裝置呢? 明天就來跟大家揭曉哪種裝置最符合您的Alexa~",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190616,ModernWeb,1,每日文章推薦系列,1,Day1為何我要這麼做,fripig,https://ithelp.ithome.com.tw/users/20065773/ironman,1512409908000000000,1070,"本來只是想訂閱RSS
後來覺得RSS沒有每天看
數字就會一直長上去 然後就懶得看了
所以就覺得自己還是適合手動看文章的方式
因此就每天自己開四十幾個頁面自行過濾哪些文章感覺可以看
以下是網站列表
個人興趣比較廣泛 所以會看到裡面有不是技術文章的東西
不過每天順便看一下有沒有更新也不會多花多少時間
範圍主要是跟網站架設有關的就會看
基本上就靠上面那幾樣
看完以後把tab匯出記錄到github
中間如果看到值得分享的就會另外分享到plurk
plurk就會自動轉到FB了(限好友
並且標注技術文章的hashtag
再利用ifttt把文章同步到blogspot tumblr
備份到信箱 就完成紀錄了
目前已經紀錄了四百多天
雖然也是因為個人閱讀速度算快的
所以每天大概是花不到一個小時看完所有文章
大部分是快速掃過 不看詳細內容
如果看到內容有趣 才會開始細讀 並且分享
個人是認為知識要先建立好腦袋中的index
遇到問題的時候自然會知道要去哪裡找解決方式
目前靠這樣累積也累積了不少知識量
不過也只是廣 不是深 要把技術學到深還是要靠自己去看
這類文章其實都能得到一些經驗
讓你知道會這樣的不只你一個XD
看到好的學好的
看到壞的就盡量避免自己這麼做
是的 昨天只有這麼一篇",,,"['起因', '看哪些網站', '搭配工具', '雜語', '分享的文章']",,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190614,DevOps,2,用30天來介紹和使用Docker系列,1,Day1介紹為何要使用Docker,yangj26952,https://ithelp.ithome.com.tw/users/20103456/ironman,1512408764000000000,1042,"時間過得很快，又到了一年一度的 IT 鐵人賽，這一次要寫的題目是在這 30 天內介紹和使用Docker。
介紹 Docker 的主要原因，有以下幾點：
在安裝一些service時常常會遇到作業系統版本不同、Kernel不同、環境變數設定沒設定或是設定檔沒設定正確…等，而造成 service 無法正常的啟動起來，會花費很多的時間在 trial and error 而造成工作的效率變差。
如果在程式的撰寫過程中需要有多個測試環境，例如測試不同版本的 service 是否能在我們撰寫的 code 上正常的執行。如果把這個 service直接安裝在自已的作業系統環境上，需要換版本測試時會反覆的安裝和解安裝，容易因為沒有解安裝完整，舊版的檔案還存在。而造成版本混亂service 也就無法正常的啟動起來。
如果在開發一個 open source 的專案，如果希望要給很多人來使用，那就需要有一個簡單的安裝方法。像是可以把開發完的程式包成 docker image 然後放到 docker hub上，使用者如果想要使用，只要下幾行 command 就可以把我們開發的程式執行起來了。
以上的幾個問題在 Docker 出現之後，就可以用最簡單的指令將程式執行起來，然後可以依照不同的版本做程式的切換，如果在測試完成之後不要使用這些程式可以很快速的刪除掉。可以把不同版本的程式隔離開來，解決不同版本之間的衝突。
這就是使用 Docker 好處所在。 但是會有人問那跟使用 VM 和使用 Docker 之間的差別在哪？
以下列出 VM 和 Docker 的差異
VirtualBox:
Docker:
Docker 和 VM 不只可以單獨的使用，也可以搭配的拿來使用。要確保整體系統完整的虛擬化就先用 VM 安裝作業系統，然後在 VM 的作業系統上使用 Docker 啟動需要執行的 container。這可以按照使用者的使用情境決定要如何的安排使用 VM 和 Docker。
以下的 Demo是如何透過 Docker 快速的把 Nginx Service ( Nginx 是一個 Web Server 的 service) 執行起來：
1.在有安裝Docker的機器上執行以下的指令
2.執行的 console 如下圖

3.打開 Browser 輸入 http://localhost ，就可以看到如下的畫面

以上只要輸入一個指令就可以把 Nginx Service 執行起來，可以看出使用 Docker 的簡單性和方便性，上面docker run的指令會在未來 30 天內為大家介紹。
這 30 天預計要介紹有關於 Docker 的內容如下：",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190609,SoftwareDevelopment,0,30天從零開始到使用SpringCloud建立完整微服務架構系列,1,Day1-認識Spring,Sam,https://ithelp.ithome.com.tw/users/20107338/ironman,1512408724000000000,707,"先簡單自我介紹一下
英文名 Sam 主要都是寫 Java,志願就是想打造一個世界級的產品,
因此任何可以加強或改善的程式 軟體 架構 都非常有興趣.
這邊是我個人相關資訊 歡迎加我或是跟我聊聊一起學習
SAM的程式筆記
GitHub
Linkedin
twitter@samzhu0318
好...那簡單介紹一下 Spring
要說近幾年做 Java 開發的, 幾乎多多少少都會用到 Spring, 除了一些極特殊需求的無法使用以外.
但 Spring 的 Xml 配置地獄卻造成很多人學習上的困難.
但是大約在 2014 年左右, Pivotal 推出了 SpringBoot, 開箱即可用的特性大大改變開發流程.
隨後 2016 開始推出了 Spring Cloud, Spring 的微服務架構佈局就大致上已趨近完整了.
但 Spring Cloud 也不是橫空出世的一個全新項目推給白老鼠開發者用,
他大致上都是整合 Netflix 的微服務開源項目,並更加強符合近一兩年比較流行的套件來組合使用,
而 Netflix 算是世界是少數幾家很早就開始微服務化的公司(大約在 2012 年),
所以這套架構是已經被驗證可用的
好,大概了解一下怎麼來的
後面介紹一下整個 Spring Ecosystem, 其實整個 Spring 的生態是相當完整的,
只要不要是太特殊的需求, 大部分你都不需要重複造輪子, 其實挺值得投資時間下去學會的
沒有把全部列出來,把用過的或是一些之後會用到的列出來而已",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190612,ModernWeb,0,跟著網頁動ㄘ動系列,1,DAY1-就來動ㄘ動,EllenK,https://ithelp.ithome.com.tw/users/20107540/ironman,1512408537000000000,732,"我是Ellen，喜歡設計畫面的前端工程師。
目前仍在學習中！
想要筆記一些工作或是學習的紀錄。
接下來會努力寫一些常用的基礎網頁特效等等。
當然，首先要先勉勵自己寫完30天哈哈
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190613,SoftwareDevelopment,1,認識scala系列,1,Scaladay1(Runscala),daniel0614,https://ithelp.ithome.com.tw/users/20107343/ironman,1512407723000000000,775,"在還沒開始之前有些稍微找了一些 scala 的資料．scala 基本的核心概念或許就是名字的本身 scalable(sca) language(la)，感覺這語言就是要讓它的擴充性很強大．而且很有意思的是發現它還可以用來實作 functional programming，但 scala 是基於 JVM 的語言，Java 卻是 object oriented programming，這樣看起來的意思是 scala 可以跨越 functional programming 及 object oriented programming 的一種語言．但由於本身只會一點點 java，也不太了解 functional programming．所以無法很宏觀的來看待 scala．不過相信一種語言用久了一定會漸漸了解它的好與不足的地方．所以還是別想太多一天一天的來認識 scala 吧～
1.下載scala-2.12.4版本(需要jdk1.8)，這邊使用的是scala-2.12.4.tgz
參考網址：https://www.scala-lang.org/download/
2.下載後解壓縮，設定環境變數(vi ~/.bash_profile)
修改完後，重新讀取設定檔：
確認java版本
直接執行scala程式
執行HelloWorld.sh
scala 安裝時需要安裝jdk．
執行scala有三種方式：",,"['前言', 'Run scala']","['scala安裝：', '使用指令執行scala：', '總結']",['使用三種方式印出HelloWorld．'],,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190573,SoftwareDevelopment,2,爬蟲始終來自於墮性系列,1,好爬蟲，不玩嗎？,Howard,https://ithelp.ithome.com.tw/users/20107159/ironman,1512407103000000000,1231,"科技始終來自於惰性，因為想要偷懶，希望能把麻煩事一次解決，所以自動化一直是我很感興趣的題目。也因為自己是名 Web 工程師，所以對於網路的自動化也就特別上心，為了讓自己有更多的時間，所以也就常常自幹很多小工具、小服務和設計便利的流程，而爬蟲，是我最喜歡的一個挑戰。
會挑選爬蟲這個主題，主要是因為每個人平常日常都很習慣地在網路上獲得資訊和操作動作，但其實每天做的動作都很重複，而我們應該要去主動創造出可以節省我們時間的工具，不管是幫助自己或是幫助其他人。
在玩爬蟲的過程當中，除了必須具備網路的基本知識外，常常需要去換位思考，把自己當成是開發者，猜測開發過程中的邏輯和流程，找尋蛛絲馬跡，利用各種工具，在最適合的路徑和角度切入。爬蟲也不是一個新的玩意，他已存在許久，但隨著時代演進，網頁越來越華麗，各種網頁製作方式和技巧幾乎一年一大變，所以爬蟲也持續有新的挑戰與課題。
對我來說，爬蟲不只是抓抓資料，也不僅是自動化一些重複的流程，更是一種諜對諜的挑戰。從小我就對駭客有很大的憧憬，只是長大以後沒學好，不是那塊料，但接觸爬蟲之後，似乎多多少少能滿足一點點小時候的願望。
這次的鐵人挑戰賽，會透過 Node.js 實作，寫下我這幾年中所學習到的心得與技巧，我會分為兩個部分做介紹，第一個部分會介紹基礎知識，包含爬蟲原理、思考模式、常用工具、抓取技巧；第二個部分會以實作的方式，透過實作爬蟲的過程，去更深入的了解和體會各種應用技巧。
目前已經列出主題大綱，包含 PTT 爬蟲、購票系統、社群網站、資源網站、免空...。當然，若有更好的題目或有興趣的題目，可以留言給我，我也會將這些當作其中的主題。
在整個玩爬蟲的過程中，抓取資料其實只是其中一環，抓取資料固然重要，但如何應用資料也是同等重要。在我們取得資料後，往往會有一系列的處理動作，例如最單純的將資料拋給下一站、觸發通知、自動化、轉換成 API 再應用等等。不過礙於篇幅，我們在這個系列並不會實做這些事情，只會提及後續相關應用，若有興趣的夥伴，也很歡迎自行取用裡面的任何程式碼和任何文字內容再加以加工應用，記得註記就好。","['為什麼要玩爬蟲', '進行的方式與主題', '延伸動作']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190610,ModernWeb,1,挑戰CSS30天系列,1,day1_連接樣式,小斑,https://ithelp.ithome.com.tw/users/20106496/ironman,1512406722000000000,691,"在網頁上連接的預設樣式為藍色，且有下劃線。
改變此預設的樣式之範例：",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190581,ModernWeb,3,Next.js+各種套件組合系列,1,Next.js功能及介紹,polo,https://ithelp.ithome.com.tw/users/20103438/ironman,1512400270000000000,1708,"介紹
在設定一個 React 專案時候，通常會使用 create-React-app 這個套件來快速產出開發樣板環境,而另外一個選擇 Next.js 則包好了許多功能,例如Server Side Render (SSR),Webpack,Router....不需要額外再多花時間在設定方面,但同時又有彈性可以擴充,非常的快速可以馬上開發專案,在使用next時候因為是基於React,如果沒有React基礎要記得補一下,在這30天中會以Next.js的各種組合來介紹
功能
Next.js功能一直快速增加中,目前以下列出來的是 Next4 版的功能
1.Automatic Code Splitting
CODE SPLITTING可以在切換 Router的時候把需要的程式碼做分割 達到最輕量化 而加快速度，因為 Next.js 的Router的目錄是在pages底下使用 File-System 架構目錄來替代 Router 這部分的 Code Splitting 已經內建了
2.Css
Built-In Css Support
Next.js之中有內建一套 style jsx 的Css In Js 的功能，如下面的風格
PS.  Next.js是很彈性的也可以使用其他如Jss或是 styled-component....等等的Css In Js套件
3.Static File Serving
靜態檔案的約定目錄，可以把一些靜態檔案都放在這裡例如圖檔，聲音檔案等等都可以在根目錄下的static(約定目錄),也可以透過Express去指定
4.Populating
在Next.js中因為是使用 React Render 所有的程式碼都會 Render在一個DOM節點下,如果今天要改變Document 的 Head 裡面的或是等等就可以使用 Next.js 提供的 Head 元件
5.Fetching Data And ComponentT LifeCycle
Next.js提供了 Server Side Render 功能當網站使用了SSR 的部分的時候為了SPA與SSR同步 所以提供了一個生命週期 getInitialProps 方便前後端一致
6.Routing
Client-Side的部分 Next.js 提供 Link 工具可以使用 import Link from 'next/link'
在轉 Routing 時候 Next.js 綁定一些功能,例如 Prefetch 功能可以提前把指定的下一頁預處理好增加ux體驗
除了Link 像使用tag A href 的方式寫在 JSX 中外 ,如果要在程式中使用 API LINK 的功能可以使用
import Router from 'next/router'  範例如下
6.3.ROUTER EVENT
通常可以用在過場的時候,使用以下的一些EVENT管理, 常見可以用在LOADING的圖樣效果
onRouteChangeStart(url) - 開始轉換ROTUER時觸發
onRouteChangeComplete(url) - 完成時
onRouteChangeError(err, url) - 有錯誤時
onBeforeHistoryChange(url) - 如果有異動 BROWSER時
7.ShallowW Routing
再換頁的時候不去執行 getInitialProps 如果希望在同一頁底下每次的參數改變時候不執行 getInitialProps 就可以打開Shallow
8.Useing a High Order Component
React 常用的 HOC 在 Next.js 元件中也是可以使用的
9.Prefetching Pages
同上述 Router功能 ，使用 import Link from 'next/link' LINK有提供PREFETCH功能可以預先 Preload 資料的功能
10.custom Server  And Routing
Next.js 可以客製化綁定常見的Server Express Koa2 Hapi Connect....等 Routing 部分也非常彈性可以完全自定義
11.Dynamic Import
動態載入通常可以先顯示某些頁面，然後元件可以再慢慢加載，通常也會使用在 Loading 效果, SSR 部分可以自己決定需不需要使用,同時也支援多元件包成同一個動態載入元件
12.Custom 
在預設 React DOM 結點 Render 之外，如果要填加一些設定就可以在目錄中的 pages 中增加一個 _document.js 的檔案
在這裡就可以在編輯更多自訂義的玩意兒
12.1  Custom Error HandLing
NEXT提供了 ERROR 元件可以使用
import Error from 'next/error'
12.2  Custom Congiuation
一般NEXT預設輸出目錄是在.next底下，如果要設定輸出為其他目錄可以在 next.config.js 底下設定
12.3 Customing Webpack  Config
因為 Next.js 把基本會用倒的 Webpack 都包好了，如果要增加功能的話可以到 next.config.js 設定
12.4 CUSTOMIZING BABEL CONFIG
如果想要掛一些BABEL的新功能 就可以在跟目錄底下設定一個.babelrc的檔案
在掛入想要增加的PLUGIN 例如
14.PRODUCTION DEPLOYMENT
Next.js 可以使用 now 直接發布到 now 提供的主機上 https://zeit.co/now
now 主機有提供 http2 功能，透過 now 提供的 cli 介面 在專案目錄下直接下 now 即可部署
15.STATIC HTML EXPORT
靜態頁面輸出不需要 Server Part 的功能的時候使用，可以參考以下網址
https://github.com/zeit/Next.js/tree/canary/examples/with-static-export
以上是 Next.js 提供的功能，接下來的30天將會介紹 Next.js 與各種套件的組合 走向開心的開發 之路 GoGo
Next.js 相關資源 在github 可以找到 https://github.com/zeit/Next.js",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190597,DataTechnology,1,"Hadoopecosystem工具簡介,安裝教學與各種情境使用系列",1,HadoopEcosystem系列文簡介,stana,https://ithelp.ithome.com.tw/users/20107349/ironman,1512399727000000000,798,"基於 Google 2003 年發表了 MapReduce 與 GFS(Google File System) 的論文，在兩位
Hadoop 創始人 Doug Cutting 與 Mike Cafarella 的努力下，Hadoop 0.1.0 於 2006 年釋
出。
從 2006 年到現在， Hadoop 依然就像 Doug Cutting 所說的 “ 持續在進步 ”，目前的穩定
版本已經來到了 2.8.2，而 3.0.0 的釋出時間也即將來臨。
在 Big Data 的世界，Hadoop 目前成為不可或缺的主角，而依附在 Hadoop 上所發展出來
的 Project 也非常的多。在接下來的 30 篇文章中，除了 Hadoop 以外還會介紹下列的
Ecosystem Project，內容包含介紹、安裝教學、故障排除與各 Project 使用情 境。
敬請期待接下來一系列的文章吧！",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190595,ModernWeb,1,重新學習網頁設計系列,1,DAY1.HTML5表格Table,CIAN,https://ithelp.ithome.com.tw/users/20102825/ironman,1512397479000000000,797,"在很久以前, 曾經人們大量的使用table來排版, 但table 帶來的巨大的限制, 我們沒辦法隨心所欲地使用它來完成多變繁瑣的佈局, 必須層層嵌套table來達到目的。
後來div佈局模式為大家帶來一道曙光, 我們能夠用更合理的方式來達到目的而使用大量不必要的table標籤來hack佈局。
且在之後可能常會不經意地聽到人們提到那以前table佈局模式是多麽的罪惡多麽的多麽的不再該被使用。
但真的是這樣嗎？
如果真的是這樣那為何在現今網站上還是常見到table到使用呢？
table的確還是有它的存在價值的, 或許它真的不適合與來做頁面佈局, 但在呈現大量報表式資料時table還是相當好用的。
HTML5問世後其實為table增添了許多能力。
搭配CSS3的@media更是為table打開了一道新窗。
本文將介紹如何使用table搭配HTML5特性
其內容包含 table、 tr、th、td、caption、thead、tbody、tfoot、colgroup、col 元素。
接著將會在下一單元介紹如何使用table搭配CSS3特性
表格元素
預設 CSS 屬性
大家一定見過帶有attribute的table例如：width、border、align ...
但幾乎全部的tableattribute都已經被標示為Not supported in HTML5.
樣式的設定較合理的做法是定義CSS屬性，而不是直接定義在元素attrubute當中。
table元素在javascript中屬HTMLTableElement實例
且帶有rows、tBodies兩個元素集合屬性
表示table中的 row 元素
預設 CSS 屬性
tr元素的屬性align、bgcolor、char、charoff、valign都已被標示為Not supported in HTML5.
tr元素在javascript中屬於HTMLTableRowElement實例
且帶有cells元素集合屬性
作為table的一般 cell 元素
預設 CSS 屬性
td元素的大多的屬性都已被標示為Not supported in HTML5.
現有的合理屬性限於colspan、headers
td元素在javascript中屬於HTMLTableCellElement實例
實例屬性cellIndex性返回當前td的index於父tr, 引所由0開始。
作為table的標題 cell 元素
預設 CSS 屬性
th元素的大多的屬性都已被標示為Not supported in HTML5.
現有的合理屬性限於abbr、colspan、rowspan、headers、scope、sorted
th元素在javascript中屬於HTMLTableCellElement實例
實例屬性cellIndex性返回當前th的index於父tr, 引所由0開始。
caption應該被設定於table的第一個子元素, 用於表示該table的title
預設 CSS 屬性
caption元素的所有屬性都已被標示為Not supported in HTML5.
caption元素在javascript中屬於HTMLTableCaptionElement實例
colgroup與col都是很特別的新元素, 我們可以用它來設定table的columns樣式
以下是一個簡單的使用範例：
預設 CSS 屬性
colgroup與col元素多數屬性都已被標示為Not supported in HTML5., 僅開放span屬性
colgroup與col元素在javascript中屬於HTMLTableColElement實例
colgroup與col元素使用上注意事項
用於將table中的表頭內容群組化
預設 CSS 屬性
thead元素的所有屬性都已被標示為Not supported in HTML5.
thead元素在javascript中屬於HTMLTableSectionElement實例
用於總結table中的內容, 此元素不管定義於table元素的第幾子元素, 最終都將被html渲染製該table中最後子元素。
預設 CSS 屬性
tfoot元素的所有屬性都已被標示為Not supported in HTML5.
tfoot元素在javascript中屬於HTMLTableSectionElement實例
用於table中的主要內容群組化
預設 CSS 屬性
tbody元素的所有屬性都已被標示為Not supported in HTML5.
tbody元素在javascript中屬於HTMLTableSectionElement實例
本文介紹至此介紹了table元素中的各個子元素的基本特性, 以及使用上的注意事項, 接著將會在下個單元介紹table搭配css3使用。
最後附上一個現代版本的table範例以及其DEMO
本文資料來源 w3cschoold.com",,"['table', 'tr', 'td', 'th', 'caption', 'colgroup & col', 'thead', 'tfoot', 'tbody']",['總結'],,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190592,Security,0,IT安全稽核系列,1,1.1是否已規劃並定義出符合組織需要之資訊安全管理系統之適用範圍？及自組織範圍排除之理由。,wkpeng,https://ithelp.ithome.com.tw/users/20107482/ironman,1512396238000000000,744,"首先，針對於公司內部資通安全之稽核，本人以行政院所公布『行政院資通安全稽核服務團』所提供的『資通安全外部稽核(自我評審)表』當作公司自我審核的內容，然而目前我們公司在評估時，常發現公司與行政院版本有極大之落差，因此我們單就每一項的問題，逐一說明可行與不可行，又或者有其他替代之方式，來合理解釋其有效性，本團隊就依此為目標，逐日解說。
以下為行政院資通安全稽核服務團歸類第一大項1.1，本人依此來說明及分析
一、資訊安全管理系統 （管理階層、資訊安全組織）
1.1是否已規劃並定義出符合組織需要之資訊安全管理系統之適用範圍？及自組織範圍排除之理由。
說明：此項說明在於三個重點：1.規劃。2.定義。3.符合組織需要。
台灣上市櫃公司(包含興櫃)，大約為兩千家，這類型公司大多經立主管機關之要求，將公司的系統做有效的規劃。然而規劃完畢之後，隨著組織變化，很多的資訊安全系統，漸漸就不符合使用，最顯著就是公司ERP系統，並未依照各單位流程進行，同時也未見稽核人員針對系統內的各個主管的核決權限做出改善及建議，最後，很多公司還是依照舊有的進行。為何會如此？ 主要原因，本人提出三點說明，
1.	習慣性：習慣養成後，就算系統已不符合組織使用，大部分管理人員會排拒整個流程的更新，同時加上組織大部分人，學習性不強，寧可依賴習慣。
2.	不確定性：即使願意學習，對於新的元素加入，充滿不安定感，怕隨時一個錯誤會影響自己或組織整體的表現。
3.	排他性：就算肯學習，也願意接受錯誤的風險，然而，卻被整個組織所排拒。
本人認為，要有效執行1.1，實則已經遭遇莫大之困難，上市櫃公司如此，更遑論佔台灣企業最大比例之中小企業了。
所以本人，針對上述三項提出解決方案，
1.	破解習慣，可先運用獎勵或比賽的方式，慢慢讓各單位組織察覺資安的定義在哪裡。
2.	破解不確定性的方式，就在於鼓勵員工不要怕犯錯，資安團隊是組織最強的依靠，容錯也協助您排錯。
3.	破解排他性的方式，最佳的方式大家普遍說法是溝通，然而，就是因為無法溝通才會出現排擠，如果無法溝通，就必須由最高層主管出面強制執行。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190554,Security,1,資安的學習心得及分享系列,1,DAY1感測器可以結合在IDPS嗎?,Fu-sheng,https://ithelp.ithome.com.tw/users/20107445/ironman,1512394774000000000,737,"感測器是一種檢測裝置，能感受到被測量的信息，並能將感受到的信息，按一定規律變換成信號或其他所需形式的信息输出

而多個感測器(Sensor)加上一到數個無線資料收集器(Wireless Data Collector)就能夠成無線感測網路(Wireless Sensor Networks)。
WSN(無線感測網路)常見用途

利用在房子上，便會形成一個智能家庭，紀錄家中的資訊，使居住環境更加便利及安全。

用在城市可以變成智能城市。常見的例如公車時刻表、GPS系統等，使人們能得到更加精準的資訊，做出更完善的判斷。
未來的挑戰?
無線感測器用於網路的前景是非常廣泛的，同時也被人類認為是未來生活的重要技術，同時提供我們人類獲取訊息、處理訊息的重要管道之一。
由於WSN本身的優點，使得它與現有的傳統網路技術之間存在較大的區別，給人們提出了很多新的挑戰。
回到今天的討論：
感測器可以結合在IDPS嗎?
我個人覺得是可行的。
現在偵測系統(IDPS)技術上還沒有很成熟，結合WSN本身的優點，設立許多的偵測點，偵測惡意封包或可疑信息，使系統有足夠的時間做出反應，達到防禦的效果，只要技術足夠成熟，未來的發展是很可觀的。",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190588,ModernWeb,2,認識Chrome開發者工具系列,1,寫在前頭,konekoya,https://ithelp.ithome.com.tw/users/20103325/ironman,1512393872000000000,829,"前端工程在過去這幾年變化快的驚人，JavaScript 從原先在頁面上只負責簡單的介面互動操作，到現在像是 SPA (Single Page Application) 架構，幾乎所有的頁面都是由 JavaScript 生成，前端工程師所需要撰寫及維護的 JavaScript 程式越來越多。面對這麼多的 JS 原始碼，我發現良好的架構、測試及工具像是 ESLint 都是可以協助讓開發及維護變的更輕鬆。而在這當中還有一項重要的工具，也是我們這一系列要介紹的：開發者工具。
開發者工具對於前端工程師來說，我覺得就像是後端的 IDE ，可以下中斷點 ( 或debugger 在你的程式碼裡 )，查看程式在這個中斷點的作用範圍 (Scope)，狀態的變化甚至直接編輯及修改程式，然後再執行等等。我認為開發者工具是我所有技術的學習投資中，算是報酬率很高的一項工具，當你學會了如何善用這個工具，你的工作會變的更加輕鬆，除錯 (Debug) 的時間可以大幅縮短 ( 雖然使用開發者工具並不保證一定可以找到 bug XD)
在這個系列中，我希望可以分享開發者工具的一些主要功能，因為開發者工具可以做的事情實在太多了，而且蠻多功能我甚至也沒用過冏

而我們要使用的開發者工具是 Chrome 的開發者工具 (Chrome Developer Tools) 老外常簡寫為 DevTools 。為什麼選擇 Chrome 呢？因為 Chrome 的開發者工具是我最熟悉的，再來就是 Chrome 的開發者工具演進的非常快，新功能是一直不斷的增加，老實說，它的介面也一直不變的在變化。但是我想就算你是使用其他的開發者工具像是 IE 或是 Firefox ，除了介面之外，很多功能及概念都是相同的。
因為 Chrome 的更新頻率非常高並且開發者工具的使用者介面也常常在更動，所以在這個教學裡面提到的功能位置或是頁面擷圖，是會有可能與你實際使用的版本不同的。這個教學的寫作期間所用的是 Chrome 62.x
下面就是我們暫定接下來三十天的主題列表，之後有可能會再做調整，如果有任何更新的話我會再回來更新這個列表。",['前言'],"['為什麼要用 Chrome 開發者工具來介紹', '會討論到的主題']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190579,ModernWeb,3,30天串接30個GoogleAPIs的服務應用系列,1,[day1]-第二次參加鐵人賽的決心，以及粗談我選擇的主題,KingTzeng,https://ithelp.ithome.com.tw/users/20103130/ironman,1512390226000000000,928,"明年2月就是我進資訊業的第二年了....
說實在Web這一塊在近兩年來的變化真的很多！ 
去年你可能只要會JQ，職場上的老闆還會要你，都還應付的來~
今年很明顯打開奴力銀行，F2E的職務不論是加分要點或是必備要點，都有出現Javasript的三大框架
並且JS也釋出新的規範ES6，然後就打趴我了不是啦XD 是還在學習中...(大誤XD
所以身為前端開發者學習真的是學無止盡啊～
像我現在就在學新的框架研究ReactJS，一起努力吧（握拳！
去年雖然我有完賽，但是很心虛....因為有大概15篇都沒有內容（被打...
所以今年想說選比較有主題性的來寫，以一天一主題的方式來記錄下來這一年串接Google APIs＆FB API的心得，並應用於Web、Mobile APP裡～
其中一部分是我工作上的實務經驗、一部分是今年去參賽的作品經驗
主題包含：Google Maps APIs、FireBase、FB Login API等
並上傳到Github上面去，順便練習Git，就這樣作為對自己最後的期許來結束2017！
鐵人賽！加油！
工商時間：有興趣可以下載我撰寫(公司作品)的CallCar APP iOS&Android先來觀看一下Google Maps的應用，順便出去玩XD
工商時間若不妥請私訊我，我會把他撤掉的.....只是想技術交流啦XD
[ 著作權為King Tzeng所有，請勿抄襲或致敬＝口＝]",,"['楔子', '關於主題 -', '文後 -']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190563,自我挑戰組,0,網頁學習日誌系列,1,RWD:LOGO與選單的排版,yuski,https://ithelp.ithome.com.tw/users/20107321/ironman,1512389752000000000,778,"首先先設定桌面板的logo和選單並排排版，之後在再新增響應式網頁斷點，讓使用者可在其他裝置觀看。
另外要注意網頁head裡面的mata一定要有Viewport這樣網頁才能變成響應式。
HTML:
設定Header內含logo和menu的ul li項目，裡面皆包含a連結。
CSS：
結果如圖片

因為手機螢幕畫面小，所以都縮成單欄，只要把float都調整成none，再把寬度設定為%，Header的固定高度取消。
@media為手機和平板的斷點，也就是設定響應式的重要關鍵，把上面所提到的float、寬度、高度等程式放在裡面做修正，就可以讓網頁變成響應式網頁了!!
CSS：
為以後整理方便和閱讀性，在上面css下方直接新增斷點，在此設平板電腦斷點最大寬度為768px(max-width: 768px )
如下：
結果如圖片

結果會發現li會向右偏，這是網頁沒有使用reset.css，因為各大瀏覽器都有內建設定，造成排版的時候，就得依每個瀏覽器的不同，而多花好多時間來調整改寫 CSS 語法，所以才有reset.css統一格式化。
在此先不加上reset.css，只讓li不會向右偏，代碼如下：
下圖網頁就不會偏向右邊了!!
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190555,自我挑戰組,0,用IT看世界系列,1,緣起,allenjung,https://ithelp.ithome.com.tw/users/20106752/ironman,1512387823000000000,742,"** 關於Allenjung**
Allen的異國料理奇遇記
參賽的勇氣
因為看過所有得獎的作品，無非是以「高規格」的技術文章做為出發點，有些大大甚至是一些論壇還有雜誌上的常客跟主筆，(壓力好大)，再加上今年有個人生最重要的MBO,資管所所以決定這次參賽的scope到底要以技術為主還是以理論為主(嘴砲)，後來在諸多考量，還是用比較沒壓力的方式去做一個紀錄，所以就算GG也不會有太大壓力，畢竟連續30天要發出技術文章，除非之前累積了一堆東西，不然30天真的會被榨乾..............而且有寫過技術文件的人都知道，2年前寫的今年搞不好就不能用，所有的連結跟版本都會更新，所以真的.....隨緣吧~~~~.
openstack-凍仁翔
由於今年10月去交大的openstack的一場研討會，真的讓我非常震驚，到現在心有餘悸，當時非常感謝凍仁翔大大幫忙troubleshooting，還有一些前置準備工作，會後聊了一下，說有IT鐵人賽這東西，然後說可以去參加一下，(這個能吃嗎)??鐵人賽??我只知道....我每次修系統常常修到烙賽......
然後也見識到交大學生的水準，下command line的水準應該可以打趴一堆剛進業界的工程師
雖然openstack這玩意4年前聽過，我在一間詐騙集團公司同事聽來的，為何說他是詐騙集團?那一年我剛從澳洲回來，回來剛好過年，我媽叫我趕快回歸正業(工作)，我就索性104按一按，然後這間公司沒有產線，我也沒看到產品，然後也是個抓交替的缺，這是很多IT人的宿命，大概在我來的第2個月老闆說要在竹北搞個機房然後總公司分公司簡單的VPN架構，我只記得在我離開前，只買好機櫃跟拉好網路還有，至於哪個AD整sendmail，在我離開的時候，偶而上去看看詐騙集團hr下面的別名郵件一堆，根據我的經驗，應該是收不到應徵信，然後在裡面設了一堆別名，看看有沒有機會收到，後來別名不見只剩下電話...............",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190576,SoftwareDevelopment,1,MsBotframework30天上手系列,1,前言.選擇botframework的優缺點,Wolke,https://ithelp.ithome.com.tw/users/20046160/ironman,1512386780000000000,1551,"因為 所以
系列文章請改到這裡來喔!
Microsoft Bot Framework 30天上手 ",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190574,ModernWeb,1,PixiJS，方便好用的WebGL內容產生工具系列,1,[PixiJS-Day-01]為何選擇PixiJS,angelliya00,https://ithelp.ithome.com.tw/users/20106532/ironman,1512386768000000000,808,"在寫這個主題前，我先問了自己
讓網頁上能看到畫面、動態的方式很多，為什麼會特別選擇PixiJS?
各種表現視覺與動態的做法各有其特性：
靜態圖：
沒有瀏覽器限制，但就是不會動。
可以隨螢幕放大，但是無法調整位置。
Gif：
特性與靜態圖類似，但有檔案較大的問題。
影片：
會動，但手機版瀏覽器預設不會播放，
在不同系統裡，影片播放的行為也不相同。
SVG：
效能與瀏覽器支援性與WebGL為底的 PixiJS 不同，
適合的用途也不同。
如果需求是作表格，我還是會建議 D3.js，
(除了D3.js 擅長分析資料外，D3.js 的 DOM 結構也方便處錯)
three.js：
特性與 PixiJS 類似，由於是3維空間、也另有光源與材質可控制。
學習與使用上會比 PixiJS 複雜，視使用需求而定。
HTML 與 CSS：
實際上並不會直接拿來比較，
PixiJS 運用的是 canvas，上頭可以再加上不同的 DOM 元件，
視不同的使用情境，也不一定整個頁面都使用1組 PixiJS 來完成。
PixiJS
使用 WebGL 在 canvas 上繪製內容與製作動態，
支援多點觸控、遮罩與混合模式、可外加 WebGL 濾等。
但缺點同時也是不支援太過老舊的瀏覽器。
因此，使用 PixiJS 也是一種選擇，有其方便與不便的情形。

這是一個我用 PixiJS 做的動態轉錄成的gif，
這個動態用到了遮罩、父元件與子元件動態
(後續會有這個動態的說明文章)
若覺得這樣的前言還不錯，
那就繼續閱讀後續的文章吧！
系列文章分作三個部分:
第一部分：介紹 PixiJS
由於 PixiJS 也許對不少人來說有點陌生
會花一些篇幅在講 PixiJS 是什麼、特色、使用 PixiJS 的專案與官方相關資源等
以及會有一篇提到我做過的例子，用來銜接第二部分的 PixiJS 功能介紹
第二部分：PixiJS 功能與方法說明
介紹 PixiJS 套件的各種方法、實作與注意事項
如何應用在專案上、專案如何向下相容等
第三部分：PixiJS 實作
從我自身做過的例子來說明 PixiJS 一些效果的實作方式",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190557,SoftwareDevelopment,1,Kotlin30天，通過每天一個小demo學習Android開發系列,1,Kotlin開發第1天TapCounter(Button+TextView),Don,https://ithelp.ithome.com.tw/users/20107329/ironman,1512386202000000000,816,"
正式開始練習寫 Android App 的第一天，做一個點擊記數的應用。

熟悉 AndroidStudio 開發環境。
類似於 iOS 開發中使用 XIB 的情景，我們將 code 檔案和 layout 檔案分開來，而 Android 除了有可視化的編輯界面，也支持直接修改 xml 檔案。
res 資料夾下，通常在 layout 下放置 layout 資源，而 drawable 下會放其他素材，mipmap 可以根據不同解析度放置 icon。
1、我們在 res 資料夾下，建立 menu  資料夾以及對應的 menu_main.xml，來 customize menu
2、通過增加 item 的方式，在 menu 上加入按鈕，並設定 id 為 resetButton
3、onCreateOptionsMenu、以及 onOptionsItemSelected 這兩個方法。
4、使用了 when 語法，這個應該類似於 Swift 裡面的 Switch。
5、使用了  menuInflater 方法，讀取自定義的 menu（在 menu 右上方加了一個按鈕，並將 menu 的 layout 獨立了出來）
看起來 4.4 + 5.0 + 5.1 + 6.0 + 7.0  加起來大概 90% 還蠻分散的
不像 iOS 基本上是最新版本向下兼容 1 個版本號，就能占到 90% 了。

第一天就遇到了通過 Android Studio 直接 Build 到手機上的問題。
當我想要直接通過 USB build app 到小米手機上的時候，Android Studio 跳出了錯誤提示。
Installation failed with message INSTALL_CANCELED_BY_USER.
後來查到小米手機需要在開發人員模式裡面去打開允許通過 USB 安裝 App 的選項。
","['系統版本分佈情況', 'Build 到手機上測試', '參考']",,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190562,ModernWeb,8,邁向JavaScript勇者之路系列,1,邁向JavaScript勇者之路-開始,卡斯伯,https://ithelp.ithome.com.tw/users/20083608/ironman,1512385751000000000,2294,"iT邦幫忙的鐵人賽到目前是第四次參加，前幾次參加有兩次是 CSS，而本次是 JavaScript，主要原因當然是 JavaScript 即將要統治世界 (!?)，僅只有 CSS 的能力很難體會這個世界的險惡美好。
JavaScript 能做的事情非常多，Web 端的應用僅是其中的一小部分，現在包含後端、自動化、IOT、區塊鏈...許多軟體運用都可借助 JavaScript 的語言來開發，雖說不一定是最適合所有情境的，但學一個語言做更多何樂而不為呢？
這次所介紹的 JavaScript 不限於瀏覽器上的運用，而是 JavaScript 運作上的概念，主要的文章內容包含：
原型以前的章節約莫佔 15 ~ 20 篇，剩下的章節會介紹 ES6，文章內的語法都可運行在 Chrome Browser 及 Nodejs 環境(詳細需參考版本)。
我希望這篇文章適合給有基礎 JavaScript 觀念，但非相關科系的朋友。
對於具有相關背景的朋友來說，閱讀 MDN 的文件已經非常容易，但如果你和我一樣是屬於半路出家，完全不懂 Hello World 是什麼梗的話，那麼相信本系列文章能夠幫助到您。
本系列文章將會去除許多艱澀難懂的詞彙(但會盡可能附上原文)，用我們平常聊天的語彙來了解 JavaScript。
文章中的範例都可以直接貼在 Chrome Browser Console 內，所以你可以打開 Chrome 的開發者工具 > Console，接下來複製以下程式碼貼上，就可以得到如註解的結果。

除此之外，文章中也會用許多圖例、故事範例，舒緩閱讀上的壓力!?
如果對於文中有任何疑慮或有錯誤也歡迎指正，JavaScript 博大精深，是即將要統治世界的語言 (X)，透過交流我們也更能了解其中的奧妙，哪麼我們就準備開始吧～。
文章同時發表於：https://wcc723.github.io/javascript/2017/12/04/ironman-2017/",,"['系列文章適合誰', '案例說明', '歡迎交流']",,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190566,SoftwareDevelopment,0,BPM企業流程-EFGP開發路程系列,1,[Day1]EasyFlowGP--簡介，架構,esther1101,https://ithelp.ithome.com.tw/users/20105722/ironman,1512385626000000000,836,"大家好，我是蒙恩典的恩恩，目前在一家傳統產業的公司，擔任工程師，
主要負責開發和維護EasyFlow GP
關於此軟體，自己是一邊摸索一邊學習才能有現在一點小小成就。
在學習過程中受到IT邦幫忙的恩惠，也看到網路分享的不多，於是決定參加鐵人賽
和大家分享這半年來所學習到的部分，也會參照鼎新電腦的產品講義
讓大家更認識此軟體。
這30天會盡力分享有關軟體的功能還有開發中所使用到的程式語言(javascript，java...)
若有任何錯誤地方，或疑問還請踴躍發言，畢竟我也還是在學習中。
願彼此切搓，大家皆可以更上一層樓^^
====================================================================
何謂EasyFlow GP ? 這是鼎新電腦股份有限公司開發的產品
主要是應用在公司企業的電子化表單，將簽核流程以電子化方式呈現。
更快速且即時將表單傳遞在組織階級中。
[流程設計畫面]

[流程瀏覽畫面]

EasyFlow GP也可以稱呼BPM

這次分享中我將以EFGP稱呼代表EasyFlow GP。
EFGP是一個以J2EE為平台所設計的系統

--節錄鼎新電腦EFGP產品講義
此次分享的EFGP版本為5.6.3.1 搭配的是JDK 1.6.0_41版本
EFGP的版本在5.6系統要對應JAVA 1.6 若版本太新也會發生某些功能無法正常執行的錯誤。
因此請先確認版本。
JAVA版本:系統控制台

請將自動更新拿掉

檢視版本

EFGP的版本:登入EFGP後，右上角功能

版本頁面
",,,,,,,1513814115190786000
https://ithelp.ithome.com.tw/articles/10190551,ModernWeb,12,前端工程師養成手冊系列,1,初出社會：沒有人一開始就知道自己要做什麼,sfisonly,https://ithelp.ithome.com.tw/users/20040221/ironman,1512382545000000000,3792,"寫這篇文時，我其實蠻羨慕現在看這篇文章的你/妳，因為我花了四、五年時間才確認自己要投入前端工程師的方向。相信大家在決定要投入什麼工作領域時，都會不斷地自我懷疑，自己真的做得到嗎？如果我真的頭洗下去我會不會後悔？找朋友/前輩詢問自己是不是真的做得到？所以每次當我在輔導學生的時候，就很喜歡拿我自己當作案例來分享，以前的我也是和各位一樣經歷過這段時期。
我高中是念普通高中社會組，大學是念多媒體設計系，在學業上我那時其實沒有考慮太多，只求能 ALL PASS 就好，雖然高中、大學教授在授課時也時常叨念我們要學個一技之長，否則出社會是找不到工作的。說真的，在那時我也只當耳邊風聽聽，直到 2008 年大學畢業後進入職場，打開 104 才發現自己在學校所會的東西沒一個是我覺得能夠派上用場的。
在掙扎了一個禮拜後，覺得日子還是得過，所以決定先去麥當勞工作一陣子，期間再好好思考未來的方向。
就當我跑完麥當勞面試，主管也覺得我 ok，我也覺得可能下個禮拜就可以正式上工時，陰錯陽差地接到了一通來自我媽的電話，說要我來她經營的美容 SPA 店裡，她有位客人對我的經歷有興趣... 咦？
我就一邊騎著車呢一邊心裡各種小劇場，「WTF？？？」、「我有什麼經歷我自己都不知道？？」、「老媽你不要鬧了啊啊」，就在心裡各種 OS 時我就來到我媽店裡，也同時遇到了我生命中第一個貴人，周姐。
以前我不知道該怎麼描述她，現在我可以說在那時對她的第一印象就是氣場很強的人，這感覺就很像是你不認識他，但光從他的外表就可以知道對方是個很強的人，就有點像是孫悟空漫畫一樣，他們都會有一種「氣」的存在，當某個人變超強的時候，他們的神秘感應器就會說：「我感到遠方的XXX的氣變得越來越強了！」，大概就是這樣的感覺。
聊了一陣子後才知道原來周姐有一間 SI 開發公司 (SI：System Integration)，最近有在承接遊戲論壇開發的專案，所以希望一個懂資訊又懂論壇操作的資訊助理幫忙，也提到說有興趣的話，他們目前也缺網頁 web 工程師，之後有興趣也可以轉到工程部門，於是問我有沒有興趣去那裡幫忙？我幾乎考慮沒幾秒就答應了，於是我就婉拒麥當勞，隔天就到資訊公司上班了。
我後來思考了下，為什麼當時會那麼快答應這份工作。一部分原因是被周姐氣場震懾到，想要在強者身邊工作外。主要原因也有可能本身對寫程式有興趣。
最早的啟蒙是在高一時，我參加了一個班級網頁比賽，那時用的軟體是 FrontPage，完全不用懂程式語言就可以拖拉出網頁出來實在很吸引人，我就抱著一本 FrontPage 書一邊搞網頁，看到畫面一一被我刻出來，感到非常有成就感。我也曾經有打開程式碼區塊看了一下，結果看到密密麻麻的程式碼就宣告放棄，後來作品得到了優選，也啟發出我對前端之路的萌芽。
直到大學時我才開始重拾程式，雖然那時多媒體設計系是傾向 3D 設計，但我反而對程式有興趣。像是大一修 HTML、CSS 時，發現原來這些東西是我以前做 FrontPage 的底層，於是就比較認真去研究，所以程式課程大部分都是我在罩其它學生，最後我的畢業專題是做 用 Flash 寫 as2.0 程式碼，操控我在 3D 軟體匯出來的圖片來設計一個即時戰鬥遊戲。有覺得很厲害嗎？我那時覺得一點也不，各種邏輯都是從網路上找到各種範例所拼湊出來的功能，雖然在畢業展覽上大家都玩得很盡興，在別人誇讚我時只會感到羞愧。
也因為如此，當我聽到周姐說他們有工程師部門時，可能我內心對程式的嚮往也油然而生，可以的話我想要看一下我大學畢業寫得爛程式碼跟大神工程師寫得有何差別，也讓我在那時毅然決然投入資訊公司。
我相信看著這篇文章的你，其實已經對前端有著莫名的嚮往，或許你也和我一樣產生相同的漣漪，第一次做出網頁並呈現在瀏覽器上感到喜悅，做出一些小項目覺得自己好像蠻有天份的，或是看完文章後發現其實對某某領域也曾經有相同的共鳴，那麼就相當推薦您去試試看那條道路。
你有可能踏出那一步，發現可行就繼續做下去，也有可能踏出去後發現不適合自己，那也沒有關係，至少你靠自己的力量知道自己適合什麼、不適合什麼，人生的道路上本來就是在逐漸瞭解自己，有些時候總是需要一些事件的衝擊慢慢掌握本身的強項與短處，共勉之。
我：「老媽妳說她來店裡好幾次，為啥妳都不知道她自己有開系統公司啊？」
母：「因為她每次來都很累的感覺，做沒幾分鐘就睡著，所以我也不知道她在做啥。」
我：「……」 ( 內心OS該不會是血汗公司吧，天啊啊啊
",,"['初出社會徬徨無助', '人生總是有許多曲折變化，但你是否有抓住機會？', '如果沒有方向，不妨從自己的興趣下手', '如果都在猶豫沒有執行，那便會永遠止步不前', '結尾']",,,,,1513814115190786000
